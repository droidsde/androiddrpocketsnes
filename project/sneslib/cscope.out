cscope 15 $HOME/src/DrPocketSnes/PocketSnes               0002667248
	@2xsaiwin.cpp

43 #i‡!
deföed
(
_SNESPPC
Ë&& !deföed(
__GIZ__
Ë&& !deföed(
__GP2X__
)

44 
	~"¢es9x/¢es9x.h
"

45 
	~"¢es9x/p‹t.h
"

46 
	~"¢es9x/gfx.h
"

48 
	~"¢es9x.h
"

49 
	~"p‹t.h
"

50 
	~"gfx.h
"

53 #ifde‡
MMX


54 
EXTERN_C
 
_2xSaILöe
 (
uöt8
 *
§cPå
, uöt8 *
dñèPå
, 
uöt32
 
§cPôch
, uöt32 
width
,

55 
uöt8
 *
d°På
, 
uöt32
 
d°Pôch
);

56 
EXTERN_C
 
_2xSaISu≥rEagÀLöe
 (
uöt8
 *
§cPå
, uöt8 *
dñèPå
, 
uöt32
 
§cPôch
, uöt32 
width
,

57 
uöt8
 *
d°På
, 
uöt32
 
d°Pôch
);

58 
EXTERN_C
 
Inô_2xSaIMMX
 (
uöt32
 
BôF‹m©
);

61 
boﬁ
 
	gmmx_˝u
 = 
Ál£
;

63 
uöt32
 
	gcﬁ‹Mask
 = 0xF7DEF7DE;

64 
uöt32
 
	glowPixñMask
 = 0x08210821;

65 
uöt32
 
	gqcﬁ‹Mask
 = 0xE79CE79C;

66 
uöt32
 
	gqlowpixñMask
 = 0x18631863;

69 
	$Inô_2xSaI
(
uöt32
 
BôF‹m©
)

71 i‡(
BôF‹m©
 == 565)

73 
cﬁ‹Mask
 = 0xF7DEF7DE;

74 
lowPixñMask
 = 0x08210821;

75 
qcﬁ‹Mask
 = 0xE79CE79C;

76 
qlowpixñMask
 = 0x18631863;

79 i‡(
BôF‹m©
 == 555)

81 
cﬁ‹Mask
 = 0x7BDE7BDE;

82 
lowPixñMask
 = 0x04210421;

83 
qcﬁ‹Mask
 = 0x739C739C;

84 
qlowpixñMask
 = 0x0C630C63;

90 #ifde‡
MMX


91 
	`Inô_2xSaIMMX
(
BôF‹m©
);

94 
	}
}

96 
STATIC
 
ölöe
 
	$GëResu…1
(
uöt32
 
A
, uöt32 
B
, uöt32 
C
, uöt32 
D
, uöt32 
E
)

98 
x
 = 0;

99 
y
 = 0;

100 
r
 = 0;

101 i‡(
A
 =
C
Ë
x
+=1; i‡(
B
 =CË
y
+=1;

102 i‡(
A
 =
D
Ë
x
+=1; i‡(
B
 =DË
y
+=1;

103 i‡(
x
 <1Ë
r
+=1;

104 i‡(
y
 <1Ë
r
-=1;

105  
r
;

106 
	}
}

108 
STATIC
 
ölöe
 
	$GëResu…2
(
uöt32
 
A
, uöt32 
B
, uöt32 
C
, uöt32 
D
, uöt32 
E
)

110 
x
 = 0;

111 
y
 = 0;

112 
r
 = 0;

113 i‡(
A
 =
C
Ë
x
+=1; i‡(
B
 =CË
y
+=1;

114 i‡(
A
 =
D
Ë
x
+=1; i‡(
B
 =DË
y
+=1;

115 i‡(
x
 <1Ë
r
-=1;

116 i‡(
y
 <1Ë
r
+=1;

117  
r
;

118 
	}
}

121 
STATIC
 
ölöe
 
	$GëResu…
(
uöt32
 
A
, uöt32 
B
, uöt32 
C
, uöt32 
D
)

123 
x
 = 0;

124 
y
 = 0;

125 
r
 = 0;

126 i‡(
A
 =
C
Ë
x
+=1; i‡(
B
 =CË
y
+=1;

127 i‡(
A
 =
D
Ë
x
+=1; i‡(
B
 =DË
y
+=1;

128 i‡(
x
 <1Ë
r
+=1;

129 i‡(
y
 <1Ë
r
-=1;

130  
r
;

131 
	}
}

134 
STATIC
 
ölöe
 
uöt32
 
	$INTERPOLATE
(
uöt32
 
A
, uöt32 
B
)

136 i‡(
A
 !=
B
)

138  ( ((
A
 & 
cﬁ‹Mask
Ë>> 1Ë+ ((
B
 & cﬁ‹MaskË>> 1Ë+ (A & B & 
lowPixñMask
) );

140  
A
;

141 
	}
}

144 
STATIC
 
ölöe
 
uöt32
 
	$Q_INTERPOLATE
(
uöt32
 
A
, uöt32 
B
, uöt32 
C
, uöt32 
D
)

146 
uöt32
 
x
 = ((
A
 & 
qcﬁ‹Mask
) >> 2) +

147 ((
B
 & 
qcﬁ‹Mask
) >> 2) +

148 ((
C
 & 
qcﬁ‹Mask
) >> 2) +

149 ((
D
 & 
qcﬁ‹Mask
) >> 2);

150 
uöt32
 
y
 = (
A
 & 
qlowpixñMask
) +

151 (
B
 & 
qlowpixñMask
) +

152 (
C
 & 
qlowpixñMask
) +

153 (
D
 & 
qlowpixñMask
);

154 
y
 = (y>>2Ë& 
qlowpixñMask
;

155  
x
+
y
;

156 
	}
}

161 
	#HOR


	)

162 
	#VER


	)

163 
	$Su≥r2xSaI
(
uöt8
 *
§cPå
, 
uöt32
 
§cPôch
,

164 
uöt8
 *
dñèPå
,

165 
uöt8
 *
d°På
, 
uöt32
 
d°Pôch
, 
width
, 
height
)

167 
uöt32
 *
dP
;

168 
uöt16
 *
bP
;

170 #ifde‡
MMX_BLA


171 i‡(
˝u_mmx
 && 
width
 != 512)

173 
height
; height; height-=1)

175 
bP
 = (
uöt16
 *Ë
§cPå
;

176 
xP
 = (
uöt16
 *Ë
dñèPå
;

177 
dP
 = (
uöt32
 *Ë
d°På
;

178 
	`_2xSaISu≥rEagÀLöe
 ((
uöt8
 *Ë
bP
, (uöt8 *Ë
xP
, 
§cPôch
, 
width
, (uöt8 *Ë
dP
, 
d°Pôch
);

179 
d°På
 +
d°Pôch
 << 1;

180 
§cPå
 +
§cPôch
;

181 
dñèPå
 +
§cPôch
;

187 
uöt32
 
Nexéöe
 = 
§cPôch
 >> 1;

189 
height
; height; height-=1)

191 
bP
 = (
uöt16
 *Ë
§cPå
;

192 
dP
 = (
uöt32
 *Ë
d°På
;

193 
uöt32
 
föish
 = 
width
; finish; finish -= 1 )

195 
uöt32
 
cﬁ‹4
, 
cﬁ‹5
, 
cﬁ‹6
;

196 
uöt32
 
cﬁ‹1
, 
cﬁ‹2
, 
cﬁ‹3
;

197 
uöt32
 
cﬁ‹A0
, 
cﬁ‹A1
, 
cﬁ‹A2
, 
cﬁ‹A3
,

198 
cﬁ‹B0
, 
cﬁ‹B1
, 
cﬁ‹B2
, 
cﬁ‹B3
,

199 
cﬁ‹S1
, 
cﬁ‹S2
;

200 
uöt32
 
¥odu˘1a
, 
¥odu˘1b
,

201 
¥odu˘2a
, 
¥odu˘2b
;

208 
cﬁ‹B0
 = *(
bP
- 
Nexéöe
 - 1);

209 
cﬁ‹B1
 = *(
bP
- 
Nexéöe
);

210 
cﬁ‹B2
 = *(
bP
- 
Nexéöe
 + 1);

211 
cﬁ‹B3
 = *(
bP
- 
Nexéöe
 + 2);

213 
cﬁ‹4
 = *(
bP
 - 1);

214 
cﬁ‹5
 = *(
bP
);

215 
cﬁ‹6
 = *(
bP
 + 1);

216 
cﬁ‹S2
 = *(
bP
 + 2);

218 
cﬁ‹1
 = *(
bP
 + 
Nexéöe
 - 1);

219 
cﬁ‹2
 = *(
bP
 + 
Nexéöe
);

220 
cﬁ‹3
 = *(
bP
 + 
Nexéöe
 + 1);

221 
cﬁ‹S1
 = *(
bP
 + 
Nexéöe
 + 2);

223 
cﬁ‹A0
 = *(
bP
 + 
Nexéöe
 + Nextline - 1);

224 
cﬁ‹A1
 = *(
bP
 + 
Nexéöe
 + Nextline);

225 
cﬁ‹A2
 = *(
bP
 + 
Nexéöe
 + Nextline + 1);

226 
cﬁ‹A3
 = *(
bP
 + 
Nexéöe
 + Nextline + 2);

230 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
)

232 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹2
;

235 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
)

237 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

240 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 =
cﬁ‹6
 && color5 != color6)

242 
r
 = 0;

244 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹1
, 
cﬁ‹A1
);

245 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹4
, 
cﬁ‹B1
);

246 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹A2
, 
cﬁ‹S1
);

247 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹B2
, 
cﬁ‹S2
);

249 i‡(
r
 > 0)

250 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹6
;

252 i‡(
r
 < 0)

253 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

256 
¥odu˘2b
 = 
¥odu˘1b
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

263 #ifde‡
VER


264 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹3 =
cﬁ‹A1
 && 
cﬁ‹2
 !
cﬁ‹A2
 && cﬁ‹3 !
cﬁ‹A0
)

265 
¥odu˘2b
 = 
	`Q_INTERPOLATE
 (
cﬁ‹3
, cﬁ‹3, cﬁ‹3, 
cﬁ‹2
);

267 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹2 =
cﬁ‹A2
 && 
cﬁ‹A1
 !
cﬁ‹3
 && cﬁ‹2 !
cﬁ‹A3
)

268 
¥odu˘2b
 = 
	`Q_INTERPOLATE
 (
cﬁ‹2
, cﬁ‹2, cﬁ‹2, 
cﬁ‹3
);

271 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹3
);

273 #ifde‡
VER


274 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹6 =
cﬁ‹B1
 && 
cﬁ‹5
 !
cﬁ‹B2
 && cﬁ‹6 !
cﬁ‹B0
)

275 
¥odu˘1b
 = 
	`Q_INTERPOLATE
 (
cﬁ‹6
, cﬁ‹6, cﬁ‹6, 
cﬁ‹5
);

277 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹5 =
cﬁ‹B2
 && 
cﬁ‹B1
 !
cﬁ‹6
 && cﬁ‹5 !
cﬁ‹B3
)

278 
¥odu˘1b
 = 
	`Q_INTERPOLATE
 (
cﬁ‹6
, 
cﬁ‹5
, color5, color5);

281 
¥odu˘1b
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

284 #ifde‡
HOR


285 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
 && 
cﬁ‹4
 =cﬁ‹5 && cﬁ‹5 !
cﬁ‹A2
)

286 
¥odu˘2a
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹5
);

288 i‡(
cﬁ‹5
 =
cﬁ‹1
 && 
cﬁ‹6
 =cﬁ‹5 && 
cﬁ‹4
 !
cﬁ‹2
 && cﬁ‹5 !
cﬁ‹A0
)

289 
¥odu˘2a
 = 
	`INTERPOLATE
(
cﬁ‹2
, 
cﬁ‹5
);

292 
¥odu˘2a
 = 
cﬁ‹2
;

294 #ifde‡
HOR


295 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
 && 
cﬁ‹1
 =cﬁ‹2 && cﬁ‹2 !
cﬁ‹B2
)

296 
¥odu˘1a
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹5
);

298 i‡(
cﬁ‹4
 =
cﬁ‹2
 && 
cﬁ‹3
 =cﬁ‹2 && 
cﬁ‹1
 !
cﬁ‹5
 && cﬁ‹2 !
cﬁ‹B0
)

299 
¥odu˘1a
 = 
	`INTERPOLATE
(
cﬁ‹2
, 
cﬁ‹5
);

302 
¥odu˘1a
 = 
cﬁ‹5
;

305 
¥odu˘1a
 =Örodu˘1®| (
¥odu˘1b
 << 16);

306 
¥odu˘2a
 =Örodu˘2®| (
¥odu˘2b
 << 16);

308 *(
dP
Ë
¥odu˘1a
;

309 *(
dP
+(
d°Pôch
>>2)Ë
¥odu˘2a
;

311 
bP
 += 1;

312 
dP
 += 1;

315 
d°På
 +
d°Pôch
 << 1;

316 
§cPå
 +
§cPôch
;

317 
dñèPå
 +
§cPôch
;

319 #ifde‡
MMX_BLA


322 
	}
}

331 
	$Su≥rEagÀ
(
uöt8
 *
§cPå
, 
uöt32
 
§cPôch
,

332 
uöt8
 *
dñèPå
,

333 
uöt8
 *
d°På
, 
uöt32
 
d°Pôch
, 
width
, 
height
)

335 
uöt32
 *
dP
;

336 
uöt16
 *
bP
;

337 #i‡!
	`deföed
(
_SNESPPC
Ë&& !deföed(
__GIZ__
Ë&& !deföed(
__GP2X__
)

338 
uöt16
 *
xP
;

341 #ifde‡
MMX


342 i‡(
mmx_˝u
 && 
width
 != 512)

344 
height
; height; height-=1)

346 
bP
 = (
uöt16
 *Ë
§cPå
;

347 
xP
 = (
uöt16
 *Ë
dñèPå
;

348 
dP
 = (
uöt32
 *Ë
d°På
;

349 
	`_2xSaISu≥rEagÀLöe
 ((
uöt8
 *Ë
bP
, (uöt8 *Ë
xP
, 
§cPôch
, 
width
, (uöt8 *)
dP
, 
d°Pôch
);

350 
d°På
 +
d°Pôch
 << 1;

351 
§cPå
 +
§cPôch
;

352 
dñèPå
 +
§cPôch
;

358 
uöt32
 
Nexéöe
 = 
§cPôch
 >> 1;

360 
height
; height; height-=1)

362 
bP
 = (
uöt16
 *Ë
§cPå
;

363 
dP
 = (
uöt32
 *Ë
d°På
;

364 
uöt32
 
föish
 = 
width
; finish; finish -= 1 )

367 
uöt32
 
cﬁ‹4
, 
cﬁ‹5
, 
cﬁ‹6
;

368 
uöt32
 
cﬁ‹1
, 
cﬁ‹2
, 
cﬁ‹3
;

369 
uöt32
 
cﬁ‹A0
, 
cﬁ‹A1
, 
cﬁ‹A2
, 
cﬁ‹A3
,

370 
cﬁ‹B0
, 
cﬁ‹B1
, 
cﬁ‹B2
, 
cﬁ‹B3
,

371 
cﬁ‹S1
, 
cﬁ‹S2
;

372 
uöt32
 
¥odu˘1a
, 
¥odu˘1b
,

373 
¥odu˘2a
, 
¥odu˘2b
;

375 
cﬁ‹B0
 = *(
bP
- 
Nexéöe
 - 1);

376 
cﬁ‹B1
 = *(
bP
- 
Nexéöe
);

377 
cﬁ‹B2
 = *(
bP
- 
Nexéöe
 + 1);

378 
cﬁ‹B3
 = *(
bP
- 
Nexéöe
 + 2);

380 
cﬁ‹4
 = *(
bP
 - 1);

381 
cﬁ‹5
 = *(
bP
);

382 
cﬁ‹6
 = *(
bP
 + 1);

383 
cﬁ‹S2
 = *(
bP
 + 2);

385 
cﬁ‹1
 = *(
bP
 + 
Nexéöe
 - 1);

386 
cﬁ‹2
 = *(
bP
 + 
Nexéöe
);

387 
cﬁ‹3
 = *(
bP
 + 
Nexéöe
 + 1);

388 
cﬁ‹S1
 = *(
bP
 + 
Nexéöe
 + 2);

390 
cﬁ‹A0
 = *(
bP
 + 
Nexéöe
 + Nextline - 1);

391 
cﬁ‹A1
 = *(
bP
 + 
Nexéöe
 + Nextline);

392 
cﬁ‹A2
 = *(
bP
 + 
Nexéöe
 + Nextline + 1);

393 
cﬁ‹A3
 = *(
bP
 + 
Nexéöe
 + Nextline + 2);

397 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
)

399 
¥odu˘1b
 = 
¥odu˘2a
 = 
cﬁ‹2
;

400 i‡((
cﬁ‹1
 =
cﬁ‹2
 && 
cﬁ‹6
 =
cﬁ‹S2
) ||

401 (
cﬁ‹2
 =
cﬁ‹A1
 && 
cﬁ‹6
 =
cﬁ‹B2
))

403 
¥odu˘1a
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹5
);

404 
¥odu˘1a
 = 
	`INTERPOLATE
 (
cﬁ‹2
,Öroduct1a);

405 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹3
);

406 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹2
,Öroduct2b);

412 
¥odu˘1a
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

413 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹3
);

417 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
)

419 
¥odu˘2b
 = 
¥odu˘1a
 = 
cﬁ‹5
;

420 i‡((
cﬁ‹B1
 =
cﬁ‹5
 && 
cﬁ‹3
 =
cﬁ‹A2
) ||

421 (
cﬁ‹4
 =
cﬁ‹5
 && 
cﬁ‹3
 =
cﬁ‹S1
))

423 
¥odu˘1b
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

424 
¥odu˘1b
 = 
	`INTERPOLATE
 (
cﬁ‹5
,Öroduct1b);

425 
¥odu˘2a
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹2
);

426 
¥odu˘2a
 = 
	`INTERPOLATE
 (
cﬁ‹5
,Öroduct2a);

432 
¥odu˘1b
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

433 
¥odu˘2a
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹3
);

437 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 =
cﬁ‹6
 && color5 != color6)

439 
r
 = 0;

441 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹1
, 
cﬁ‹A1
);

442 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹4
, 
cﬁ‹B1
);

443 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹A2
, 
cﬁ‹S1
);

444 
r
 +
	`GëResu…
 (
cﬁ‹6
, 
cﬁ‹5
, 
cﬁ‹B2
, 
cﬁ‹S2
);

446 i‡(
r
 > 0)

448 
¥odu˘1b
 = 
¥odu˘2a
 = 
cﬁ‹2
;

449 
¥odu˘1a
 = 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

452 i‡(
r
 < 0)

454 
¥odu˘2b
 = 
¥odu˘1a
 = 
cﬁ‹5
;

455 
¥odu˘1b
 = 
¥odu˘2a
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

459 
¥odu˘2b
 = 
¥odu˘1a
 = 
cﬁ‹5
;

460 
¥odu˘1b
 = 
¥odu˘2a
 = 
cﬁ‹2
;

466 i‡((
cﬁ‹2
 =
cﬁ‹5
Ë|| (
cﬁ‹3
 =
cﬁ‹6
))

468 
¥odu˘1a
 = 
cﬁ‹5
;

469 
¥odu˘2a
 = 
cﬁ‹2
;

470 
¥odu˘1b
 = 
cﬁ‹6
;

471 
¥odu˘2b
 = 
cﬁ‹3
;

476 
¥odu˘1b
 = 
¥odu˘1a
 = 
	`INTERPOLATE
 (
cﬁ‹5
, 
cﬁ‹6
);

477 
¥odu˘1a
 = 
	`INTERPOLATE
 (
cﬁ‹5
,Öroduct1a);

478 
¥odu˘1b
 = 
	`INTERPOLATE
 (
cﬁ‹6
,Öroduct1b);

480 
¥odu˘2a
 = 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹2
, 
cﬁ‹3
);

481 
¥odu˘2a
 = 
	`INTERPOLATE
 (
cﬁ‹2
,Öroduct2a);

482 
¥odu˘2b
 = 
	`INTERPOLATE
 (
cﬁ‹3
,Öroduct2b);

487 
¥odu˘1a
 =Örodu˘1®| (
¥odu˘1b
 << 16);

488 
¥odu˘2a
 =Örodu˘2®| (
¥odu˘2b
 << 16);

490 *(
dP
Ë
¥odu˘1a
;

491 *(
dP
+(
d°Pôch
>>2)Ë
¥odu˘2a
;

493 
bP
 += 1;

494 
dP
 += 1;

497 
d°På
 +
d°Pôch
 << 1;

498 
§cPå
 +
§cPôch
;

499 
dñèPå
 +
§cPôch
;

501 #ifde‡
MMX


504 
	}
}

510 
	$_2xSaI
(
uöt8
 *
§cPå
, 
uöt32
 
§cPôch
,

511 
uöt8
 *
dñèPå
,

512 
uöt8
 *
d°På
, 
uöt32
 
d°Pôch
, 
width
, 
height
)

514 
uöt32
 *
dP
;

515 
uöt16
 *
bP
;

516 #i‡!
	`deföed
(
_SNESPPC
Ë&& !deföed(
__GIZ__
Ë&& !deföed(
__GP2X__
)

517 
uöt16
 *
xP
;

520 #ifde‡
MMX


521 i‡(
mmx_˝u
 && 
width
 != 512)

523 
height
; height; height-=1)

526 
bP
 = (
uöt16
 *Ë
§cPå
;

527 
xP
 = (
uöt16
 *Ë
dñèPå
;

528 
dP
 = (
uöt32
 *Ë
d°På
;

529 
	`_2xSaILöe
 ((
uöt8
 *Ë
bP
, (uöt8 *Ë
xP
, 
§cPôch
, 
width
, (uöt8 *)
dP
, 
d°Pôch
);

530 
d°På
 +
d°Pôch
 << 1;

531 
§cPå
 +
§cPôch
;

532 
dñèPå
 +
§cPôch
;

538 
uöt32
 
Nexéöe
 = 
§cPôch
 >> 1;

540 
height
; height; height-=1)

542 
bP
 = (
uöt16
 *Ë
§cPå
;

543 
dP
 = (
uöt32
 *Ë
d°På
;

544 
uöt32
 
föish
 = 
width
; finish; finish -= 1 )

548 
uöt32
 
cﬁ‹A
, 
cﬁ‹B
;

549 
uöt32
 
cﬁ‹C
, 
cﬁ‹D
,

550 
cﬁ‹E
, 
cﬁ‹F
, 
cﬁ‹G
, 
cﬁ‹H
,

551 
cﬁ‹I
, 
cﬁ‹J
, 
cﬁ‹K
, 
cﬁ‹L
,

552 
cﬁ‹M
, 
cﬁ‹N
, 
cﬁ‹O
, 
cﬁ‹P
;

553 
uöt32
 
¥odu˘
, 
¥odu˘1
, 
¥odu˘2
;

561 
cﬁ‹I
 = *(
bP
- 
Nexéöe
 - 1);

562 
cﬁ‹E
 = *(
bP
- 
Nexéöe
);

563 
cﬁ‹F
 = *(
bP
- 
Nexéöe
 + 1);

564 
cﬁ‹J
 = *(
bP
- 
Nexéöe
 + 2);

566 
cﬁ‹G
 = *(
bP
 - 1);

567 
cﬁ‹A
 = *(
bP
);

568 
cﬁ‹B
 = *(
bP
 + 1);

569 
cﬁ‹K
 = *(
bP
 + 2);

571 
cﬁ‹H
 = *(
bP
 + 
Nexéöe
 - 1);

572 
cﬁ‹C
 = *(
bP
 + 
Nexéöe
);

573 
cﬁ‹D
 = *(
bP
 + 
Nexéöe
 + 1);

574 
cﬁ‹L
 = *(
bP
 + 
Nexéöe
 + 2);

576 
cﬁ‹M
 = *(
bP
 + 
Nexéöe
 + Nextline - 1);

577 
cﬁ‹N
 = *(
bP
 + 
Nexéöe
 + Nextline);

578 
cﬁ‹O
 = *(
bP
 + 
Nexéöe
 + Nextline + 1);

579 
cﬁ‹P
 = *(
bP
 + 
Nexéöe
 + Nextline + 2);

581 i‡((
cﬁ‹A
 =
cﬁ‹D
Ë&& (
cﬁ‹B
 !
cﬁ‹C
))

583 i‡–((
cﬁ‹A
 =
cﬁ‹E
Ë&& (
cﬁ‹B
 =
cﬁ‹L
)) ||

584 ((
cﬁ‹A
 =
cﬁ‹C
Ë&& (cﬁ‹A =
cﬁ‹F
Ë&& (
cﬁ‹B
 !
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹J
)) )

586 
¥odu˘
 = 
cﬁ‹A
;

590 
¥odu˘
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹B
);

593 i‡(((
cﬁ‹A
 =
cﬁ‹G
Ë&& (
cﬁ‹C
 =
cﬁ‹O
)) ||

594 ((
cﬁ‹A
 =
cﬁ‹B
Ë&& (cﬁ‹A =
cﬁ‹H
Ë&& (
cﬁ‹G
 !
cﬁ‹C
Ë&& (cﬁ‹C =
cﬁ‹M
)) )

596 
¥odu˘1
 = 
cﬁ‹A
;

600 
¥odu˘1
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹C
);

602 
¥odu˘2
 = 
cﬁ‹A
;

605 i‡((
cﬁ‹B
 =
cﬁ‹C
Ë&& (
cﬁ‹A
 !
cﬁ‹D
))

607 i‡(((
cﬁ‹B
 =
cﬁ‹F
Ë&& (
cﬁ‹A
 =
cﬁ‹H
)) ||

608 ((
cﬁ‹B
 =
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹D
Ë&& (
cﬁ‹A
 !
cﬁ‹F
Ë&& (cﬁ‹A =
cﬁ‹I
)) )

610 
¥odu˘
 = 
cﬁ‹B
;

614 
¥odu˘
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹B
);

617 i‡(((
cﬁ‹C
 =
cﬁ‹H
Ë&& (
cﬁ‹A
 =
cﬁ‹F
)) ||

618 ((
cﬁ‹C
 =
cﬁ‹G
Ë&& (cﬁ‹C =
cﬁ‹D
Ë&& (
cﬁ‹A
 !
cﬁ‹H
Ë&& (cﬁ‹A =
cﬁ‹I
)) )

620 
¥odu˘1
 = 
cﬁ‹C
;

624 
¥odu˘1
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹C
);

626 
¥odu˘2
 = 
cﬁ‹B
;

629 i‡((
cﬁ‹A
 =
cﬁ‹D
Ë&& (
cﬁ‹B
 =
cﬁ‹C
))

631 i‡(
cﬁ‹A
 =
cﬁ‹B
)

633 
¥odu˘
 = 
cﬁ‹A
;

634 
¥odu˘1
 = 
cﬁ‹A
;

635 
¥odu˘2
 = 
cﬁ‹A
;

639 
r
 = 0;

640 
¥odu˘1
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹C
);

641 
¥odu˘
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹B
);

643 
r
 +
	`GëResu…1
 (
cﬁ‹A
, 
cﬁ‹B
, 
cﬁ‹G
, 
cﬁ‹E
, 
cﬁ‹I
);

644 
r
 +
	`GëResu…2
 (
cﬁ‹B
, 
cﬁ‹A
, 
cﬁ‹K
, 
cﬁ‹F
, 
cﬁ‹J
);

645 
r
 +
	`GëResu…2
 (
cﬁ‹B
, 
cﬁ‹A
, 
cﬁ‹H
, 
cﬁ‹N
, 
cﬁ‹M
);

646 
r
 +
	`GëResu…1
 (
cﬁ‹A
, 
cﬁ‹B
, 
cﬁ‹L
, 
cﬁ‹O
, 
cﬁ‹P
);

648 i‡(
r
 > 0)

649 
¥odu˘2
 = 
cﬁ‹A
;

651 i‡(
r
 < 0)

652 
¥odu˘2
 = 
cﬁ‹B
;

655 
¥odu˘2
 = 
	`Q_INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹B
, 
cﬁ‹C
, 
cﬁ‹D
);

661 
¥odu˘2
 = 
	`Q_INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹B
, 
cﬁ‹C
, 
cﬁ‹D
);

663 i‡((
cﬁ‹A
 =
cﬁ‹C
Ë&& (cﬁ‹A =
cﬁ‹F
Ë&& (
cﬁ‹B
 !
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹J
))

665 
¥odu˘
 = 
cﬁ‹A
;

668 i‡((
cﬁ‹B
 =
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹D
Ë&& (
cﬁ‹A
 !
cﬁ‹F
Ë&& (cﬁ‹A =
cﬁ‹I
))

670 
¥odu˘
 = 
cﬁ‹B
;

674 
¥odu˘
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹B
);

677 i‡((
cﬁ‹A
 =
cﬁ‹B
Ë&& (cﬁ‹A =
cﬁ‹H
Ë&& (
cﬁ‹G
 !
cﬁ‹C
Ë&& (cﬁ‹C =
cﬁ‹M
))

679 
¥odu˘1
 = 
cﬁ‹A
;

682 i‡((
cﬁ‹C
 =
cﬁ‹G
Ë&& (cﬁ‹C =
cﬁ‹D
Ë&& (
cﬁ‹A
 !
cﬁ‹H
Ë&& (cﬁ‹A =
cﬁ‹I
))

684 
¥odu˘1
 = 
cﬁ‹C
;

688 
¥odu˘1
 = 
	`INTERPOLATE
(
cﬁ‹A
, 
cﬁ‹C
);

691 
¥odu˘
 = 
cﬁ‹A
 | (product << 16);

692 
¥odu˘1
 =Örodu˘1 | (
¥odu˘2
 << 16);

693 *(
dP
Ë
¥odu˘
;

694 *(
dP
+(
d°Pôch
>>2)Ë
¥odu˘1
;

696 
bP
 += 1;

697 
dP
 += 1;

700 
d°På
 +
d°Pôch
 << 1;

701 
§cPå
 +
§cPôch
;

702 
dñèPå
 +
§cPôch
;

704 #ifde‡
MMX


707 
	}
}

	@3d.h

41 #i‚de‡
_3D_H_


42 
	#_3D_H_


	)

44 #i‡
deföed
(
USE_OPENGL
)

45 
	~<GL/gl.h
>

46 
	~<GL/glu.h
>

48 #ifde‡
__löux__


54 
boﬁ8
 
	m∑cked_pixñs_exãnsi⁄_¥e£¡
;

55 
boﬁ8
 
	mdøw_cube
;

56 
uöt32
 
	mvîsi⁄
;

58 
GLöt
 
	möã∫Æ_f‹m©
;

59 
GLöt
 
	mf‹m©
;

60 
GLöt
 
	mty≥
;

62 
GLöt
 
	mmax_ãxtuª_size
;

63 
GLöt
 
	mãxtuª_size
;

64 
uöt32
 
	mnum_ãxtuªs
;

65 
GLuöt
 
	mãxtuªs
 [2];

66 } 
	tO≥nGLD©a
;

68 
O≥nGLD©a
 
O≥nGL
;

70 
boﬁ8
 
S9xO≥nGLInô
 ();

71 
boﬁ8
 
S9xO≥nGLInô2
 ();

72 
S9xO≥nGLPutImage
 (
width
, 
height
);

73 
S9xO≥nGLDeöô
 ();

77 #ifde‡
USE_GLIDE


82 
boﬁ8
 
	mvoodoo_¥e£¡
;

83 
GrVîãx
 
	msq
[4];

84 
GrTexInfo
 
	mãxtuª
;

85 
öt32
 
	mãxtuª_mem_size
;

86 
öt32
 
	mãxtuª_mem_°¨t
;

87 
	mx_off£t
, 
	my_off£t
;

88 
	mx_sˇÀ
, 
	my_sˇÀ
;

89 
	mvoodoo_width
;

90 
	mvoodoo_height
;

91 } 
	tGlideD©a
;

93 
GlideD©a
 
Glide
;

94 
boﬁ8
 
S9xGlideE«bÀ
 (boﬁ8 
íabÀ
);

95 
S9xGlideDeöô
 ();

96 
boﬁ8
 
S9xGlideInô
 ();

97 
boﬁ8
 
S9xVoodooInôüli£
 ();

	@65c816.h

41 #i‚de‡
_65c816_h_


42 
	#_65c816_h_


	)

44 
	#AL
 
A
.
B
.
l


	)

45 
	#AH
 
A
.
B
.
h


	)

46 
	#XL
 
X
.
B
.
l


	)

47 
	#XH
 
X
.
B
.
h


	)

48 
	#YL
 
Y
.
B
.
l


	)

49 
	#YH
 
Y
.
B
.
h


	)

50 
	#SL
 
S
.
B
.
l


	)

51 
	#SH
 
S
.
B
.
h


	)

52 
	#DL
 
D
.
B
.
l


	)

53 
	#DH
 
D
.
B
.
h


	)

54 
	#PL
 
P
.
B
.
l


	)

55 
	#PH
 
P
.
B
.
h


	)

57 
	#C¨ry
 1

	)

58 
	#Zîo
 2

	)

59 
	#IRQ
 4

	)

60 
	#DecimÆ
 8

	)

61 
	#IndexFœg
 16

	)

62 
	#Mem‹yFœg
 32

	)

63 
	#OvîÊow
 64

	)

64 
	#Neg©ive
 128

	)

65 
	#Emuœti⁄
 256

	)

67 
	#CÀ¨C¨ry
(Ë(
ICPU
.
_C¨ry
 = 0)

	)

68 
	#SëC¨ry
(Ë(
ICPU
.
_C¨ry
 = 1)

	)

69 
	#SëZîo
(Ë(
ICPU
.
_Zîo
 = 0)

	)

70 
	#CÀ¨Zîo
(Ë(
ICPU
.
_Zîo
 = 1)

	)

71 
	#SëIRQ
(Ë(
Regi°îs
.
PL
 |
IRQ
)

	)

72 
	#CÀ¨IRQ
(Ë(
Regi°îs
.
PL
 &~
IRQ
)

	)

73 
	#SëDecimÆ
(Ë(
Regi°îs
.
PL
 |
DecimÆ
)

	)

74 
	#CÀ¨DecimÆ
(Ë(
Regi°îs
.
PL
 &~
DecimÆ
)

	)

75 
	#SëIndex
(Ë(
Regi°îs
.
PL
 |
IndexFœg
)

	)

76 
	#CÀ¨Index
(Ë(
Regi°îs
.
PL
 &~
IndexFœg
)

	)

77 
	#SëMem‹y
(Ë(
Regi°îs
.
PL
 |
Mem‹yFœg
)

	)

78 
	#CÀ¨Mem‹y
(Ë(
Regi°îs
.
PL
 &~
Mem‹yFœg
)

	)

79 
	#SëOvîÊow
(Ë(
ICPU
.
_OvîÊow
 = 1)

	)

80 
	#CÀ¨OvîÊow
(Ë(
ICPU
.
_OvîÊow
 = 0)

	)

81 
	#SëNeg©ive
(Ë(
ICPU
.
_Neg©ive
 = 0x80)

	)

82 
	#CÀ¨Neg©ive
(Ë(
ICPU
.
_Neg©ive
 = 0)

	)

84 
	#CheckZîo
(Ë(
ICPU
.
_Zîo
 =0)

	)

85 
	#CheckC¨ry
(Ë(
ICPU
.
_C¨ry
)

	)

86 
	#CheckIRQ
(Ë(
Regi°îs
.
PL
 & 
IRQ
)

	)

87 
	#CheckDecimÆ
(Ë(
Regi°îs
.
PL
 & 
DecimÆ
)

	)

88 
	#CheckIndex
(Ë(
Regi°îs
.
PL
 & 
IndexFœg
)

	)

89 
	#CheckMem‹y
(Ë(
Regi°îs
.
PL
 & 
Mem‹yFœg
)

	)

90 
	#CheckOvîÊow
(Ë(
ICPU
.
_OvîÊow
)

	)

91 
	#CheckNeg©ive
(Ë(
ICPU
.
_Neg©ive
 & 0x80)

	)

92 
	#CheckEmuœti⁄
(Ë(
Regi°îs
.
P
.
W
 & 
Emuœti⁄
)

	)

94 
	#CÀ¨Fœgs
(
f
Ë(
Regi°îs
.
P
.
W
 &~(f))

	)

95 
	#SëFœgs
(
f
Ë(
Regi°îs
.
P
.
W
 |(f))

	)

96 
	#CheckFœg
(
f
Ë(
Regi°îs
.
PL
 & (f))

	)

100 #ifde‡
LSB_FIRST


101 °ru˘ { 
uöt8
 
	ml
,
	mh
; } 
PACKING
 
	mB
;

103 °ru˘ { 
uöt8
 
	mh
,
	ml
; } 
PACKING
 
	mB
;

105 
uöt16
 
	mW
;

106 } 
	tALIGN_BY_ONE
 
	t∑ú
;

108 
	sSRegi°îs
{

109 
uöt8
 
	mPB
;

110 
uöt8
 
	mDB
;

111 
∑ú
 
	mP
;

112 
∑ú
 
	mA
;

113 
∑ú
 
	mD
;

114 
∑ú
 
	mX
;

115 
∑ú
 
	mS
;

116 
∑ú
 
	mY
;

117 
uöt16
 
	mPC
;

118 } 
	gPACKING
;

120 
	#Regi°îs
 
CPU
.
Regs


	)

	@DSP1EMU.C

20 #i‡(
deföed
 
__ZSNES__
 && 
__LINUX__
)

21 
	~"../gblhdr.h
"

24 
	~<°dio.h
>

25 
	~<°d¨g.h
>

26 
	~<m©h.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

36 
	#__OPT__


	)

37 
	#__OPT06__


	)

39 #ifde‡
DebugDSP1


41 
FILE
 * 
	gLogFûe
 = 
NULL
;

43 
	$Log_Mesßge
 (*
Mesßge
, ...)

45 
Msg
[400];

46 
va_li°
 
≠
;

48 
	`va_°¨t
(
≠
,
Mesßge
);

49 
	`v•rötf
(
Msg
,
Mesßge
,
≠
 );

50 
	`va_íd
(
≠
);

52 
	`°rˇt
(
Msg
,"\r\n\0");

53 
	`fwrôe
(
Msg
,
	`°æí
(Msg),1,
LogFûe
);

54 
	`fÊush
 (
LogFûe
);

55 
	}
}

57 
	$Sèπ_Log
 ()

59 
LogFûeName
[255];

62 
	`°r˝y
(
LogFûeName
,"dsp1emu.log\0");

64 
LogFûe
 = 
	`f›í
(
LogFûeName
,"wb");

65 
	}
}

67 
	$St›_Log
 ()

69 i‡(
LogFûe
)

71 
	`f˛o£
(
LogFûe
);

72 
LogFûe
 = 
NULL
;

74 
	}
}

78 c⁄° 
	gDSP1ROM
[1024] = {

212 
	#INCR
 2048

	)

213 
	#AngÀ
(
x
Ë(((x)/(65536/
INCR
)Ë& (INCR-1))

	)

214 
	#Cos
(
x
Ë((Ë
CosTabÀ2
[x])

	)

215 
	#Sö
(
x
Ë((Ë
SöTabÀ2
[x])

	)

216 #ifde‡
PI


217 #unde‡
PI


219 
	#PI
 3.1415926535897932384626433832795

	)

220 
	gCosTabÀ2
[
INCR
];

221 
	gSöTabÀ2
[
INCR
];

224 
	$Aèn
(
x
)

226 i‡((
x
>=1) || (x<=1))

227  (
x
/(1+0.28*x*x));

229  (
PI
/2 - 
	`Aèn
(1/
x
));

230 
	}
}

232 #ifde‡
__ZSNES__


237 
	gC4WFXVÆ
;

238 
	gC4WFYVÆ
;

239 
	gC4WFZVÆ
;

240 
	gC4WFX2VÆ
;

241 
	gC4WFY2VÆ
;

242 
	gC4WFDi°
;

243 
	gC4WFSˇÀ
;

244 
	gènvÆ
;

245 
	gc4x
,
	gc4y
,
	gc4z
;

246 
	gc4x2
,
	gc4y2
,
	gc4z2
;

248 
	$C4TønsfWúeFøme
()

250 
c4x
=()
C4WFXVÆ
;

251 
c4y
=()
C4WFYVÆ
;

252 
c4z
=()
C4WFZVÆ
-0x95;

255 
ènvÆ
=-()
C4WFX2VÆ
*
PI
*2/128;

256 
c4y2
=
c4y
*
	`cos
(
ènvÆ
)-
c4z
*
	`sö
(tanval);

257 
c4z2
=
c4y
*
	`sö
(
ènvÆ
)+
c4z
*
	`cos
(tanval);

260 
ènvÆ
=-()
C4WFY2VÆ
*
PI
*2/128;

261 
c4x2
=
c4x
*
	`cos
(
ènvÆ
)+
c4z2
*
	`sö
(tanval);

262 
c4z
=
c4x
*-
	`sö
(
ènvÆ
)+
c4z2
*
	`cos
(tanval);

265 
ènvÆ
=-()
C4WFDi°
*
PI
*2/128;

266 
c4x
=
c4x2
*
	`cos
(
ènvÆ
)-
c4y2
*
	`sö
(tanval);

267 
c4y
=
c4x2
*
	`sö
(
ènvÆ
)+
c4y2
*
	`cos
(tanval);

270 
C4WFXVÆ
=()(
c4x
*
C4WFSˇÀ
/(0x90*(
c4z
+0x95))*0x95);

271 
C4WFYVÆ
=()(
c4y
*
C4WFSˇÀ
/(0x90*(
c4z
+0x95))*0x95);

272 
	}
}

274 
	$C4TønsfWúeFøme2
()

276 
c4x
=()
C4WFXVÆ
;

277 
c4y
=()
C4WFYVÆ
;

278 
c4z
=()
C4WFZVÆ
;

281 
ènvÆ
=-()
C4WFX2VÆ
*
PI
*2/128;

282 
c4y2
=
c4y
*
	`cos
(
ènvÆ
)-
c4z
*
	`sö
(tanval);

283 
c4z2
=
c4y
*
	`sö
(
ènvÆ
)+
c4z
*
	`cos
(tanval);

286 
ènvÆ
=-()
C4WFY2VÆ
*
PI
*2/128;

287 
c4x2
=
c4x
*
	`cos
(
ènvÆ
)+
c4z2
*
	`sö
(tanval);

288 
c4z
=
c4x
*-
	`sö
(
ènvÆ
)+
c4z2
*
	`cos
(tanval);

291 
ènvÆ
=-()
C4WFDi°
*
PI
*2/128;

292 
c4x
=
c4x2
*
	`cos
(
ènvÆ
)-
c4y2
*
	`sö
(tanval);

293 
c4y
=
c4x2
*
	`sö
(
ènvÆ
)+
c4y2
*
	`cos
(tanval);

296 
C4WFXVÆ
=()(
c4x
*
C4WFSˇÀ
/0x100);

297 
C4WFYVÆ
=()(
c4y
*
C4WFSˇÀ
/0x100);

298 
	}
}

300 
	$C4CÆcWúeFøme
()

302 
C4WFXVÆ
=
C4WFX2VÆ
-C4WFXVal;

303 
C4WFYVÆ
=
C4WFY2VÆ
-C4WFYVal;

304 i‡(
	`abs
(
C4WFXVÆ
)>abs(
C4WFYVÆ
)){

305 
C4WFDi°
=
	`abs
(
C4WFXVÆ
)+1;

306 
C4WFYVÆ
=(256*()C4WFYVÆ)/
	`abs
(
C4WFXVÆ
);

307 i‡(
C4WFXVÆ
<0) C4WFXVal=-256;

308 
C4WFXVÆ
=256;

311 i‡(
C4WFYVÆ
!=0) {

312 
C4WFDi°
=
	`abs
(
C4WFYVÆ
)+1;

313 
C4WFXVÆ
=(256*()C4WFXVÆ)/
	`abs
(
C4WFYVÆ
);

314 i‡(
C4WFYVÆ
<0) C4WFYVal=-256;

315 
C4WFYVÆ
=256;

317 
C4WFDi°
=0;

318 
	}
}

320 
	gC41FXVÆ
;

321 
	gC41FYVÆ
;

322 
	gC41FAngÀRes
;

323 
	gC41FDi°
;

324 
	gC41FDi°VÆ
;

326 
	$C4Op1F
()

328 i‡(
C41FXVÆ
 == 0) {

329 i‡(
C41FYVÆ
>0Ë
C41FAngÀRes
=0x80;

330 
C41FAngÀRes
=0x180;

333 
ènvÆ
 = (()
C41FYVÆ
)/(()
C41FXVÆ
);

334 
C41FAngÀRes
=()(
	`©™
(
ènvÆ
)/(
PI
*2)*512);

335 
C41FAngÀRes
=C41FAngleRes;

336 i‡(
C41FXVÆ
<0Ë
C41FAngÀRes
+=0x100;

337 
C41FAngÀRes
&=0x1FF;

339 
	}
}

341 
	$C4Op15
()

343 
ènvÆ
=
	`sqπ
((()
C41FYVÆ
)*(()C41FYVÆ)+(()
C41FXVÆ
)*

344 (()
C41FXVÆ
));

345 
C41FDi°
=()
ènvÆ
;

346 
	}
}

348 
	$C4Op0D
()

350 
ènvÆ
=
	`sqπ
((()
C41FYVÆ
)*(()C41FYVÆ)+(()
C41FXVÆ
)*

351 (()
C41FXVÆ
));

352 
ènvÆ
=()
C41FDi°VÆ
/tanval;

353 
C41FYVÆ
=()((()C41FYVÆ*
ènvÆ
)*0.99);

354 
C41FXVÆ
=()((()C41FXVÆ*
ènvÆ
)*0.98);

355 
	}
}

362 
	$InôDSP
()

364 #ifde‡
__OPT__


365 
i
;

366 
i
=0; i<
INCR
; i++){

367 
CosTabÀ2
[
i
] = (
	`cos
(()(2*
PI
*i/
INCR
)));

368 
SöTabÀ2
[
i
] = (
	`sö
(()(2*
PI
*i/
INCR
)));

371 #ifde‡
DebugDSP1


372 
	`Sèπ_Log
();

374 
	}
}

377 
	gOp00Mu…ùliˇnd
;

378 
	gOp00Mu…ùlõr
;

379 
	gOp00Resu…
;

381 
	$DSPOp00
()

383 
Op00Resu…

Op00Mu…ùliˇnd
 * 
Op00Mu…ùlõr
 >> 15;

385 #ifde‡
DebugDSP1


386 
	`Log_Mesßge
("OP00 MULT %d*%d/32768=%d",
Op00Mu…ùliˇnd
,
Op00Mu…ùlõr
,
Op00Resu…
);

388 
	}
}

390 
	gOp20Mu…ùliˇnd
;

391 
	gOp20Mu…ùlõr
;

392 
	gOp20Resu…
;

394 
	$DSPOp20
()

396 
Op20Resu…

Op20Mu…ùliˇnd
 * 
Op20Mu…ùlõr
 >> 15;

397 
Op20Resu…
++;

399 #ifde‡
DebugDSP1


400 
	`Log_Mesßge
("OP20 MULT %d*%d/32768=%d",
Op20Mu…ùliˇnd
,
Op20Mu…ùlõr
,
Op20Resu…
);

402 
	}
}

404 sig√d 
	gOp10C€fficõ¡
;

405 sig√d 
	gOp10Exp⁄ít
;

406 sig√d 
	gOp10C€fficõ¡R
;

407 sig√d 
	gOp10Exp⁄ítR
;

409 
	$DSP1_Invî£
(
C€fficõ¡
, 
Exp⁄ít
, *
iC€fficõ¡
, *
iExp⁄ít
)

412 i‡(
C€fficõ¡
 == 0x0000)

414 *
iC€fficõ¡
 = 0x7fff;

415 *
iExp⁄ít
 = 0x002f;

419 
Sign
 = 1;

422 i‡(
C€fficõ¡
 < 0)

424 i‡(
C€fficõ¡
 < -32767) Coefficient = -32767;

425 
C€fficõ¡
 = -Coefficient;

426 
Sign
 = -1;

430 
C€fficõ¡
 < 0x4000)

432 
C€fficõ¡
 <<= 1;

433 
Exp⁄ít
--;

437 i‡(
C€fficõ¡
 == 0x4000)

438 i‡(
Sign
 =1Ë*
iC€fficõ¡
 = 0x7fff;

440 *
iC€fficõ¡
 = -0x4000;

441 
Exp⁄ít
--;

445 
i
 = 
DSP1ROM
[((
C€fficõ¡
 - 0x4000) >> 7) + 0x0065];

448 
i
 = (ò+ (-ò* (
C€fficõ¡
 * i >> 15) >> 15)) << 1;

449 
i
 = (ò+ (-ò* (
C€fficõ¡
 * i >> 15) >> 15)) << 1;

451 *
iC€fficõ¡
 = 
i
 * 
Sign
;

454 *
iExp⁄ít
 = 1 - 
Exp⁄ít
;

456 
	}
}

458 
	$DSPOp10
()

460 
	`DSP1_Invî£
(
Op10C€fficõ¡
, 
Op10Exp⁄ít
, &
Op10C€fficõ¡R
, &
Op10Exp⁄ítR
);

461 #ifde‡
DebugDSP1


462 
	`Log_Mesßge
("OP10 INV %d*2^%d = %d*2^%d", 
Op10C€fficõ¡
, 
Op10Exp⁄ít
, 
Op10C€fficõ¡R
, 
Op10Exp⁄ítR
);

464 
	}
}

466 
	gOp04AngÀ
;

467 
	gOp04Radius
;

468 
	gOp04Sö
;

469 
	gOp04Cos
;

471 c⁄° 
	gDSP1_MulTabÀ
[256] = {

505 c⁄° 
	gDSP1_SöTabÀ
[256] = {

539 
	$DSP1_Sö
(
AngÀ
)

541 i‡(
AngÀ
 < 0) {

542 i‡(
AngÀ
 == -32768)  0;

543  -
	`DSP1_Sö
(-
AngÀ
);

545 
S
 = 
DSP1_SöTabÀ
[
AngÀ
 >> 8] + (
DSP1_MulTabÀ
[Angle & 0xff] * DSP1_SinTable[0x40 + (Angle >> 8)] >> 15);

546 i‡(
S
 > 32767) S = 32767;

547  (Ë
S
;

548 
	}
}

550 
	$DSP1_Cos
(
AngÀ
)

552 i‡(
AngÀ
 < 0) {

553 i‡(
AngÀ
 == -32768)  -32768;

554 
AngÀ
 = -Angle;

556 
S
 = 
DSP1_SöTabÀ
[0x40 + (
AngÀ
 >> 8)] - (
DSP1_MulTabÀ
[Angle & 0xff] * DSP1_SinTable[Angle >> 8] >> 15);

557 i‡(
S
 < -32768) S = -32767;

558  (Ë
S
;

559 
	}
}

561 
	$DSP1_N‹mÆize
(
m
, *
C€fficõ¡
, *
Exp⁄ít
)

563 
i
 = 0x4000;

564 
e
 = 0;

566 i‡(
m
 < 0)

567 (
m
 & 
i
) && i) {

568 
i
 >>= 1;

569 
e
++;

572 !(
m
 & 
i
) && i) {

573 
i
 >>= 1;

574 
e
++;

577 i‡(
e
 > 0)

578 *
C€fficõ¡
 = 
m
 * 
DSP1ROM
[0x21 + 
e
] << 1;

580 *
C€fficõ¡
 = 
m
;

582 *
Exp⁄ít
 -
e
;

583 
	}
}

585 
	$DSP1_N‹mÆizeDoubÀ
(
Produ˘
, *
C€fficõ¡
, *
Exp⁄ít
)

587 
n
 = 
Produ˘
 & 0x7fff;

588 
m
 = 
Produ˘
 >> 15;

589 
i
 = 0x4000;

590 
e
 = 0;

592 i‡(
m
 < 0)

593 (
m
 & 
i
) && i) {

594 
i
 >>= 1;

595 
e
++;

598 !(
m
 & 
i
) && i) {

599 
i
 >>= 1;

600 
e
++;

603 i‡(
e
 > 0)

605 *
C€fficõ¡
 = 
m
 * 
DSP1ROM
[0x0021 + 
e
] << 1;

607 i‡(
e
 < 15)

608 *
C€fficõ¡
 +
n
 * 
DSP1ROM
[0x0040 - 
e
] >> 15;

611 
i
 = 0x4000;

613 i‡(
m
 < 0)

614 (
n
 & 
i
) && i) {

615 
i
 >>= 1;

616 
e
++;

619 !(
n
 & 
i
) && i) {

620 
i
 >>= 1;

621 
e
++;

624 i‡(
e
 > 15)

625 *
C€fficõ¡
 = 
n
 * 
DSP1ROM
[0x0012 + 
e
] << 1;

627 *
C€fficõ¡
 +
n
;

631 *
C€fficõ¡
 = 
m
;

633 *
Exp⁄ít
 = 
e
;

634 
	}
}

636 
	$DSP1_Trunˇã
(
C
, 
E
)

638 i‡(
E
 > 0) {

639 i‡(
C
 > 0)  32767; if (C < 0)  -32767;

641 i‡(
E
 < 0Ë 
C
 * 
DSP1ROM
[0x0031 + E] >> 15;

643  
C
;

644 
	}
}

646 
	$DSPOp04
()

648 
Op04Sö
 = 
	`DSP1_Sö
(
Op04AngÀ
Ë* 
Op04Radius
 >> 15;

649 
Op04Cos
 = 
	`DSP1_Cos
(
Op04AngÀ
Ë* 
Op04Radius
 >> 15;

650 
	}
}

652 
	gOp0CA
;

653 
	gOp0CX1
;

654 
	gOp0CY1
;

655 
	gOp0CX2
;

656 
	gOp0CY2
;

658 
	$DSPOp0C
()

660 
Op0CX2
 = (
Op0CY1
 * 
	`DSP1_Sö
(
Op0CA
Ë>> 15Ë+ (
Op0CX1
 * 
	`DSP1_Cos
(Op0CA) >> 15);

661 
Op0CY2
 = (
Op0CY1
 * 
	`DSP1_Cos
(
Op0CA
Ë>> 15Ë- (
Op0CX1
 * 
	`DSP1_Sö
(Op0CA) >> 15);

662 
	}
}

664 
	gCíåeX
;

665 
	gCíåeY
;

666 
	gVOff£t
;

668 
	gVPœ√_C
;

669 
	gVPœ√_E
;

672 
	gSöAas
;

673 
	gCosAas
;

674 
	gSöAzs
;

675 
	gCosAzs
;

678 
	gSöAZS
;

679 
	gCosAZS
;

680 
	gSecAZS_C1
;

681 
	gSecAZS_E1
;

682 
	gSecAZS_C2
;

683 
	gSecAZS_E2
;

685 c⁄° 
	gMaxAZS_Exp
[16] = {

690 
	$DSP1_P¨amëî
(
Fx
, 
Fy
, 
Fz
, 
L„
, 
Les
, 
Aas
, 
Azs
, *
Vof
, *
Vva
, *
Cx
, *
Cy
)

692 
CSec
, 
C
, 
E
;

695 
AZS
 = 
Azs
;

698 
SöAas
 = 
	`DSP1_Sö
(
Aas
);

699 
CosAas
 = 
	`DSP1_Cos
(
Aas
);

700 
SöAzs
 = 
	`DSP1_Sö
(
Azs
);

701 
CosAzs
 = 
	`DSP1_Cos
(
Azs
);

704 
CíåeX
 = 
Fx
 + (
L„
 * (
SöAzs
 * -
SöAas
 >> 15) >> 15);

705 
CíåeY
 = 
Fy
 + (
L„
 * (
SöAzs
 * 
CosAas
 >> 15) >> 15);

707 
E
 = 0;

708 
	`DSP1_N‹mÆize
(
Fz
 + (
L„
 * (
CosAzs
 * 0x7ff‡>> 15Ë>> 15), &
C
, &
E
);

710 
VPœ√_C
 = 
C
;

711 
VPœ√_E
 = 
E
;

714 
MaxAZS
 = 
MaxAZS_Exp
[-
E
];

716 i‡(
AZS
 < 0) {

717 
MaxAZS
 = -MaxAZS;

718 i‡(
AZS
 < 
MaxAZS
 + 1) AZS = MaxAZS + 1;

720 i‡(
AZS
 > 
MaxAZS
) AZS = MaxAZS;

724 
SöAZS
 = 
	`DSP1_Sö
(
AZS
);

725 
CosAZS
 = 
	`DSP1_Cos
(
AZS
);

727 
	`DSP1_Invî£
(
CosAZS
, 0, &
SecAZS_C1
, &
SecAZS_E1
);

728 
	`DSP1_N‹mÆize
(
C
 * 
SecAZS_C1
 >> 15, &C, &
E
);

729 
E
 +
SecAZS_E1
;

731 
C
 = 
	`DSP1_Trunˇã
(C, 
E
Ë* 
SöAZS
 >> 15;

733 
CíåeX
 +
C
 * 
SöAas
 >> 15;

734 
CíåeY
 -
C
 * 
CosAas
 >> 15;

736 *
Cx
 = 
CíåeX
;

737 *
Cy
 = 
CíåeY
;

740 *
Vof
 = 0;

742 i‡((
Azs
 !
AZS
Ë|| (Az†=
MaxAZS
))

744 i‡(
Azs
 == -32768) Azs = -32767;

746 
C
 = 
Azs
 - 
MaxAZS
;

747 i‡(
C
 >= 0) C--;

748 
Aux
 = ~(
C
 << 2);

750 
C
 = 
Aux
 * 
DSP1ROM
[0x0328] >> 15;

751 
C
 = (C * 
Aux
 >> 15Ë+ 
DSP1ROM
[0x0327];

752 *
Vof
 -(
C
 * 
Aux
 >> 15Ë* 
Les
 >> 15;

754 
C
 = 
Aux
 * Aux >> 15;

755 
Aux
 = (
C
 * 
DSP1ROM
[0x0324] >> 15) + DSP1ROM[0x0325];

756 
CosAZS
 +(
C
 * 
Aux
 >> 15) * CosAZS >> 15;

759 
VOff£t
 = 
Les
 * 
CosAZS
 >> 15;

761 
	`DSP1_Invî£
(
SöAZS
, 0, &
CSec
, &
E
);

762 
	`DSP1_N‹mÆize
(
VOff£t
, &
C
, &
E
);

763 
	`DSP1_N‹mÆize
(
C
 * 
CSec
 >> 15, &C, &
E
);

765 i‡(
C
 =-32768Ë{ C >>1; 
E
++; }

767 *
Vva
 = 
	`DSP1_Trunˇã
(-
C
, 
E
);

770 
	`DSP1_Invî£
(
CosAZS
, 0, &
SecAZS_C2
, &
SecAZS_E2
);

771 
	}
}

773 
	$DSP1_Ra°î
(
Vs
, *
An
, *
Bn
, *
Cn
, *
Dn
)

775 
C
, 
E
, 
C1
, 
E1
;

777 
	`DSP1_Invî£
((
Vs
 * 
SöAzs
 >> 15Ë+ 
VOff£t
, 7, &
C
, &
E
);

778 
E
 +
VPœ√_E
;

780 
C1
 = 
C
 * 
VPœ√_C
 >> 15;

781 
E1
 = 
E
 + 
SecAZS_E2
;

783 
	`DSP1_N‹mÆize
(
C1
, &
C
, &
E
);

785 
C
 = 
	`DSP1_Trunˇã
(C, 
E
);

787 *
An
 = 
C
 * 
CosAas
 >> 15;

788 *
Cn
 = 
C
 * 
SöAas
 >> 15;

790 
	`DSP1_N‹mÆize
(
C1
 * 
SecAZS_C2
 >> 15, &
C
, &
E1
);

792 
C
 = 
	`DSP1_Trunˇã
(C, 
E1
);

794 *
Bn
 = 
C
 * -
SöAas
 >> 15;

795 *
Dn
 = 
C
 * 
CosAas
 >> 15;

796 
	}
}

798 
	gOp02FX
;

799 
	gOp02FY
;

800 
	gOp02FZ
;

801 
	gOp02LFE
;

802 
	gOp02LES
;

803 
	gOp02AAS
;

804 
	gOp02AZS
;

805 
	gOp02VOF
;

806 
	gOp02VVA
;

807 
	gOp02CX
;

808 
	gOp02CY
;

810 
	$DSPOp02
()

812 
	`DSP1_P¨amëî
(
Op02FX
, 
Op02FY
, 
Op02FZ
, 
Op02LFE
, 
Op02LES
, 
Op02AAS
, 
Op02AZS
, &
Op02VOF
, &
Op02VVA
, &
Op02CX
, &
Op02CY
);

813 
	}
}

815 
	gOp0AVS
;

816 
	gOp0AA
;

817 
	gOp0AB
;

818 
	gOp0AC
;

819 
	gOp0AD
;

821 
	$DSPOp0A
()

823 
	`DSP1_Ra°î
(
Op0AVS
, &
Op0AA
, &
Op0AB
, &
Op0AC
, &
Op0AD
);

824 
Op0AVS
++;

825 
	}
}

827 
	gOp06X
;

828 
	gOp06Y
;

829 
	gOp06Z
;

830 
	gOp06H
;

831 
	gOp06V
;

832 
	gOp06S
;

834 
	gObjPX
;

835 
	gObjPY
;

836 
	gObjPZ
;

837 
	gObjPX1
;

838 
	gObjPY1
;

839 
	gObjPZ1
;

840 
	gObjPX2
;

841 
	gObjPY2
;

842 
	gObjPZ2
;

843 
	gDivideOp06
;

844 
	gTemp
;

845 
	gènvÆ2
;

847 #ifde‡
__OPT06__


848 
	$DSPOp06
()

850 
ObjPX
=
Op06X
-
Op02FX
;

851 
ObjPY
=
Op06Y
-
Op02FY
;

852 
ObjPZ
=
Op06Z
-
Op02FZ
;

855 
ènvÆ2
 = 
	`AngÀ
(-
Op02AAS
+32768);

857 
ObjPX1
=(
ObjPX
*
	`Cos
(
ènvÆ2
)+
ObjPY
*-
	`Sö
(tanval2));

858 
ObjPY1
=(
ObjPX
*
	`Sö
(
ènvÆ2
)+
ObjPY
*
	`Cos
(tanval2));

859 
ObjPZ1
=
ObjPZ
;

863 
ènvÆ2
 = 
	`AngÀ
(-
Op02AZS
);

865 
ObjPX2
=
ObjPX1
;

866 
ObjPY2
=(
ObjPY1
*
	`Cos
(
ènvÆ2
)+
ObjPZ1
*-
	`Sö
(tanval2));

867 
ObjPZ2
=(
ObjPY1
*
	`Sö
(
ènvÆ2
)+
ObjPZ1
*
	`Cos
(tanval2));

869 #ifde‡
debug06


870 
	`Log_Mesßge
("ObjPX2: %‡ObjPY2: %‡ObjPZ2: %f\n",
ObjPX2
,
ObjPY2
,
ObjPZ2
);

873 
ObjPZ2
=ObjPZ2-
Op02LFE
;

875 i‡(
ObjPZ2
<0)

877 
d
;

878 
Op06H
=()(-
ObjPX2
*
Op02LES
/-(
ObjPZ2
));

879 
Op06V
=()(-
ObjPY2
*
Op02LES
/-(
ObjPZ2
));

880 
d
=()
Op02LES
;

881 
d
*=256.0;

882 
d
/=(-
ObjPZ2
);

883 if(
d
>65535.0)

884 
d
=65535.0;

885 if(
d
<0.0)

886 
d
=0.0;

887 
Op06S
=()
d
;

893 
Op06H
=0;

894 
Op06V
=14*16;

895 
Op06S
=0xFFFF;

899 #ifde‡
DebugDSP1


900 
	`Log_Mesßge
("OP06 X:%d Y:%d Z:%d",
Op06X
,
Op06Y
,
Op06Z
);

901 
	`Log_Mesßge
("OP06 H:%d V:%d S:%d",
Op06H
,
Op06V
,
Op06S
);

903 
	}
}

906 
	$DSPOp06
()

908 
ObjPX
=
Op06X
-
Op02FX
;

909 
ObjPY
=
Op06Y
-
Op02FY
;

910 
ObjPZ
=
Op06Z
-
Op02FZ
;

913 
ènvÆ
 = (-
Op02AAS
+32768)/65536.0*6.2832;

914 
ObjPX1
=(
ObjPX
*
	`cos
(
ènvÆ
)+
ObjPY
*-
	`sö
(tanval));

915 
ObjPY1
=(
ObjPX
*
	`sö
(
ènvÆ
)+
ObjPY
*
	`cos
(tanval));

916 
ObjPZ1
=
ObjPZ
;

918 #ifde‡
debug06


919 
	`Log_Mesßge
("AngÀ : %f", 
ènvÆ
);

920 
	`Log_Mesßge
("ObjPX1: %‡ObjPY1: %‡ObjPZ1: %f\n",
ObjPX1
,
ObjPY1
,
ObjPZ1
);

921 
	`Log_Mesßge
("cos—™vÆË: %‡ sö—™vÆË: %f", 
	`cos
(
ènvÆ
), 
	`sö
(tanval));

925 
ènvÆ
 = (-
Op02AZS
)/65536.0*6.2832;

926 
ObjPX2
=
ObjPX1
;

927 
ObjPY2
=(
ObjPY1
*
	`cos
(
ènvÆ
)+
ObjPZ1
*-
	`sö
(tanval));

928 
ObjPZ2
=(
ObjPY1
*
	`sö
(
ènvÆ
)+
ObjPZ1
*
	`cos
(tanval));

930 #ifde‡
debug06


931 
	`Log_Mesßge
("ObjPX2: %‡ObjPY2: %‡ObjPZ2: %f\n",
ObjPX2
,
ObjPY2
,
ObjPZ2
);

934 
ObjPZ2
=ObjPZ2-
Op02LFE
;

936 i‡(
ObjPZ2
<0)

938 
Op06H
=()(-
ObjPX2
*
Op02LES
/-(
ObjPZ2
));

939 
Op06V
=()(-
ObjPY2
*
Op02LES
/-(
ObjPZ2
));

940 
d
=()
Op02LES
;

941 
d
*=256.0;

942 
d
/=(-
ObjPZ2
);

943 if(
d
>65535.0)

944 
d
=65535.0;

945 if(
d
<0.0)

946 
d
=0.0;

947 
Op06S
=()
d
;

952 
Op06H
=0;

953 
Op06V
=14*16;

954 
Op06S
=0xFFFF;

957 #ifde‡
DebugDSP1


958 
	`Log_Mesßge
("OP06 X:%d Y:%d Z:%d",
Op06X
,
Op06Y
,
Op06Z
);

959 
	`Log_Mesßge
("OP06 H:%d V:%d S:%d",
Op06H
,
Op06V
,
Op06S
);

961 
	}
}

965 
	gm©rixC
[3][3];

966 
	gm©rixB
[3][3];

967 
	gm©rixA
[3][3];

969 
	gOp01m
;

970 
	gOp01Zr
;

971 
	gOp01Xr
;

972 
	gOp01Yr
;

973 
	gOp11m
;

974 
	gOp11Zr
;

975 
	gOp11Xr
;

976 
	gOp11Yr
;

977 
	gOp21m
;

978 
	gOp21Zr
;

979 
	gOp21Xr
;

980 
	gOp21Yr
;

982 
	$DSPOp01
()

984 
SöAz
 = 
	`DSP1_Sö
(
Op01Zr
);

985 
CosAz
 = 
	`DSP1_Cos
(
Op01Zr
);

986 
SöAy
 = 
	`DSP1_Sö
(
Op01Yr
);

987 
CosAy
 = 
	`DSP1_Cos
(
Op01Yr
);

988 
SöAx
 = 
	`DSP1_Sö
(
Op01Xr
);

989 
CosAx
 = 
	`DSP1_Cos
(
Op01Xr
);

991 
Op01m
 >>= 1;

993 
m©rixA
[0][0] = (
Op01m
 * 
CosAz
 >> 15Ë* 
CosAy
 >> 15;

994 
m©rixA
[0][1] = -((
Op01m
 * 
SöAz
 >> 15Ë* 
CosAy
 >> 15);

995 
m©rixA
[0][2] = 
Op01m
 * 
SöAy
 >> 15;

997 
m©rixA
[1][0] = ((
Op01m
 * 
SöAz
 >> 15Ë* 
CosAx
 >> 15Ë+ (((Op01m * 
CosAz
 >> 15Ë* 
SöAx
 >> 15Ë* 
SöAy
 >> 15);

998 
m©rixA
[1][1] = ((
Op01m
 * 
CosAz
 >> 15Ë* 
CosAx
 >> 15Ë- (((Op01m * 
SöAz
 >> 15Ë* 
SöAx
 >> 15Ë* 
SöAy
 >> 15);

999 
m©rixA
[1][2] = -((
Op01m
 * 
SöAx
 >> 15Ë* 
CosAy
 >> 15);

1001 
m©rixA
[2][0] = ((
Op01m
 * 
SöAz
 >> 15Ë* 
SöAx
 >> 15Ë- (((Op01m * 
CosAz
 >> 15Ë* 
CosAx
 >> 15Ë* 
SöAy
 >> 15);

1002 
m©rixA
[2][1] = ((
Op01m
 * 
CosAz
 >> 15Ë* 
SöAx
 >> 15Ë+ (((Op01m * 
SöAz
 >> 15Ë* 
CosAx
 >> 15Ë* 
SöAy
 >> 15);

1003 
m©rixA
[2][2] = (
Op01m
 * 
CosAx
 >> 15Ë* 
CosAy
 >> 15;

1004 
	}
}

1006 
	$DSPOp11
()

1008 
SöAz
 = 
	`DSP1_Sö
(
Op11Zr
);

1009 
CosAz
 = 
	`DSP1_Cos
(
Op11Zr
);

1010 
SöAy
 = 
	`DSP1_Sö
(
Op11Yr
);

1011 
CosAy
 = 
	`DSP1_Cos
(
Op11Yr
);

1012 
SöAx
 = 
	`DSP1_Sö
(
Op11Xr
);

1013 
CosAx
 = 
	`DSP1_Cos
(
Op11Xr
);

1015 
Op11m
 >>= 1;

1017 
m©rixB
[0][0] = (
Op11m
 * 
CosAz
 >> 15Ë* 
CosAy
 >> 15;

1018 
m©rixB
[0][1] = -((
Op11m
 * 
SöAz
 >> 15Ë* 
CosAy
 >> 15);

1019 
m©rixB
[0][2] = 
Op11m
 * 
SöAy
 >> 15;

1021 
m©rixB
[1][0] = ((
Op11m
 * 
SöAz
 >> 15Ë* 
CosAx
 >> 15Ë+ (((Op11m * 
CosAz
 >> 15Ë* 
SöAx
 >> 15Ë* 
SöAy
 >> 15);

1022 
m©rixB
[1][1] = ((
Op11m
 * 
CosAz
 >> 15Ë* 
CosAx
 >> 15Ë- (((Op11m * 
SöAz
 >> 15Ë* 
SöAx
 >> 15Ë* 
SöAy
 >> 15);

1023 
m©rixB
[1][2] = -((
Op11m
 * 
SöAx
 >> 15Ë* 
CosAy
 >> 15);

1025 
m©rixB
[2][0] = ((
Op11m
 * 
SöAz
 >> 15Ë* 
SöAx
 >> 15Ë- (((Op11m * 
CosAz
 >> 15Ë* 
CosAx
 >> 15Ë* 
SöAy
 >> 15);

1026 
m©rixB
[2][1] = ((
Op11m
 * 
CosAz
 >> 15Ë* 
SöAx
 >> 15Ë+ (((Op11m * 
SöAz
 >> 15Ë* 
CosAx
 >> 15Ë* 
SöAy
 >> 15);

1027 
m©rixB
[2][2] = (
Op11m
 * 
CosAx
 >> 15Ë* 
CosAy
 >> 15;

1028 
	}
}

1030 
	$DSPOp21
()

1032 
SöAz
 = 
	`DSP1_Sö
(
Op21Zr
);

1033 
CosAz
 = 
	`DSP1_Cos
(
Op21Zr
);

1034 
SöAy
 = 
	`DSP1_Sö
(
Op21Yr
);

1035 
CosAy
 = 
	`DSP1_Cos
(
Op21Yr
);

1036 
SöAx
 = 
	`DSP1_Sö
(
Op21Xr
);

1037 
CosAx
 = 
	`DSP1_Cos
(
Op21Xr
);

1039 
Op21m
 >>= 1;

1041 
m©rixC
[0][0] = (
Op21m
 * 
CosAz
 >> 15Ë* 
CosAy
 >> 15;

1042 
m©rixC
[0][1] = -((
Op21m
 * 
SöAz
 >> 15Ë* 
CosAy
 >> 15);

1043 
m©rixC
[0][2] = 
Op21m
 * 
SöAy
 >> 15;

1045 
m©rixC
[1][0] = ((
Op21m
 * 
SöAz
 >> 15Ë* 
CosAx
 >> 15Ë+ (((Op21m * 
CosAz
 >> 15Ë* 
SöAx
 >> 15Ë* 
SöAy
 >> 15);

1046 
m©rixC
[1][1] = ((
Op21m
 * 
CosAz
 >> 15Ë* 
CosAx
 >> 15Ë- (((Op21m * 
SöAz
 >> 15Ë* 
SöAx
 >> 15Ë* 
SöAy
 >> 15);

1047 
m©rixC
[1][2] = -((
Op21m
 * 
SöAx
 >> 15Ë* 
CosAy
 >> 15);

1049 
m©rixC
[2][0] = ((
Op21m
 * 
SöAz
 >> 15Ë* 
SöAx
 >> 15Ë- (((Op21m * 
CosAz
 >> 15Ë* 
CosAx
 >> 15Ë* 
SöAy
 >> 15);

1050 
m©rixC
[2][1] = ((
Op21m
 * 
CosAz
 >> 15Ë* 
SöAx
 >> 15Ë+ (((Op21m * 
SöAz
 >> 15Ë* 
CosAx
 >> 15Ë* 
SöAy
 >> 15);

1051 
m©rixC
[2][2] = (
Op21m
 * 
CosAx
 >> 15Ë* 
CosAy
 >> 15;

1052 
	}
}

1054 
	gOp0DX
;

1055 
	gOp0DY
;

1056 
	gOp0DZ
;

1057 
	gOp0DF
;

1058 
	gOp0DL
;

1059 
	gOp0DU
;

1060 
	gOp1DX
;

1061 
	gOp1DY
;

1062 
	gOp1DZ
;

1063 
	gOp1DF
;

1064 
	gOp1DL
;

1065 
	gOp1DU
;

1066 
	gOp2DX
;

1067 
	gOp2DY
;

1068 
	gOp2DZ
;

1069 
	gOp2DF
;

1070 
	gOp2DL
;

1071 
	gOp2DU
;

1073 
	$DSPOp0D
()

1075 
Op0DF
 = (
Op0DX
 * 
m©rixA
[0][0] >> 15Ë+ (
Op0DY
 * m©rixA[0][1] >> 15Ë+ (
Op0DZ
 * matrixA[0][2] >> 15);

1076 
Op0DL
 = (
Op0DX
 * 
m©rixA
[1][0] >> 15Ë+ (
Op0DY
 * m©rixA[1][1] >> 15Ë+ (
Op0DZ
 * matrixA[1][2] >> 15);

1077 
Op0DU
 = (
Op0DX
 * 
m©rixA
[2][0] >> 15Ë+ (
Op0DY
 * m©rixA[2][1] >> 15Ë+ (
Op0DZ
 * matrixA[2][2] >> 15);

1079 #ifde‡
DebugDSP1


1080 
	`Log_Mesßge
("OP0D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op0DX
,
Op0DY
,
Op0DZ
,
Op0DF
,
Op0DL
,
Op0DU
);

1082 
	}
}

1084 
	$DSPOp1D
()

1086 
Op1DF
 = (
Op1DX
 * 
m©rixB
[0][0] >> 15Ë+ (
Op1DY
 * m©rixB[0][1] >> 15Ë+ (
Op1DZ
 * matrixB[0][2] >> 15);

1087 
Op1DL
 = (
Op1DX
 * 
m©rixB
[1][0] >> 15Ë+ (
Op1DY
 * m©rixB[1][1] >> 15Ë+ (
Op1DZ
 * matrixB[1][2] >> 15);

1088 
Op1DU
 = (
Op1DX
 * 
m©rixB
[2][0] >> 15Ë+ (
Op1DY
 * m©rixB[2][1] >> 15Ë+ (
Op1DZ
 * matrixB[2][2] >> 15);

1090 #ifde‡
DebugDSP1


1091 
	`Log_Mesßge
("OP1D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op1DX
,
Op1DY
,
Op1DZ
,
Op1DF
,
Op1DL
,
Op1DU
);

1093 
	}
}

1095 
	$DSPOp2D
()

1097 
Op2DF
 = (
Op2DX
 * 
m©rixC
[0][0] >> 15Ë+ (
Op2DY
 * m©rixC[0][1] >> 15Ë+ (
Op2DZ
 * matrixC[0][2] >> 15);

1098 
Op2DL
 = (
Op2DX
 * 
m©rixC
[1][0] >> 15Ë+ (
Op2DY
 * m©rixC[1][1] >> 15Ë+ (
Op2DZ
 * matrixC[1][2] >> 15);

1099 
Op2DU
 = (
Op2DX
 * 
m©rixC
[2][0] >> 15Ë+ (
Op2DY
 * m©rixC[2][1] >> 15Ë+ (
Op2DZ
 * matrixC[2][2] >> 15);

1101 #ifde‡
DebugDSP1


1102 
	`Log_Mesßge
("OP2D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op2DX
,
Op2DY
,
Op2DZ
,
Op2DF
,
Op2DL
,
Op2DU
);

1104 
	}
}

1106 
	gOp03F
;

1107 
	gOp03L
;

1108 
	gOp03U
;

1109 
	gOp03X
;

1110 
	gOp03Y
;

1111 
	gOp03Z
;

1112 
	gOp13F
;

1113 
	gOp13L
;

1114 
	gOp13U
;

1115 
	gOp13X
;

1116 
	gOp13Y
;

1117 
	gOp13Z
;

1118 
	gOp23F
;

1119 
	gOp23L
;

1120 
	gOp23U
;

1121 
	gOp23X
;

1122 
	gOp23Y
;

1123 
	gOp23Z
;

1125 
	$DSPOp03
()

1127 
Op03X
 = (
Op03F
 * 
m©rixA
[0][0] >> 15Ë+ (
Op03L
 * m©rixA[1][0] >> 15Ë+ (
Op03U
 * matrixA[2][0] >> 15);

1128 
Op03Y
 = (
Op03F
 * 
m©rixA
[0][1] >> 15Ë+ (
Op03L
 * m©rixA[1][1] >> 15Ë+ (
Op03U
 * matrixA[2][1] >> 15);

1129 
Op03Z
 = (
Op03F
 * 
m©rixA
[0][2] >> 15Ë+ (
Op03L
 * m©rixA[1][2] >> 15Ë+ (
Op03U
 * matrixA[2][2] >> 15);

1131 #ifde‡
DebugDSP1


1132 
	`Log_Mesßge
("OP03 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op03F
,
Op03L
,
Op03U
,
Op03X
,
Op03Y
,
Op03Z
);

1134 
	}
}

1136 
	$DSPOp13
()

1138 
Op13X
 = (
Op13F
 * 
m©rixB
[0][0] >> 15Ë+ (
Op13L
 * m©rixB[1][0] >> 15Ë+ (
Op13U
 * matrixB[2][0] >> 15);

1139 
Op13Y
 = (
Op13F
 * 
m©rixB
[0][1] >> 15Ë+ (
Op13L
 * m©rixB[1][1] >> 15Ë+ (
Op13U
 * matrixB[2][1] >> 15);

1140 
Op13Z
 = (
Op13F
 * 
m©rixB
[0][2] >> 15Ë+ (
Op13L
 * m©rixB[1][2] >> 15Ë+ (
Op13U
 * matrixB[2][2] >> 15);

1142 #ifde‡
DebugDSP1


1143 
	`Log_Mesßge
("OP13 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op13F
,
Op13L
,
Op13U
,
Op13X
,
Op13Y
,
Op13Z
);

1145 
	}
}

1147 
	$DSPOp23
()

1149 
Op23X
 = (
Op23F
 * 
m©rixC
[0][0] >> 15Ë+ (
Op23L
 * m©rixC[1][0] >> 15Ë+ (
Op23U
 * matrixC[2][0] >> 15);

1150 
Op23Y
 = (
Op23F
 * 
m©rixC
[0][1] >> 15Ë+ (
Op23L
 * m©rixC[1][1] >> 15Ë+ (
Op23U
 * matrixC[2][1] >> 15);

1151 
Op23Z
 = (
Op23F
 * 
m©rixC
[0][2] >> 15Ë+ (
Op23L
 * m©rixC[1][2] >> 15Ë+ (
Op23U
 * matrixC[2][2] >> 15);

1153 #ifde‡
DebugDSP1


1154 
	`Log_Mesßge
("OP23 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op23F
,
Op23L
,
Op23U
,
Op23X
,
Op23Y
,
Op23Z
);

1156 
	}
}

1158 
	gOp14Zr
;

1159 
	gOp14Xr
;

1160 
	gOp14Yr
;

1161 
	gOp14U
;

1162 
	gOp14F
;

1163 
	gOp14L
;

1164 
	gOp14Zº
;

1165 
	gOp14Xº
;

1166 
	gOp14Yº
;

1168 
	$DSPOp14
()

1170 
CSec
, 
ESec
, 
CT™
, 
CSö
, 
C
, 
E
;

1172 
	`DSP1_Invî£
(
	`DSP1_Cos
(
Op14Xr
), 0, &
CSec
, &
ESec
);

1175 
	`DSP1_N‹mÆizeDoubÀ
(
Op14U
 * 
	`DSP1_Cos
(
Op14Yr
Ë- 
Op14F
 * 
	`DSP1_Sö
(Op14Yr), &
C
, &
E
);

1177 
E
 = 
ESec
 - E;

1179 
	`DSP1_N‹mÆize
(
C
 * 
CSec
 >> 15, &C, &
E
);

1181 
Op14Zº
 = 
Op14Zr
 + 
	`DSP1_Trunˇã
(
C
, 
E
);

1184 
Op14Xº
 = 
Op14Xr
 + (
Op14U
 * 
	`DSP1_Sö
(
Op14Yr
Ë>> 15Ë+ (
Op14F
 * 
	`DSP1_Cos
(Op14Yr) >> 15);

1187 
	`DSP1_N‹mÆizeDoubÀ
(
Op14U
 * 
	`DSP1_Cos
(
Op14Yr
Ë+ 
Op14F
 * 
	`DSP1_Sö
(Op14Yr), &
C
, &
E
);

1189 
E
 = 
ESec
 - E;

1191 
	`DSP1_N‹mÆize
(
	`DSP1_Sö
(
Op14Xr
), &
CSö
, &
E
);

1193 
CT™
 = 
CSec
 * 
CSö
 >> 15;

1195 
	`DSP1_N‹mÆize
(-(
C
 * 
CT™
 >> 15), &C, &
E
);

1197 
Op14Yº
 = 
Op14Yr
 + 
	`DSP1_Trunˇã
(
C
, 
E
Ë+ 
Op14L
;

1198 
	}
}

1200 
	$DSP1_T¨gë
(
H
, 
V
, *
X
, *
Y
)

1202 
C
, 
E
, 
C1
, 
E1
;

1204 
	`DSP1_Invî£
((
V
 * 
SöAzs
 >> 15Ë+ 
VOff£t
, 8, &
C
, &
E
);

1205 
E
 +
VPœ√_E
;

1207 
C1
 = 
C
 * 
VPœ√_C
 >> 15;

1208 
E1
 = 
E
 + 
SecAZS_E1
;

1210 
H
 <<= 8;

1212 
	`DSP1_N‹mÆize
(
C1
, &
C
, &
E
);

1214 
C
 = 
	`DSP1_Trunˇã
(C, 
E
Ë* 
H
 >> 15;

1216 *
X
 = 
CíåeX
 + (
C
 * 
CosAas
 >> 15);

1217 *
Y
 = 
CíåeY
 - (
C
 * 
SöAas
 >> 15);

1219 
V
 <<= 8;

1221 
	`DSP1_N‹mÆize
(
C1
 * 
SecAZS_C1
 >> 15, &
C
, &
E1
);

1223 
C
 = 
	`DSP1_Trunˇã
(C, 
E1
Ë* 
V
 >> 15;

1225 *
X
 +
C
 * -
SöAas
 >> 15;

1226 *
Y
 +
C
 * 
CosAas
 >> 15;

1227 
	}
}

1229 
	gOp0EH
;

1230 
	gOp0EV
;

1231 
	gOp0EX
;

1232 
	gOp0EY
;

1234 
	$DSPOp0E
()

1236 
	`DSP1_T¨gë
(
Op0EH
, 
Op0EV
, &
Op0EX
, &
Op0EY
);

1237 
	}
}

1239 
	gOp0BX
;

1240 
	gOp0BY
;

1241 
	gOp0BZ
;

1242 
	gOp0BS
;

1243 
	gOp1BX
;

1244 
	gOp1BY
;

1245 
	gOp1BZ
;

1246 
	gOp1BS
;

1247 
	gOp2BX
;

1248 
	gOp2BY
;

1249 
	gOp2BZ
;

1250 
	gOp2BS
;

1252 
	$DSPOp0B
()

1254 
Op0BS
 = (
Op0BX
 * 
m©rixA
[0][0] + 
Op0BY
 * m©rixA[0][1] + 
Op0BZ
 * matrixA[0][2]) >> 15;

1256 #ifde‡
DebugDSP1


1257 
	`Log_Mesßge
("OP0B");

1259 
	}
}

1261 
	$DSPOp1B
()

1263 
Op1BS
 = (
Op1BX
 * 
m©rixB
[0][0] + 
Op1BY
 * m©rixB[0][1] + 
Op1BZ
 * matrixB[0][2]) >> 15;

1265 #ifde‡
DebugDSP1


1266 
	`Log_Mesßge
("OP1B X: %d Y: %d Z: %d S: %d",
Op1BX
,
Op1BY
,
Op1BZ
,
Op1BS
);

1267 
	`Log_Mesßge
(" MX: %d MY: %d MZ: %d SˇÀ: %d",()(
m©rixB
[0][0]*100),()(m©rixB[0][1]*100),()(m©rixB[0][2]*100),()(
sc2
*100));

1269 
	}
}

1271 
	$DSPOp2B
()

1273 
Op2BS
 = (
Op2BX
 * 
m©rixC
[0][0] + 
Op2BY
 * m©rixC[0][1] + 
Op2BZ
 * matrixC[0][2]) >> 15;

1275 #ifde‡
DebugDSP1


1276 
	`Log_Mesßge
("OP2B");

1278 
	}
}

1280 
	gOp08X
,
	gOp08Y
,
	gOp08Z
,
	gOp08Ll
,
	gOp08Lh
;

1282 
	$DSPOp08
()

1284 
Op08Size
 = (
Op08X
 * Op08X + 
Op08Y
 * Op08Y + 
Op08Z
 * Op08Z) << 1;

1285 
Op08Ll
 = 
Op08Size
 & 0xffff;

1286 
Op08Lh
 = (
Op08Size
 >> 16) & 0xffff;

1288 #ifde‡
DebugDSP1


1289 
	`Log_Mesßge
("OP08 %d,%d,%d",
Op08X
,
Op08Y
,
Op08Z
);

1290 
	`Log_Mesßge
("OP08 ((Op08X^2)+(Op08Y^2)+(Op08X^2))=%x",
Op08Size
 );

1292 
	}
}

1294 
	gOp18X
,
	gOp18Y
,
	gOp18Z
,
	gOp18R
,
	gOp18D
;

1296 
	$DSPOp18
()

1298 
Op18D
 = (
Op18X
 * Op18X + 
Op18Y
 * Op18Y + 
Op18Z
 * Op18Z - 
Op18R
 * Op18R) >> 15;

1300 #ifde‡
DebugDSP1


1301 
	`Log_Mesßge
("Op18 X: %d Y: %d Z: %d R: %D DIFF %d",
Op18X
,
Op18Y
,
Op38Z
,
Op18D
);

1303 
	}
}

1305 
	gOp38X
,
	gOp38Y
,
	gOp38Z
,
	gOp38R
,
	gOp38D
;

1307 
	$DSPOp38
()

1309 
Op38D
 = (
Op38X
 * Op38X + 
Op38Y
 * Op38Y + 
Op38Z
 * Op38Z - 
Op38R
 * Op38R) >> 15;

1310 
Op38D
++;

1312 #ifde‡
DebugDSP1


1313 
	`Log_Mesßge
("OP38 X: %d Y: %d Z: %d R: %D DIFF %d",
Op38X
,
Op38Y
,
Op38Z
,
Op38D
);

1315 
	}
}

1317 
	gOp28X
;

1318 
	gOp28Y
;

1319 
	gOp28Z
;

1320 
	gOp28R
;

1322 
	$DSPOp28
()

1324 
Radius
 = 
Op28X
 * Op28X + 
Op28Y
 * Op28Y + 
Op28Z
 * Op28Z;

1326 i‡(
Radius
 =0Ë
Op28R
 = 0;

1329 
C
, 
E
;

1330 
	`DSP1_N‹mÆizeDoubÀ
(
Radius
, &
C
, &
E
);

1331 i‡(
E
 & 1Ë
C
 = C * 0x4000 >> 15;

1333 
Pos
 = 
C
 * 0x0040 >> 15;

1335 
Node1
 = 
DSP1ROM
[0x00d5 + 
Pos
];

1336 
Node2
 = 
DSP1ROM
[0x00d6 + 
Pos
];

1338 
Op28R
 = ((
Node2
 - 
Node1
Ë* (
C
 & 0x1ff) >> 9) + Node1;

1339 
Op28R
 >>(
E
 >> 1);

1342 #ifde‡
DebugDSP1


1343 
	`Log_Mesßge
("OP28 X:%d Y:%d Z:%d",
Op28X
,
Op28Y
,
Op28Z
);

1344 
	`Log_Mesßge
("OP28 Ve˘‹ Lígth %d",
Op28R
);

1346 
	}
}

1348 
	gOp1CX
,
	gOp1CY
,
	gOp1CZ
;

1349 
	gOp1CXBR
,
	gOp1CYBR
,
	gOp1CZBR
,
	gOp1CXAR
,
	gOp1CYAR
,
	gOp1CZAR
;

1350 
	gOp1CX1
;

1351 
	gOp1CY1
;

1352 
	gOp1CZ1
;

1353 
	gOp1CX2
;

1354 
	gOp1CY2
;

1355 
	gOp1CZ2
;

1357 
	$DSPOp1C
()

1360 
Op1CX1
 = (
Op1CYBR
 * 
	`DSP1_Sö
(
Op1CZ
Ë>> 15Ë+ (
Op1CXBR
 * 
	`DSP1_Cos
(Op1CZ) >> 15);

1361 
Op1CY1
 = (
Op1CYBR
 * 
	`DSP1_Cos
(
Op1CZ
Ë>> 15Ë- (
Op1CXBR
 * 
	`DSP1_Sö
(Op1CZ) >> 15);

1362 
Op1CXBR
 = 
Op1CX1
; 
Op1CYBR
 = 
Op1CY1
;

1365 
Op1CZ1
 = (
Op1CXBR
 * 
	`DSP1_Sö
(
Op1CY
Ë>> 15Ë+ (
Op1CZBR
 * 
	`DSP1_Cos
(Op1CY) >> 15);

1366 
Op1CX1
 = (
Op1CXBR
 * 
	`DSP1_Cos
(
Op1CY
Ë>> 15Ë- (
Op1CZBR
 * 
	`DSP1_Sö
(Op1CY) >> 15);

1367 
Op1CXAR
 = 
Op1CX1
; 
Op1CZBR
 = 
Op1CZ1
;

1370 
Op1CY1
 = (
Op1CZBR
 * 
	`DSP1_Sö
(
Op1CX
Ë>> 15Ë+ (
Op1CYBR
 * 
	`DSP1_Cos
(Op1CX) >> 15);

1371 
Op1CZ1
 = (
Op1CZBR
 * 
	`DSP1_Cos
(
Op1CX
Ë>> 15Ë- (
Op1CYBR
 * 
	`DSP1_Sö
(Op1CX) >> 15);

1372 
Op1CYAR
 = 
Op1CY1
; 
Op1CZAR
 = 
Op1CZ1
;

1374 #ifde‡
DebugDSP1


1375 
	`Log_Mesßge
("OP1C Aµly M©rix CX:%d CY:%d CZ",
Op1CXAR
,
Op1CYAR
,
Op1CZAR
);

1377 
	}
}

1379 
	gOp0FRamsize
;

1380 
	gOp0FPass
;

1382 
	$DSPOp0F
()

1384 
Op0FPass
 = 0x0000;

1386 #ifde‡
DebugDSP1


1387 
	`Log_Mesßge
("OP0F RAM Te° Pass:%d", 
Op0FPass
);

1389 
	}
}

1391 
	gOp2FUnknown
;

1392 
	gOp2FSize
;

1394 
	$DSPOp2F
()

1396 
Op2FSize
=0x100;

1397 
	}
}

	@SDD1.H

41 #i‚de‡
_SDD1_H_


42 
	#_SDD1_H_


	)

43 
S9xSëSDD1Mem‹yM≠
 (
uöt32
 
b™k
, uöt32 
vÆue
);

44 
S9xRe£tSDD1
 ();

45 
S9xSDD1Po°LﬂdSèã
 ();

46 
S9xSDD1SaveLoggedD©a
 ();

47 
S9xSDD1LﬂdLoggedD©a
 ();

	@VOIMAGE.H

24 #i‡!
deföed
(
AFX_VOIMAGE_H__B83C4202_DB1E_48BE_92A5_21019F9EE6FC__INCLUDED_
)

25 
	#AFX_VOIMAGE_H__B83C4202_DB1E_48BE_92A5_21019F9EE6FC__INCLUDED_


	)

27 #i‡
_MSC_VER
 > 1000

28 #¥agm®
⁄˚


31 
	~"imgdecmp.h
"

33 ˛as†
	cCVOResour˚


35 
	mpublic
:

36 
CVOResour˚
(
HMODULE
 
hModuÀ
, 
DWORD
 
dwResour˚ID
, 
LPCTSTR
 
pcszCœss
);

37 ~
CVOResour˚
();

39 
BOOL
 
IsLﬂded
();

41 
DWORD
 
	$GëSize
(Ë{  
m_dwSize
; }

42 
PBYTE
 
	$GëD©a
(Ë{  
m_pD©a
; 
	}
}

44 
	$SëU£rD©a
(
DWORD
 
dwVÆue
Ë{ 
m_dwU£r
 = dwVÆue; 
	}
}

45 
DWORD
 
	$GëU£rD©a
(Ë{  
m_dwU£r
; 
	}
}

47 
	g¥Ÿe˘ed
:

48 
DWORD
 
m_dwU£r
;

50 
DWORD
 
	gm_dwSize
;

51 
PBYTE
 
	gm_pD©a
;

52 
HGLOBAL
 
	gm_hGlobÆ
;

53 
HRSRC
 
	gm_hr§c
;

56 ˛as†
	cCVOImage


58 
	mpublic
:

59 
HBITMAP
 
C›y
();

60 
DWORD
 
CALLBACK
 
GëImageResour˚D©a
(
LPSTR
 
szBuf„r
, DWORD 
dwBuf„rMax
, 
LPARAM
 
lP¨am
);

61 
BOOL
 
IsLﬂded
();

62 
CALLBACK
 
ImageProgªss
–
IImageRídî
 *, 
BOOL
, 
LPARAM
);

63 
DWORD
 
CALLBACK
 
GëImageD©a
–
LPSTR
, DWORD, 
LPARAM
);

64 
BOOL
 
SëBôm≠
(
HDC
 
hdc
, 
DWORD
 
dwResour˚ID
, 
LPCTSTR
 
pcszCœss
 = 
TEXT
("IMAGE"), 
HMODULE
 
hModuÀ
 = 0 );

65 
DWORD
 
GëWidth
();

66 
DWORD
 
GëHeight
();

67 
BOOL
 
Døw
(
HDC
 
hdc
, 
x
, 
y
, 
cx
 = -1, 
cy
 = -1);

68 
BOOL
 
Lﬂd
(
HDC
 
hdc
, 
LPCTSTR
 
pcszFûeName
);

69 
CVOImage
();

70 
	mvútuÆ
 ~
CVOImage
();

71 
›î©‹
 
	$HBITMAP
(Ë{  
m_hbôm≠
; }

73 
¥Ÿe˘ed
:

74 
DWORD
 
m_dwHeight
;

75 
DWORD
 
m_dwWidth
;

76 
HBITMAP
 
m_hbôm≠
;

77 
BOOL
 
g_bSåëchB…
;

78 
g_iMaxHeight
;

79 
g_iMaxWidth
;

80 
g_iSˇÀ
;

81 
HDC
 
g_hdc
;

82 
	}
};

	@apu.cpp

42 
	~"¢es9x.h
"

43 
	~"•c700.h
"

44 
	~"≠u.h
"

45 
	~"soundux.h
"

46 
	~"˝uexec.h
"

52 #ifde‡
DEBUGGER


53 
S9xTø˚SoundDSP
 (c⁄° *
s
, 
i1
 = 0, 
i2
 = 0, 
i3
 = 0,

54 
i4
 = 0, 
i5
 = 0, 
i6
 = 0, 
i7
 = 0);

57 #unde‡
ABS


58 
	#ABS
(
a
Ë(◊Ë< 0 ? -◊Ë: (a))

	)

59 
	#ENVX_SHIFT
 24

	)

62 
	gAâackR©e
 [16] = {

67 
	gDeˇyR©e
 [8] = {

71 
	gSu°aöR©e
 [32] = {

78 
	gIn¸ó£R©e
 [32] = {

85 
	gDe¸ó£R©eExp
 [32] = {

93 
	gAâackER©e
 [16][10];

94 
	gDeˇyER©e
 [8][10];

95 
	gSu°aöER©e
 [32][10];

96 
	gIn¸ó£ER©e
 [32][10];

97 
	gDe¸ó£ER©eExp
[32][10];

98 
	gKeyOffER©e
[10];

101 
ölöe
 
	$S9xSëEnvñ›eR©e
 (
ch™√l
, 
øã
, 
dúe˘i⁄
, 
èrgë
, 
mode
)

103 
	`S9xSëEnvR©e
 (&
SoundD©a
.
ch™√ls
 [
ch™√l
], 
øã
, 
dúe˘i⁄
, 
èrgë
, 
mode
);

104 
	}
}

106 
ölöe
 
	$S9xSëSoundADSR
 (
ch™√l
, 
©èck_öd
, 
deˇy_öd
,

107 
su°aö_öd
, 
su°aö_Àvñ
, 
ªÀa£_øã
)

109 
©èck_øã
 = 
AâackR©e
 [
©èck_öd
];

110 
deˇy_øã
 = 
DeˇyR©e
 [
deˇy_öd
];

111 
su°aö_øã
 = 
Su°aöR©e
 [
su°aö_öd
];

115 i‡(
©èck_øã
 == 1)

116 
©èck_øã
 = 0;

118 
SoundD©a
.
ch™√ls
[
ch™√l
].
ív_öd_©èck
 = 
©èck_öd
;

119 
SoundD©a
.
ch™√ls
[
ch™√l
].
ív_öd_deˇy
 = 
deˇy_öd
;

120 
SoundD©a
.
ch™√ls
[
ch™√l
].
ív_öd_su°aö
 = 
su°aö_öd
;

122 
SoundD©a
.
ch™√ls
[
ch™√l
].
©èck_øã
 =áttack_rate;

123 
SoundD©a
.
ch™√ls
[
ch™√l
].
deˇy_øã
 = decay_rate;

124 
SoundD©a
.
ch™√ls
[
ch™√l
].
su°aö_øã
 = sustain_rate;

125 
SoundD©a
.
ch™√ls
[
ch™√l
].
ªÀa£_øã
 =Ñelease_rate;

126 
SoundD©a
.
ch™√ls
[
ch™√l
].
su°aö_Àvñ
 = sustain_level + 1;

128 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
)

130 
SOUND_ATTACK
:

131 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
©èck_øã
, 1, 127, 0);

134 
SOUND_DECAY
:

135 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
deˇy_øã
, -1,

136 (
MAX_ENVELOPE_HEIGHT
 * (
su°aö_Àvñ
 + 1)) >> 3, 1<<28);

138 
SOUND_SUSTAIN
:

139 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
su°aö_øã
, -1, 0, 2<<28);

142 
	}
}

144 
ölöe
 
	$S9xSëSoundVﬁume
 (
ch™√l
, 
vﬁume_À·
, 
vﬁume_right
)

146 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

147 i‡(!
so
.
°îeo
)

148 
vﬁume_À·
 = (
	`ABS
(
vﬁume_right
) + ABS(volume_left)) / 2;

150 
ch
->
vﬁume_À·
 = volume_left;

151 
ch
->
vﬁume_right
 = volume_right;

152 
ch
-> 
À·_vﬁ_Àvñ
 = (ch->
ívx
 * 
vﬁume_À·
) / 128;

153 
ch
->
right_vﬁ_Àvñ
 = (ch->
ívx
 * 
vﬁume_right
) / 128;

154 
	}
}

156 
ölöe
 
	$S9xSëMa°îVﬁume
 (
vﬁume_À·
, 
vﬁume_right
)

158 i‡(
Sëtögs
.
DißbÀMa°îVﬁume
)

160 
SoundD©a
.
ma°î_vﬁume_À·
 = 127;

161 
SoundD©a
.
ma°î_vﬁume_right
 = 127;

162 
SoundD©a
.
ma°î_vﬁume
 [0] = SoundData.master_volume [1] = 127;

166 i‡(!
so
.
°îeo
)

167 
vﬁume_À·
 = (
	`ABS
 (
vﬁume_right
) + ABS (volume_left)) / 2;

168 
SoundD©a
.
ma°î_vﬁume_À·
 = 
vﬁume_À·
;

169 
SoundD©a
.
ma°î_vﬁume_right
 = 
vﬁume_right
;

170 
SoundD©a
.
ma°î_vﬁume
 [0] = 
vﬁume_À·
;

171 
SoundD©a
.
ma°î_vﬁume
 [1] = 
vﬁume_right
;

173 
	}
}

175 
ölöe
 
	$S9xSëEchoVﬁume
 (
vﬁume_À·
, 
vﬁume_right
)

177 i‡(!
so
.
°îeo
)

178 
vﬁume_À·
 = (
	`ABS
 (
vﬁume_right
) + ABS (volume_left)) / 2;

179 
SoundD©a
.
echo_vﬁume_À·
 = 
vﬁume_À·
;

180 
SoundD©a
.
echo_vﬁume_right
 = 
vﬁume_right
;

181 
SoundD©a
.
echo_vﬁume
 [0] = 
vﬁume_À·
;

182 
SoundD©a
.
echo_vﬁume
 [1] = 
vﬁume_right
;

183 
	}
}

185 
ölöe
 
	$S9xSëEchoWrôeE«bÀ
 (
uöt8
 
byã
)

187 
SoundD©a
.
echo_wrôe_íabÀd
 = 
byã
;

188 
	`S9xSëEchoDñay
 (
APU
.
DSP
 [
APU_EDL
] & 15);

189 
	}
}

191 
ölöe
 
	$S9xSëFªquícyModuœti⁄E«bÀ
 (
uöt8
 
byã
)

193 
SoundD©a
.
pôch_mod
 = 
byã
 & (0xFE);

194 
	}
}

196 
ölöe
 
	$S9xGëEnvñ›eHeight
 (
ch™√l
)

198 i‡((
Sëtögs
.
SoundEnvñ›eHeightRódög
 ||

199 
SNESGameFixes
.
SoundEnvñ›eHeightRódög2
) &&

200 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
 !
SOUND_SILENT
 &&

201 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
 !
SOUND_GAIN
)

203  (
SoundD©a
.
ch™√ls
[
ch™√l
].
ívx
);

207 i‡(
SNESGameFixes
.
SoundEnvñ›eHeightRódög2
 &&

208 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
 !
SOUND_SILENT
)

210  (
SoundD©a
.
ch™√ls
[
ch™√l
].
ívx
);

214 
	}
}

216 
ölöe
 
	$S9xSëSoundHîtz
 (
ch™√l
, 
hîtz
)

218 
SoundD©a
.
ch™√ls
[
ch™√l
].
hîtz
 = hertz;

219 
	`S9xSëSoundFªquícy
 (
ch™√l
, 
hîtz
);

220 
	}
}

222 
ölöe
 
	$S9xSëSoundTy≥
 (
ch™√l
, 
ty≥_of_sound
)

224 
SoundD©a
.
ch™√ls
[
ch™√l
].
ty≥
 = 
ty≥_of_sound
;

225 
	}
}

227 
ölöe
 
boﬁ8
 
	$S9xSëSoundMode
 (
ch™√l
, 
mode
)

229 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

231 
mode
)

233 
MODE_RELEASE
:

234 i‡(
ch
->
mode
 !
MODE_NONE
)

236 
ch
->
mode
 = 
MODE_RELEASE
;

237  (
TRUE
);

241 
MODE_DECREASE_LINEAR
:

242 
MODE_DECREASE_EXPONENTIAL
:

243 
MODE_GAIN
:

244 i‡(
ch
->
mode
 !
MODE_RELEASE
)

246 
ch
->
mode
 = mode;

247 i‡(
ch
->
°©e
 !
SOUND_SILENT
)

248 
ch
->
°©e
 = 
mode
;

250  (
TRUE
);

254 
MODE_INCREASE_LINEAR
:

255 
MODE_INCREASE_BENT_LINE
:

256 i‡(
ch
->
mode
 !
MODE_RELEASE
)

258 
ch
->
mode
 = mode;

259 i‡(
ch
->
°©e
 !
SOUND_SILENT
)

260 
ch
->
°©e
 = 
mode
;

262  (
TRUE
);

266 
MODE_ADSR
:

267 i‡(
ch
->
mode
 =
MODE_NONE
 || ch->modê=
MODE_ADSR
)

269 
ch
->
mode
 = mode;

270  (
TRUE
);

274  (
FALSE
);

275 
	}
}

277 
ölöe
 
	$S9xPœySam∂e
 (
ch™√l
)

279 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

281 
ch
->
°©e
 = 
SOUND_SILENT
;

282 
ch
->
mode
 = 
MODE_NONE
;

283 
ch
->
ívx
 = 0;

284 
ch
->
ívxx
 = 0;

286 
ch
->
g_ödex
=0;

287 
ch
->
gaussün
[0]=ch->gaussian[1]=ch->gaussian[2]=ch->gaussian[3]=0;

289 
	`S9xFixEnvñ›e
 (
ch™√l
,

290 
APU
.
DSP
 [
APU_GAIN
 + (
ch™√l
 << 4)],

291 
APU
.
DSP
 [
APU_ADSR1
 + (
ch™√l
 << 4)],

292 
APU
.
DSP
 [
APU_ADSR2
 + (
ch™√l
 << 4)]);

294 
ch
->
ßm∂e_numbî
 = 
APU
.
DSP
 [
APU_SRCN
 + 
ch™√l
 * 0x10];

295 i‡(
APU
.
DSP
 [
APU_NON
] & (1 << 
ch™√l
))

296 
ch
->
ty≥
 = 
SOUND_NOISE
;

298 
ch
->
ty≥
 = 
SOUND_SAMPLE
;

300 
	`S9xSëSoundFªquícy
 (
ch™√l
, 
ch
->
hîtz
);

301 
ch
->
lo›
 = 
FALSE
;

302 
ch
->
√eds_decode
 = 
TRUE
;

303 
ch
->
œ°_block
 = 
FALSE
;

304 
ch
->
¥evious
 [0] = ch->previous[1] = 0;

305 
ch
->
block_poöãr
 = *
	`S9xGëSam∂eAddªss
(ch->
ßm∂e_numbî
);

306 
ch
->
ßm∂e_poöãr
 = 0;

307 
ch
->
ív_îr‹
 = 0;

308 
ch
->
√xt_ßm∂e
 = 0;

309 
ch
->
öãΩﬁ©e
 = 0;

310 
ch
->
œ°_vÆid_hódî
=0;

311 
ch
->
mode
)

313 
MODE_ADSR
:

314 i‡(
ch
->
©èck_øã
 == 0)

316 i‡(
ch
->
deˇy_øã
 =0 || ch->
su°aö_Àvñ
 == 8)

318 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

319 
ch
->
ívx
 = (
MAX_ENVELOPE_HEIGHT
 * ch->
su°aö_Àvñ
) >> 3;

320 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0, 2<<28);

324 
ch
->
°©e
 = 
SOUND_DECAY
;

325 
ch
->
ívx
 = 
MAX_ENVELOPE_HEIGHT
;

326 
	`S9xSëEnvR©e
 (
ch
, ch->
deˇy_øã
, -1,

327 (
MAX_ENVELOPE_HEIGHT
 * 
ch
->
su°aö_Àvñ
) >> 3, 1<<28);

329 
ch
-> 
À·_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_À·
) / 128;

330 
ch
->
right_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_right
) / 128;

334 
ch
->
°©e
 = 
SOUND_ATTACK
;

335 
ch
->
ívx
 = 0;

336 
ch
->
À·_vﬁ_Àvñ
 = 0;

337 
ch
->
right_vﬁ_Àvñ
 = 0;

338 
	`S9xSëEnvR©e
 (
ch
, ch->
©èck_øã
, 1, 
MAX_ENVELOPE_HEIGHT
, 0);

340 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

343 
MODE_GAIN
:

344 
ch
->
°©e
 = 
SOUND_GAIN
;

347 
MODE_INCREASE_LINEAR
:

348 
ch
->
°©e
 = 
SOUND_INCREASE_LINEAR
;

351 
MODE_INCREASE_BENT_LINE
:

352 
ch
->
°©e
 = 
SOUND_INCREASE_BENT_LINE
;

355 
MODE_DECREASE_LINEAR
:

356 
ch
->
°©e
 = 
SOUND_DECREASE_LINEAR
;

359 
MODE_DECREASE_EXPONENTIAL
:

360 
ch
->
°©e
 = 
SOUND_DECREASE_EXPONENTIAL
;

367 
	`S9xFixEnvñ›e
 (
ch™√l
,

368 
APU
.
DSP
 [
APU_GAIN
 + (
ch™√l
 << 4)],

369 
APU
.
DSP
 [
APU_ADSR1
 + (
ch™√l
 << 4)],

370 
APU
.
DSP
 [
APU_ADSR2
 + (
ch™√l
 << 4)]);

371 
	}
}

373 #ifde‡
ASM_SPC700


374 "C" 
uöt32
 
Spc700JumpTab
;

377 
boﬁ8
 
	$S9xInôAPU
 ()

380 
	`mem£t
(&
IAPU
, 0, (IAPU));

381 
IAPU
.
ExåaRAM
 = 
APU
.ExtraRAM;

382 #ifde‡
ASM_SPC700


383 
IAPU
.
asmJumpTab
 = &
Spc700JumpTab
;

386 
IAPU
.
RAM
 = (
uöt8
 *Ë
	`mÆloc
 (0x10000);

387 
IAPU
.
ShadowRAM
 = 
NULL
;

388 
IAPU
.
CachedSam∂es
 = 
NULL
;

390 i‡(!
IAPU
.
RAM
 )

392 
	`S9xDeöôAPU
 ();

393  (
FALSE
);

396  (
TRUE
);

397 
	}
}

399 
	$S9xDeöôAPU
 ()

401 i‡(
IAPU
.
RAM
)

403 
	`‰ì
 ((*Ë
IAPU
.
RAM
);

404 
IAPU
.
RAM
 = 
NULL
;

406 i‡(
IAPU
.
ShadowRAM
)

408 
	`‰ì
 ((*Ë
IAPU
.
ShadowRAM
);

409 
IAPU
.
ShadowRAM
 = 
NULL
;

411 i‡(
IAPU
.
CachedSam∂es
)

413 
	`‰ì
 ((*Ë
IAPU
.
CachedSam∂es
);

414 
IAPU
.
CachedSam∂es
 = 
NULL
;

416 
	}
}

418 
EXTERN_C
 
uöt8
 
	gAPUROM
 [64];

420 
	$S9xRe£tAPU
 ()

424 
	`mem£t
 (
IAPU
.
RAM
, 
Sëtögs
.
APURAMInôülVÆue
, 0x10000);

428 
	`ZîoMem‹y
 (
APU
.
OutP‹ts
, 4);

429 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
;

430 
	`memmove
 (&
IAPU
.
RAM
 [0xffc0], 
APUROM
,  (APUROM));

431 
	`memmove
 (
APU
.
ExåaRAM
, 
APUROM
,  (APUROM));

432 
IAPU
.
PC
 = IAPU.
RAM
 + IAPU.RAM [0xfffe] + (IAPU.RAM [0xffff] << 8);

433 
CPU
.
APU_Cy˛es
 = 0;

434 
IAPU
.
YA
.
W
 = 0;

435 
IAPU
.
X
 = 0;

436 
IAPU
.
S
 = 0xff;

437 
IAPU
.
P
 = 0;

438 
	`S9xAPUU≈ackSètus
 ();

439 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
;

440 #ifde‡
SPC700_SHUTDOWN


441 
IAPU
.
WaôAddªss1
 = 
NULL
;

442 
IAPU
.
WaôAddªss2
 = 
NULL
;

443 
IAPU
.
WaôCou¡î
 = 0;

445 
APU
.
ShowROM
 = 
TRUE
;

446 
IAPU
.
RAM
 [0xf1] = 0x80;

448 
i
;

450 
i
 = 0; i < 3; i++)

452 
APU
.
TimîE«bÀd
 [
i
] = 
FALSE
;

453 
APU
.
TimîVÆueWrôãn
 [
i
] = 0;

454 
APU
.
TimîT¨gë
 [
i
] = 0;

455 
APU
.
Timî
 [
i
] = 0;

457 
j
 = 0; j < 0x80; j++)

458 
APU
.
DSP
 [
j
] = 0;

460 
IAPU
.
TwoCy˛es
 = IAPU.
O√Cy˛e
 * 2;

462 
i
 = 0; i < 256; i++)

463 
S9xAPUCy˛es
 [
i
] = 
S9xAPUCy˛eLígths
 [i] * 
IAPU
.
O√Cy˛e
;

465 
APU
.
DSP
 [
APU_ENDX
] = 0;

466 
APU
.
DSP
 [
APU_KOFF
] = 0;

467 
APU
.
DSP
 [
APU_KON
] = 0;

468 
APU
.
DSP
 [
APU_FLG
] = 
APU_MUTE
 | 
APU_ECHO_DISABLED
;

469 
APU
.
KeyedCh™√ls
 = 0;

471 
	`S9xRe£tSound
 (
TRUE
);

472 
	`S9xSëEchoE«bÀ
 (0);

473 
	}
}

475 
‰ame˝to
;

476 
	$S9xSëAPUDSP
 (
uöt8
 
byã
)

478 
uöt8
 
ªg
 = 
IAPU
.
RAM
 [0xf2];

479 
uöt8
 
KeyOn
;

480 
uöt8
 
KeyOnPªv
;

481 
i
;

495 
ªg
)

497 
APU_FLG
:

498 i‡(
byã
 & 
APU_SOFT_RESET
)

500 
APU
.
DSP
 [
ªg
] = 
APU_MUTE
 | 
APU_ECHO_DISABLED
 | (
byã
 & 0x1f);

501 
APU
.
DSP
 [
APU_ENDX
] = 0;

502 
APU
.
DSP
 [
APU_KOFF
] = 0;

503 
APU
.
DSP
 [
APU_KON
] = 0;

504 
	`S9xSëEchoWrôeE«bÀ
 (
FALSE
);

505 #ifde‡
DEBUGGER


506 i‡(
Sëtögs
.
Tø˚SoundDSP
)

507 
	`S9xTø˚SoundDSP
 ("[%d] DSPÑe£t\n", 
ICPU
.
Sˇ∆öe
);

510 
	`S9xRe£tSound
 (
FALSE
);

514 
	`S9xSëEchoWrôeE«bÀ
 (!(
byã
 & 
APU_ECHO_DISABLED
));

515 i‡(
byã
 & 
APU_MUTE
)

517 #ifde‡
DEBUGGER


518 i‡(
Sëtögs
.
Tø˚SoundDSP
)

519 
	`S9xTø˚SoundDSP
 ("[%d] Muã sound\n", 
ICPU
.
Sˇ∆öe
);

521 
	`S9xSëSoundMuã
 (
TRUE
);

524 
	`S9xSëSoundMuã
 (
FALSE
);

526 
SoundD©a
.
noi£_hîtz
 = 
Noi£Fªq
 [
byã
 & 0x1f];

527 
i
 = 0; i < 8; i++)

529 i‡(
SoundD©a
.
ch™√ls
 [
i
].
ty≥
 =
SOUND_NOISE
)

530 
	`S9xSëSoundFªquícy
 (
i
, 
SoundD©a
.
noi£_hîtz
);

534 
APU_NON
:

535 i‡(
byã
 !
APU
.
DSP
 [
APU_NON
])

537 #ifde‡
DEBUGGER


538 i‡(
Sëtögs
.
Tø˚SoundDSP
)

539 
	`S9xTø˚SoundDSP
 ("[%d] Noi£:", 
ICPU
.
Sˇ∆öe
);

541 
uöt8
 
mask
 = 1;

542 
c
 = 0; c < 8; c++, 
mask
 <<= 1)

544 
ty≥
;

545 i‡(
byã
 & 
mask
)

547 
ty≥
 = 
SOUND_NOISE
;

548 #ifde‡
DEBUGGER


549 i‡(
Sëtögs
.
Tø˚SoundDSP
)

551 i‡(
APU
.
DSP
 [
ªg
] & 
mask
)

552 
	`S9xTø˚SoundDSP
 ("%d,", 
c
);

554 
	`S9xTø˚SoundDSP
 ("%d(⁄),", 
c
);

560 
ty≥
 = 
SOUND_SAMPLE
;

561 #ifde‡
DEBUGGER


562 i‡(
Sëtögs
.
Tø˚SoundDSP
)

564 i‡(
APU
.
DSP
 [
ªg
] & 
mask
)

565 
	`S9xTø˚SoundDSP
 ("%d(off),", 
c
);

569 
	`S9xSëSoundTy≥
 (
c
, 
ty≥
);

571 #ifde‡
DEBUGGER


572 i‡(
Sëtögs
.
Tø˚SoundDSP
)

573 
	`S9xTø˚SoundDSP
 ("\n");

577 
APU_MVOL_LEFT
:

578 i‡(
byã
 !
APU
.
DSP
 [
APU_MVOL_LEFT
])

580 #ifde‡
DEBUGGER


581 i‡(
Sëtögs
.
Tø˚SoundDSP
)

582 
	`S9xTø˚SoundDSP
 ("[%d] Master volumeÜeft:%d\n",

583 
ICPU
.
Sˇ∆öe
, (sig√d Ë
byã
);

585 
	`S9xSëMa°îVﬁume
 ((sig√d Ë
byã
,

586 (sig√d Ë
APU
.
DSP
 [
APU_MVOL_RIGHT
]);

589 
APU_MVOL_RIGHT
:

590 i‡(
byã
 !
APU
.
DSP
 [
APU_MVOL_RIGHT
])

592 #ifde‡
DEBUGGER


593 i‡(
Sëtögs
.
Tø˚SoundDSP
)

594 
	`S9xTø˚SoundDSP
 ("[%d] Master volumeÑight:%d\n",

595 
ICPU
.
Sˇ∆öe
, (sig√d Ë
byã
);

597 
	`S9xSëMa°îVﬁume
 ((sig√d Ë
APU
.
DSP
 [
APU_MVOL_LEFT
],

598 (sig√d Ë
byã
);

601 
APU_EVOL_LEFT
:

602 i‡(
byã
 !
APU
.
DSP
 [
APU_EVOL_LEFT
])

604 #ifde‡
DEBUGGER


605 i‡(
Sëtögs
.
Tø˚SoundDSP
)

606 
	`S9xTø˚SoundDSP
 ("[%d] Echo volumeÜeft:%d\n",

607 
ICPU
.
Sˇ∆öe
, (sig√d Ë
byã
);

609 
	`S9xSëEchoVﬁume
 ((sig√d Ë
byã
,

610 (sig√d Ë
APU
.
DSP
 [
APU_EVOL_RIGHT
]);

613 
APU_EVOL_RIGHT
:

614 i‡(
byã
 !
APU
.
DSP
 [
APU_EVOL_RIGHT
])

616 #ifde‡
DEBUGGER


617 i‡(
Sëtögs
.
Tø˚SoundDSP
)

618 
	`S9xTø˚SoundDSP
 ("[%d] Echo volumeÑight:%d\n",

619 
ICPU
.
Sˇ∆öe
, (sig√d Ë
byã
);

621 
	`S9xSëEchoVﬁume
 ((sig√d Ë
APU
.
DSP
 [
APU_EVOL_LEFT
],

622 (sig√d Ë
byã
);

625 
APU_ENDX
:

626 #ifde‡
DEBUGGER


627 i‡(
Sëtögs
.
Tø˚SoundDSP
)

628 
	`S9xTø˚SoundDSP
 ("[%d] Re£àENDX\n", 
ICPU
.
Sˇ∆öe
);

630 
byã
 = 0;

633 
APU_KOFF
:

636 
uöt8
 
mask
 = 1;

637 #ifde‡
DEBUGGER


638 i‡(
Sëtögs
.
Tø˚SoundDSP
)

639 
	`S9xTø˚SoundDSP
 ("[%d] Key off:", 
ICPU
.
Sˇ∆öe
);

641 
c
 = 0; c < 8; c++, 
mask
 <<= 1)

643 i‡((
byã
 & 
mask
) != 0)

645 #ifde‡
DEBUGGER


647 i‡(
Sëtögs
.
Tø˚SoundDSP
)

648 
	`S9xTø˚SoundDSP
 ("%d,", 
c
);

650 i‡(
APU
.
KeyedCh™√ls
 & 
mask
)

653 
KeyOnPªv
&=~
mask
;

654 
APU
.
KeyedCh™√ls
 &~
mask
;

655 
APU
.
DSP
 [
APU_KON
] &~
mask
;

657 
	`S9xSëSoundKeyOff
 (
c
);

661 if((
KeyOnPªv
&
mask
)!=0)

663 
KeyOnPªv
&=~
mask
;

664 
APU
.
KeyedCh™√ls
 |
mask
;

666 
APU
.
DSP
 [
APU_KOFF
] &~
mask
;

667 
APU
.
DSP
 [
APU_ENDX
] &~
mask
;

668 
	`S9xPœySam∂e
 (
c
);

671 #ifde‡
DEBUGGER


672 i‡(
Sëtögs
.
Tø˚SoundDSP
)

673 
	`S9xTø˚SoundDSP
 ("\n");

677 
APU
.
DSP
 [
APU_KOFF
] = 
byã
;

679 
APU_KON
:

681 i‡(
byã
)

683 
uöt8
 
mask
 = 1;

684 #ifde‡
DEBUGGER


686 i‡(
Sëtögs
.
Tø˚SoundDSP
)

687 
	`S9xTø˚SoundDSP
 ("[%d] Key on:", 
ICPU
.
Sˇ∆öe
);

689 
c
 = 0; c < 8; c++, 
mask
 <<= 1)

691 i‡((
byã
 & 
mask
) != 0)

693 #ifde‡
DEBUGGER


694 i‡(
Sëtögs
.
Tø˚SoundDSP
)

695 
	`S9xTø˚SoundDSP
 ("%d,", 
c
);

699 if((
APU
.
DSP
 [
APU_KOFF
] & 
mask
) ==0)

701 
KeyOnPªv
&=~
mask
;

702 
APU
.
KeyedCh™√ls
 |
mask
;

705 
APU
.
DSP
 [
APU_ENDX
] &~
mask
;

706 
	`S9xPœySam∂e
 (
c
);

708 
KeyOn
|=
mask
;

711 #ifde‡
DEBUGGER


712 i‡(
Sëtögs
.
Tø˚SoundDSP
)

713 
	`S9xTø˚SoundDSP
 ("\n");

719 
APU_VOL_LEFT
 + 0x00:

720 
APU_VOL_LEFT
 + 0x10:

721 
APU_VOL_LEFT
 + 0x20:

722 
APU_VOL_LEFT
 + 0x30:

723 
APU_VOL_LEFT
 + 0x40:

724 
APU_VOL_LEFT
 + 0x50:

725 
APU_VOL_LEFT
 + 0x60:

726 
APU_VOL_LEFT
 + 0x70:

730 #ifde‡
DEBUGGER


731 i‡(
Sëtögs
.
Tø˚SoundDSP
)

732 
	`S9xTø˚SoundDSP
 ("[%d] %d volumeÜeft: %d\n",

733 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, (sig√d Ë
byã
);

735 
	`S9xSëSoundVﬁume
 (
ªg
 >> 4, (sig√d Ë
byã
,

736 (sig√d Ë
APU
.
DSP
 [
ªg
 + 1]);

739 
APU_VOL_RIGHT
 + 0x00:

740 
APU_VOL_RIGHT
 + 0x10:

741 
APU_VOL_RIGHT
 + 0x20:

742 
APU_VOL_RIGHT
 + 0x30:

743 
APU_VOL_RIGHT
 + 0x40:

744 
APU_VOL_RIGHT
 + 0x50:

745 
APU_VOL_RIGHT
 + 0x60:

746 
APU_VOL_RIGHT
 + 0x70:

750 #ifde‡
DEBUGGER


751 i‡(
Sëtögs
.
Tø˚SoundDSP
)

752 
	`S9xTø˚SoundDSP
 ("[%d] %d volumeÑight: %d\n",

753 
ICPU
.
Sˇ∆öe
, 
ªg
 >>4, (sig√d Ë
byã
);

755 
	`S9xSëSoundVﬁume
 (
ªg
 >> 4, (sig√d Ë
APU
.
DSP
 [reg - 1],

756 (sig√d Ë
byã
);

760 
APU_P_LOW
 + 0x00:

761 
APU_P_LOW
 + 0x10:

762 
APU_P_LOW
 + 0x20:

763 
APU_P_LOW
 + 0x30:

764 
APU_P_LOW
 + 0x40:

765 
APU_P_LOW
 + 0x50:

766 
APU_P_LOW
 + 0x60:

767 
APU_P_LOW
 + 0x70:

768 #ifde‡
DEBUGGER


769 i‡(
Sëtögs
.
Tø˚SoundDSP
)

770 
	`S9xTø˚SoundDSP
 ("[%d] %d freqÜow: %d\n",

771 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, 
byã
);

773 
	`S9xSëSoundHîtz
 (
ªg
 >> 4, (((
byã
 + (
APU
.
DSP
 [ªg + 1] << 8)Ë& 
FREQUENCY_MASK
) * 32000) >> 12);

776 
APU_P_HIGH
 + 0x00:

777 
APU_P_HIGH
 + 0x10:

778 
APU_P_HIGH
 + 0x20:

779 
APU_P_HIGH
 + 0x30:

780 
APU_P_HIGH
 + 0x40:

781 
APU_P_HIGH
 + 0x50:

782 
APU_P_HIGH
 + 0x60:

783 
APU_P_HIGH
 + 0x70:

784 #ifde‡
DEBUGGER


785 i‡(
Sëtögs
.
Tø˚SoundDSP
)

786 
	`S9xTø˚SoundDSP
 ("[%d] %d freq high: %d\n",

787 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, 
byã
);

789 
	`S9xSëSoundHîtz
 (
ªg
 >> 4,

790 (((
byã
 << 8Ë+ 
APU
.
DSP
 [
ªg
 - 1]Ë& 
FREQUENCY_MASK
) * 8);

793 
APU_SRCN
 + 0x00:

794 
APU_SRCN
 + 0x10:

795 
APU_SRCN
 + 0x20:

796 
APU_SRCN
 + 0x30:

797 
APU_SRCN
 + 0x40:

798 
APU_SRCN
 + 0x50:

799 
APU_SRCN
 + 0x60:

800 
APU_SRCN
 + 0x70:

801 i‡(
byã
 !
APU
.
DSP
 [
ªg
])

803 #ifde‡
DEBUGGER


804 i‡(
Sëtögs
.
Tø˚SoundDSP
)

805 
	`S9xTø˚SoundDSP
 ("[%d] %d sampleÇumber: %d\n",

806 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, 
byã
);

812 
APU_ADSR1
 + 0x00:

813 
APU_ADSR1
 + 0x10:

814 
APU_ADSR1
 + 0x20:

815 
APU_ADSR1
 + 0x30:

816 
APU_ADSR1
 + 0x40:

817 
APU_ADSR1
 + 0x50:

818 
APU_ADSR1
 + 0x60:

819 
APU_ADSR1
 + 0x70:

820 i‡(
byã
 !
APU
.
DSP
 [
ªg
])

822 #ifde‡
DEBUGGER


823 i‡(
Sëtögs
.
Tø˚SoundDSP
)

824 
	`S9xTø˚SoundDSP
 ("[%d] %dádsr1: %02x\n",

825 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, 
byã
);

828 
	`S9xFixEnvñ›e
 (
ªg
 >> 4, 
APU
.
DSP
 [ªg + 2], 
byã
,

829 
APU
.
DSP
 [
ªg
 + 1]);

834 
APU_ADSR2
 + 0x00:

835 
APU_ADSR2
 + 0x10:

836 
APU_ADSR2
 + 0x20:

837 
APU_ADSR2
 + 0x30:

838 
APU_ADSR2
 + 0x40:

839 
APU_ADSR2
 + 0x50:

840 
APU_ADSR2
 + 0x60:

841 
APU_ADSR2
 + 0x70:

842 i‡(
byã
 !
APU
.
DSP
 [
ªg
])

844 #ifde‡
DEBUGGER


845 i‡(
Sëtögs
.
Tø˚SoundDSP
)

846 
	`S9xTø˚SoundDSP
 ("[%d] %dádsr2: %02x\n",

847 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, 
byã
);

850 
	`S9xFixEnvñ›e
 (
ªg
 >> 4, 
APU
.
DSP
 [reg + 1], APU.DSP [reg - 1],

851 
byã
);

856 
APU_GAIN
 + 0x00:

857 
APU_GAIN
 + 0x10:

858 
APU_GAIN
 + 0x20:

859 
APU_GAIN
 + 0x30:

860 
APU_GAIN
 + 0x40:

861 
APU_GAIN
 + 0x50:

862 
APU_GAIN
 + 0x60:

863 
APU_GAIN
 + 0x70:

864 i‡(
byã
 !
APU
.
DSP
 [
ªg
])

866 #ifde‡
DEBUGGER


867 i‡(
Sëtögs
.
Tø˚SoundDSP
)

868 
	`S9xTø˚SoundDSP
 ("[%d] %d gain: %02x\n",

869 
ICPU
.
Sˇ∆öe
, 
ªg
>>4, 
byã
);

872 
	`S9xFixEnvñ›e
 (
ªg
 >> 4, 
byã
, 
APU
.
DSP
 [reg - 2],

873 
APU
.
DSP
 [
ªg
 - 1]);

878 
APU_ENVX
 + 0x00:

879 
APU_ENVX
 + 0x10:

880 
APU_ENVX
 + 0x20:

881 
APU_ENVX
 + 0x30:

882 
APU_ENVX
 + 0x40:

883 
APU_ENVX
 + 0x50:

884 
APU_ENVX
 + 0x60:

885 
APU_ENVX
 + 0x70:

888 
APU_OUTX
 + 0x00:

889 
APU_OUTX
 + 0x10:

890 
APU_OUTX
 + 0x20:

891 
APU_OUTX
 + 0x30:

892 
APU_OUTX
 + 0x40:

893 
APU_OUTX
 + 0x50:

894 
APU_OUTX
 + 0x60:

895 
APU_OUTX
 + 0x70:

898 
APU_DIR
:

899 #ifde‡
DEBUGGER


900 i‡(
Sëtögs
.
Tø˚SoundDSP
)

901 
	`S9xTø˚SoundDSP
 ("[%d] Sample directoryÅo: %02x\n",

902 
ICPU
.
Sˇ∆öe
, 
byã
);

906 
APU_PMON
:

907 i‡(
byã
 !
APU
.
DSP
 [
APU_PMON
])

909 #ifde‡
DEBUGGER


910 i‡(
Sëtögs
.
Tø˚SoundDSP
)

912 
	`S9xTø˚SoundDSP
 ("[%d] FªqMod:", 
ICPU
.
Sˇ∆öe
);

913 
uöt8
 
mask
 = 1;

914 
c
 = 0; c < 8; c++, 
mask
 <<= 1)

916 i‡(
byã
 & 
mask
)

918 i‡(
APU
.
DSP
 [
ªg
] & 
mask
)

919 
	`S9xTø˚SoundDSP
 ("%d", 
c
);

921 
	`S9xTø˚SoundDSP
 ("%d(⁄),", 
c
);

925 i‡(
APU
.
DSP
 [
ªg
] & 
mask
)

926 
	`S9xTø˚SoundDSP
 ("%d(off),", 
c
);

929 
	`S9xTø˚SoundDSP
 ("\n");

932 
	`S9xSëFªquícyModuœti⁄E«bÀ
 (
byã
);

936 
APU_EON
:

937 i‡(
byã
 !
APU
.
DSP
 [
APU_EON
])

939 #ifde‡
DEBUGGER


940 i‡(
Sëtögs
.
Tø˚SoundDSP
)

942 
	`S9xTø˚SoundDSP
 ("[%d] Echo:", 
ICPU
.
Sˇ∆öe
);

943 
uöt8
 
mask
 = 1;

944 
c
 = 0; c < 8; c++, 
mask
 <<= 1)

946 i‡(
byã
 & 
mask
)

948 i‡(
APU
.
DSP
 [
ªg
] & 
mask
)

949 
	`S9xTø˚SoundDSP
 ("%d", 
c
);

951 
	`S9xTø˚SoundDSP
 ("%d(⁄),", 
c
);

955 i‡(
APU
.
DSP
 [
ªg
] & 
mask
)

956 
	`S9xTø˚SoundDSP
 ("%d(off),", 
c
);

959 
	`S9xTø˚SoundDSP
 ("\n");

962 
	`S9xSëEchoE«bÀ
 (
byã
);

966 
APU_EFB
:

967 
	`S9xSëEchoFìdback
 ((sig√d Ë
byã
);

970 
APU_ESA
:

973 
APU_EDL
:

974 
	`S9xSëEchoDñay
 (
byã
 & 0xf);

977 
APU_C0
:

978 
APU_C1
:

979 
APU_C2
:

980 
APU_C3
:

981 
APU_C4
:

982 
APU_C5
:

983 
APU_C6
:

984 
APU_C7
:

985 
	`S9xSëFûãrC€fficõ¡
 (
ªg
 >> 4, (sig√d Ë
byã
);

993 
KeyOnPªv
|=
KeyOn
;

994 
KeyOn
=0;

996 i‡(
ªg
 < 0x80)

997 
APU
.
DSP
 [
ªg
] = 
byã
;

998 
	}
}

1000 
	$S9xFixEnvñ›e
 (
ch™√l
, 
uöt8
 
gaö
, uöt8 
ad§1
, uöt8 
ad§2
)

1002 i‡(
ad§1
 & 0x80)

1009 i‡(
	`S9xSëSoundMode
 (
ch™√l
, 
MODE_ADSR
))

1011 
	`S9xSëSoundADSR
 (
ch™√l
, 
ad§1
 & 0xf, (ad§1 >> 4Ë& 7, 
ad§2
 & 0x1f, (adsr2 >> 5) & 7, 8);

1017 i‡((
gaö
 & 0x80) == 0)

1019 i‡(
	`S9xSëSoundMode
 (
ch™√l
, 
MODE_GAIN
))

1021 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 0, 0, 
gaö
 & 0x7f, 0);

1022 
	`S9xSëEnvñ›eHeight
 (
ch™√l
, 
gaö
 & 0x7f);

1028 i‡(
gaö
 & 0x40)

1031 i‡(
	`S9xSëSoundMode
 (
ch™√l
, (
gaö
 & 0x20) ?

1032 
MODE_INCREASE_BENT_LINE
 :

1033 
MODE_INCREASE_LINEAR
))

1035 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
In¸ó£R©e
 [
gaö
 & 0x1f], 1, 127, (3<<28)|gain);

1040 if(
gaö
 & 0x20) {

1041 i‡(
	`S9xSëSoundMode
 (
ch™√l
, 
MODE_DECREASE_EXPONENTIAL
))

1042 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
De¸ó£R©eExp
 [
gaö
 & 0x1f] / 2, -1, 0, (4<<28)|gain);

1044 i‡(
	`S9xSëSoundMode
 (
ch™√l
, 
MODE_DECREASE_LINEAR
))

1045 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
In¸ó£R©e
 [
gaö
 & 0x1f], -1, 0, (3<<28)|gain);

1050 
	}
}

1052 
	$S9xSëAPUC⁄åﬁ
 (
uöt8
 
byã
)

1056 i‡((
byã
 & 1Ë!0 && !
APU
.
TimîE«bÀd
 [0])

1058 
APU
.
Timî
 [0] = 0;

1059 
IAPU
.
RAM
 [0xfd] = 0;

1060 i‡((
APU
.
TimîT¨gë
 [0] = 
IAPU
.
RAM
 [0xfa]) == 0)

1061 
APU
.
TimîT¨gë
 [0] = 0x100;

1063 i‡((
byã
 & 2Ë!0 && !
APU
.
TimîE«bÀd
 [1])

1065 
APU
.
Timî
 [1] = 0;

1066 
IAPU
.
RAM
 [0xfe] = 0;

1067 i‡((
APU
.
TimîT¨gë
 [1] = 
IAPU
.
RAM
 [0xfb]) == 0)

1068 
APU
.
TimîT¨gë
 [1] = 0x100;

1070 i‡((
byã
 & 4Ë!0 && !
APU
.
TimîE«bÀd
 [2])

1072 
APU
.
Timî
 [2] = 0;

1073 
IAPU
.
RAM
 [0xff] = 0;

1074 i‡((
APU
.
TimîT¨gë
 [2] = 
IAPU
.
RAM
 [0xfc]) == 0)

1075 
APU
.
TimîT¨gë
 [2] = 0x100;

1077 
APU
.
TimîE«bÀd
 [0] = 
byã
 & 1;

1078 
APU
.
TimîE«bÀd
 [1] = (
byã
 & 2) >> 1;

1079 
APU
.
TimîE«bÀd
 [2] = (
byã
 & 4) >> 2;

1081 i‡(
byã
 & 0x10)

1082 
IAPU
.
RAM
 [0xF4] = IAPU.RAM [0xF5] = 0;

1084 i‡(
byã
 & 0x20)

1085 
IAPU
.
RAM
 [0xF6] = IAPU.RAM [0xF7] = 0;

1087 i‡(
byã
 & 0x80)

1089 i‡(!
APU
.
ShowROM
)

1091 
	`memmove
 (&
IAPU
.
RAM
 [0xffc0], 
APUROM
,  (APUROM));

1092 
APU
.
ShowROM
 = 
TRUE
;

1097 i‡(
APU
.
ShowROM
)

1099 
APU
.
ShowROM
 = 
FALSE
;

1100 
	`memmove
 (&
IAPU
.
RAM
 [0xffc0], 
APU
.
ExåaRAM
,  (
APUROM
));

1103 
IAPU
.
RAM
 [0xf1] = 
byã
;

1104 
	}
}

1106 
	$S9xSëAPUTimî
 (
uöt16
 
Addªss
, 
uöt8
 
byã
)

1108 
IAPU
.
RAM
 [
Addªss
] = 
byã
;

1110 
Addªss
)

1113 i‡((
APU
.
TimîT¨gë
 [0] = 
IAPU
.
RAM
 [0xfa]) == 0)

1114 
APU
.
TimîT¨gë
 [0] = 0x100;

1115 
APU
.
TimîVÆueWrôãn
 [0] = 
TRUE
;

1118 i‡((
APU
.
TimîT¨gë
 [1] = 
IAPU
.
RAM
 [0xfb]) == 0)

1119 
APU
.
TimîT¨gë
 [1] = 0x100;

1120 
APU
.
TimîVÆueWrôãn
 [1] = 
TRUE
;

1123 i‡((
APU
.
TimîT¨gë
 [2] = 
IAPU
.
RAM
 [0xfc]) == 0)

1124 
APU
.
TimîT¨gë
 [2] = 0x100;

1125 
APU
.
TimîVÆueWrôãn
 [2] = 
TRUE
;

1128 
	}
}

1130 
uöt8
 
	$S9xGëAPUDSP
 ()

1132 
uöt8
 
ªg
 = 
IAPU
.
RAM
 [0xf2] & 0x7f;

1133 
uöt8
 
byã
 = 
APU
.
DSP
 [
ªg
];

1135 
ªg
)

1137 
APU_KON
:

1139 
APU_KOFF
:

1141 
APU_OUTX
 + 0x00:

1142 
APU_OUTX
 + 0x10:

1143 
APU_OUTX
 + 0x20:

1144 
APU_OUTX
 + 0x30:

1145 
APU_OUTX
 + 0x40:

1146 
APU_OUTX
 + 0x50:

1147 
APU_OUTX
 + 0x60:

1148 
APU_OUTX
 + 0x70:

1149 i‡(
SoundD©a
.
ch™√ls
 [
ªg
 >> 4].
°©e
 =
SOUND_SILENT
)

1151  ((
SoundD©a
.
ch™√ls
 [
ªg
 >> 4].
ßm∂e
 >> 8) |

1152 (
SoundD©a
.
ch™√ls
 [
ªg
 >> 4].
ßm∂e
 & 0xff));

1154 
APU_ENVX
 + 0x00:

1155 
APU_ENVX
 + 0x10:

1156 
APU_ENVX
 + 0x20:

1157 
APU_ENVX
 + 0x30:

1158 
APU_ENVX
 + 0x40:

1159 
APU_ENVX
 + 0x50:

1160 
APU_ENVX
 + 0x60:

1161 
APU_ENVX
 + 0x70:

1165 
APU_ENDX
:

1172  (
byã
);

1173 
	}
}

	@apu.h

41 #i‚de‡
_≠u_h_


42 
	#_≠u_h_


	)

44 
	~"•c700.h
"

54 
	sSIAPU


56 
uöt8
 *
	mDúe˘Page
;

57 
uöt32
 
	mAddªss
;

58 
uöt8
 *
	mWaôAddªss1
;

59 
uöt8
 *
	mWaôAddªss2
;

60 
uöt32
 
	mWaôCou¡î
;

61 
uöt8
 *
	mShadowRAM
;

62 
uöt8
 *
	mCachedSam∂es
;

63 
uöt8
 
	m_C¨ry
;

64 
uöt8
 
	m_OvîÊow
;

65 
uöt8
 
	mBô
;

66 
uöt8
 
	m∑d0
;

67 
uöt32
 
	mTimîEº‹Cou¡î
;

68 
uöt32
 
	mSˇ∆öe
;

69 
öt32
 
	mO√Cy˛e
;

70 
öt32
 
	mTwoCy˛es
;

72 
uöt32
 *
	masmJumpTab
;

73 
uöt8
 *
	mPC
;

74 
YAndA
 
	mYA
;

75 
uöt8
 
	mP
;

76 
uöt8
 
	m∑d1
;

77 
uöt8
 
	m∑d2
;

78 
uöt8
 
	m_Zîo
;

79 
uöt8
 
	mX
;

80 
uöt8
 
	mS
;

81 
uöt16
 
	m∑d3
;

82 
uöt8
 *
	mRAM
;

84 
uöt8
 *
	mExåaRAM
;

87 
	sSAPU


89 
öt32
 
	mCy˛es
;

90 
boﬁ8
 
	mShowROM
;

91 
uöt8
 
	mFœgs
;

92 
uöt8
 
	mKeyedCh™√ls
;

93 
uöt8
 
	mOutP‹ts
 [4];

94 
uöt8
 
	mDSP
 [0x80];

95 
uöt8
 
	mExåaRAM
 [64];

96 
uöt16
 
	mTimî
 [3];

97 
uöt16
 
	mTimîT¨gë
 [3];

98 
boﬁ8
 
	mTimîE«bÀd
 [3];

99 
boﬁ8
 
	mTimîVÆueWrôãn
 [3];

102 
EXTERN_C
 
SAPU
 
	gAPU
;

103 
EXTERN_C
 
SIAPU
 
	gIAPU
;

105 
STATIC
 
ölöe
 
	$S9xAPUU≈ackSètus
()

107 
IAPU
.
_Zîo
 =((IAPU.
P
 & 
Zîo
Ë=0Ë| (IAPU.P & 
Neg©ive
);

109 #i‚de‡
ASM_SPC700


110 
IAPU
.
_C¨ry
 = (IAPU.
P
 & 
C¨ry
);

111 
IAPU
.
_OvîÊow
 = (IAPU.
P
 & 
OvîÊow
);

113 
	}
}

115 
STATIC
 
ölöe
 
	$S9xAPUPackSètus
()

117 #ifde‡
ASM_SPC700


118 
IAPU
.
P
 &~(
Zîo
 | 
Neg©ive
);

119 if(!
IAPU
.
_Zîo
ËIAPU.
P
 |
Zîo
;

120 if(
IAPU
.
_Zîo
 & 0x80ËIAPU.
P
 |
Neg©ive
;

122 
IAPU
.
P
 &~(
Zîo
 | 
Neg©ive
 | 
C¨ry
 | 
OvîÊow
);

123 if(
IAPU
.
_C¨ry
ËIAPU.
P
 |
C¨ry
;

124 if(!
IAPU
.
_Zîo
ËIAPU.
P
 |
Zîo
;

125 if(
IAPU
.
_OvîÊow
ËIAPU.
P
 |
OvîÊow
;

126 if(
IAPU
.
_Zîo
 & 0x80ËIAPU.
P
 |
Neg©ive
;

128 
	}
}

130 
START_EXTERN_C


131 
S9xRe£tAPU
 ();

132 
boﬁ8
 
S9xInôAPU
 ();

133 
S9xDeöôAPU
 ();

134 
S9xDeˇcheSam∂es
 ();

135 
S9xTø˚APU
 ();

136 
S9xAPUOPröt
 (*
buf„r
, 
uöt16
 
Addªss
);

137 
S9xSëAPUC⁄åﬁ
 (
uöt8
 
byã
);

138 
S9xSëAPUDSP
 (
uöt8
 
byã
);

139 
uöt8
 
S9xGëAPUDSP
 ();

140 
S9xSëAPUTimî
 (
uöt16
 
Addªss
, 
uöt8
 
byã
);

141 
S9xO≥nClo£SoundTøcögFûe
 (
boﬁ8
);

142 
S9xPrötAPUSèã
 ();

143 
öt32
 
S9xAPUCy˛es
 [256];

144 
öt32
 
S9xAPUCy˛eLígths
 [256];

145 (*
S9xApuOpcodes
 [256]) ();

146 (*
S9xApuOpcodesRól
 [256]) ();

147 
END_EXTERN_C


150 
	#APU_VOL_LEFT
 0x00

	)

151 
	#APU_VOL_RIGHT
 0x01

	)

152 
	#APU_P_LOW
 0x02

	)

153 
	#APU_P_HIGH
 0x03

	)

154 
	#APU_SRCN
 0x04

	)

155 
	#APU_ADSR1
 0x05

	)

156 
	#APU_ADSR2
 0x06

	)

157 
	#APU_GAIN
 0x07

	)

158 
	#APU_ENVX
 0x08

	)

159 
	#APU_OUTX
 0x09

	)

161 
	#APU_MVOL_LEFT
 0x0c

	)

162 
	#APU_MVOL_RIGHT
 0x1c

	)

163 
	#APU_EVOL_LEFT
 0x2c

	)

164 
	#APU_EVOL_RIGHT
 0x3c

	)

165 
	#APU_KON
 0x4c

	)

166 
	#APU_KOFF
 0x5c

	)

167 
	#APU_FLG
 0x6c

	)

168 
	#APU_ENDX
 0x7c

	)

170 
	#APU_EFB
 0x0d

	)

171 
	#APU_PMON
 0x2d

	)

172 
	#APU_NON
 0x3d

	)

173 
	#APU_EON
 0x4d

	)

174 
	#APU_DIR
 0x5d

	)

175 
	#APU_ESA
 0x6d

	)

176 
	#APU_EDL
 0x7d

	)

178 
	#APU_C0
 0x0f

	)

179 
	#APU_C1
 0x1f

	)

180 
	#APU_C2
 0x2f

	)

181 
	#APU_C3
 0x3f

	)

182 
	#APU_C4
 0x4f

	)

183 
	#APU_C5
 0x5f

	)

184 
	#APU_C6
 0x6f

	)

185 
	#APU_C7
 0x7f

	)

187 
	#APU_SOFT_RESET
 0x80

	)

188 
	#APU_MUTE
 0x40

	)

189 
	#APU_ECHO_DISABLED
 0x20

	)

191 
	#FREQUENCY_MASK
 0x3fff

	)

	@apumem.h

41 #i‚de‡
_≠umem‹y_h_


42 
	#_≠umem‹y_h_


	)

44 
START_EXTERN_C


45 
uöt8
 
W4
;

46 
uöt8
 
APUROM
[64];

47 
END_EXTERN_C


49 
INLINE
 
uöt8
 
	$S9xAPUGëByãZ
 (
uöt8
 
Addªss
)

51 i‡(
Addªss
 >0xf0 && 
IAPU
.
Dúe˘Page
 =IAPU.
RAM
)

53 i‡(
Addªss
 >= 0xf4 && Address <= 0xf7)

55 #ifde‡
SPC700_SHUTDOWN


56 
IAPU
.
WaôAddªss2
 = IAPU.
WaôAddªss1
;

57 
IAPU
.
WaôAddªss1
 = IAPU.
PC
;

59  (
IAPU
.
RAM
 [
Addªss
]);

61 i‡(
Addªss
 >= 0xfd)

63 #ifde‡
SPC700_SHUTDOWN


64 
IAPU
.
WaôAddªss2
 = IAPU.
WaôAddªss1
;

65 
IAPU
.
WaôAddªss1
 = IAPU.
PC
;

67 
uöt8
 
t
 = 
IAPU
.
RAM
 [
Addªss
];

68 
IAPU
.
RAM
 [
Addªss
] = 0;

69  (
t
);

72 i‡(
Addªss
 == 0xf3)

73  (
	`S9xGëAPUDSP
 ());

75  (
IAPU
.
RAM
 [
Addªss
]);

78  (
IAPU
.
Dúe˘Page
 [
Addªss
]);

79 
	}
}

81 
INLINE
 
	$S9xAPUSëByãZ
 (
uöt8
 
vÆ
, uöt8 
Addªss
)

83 i‡(
Addªss
 >0xf0 && 
IAPU
.
Dúe˘Page
 =IAPU.
RAM
)

85 i‡(
Addªss
 == 0xf3)

86 
	`S9xSëAPUDSP
 (
vÆ
);

88 i‡(
Addªss
 >= 0xf4 && Address <= 0xf7)

89 
APU
.
OutP‹ts
 [
Addªss
 - 0xf4] = 
vÆ
;

91 i‡(
Addªss
 == 0xf1)

92 
	`S9xSëAPUC⁄åﬁ
 (
vÆ
);

94 i‡(
Addªss
 < 0xfd)

96 
IAPU
.
RAM
 [
Addªss
] = 
vÆ
;

97 i‡(
Addªss
 >= 0xfa)

99 i‡(
vÆ
 == 0)

100 
APU
.
TimîT¨gë
 [
Addªss
 - 0xfa] = 0x100;

102 
APU
.
TimîT¨gë
 [
Addªss
 - 0xÁ] = 
vÆ
;

107 
IAPU
.
Dúe˘Page
 [
Addªss
] = 
vÆ
;

108 
	}
}

110 
INLINE
 
uöt8
 
	$S9xAPUGëByã
 (
uöt32
 
Addªss
)

112 
Addªss
 &= 0xffff;

114 i‡(
Addªss
 <= 0xff && Address >= 0xf0)

116 i‡(
Addªss
 >= 0xf4 && Address <= 0xf7)

118 #ifde‡
SPC700_SHUTDOWN


119 
IAPU
.
WaôAddªss2
 = IAPU.
WaôAddªss1
;

120 
IAPU
.
WaôAddªss1
 = IAPU.
PC
;

122  (
IAPU
.
RAM
 [
Addªss
]);

125 i‡(
Addªss
 == 0xf3)

126  (
	`S9xGëAPUDSP
 ());

127 i‡(
Addªss
 >= 0xfd)

129 #ifde‡
SPC700_SHUTDOWN


130 
IAPU
.
WaôAddªss2
 = IAPU.
WaôAddªss1
;

131 
IAPU
.
WaôAddªss1
 = IAPU.
PC
;

133 
uöt8
 
t
 = 
IAPU
.
RAM
 [
Addªss
];

134 
IAPU
.
RAM
 [
Addªss
] = 0;

135  (
t
);

137  (
IAPU
.
RAM
 [
Addªss
]);

140  (
IAPU
.
RAM
 [
Addªss
]);

141 
	}
}

143 
INLINE
 
	$S9xAPUSëByã
 (
uöt8
 
vÆ
, 
uöt32
 
Addªss
)

145 
Addªss
 &= 0xffff;

147 i‡(
Addªss
 <= 0xff && Address >= 0xf0)

149 i‡(
Addªss
 == 0xf3)

150 
	`S9xSëAPUDSP
 (
vÆ
);

152 i‡(
Addªss
 >= 0xf4 && Address <= 0xf7)

153 
APU
.
OutP‹ts
 [
Addªss
 - 0xf4] = 
vÆ
;

155 i‡(
Addªss
 == 0xf1)

156 
	`S9xSëAPUC⁄åﬁ
 (
vÆ
);

158 i‡(
Addªss
 < 0xfd)

160 
IAPU
.
RAM
 [
Addªss
] = 
vÆ
;

161 i‡(
Addªss
 >= 0xfa)

163 i‡(
vÆ
 == 0)

164 
APU
.
TimîT¨gë
 [
Addªss
 - 0xfa] = 0x100;

166 
APU
.
TimîT¨gë
 [
Addªss
 - 0xÁ] = 
vÆ
;

173 i‡(
Addªss
 >= 0x2500 && Address <= 0x2504)

174 
	`¥ötf
 ("%06d %04x <- %02x\n", 
ICPU
.
Sˇ∆öe
, 
Addªss
, 
vÆ
);

175 i‡(
Addªss
 == 0x26c6)

177 
FILE
 *
≠u_åa˚
;

178 
FILE
 *
åa˚
;

179 
APU
.
Fœgs
 |
TRACE_FLAG
;

180 
CPU
.
Fœgs
 |
TRACE_FLAG
;

181 i‡(
≠u_åa˚
 =
NULL
)

182 
≠u_åa˚
 = 
	`f›í
 ("aputrace.log", "wb");

183 i‡(
åa˚
 =
NULL
)

184 
åa˚
 = 
	`f›í
 ("trace.log", "wb");

185 
	`¥ötf
 ("TRACING SWITCHED ON\n");

188 i‡(
Addªss
 < 0xffc0)

189 
IAPU
.
RAM
 [
Addªss
] = 
vÆ
;

192 
APU
.
ExåaRAM
 [
Addªss
 - 0xffc0] = 
vÆ
;

193 i‡(!
APU
.
ShowROM
)

194 
IAPU
.
RAM
 [
Addªss
] = 
vÆ
;

197 
	}
}

	@asmmemfuncs.h

1 #i‚de‡
_ASMMEMFUNCS_H_


2 
	#_ASMMEMFUNCS_H_


	)

4 
	#mem£t32
(
_d°
, 
_c
, 
_cou¡
Ë\

	)

5 ({ 
uöt32_t
 *
	gd°
 = (
_d°
); uöt32_à
	gc
 = (
_c
); 
	gcou¡
 = (
_cou¡
); uöt32_à
	gdummy0
, 
	gdummy1
, 
	gdummy2
; \

6 
__asm__
 
__vﬁ©ûe__
 ( \

31 : [
d°
] "+&r" (d°), [
cou¡
] "+&r" (cou¡), [
dummy0
] "=&r" (dummy0), [
dummy1
] "=&r" (dummy1), [
dummy2
] "=&r" (dummy2), [
c
] "+&r" (c) \

34 ); 
	g_d°
; \

37 
	#mem£t16
(
_d°
, 
_c
, 
_cou¡
Ë\

	)

38 ({ 
uöt16_t
 *
	gd°
 = (
_d°
); uöt16_à
	gc
 = (
_c
); 
	gcou¡
 = (
_cou¡
); 
uöt32_t
 
	gdummy0
, 
	gdummy1
, 
	gdummy2
; \

39 
__asm__
 
__vﬁ©ûe__
 ( \

75 : [
d°
] "+&r" (d°), [
cou¡
] "+&r" (cou¡), [
dummy0
] "=&r" (dummy0), [
dummy1
] "=&r" (dummy1), [
dummy2
] "=&r" (dummy2), [
c
] "+&r" (c) \

78 ); 
	g_d°
;\

81 
	#mem˝y32
(
_d°
, 
_§c
, 
_cou¡
Ë\

	)

82 ({ 
uöt32_t
 *
	gd°
 = (
_d°
); uöt32_à*
	g§c
 = (
_§c
); 
	gcou¡
 = (
_cou¡
); \

83 
__asm__
 
__vﬁ©ûe__
 ( \

108 : [
d°
] "+&r" (d°), [
§c
] "+&r" (§c), [
cou¡
] "+&r" (count) \

111 ); 
	g_d°
; \

114 
	#mem˝y16
(
_d°
, 
_§c
, 
_cou¡
Ë\

	)

115 ({ 
uöt16_t
 *
	gd°
 = (
_d°
); uöt16_à*
	g§c
 = (
_§c
); 
	gcou¡
 = (
_cou¡
); 
uöt32_t
 
	gdummy0
; \

116 
__asm__
 
__vﬁ©ûe__
 ( \

200 : [
d°
] "+&r" (d°), [
§c
] "+&r" (§c), [
cou¡
] "+&r" (cou¡), [
dummy0
] "=&r" (dummy0) \

203 ); 
	g_d°
; \

	@blitter example code.c

1 #i‡
deföed
(
GP2X
)

2 
	gdevMem
=0;

3 vﬁ©ûê*
	ggp2x_memªg32
=
NULL
;

4 vﬁ©ûê*
	ggp2x_memªg16
=
NULL
;

5 vﬁ©ûê* 
	gblôãr32
=
NULL
;

9 #ifde‡
GP2X


10 vﬁ©ûê
	gvsync_pﬁ¨ôy
;

13 #i‡
deföed
(
GP2X
Ë&& !deföed(
WANT_SDL
)

14 
GëUµîRólAddªss
(*);

17 
	$gp2x_dummy_blô
()

21 
blôãr32
[0x0000 >> 2] = (1 << 5) | (1 << 6);

22 
blôãr32
[0x0004 >> 2] = 0x3101000;

23 
blôãr32
[0x000C>>2] = 1<<8;

24 
blôãr32
[0x0020>>2] = 0;

25 
blôãr32
[0x002C>>2] = (1 << 16) | 8;

26 
blôãr32
[0x0030>>2] = 1<< 8 | 1<< 9 | 0xaa;

28 
blôãr32
[0x0034 >> 2] & 1)

30 
asm
 volatile ("nop");

31 
asm
 volatile ("nop");

32 
asm
 volatile ("nop");

33 
asm
 volatile ("nop");

35 
asm
 volatile ("" ::: "memory");

36 
blôãr32
[0x0034 >> 2] = 0x0001;

37 
	}
}

39 
	$gp2x_˛ór_back_buf„r
()

41 
blôãr32
[0x4 >> 2] = 0x3381000;

42 
blôãr32
[0x0] = 1<<5;

43 
blôãr32
[0x8 >> 2] = 640;

44 
blôãr32
[0x20 >> 2] = 1 << 5 | 2 << 3;

45 
blôãr32
[0x24 >> 2] = 0;

46 
blôãr32
[0x28 >> 2] = 0;

47 
blôãr32
[0x2c >> 2] = (240 << 16) | (320 << 0);

48 
blôãr32
[0x30 >> 2] = (1<<8) | (1<<9 ) | 0xf0;

52 
blôãr32
[0x0034 >> 2] & 1)

54 
asm
 volatile ("nop");

55 
asm
 volatile ("nop");

56 
asm
 volatile ("nop");

57 
asm
 volatile ("nop");

59 
blôãr32
[0x34 >> 2] = 1;

60 
	`gp2x_dummy_blô
();

61 
	}
}

64 
	$gp2x_fûÃe˘
(
x
, 
y
, 
w
, 
h
, 
cﬁ
)

66 
blôãr32
[0x4 >> 2] = (0x3381000 + (
y
*640Ë+ (
x
<<1) ) & ~3;

67 
blôãr32
[0x0] = 1<<5 | ((
x
 & 0x00000001) << 4);

68 
blôãr32
[0x8 >> 2] = 640;

69 
blôãr32
[0xC >> 2] = 0;

72 
blôãr32
[0x20 >> 2] = 1 << 5 | 2 << 3;

73 
blôãr32
[0x24 >> 2] = 
cﬁ
;

74 
blôãr32
[0x28 >> 2] = 
cﬁ
;

75 
blôãr32
[0x2¯>> 2] = (
h
 << 16Ë| (
w
 << 0);

76 
blôãr32
[0x30 >> 2] = (1<<8) | (1<<9 ) | 0xf0;

80 
blôãr32
[0x0034 >> 2] & 1)

82 
asm
 volatile ("nop");

83 
asm
 volatile ("nop");

84 
asm
 volatile ("nop");

85 
asm
 volatile ("nop");

87 
blôãr32
[0x34 >> 2] = 1;

88 
	`gp2x_dummy_blô
();

89 
	}
}

92 
	$gp2x_blô
(
h¨dw¨e_§c
, 
x_‰om
, 
y_‰om
, 
§c_°ride_byãs
, 
x
, 
y
, 
w
, 
h
)

94 
blôãr32
[0x4 >> 2] = (0x3381000 + (
y
*640Ë+ (
x
<<1) ) & ~3;

95 
blôãr32
[0x0] = 1<<5 | ((
x
 & 0x00000001) << 4);

96 
blôãr32
[0x8 >> 2] = 640;

99 
blôãr32
[0x0010 >> 2] = (
h¨dw¨e_§c
 +(
y_‰om
*640)+(
x_‰om
<<1) )&~3;

101 
blôãr32
[0x0014 >> 2] = 
§c_°ride_byãs
;

103 
blôãr32
[0x0020 >> 2] = 0;

106 
blôãr32
[0x000C >> 2] = (1 << 8Ë| (1 << 7Ë| (1 << 5Ë| ((
x_‰om
 & 0x00000001) << 4);

109 
blôãr32
[0x0030 >> 2] = (1 << 10) | (1 << 9) | (1 << 8) | 0xCC;

111 
blôãr32
[0x2¯>> 2] = (
h
 << 16Ë| (
w
 << 0);

115 
blôãr32
[0x0034 >> 2] & 1)

117 
asm
 volatile ("nop");

118 
asm
 volatile ("nop");

119 
asm
 volatile ("nop");

120 
asm
 volatile ("nop");

122 
blôãr32
[0x34 >> 2] = 1;

123 
	`gp2x_dummy_blô
();

124 
	}
}

127 
	$gp2x_blô_cookõ
(
h¨dw¨e_§c
, 
x_‰om
, 
y_‰om
, 
§c_°ride_byãs
, 
x
, 
y
, 
w
, 
h
, 
cookõ
)

129 
blôãr32
[0x4 >> 2] = (0x3381000 + (
y
*640Ë+ (
x
<<1) ) & ~3;

130 
blôãr32
[0x0] = 1<<5 | ((
x
 & 0x00000001) << 4);

131 
blôãr32
[0x8 >> 2] = 640;

134 
blôãr32
[0x0010 >> 2] = (
h¨dw¨e_§c
 +(
y_‰om
*640)+(
x_‰om
<<1) )&~3;

136 
blôãr32
[0x0014 >> 2] = 
§c_°ride_byãs
;

138 
blôãr32
[0x0020 >> 2] = 0;

141 
blôãr32
[0x000C >> 2] = (1 << 8Ë| (1 << 7Ë| (1 << 5Ë| ((
x_‰om
 & 0x00000001) << 4);

144 
blôãr32
[0x0030 >> 2] = (1 << 10Ë| (1 << 9Ë| (1 << 8Ë| 0xCC | (
cookõ
<<16)|(1<<11);

146 
blôãr32
[0x2¯>> 2] = (
h
 << 16Ë| (
w
 << 0);

150 
blôãr32
[0x0034 >> 2] & 1)

152 
asm
 volatile ("nop");

153 
asm
 volatile ("nop");

154 
asm
 volatile ("nop");

155 
asm
 volatile ("nop");

157 
blôãr32
[0x34 >> 2] = 1;

158 
	`gp2x_dummy_blô
();

159 
	}
}

	@c4.cpp

76 #i‚de‡
__GP32__


77 
	~<°dlib.h
>

80 
	~<m©h.h
>

81 
	~"c4.h
"

86 
C4WFXVÆ
;

87 
C4WFYVÆ
;

88 
C4WFZVÆ
;

89 
C4WFX2VÆ
;

90 
C4WFY2VÆ
;

91 
C4WFDi°
;

92 
C4WFSˇÀ
;

94 
ènvÆ
;

95 
c4x
, 
c4y
, 
c4z
;

96 
c4x2
, 
c4y2
, 
c4z2
;

98 
C4TønsfWúeFøme
 ()

100 
c4x
 = (Ë
C4WFXVÆ
;

101 
c4y
 = (Ë
C4WFYVÆ
;

102 
c4z
 = (Ë
C4WFZVÆ
 - 0x95;

105 
ènvÆ
 = -(Ë
C4WFX2VÆ
 * 3.14159265 * 2 / 128;

106 
c4y2
 = 
c4y
 * 
cos
 (
ènvÆ
Ë- 
c4z
 * 
sö
 (tanval);

107 
c4z2
 = 
c4y
 * 
sö
 (
ènvÆ
Ë+ 
c4z
 * 
cos
 (tanval);

110 
ènvÆ
 = -()
C4WFY2VÆ
*3.14159265*2/128;

111 
c4x2
 = 
c4x
 * 
cos
 (
ènvÆ
Ë+ 
c4z2
 * 
sö
 (tanval);

112 
c4z
 = 
c4x
 * - 
sö
 (
ènvÆ
Ë+ 
c4z2
 * 
cos
 (tanval);

115 
ènvÆ
 = -(Ë
C4WFDi°
 * 3.14159265*2 / 128;

116 
c4x
 = 
c4x2
 * 
cos
 (
ènvÆ
Ë- 
c4y2
 * 
sö
 (tanval);

117 
c4y
 = 
c4x2
 * 
sö
 (
ènvÆ
Ë+ 
c4y2
 * 
cos
 (tanval);

120 
C4WFXVÆ
 = (Ë(
c4x
*()
C4WFSˇÀ
/(0x90*(
c4z
+0x95))*0x95);

121 
C4WFYVÆ
 = (Ë(
c4y
*()
C4WFSˇÀ
/(0x90*(
c4z
+0x95))*0x95);

124 
C4TønsfWúeFøme2
 ()

126 
c4x
 = ()
C4WFXVÆ
;

127 
c4y
 = ()
C4WFYVÆ
;

128 
c4z
 = ()
C4WFZVÆ
;

131 
ènvÆ
 = -(Ë
C4WFX2VÆ
 * 3.14159265 * 2 / 128;

132 
c4y2
 = 
c4y
 * 
cos
 (
ènvÆ
Ë- 
c4z
 * 
sö
 (tanval);

133 
c4z2
 = 
c4y
 * 
sö
 (
ènvÆ
Ë+ 
c4z
 * 
cos
 (tanval);

136 
ènvÆ
 = -(Ë
C4WFY2VÆ
 * 3.14159265 * 2 / 128;

137 
c4x2
 = 
c4x
 * 
cos
 (
ènvÆ
Ë+ 
c4z2
 * 
sö
 (tanval);

138 
c4z
 = 
c4x
 * -
sö
 (
ènvÆ
Ë+ 
c4z2
 * 
cos
 (tanval);

141 
ènvÆ
 = -()
C4WFDi°
 * 3.14159265 * 2 / 128;

142 
c4x
 = 
c4x2
 * 
cos
 (
ènvÆ
Ë- 
c4y2
 * 
sö
 (tanval);

143 
c4y
 = 
c4x2
 * 
sö
 (
ènvÆ
Ë+ 
c4y2
 * 
cos
 (tanval);

146 
C4WFXVÆ
 =()(
c4x
 * ()
C4WFSˇÀ
 / 0x100);

147 
C4WFYVÆ
 =()(
c4y
 * ()
C4WFSˇÀ
 / 0x100);

150 
C4CÆcWúeFøme
 ()

152 
C4WFXVÆ
 = 
C4WFX2VÆ
 - C4WFXVal;

153 
C4WFYVÆ
 = 
C4WFY2VÆ
 - C4WFYVal;

154 i‡(
abs
 (
C4WFXVÆ
Ë>áb†(
C4WFYVÆ
))

156 
C4WFDi°
 = 
abs
 (
C4WFXVÆ
) + 1;

157 
C4WFYVÆ
 = (Ë(256 * (ËC4WFYVÆ / 
abs
 (
C4WFXVÆ
));

158 i‡(
C4WFXVÆ
 < 0)

159 
C4WFXVÆ
 = -256;

161 
C4WFXVÆ
 = 256;

165 i‡(
C4WFYVÆ
 != 0)

167 
C4WFDi°
 = 
abs
(
C4WFYVÆ
)+1;

168 
C4WFXVÆ
 = (Ë(256 * ()C4WFXVÆ / 
abs
 (
C4WFYVÆ
));

169 i‡(
C4WFYVÆ
 < 0)

170 
C4WFYVÆ
 = -256;

172 
C4WFYVÆ
 = 256;

175 
C4WFDi°
 = 0;

179 
C41FXVÆ
;

180 
C41FYVÆ
;

181 
C41FAngÀRes
;

182 
C41FDi°
;

183 
C41FDi°VÆ
;

185 
C4Op1F
 ()

187 i‡(
C41FXVÆ
 == 0)

189 i‡(
C41FYVÆ
 > 0)

190 
C41FAngÀRes
 = 0x80;

192 
C41FAngÀRes
 = 0x180;

196 
ènvÆ
 = (Ë
C41FYVÆ
 / 
C41FXVÆ
;

197 
C41FAngÀRes
 = (Ë(
©™
 (
ènvÆ
) / (3.141592675 * 2) * 512);

198 
C41FAngÀRes
 = C41FAngleRes;

199 i‡(
C41FXVÆ
< 0)

200 
C41FAngÀRes
 += 0x100;

201 
C41FAngÀRes
 &= 0x1FF;

205 
C4Op15
()

207 
ènvÆ
 = 
sqπ
 ((Ë
C41FYVÆ
 * C41FYVÆ + (Ë
C41FXVÆ
 * C41FXVal);

208 
C41FDi°
 = (Ë
ènvÆ
;

211 
C4Op0D
()

213 
ènvÆ
 = 
sqπ
 ((Ë
C41FYVÆ
 * C41FYVÆ + (Ë
C41FXVÆ
 * C41FXVal);

214 
ènvÆ
 = 
C41FDi°VÆ
 /Åanval;

215 
C41FYVÆ
 = (Ë(C41FYVÆ * 
ènvÆ
 * 0.99);

216 
C41FXVÆ
 = (Ë(C41FXVÆ * 
ènvÆ
 * 0.98);

219 #ifde‡
ZSNES_C4


220 
C4LﬂDMem
(*
C4RAM
)

222 
memmove
(
C4RAM
+(
READ_WORD
(C4RAM+0x1f45)&0x1fff),

223 
S9xGëMemPoöãr
(
READ_3WORD
(
C4RAM
+0x1f40)),

224 
READ_WORD
(
C4RAM
+0x1f43));

	@c4.h

75 #i‚de‡
_C4_H_


76 
	#_C4_H_


	)

78 
	~"p‹t.h
"

82 
öt16
 
C4WFXVÆ
;

83 
öt16
 
C4WFYVÆ
;

84 
öt16
 
C4WFZVÆ
;

85 
öt16
 
C4WFX2VÆ
;

86 
öt16
 
C4WFY2VÆ
;

87 
öt16
 
C4WFDi°
;

88 
öt16
 
C4WFSˇÀ
;

90 
C4TønsfWúeFøme
();

91 
C4TønsfWúeFøme2
();

92 
C4CÆcWúeFøme
();

94 
öt16
 
C41FXVÆ
;

95 
öt16
 
C41FYVÆ
;

96 
öt16
 
C41FAngÀRes
;

97 
öt16
 
C41FDi°
;

98 
öt16
 
C41FDi°VÆ
;

100 
C4Op1F
();

101 
C4Op15
();

102 
C4Op0D
();

104 
öt16
 
C4CosTabÀ
[];

105 
öt16
 
C4SöTabÀ
[];

	@c4emu.cpp

76 #i‚de‡
__GP32__


77 #ifde‡
HAVE_CONFIG_H


78 
	~<c⁄fig.h
>

82 
	~<m©h.h
>

83 
	~"¢es9x.h
"

84 
	~"ßr.h
"

85 
	~"memm≠.h
"

86 
	~"µu.h
"

87 
	~"c4.h
"

89 
	$S9xInôC4
 ()

94 
	`mem£t
(
Mem‹y
.
C4RAM
, 0, 0x2000);

95 
	}
}

97 
uöt8
 
	$S9xGëC4
 (
uöt16
 
Addªss
)

99 #ifde‡
DEBUGGER


100 if(
Sëtögs
.
BGLayîög
Ë
	`¥ötf
("%02x from %04x\n", 
Mem‹y
.
C4RAM
[
Addªss
-0x6000], Address);

102 if(
Addªss
==0x7f5e)  0;

103  (
Mem‹y
.
C4RAM
 [
Addªss
-0x6000]);

104 
	}
}

106 
uöt8
 
	gC4Te°P©ã∫
 [12 * 4] =

123 
	$C4C⁄vOAM
(){

124 
uöt8
 *
OAM±r
=
Mem‹y
.
C4RAM
+(Memory.C4RAM[0x626]<<2);

125 
uöt8
 *
i
=
Mem‹y
.
C4RAM
+0x1fd; i>
OAM±r
; i-=4){

127 *
i
=0xe0;

130 
uöt16
 
globÆX
, 
globÆY
;

131 
uöt8
 *
OAM±r2
;

132 
öt16
 
S¥X
, 
S¥Y
;

133 
uöt8
 
S¥Name
, 
S¥Aâr
;

134 
uöt8
 
S¥Cou¡
;

136 
globÆX
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x0621);

137 
globÆY
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x0623);

138 
OAM±r2
=
Mem‹y
.
C4RAM
+0x200+(Memory.C4RAM[0x626]>>2);

140 #ifde‡
DEBUGGER


141 if(
Mem‹y
.
C4RAM
[0x625]!=0Ë
	`¥ötf
("$6625=%02x,Éxpected 00\n", Memory.C4RAM[0x625]);

142 if((
Mem‹y
.
C4RAM
[0x626]>>2)!=Mem‹y.C4RAM[0x629]Ë
	`¥ötf
("$6629=%02x,Éxpected %02x\n", Memory.C4RAM[0x629], (Memory.C4RAM[0x626]>>2));

143 if(((
uöt16
)
Mem‹y
.
C4RAM
[0x626]<<2)!=
	`READ_WORD
(Mem‹y.C4RAM+0x627)Ë
	`¥ötf
("$6627=%04x,Éxpected %04x\n", READ_WORD(Memory.C4RAM+0x627), ((uint16)Memory.C4RAM[0x626]<<2));

146 if(
Mem‹y
.
C4RAM
[0x0620]!=0){

147 
S¥Cou¡
=128-
Mem‹y
.
C4RAM
[0x626];

148 
uöt8
 
off£t
=(
Mem‹y
.
C4RAM
[0x626]&3)*2;

149 
uöt8
 *
§˝å
=
Mem‹y
.
C4RAM
+0x220;

150 
i
=
Mem‹y
.
C4RAM
[0x0620]; i>0 && 
S¥Cou¡
>0; i--, 
§˝å
+=16){

151 
S¥X
=
	`READ_WORD
(
§˝å
)-
globÆX
;

152 
S¥Y
=
	`READ_WORD
(
§˝å
+2)-
globÆY
;

153 
S¥Name
=
§˝å
[5];

154 
S¥Aâr
=
§˝å
[4] | srcptr[0x06];

156 
uöt8
 *
•Ωå
=
	`S9xGëMemPoöãr
(
	`READ_3WORD
(
§˝å
+7));

157 if(*
•Ωå
!=0){

158 
öt16
 
X
, 
Y
;

159 
S¥C¡
=*
•Ωå
++; S¥C¡>0 && 
S¥Cou¡
>0; SprCnt--, sprptr+=4){

160 
X
=(
öt8
)
•Ωå
[1];

161 if(
S¥Aâr
&0x40){

162 
X
=-X-((
•Ωå
[0]&0x20)?16:8);

164 
X
+=
S¥X
;

165 if(
X
>=-16 && X<=272){

166 
Y
=(
öt8
)
•Ωå
[2];

167 if(
S¥Aâr
&0x80){

168 
Y
=-Y-((
•Ωå
[0]&0x20)?16:8);

170 
Y
+=
S¥Y
;

171 if(
Y
>=-16 && Y<=224){

172 
OAM±r
[0]=
X
&0xff;

173 
OAM±r
[1]=(
uöt8
)
Y
;

174 
OAM±r
[2]=
S¥Name
+
•Ωå
[3];

175 
OAM±r
[3]=
S¥Aâr
^(
•Ωå
[0]&0xc0);

176 *
OAM±r2
 &~(3<<
off£t
);

177 if(
X
&0x100Ë*
OAM±r2
 |1<<
off£t
;

178 if(
•Ωå
[0]&0x20Ë*
OAM±r2
 |2<<
off£t
;

179 
OAM±r
+=4;

180 
S¥Cou¡
--;

181 
off£t
=(offset+2)&6;

182 if(
off£t
==0Ë
OAM±r2
++;

186 } if(
S¥Cou¡
>0){

187 
OAM±r
[0]=(
uöt8
)
S¥X
;

188 
OAM±r
[1]=(
uöt8
)
S¥Y
;

189 
OAM±r
[2]=
S¥Name
;

190 
OAM±r
[3]=
S¥Aâr
;

191 *
OAM±r2
 &~(3<<
off£t
);

192 if(
S¥X
&0x100Ë*
OAM±r2
 |3<<
off£t
;

193 *
OAM±r2
 |2<<
off£t
;

194 
OAM±r
+=4;

195 
S¥Cou¡
--;

196 
off£t
=(offset+2)&6;

197 if(
off£t
==0Ë
OAM±r2
++;

202 
	}
}

204 
	$C4DoSˇÀRŸ©e
(
row_∑ddög
){

205 
öt16
 
A
, 
B
, 
C
, 
D
;

208 
öt32
 
XSˇÀ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f8f);

209 if(
XSˇÀ
&0x8000) XScale=0x7fff;

210 
öt32
 
YSˇÀ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f92);

211 if(
YSˇÀ
&0x8000) YScale=0x7fff;

213 if(
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)==0)

217 
A
=(
öt16
)
XSˇÀ
;

218 
B
=0;

219 
C
=0;

220 
D
=(
öt16
)
YSˇÀ
;

222 if(
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)==128){

224 
A
=0;

225 
B
=(
öt16
)(-
YSˇÀ
);

226 
C
=(
öt16
)
XSˇÀ
;

227 
D
=0;

228 } if(
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)==256){

230 
A
=(
öt16
)(-
XSˇÀ
);

231 
B
=0;

232 
C
=0;

233 
D
=(
öt16
)(-
YSˇÀ
);

234 } if(
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)==384){

236 
A
=0;

237 
B
=(
öt16
)
YSˇÀ
;

238 
C
=(
öt16
)(-
XSˇÀ
);

239 
D
=0;

241 
A
=(
öt16
)
	`SAR
(
C4CosTabÀ
[
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)&0x1ff]*
XSˇÀ
, 15);

242 
B
=(
öt16
)(-
	`SAR
(
C4SöTabÀ
[
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)&0x1ff]*
YSˇÀ
, 15));

243 
C
=(
öt16
)
	`SAR
(
C4SöTabÀ
[
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)&0x1ff]*
XSˇÀ
, 15);

244 
D
=(
öt16
)
	`SAR
(
C4CosTabÀ
[
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80)&0x1ff]*
YSˇÀ
, 15);

248 
uöt8
 
w
=
Mem‹y
.
C4RAM
[0x1f89]&~7;

249 
uöt8
 
h
=
Mem‹y
.
C4RAM
[0x1f8c]&~7;

256 
	`mem£t
(
Mem‹y
.
C4RAM
, 0, (
w
+
row_∑ddög
/4)*
h
/2);

258 
öt32
 
Cx
=(
öt16
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83);

259 
öt32
 
Cy
=(
öt16
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f86);

261 #ifde‡
DEBUGGER


262 if(
Mem‹y
.
C4RAM
[0x1f97]!=0Ë
	`¥ötf
("$7f97=%02x,Éxpected 00\n", Memory.C4RAM[0x1f97]);

263 if((
Cx
&~1)!=
w
/2 || (
Cy
&~1)!=
h
/2Ë
	`¥ötf
("Center isÇot middle of image! (%d, %d) != (%d, %d)\n", Cx, Cy, w/2, h/2);

270 
öt32
 
LöeX
=(
Cx
<<12Ë- Cx*
A
 - Cx*
B
;

271 
öt32
 
LöeY
=(
Cy
<<12Ë- Cy*
C
 - Cy*
D
;

274 
uöt32
 
X
, 
Y
;

275 
uöt8
 
byã
;

276 
outidx
=0;

277 
uöt8
 
bô
=0x80;

278 
y
=0; y<
h
; y++){

279 
X
=
LöeX
;

280 
Y
=
LöeY
;

281 
x
=0; x<
w
; x++){

282 if((
X
>>12)>=
w
 || (
Y
>>12)>=
h
){

283 
byã
=0;

285 
uöt32
 
addr
=(
Y
>>12)*
w
+(
X
>>12);

286 
byã
=
Mem‹y
.
C4RAM
[0x600+(
addr
>>1)];

287 if(
addr
&1Ë
byã
>>=4;

291 if(
byã
&1Ë
Mem‹y
.
C4RAM
[
outidx
]|=
bô
;

292 if(
byã
&2Ë
Mem‹y
.
C4RAM
[
outidx
+1]|=
bô
;

293 if(
byã
&4Ë
Mem‹y
.
C4RAM
[
outidx
+16]|=
bô
;

294 if(
byã
&8Ë
Mem‹y
.
C4RAM
[
outidx
+17]|=
bô
;

296 
bô
>>=1;

297 if(
bô
==0){

298 
bô
=0x80;

299 
outidx
+=32;

302 
X
+=
A
;

303 
Y
+=
C
;

305 
outidx
+=2+
row_∑ddög
;

306 if(
outidx
&0x10){

307 
outidx
&=~0x10;

309 
outidx
-=
w
*4+
row_∑ddög
;

311 
LöeX
+=
B
;

312 
LöeY
+=
D
;

314 
	}
}

316 
	$C4DøwLöe
(
öt32
 
X1
, i¡32 
Y1
, 
öt16
 
Z1
,

317 
öt32
 
X2
, i¡32 
Y2
, 
öt16
 
Z2
, 
uöt8
 
Cﬁ‹
){

319 
C4WFXVÆ
=()
X1
;

320 
C4WFYVÆ
=()
Y1
;

321 
C4WFZVÆ
=
Z1
;

322 
C4WFSˇÀ
=
Mem‹y
.
C4RAM
[0x1f90];

323 
C4WFX2VÆ
=
Mem‹y
.
C4RAM
[0x1f86];

324 
C4WFY2VÆ
=
Mem‹y
.
C4RAM
[0x1f87];

325 
C4WFDi°
=
Mem‹y
.
C4RAM
[0x1f88];

326 
	`C4TønsfWúeFøme2
();

327 
X1
=(
C4WFXVÆ
+48)<<8;

328 
Y1
=(
C4WFYVÆ
+48)<<8;

330 
C4WFXVÆ
=()
X2
;

331 
C4WFYVÆ
=()
Y2
;

332 
C4WFZVÆ
=
Z2
;

333 
	`C4TønsfWúeFøme2
();

334 
X2
=(
C4WFXVÆ
+48)<<8;

335 
Y2
=(
C4WFYVÆ
+48)<<8;

338 
C4WFXVÆ
=()(
X1
>>8);

339 
C4WFYVÆ
=()(
Y1
>>8);

340 
C4WFX2VÆ
=()(
X2
>>8);

341 
C4WFY2VÆ
=()(
Y2
>>8);

342 
	`C4CÆcWúeFøme
();

343 
X2
=(
öt16
)
C4WFXVÆ
;

344 
Y2
=(
öt16
)
C4WFYVÆ
;

347 
i
=
C4WFDi°
?C4WFDist:1; i>0; i--)

349 if(
X1
>0xf‡&& 
Y1
>0xff && X1<0x6000 && Y1<0x6000)

351 
uöt16
 
addr
=((
X1
&~0x7ffË+ (
Y1
&~0x7ff)*12 + (Y1&0x700))>>7;

352 
addr
=(((
Y1
>>8)>>3)<<8)-(((Y1>>8)>>3)<<6)+(((
X1
>>8)>>3)<<4)+((Y1>>8)&7)*2;

353 
uöt8
 
bô
=0x80>>((
X1
>>8)&7);

354 
Mem‹y
.
C4RAM
[
addr
+0x300]&=~
bô
;

355 
Mem‹y
.
C4RAM
[
addr
+0x301]&=~
bô
;

356 if(
Cﬁ‹
&1Ë
Mem‹y
.
C4RAM
[
addr
+0x300]|=
bô
;

357 if(
Cﬁ‹
&2Ë
Mem‹y
.
C4RAM
[
addr
+0x301]|=
bô
;

359 
X1
+=
X2
;

360 
Y1
+=
Y2
;

362 
	}
}

364 
	$C4DøwWúeFøme
()

366 
uöt8
 *
löe
=
	`S9xGëMemPoöãr
(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f80));

367 
uöt8
 *
poöt1
, *
poöt2
;

368 
öt16
 
X1
, 
Y1
, 
Z1
;

369 
öt16
 
X2
, 
Y2
, 
Z2
;

370 
uöt8
 
Cﬁ‹
;

372 #ifde‡
DEBUGGER


373 if(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f8f)&0xff00ffË
	`¥ötf
("wireframe: Unexpected value in $7f8f: %06x\n", READ_3WORD(Memory.C4RAM+0x1f8f));

374 if(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1Á4)!=0x001000Ë
	`¥ötf
("wireframe: Unexpected value in $7fa4: %06x\n", READ_3WORD(Memory.C4RAM+0x1fa4));

377 
i
=
Mem‹y
.
C4RAM
[0x0295]; i>0; i--, 
löe
+=5){

378 if(
löe
[0]==0xff &&Üine[1]==0xff){

379 
uöt8
 *
tmp
=
löe
-5;

380 
löe
[2]==0xf‡&&Üöe[3]==0xffË
tmp
-=5;

381 
poöt1
=
	`S9xGëMemPoöãr
((
Mem‹y
.
C4RAM
[0x1f82]<<16Ë| (
tmp
[2]<<8) |Åmp[3]);

383 
poöt1
=
	`S9xGëMemPoöãr
((
Mem‹y
.
C4RAM
[0x1f82]<<16Ë| (
löe
[0]<<8) |Üine[1]);

385 
poöt2
=
	`S9xGëMemPoöãr
((
Mem‹y
.
C4RAM
[0x1f82]<<16Ë| (
löe
[2]<<8) |Üine[3]);

387 
X1
=(
poöt1
[0]<<8) |Öoint1[1];

388 
Y1
=(
poöt1
[2]<<8) |Öoint1[3];

389 
Z1
=(
poöt1
[4]<<8) |Öoint1[5];

390 
X2
=(
poöt2
[0]<<8) |Öoint2[1];

391 
Y2
=(
poöt2
[2]<<8) |Öoint2[3];

392 
Z2
=(
poöt2
[4]<<8) |Öoint2[5];

393 
Cﬁ‹
=
löe
[4];

394 
	`C4DøwLöe
(
X1
, 
Y1
, 
Z1
, 
X2
, 
Y2
, 
Z2
, 
Cﬁ‹
);

396 
	}
}

398 
	$C4Tønsf‹mLöes
(){

399 
C4WFX2VÆ
=
Mem‹y
.
C4RAM
[0x1f83];

400 
C4WFY2VÆ
=
Mem‹y
.
C4RAM
[0x1f86];

401 
C4WFDi°
=
Mem‹y
.
C4RAM
[0x1f89];

402 
C4WFSˇÀ
=
Mem‹y
.
C4RAM
[0x1f8c];

404 #ifde‡
DEBUGGER


405 if(
Mem‹y
.
C4RAM
[0x1f8a]!=0x90Ë
	`¥ötf
("löes: $7f8®%02x,Éx≥˘ed 90\n", 
	`READ_WORD
(Memory.C4RAM+0x1f8a));

409 
uöt8
 *
±r
=
Mem‹y
.
C4RAM
;

411 
i
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80); i>0; i--, 
±r
+=0x10)

413 
C4WFXVÆ
=
	`READ_WORD
(
±r
+1);

414 
C4WFYVÆ
=
	`READ_WORD
(
±r
+5);

415 
C4WFZVÆ
=
	`READ_WORD
(
±r
+9);

416 
	`C4TønsfWúeFøme
();

419 
	`WRITE_WORD
(
±r
+1, 
C4WFXVÆ
+0x80);

420 
	`WRITE_WORD
(
±r
+5, 
C4WFYVÆ
+0x50);

423 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x600, 23);

424 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x602, 0x60);

425 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x605, 0x40);

426 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x600+8, 23);

427 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x602+8, 0x60);

428 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x605+8, 0x40);

430 
±r
=
Mem‹y
.
C4RAM
+0xb02;

431 
uöt8
 *
±r2
=
Mem‹y
.
C4RAM
;

433 
i
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0xb00); i>0; i--, 
±r
+=2, 
±r2
+=8)

435 
C4WFXVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+(
±r
[0]<<4)+1);

436 
C4WFYVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+(
±r
[0]<<4)+5);

437 
C4WFX2VÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+(
±r
[1]<<4)+1);

438 
C4WFY2VÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+(
±r
[1]<<4)+5);

439 
	`C4CÆcWúeFøme
();

440 
	`WRITE_WORD
(
±r2
+0x600, 
C4WFDi°
?C4WFDist:1);

441 
	`WRITE_WORD
(
±r2
+0x602, 
C4WFXVÆ
);

442 
	`WRITE_WORD
(
±r2
+0x605, 
C4WFYVÆ
);

445 
	}
}

446 
	$C4BôPœ√Wave
(){

447 
uöt16
 
bmpd©a
[]={

455 
uöt8
 *
d°
=
Mem‹y
.
C4RAM
;

456 
uöt32
 
wavïå
=
Mem‹y
.
C4RAM
[0x1f83];

457 
uöt16
 
mask1
=0xc0c0;

458 
uöt16
 
mask2
=0x3f3f;

460 #ifde‡
DEBUGGER


461 if(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f80Ë!Mem‹y.C4RAM[
wavïå
+0xb00]Ë
	`¥ötf
("$7f80=%06x,Éxpected %02x\n", READ_3WORD(Memory.C4RAM+0x1f80), Memory.C4RAM[waveptr+0xb00]);

464 
j
=0; j<0x10; j++){

466 
öt16
 
height
=-((
öt8
)
Mem‹y
.
C4RAM
[
wavïå
+0xb00])-16;

467 
i
=0; i<40; i++){

468 
uöt16
 
tmp
=
	`READ_WORD
(
d°
+
bmpd©a
[
i
]Ë& 
mask2
;

469 if(
height
>=0){

470 if(
height
<8){

471 
tmp
|=
mask1
&
	`READ_WORD
(
Mem‹y
.
C4RAM
+0xa00+
height
*2);

473 
tmp
|=
mask1
&0xff00;

476 
	`WRITE_WORD
(
d°
+
bmpd©a
[
i
], 
tmp
);

477 
height
++;

479 
wavïå
=(waveptr+1)&0x7f;

480 
mask1
=(mask1>>2)|(mask1<<6);

481 
mask2
=(mask2>>2)|(mask2<<6);

482 } 
mask1
!=0xc0c0);

483 
d°
+=16;

486 
öt16
 
height
=-((
öt8
)
Mem‹y
.
C4RAM
[
wavïå
+0xb00])-16;

487 
i
=0; i<40; i++){

488 
uöt16
 
tmp
=
	`READ_WORD
(
d°
+
bmpd©a
[
i
]Ë& 
mask2
;

489 if(
height
>=0){

490 if(
height
<8){

491 
tmp
|=
mask1
&
	`READ_WORD
(
Mem‹y
.
C4RAM
+0xa10+
height
*2);

493 
tmp
|=
mask1
&0xff00;

496 
	`WRITE_WORD
(
d°
+
bmpd©a
[
i
], 
tmp
);

497 
height
++;

499 
wavïå
=(waveptr+1)&0x7f;

500 
mask1
=(mask1>>2)|(mask1<<6);

501 
mask2
=(mask2>>2)|(mask2<<6);

502 } 
mask1
!=0xc0c0);

503 
d°
+=16;

505 
	}
}

507 
	$C4S¥Disöãgøã
()

509 
uöt8
 
width
, 
height
;

510 
uöt32
 
SèπX
, 
SèπY
;

511 
uöt8
 *
§c
;

512 
öt32
 
sˇÀX
, 
sˇÀY
;

513 
öt32
 
Cx
, 
Cy
;

515 
width
=
Mem‹y
.
C4RAM
[0x1f89];

516 
height
=
Mem‹y
.
C4RAM
[0x1f8c];

517 
Cx
=(
öt16
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80);

518 
Cy
=(
öt16
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83);

520 #ifde‡
DEBUGGER


521 if((
Cx
&~1)!=
width
/2 || (
Cy
&~1)!=
height
/2Ë
	`¥ötf
("Center isÇot middle of image for disintegrate! (%d, %d) != (%d, %d)\n", Cx, Cy, width/2, height/2);

524 
sˇÀX
=(
öt16
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f86);

525 
sˇÀY
=(
öt16
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f8f);

526 
SèπX
=-
Cx
*
sˇÀX
+(Cx<<8);

527 
SèπY
=-
Cy
*
sˇÀY
+(Cy<<8);

528 
§c
=
Mem‹y
.
C4RAM
+0x600;

530 
	`mem£t
(
Mem‹y
.
C4RAM
, 0, 
width
*
height
/2);

532 
uöt32
 
y
=
SèπY
, 
i
=0; i<
height
; i++, y+=
sˇÀY
)

534 
uöt32
 
x
=
SèπX
, 
j
=0; j<
width
; j++, x+=
sˇÀX
)

536 if((
x
>>8)<
width
 && (
y
>>8)<
height
 && (y>>8)*width+(x>>8)<0x2000)

538 
uöt8
 
pixñ
=(
j
&1)?(*
§c
>>4):*src;

539 
idx
=(
y
>>11)*
width
*4+(
x
>>11)*32+((y>>8)&7)*2;

540 
uöt8
 
mask
=0x80>>((
x
>>8)&7);

541 if(
pixñ
&1Ë
Mem‹y
.
C4RAM
[
idx
]|=
mask
;

542 if(
pixñ
&2Ë
Mem‹y
.
C4RAM
[
idx
+1]|=
mask
;

543 if(
pixñ
&4Ë
Mem‹y
.
C4RAM
[
idx
+16]|=
mask
;

544 if(
pixñ
&8Ë
Mem‹y
.
C4RAM
[
idx
+17]|=
mask
;

546 if(
j
&1Ë
§c
++;

549 
	}
}

551 
	$S9xC4Pro˚ssS¥ôes
()

553 
Mem‹y
.
C4RAM
[0x1f4d])

556 #ifde‡
DEBUGGER


559 
	`C4C⁄vOAM
();

563 #ifde‡
DEBUGGER


566 
	`C4DoSˇÀRŸ©e
(0);

570 #ifde‡
DEBUGGER


573 
	`C4Tønsf‹mLöes
();

577 #ifde‡
DEBUGGER


580 
	`C4DoSˇÀRŸ©e
(64);

584 #ifde‡
DEBUGGER


587 
	`C4DøwWúeFøme
();

591 #ifde‡
DEBUGGER


592 
	`¥ötf
("00 0b Disintegrate!\n");

594 
	`C4S¥Disöãgøã
();

598 #ifde‡
DEBUGGER


601 
	`C4BôPœ√Wave
();

605 #ifde‡
DEBUGGER


606 
	`¥ötf
 ("Unknow¿C4 s¥ôêcomm™d (%02x)\n", 
Mem‹y
.
C4RAM
 [0x1f4d]);

610 
	}
}

612 
	$S9xSëC4
 (
uöt8
 
byã
, 
uöt16
 
Addªss
)

614 
i
;

616 #ifde‡
DEBUGGER


617 if(
Sëtögs
.
BGLayîög
Ë
	`¥ötf
("%02xÅÿ%04x\n", 
byã
, 
Addªss
);

619 
Mem‹y
.
C4RAM
 [
Addªss
-0x6000] = 
byã
;

620 i‡(
Addªss
 == 0x7f4f)

622 if(
Mem‹y
.
C4RAM
[0x1f4d]==0x0ê&& 
byã
<0x40 && (byte&3)==0)

624 #ifde‡
DEBUGGER


625 
	`¥ötf
("Te° comm™d %02x 0êu£d!\n", 
byã
);

627 
Mem‹y
.
C4RAM
[0x1f80]=
byã
>>2;

631 
byã
)

634 
	`S9xC4Pro˚ssS¥ôes
();

638 #ifde‡
DEBUGGER


640 if(
Mem‹y
.
C4RAM
[0x1f4d]!=8Ë
	`¥ötf
("$7f4d=%02x,Éxpected 08 for command 01 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

642 
	`mem£t
(
Mem‹y
.
C4RAM
+0x300, 0, 16*12*3*4);

643 
	`C4DøwWúeFøme
();

647 #ifde‡
DEBUGGER


648 
	`¥ötf
("05 Propulsion (?)!\n");

649 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 05 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

652 
öt32
 
tmp
=0x10000;

653 if(
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83)){

654 
tmp
=
	`SAR
(—mp/
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83))*READ_WORD(Memory.C4RAM+0x1f81), 8);

656 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f80, (
uöt16
)
tmp
);

661 #ifde‡
DEBUGGER


662 
	`¥ötf
("0d Set vectorÜength!\n");

663 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 0d %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

665 
C41FXVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80);

666 
C41FYVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83);

667 
C41FDi°VÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f86);

668 
	`C4Op0D
();

669 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f89, 
C41FXVÆ
);

670 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f8c, 
C41FYVÆ
);

674 #ifde‡
DEBUGGER


676 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 10 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

679 
öt32
 
tmp
=
	`SAR
((öt32)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83)*
C4CosTabÀ
[READ_WORD(Memory.C4RAM+0x1f80)&0x1ff]*2, 16);

680 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f86, 
tmp
);

681 
tmp
=
	`SAR
((
öt32
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83)*
C4SöTabÀ
[READ_WORD(Memory.C4RAM+0x1f80)&0x1ff]*2, 16);

682 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f89, (
tmp
-
	`SAR
(tmp, 6)));

687 #ifde‡
DEBUGGER


689 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 13 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

692 
öt32
 
tmp
=
	`SAR
((öt32)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83)*
C4CosTabÀ
[READ_WORD(Memory.C4RAM+0x1f80)&0x1ff]*2, 8);

693 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f86, 
tmp
);

694 
tmp
=
	`SAR
((
öt32
)
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83)*
C4SöTabÀ
[READ_WORD(Memory.C4RAM+0x1f80)&0x1ff]*2, 8);

695 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f89, 
tmp
);

700 #ifde‡
DEBUGGER


701 
	`¥ötf
("15 Pythagorean!\n");

702 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 15 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

704 
C41FXVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80);

705 
C41FYVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83);

706 
C41FDi°
=(
öt16
)
	`sqπ
(()
C41FXVÆ
*C41FXVÆ + ()
C41FYVÆ
*C41FYVal);

707 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f80, 
C41FDi°
);

711 #ifde‡
DEBUGGER


713 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 1f %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

715 
C41FXVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80);

716 
C41FYVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83);

717 
	`C4Op1F
();

718 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f86, 
C41FAngÀRes
);

723 #ifde‡
DEBUGGER


725 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 22 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

727 
öt16
 
™gÀ1
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f8c)&0x1ff;

728 
öt16
 
™gÀ2
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f8f)&0x1ff;

729 #ifde‡
DEBUGGER


730 if(
C4CosTabÀ
[
™gÀ1
]==0Ë
	`Ârötf
(
°dîr
, "22 Trapezoid: InvalidÅangent!ángle1=%d\n",ángle1);

731 if(
C4CosTabÀ
[
™gÀ2
]==0Ë
	`Ârötf
(
°dîr
, "22 Trapezoid: InvalidÅangent!ángle2=%d\n",ángle2);

733 
öt32
 
èn1
=(
C4CosTabÀ
[
™gÀ1
]!=0)?((((öt32)
C4SöTabÀ
[angle1])<<16)/C4CosTable[angle1]):0x80000000;

734 
öt32
 
èn2
=(
C4CosTabÀ
[
™gÀ2
]!=0)?((((öt32)
C4SöTabÀ
[angle2])<<16)/C4CosTable[angle2]):0x80000000;

735 
öt16
 
y
 = 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f83) - READ_WORD(Memory.C4RAM+0x1f89);

736 
öt16
 
À·
, 
right
;

737 
j
=0; j<225; j++)

739 if(
y
>=0)

741 
À·
 = 
	`SAR
((
öt32
)
èn1
*
y
, 16) -

742 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80) +

743 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f86);

744 
right
 = 
	`SAR
((
öt32
)
èn2
*
y
, 16) -

745 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f80) +

746 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f86) +

747 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f93);

749 if(
À·
<0 && 
right
<0){

750 
À·
=1;

751 
right
=0;

752 } if(
À·
<0){

753 
À·
=0;

754 } if(
right
<0){

755 
right
=0;

757 if(
À·
>255 && 
right
>255){

758 
À·
=255;

759 
right
=254;

760 } if(
À·
>255){

761 
À·
=255;

762 } if(
right
>255){

763 
right
=255;

768 
À·
=1;

769 
right
=0;

771 
Mem‹y
.
C4RAM
[
j
+0x800] = (
uöt8
)
À·
;

772 
Mem‹y
.
C4RAM
[
j
+0x900] = (
uöt8
)
right
;

773 
y
++;

779 #ifde‡
DEBUGGER


780 
	`¥ötf
("25 Multiply!\n");

781 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 25 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

784 
öt32
 
foo
=
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f80);

785 
öt32
 
b¨
=
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f83);

786 
foo
*=
b¨
;

787 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f80, 
foo
);

792 #ifde‡
DEBUGGER


794 if(
Mem‹y
.
C4RAM
[0x1f4d]!=2Ë
	`¥ötf
("$7f4d=%02x,Éxpected 02 for command 2d %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

795 if(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f8f)&0xff00ffË
	`¥ötf
("2dÅransform coords: Unexpected value in $7f8f: %06x\n", READ_3WORD(Memory.C4RAM+0x1f8f));

796 if(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f8c)!=0x001000Ë
	`¥ötf
("0dÅransform coords: Unexpected value in $7f8c: %06x\n", READ_3WORD(Memory.C4RAM+0x1f8c));

798 
C4WFXVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f81);

799 
C4WFYVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f84);

800 
C4WFZVÆ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f87);

801 
C4WFX2VÆ
=
Mem‹y
.
C4RAM
[0x1f89];

802 
C4WFY2VÆ
=
Mem‹y
.
C4RAM
[0x1f8a];

803 
C4WFDi°
=
Mem‹y
.
C4RAM
[0x1f8b];

804 
C4WFSˇÀ
=
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f90);

805 
	`C4TønsfWúeFøme2
();

806 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f80, 
C4WFXVÆ
);

807 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f83, 
C4WFYVÆ
);

811 #ifde‡
DEBUGGER


812 
	`¥ötf
("40 Sum!\n");

813 if(
Mem‹y
.
C4RAM
[0x1f4d]!=0x0eË
	`¥ötf
("$7f4d=%02x,Éxpected 0e for command 40 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

816 
uöt16
 
sum
=0;

817 
i
=0; i<0x800; 
sum
+=
Mem‹y
.
C4RAM
[i++]);

818 
	`WRITE_WORD
(
Mem‹y
.
C4RAM
+0x1f80, 
sum
);

823 #ifde‡
DEBUGGER


824 
	`¥ötf
("54 Square!\n");

825 if(
Mem‹y
.
C4RAM
[0x1f4d]!=0x0eË
	`¥ötf
("$7f4d=%02x,Éxpected 0e for command 54 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

828 
öt64
 
a
=
	`SAR
((öt64)
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f80)<<40, 40);

830 
a
*=a;

832 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f83, 
a
);

833 
	`WRITE_3WORD
(
Mem‹y
.
C4RAM
+0x1f86, (
a
>>24));

838 #ifde‡
DEBUGGER


839 
	`¥ötf
("5c Immediate Reg!\n");

840 if(
Mem‹y
.
C4RAM
[0x1f4d]!=0x0eË
	`¥ötf
("$7f4d=%02x,Éxpected 0e for command 5c %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

842 
i
 = 0; i < 12 * 4; i++)

843 
Mem‹y
.
C4RAM
 [
i
] = 
C4Te°P©ã∫
 [i];

847 #ifde‡
DEBUGGER


848 
	`¥ötf
("89 Immediate ROM!\n");

849 if(
Mem‹y
.
C4RAM
[0x1f4d]!=0x0eË
	`¥ötf
("$7f4d=%02x,Éxpected 0e for command 89 %02x\n", Memory.C4RAM[0x1f4d], Memory.C4RAM[0x1f4d]);

851 
Mem‹y
.
C4RAM
 [0x1f80] = 0x36;

852 
Mem‹y
.
C4RAM
 [0x1f81] = 0x43;

853 
Mem‹y
.
C4RAM
 [0x1f82] = 0x05;

857 #ifde‡
DEBUGGER


858 
	`¥ötf
 ("Unknow¿C4 comm™d (%02x)\n", 
byã
);

863 } i‡(
Addªss
 == 0x7f47) {

864 #ifde‡
DEBUGGER


866 if(
byã
 !0Ë
	`¥ötf
("C4Üoad:Çon-0 writtenÅo $7f47! Wrote %02x\n", byte);

867 if(
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f45Ë< 0x6000 || (READ_WORD(Mem‹y.C4RAM+0x1f45Ë+ READ_WORD(Mem‹y.C4RAM+0x1f43)Ë> 0x6c00Ë
	`¥ötf
("C4Üoad: Dest unusual! It's %04x\n", READ_WORD(Memory.C4RAM+0x1f45));

869 
	`memmove
(
Mem‹y
.
C4RAM
+(
	`READ_WORD
(Memory.C4RAM+0x1f45)&0x1fff),

870 
	`S9xGëMemPoöãr
(
	`READ_3WORD
(
Mem‹y
.
C4RAM
+0x1f40)),

871 
	`READ_WORD
(
Mem‹y
.
C4RAM
+0x1f43));

873 
	}
}

875 
öt16
 
	gC4SöTabÀ
[512] = {

942 
öt16
 
	gC4CosTabÀ
[512] = {

	@cheats.cpp

41 
	~<°dio.h
>

42 
	~<˘y≥.h
>

43 
	~<°rög.h
>

44 
	~"¢es9x.h
"

45 
	~"chóts.h
"

46 
	~"memm≠.h
"

48 
boﬁ8
 
	$S9xAŒHex
 (c⁄° *
code
, 
Àn
)

50 
i
 = 0; i < 
Àn
; i++)

51 i‡((
code
 [
i
] < '0' || code [i] > '9') &&

52 (
code
 [
i
] < 'a' || code [i] > 'f') &&

53 (
code
 [
i
] < 'A' || code [i] > 'F'))

54  (
FALSE
);

56  (
TRUE
);

57 
	}
}

59 c⁄° *
	$S9xProA˘i⁄RïœyToRaw
 (c⁄° *
code
, 
uöt32
 &
addªss
, 
uöt8
 &
byã
)

61 
uöt32
 
d©a
 = 0;

62 i‡(
	`°æí
 (
code
Ë!8 || !
	`S9xAŒHex
 (code, 8) ||

63 
	`ssˇnf
 (
code
, "%x", &
d©a
) != 1)

66 
addªss
 = 
d©a
 >> 8;

67 
byã
 = (
uöt8
Ë
d©a
;

68  (
NULL
);

69 
	}
}

71 c⁄° *
	$S9xGﬁdFögîToRaw
 (c⁄° *
code
, 
uöt32
 &
addªss
, 
boﬁ8
 &
§am
,

72 
uöt8
 &
num_byãs
, uöt8 
byãs
[3])

74 
tmp
 [15];

75 i‡(
	`°æí
 (
code
) != 14)

78 
	`°∫˝y
 (
tmp
, 
code
, 5);

79 
tmp
 [5] = 0;

80 i‡(
	`ssˇnf
 (
tmp
, "%x", &
addªss
) != 1)

83 
i
;

84 
i
 = 0; i < 3; i++)

86 
	`°∫˝y
 (
tmp
, 
code
 + 5 + 
i
 * 2, 2);

87 
tmp
 [2] = 0;

88 
byã
;

89 i‡(
	`ssˇnf
 (
tmp
, "%x", &
byã
) != 1)

91 
byãs
 [
i
] = (
uöt8
Ë
byã
;

93 
num_byãs
 = 
i
;

94 
§am
 = 
code
 [13] == '1';

95  (
NULL
);

96 
	}
}

98 c⁄° *
	$S9xGameGíõToRaw
 (c⁄° *
code
, 
uöt32
 &
addªss
, 
uöt8
 &
byã
)

100 
√w_code
 [12];

102 i‡(
	`°æí
 (
code
Ë!9 || *(codê+ 4Ë!'-' || !
	`S9xAŒHex
 (code, 4) ||

103 !
	`S9xAŒHex
 (
code
 + 5, 4))

106 
	`°r˝y
 (
√w_code
, "0x");

107 
	`°∫˝y
 (
√w_code
 + 2, 
code
, 4);

108 
	`°r˝y
 (
√w_code
 + 6, 
code
 + 5);

110 *
ªÆ_hex
 = "0123456789ABCDEF";

111 *
gíõ_hex
 = "DF4709156BC8A23E";

113 
i
 = 2; i < 10; i++)

115 i‡(
	`i¶owî
 (
√w_code
 [
i
]))

116 
√w_code
 [
i
] = 
	`touµî
 (new_code [i]);

117 
j
;

118 
j
 = 0; j < 16; j++)

120 i‡(
√w_code
 [
i
] =
gíõ_hex
 [
j
])

122 
√w_code
 [
i
] = 
ªÆ_hex
 [
j
];

126 i‡(
j
 == 16)

129 
uöt32
 
d©a
 = 0;

130 
	`ssˇnf
 (
√w_code
, "%x", &
d©a
);

131 
byã
 = (
uöt8
)(
d©a
 >> 24);

132 
addªss
 = 
d©a
 & 0xffffff;

133 
addªss
 = ((address & 0x003c00) << 10) +

134 ((
addªss
 & 0x00003c) << 14) +

135 ((
addªss
 & 0xf00000) >> 8) +

136 ((
addªss
 & 0x000003) << 10) +

137 ((
addªss
 & 0x00c000) >> 6) +

138 ((
addªss
 & 0x0f0000) >> 12) +

139 ((
addªss
 & 0x0003c0) >> 6);

141  (
NULL
);

142 
	}
}

144 
	$S9xSèπChótSórch
 (
SChótD©a
 *
d
)

146 
	`memmove
 (
d
->
CWRAM
, d->
RAM
, 0x20000);

147 
	`memmove
 (
d
->
CSRAM
, d->
SRAM
, 0x10000);

148 
	`memmove
 (
d
->
CIRAM
, &d->
FûlRAM
 [0x3000], 0x2000);

149 
	`mem£t
 ((*Ë
d
->
WRAM_BITS
, 0xff, 0x20000 >> 3);

150 
	`mem£t
 ((*Ë
d
->
SRAM_BITS
, 0xff, 0x10000 >> 3);

151 
	`mem£t
 ((*Ë
d
->
IRAM_BITS
, 0xff, 0x2000 >> 3);

152 
	}
}

154 
	#BIT_CLEAR
(
a
,
v
) \

155 (
a
)[(
v
Ë>> 5] &~(1 << ((vË& 31))

	)

157 
	#BIT_SET
(
a
,
v
) \

158 (
a
)[(
v
Ë>> 5] |1 << ((vË& 31)

	)

160 
	#TEST_BIT
(
a
,
v
) \

161 ((
a
)[(
v
Ë>> 5] & (1 << ((vË& 31)))

	)

163 
	#_C
(
c
,
a
,
b
) \

164 ((
c
Ë=
S9X_LESS_THAN
 ? (
a
Ë< (
b
) : \

165 (
c
Ë=
S9X_GREATER_THAN
 ? (
a
Ë> (
b
) : \

166 (
c
Ë=
S9X_LESS_THAN_OR_EQUAL
 ? (
a
Ë<(
b
) : \

167 (
c
Ë=
S9X_GREATER_THAN_OR_EQUAL
 ? (
a
Ë>(
b
) : \

168 (
c
Ë=
S9X_EQUAL
 ? (
a
Ë=(
b
) : \

169 (
a
Ë!(
b
))

	)

171 
	#_D
(
s
,
m
,
o
) \

172 ((
s
Ë=
S9X_8_BITS
 ? (
uöt8
Ë(*((
m
Ë+ (
o
))) : \

173 (
s
Ë=
S9X_16_BITS
 ? ((
uöt16
Ë(*((
m
Ë+ (
o
)) + (*((m) + (o) + 1) << 8))) : \

174 (
s
Ë=
S9X_24_BITS
 ? ((
uöt32
Ë(*((
m
Ë+ (
o
)) + (*((m) + (o) + 1) << 8) + (*((m) + (o) + 2) << 16))) : \

175 ((
uöt32
Ë(*((
m
Ë+ (
o
)Ë+ (*((mË+ (oË+ 1Ë<< 8Ë+ (*((mË+ (oË+ 2Ë<< 16Ë+ (*((mË+ (oË+ 3Ë<< 24))))

	)

177 
	#_DS
(
s
,
m
,
o
) \

178 ((
s
Ë=
S9X_8_BITS
 ? ((
öt8
Ë*((
m
Ë+ (
o
))) : \

179 (
s
Ë=
S9X_16_BITS
 ? ((
öt16
Ë(*((
m
Ë+ (
o
)) + (*((m) + (o) + 1) << 8))) : \

180 (
s
Ë=
S9X_24_BITS
 ? (((
öt32
Ë((*((
m
Ë+ (
o
)) + (*((m) + (o) + 1) << 8) + (*((m) + (o) + 2) << 16)) << 8)) >> 8): \

181 ((
öt32
Ë(*((
m
Ë+ (
o
)Ë+ (*((mË+ (oË+ 1Ë<< 8Ë+ (*((mË+ (oË+ 2Ë<< 16Ë+ (*((mË+ (oË+ 3Ë<< 24))))

	)

183 
	$S9xSórchF‹Ch™ge
 (
SChótD©a
 *
d
, 
S9xChótCom∑ris⁄Ty≥
 
cmp
,

184 
S9xChótD©aSize
 
size
, 
boﬁ8
 
is_sig√d
, boﬁ8 
upd©e
)

186 
l
;

188 
size
)

190 
S9X_8_BITS
: 
l
 = 0; ;

191 
S9X_16_BITS
: 
l
 = 1; ;

192 
S9X_24_BITS
: 
l
 = 2; ;

194 
S9X_32_BITS
: 
l
 = 3; ;

197 
i
;

198 i‡(
is_sig√d
)

200 
i
 = 0; i < 0x20000 - 
l
; i++)

202 i‡(
	`TEST_BIT
 (
d
->
WRAM_BITS
, 
i
) &&

203 
	`_C
(
cmp
, 
	`_DS
(
size
, 
d
->
RAM
, 
i
), _DS(size, d->
CWRAM
, i)))

205 i‡(
upd©e
)

206 
d
->
CWRAM
 [
i
] = d->
RAM
 [i];

209 
	`BIT_CLEAR
 (
d
->
WRAM_BITS
, 
i
);

212 
i
 = 0; i < 0x10000 - 
l
; i++)

214 i‡(
	`TEST_BIT
 (
d
->
SRAM_BITS
, 
i
) &&

215 
	`_C
(
cmp
, 
	`_DS
(
size
, 
d
->
SRAM
, 
i
), _DS(size, d->
CSRAM
, i)))

217 i‡(
upd©e
)

218 
d
->
CSRAM
 [
i
] = d->
SRAM
 [i];

221 
	`BIT_CLEAR
 (
d
->
SRAM_BITS
, 
i
);

224 
i
 = 0; i < 0x2000 - 
l
; i++)

226 i‡(
	`TEST_BIT
 (
d
->
IRAM_BITS
, 
i
) &&

227 
	`_C
(
cmp
, 
	`_DS
(
size
, 
d
->
FûlRAM
 + 0x3000, 
i
), _DS(size, d->
CIRAM
, i)))

229 i‡(
upd©e
)

230 
d
->
CIRAM
 [
i
] = d->
FûlRAM
 [i + 0x3000];

233 
	`BIT_CLEAR
 (
d
->
IRAM_BITS
, 
i
);

238 
i
 = 0; i < 0x20000 - 
l
; i++)

240 i‡(
	`TEST_BIT
 (
d
->
WRAM_BITS
, 
i
) &&

241 
	`_C
(
cmp
, 
	`_D
(
size
, 
d
->
RAM
, 
i
), _D(size, d->
CWRAM
, i)))

243 i‡(
upd©e
)

244 
d
->
CWRAM
 [
i
] = d->
RAM
 [i];

247 
	`BIT_CLEAR
 (
d
->
WRAM_BITS
, 
i
);

250 
i
 = 0; i < 0x10000 - 
l
; i++)

252 i‡(
	`TEST_BIT
 (
d
->
SRAM_BITS
, 
i
) &&

253 
	`_C
(
cmp
, 
	`_D
(
size
, 
d
->
SRAM
, 
i
), _D(size, d->
CSRAM
, i)))

255 i‡(
upd©e
)

256 
d
->
CSRAM
 [
i
] = d->
SRAM
 [i];

259 
	`BIT_CLEAR
 (
d
->
SRAM_BITS
, 
i
);

262 
i
 = 0; i < 0x2000 - 
l
; i++)

264 i‡(
	`TEST_BIT
 (
d
->
IRAM_BITS
, 
i
) &&

265 
	`_C
(
cmp
, 
	`_D
(
size
, 
d
->
FûlRAM
 + 0x3000, 
i
), _D(size, d->
CIRAM
, i)))

267 i‡(
upd©e
)

268 
d
->
CIRAM
 [
i
] = d->
FûlRAM
 [i + 0x3000];

271 
	`BIT_CLEAR
 (
d
->
IRAM_BITS
, 
i
);

274 
	}
}

276 
	$S9xSórchF‹VÆue
 (
SChótD©a
 *
d
, 
S9xChótCom∑ris⁄Ty≥
 
cmp
,

277 
S9xChótD©aSize
 
size
, 
uöt32
 
vÆue
,

278 
boﬁ8
 
is_sig√d
, boﬁ8 
upd©e
)

280 
l
;

282 
size
)

284 
S9X_8_BITS
: 
l
 = 0; ;

285 
S9X_16_BITS
: 
l
 = 1; ;

286 
S9X_24_BITS
: 
l
 = 2; ;

288 
S9X_32_BITS
: 
l
 = 3; ;

291 
i
;

293 i‡(
is_sig√d
)

295 
i
 = 0; i < 0x20000 - 
l
; i++)

297 i‡(
	`TEST_BIT
 (
d
->
WRAM_BITS
, 
i
) &&

298 
	`_C
(
cmp
, 
	`_DS
(
size
, 
d
->
RAM
, 
i
), (
öt32
Ë
vÆue
))

300 i‡(
upd©e
)

301 
d
->
CWRAM
 [
i
] = d->
RAM
 [i];

304 
	`BIT_CLEAR
 (
d
->
WRAM_BITS
, 
i
);

307 
i
 = 0; i < 0x10000 - 
l
; i++)

309 i‡(
	`TEST_BIT
 (
d
->
SRAM_BITS
, 
i
) &&

310 
	`_C
(
cmp
, 
	`_DS
(
size
, 
d
->
SRAM
, 
i
), (
öt32
Ë
vÆue
))

312 i‡(
upd©e
)

313 
d
->
CSRAM
 [
i
] = d->
SRAM
 [i];

316 
	`BIT_CLEAR
 (
d
->
SRAM_BITS
, 
i
);

319 
i
 = 0; i < 0x2000 - 
l
; i++)

321 i‡(
	`TEST_BIT
 (
d
->
IRAM_BITS
, 
i
) &&

322 
	`_C
(
cmp
, 
	`_DS
(
size
, 
d
->
FûlRAM
 + 0x3000, 
i
), (
öt32
Ë
vÆue
))

324 i‡(
upd©e
)

325 
d
->
CIRAM
 [
i
] = d->
FûlRAM
 [i + 0x3000];

328 
	`BIT_CLEAR
 (
d
->
IRAM_BITS
, 
i
);

333 
i
 = 0; i < 0x20000 - 
l
; i++)

335 i‡(
	`TEST_BIT
 (
d
->
WRAM_BITS
, 
i
) &&

336 
	`_C
(
cmp
, 
	`_D
(
size
, 
d
->
RAM
, 
i
), 
vÆue
))

338 i‡(
upd©e
)

339 
d
->
CWRAM
 [
i
] = d->
RAM
 [i];

342 
	`BIT_CLEAR
 (
d
->
WRAM_BITS
, 
i
);

345 
i
 = 0; i < 0x10000 - 
l
; i++)

347 i‡(
	`TEST_BIT
 (
d
->
SRAM_BITS
, 
i
) &&

348 
	`_C
(
cmp
, 
	`_D
(
size
, 
d
->
SRAM
, 
i
), 
vÆue
))

350 i‡(
upd©e
)

351 
d
->
CSRAM
 [
i
] = d->
SRAM
 [i];

354 
	`BIT_CLEAR
 (
d
->
SRAM_BITS
, 
i
);

357 
i
 = 0; i < 0x2000 - 
l
; i++)

359 i‡(
	`TEST_BIT
 (
d
->
IRAM_BITS
, 
i
) &&

360 
	`_C
(
cmp
, 
	`_D
(
size
, 
d
->
FûlRAM
 + 0x3000, 
i
), 
vÆue
))

362 i‡(
upd©e
)

363 
d
->
CIRAM
 [
i
] = d->
FûlRAM
 [i + 0x3000];

366 
	`BIT_CLEAR
 (
d
->
IRAM_BITS
, 
i
);

369 
	}
}

371 
	$S9xOuçutChótSórchResu…s
 (
SChótD©a
 *
d
)

373 
i
;

374 
i
 = 0; i < 0x20000; i++)

376 i‡(
	`TEST_BIT
 (
d
->
WRAM_BITS
, 
i
))

377 
	`¥ötf
 ("WRAM: %05x: %02x\n", 
i
, 
d
->
RAM
 [i]);

380 
i
 = 0; i < 0x10000; i++)

382 i‡(
	`TEST_BIT
 (
d
->
SRAM_BITS
, 
i
))

383 
	`¥ötf
 ("SRAM: %04x: %02x\n", 
i
, 
d
->
SRAM
 [i]);

386 
i
 = 0; i < 0x2000; i++)

388 i‡(
	`TEST_BIT
 (
d
->
IRAM_BITS
, 
i
))

389 
	`¥ötf
 ("IRAM: %05x: %02x\n", 
i
, 
d
->
FûlRAM
 [i + 0x3000]);

391 
	}
}

	@cheats.h

41 #i‚de‡
_CHEATS_H_


42 
	#_CHEATS_H_


	)

44 
	sSChót


46 
uöt32
 
	maddªss
;

47 
uöt8
 
	mbyã
;

48 
uöt8
 
	mßved_byã
;

49 
boﬁ8
 
	míabÀd
;

50 
boﬁ8
 
	mßved
;

51 
	m«me
 [22];

54 
	#MAX_CHEATS
 75

	)

56 
	sSChótD©a


58 
SChót
 
	mc
 [
MAX_CHEATS
];

59 
uöt32
 
	mnum_chóts
;

60 
uöt8
 
	mCWRAM
 [0x20000];

61 
uöt8
 
	mCSRAM
 [0x10000];

62 
uöt8
 
	mCIRAM
 [0x2000];

63 
uöt8
 *
	mRAM
;

64 
uöt8
 *
	mFûlRAM
;

65 
uöt8
 *
	mSRAM
;

66 
uöt32
 
	mWRAM_BITS
 [0x20000 >> 3];

67 
uöt32
 
	mSRAM_BITS
 [0x10000 >> 3];

68 
uöt32
 
	mIRAM_BITS
 [0x2000 >> 3];

73 
	mS9X_LESS_THAN
, 
	mS9X_GREATER_THAN
, 
	mS9X_LESS_THAN_OR_EQUAL
,

74 
	mS9X_GREATER_THAN_OR_EQUAL
, 
	mS9X_EQUAL
, 
	mS9X_NOT_EQUAL


75 } 
	tS9xChótCom∑ris⁄Ty≥
;

79 
	mS9X_8_BITS
, 
	mS9X_16_BITS
, 
	mS9X_24_BITS
, 
	mS9X_32_BITS


80 } 
	tS9xChótD©aSize
;

82 
S9xInôChótD©a
 ();

84 c⁄° *
S9xGameGíõToRaw
 (c⁄° *
code
, 
uöt32
 &
addªss
, 
uöt8
 &
byã
);

85 c⁄° *
S9xProA˘i⁄RïœyToRaw
 (c⁄° *
code
, 
uöt32
 &
addªss
, 
uöt8
 &
byã
);

86 c⁄° *
S9xGﬁdFögîToRaw
 (c⁄° *
code
, 
uöt32
 &
addªss
, 
boﬁ8
 &
§am
,

87 
uöt8
 &
num_byãs
, uöt8 
byãs
[3]);

88 
S9xAµlyChóts
 ();

89 
S9xAµlyChót
 (
uöt32
 
which1
);

90 
S9xRemoveChóts
 ();

91 
S9xRemoveChót
 (
uöt32
 
which1
);

92 
S9xE«bÀChót
 (
uöt32
 
which1
);

93 
S9xDißbÀChót
 (
uöt32
 
which1
);

94 
S9xAddChót
 (
boﬁ8
 
íabÀ
, boﬁ8 
ßve_cuºít_vÆue
, 
uöt32
 
addªss
,

95 
uöt8
 
byã
);

96 
S9xDñëeChóts
 ();

97 
S9xDñëeChót
 (
uöt32
 
which1
);

98 
boﬁ8
 
S9xLﬂdChótFûe
 (c⁄° *
fûíame
);

99 
boﬁ8
 
S9xSaveChótFûe
 (c⁄° *
fûíame
);

101 
S9xSèπChótSórch
 (
SChótD©a
 *);

102 
S9xSórchF‹Ch™ge
 (
SChótD©a
 *, 
S9xChótCom∑ris⁄Ty≥
 
cmp
,

103 
S9xChótD©aSize
 
size
, 
boﬁ8
 
is_sig√d
, boﬁ8 
upd©e
);

104 
S9xSórchF‹VÆue
 (
SChótD©a
 *, 
S9xChótCom∑ris⁄Ty≥
 
cmp
,

105 
S9xChótD©aSize
 
size
, 
uöt32
 
vÆue
,

106 
boﬁ8
 
is_sig√d
, boﬁ8 
upd©e
);

107 
S9xOuçutChótSórchResu…s
 (
SChótD©a
 *);

	@cheats2.cpp

41 
	~<°dio.h
>

42 
	~<˘y≥.h
>

43 
	~<°rög.h
>

44 
	~"¢es9x.h
"

45 
	~"chóts.h
"

46 
	~"memm≠.h
"

48 
SChótD©a
 
Chót
;

50 
	$S9xInôChótD©a
 ()

52 
Chót
.
RAM
 = 
Mem‹y
.RAM;

53 
Chót
.
SRAM
 = ::SRAM;

54 
Chót
.
FûlRAM
 = 
Mem‹y
.FillRAM;

55 
	}
}

57 
	$S9xAddChót
 (
boﬁ8
 
íabÀ
, boﬁ8 
ßve_cuºít_vÆue
,

58 
uöt32
 
addªss
, 
uöt8
 
byã
)

60 i‡(
Chót
.
num_chóts
 <  (Chót.
c
) /  (Cheat. c [0]))

62 
Chót
.
c
 [Chót.
num_chóts
].
addªss
 =áddress;

63 
Chót
.
c
 [Chót.
num_chóts
].
byã
 = byte;

64 
Chót
.
c
 [Chót.
num_chóts
].
íabÀd
 = 
TRUE
;

65 i‡(
ßve_cuºít_vÆue
)

67 
Chót
.
c
 [Chót.
num_chóts
].
ßved_byã
 = 
	`S9xGëByã
 (
addªss
);

68 
Chót
.
c
 [Chót.
num_chóts
].
ßved
 = 
TRUE
;

70 
Chót
.
num_chóts
++;

72 
	}
}

74 
	$S9xDñëeChót
 (
uöt32
 
which1
)

76 i‡(
which1
 < 
Chót
.
num_chóts
)

78 i‡(
Chót
.
c
 [
which1
].
íabÀd
)

79 
	`S9xRemoveChót
 (
which1
);

81 
	`memmove
 (&
Chót
.
c
 [
which1
], &Cheat.c [which1 + 1],

82  (
Chót
.
c
 [0]Ë* (Chót.
num_chóts
 - 
which1
 - 1));

83 
Chót
.
num_chóts
 = 0;

85 
	}
}

87 
	$S9xDñëeChóts
 ()

89 
	`S9xRemoveChóts
 ();

90 
Chót
.
num_chóts
 = 0;

91 
	}
}

93 
	$S9xE«bÀChót
 (
uöt32
 
which1
)

95 i‡(
which1
 < 
Chót
.
num_chóts
 && !Chót.
c
 [which1].
íabÀd
)

97 
Chót
.
c
 [
which1
].
íabÀd
 = 
TRUE
;

98 
	`S9xAµlyChót
 (
which1
);

100 
	}
}

102 
	$S9xDißbÀChót
 (
uöt32
 
which1
)

104 i‡(
which1
 < 
Chót
.
num_chóts
 && Chót.
c
 [which1].
íabÀd
)

106 
	`S9xRemoveChót
 (
which1
);

107 
Chót
.
c
 [
which1
].
íabÀd
 = 
FALSE
;

109 
	}
}

111 
	$S9xRemoveChót
 (
uöt32
 
which1
)

113 i‡(
Chót
.
c
 [
which1
].
ßved
)

115 
uöt32
 
addªss
 = 
Chót
.
c
 [
which1
].address;

117 
block
 = (
addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
;

118 
uöt8
 *
±r
 = 
Mem‹y
.
M≠
 [
block
];

120 i‡(
±r
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

121 *(
±r
 + (
addªss
 & 0xffff)Ë
Chót
.
c
 [
which1
].
ßved_byã
;

123 
	`S9xSëByã
 (
addªss
, 
Chót
.
c
 [
which1
].
ßved_byã
);

125 
	}
}

127 
	$S9xAµlyChót
 (
uöt32
 
which1
)

129 
uöt32
 
addªss
 = 
Chót
.
c
 [
which1
].address;

131 i‡(!
Chót
.
c
 [
which1
].
ßved
)

132 
Chót
.
c
 [
which1
].
ßved_byã
 = 
	`S9xGëByã
 (
addªss
);

134 
block
 = (
addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
;

135 
uöt8
 *
±r
 = 
Mem‹y
.
M≠
 [
block
];

137 i‡(
±r
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

138 *(
±r
 + (
addªss
 & 0xffff)Ë
Chót
.
c
 [
which1
].
byã
;

140 
	`S9xSëByã
 (
addªss
, 
Chót
.
c
 [
which1
].
byã
);

141 
Chót
.
c
 [
which1
].
ßved
 = 
TRUE
;

142 
	}
}

144 
	$S9xAµlyChóts
 ()

146 i‡(
Sëtögs
.
AµlyChóts
)

148 
uöt32
 
i
 = 0; i < 
Chót
.
num_chóts
; i++)

149 i‡(
Chót
.
c
 [
i
].
íabÀd
)

150 
	`S9xAµlyChót
 (
i
);

152 
	}
}

154 
	$S9xRemoveChóts
 ()

156 
uöt32
 
i
 = 0; i < 
Chót
.
num_chóts
; i++)

157 i‡(
Chót
.
c
 [
i
].
íabÀd
)

158 
	`S9xRemoveChót
 (
i
);

159 
	}
}

161 
boﬁ8
 
	$S9xLﬂdChótFûe
 (c⁄° *
fûíame
)

163 
Chót
.
num_chóts
 = 0;

165 
FILE
 *
fs
 = 
	`f›í
 (
fûíame
, "rb");

166 
uöt8
 
d©a
 [28];

168 i‡(!
fs
)

169  (
FALSE
);

171 
	`‰ód
 ((*Ë
d©a
, 1, 28, 
fs
) == 28)

173 
Chót
.
c
 [Chót.
num_chóts
].
íabÀd
 = (
d©a
 [0] & 4) == 0;

174 
Chót
.
c
 [Chót.
num_chóts
].
byã
 = 
d©a
 [1];

175 
Chót
.
c
 [Chót.
num_chóts
].
addªss
 = 
d©a
 [2] | (data [3] << 8) | (data [4] << 16);

176 
Chót
.
c
 [Chót.
num_chóts
].
ßved_byã
 = 
d©a
 [5];

177 
Chót
.
c
 [Chót.
num_chóts
].
ßved
 = (
d©a
 [0] & 8) != 0;

178 
	`memmove
 (
Chót
.
c
 [Chót.
num_chóts
].
«me
, &
d©a
 [8], 20);

179 
Chót
.
c
 [Chót.
num_chóts
++].
«me
 [20] = 0;

181 
	`f˛o£
 (
fs
);

183  (
TRUE
);

184 
	}
}

186 
boﬁ8
 
	$S9xSaveChótFûe
 (c⁄° *
fûíame
)

188 i‡(
Chót
.
num_chóts
 == 0)

190 #i‚de‡
_SNESPPC


191 (Ë
	`ªmove
 (
fûíame
);

193  (
TRUE
);

196 
FILE
 *
fs
 = 
	`f›í
 (
fûíame
, "wb");

197 
uöt8
 
d©a
 [28];

199 i‡(!
fs
)

200  (
FALSE
);

202 
uöt32
 
i
;

203 
i
 = 0; i < 
Chót
.
num_chóts
; i++)

205 
	`mem£t
 (
d©a
, 0, 28);

206 i‡(
i
 == 0)

208 
d©a
 [6] = 254;

209 
d©a
 [7] = 252;

211 i‡(!
Chót
.
c
 [
i
].
íabÀd
)

212 
d©a
 [0] |= 4;

214 i‡(
Chót
.
c
 [
i
].
ßved
)

215 
d©a
 [0] |= 8;

217 
d©a
 [1] = 
Chót
.
c
 [
i
].
byã
;

218 
d©a
 [2] = (
uöt8
Ë
Chót
.
c
 [
i
].
addªss
;

219 
d©a
 [3] = (
uöt8
Ë(
Chót
.
c
 [
i
].
addªss
 >> 8);

220 
d©a
 [4] = (
uöt8
Ë(
Chót
.
c
 [
i
].
addªss
 >> 16);

221 
d©a
 [5] = 
Chót
.
c
 [
i
].
ßved_byã
;

223 
	`memmove
 (&
d©a
 [8], 
Chót
.
c
 [
i
].
«me
, 19);

224 i‡(
	`fwrôe
 (
d©a
, 28, 1, 
fs
) != 1)

226 
	`f˛o£
 (
fs
);

227  (
FALSE
);

230  (
	`f˛o£
 (
fs
) == 0);

231 
	}
}

	@clip.cpp

41 
	~<°dlib.h
>

43 
	~"¢es9x.h
"

44 
	~"memm≠.h
"

45 
	~"µu.h
"

47 
	sB™d


49 
uöt32
 
	mLe·
;

50 
uöt32
 
	mRight
;

53 #unde‡
MIN


54 #unde‡
MAX


55 
	#MIN
(
A
,
B
Ë((AË< (BË? (AË: (B))

	)

56 
	#MAX
(
A
,
B
Ë((AË> (BË? (AË: (B))

	)

57 
	#BAND_EMPTY
(
B
Ë(B.
Le·
 >B.
Right
)

	)

58 
	#BANDS_INTERSECT
(
A
,
B
Ë((A.
Le·
 >B.Le· && A.Le· < B.
Right
) || \

59 (
A
.
Right
 > 
B
.
Le·
 && A.Righà<B.Right))

	)

60 
	#OR_BANDS
(
R
,
A
,
B
) {\

61 
R
.
Le·
 = 
	`MIN
(
A
.Le·, 
B
.Left); \

62 
R
.
Right
 = 
	`MAX
(
A
.Right, 
B
.Right);}

	)

64 
	#AND_BANDS
(
R
,
A
,
B
) {\

65 
R
.
Le·
 = 
	`MAX
(
A
.Le·, 
B
.Left); \

66 
R
.
Right
 = 
	`MIN
(
A
.Right, 
B
.Right);}

	)

68 #i‚de‡
_SNESPPC


69 
	$I¡Com∑ª
 (c⁄° *
d1
, c⁄° *
d2
)

71 
_cde˛
 
	$I¡Com∑ª
 (c⁄° *
d1
, c⁄° *
d2
)

74 i‡(*(
uöt32
 *Ë
d1
 > *(uöt32 *Ë
d2
)

77 i‡(*(
uöt32
 *Ë
d1
 < *(uöt32 *Ë
d2
)

80 
	}
}

82 #i‚de‡
_SNESPPC


83 
	$B™dCom∑ª
 (c⁄° *
d1
, c⁄° *
d2
)

85 
_cde˛
 
	$B™dCom∑ª
 (c⁄° *
d1
, c⁄° *
d2
)

88 i‡(((
B™d
 *Ë
d1
)->
Le·
 > ((B™d *Ë
d2
)->Left)

91 i‡(((
B™d
 *Ë
d1
)->
Le·
 < ((B™d *Ë
d2
)->Left)

94 
	}
}

96 
	$CompuãClùWödows
 ()

98 
ClùD©a
 *
pClù
 = &
IPPU
.
Clù
 [0];

101 
c
 = 0; c < 2; c++, 
pClù
++)

105 
w
 = 5; w >= 0; w--)

107 
pClù
->
Cou¡
[
w
] = 0;

109 i‡(
w
 == 5)

111 i‡(
c
 == 0)

113 i‡((
Mem‹y
.
FûlRAM
 [0x2130] & 0xc0) == 0xc0)

117 
i
 = 0; i < 6; i++)

119 
IPPU
.
Clù
 [
c
].
Cou¡
 [
i
] = 1;

120 
IPPU
.
Clù
 [
c
].
Le·
 [0][
i
] = 1;

121 
IPPU
.
Clù
 [
c
].
Right
 [0][
i
] = 0;

126 i‡((
Mem‹y
.
FûlRAM
 [0x2130] & 0xc0) == 0x00)

132 i‡((
Mem‹y
.
FûlRAM
 [0x2130] & 0x30) == 0x30)

136 
i
 = 0; i < 6; i++)

138 
IPPU
.
Clù
 [1].
Cou¡
 [
i
] = 1;

139 
IPPU
.
Clù
 [1].
Le·
 [0][
i
] = 1;

140 
IPPU
.
Clù
 [1].
Right
 [0][
i
] = 0;

145 i‡((
Mem‹y
.
FûlRAM
 [0x2130] & 0x30) == 0x00)

149 i‡(!
Sëtögs
.
DißbÀGøphicWödows
)

151 i‡(
w
 =5 || 
pClù
->
Cou¡
 [5] ||

152 (
Mem‹y
.
FûlRAM
 [0x212¯+ 
c
] &

153 
Mem‹y
.
FûlRAM
 [0x212ê+ 
c
] & (1 << 
w
)))

155 
B™d
 
Wö1
[3];

156 
B™d
 
Wö2
[3];

157 
uöt32
 
Wödow1E«bÀd
 = 0;

158 
uöt32
 
Wödow2E«bÀd
 = 0;

159 
boﬁ8_32
 
övît
 = (
w
 == 5 &&

160 ((
c
 =1 && (
Mem‹y
.
FûlRAM
 [0x2130] & 0x30) == 0x10) ||

161 (
c
 =0 && (
Mem‹y
.
FûlRAM
 [0x2130] & 0xc0) == 0x40)));

163 i‡(
w
 == 5 ||

164 (
Mem‹y
.
FûlRAM
 [0x212¯+ 
c
] & Mem‹y.FûlRAM [0x212ê+ c] & (1 << 
w
)))

166 i‡(
PPU
.
ClùWödow1E«bÀ
 [
w
])

168 i‡(!
PPU
.
ClùWödow1Inside
 [
w
])

170 
Wö1
[
Wödow1E«bÀd
].
Le·
 = 
PPU
.
Wödow1Le·
;

171 
Wö1
[
Wödow1E«bÀd
++].
Right
 = 
PPU
.
Wödow1Right
 + 1;

175 i‡(
PPU
.
Wödow1Le·
 <PPU.
Wödow1Right
)

177 i‡(
PPU
.
Wödow1Le·
 > 0)

179 
Wö1
[
Wödow1E«bÀd
].
Le·
 = 0;

180 
Wö1
[
Wödow1E«bÀd
++].
Right
 = 
PPU
.
Wödow1Le·
;

182 i‡(
PPU
.
Wödow1Right
 < 255)

184 
Wö1
[
Wödow1E«bÀd
].
Le·
 = 
PPU
.
Wödow1Right
 + 1;

185 
Wö1
[
Wödow1E«bÀd
++].
Right
 = 256;

187 i‡(
Wödow1E«bÀd
 == 0)

189 
Wö1
[
Wödow1E«bÀd
].
Le·
 = 1;

190 
Wö1
[
Wödow1E«bÀd
++].
Right
 = 0;

197 
Wö1
[
Wödow1E«bÀd
].
Le·
 = 0;

198 
Wö1
[
Wödow1E«bÀd
++].
Right
 = 256;

202 i‡(
PPU
.
ClùWödow2E«bÀ
 [
w
])

204 i‡(!
PPU
.
ClùWödow2Inside
 [
w
])

206 
Wö2
[
Wödow2E«bÀd
].
Le·
 = 
PPU
.
Wödow2Le·
;

207 
Wö2
[
Wödow2E«bÀd
++].
Right
 = 
PPU
.
Wödow2Right
 + 1;

211 i‡(
PPU
.
Wödow2Le·
 <PPU.
Wödow2Right
)

213 i‡(
PPU
.
Wödow2Le·
 > 0)

215 
Wö2
[
Wödow2E«bÀd
].
Le·
 = 0;

216 
Wö2
[
Wödow2E«bÀd
++].
Right
 = 
PPU
.
Wödow2Le·
;

218 i‡(
PPU
.
Wödow2Right
 < 255)

220 
Wö2
[
Wödow2E«bÀd
].
Le·
 = 
PPU
.
Wödow2Right
 + 1;

221 
Wö2
[
Wödow2E«bÀd
++].
Right
 = 256;

223 i‡(
Wödow2E«bÀd
 == 0)

225 
Wö2
[
Wödow2E«bÀd
].
Le·
 = 1;

226 
Wö2
[
Wödow2E«bÀd
++].
Right
 = 0;

231 
Wö2
[
Wödow2E«bÀd
].
Le·
 = 0;

232 
Wö2
[
Wödow2E«bÀd
++].
Right
 = 256;

237 i‡(
Wödow1E«bÀd
 && 
Wödow2E«bÀd
)

246 
B™d
 
B™ds
 [6];

247 
B
 = 0;

248 
PPU
.
ClùWödowOvîœpLogic
 [
w
] ^ 1)

250 
CLIP_OR
:

251 i‡(
Wödow1E«bÀd
 == 1)

253 i‡(
	`BAND_EMPTY
(
Wö1
[0]))

255 
B
 = 
Wödow2E«bÀd
;

256 
	`memmove
 (
B™ds
, 
Wö2
,

257 (
Wö2
[0]Ë* 
Wödow2E«bÀd
);

261 i‡(
Wödow2E«bÀd
 == 1)

263 i‡(
	`BAND_EMPTY
 (
Wö2
[0]))

264 
B™ds
[
B
++] = 
Wö1
[0];

267 i‡(
	`BANDS_INTERSECT
 (
Wö1
[0], 
Wö2
[0]))

269 
	`OR_BANDS
(
B™ds
[0],
Wö1
[0], 
Wö2
[0])

270 
B
 = 1;

274 
B™ds
[
B
++] = 
Wö1
[0];

275 
B™ds
[
B
++] = 
Wö2
[0];

281 i‡(
	`BANDS_INTERSECT
(
Wö1
[0], 
Wö2
[0]))

283 
	`OR_BANDS
(
B™ds
[0], 
Wö1
[0], 
Wö2
[0])

284 i‡(
	`BANDS_INTERSECT
(
Wö1
[0], 
Wö2
[1]))

285 
	`OR_BANDS
(
B™ds
[1], 
Wö1
[0], 
Wö2
[1])

287 
B™ds
[1] = 
Wö2
[1];

288 
B
 = 1;

289 i‡(
	`BANDS_INTERSECT
(
B™ds
[0], Bands[1]))

290 
	`OR_BANDS
(
B™ds
[0], Bands[0], Bands[1])

292 
B
 = 2;

295 i‡(
	`BANDS_INTERSECT
(
Wö1
[0], 
Wö2
[1]))

297 
B™ds
[
B
++] = 
Wö2
[0];

298 
	`OR_BANDS
(
B™ds
[
B
], 
Wö1
[0], 
Wö2
[1]);

299 
B
++;

303 
B™ds
[0] = 
Wö2
[0];

304 
B™ds
[1] = 
Wö1
[0];

305 
B™ds
[2] = 
Wö2
[1];

306 
B
 = 3;

312 i‡(
Wödow2E«bÀd
 == 1)

314 i‡(
	`BAND_EMPTY
(
Wö2
[0]))

319 
B
 = 
Wödow1E«bÀd
;

320 
	`memmove
 (
B™ds
, 
Wö1
,

321 (
Wö1
[0]Ë* 
Wödow1E«bÀd
);

327 i‡(
	`BANDS_INTERSECT
(
Wö2
[0], 
Wö1
[0]))

329 
	`OR_BANDS
(
B™ds
[0], 
Wö2
[0], 
Wö1
[0])

330 i‡(
	`BANDS_INTERSECT
(
Wö2
[0], 
Wö1
[1]))

331 
	`OR_BANDS
(
B™ds
[1], 
Wö2
[0], 
Wö1
[1])

333 
B™ds
[1] = 
Wö1
[1];

334 
B
 = 1;

335 i‡(
	`BANDS_INTERSECT
(
B™ds
[0], Bands[1]))

336 
	`OR_BANDS
(
B™ds
[0], Bands[0], Bands[1])

338 
B
 = 2;

341 i‡(
	`BANDS_INTERSECT
(
Wö2
[0], 
Wö1
[1]))

343 
B™ds
[
B
++] = 
Wö1
[0];

344 
	`OR_BANDS
(
B™ds
[
B
], 
Wö2
[0], 
Wö1
[1]);

345 
B
++;

349 
B™ds
[0] = 
Wö1
[0];

350 
B™ds
[1] = 
Wö2
[0];

351 
B™ds
[2] = 
Wö1
[1];

352 
B
 = 3;

359 
	`OR_BANDS
(
B™ds
[0], 
Wö1
[0], 
Wö2
[0]);

360 
	`OR_BANDS
(
B™ds
[1], 
Wö1
[1], 
Wö2
[1]);

361 
B
 = 1;

362 i‡(
	`BANDS_INTERSECT
(
B™ds
[0], Bands[1]))

363 
	`OR_BANDS
(
B™ds
[0], Bands[0], Bands[1])

365 
B
 = 2;

369 
CLIP_AND
:

370 i‡(
Wödow1E«bÀd
 == 1)

373 i‡(
	`BAND_EMPTY
(
Wö1
[0]))

374 
B™ds
 [
B
++] = 
Wö1
[0];

376 i‡(
Wödow2E«bÀd
 == 1)

378 i‡(
	`BAND_EMPTY
 (
Wö2
[0]))

379 
B™ds
 [
B
++] = 
Wö2
[0];

382 
	`AND_BANDS
(
B™ds
[0], 
Wö1
[0], 
Wö2
[0]);

383 
B
 = 1;

388 
	`AND_BANDS
(
B™ds
[0], 
Wö1
[0], 
Wö2
[0]);

389 
	`AND_BANDS
(
B™ds
[1], 
Wö1
[0], 
Wö2
[1]);

390 
B
 = 2;

394 i‡(
Wödow2E«bÀd
 == 1)

396 i‡(
	`BAND_EMPTY
(
Wö2
[0]))

397 
B™ds
[
B
++] = 
Wö2
[0];

401 
	`AND_BANDS
(
B™ds
[0], 
Wö1
[0], 
Wö2
[0]);

402 
	`AND_BANDS
(
B™ds
[1], 
Wö1
[1], 
Wö2
[0]);

403 
B
 = 2;

409 
	`AND_BANDS
(
B™ds
[0], 
Wö1
[0], 
Wö2
[0]);

410 
	`AND_BANDS
(
B™ds
[1], 
Wö1
[1], 
Wö2
[1]);

411 
B
 = 2;

412 i‡(
	`BANDS_INTERSECT
(
Wö1
[0], 
Wö2
[1]))

414 
	`AND_BANDS
(
B™ds
[2], 
Wö1
[0], 
Wö2
[1]);

415 
B
 = 3;

418 i‡(
	`BANDS_INTERSECT
(
Wö1
[1], 
Wö2
[0]))

420 
	`AND_BANDS
(
B™ds
[2], 
Wö1
[1], 
Wö2
[0]);

421 
B
 = 3;

425 
CLIP_XNOR
:

426 
övît
 = !invert;

429 
CLIP_XOR
:

430 i‡(
Wödow1E«bÀd
 =1 && 
	`BAND_EMPTY
(
Wö1
[0]))

432 
B
 = 
Wödow2E«bÀd
;

433 
	`memmove
 (
B™ds
, 
Wö2
,

434 (
Wö2
[0]Ë* 
Wödow2E«bÀd
);

437 i‡(
Wödow2E«bÀd
 =1 && 
	`BAND_EMPTY
(
Wö2
[0]))

439 
B
 = 
Wödow1E«bÀd
;

440 
	`memmove
 (
B™ds
, 
Wö1
,

441 (
Wö1
[0]Ë* 
Wödow1E«bÀd
);

445 
uöt32
 
p
 = 0;

446 
uöt32
 
poöts
 [10];

447 
uöt32
 
i
;

449 
övît
 = !invert;

451 
poöts
 [
p
++] = 0;

452 
i
 = 0; i < 
Wödow1E«bÀd
; i++)

454 
poöts
 [
p
++] = 
Wö1
[
i
].
Le·
;

455 
poöts
 [
p
++] = 
Wö1
[
i
].
Right
;

457 
i
 = 0; i < 
Wödow2E«bÀd
; i++)

459 
poöts
 [
p
++] = 
Wö2
[
i
].
Le·
;

460 
poöts
 [
p
++] = 
Wö2
[
i
].
Right
;

462 
poöts
 [
p
++] = 256;

464 
	`qs‹t
 ((*Ë
poöts
, 
p
,  (points [0]),

465 
I¡Com∑ª
);

466 
i
 = 0; i < 
p
; i += 2)

468 i‡(
poöts
 [
i
] ==Öoints [i + 1])

470 
B™ds
 [
B
].
Le·
 = 
poöts
 [
i
];

471 
i
 + 2 < 
p
 &&

472 
poöts
 [
i
 + 1] ==Öoints [i + 2])

474 
i
 += 2;

476 
B™ds
 [
B
++].
Right
 = 
poöts
 [
i
 + 1];

481 i‡(
övît
)

483 
b
;

484 
j
 = 0;

485 
em±y_b™d_cou¡
 = 0;

488 
b
 = 0; b < 
B
; b++)

490 i‡(!
	`BAND_EMPTY
(
B™ds
[
b
]))

492 i‡(
b
 !
j
)

493 
B™ds
[
j
] = B™ds[
b
];

494 
j
++;

497 
em±y_b™d_cou¡
++;

500 i‡(
j
 > 0)

502 i‡(
j
 == 1)

504 
j
 = 0;

507 i‡(
B™ds
[0].
Le·
 > 0)

509 
pClù
->
Le·
[
j
][
w
] = 0;

510 
pClù
->
Right
[
j
++][
w
] = 
B™ds
[0].
Le·
 + 1;

512 i‡(
B™ds
[0].
Right
 < 256)

514 
pClù
->
Le·
[
j
][
w
] = 
B™ds
[0].
Right
;

515 
pClù
->
Right
[
j
++][
w
] = 256;

517 i‡(
j
 == 0)

519 
pClù
->
Le·
[
j
][
w
] = 1;

520 
pClù
->
Right
[
j
++][
w
] = 0;

526 
B
 = 
j
;

527 
	`qs‹t
 ((*Ë
B™ds
, 
B
,

528  (
B™ds
 [0]), 
B™dCom∑ª
);

531 
j
 = 0;

532 
b
 = 0; b < 
B
; b++)

534 i‡(
b
 =0 && 
B™ds
[b].
Le·
 > 0)

536 
pClù
->
Le·
[
j
][
w
] = 0;

537 
pClù
->
Right
[
j
++][
w
] = 
B™ds
[
b
].
Le·
 + 1;

540 i‡(
b
 =
B
 - 1 && 
B™ds
[b].
Right
 < 256)

542 
pClù
->
Le·
[
j
][
w
] = 
B™ds
[
b
].
Right
;

543 
pClù
->
Right
[
j
++][
w
] = 256;

545 i‡(
b
 < 
B
 - 1)

547 
pClù
->
Le·
[
j
][
w
] = 
B™ds
[
b
].
Right
;

548 
pClù
->
Right
[
j
++][
w
] = 
B™ds
[
b
 + 1].
Le·
 + 1;

558 i‡(
em±y_b™d_cou¡
)

560 
pClù
->
Le·
[
j
][
w
] = 0;

561 
pClù
->
Right
[
j
][
w
] = 256;

562 
j
++;

565 
pClù
->
Cou¡
[
w
] = 
j
;

569 
j
 = 0; j < 
B
; j++)

571 
pClù
->
Le·
[
j
][
w
] = 
B™ds
[j].Left;

572 
pClù
->
Right
[
j
][
w
] = 
B™ds
[j].Right;

574 
pClù
->
Cou¡
 [
w
] = 
B
;

582 i‡(
Wödow1E«bÀd
)

584 i‡(
övît
)

586 
j
 = 0;

588 i‡(
Wödow1E«bÀd
 == 1)

590 i‡(
Wö1
[0].
Le·
 <Wö1[0].
Right
)

592 i‡(
Wö1
[0].
Le·
 > 0)

594 
pClù
->
Le·
[
j
][
w
] = 0;

595 
pClù
->
Right
[
j
++][
w
] = 
Wö1
[0].
Le·
;

597 i‡(
Wö1
[0].
Right
 < 256)

599 
pClù
->
Le·
[
j
][
w
] = 
Wö1
[0].
Right
;

600 
pClù
->
Right
[
j
++][
w
] = 256;

602 i‡(
j
 == 0)

604 
pClù
->
Le·
[
j
][
w
] = 1;

605 
pClù
->
Right
[
j
++][
w
] = 0;

610 
pClù
->
Le·
[
j
][
w
] = 0;

611 
pClù
->
Right
[
j
++][
w
] = 256;

616 
pClù
->
Le·
 [
j
][
w
] = 
Wö1
[0].
Right
;

617 
pClù
->
Right
[
j
++][
w
] = 
Wö1
[1].
Le·
;

619 
pClù
->
Cou¡
 [
w
] = 
j
;

623 
uöt32
 
j
 = 0; j < 
Wödow1E«bÀd
; j++)

625 
pClù
->
Le·
 [
j
][
w
] = 
Wö1
[j].Left;

626 
pClù
->
Right
 [
j
][
w
] = 
Wö1
[j].Right;

628 
pClù
->
Cou¡
 [
w
] = 
Wödow1E«bÀd
;

632 i‡(
Wödow2E«bÀd
)

634 i‡(
övît
)

636 
j
 = 0;

637 i‡(
Wödow2E«bÀd
 == 1)

639 i‡(
Wö2
[0].
Le·
 <Wö2[0].
Right
)

641 i‡(
Wö2
[0].
Le·
 > 0)

643 
pClù
->
Le·
[
j
][
w
] = 0;

644 
pClù
->
Right
[
j
++][
w
] = 
Wö2
[0].
Le·
;

646 i‡(
Wö2
[0].
Right
 < 256)

648 
pClù
->
Le·
[
j
][
w
] = 
Wö2
[0].
Right
;

649 
pClù
->
Right
[
j
++][
w
] = 256;

651 i‡(
j
 == 0)

653 
pClù
->
Le·
[
j
][
w
] = 1;

654 
pClù
->
Right
[
j
++][
w
] = 0;

659 
pClù
->
Le·
[
j
][
w
] = 0;

660 
pClù
->
Right
[
j
++][
w
] = 256;

665 
pClù
->
Le·
 [
j
][
w
] = 
Wö2
[0].
Right
;

666 
pClù
->
Right
[
j
++][
w
] = 
Wö2
[1].
Le·
 + 1;

668 
pClù
->
Cou¡
 [
w
] = 
j
;

672 
uöt32
 
j
 = 0; j < 
Wödow2E«bÀd
; j++)

674 
pClù
->
Le·
 [
j
][
w
] = 
Wö2
[j].Left;

675 
pClù
->
Right
 [
j
][
w
] = 
Wö2
[j].Right;

677 
pClù
->
Cou¡
 [
w
] = 
Wödow2E«bÀd
;

682 i‡(
w
 != 5)

684 i‡(
pClù
->
Cou¡
 [5])

689 i‡(
pClù
->
Cou¡
 [
w
] == 0)

691 
pClù
->
Cou¡
 [
w
] =ÖClip->Count [5];

692 
uöt32
 
i
 = 0; i < 
pClù
->
Cou¡
 [
w
]; i++)

694 
pClù
->
Le·
 [
i
][
w
] =ÖClip->Left [i][5];

695 
pClù
->
Right
 [
i
][
w
] =ÖClip->Right [i][5];

702 
uöt32
 
i
 = 0; i < 
pClù
->
Cou¡
 [
w
]; i++)

704 
uöt32
 
j
;

705 
j
 = 0; j < 
pClù
->
Cou¡
 [5]; j++)

707 if((
pClù
->
Le·
[
i
][
w
] >pClù->Le·[
j
][5] &&ÖClù->Le·[i][w] <ÖClù->
Right
[j][5]) || (pClip->Left[j][5] >=ÖClip->Left[i][w] &&ÖClip->Left[j][5] <ÖClip->Right[i][w])){

709 
pClù
->
Le·
[
i
][
w
]=
	`MAX
’Clù->Le·[i][w],ÖClù->Le·[
j
][5]);

710 
pClù
->
Right
[
i
][
w
]=
	`MIN
’Clù->Right[i][w],ÖClù->Right[
j
][5]);

711 
Clù_ok
;

715 
pClù
->
Le·
[
i
][
w
]=1;

716 
pClù
->
Right
[
i
][
w
]=0;

717 
Clù_ok
:

718 
j
=0;

727 
	}
}

	@copyright.h

	@cpu.cpp

41 
	~"¢es9x.h
"

42 
	~"memm≠.h
"

43 
	~"µu.h
"

44 
	~"d•1.h
"

45 
	~"˝uexec.h
"

46 
	~"debug.h
"

47 
	~"≠u.h
"

48 
	~"dma.h
"

49 #ifde‡
USE_SA1


50 
	~"ß1.h
"

53 
	~"§tc.h
"

54 
	~"sdd1.h
"

57 
	~"soundux.h
"

59 #ifde‡
SUPER_FX


60 
	~"fxemu.h
"

62 
FxInô_s
 
Su≥rFX
;

64 
	$S9xRe£tSu≥rFX
 ()

66 
Su≥rFX
.
vFœgs
 = 0;

67 
	`FxRe£t
 (&
Su≥rFX
);

68 
	}
}

71 
	$S9xRe£tCPU
 ()

73 
Regi°îs
.
PB
 = 0;

74 
Regi°îs
.
PC
 = 
	`S9xGëW‹d
 (0xFFFC);

75 
Regi°îs
.
D
.
W
 = 0;

76 
Regi°îs
.
DB
 = 0;

77 
Regi°îs
.
SH
 = 1;

78 
Regi°îs
.
SL
 = 0xFF;

79 
Regi°îs
.
XH
 = 0;

80 
Regi°îs
.
YH
 = 0;

81 
Regi°îs
.
P
.
W
 = 0;

83 
ICPU
.
Shi·edPB
 = 0;

84 
ICPU
.
Shi·edDB
 = 0;

85 
	`SëFœgs
 (
Mem‹yFœg
 | 
IndexFœg
 | 
IRQ
 | 
Emuœti⁄
);

86 
	`CÀ¨Fœgs
 (
DecimÆ
);

88 
CPU
.
Fœgs
 = CPU.Fœg†& (
DEBUG_MODE_FLAG
 | 
TRACE_FLAG
);

89 
CPU
.
BønchSkù
 = 
FALSE
;

90 
CPU
.
NMIA˘ive
 = 
FALSE
;

91 
CPU
.
IRQA˘ive
 = 
FALSE
;

92 
CPU
.
WaôögF‹I¡îru±
 = 
FALSE
;

93 
CPU
.
InDMA
 = 
FALSE
;

94 
CPU
.
WhichEvít
 = 
HBLANK_START_EVENT
;

95 
CPU
.
PC
 = 
NULL
;

96 
CPU
.
PCBa£
 = 
NULL
;

97 
CPU
.
PCAtOpcodeSèπ
 = 
NULL
;

98 
CPU
.
WaôAddªss
 = 
NULL
;

99 
CPU
.
WaôCou¡î
 = 0;

100 
CPU
.
Cy˛es
 = 0;

101 
CPU
.
NextEvít
 = 
Sëtögs
.
HBœnkSèπ
;

102 
CPU
.
V_Cou¡î
 = 0;

103 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

104 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

105 
CPU
.
Fa°ROMS≥ed
 = 
SLOW_ONE_CYCLE
;

106 
CPU
.
AutoSaveTimî
 = 0;

107 
CPU
.
SRAMModifõd
 = 
FALSE
;

109 
CPU
.
BRKTriggîed
 = 
FALSE
;

111 
CPU
.
NMICy˛eCou¡
 = 0;

112 
CPU
.
IRQCy˛eCou¡
 = 0;

113 
	`S9xSëPCBa£
 (
Regi°îs
.
PC
);

115 #i‚de‡
VAR_CYCLES


119 
ICPU
.
CPUExecutög
 = 
TRUE
;

122 
	}
}

125 
	$S9xRe£t
 ()

127 #ifde‡
SUPER_FX


128 i‡(
Sëtögs
.
Su≥rFX
)

129 
	`S9xRe£tSu≥rFX
 ();

132 
	`ZîoMem‹y
 (
Mem‹y
.
FûlRAM
, 0x8000);

133 
	`mem£t
 (
Mem‹y
.
VRAM
, 0x00, 0x10000);

134 
	`mem£t
 (
Mem‹y
.
RAM
, 0x55, 0x20000);

138 
	`S9xRe£tCPU
 ();

139 
	`S9xRe£tPPU
 ();

140 
	`S9xRe£tSRTC
 ();

141 i‡(
Sëtögs
.
SDD1
)

142 
	`S9xRe£tSDD1
 ();

144 
	`S9xRe£tDMA
 ();

145 
	`S9xRe£tAPU
 ();

146 
	`S9xRe£tDSP1
 ();

147 #ifde‡
USE_SA1


148 
	`S9xSA1Inô
 ();

151 i‡(
Sëtögs
.
C4
)

152 
	`S9xInôC4
 ();

154 
	`S9xRe£tSound
(1);

156 
Sëtögs
.
Pau£d
 = 
FALSE
;

159 
CPU
.
Mem‹y_M≠
=(
uöt8
*)&(
Mem‹y
.
M≠
);

160 
CPU
.
Mem‹y_WrôeM≠
=(
uöt8
*)&(
Mem‹y
.
WrôeM≠
);

161 
CPU
.
Mem‹y_Mem‹yS≥ed
=(
uöt8
*)&(
Mem‹y
.
Mem‹yS≥ed
);

162 
CPU
.
Mem‹y_BlockIsRAM
=(
uöt8
*)&(
Mem‹y
.
BlockIsRAM
);

163 
CPU
.
Mem‹y_SRAM
=
Mem‹y
.
SRAM
;

164 
CPU
.
Mem‹y_BWRAM
=
Mem‹y
.
BWRAM
;

167 
	}
}

	@cpuaddr.h

41 #i‚de‡
_CPUADDR_H_


42 
	#_CPUADDR_H_


	)

46 
STATIC
 
INLINE
 
FASTCALL
 
	$Immedüã8
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

48 
OpAddªss
 = 
i˝u
->
Shi·edPB
 + 
˝u
->
PC
 - cpu->
PCBa£
;

49 
˝u
->
PC
++;

50  
OpAddªss
;

51 
	}
}

53 
STATIC
 
INLINE
 
FASTCALL
 
	$Immedüã16
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

55 
OpAddªss
 = 
i˝u
->
Shi·edPB
 + 
˝u
->
PC
 - cpu->
PCBa£
;

56 
˝u
->
PC
 += 2;

57  
OpAddªss
;

58 
	}
}

60 
STATIC
 
INLINE
 
FASTCALL
 
	$Rñ©ive
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

62 
öt8
 
I¡8
 = *
˝u
->
PC
++;

63 #ifde‡
VAR_CYCLES


64 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

66  ((Ë(
˝u
->
PC
 - cpu->
PCBa£
Ë+ 
I¡8
) & 0xffff;

67 
	}
}

69 
STATIC
 
INLINE
 
FASTCALL
 
	$Rñ©iveL⁄g
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

71 #ifde‡
FAST_LSB_WORD_ACCESS


72 
OpAddªss
 = *(
uöt16
 *Ë
˝u
->
PC
;

74 
OpAddªss
 = *
˝u
->
PC
 + (*(cpu->PC + 1) << 8);

76 #ifde‡
VAR_CYCLES


77 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
 + 
ONE_CYCLE
;

79 
˝u
->
PC
 += 2;

80 
OpAddªss
 +(
˝u
->
PC
 - cpu->
PCBa£
);

81 
OpAddªss
 &= 0xffff;

82  
OpAddªss
;

83 
	}
}

85 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãIndexedIndúe˘
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

87 #ifde‡
FAST_LSB_WORD_ACCESS


88 
OpAddªss
 = (
ªg
->
X
.
W
 + *(
uöt16
 *Ë
˝u
->
PC
) & 0xffff;

90 
OpAddªss
 = (
ªg
->
X
.
W
 + *
˝u
->
PC
 + (*(cpu->PC + 1) << 8)) & 0xffff;

92 #ifde‡
VAR_CYCLES


93 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
;

95 
˝u
->
PC
 += 2;

96  
	`S9xGëW‹d
 (
i˝u
->
Shi·edPB
 + 
OpAddªss
, 
˝u
);

97 
	}
}

99 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãIndúe˘L⁄g
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

101 #ifde‡
FAST_LSB_WORD_ACCESS


102 
OpAddªss
 = *(
uöt16
 *Ë
˝u
->
PC
;

104 
OpAddªss
 = *
˝u
->
PC
 + (*(cpu->PC + 1) << 8);

107 #ifde‡
VAR_CYCLES


108 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
;

110 
˝u
->
PC
 += 2;

111  
	`S9xGëW‹d
 (
OpAddªss
, 
˝u
Ë| (
	`S9xGëByã
 (OpAddress + 2, cpu) << 16);

112 
	}
}

114 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãIndúe˘
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

116 #ifde‡
FAST_LSB_WORD_ACCESS


117 
OpAddªss
 = *(
uöt16
 *Ë
˝u
->
PC
;

119 
OpAddªss
 = *
˝u
->
PC
 + (*(cpu->PC + 1) << 8);

122 #ifde‡
VAR_CYCLES


123 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
;

125 
˝u
->
PC
 += 2;

126  
	`S9xGëW‹d
 (
OpAddªss
, 
˝u
Ë+ 
i˝u
->
Shi·edPB
;

127 
	}
}

129 
STATIC
 
INLINE
 
FASTCALL
 
	$Absﬁuã
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

131 #ifde‡
FAST_LSB_WORD_ACCESS


132 
OpAddªss
 = *(
uöt16
 *Ë
˝u
->
PC
 + 
i˝u
->
Shi·edDB
;

134 
OpAddªss
 = *
˝u
->
PC
 + (*(˝u->PC + 1Ë<< 8Ë+ 
i˝u
->
Shi·edDB
;

136 
˝u
->
PC
 += 2;

137 #ifde‡
VAR_CYCLES


138 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
;

140  
OpAddªss
;

141 
	}
}

143 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãL⁄g
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

145 #ifde‡
FAST_LSB_WORD_ACCESS


146 
OpAddªss
 = (*(
uöt32
 *Ë
˝u
->
PC
) & 0xffffff;

148 
OpAddªss
 = *
˝u
->
PC
 + (*(cpu->PC + 1) << 8) + (*(cpu->PC + 2) << 16);

150 
˝u
->
PC
 += 3;

151 #ifde‡
VAR_CYCLES


152 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
 + cpu->
MemS≥ed
;

154  
OpAddªss
;

155 
	}
}

157 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘
(
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

159 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
) & 0xffff;

160 #ifde‡
VAR_CYCLES


161 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

164  
OpAddªss
;

165 
	}
}

167 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘Indúe˘Indexed
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

169 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
) & 0xffff;

170 #ifde‡
VAR_CYCLES


171 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

174 
OpAddªss
 = 
i˝u
->
Shi·edDB
 + 
	`S9xGëW‹d
 (OpAddªss, 
˝u
Ë+ 
ªg
->
Y
.
W
;

179  
OpAddªss
;

180 
	}
}

182 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘Indúe˘IndexedL⁄g
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

184 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
) & 0xffff;

185 #ifde‡
VAR_CYCLES


186 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

189 
OpAddªss
 = 
	`S9xGëW‹d
 (OpAddªss, 
˝u
Ë+ (
	`S9xGëByã
 (OpAddress + 2, cpu) << 16) +

190 
ªg
->
Y
.
W
;

192  
OpAddªss
;

193 
	}
}

195 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘IndexedIndúe˘
(
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

197 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
 +Ñeg->
X
.W) & 0xffff;

198 #ifde‡
VAR_CYCLES


199 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

202 
OpAddªss
 = 
	`S9xGëW‹d
 (OpAddªss, 
˝u
Ë+ 
i˝u
->
Shi·edDB
;

204 #ifde‡
VAR_CYCLES


208 
˝u
->
Cy˛es
 +
ONE_CYCLE
;

210  
OpAddªss
;

211 
	}
}

213 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘IndexedX
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

215 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
 +Ñeg->
X
.W) & 0xffff;

216 #ifde‡
VAR_CYCLES


217 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

220 #ifde‡
VAR_CYCLES


224 
˝u
->
Cy˛es
 +
ONE_CYCLE
;

226  
OpAddªss
;

227 
	}
}

229 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘IndexedY
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

231 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
 +Ñeg->
Y
.W) & 0xffff;

232 #ifde‡
VAR_CYCLES


233 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

236 #ifde‡
VAR_CYCLES


240 
˝u
->
Cy˛es
 +
ONE_CYCLE
;

242  
OpAddªss
;

243 
	}
}

245 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãIndexedX
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

247 #ifde‡
FAST_LSB_WORD_ACCESS


248 
OpAddªss
 = 
i˝u
->
Shi·edDB
 + *(
uöt16
 *Ë
˝u
->
PC
 + 
ªg
->
X
.
W
;

250 
OpAddªss
 = 
i˝u
->
Shi·edDB
 + *
˝u
->
PC
 + (*(cpu->PC + 1) << 8) +

251 
ªg
->
X
.
W
;

253 
˝u
->
PC
 += 2;

254 #ifde‡
VAR_CYCLES


255 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
;

259  
OpAddªss
;

260 
	}
}

262 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãIndexedY
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

264 #ifde‡
FAST_LSB_WORD_ACCESS


265 
OpAddªss
 = 
i˝u
->
Shi·edDB
 + *(
uöt16
 *Ë
˝u
->
PC
 + 
ªg
->
Y
.
W
;

267 
OpAddªss
 = 
i˝u
->
Shi·edDB
 + *
˝u
->
PC
 + (*(cpu->PC + 1) << 8) +

268 
ªg
->
Y
.
W
;

270 
˝u
->
PC
 += 2;

271 #ifde‡
VAR_CYCLES


272 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
;

276  
OpAddªss
;

277 
	}
}

279 
STATIC
 
INLINE
 
FASTCALL
 
	$AbsﬁuãL⁄gIndexedX
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

281 #ifde‡
FAST_LSB_WORD_ACCESS


282 
OpAddªss
 = (*(
uöt32
 *Ë
˝u
->
PC
 + 
ªg
->
X
.
W
) & 0xffffff;

284 
OpAddªss
 = (*
˝u
->
PC
 + (*(˝u->PC + 1Ë<< 8Ë+ (*(˝u->PC + 2Ë<< 16Ë+ 
ªg
->
X
.
W
) & 0xffffff;

286 
˝u
->
PC
 += 3;

287 #ifde‡
VAR_CYCLES


288 
˝u
->
Cy˛es
 +˝u->
MemS≥edx2
 + cpu->
MemS≥ed
;

290  
OpAddªss
;

291 
	}
}

293 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘Indúe˘
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

295 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
) & 0xffff;

296 #ifde‡
VAR_CYCLES


297 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

299 
OpAddªss
 = 
	`S9xGëW‹d
 (OpAddªss, 
˝u
Ë+ 
i˝u
->
Shi·edDB
;

302  
OpAddªss
;

303 
	}
}

305 
STATIC
 
INLINE
 
FASTCALL
 
	$Dúe˘Indúe˘L⁄g
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

307 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
D
.
W
) & 0xffff;

308 #ifde‡
VAR_CYCLES


309 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

311 
OpAddªss
 = 
	`S9xGëW‹d
 (OpAddªss, 
˝u
) +

312 (
	`S9xGëByã
 (
OpAddªss
 + 2, 
˝u
) << 16);

314  
OpAddªss
;

315 
	}
}

317 
STATIC
 
INLINE
 
FASTCALL
 
	$SèckRñ©ive
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

319 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
S
.
W
) & 0xffff;

320 #ifde‡
VAR_CYCLES


321 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

322 
˝u
->
Cy˛es
 +
ONE_CYCLE
;

324  
OpAddªss
;

325 
	}
}

327 
STATIC
 
INLINE
 
FASTCALL
 
	$SèckRñ©iveIndúe˘Indexed
 (
SRegi°îs
 * 
ªg
, 
SICPU
 * 
i˝u
, 
SCPUSèã
 * 
˝u
)

329 
OpAddªss
 = (*
˝u
->
PC
++ + 
ªg
->
S
.
W
) & 0xffff;

330 #ifde‡
VAR_CYCLES


331 
˝u
->
Cy˛es
 +˝u->
MemS≥ed
;

332 
˝u
->
Cy˛es
 +
TWO_CYCLES
;

334 
OpAddªss
 = (
	`S9xGëW‹d
 (OpAddªss, 
˝u
Ë+ 
i˝u
->
Shi·edDB
 +

335 
ªg
->
Y
.
W
) & 0xffffff;

336  
OpAddªss
;

337 
	}
}

	@cpuexec.cpp

44 
	~"¢es9x.h
"

46 
	~"memm≠.h
"

48 
	~"µu.h
"

49 
	~"˝uexec.h
"

50 
	~"debug.h
"

51 
	~"¢≠shŸ.h
"

52 
	~"gfx.h
"

53 
	~"missög.h
"

54 
	~"≠u.h
"

55 
	~"dma.h
"

56 
	~"fxemu.h
"

57 #ifde‡
USE_SA1


58 
	~"ß1.h
"

62 
	~"os9x_asm_˝u.h
"

66 
uöt16
 
	gmem_check
=0;

69 #i‡
deföed
(
__show‰ame__
)

70 
	g‰ame˝t
=0;

74 
	$S9xMaöLo›
 ()

76 #i‡
	`deföed
(
__show‰ame__
)

77 
‰ame˝t
++;

78 
°ø
[64];

79 
	`•rötf
(
°ø
,"‰ame˝à: %d",
‰ame˝t
);

80 
	`S9xMesßge
(0,0,
°ø
);

84 
	`asmMaöLo›
(&
CPU
);

86 
Regi°îs
.
PC
 = 
CPU
.PC - CPU.
PCBa£
;

88 
	`S9xAPUPackSètus
 ();

90 i‡(
CPU
.
Fœgs
 & 
SCAN_KEYS_FLAG
)

92 
CPU
.
Fœgs
 &~
SCAN_KEYS_FLAG
;

95 i‡(
CPU
.
BRKTriggîed
 && 
Sëtögs
.
Su≥rFX
 && !CPU.
TrõdI¡îÀavedMode2
)

97 
CPU
.
TrõdI¡îÀavedMode2
 = 
TRUE
;

98 
CPU
.
BRKTriggîed
 = 
FALSE
;

99 
	`S9xDeöãæóveMode2
 ();

101 
	}
}

103 
	$S9xSëIRQ
 (
uöt32
 
sour˚
)

105 
CPU
.
IRQA˘ive
 |
sour˚
;

106 
CPU
.
Fœgs
 |
IRQ_PENDING_FLAG
;

107 
CPU
.
IRQCy˛eCou¡
 = 3;

108 i‡(
CPU
.
WaôögF‹I¡îru±
)

112 
CPU
.
IRQCy˛eCou¡
 = 0;

113 
CPU
.
WaôögF‹I¡îru±
 = 
FALSE
;

114 
CPU
.
PC
++;

116 
	}
}

118 
	$S9xCÀ¨IRQ
 (
uöt32
 
sour˚
)

120 
	`CLEAR_IRQ_SOURCE
 (
sour˚
);

121 
	}
}

124 
	$S9xDoHBœnkPro˚ssög
 ()

126 #ifde‡
CPU_SHUTDOWN


127 
CPU
.
WaôCou¡î
++;

129 
CPU
.
WhichEvít
)

131 
HBLANK_START_EVENT
:

132 i‡(
IPPU
.
HDMA
 && 
CPU
.
V_Cou¡î
 <
PPU
.
S¸ìnHeight
)

133 
IPPU
.
HDMA
 = 
	`S9xDoHDMA
 (IPPU.HDMA);

136 
HBLANK_END_EVENT
:

137 
	`APU_EXECUTE
(3);

139 if(
Sëtögs
.
Su≥rFX
)

140 
	`S9xSu≥rFXExec
 ();

142 
CPU
.
Cy˛es
 -
Sëtögs
.
H_Max
;

143 i‡–
CPU
.
APU_APUExecutög
)

144 
CPU
.
APU_Cy˛es
 -
Sëtögs
.
H_Max
;

146 
CPU
.
APU_Cy˛es
 = 0;

148 
CPU
.
NextEvít
 = -1;

149 
ICPU
.
Sˇ∆öe
++;

151 i‡(++
CPU
.
V_Cou¡î
 > (
Sëtögs
.
PAL
 ? 
SNES_MAX_PAL_VCOUNTER
 : 
SNES_MAX_NTSC_VCOUNTER
))

153 
PPU
.
OAMAddr
 = PPU.
SavedOAMAddr
;

154 
PPU
.
OAMFlù
 = 0;

155 
CPU
.
V_Cou¡î
 = 0;

156 
CPU
.
NMIA˘ive
 = 
FALSE
;

157 
ICPU
.
Føme
++;

158 
PPU
.
HVBómCou¡îL©ched
 = 0;

159 
CPU
.
Fœgs
 |
SCAN_KEYS_FLAG
;

160 
	`S9xSèπHDMA
 ();

163 i‡(
PPU
.
VTimîE«bÀd
 && !PPU.
HTimîE«bÀd
 &&

164 
CPU
.
V_Cou¡î
 =
PPU
.
IRQVBómPos
)

166 
	`S9xSëIRQ
 (
PPU_V_BEAM_IRQ_SOURCE
);

169 i‡(
CPU
.
V_Cou¡î
 =
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE
)

172 
	`S9xEndS¸ìnRe‰esh
 ();

173 
PPU
.
Fú°S¥ôe
 = 0;

174 
IPPU
.
HDMA
 = 0;

176 
missög
.
dma_this_‰ame
 = 0;

177 
IPPU
.
MaxBrighäess
 = 
PPU
.
Brighäess
;

178 
PPU
.
F‹˚dBœnkög
 = (
Mem‹y
.
FûlRAM
 [0x2100] >> 7) & 1;

180 
Mem‹y
.
FûlRAM
[0x4210] = 0x80;

181 i‡(
Mem‹y
.
FûlRAM
[0x4200] & 0x80)

183 
CPU
.
NMIA˘ive
 = 
TRUE
;

184 
CPU
.
Fœgs
 |
NMI_FLAG
;

185 
CPU
.
NMICy˛eCou¡
 = CPU.
NMITriggîPoöt
;

188 #ifde‡
OLD_SNAPSHOT_CODE


189 i‡(
CPU
.
Fœgs
 & 
SAVE_SNAPSHOT_FLAG
)

191 
CPU
.
Fœgs
 &~
SAVE_SNAPSHOT_FLAG
;

192 
Regi°îs
.
PC
 = 
CPU
.PC - CPU.
PCBa£
;

194 
	`S9xAPUPackSètus
 ();

195 
	`S«pshŸ
 (
NULL
);

200 i‡(
CPU
.
V_Cou¡î
 =
PPU
.
S¸ìnHeight
 + 3)

201 
	`S9xUpd©eJoy∑ds
 ();

203 i‡(
CPU
.
V_Cou¡î
 =
FIRST_VISIBLE_LINE
)

205 
Mem‹y
.
FûlRAM
[0x4210] = 0;

206 
CPU
.
Fœgs
 &~
NMI_FLAG
;

207 
	`S9xSèπS¸ìnRe‰esh
 ();

209 i‡(
CPU
.
V_Cou¡î
 >
FIRST_VISIBLE_LINE
 &&

210 
CPU
.
V_Cou¡î
 < 
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE
)

212 
	`RídîLöe
 (
CPU
.
V_Cou¡î
 - 
FIRST_VISIBLE_LINE
);

224 i‡(
APU
.
TimîE«bÀd
 [2])

226 
APU
.
Timî
 [2] += 4;

227 
APU
.
Timî
 [2] >APU.
TimîT¨gë
 [2])

229 
IAPU
.
RAM
 [0xff] = (IAPU.RAM [0xff] + 1) & 0xf;

230 
APU
.
Timî
 [2] -APU.
TimîT¨gë
 [2];

231 #ifde‡
SPC700_SHUTDOWN


232 
IAPU
.
WaôCou¡î
++;

233  
CPU
.
APU_APUExecutög

TRUE
;

237 i‡(
CPU
.
V_Cou¡î
 & 1)

239 i‡(
APU
.
TimîE«bÀd
 [0])

241 
APU
.
Timî
 [0]++;

242 i‡(
APU
.
Timî
 [0] >APU.
TimîT¨gë
 [0])

244 
IAPU
.
RAM
 [0xfd] = (IAPU.RAM [0xfd] + 1) & 0xf;

245 
APU
.
Timî
 [0] = 0;

246 #ifde‡
SPC700_SHUTDOWN


247 
IAPU
.
WaôCou¡î
++;

248  
CPU
.
APU_APUExecutög
 = 
TRUE
;

252 i‡(
APU
.
TimîE«bÀd
 [1])

254 
APU
.
Timî
 [1]++;

255 i‡(
APU
.
Timî
 [1] >APU.
TimîT¨gë
 [1])

257 
IAPU
.
RAM
 [0xfe] = (IAPU.RAM [0xfe] + 1) & 0xf;

258 
APU
.
Timî
 [1] = 0;

259 #ifde‡
SPC700_SHUTDOWN


260 
IAPU
.
WaôCou¡î
++;

261  
CPU
.
APU_APUExecutög
 = 
TRUE
;

268 
HTIMER_BEFORE_EVENT
:

269 
HTIMER_AFTER_EVENT
:

270 i‡(
PPU
.
HTimîE«bÀd
 &&

271 (!
PPU
.
VTimîE«bÀd
 || 
CPU
.
V_Cou¡î
 =PPU.
IRQVBómPos
))

273 
	`S9xSëIRQ
 (
PPU_H_BEAM_IRQ_SOURCE
);

277 
	`S9xRescheduÀ
 ();

278 
	}
}

	@cpuexec.h

41 #i‚de‡
_CPUEXEC_H_


42 
	#_CPUEXEC_H_


	)

43 
	~"µu.h
"

44 
	~"memm≠.h
"

45 
	~"65c816.h
"

47 
	#DO_HBLANK_CHECK
(Ë\

	)

48 i‡(
	gCPU
.
	gCy˛es
 >
CPU
.
NextEvít
) \

49 
S9xDoHBœnkPro˚ssög
 ();

51 
	sSOpcodes
 {

52 #ifde‡
__WIN32__


53 (
__cde˛
 *
	mS9xOpcode
)( );

55 (*
	mS9xOpcode
)( );

59 
	sSICPU


69 
boﬁ8
 
	mCPUExecutög
;

70 
uöt32
 
	mShi·edPB
;

71 
uöt32
 
	mShi·edDB
;

72 
uöt32
 
	mFøme
;

73 
uöt32
 
	mSˇ∆öe
;

74 
uöt32
 
	mFømeAdv™˚Cou¡
;

77 
START_EXTERN_C


78 
S9xMaöLo›
 ();

79 
S9xRe£t
 ();

80 
S9xDoHBœnkPro˚ssög
 ();

81 
S9xCÀ¨IRQ
 (
uöt32
);

82 
S9xSëIRQ
 (
uöt32
);

84 
SOpcodes
 
S9xOpcodesM1X1
 [256];

85 
SOpcodes
 
S9xOpcodesM1X0
 [256];

86 
SOpcodes
 
S9xOpcodesM0X1
 [256];

87 
SOpcodes
 
S9xOpcodesM0X0
 [256];

89 #i‚de‡
VAR_CYCLES


90 
uöt8
 
S9xE1M1X1
 [256];

91 
uöt8
 
S9xE0M1X0
 [256];

92 
uöt8
 
S9xE0M1X1
 [256];

93 
uöt8
 
S9xE0M0X0
 [256];

94 
uöt8
 
S9xE0M0X1
 [256];

97 
SICPU
 
ICPU
;

98 
END_EXTERN_C


100 
STATIC
 
ölöe
 
	$CLEAR_IRQ_SOURCE
 (
uöt32
 
M
)

102 
CPU
.
IRQA˘ive
 &~
M
;

103 i‡(!
CPU
.
IRQA˘ive
)

104 
CPU
.
Fœgs
 &~
IRQ_PENDING_FLAG
;

105 
	}
}

108 
STATIC
 
ölöe
 
	$S9xU≈ackSètus
()

110 
ICPU
.
_Zîo
 = (
Regi°îs
.
PL
 & 
Zîo
) == 0;

111 
ICPU
.
_Neg©ive
 = (
Regi°îs
.
PL
 & 
Neg©ive
);

112 
ICPU
.
_C¨ry
 = (
Regi°îs
.
PL
 & 
C¨ry
);

113 
ICPU
.
_OvîÊow
 = (
Regi°îs
.
PL
 & 
OvîÊow
) >> 6;

114 
	}
}

116 
STATIC
 
ölöe
 
	$S9xPackSètus
()

118 
Regi°îs
.
PL
 &~(
Zîo
 | 
Neg©ive
 | 
C¨ry
 | 
OvîÊow
);

119 
Regi°îs
.
PL
 |
ICPU
.
_C¨ry
 | ((ICPU.
_Zîo
 == 0) << 1) |

120 (
ICPU
.
_Neg©ive
 & 0x80Ë| (ICPU.
_OvîÊow
 << 6);

121 
	}
}

123 
STATIC
 
ölöe
 
	$S9xFixCy˛es
 ()

125 i‡(
	`CheckEmuœti⁄
 ())

127 #i‚de‡
VAR_CYCLES


128 
ICPU
.
S≥ed
 = 
S9xE1M1X1
;

130 
ICPU
.
S9xOpcodes
 = 
S9xOpcodesM1X1
;

133 i‡(
	`CheckMem‹y
 ())

135 i‡(
	`CheckIndex
 ())

137 #i‚de‡
VAR_CYCLES


138 
ICPU
.
S≥ed
 = 
S9xE0M1X1
;

140 
ICPU
.
S9xOpcodes
 = 
S9xOpcodesM1X1
;

144 #i‚de‡
VAR_CYCLES


145 
ICPU
.
S≥ed
 = 
S9xE0M1X0
;

147 
ICPU
.
S9xOpcodes
 = 
S9xOpcodesM1X0
;

152 i‡(
	`CheckIndex
 ())

154 #i‚de‡
VAR_CYCLES


155 
ICPU
.
S≥ed
 = 
S9xE0M0X1
;

157 
ICPU
.
S9xOpcodes
 = 
S9xOpcodesM0X1
;

161 #i‚de‡
VAR_CYCLES


162 
ICPU
.
S≥ed
 = 
S9xE0M0X0
;

164 
ICPU
.
S9xOpcodes
 = 
S9xOpcodesM0X0
;

167 
	}
}

170 
STATIC
 
ölöe
 
	$S9xRescheduÀ
 ()

172 
uöt8
 
which
;

173 
max
;

175 i‡(
CPU
.
WhichEvít
 =
HBLANK_START_EVENT
 ||

176 
CPU
.
WhichEvít
 =
HTIMER_AFTER_EVENT
)

178 
which
 = 
HBLANK_END_EVENT
;

179 
max
 = 
Sëtögs
.
H_Max
;

183 
which
 = 
HBLANK_START_EVENT
;

184 
max
 = 
Sëtögs
.
HBœnkSèπ
;

187 i‡(
PPU
.
HTimîE«bÀd
 &&

188 (Ë
PPU
.
HTimîPosôi⁄
 < 
max
 &&

189 (Ë
PPU
.
HTimîPosôi⁄
 > 
CPU
.
NextEvít
 &&

190 (!
PPU
.
VTimîE«bÀd
 ||

191 (
PPU
.
VTimîE«bÀd
 && 
CPU
.
V_Cou¡î
 =PPU.
IRQVBómPos
)))

193 
which
 = (Ë
PPU
.
HTimîPosôi⁄
 < 
Sëtögs
.
HBœnkSèπ
 ?

194 
HTIMER_BEFORE_EVENT
 : 
HTIMER_AFTER_EVENT
;

195 
max
 = 
PPU
.
HTimîPosôi⁄
;

197 
CPU
.
NextEvít
 = 
max
;

198 
CPU
.
WhichEvít
 = 
which
;

199 
	}
}

	@crypt.h

30 
	#CRC32
(
c
, 
b
Ë((*(
p¸c_32_èb
+((()(cË^ (b)Ë& 0xff))Ë^ ((cË>> 8))

	)

35 
	$de¸y±_byã
(* 
pkeys
, c⁄° * 
p¸c_32_èb
)

37 
ãmp
;

41 
ãmp
 = (()(*(
pkeys
+2)) & 0xffff) | 2;

42  ()(((
ãmp
 * (temp ^ 1)) >> 8) & 0xff);

43 
	}
}

48 
	$upd©e_keys
(* 
pkeys
,c⁄° * 
p¸c_32_èb
,
c
)

50 (*(
pkeys
+0)Ë
	`CRC32
((*’keys+0)), 
c
);

51 (*(
pkeys
+1)) += (*(pkeys+0)) & 0xff;

52 (*(
pkeys
+1)) = (*(pkeys+1)) * 134775813L + 1;

54 
keyshi·
 = ()((*(
pkeys
+1)) >> 24);

55 (*(
pkeys
+2)Ë
	`CRC32
((*’keys+2)), 
keyshi·
);

57  
c
;

58 
	}
}

65 
	$öô_keys
(c⁄° * 
∑sswd
,* 
pkeys
,c⁄° * 
p¸c_32_èb
)

67 *(
pkeys
+0) = 305419896L;

68 *(
pkeys
+1) = 591751049L;

69 *(
pkeys
+2) = 878082192L;

70 *
∑sswd
 != '\0') {

71 
	`upd©e_keys
(
pkeys
,
p¸c_32_èb
,()*
∑sswd
);

72 
∑sswd
++;

74 
	}
}

76 
	#zdecode
(
pkeys
,
p¸c_32_èb
,
c
Ë\

	)

77 (
upd©e_keys
(
pkeys
,
p¸c_32_èb
,
c
 ^
	$de¸y±_byã
(
pkeys
,
p¸c_32_èb
)))

79 
	#zícode
(
pkeys
,
p¸c_32_èb
,
c
,
t
Ë\

	)

80 (
t
=
	`de¸y±_byã
(
pkeys
,
p¸c_32_èb
), 
	`upd©e_keys
’keys,p¸c_32_èb,
c
),Å^(c))

82 #ifde‡
INCLUDECRYPTINGCODE_IFCRYPTALLOWED


84 
	#RAND_HEAD_LEN
 12

	)

86 #i‚de‡
ZCR_SEED2


87 
	#ZCR_SEED2
 3141592654UL

	)

90 
	$¸y±hód
(
∑sswd
, 
buf
, 
bufSize
, 
pkeys
, 
p¸c_32_èb
, 
¸cF‹Cry±ög
)

91 c⁄° *
∑sswd
;

92 *
buf
;

93 
bufSize
;

94 * 
pkeys
;

95 c⁄° * 
p¸c_32_èb
;

96 
¸cF‹Cry±ög
;

98 
n
;

99 
t
;

100 
c
;

101 
hódî
[
RAND_HEAD_LEN
-2];

102 
ˇŒs
 = 0;

104 i‡(
bufSize
<
RAND_HEAD_LEN
)

111 i‡(++
ˇŒs
 == 1)

113 
	`§™d
(()(
	`time
(
NULL
Ë^ 
ZCR_SEED2
));

115 
	`öô_keys
(
∑sswd
, 
pkeys
, 
p¸c_32_èb
);

116 
n
 = 0;Ç < 
RAND_HEAD_LEN
-2;Ç++)

118 
c
 = (
	`ønd
() >> 7) & 0xff;

119 
hódî
[
n
] = ()
	`zícode
(
pkeys
, 
p¸c_32_èb
, 
c
, 
t
);

122 
	`öô_keys
(
∑sswd
, 
pkeys
, 
p¸c_32_èb
);

123 
n
 = 0;Ç < 
RAND_HEAD_LEN
-2;Ç++)

125 
buf
[
n
] = ()
	`zícode
(
pkeys
, 
p¸c_32_èb
, 
hódî
[n], 
t
);

127 
buf
[
n
++] = 
	`zícode
(
pkeys
, 
p¸c_32_èb
, ()(
¸cF‹Cry±ög
 >> 16Ë& 0xff, 
t
);

128 
buf
[
n
++] = 
	`zícode
(
pkeys
, 
p¸c_32_èb
, ()(
¸cF‹Cry±ög
 >> 24Ë& 0xff, 
t
);

129  
n
;

130 
	}
}

	@data.cpp

41 
	~"¢es9x.h
"

439 
uöt8
 
	gmul_brighäess
 [16][32] = {

	@debug.h

41 #i‚de‡
_DEBUG_H_


42 
	#_DEBUG_H_


	)

44 
START_EXTERN_C


45 
S9xDoDebug
 ();

46 
S9xTø˚
 ();

47 
S9xSA1Tø˚
 ();

48 
S9xTø˚Mesßge
 (const *);

51 
	sSBªakPoöt
{

52 
boﬁ8
 
	mE«bÀd
;

53 
uöt8
 
	mB™k
;

54 
uöt16
 
	mAddªss
;

57 
uöt8
 
S9xOPröt
–*
Löe
, uöt8 
B™k
, 
uöt16
 
Addªss
);

58 
uöt8
 
S9xSA1OPröt
–*
Löe
, uöt8 
B™k
, 
uöt16
 
Addªss
);

60 
SBªakPoöt
 
S9xBªakpoöt
[ 6];

61 *
S9xM√m⁄ics
[256];

62 
	gEND_EXTERN_C


	@display.h

41 #i‚de‡
_DISPLAY_H_


42 
	#_DISPLAY_H_


	)

44 
START_EXTERN_C


46 
S9xSëPÆëã
 ();

47 
S9xTextMode
 ();

48 
S9xGøphicsMode
 ();

49 *
S9xP¨£Args
 (**
¨gv
, 
¨gc
);

50 
S9xP¨£Arg
 (**
¨gv
, &
ödex
, 
¨gc
);

51 
S9xExåaUßge
 ();

52 
uöt32
 
S9xRódJoy∑d
 (
which1_0_to_4
);

53 
boﬁ8_32
 
S9xRódMou£Posôi⁄
 (
which1_0_to_1
, &
x
, &
y
, 
uöt32
 &
buâ⁄s
);

54 
boﬁ8_32
 
S9xRódSu≥rSc›ePosôi⁄
 (&
x
, &
y
, 
uöt32
 &
buâ⁄s
);

56 
S9xUßge
 ();

57 
S9xInôDi•œy
 (
¨gc
, **
¨gv
);

58 
S9xDeöôDi•œy
 ();

59 
S9xInôI≈utDevi˚s
 ();

60 
S9xSëTôÀ
 (c⁄° *
tôÀ
);

61 
S9xPro˚ssEvíts
 (
boﬁ8_32
 
block
);

62 
S9xPutImage
 (
width
, 
height
);

63 
S9xP¨£Di•œyArg
 (**
¨gv
, &
ödex
, 
¨gc
);

64 
S9xToggÀSoundCh™√l
 (
ch™√l
);

65 
S9xSëInfoSåög
 (c⁄° *
°rög
);

66 
S9xMöComm™dLöeArgs
 ();

67 
S9xNextC⁄åﬁÀr
 ();

68 
boﬁ8_32
 
S9xLﬂdROMImage
 (c⁄° *
°rög
);

69 c⁄° *
S9xSñe˘Fûíame
 (c⁄° *
def
, c⁄° *
dú
,

70 c⁄° *
ext
, c⁄° *
tôÀ
);

72 c⁄° *
S9xChoo£Fûíame
 (
boﬁ8_32
 
ªad_⁄ly
);

73 
boﬁ8_32
 
S9xO≥nS«pshŸFûe
 (c⁄° *
ba£
, boﬁ8_32 
ªad_⁄ly
, 
STREAM
 *
fûe
);

74 
S9xClo£S«pshŸFûe
 (
STREAM
 
fûe
);

76 c⁄° *
S9xBa£«me
 (c⁄° *
fûíame
);

78 
S9xFSåcmp
 (
FILE
 *, const *);

79 c⁄° *
S9xGëHomeDúe˘‹y
 ();

80 c⁄° *
S9xGëS«pshŸDúe˘‹y
 ();

81 c⁄° *
S9xGëROMDúe˘‹y
 ();

82 c⁄° *
S9xGëSRAMFûíame
 ();

83 c⁄° *
S9xGëFûíame
 (c⁄° *
exãnsi⁄
);

84 
	gEND_EXTERN_C


	@dma.cpp

41 
	~"¢es9x.h
"

43 
	~"memm≠.h
"

44 
	~"µu.h
"

45 
	~"˝uexec.h
"

46 
	~"missög.h
"

47 
	~"dma.h
"

48 
	~"≠u.h
"

49 
	~"gfx.h
"

50 #ifde‡
USE_SA1


51 
	~"ß1.h
"

55 
	~"sdd1emu.h
"

56 
uöt8
 
	gbuf„r
[0x10000];

59 
HDMA_ModeByãCou¡s
 [8];

60 
uöt8
 *
HDMAMemPoöãrs
 [8];

61 
uöt8
 *
HDMABa£Poöãrs
 [8];

63 #i‡
deföed
(
__löux__
Ë|| deföed(
__WIN32__
Ë|| deföed(
__GP2X__
Ë|| deföed(
__GIZ__
)

64 
	$S9xCom∑ªSDD1IndexE¡rõs
 (c⁄° *
p1
, c⁄° *
p2
)

66  (*(
uöt32
 *Ë
p1
 - *(uöt32 *Ë
p2
);

67 
	}
}

74 
	$S9xDoDMA
 (
uöt8
 
Ch™√l
)

76 
uöt8
 
W‹k
;

78 i‡(
Ch™√l
 > 7 || 
CPU
.
InDMA
)

81 
CPU
.
InDMA
 = 
TRUE
;

82 
boﬁ8
 
ö_ß1_dma
 = 
FALSE
;

83 
uöt8
 *
ö_sdd1_dma
 = 
NULL
;

84 
SDMA
 *
d
 = &
DMA
[
Ch™√l
];

86 
cou¡
 = 
d
->
Tøns„rByãs
;

88 i‡(
cou¡
 == 0)

89 
cou¡
 = 0x10000;

91 
öc
 = 
d
->
AAddªssFixed
 ? 0 : (!d->
AAddªssDe¸emít
 ? 1 : -1);

93 
d
->
BAddªss
)

97 i‡(
IPPU
.
RídîThisFøme
)

98 
	`FLUSH_REDRAW
 ();

102 i‡(
Sëtögs
.
SDD1
)

104 i‡(
d
->
AAddªssFixed
 && 
Mem‹y
.
FûlRAM
 [0x4801] > 0)

107 
öc
 = !
d
->
AAddªssDe¸emít
 ? 1 : -1;

108 
uöt32
 
addªss
 = (((
d
->
AB™k
 << 16Ë| d->
AAddªss
) & 0xfffff) << 4;

110 
addªss
 |
Mem‹y
.
FûlRAM
 [0x4804 + ((
d
->
AB™k
 - 0xc0) >> 4)];

111 if(
Sëtögs
.
SDD1Pack
)

113 
uöt8
* 
ö_±r
=
	`GëBa£Poöãr
(((
d
->
AB™k
 << 16Ë| d->
AAddªss
));

114 
ö_±r
+=
d
->
AAddªss
;

116 
	`SDD1_decom¥ess
(
buf„r
,
ö_±r
,
d
->
Tøns„rByãs
);

117 
ö_sdd1_dma
=
buf„r
;

121 #i‡
	`deföed
 (
__GP2X__
Ë|| deföed(
__GIZ__
)

122 *
±r
 = 
	`b£¨ch
 (&
addªss
, 
Mem‹y
.
SDD1Index
,

123 
Mem‹y
.
SDD1E¡rõs
, 12, 
S9xCom∑ªSDD1IndexE¡rõs
);

124 i‡(
±r
)

125 
ö_sdd1_dma
 = *(
uöt32
 *Ë((
uöt8
 *Ë
±r
 + 4Ë+ 
Mem‹y
.
SDD1D©a
;

127 
uöt8
 *
±r
 = 
Mem‹y
.
SDD1Index
;

129 
uöt32
 
e
 = 0;É < 
Mem‹y
.
SDD1E¡rõs
;É++, 
±r
 += 12)

131 i‡(
addªss
 =*(
uöt32
 *Ë
±r
)

133 
ö_sdd1_dma
 = *(
uöt32
 *Ë(
±r
 + 4Ë+ 
Mem‹y
.
SDD1D©a
;

174 
Mem‹y
.
FûlRAM
 [0x4801] = 0;

177 #ifde‡
USE_SA1


178 i‡(
d
->
BAddªss
 =0x18 && 
SA1
.
ö_ch¨_dma
 && (d->
AB™k
 & 0xf0) == 0x40)

180 i‡(
d
->
BAddªss
 =0x18 && (d->
AB™k
 & 0xf0) == 0x40)

185 
num_ch¨s
 = 1 << ((
Mem‹y
.
FûlRAM
 [0x2231] >> 2) & 7);

186 
dïth
 = (
Mem‹y
.
FûlRAM
 [0x2231] & 3) == 0 ? 8 :

187 (
Mem‹y
.
FûlRAM
 [0x2231] & 3) == 1 ? 4 : 2;

189 
byãs_≥r_ch¨
 = 8 * 
dïth
;

190 
byãs_≥r_löe
 = 
dïth
 * 
num_ch¨s
;

191 
ch¨_löe_byãs
 = 
byãs_≥r_ch¨
 * 
num_ch¨s
;

192 
uöt32
 
addr
 = (
d
->
AAddªss
 / 
ch¨_löe_byãs
) * char_line_bytes;

193 
uöt8
 *
ba£
 = 
	`GëBa£Poöãr
 ((
d
->
AB™k
 << 16Ë+ 
addr
) +áddr;

194 
uöt8
 *
buf„r
 = &
Mem‹y
.
ROM
 [
CMem‹y
::
MAX_ROM_SIZE
 - 0x10000];

195 
uöt8
 *
p
 = 
buf„r
;

196 
uöt32
 
öc
 = 
ch¨_löe_byãs
 - (
d
->
AAddªss
 % char_line_bytes);

197 
uöt32
 
ch¨_cou¡
 = 
öc
 / 
byãs_≥r_ch¨
;

199 
ö_ß1_dma
 = 
TRUE
;

204 
i
;

206 
dïth
)

209 
i
 = 0; i < 
cou¡
; i +
öc
, 
ba£
 +
ch¨_löe_byãs
,

210 
öc
 = 
ch¨_löe_byãs
, 
ch¨_cou¡
 = 
num_ch¨s
)

212 
uöt8
 *
löe
 = 
ba£
 + (
num_ch¨s
 - 
ch¨_cou¡
) * 2;

213 
uöt32
 
j
 = 0; j < 
ch¨_cou¡
 && 
p
 - 
buf„r
 < 
cou¡
;

214 
j
++, 
löe
 += 2)

216 
uöt8
 *
q
 = 
löe
;

217 
l
 = 0;Ü < 8;Ü++, 
q
 +
byãs_≥r_löe
)

219 
b
 = 0; b < 2; b++)

221 
uöt8
 
r
 = *(
q
 + 
b
);

222 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 0) & 1);

223 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 1) & 1);

224 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 2) & 1);

225 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 3) & 1);

226 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 4) & 1);

227 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 5) & 1);

228 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 6) & 1);

229 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 7) & 1);

231 
p
 += 2;

237 
i
 = 0; i < 
cou¡
; i +
öc
, 
ba£
 +
ch¨_löe_byãs
,

238 
öc
 = 
ch¨_löe_byãs
, 
ch¨_cou¡
 = 
num_ch¨s
)

240 
uöt8
 *
löe
 = 
ba£
 + (
num_ch¨s
 - 
ch¨_cou¡
) * 4;

241 
uöt32
 
j
 = 0; j < 
ch¨_cou¡
 && 
p
 - 
buf„r
 < 
cou¡
;

242 
j
++, 
löe
 += 4)

244 
uöt8
 *
q
 = 
löe
;

245 
l
 = 0;Ü < 8;Ü++, 
q
 +
byãs_≥r_löe
)

247 
b
 = 0; b < 4; b++)

249 
uöt8
 
r
 = *(
q
 + 
b
);

250 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 0) & 1);

251 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 1) & 1);

252 *(
p
 + 16Ë(*’ + 16Ë<< 1Ë| ((
r
 >> 2) & 1);

253 *(
p
 + 17Ë(*’ + 17Ë<< 1Ë| ((
r
 >> 3) & 1);

254 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 4) & 1);

255 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 5) & 1);

256 *(
p
 + 16Ë(*’ + 16Ë<< 1Ë| ((
r
 >> 6) & 1);

257 *(
p
 + 17Ë(*’ + 17Ë<< 1Ë| ((
r
 >> 7) & 1);

259 
p
 += 2;

261 
p
 += 32 - 16;

266 
i
 = 0; i < 
cou¡
; i +
öc
, 
ba£
 +
ch¨_löe_byãs
,

267 
öc
 = 
ch¨_löe_byãs
, 
ch¨_cou¡
 = 
num_ch¨s
)

269 
uöt8
 *
löe
 = 
ba£
 + (
num_ch¨s
 - 
ch¨_cou¡
) * 8;

270 
uöt32
 
j
 = 0; j < 
ch¨_cou¡
 && 
p
 - 
buf„r
 < 
cou¡
;

271 
j
++, 
löe
 += 8)

273 
uöt8
 *
q
 = 
löe
;

274 
l
 = 0;Ü < 8;Ü++, 
q
 +
byãs_≥r_löe
)

276 
b
 = 0; b < 8; b++)

278 
uöt8
 
r
 = *(
q
 + 
b
);

279 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 0) & 1);

280 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 1) & 1);

281 *(
p
 + 16Ë(*’ + 16Ë<< 1Ë| ((
r
 >> 2) & 1);

282 *(
p
 + 17Ë(*’ + 17Ë<< 1Ë| ((
r
 >> 3) & 1);

283 *(
p
 + 32Ë(*’ + 32Ë<< 1Ë| ((
r
 >> 4) & 1);

284 *(
p
 + 33Ë(*’ + 33Ë<< 1Ë| ((
r
 >> 5) & 1);

285 *(
p
 + 48Ë(*’ + 48Ë<< 1Ë| ((
r
 >> 6) & 1);

286 *(
p
 + 49Ë(*’ + 49Ë<< 1Ë| ((
r
 >> 7) & 1);

288 
p
 += 2;

290 
p
 += 64 - 16;

297 #ifde‡
DEBUGGER


298 i‡(
Sëtögs
.
Tø˚DMA
)

300 
	`•rötf
 (
Såög
, "DMA[%d]: %s Mode: %d 0x%02X%04X->0x21%02X Bytes: %d (%s) V-Line:%ld",

301 
Ch™√l
, 
d
->
Tøns„rDúe˘i⁄
 ? "read" : "write",

302 
d
->
Tøns„rMode
, d->
AB™k
, d->
AAddªss
,

303 
d
->
BAddªss
, d->
Tøns„rByãs
,

304 
d
->
AAddªssFixed
 ? "fixed" :

305 (
d
->
AAddªssDe¸emít
 ? "dec" : "inc"),

306 
CPU
.
V_Cou¡î
);

307 i‡(
d
->
BAddªss
 == 0x18 || d->BAddress == 0x19)

308 
	`•rötf
 (
Såög
, "%s VRAM: %04X (%d,%d) %s", String,

309 
PPU
.
VMA
.
Addªss
,

310 
PPU
.
VMA
.
In¸emít
, PPU.VMA.
FuŒGøphicCou¡
,

311 
PPU
.
VMA
.
High
 ? "word" : "byte");

313 i‡(
d
->
BAddªss
 == 0x22)

314 
	`•rötf
 (
Såög
, "%†CGRAM: %02X (%x)", Såög, 
PPU
.
CGADD
,

315 
PPU
.
CGFLIP
);

317 i‡(
d
->
BAddªss
 == 0x04)

318 
	`•rötf
 (
Såög
, "%†OBJADDR: %04X", Såög, 
PPU
.
OAMAddr
);

319 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_DMA_TRACE
, 
Såög
);

323 i‡(!
d
->
Tøns„rDúe˘i⁄
)

325 #ifde‡
VAR_CYCLES


326 
CPU
.
Cy˛es
 +8 * 
cou¡
;

328 
CPU
.
Cy˛es
 +
cou¡
 + (count >> 2);

330 
uöt8
 *
ba£
 = 
	`GëBa£Poöãr
 ((
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

331 
uöt16
 
p
 = 
d
->
AAddªss
;

333 i‡(!
ba£
)

334 
ba£
 = 
Mem‹y
.
ROM
;

336 i‡(
ö_ß1_dma
)

338 
ba£
 = &
Mem‹y
.
ROM
 [
CMem‹y
::
MAX_ROM_SIZE
 - 0x10000];

339 
p
 = 0;

342 i‡(
ö_sdd1_dma
)

344 
ba£
 = 
ö_sdd1_dma
;

345 
p
 = 0;

348 i‡(
öc
 > 0)

349 
d
->
AAddªss
 +
cou¡
;

351 i‡(
öc
 < 0)

352 
d
->
AAddªss
 -
cou¡
;

354 i‡(
d
->
Tøns„rMode
 == 0 || d->TransferMode == 2)

356 
d
->
BAddªss
)

361 
W‹k
 = *(
ba£
 + 
p
);

362 
	`REGISTER_2104
(
W‹k
);

363 
p
 +
öc
;

364 
	`CHECK_SOUND
();

365 } --
cou¡
 > 0);

368 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

369 i‡(!
PPU
.
VMA
.
FuŒGøphicCou¡
)

373 
W‹k
 = *(
ba£
 + 
p
);

374 
	`REGISTER_2118_löór
(
W‹k
);

375 
p
 +
öc
;

376 
	`CHECK_SOUND
();

377 } --
cou¡
 > 0);

383 
W‹k
 = *(
ba£
 + 
p
);

384 
	`REGISTER_2118_tûe
(
W‹k
);

385 
p
 +
öc
;

386 
	`CHECK_SOUND
();

387 } --
cou¡
 > 0);

391 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

392 i‡(!
PPU
.
VMA
.
FuŒGøphicCou¡
)

396 
W‹k
 = *(
ba£
 + 
p
);

397 
	`REGISTER_2119_löór
(
W‹k
);

398 
p
 +
öc
;

399 
	`CHECK_SOUND
();

400 } --
cou¡
 > 0);

406 
W‹k
 = *(
ba£
 + 
p
);

407 
	`REGISTER_2119_tûe
(
W‹k
);

408 
p
 +
öc
;

409 
	`CHECK_SOUND
();

410 } --
cou¡
 > 0);

416 
W‹k
 = *(
ba£
 + 
p
);

417 
	`REGISTER_2122
(
W‹k
);

418 
p
 +
öc
;

419 
	`CHECK_SOUND
();

420 } --
cou¡
 > 0);

425 
W‹k
 = *(
ba£
 + 
p
);

426 
	`REGISTER_2180
(
W‹k
);

427 
p
 +
öc
;

428 
	`CHECK_SOUND
();

429 } --
cou¡
 > 0);

434 
W‹k
 = *(
ba£
 + 
p
);

435 
	`S9xSëPPU
 (
W‹k
, 0x2100 + 
d
->
BAddªss
);

436 
p
 +
öc
;

437 
	`CHECK_SOUND
();

438 } --
cou¡
 > 0);

443 i‡(
d
->
Tøns„rMode
 == 1 || d->TransferMode == 5)

445 i‡(
d
->
BAddªss
 == 0x18)

448 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

449 i‡(!
PPU
.
VMA
.
FuŒGøphicCou¡
)

451 
cou¡
 > 1)

453 
W‹k
 = *(
ba£
 + 
p
);

454 
	`REGISTER_2118_löór
(
W‹k
);

455 
p
 +
öc
;

457 
W‹k
 = *(
ba£
 + 
p
);

458 
	`REGISTER_2119_löór
(
W‹k
);

459 
p
 +
öc
;

460 
	`CHECK_SOUND
();

461 
cou¡
 -= 2;

463 i‡(
cou¡
 == 1)

465 
W‹k
 = *(
ba£
 + 
p
);

466 
	`REGISTER_2118_löór
(
W‹k
);

467 
p
 +
öc
;

472 
cou¡
 > 1)

474 
W‹k
 = *(
ba£
 + 
p
);

475 
	`REGISTER_2118_tûe
(
W‹k
);

476 
p
 +
öc
;

478 
W‹k
 = *(
ba£
 + 
p
);

479 
	`REGISTER_2119_tûe
(
W‹k
);

480 
p
 +
öc
;

481 
	`CHECK_SOUND
();

482 
cou¡
 -= 2;

484 i‡(
cou¡
 == 1)

486 
W‹k
 = *(
ba£
 + 
p
);

487 
	`REGISTER_2118_tûe
(
W‹k
);

488 
p
 +
öc
;

495 
cou¡
 > 1)

497 
W‹k
 = *(
ba£
 + 
p
);

498 
	`S9xSëPPU
 (
W‹k
, 0x2100 + 
d
->
BAddªss
);

499 
p
 +
öc
;

501 
W‹k
 = *(
ba£
 + 
p
);

502 
	`S9xSëPPU
 (
W‹k
, 0x2101 + 
d
->
BAddªss
);

503 
p
 +
öc
;

504 
	`CHECK_SOUND
();

505 
cou¡
 -= 2;

507 i‡(
cou¡
 == 1)

509 
W‹k
 = *(
ba£
 + 
p
);

510 
	`S9xSëPPU
 (
W‹k
, 0x2100 + 
d
->
BAddªss
);

511 
p
 +
öc
;

516 i‡(
d
->
Tøns„rMode
 == 3)

520 
W‹k
 = *(
ba£
 + 
p
);

521 
	`S9xSëPPU
 (
W‹k
, 0x2100 + 
d
->
BAddªss
);

522 
p
 +
öc
;

523 i‡(
cou¡
 <= 1)

526 
W‹k
 = *(
ba£
 + 
p
);

527 
	`S9xSëPPU
 (
W‹k
, 0x2100 + 
d
->
BAddªss
);

528 
p
 +
öc
;

529 i‡(
cou¡
 <= 2)

532 
W‹k
 = *(
ba£
 + 
p
);

533 
	`S9xSëPPU
 (
W‹k
, 0x2101 + 
d
->
BAddªss
);

534 
p
 +
öc
;

535 i‡(
cou¡
 <= 3)

538 
W‹k
 = *(
ba£
 + 
p
);

539 
	`S9xSëPPU
 (
W‹k
, 0x2101 + 
d
->
BAddªss
);

540 
p
 +
öc
;

541 
	`CHECK_SOUND
();

542 
cou¡
 -= 4;

543 } 
cou¡
 > 0);

546 i‡(
d
->
Tøns„rMode
 == 4)

550 
W‹k
 = *(
ba£
 + 
p
);

551 
	`S9xSëPPU
 (
W‹k
, 0x2100 + 
d
->
BAddªss
);

552 
p
 +
öc
;

553 i‡(
cou¡
 <= 1)

556 
W‹k
 = *(
ba£
 + 
p
);

557 
	`S9xSëPPU
 (
W‹k
, 0x2101 + 
d
->
BAddªss
);

558 
p
 +
öc
;

559 i‡(
cou¡
 <= 2)

562 
W‹k
 = *(
ba£
 + 
p
);

563 
	`S9xSëPPU
 (
W‹k
, 0x2102 + 
d
->
BAddªss
);

564 
p
 +
öc
;

565 i‡(
cou¡
 <= 3)

568 
W‹k
 = *(
ba£
 + 
p
);

569 
	`S9xSëPPU
 (
W‹k
, 0x2103 + 
d
->
BAddªss
);

570 
p
 +
öc
;

571 
	`CHECK_SOUND
();

572 
cou¡
 -= 4;

573 } 
cou¡
 > 0);

577 #ifde‡
DEBUGGER


580 
	`•rötf
 (
Såög
, "Unknown DMAÅransfer mode: %d on channel %d\n",

581 
d
->
Tøns„rMode
, 
Ch™√l
);

582 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_DMA_TRACE
, 
Såög
);

591 
d
->
Tøns„rMode
)

595 #i‚de‡
VAR_CYCLES


596 
CPU
.
Cy˛es
 += 1;

598 
W‹k
 = 
	`S9xGëPPU
 (0x2100 + 
d
->
BAddªss
);

599 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

600 
d
->
AAddªss
 +
öc
;

601 --
cou¡
;

606 #i‚de‡
VAR_CYCLES


607 
CPU
.
Cy˛es
 += 3;

609 
W‹k
 = 
	`S9xGëPPU
 (0x2100 + 
d
->
BAddªss
);

610 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

611 
d
->
AAddªss
 +
öc
;

612 i‡(!--
cou¡
)

615 
W‹k
 = 
	`S9xGëPPU
 (0x2101 + 
d
->
BAddªss
);

616 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

617 
d
->
AAddªss
 +
öc
;

618 
cou¡
--;

622 #i‚de‡
VAR_CYCLES


623 
CPU
.
Cy˛es
 += 6;

625 
W‹k
 = 
	`S9xGëPPU
 (0x2100 + 
d
->
BAddªss
);

626 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

627 
d
->
AAddªss
 +
öc
;

628 i‡(!--
cou¡
)

631 
W‹k
 = 
	`S9xGëPPU
 (0x2100 + 
d
->
BAddªss
);

632 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

633 
d
->
AAddªss
 +
öc
;

634 i‡(!--
cou¡
)

637 
W‹k
 = 
	`S9xGëPPU
 (0x2101 + 
d
->
BAddªss
);

638 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

639 
d
->
AAddªss
 +
öc
;

640 i‡(!--
cou¡
)

643 
W‹k
 = 
	`S9xGëPPU
 (0x2101 + 
d
->
BAddªss
);

644 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

645 
d
->
AAddªss
 +
öc
;

646 
cou¡
--;

650 #i‚de‡
VAR_CYCLES


651 
CPU
.
Cy˛es
 += 6;

653 
W‹k
 = 
	`S9xGëPPU
 (0x2100 + 
d
->
BAddªss
);

654 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

655 
d
->
AAddªss
 +
öc
;

656 i‡(!--
cou¡
)

659 
W‹k
 = 
	`S9xGëPPU
 (0x2101 + 
d
->
BAddªss
);

660 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

661 
d
->
AAddªss
 +
öc
;

662 i‡(!--
cou¡
)

665 
W‹k
 = 
	`S9xGëPPU
 (0x2102 + 
d
->
BAddªss
);

666 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

667 
d
->
AAddªss
 +
öc
;

668 i‡(!--
cou¡
)

671 
W‹k
 = 
	`S9xGëPPU
 (0x2103 + 
d
->
BAddªss
);

672 
	`S9xSëByã
 (
W‹k
, (
d
->
AB™k
 << 16Ë+ d->
AAddªss
);

673 
d
->
AAddªss
 +
öc
;

674 
cou¡
--;

678 #ifde‡
DEBUGGER


681 
	`•rötf
 (
Såög
, "Unknown DMAÅransfer mode: %d on channel %d\n",

682 
d
->
Tøns„rMode
, 
Ch™√l
);

683 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_DMA_TRACE
, 
Såög
);

686 
cou¡
 = 0;

689 
	`CHECK_SOUND
();

690 } 
cou¡
);

693 #ifde‡
SPC700_C


694 #ifde‡
SPC700_SHUTDOWN


695 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
;

697 
	`APU_EXECUTE
(1);

699 
CPU
.
Cy˛es
 > CPU.
NextEvít
)

700 
	`S9xDoHBœnkPro˚ssög
 ();

704 
Mem‹y
.
FûlRAM
[0x4302 + (
Ch™√l
 << 4)] = (
uöt8
Ë
d
->
AAddªss
;

705 
Mem‹y
.
FûlRAM
[0x4303 + (
Ch™√l
 << 4)] = 
d
->
AAddªss
 >> 8;

709 
Mem‹y
.
FûlRAM
 [0x4305 + (
Ch™√l
 << 4)] = 0;

710 
Mem‹y
.
FûlRAM
 [0x4306 + (
Ch™√l
 << 4)] = 0;

712 
DMA
[
Ch™√l
].
Indúe˘Addªss
 = 0;

713 
d
->
Tøns„rByãs
 = 0;

715 
CPU
.
InDMA
 = 
FALSE
;

716 
	}
}

718 
	$S9xSèπHDMA
 ()

720 i‡(
Sëtögs
.
DißbÀHDMA
)

721 
IPPU
.
HDMA
 = 0;

723 
missög
.
hdma_this_‰ame
 = 
IPPU
.
HDMA
 = 
Mem‹y
.
FûlRAM
 [0x420c];

725 
IPPU
.
HDMASèπed
 = 
TRUE
;

727 
uöt8
 
i
 = 0; i < 8; i++)

729 i‡(
IPPU
.
HDMA
 & (1 << 
i
))

731 
DMA
 [
i
].
LöeCou¡
 = 0;

732 
DMA
 [
i
].
Fú°Löe
 = 
TRUE
;

733 
DMA
 [
i
].
Addªss
 = DMA [i].
AAddªss
;

735 
HDMAMemPoöãrs
 [
i
] = 
NULL
;

737 
	}
}

739 #ifde‡
DEBUGGER


740 
S9xTø˚SoundDSP
 (c⁄° *
s
, 
i1
 = 0, 
i2
 = 0, 
i3
 = 0,

741 
i4
 = 0, 
i5
 = 0, 
i6
 = 0, 
i7
 = 0);

745 
uöt8
 
	$S9xDoHDMA
 (
uöt8
 
byã
)

747 
SDMA
 *
p
 = &
DMA
 [0];

749 
d
 = 0;

751 
uöt8
 
mask
 = 1; mask; mask <<1, 
p
++, 
d
++)

753 i‡(
byã
 & 
mask
)

755 i‡(!
p
->
LöeCou¡
)

757 
uöt8
 
löe
 = 
	`S9xGëByã
 ((
p
->
AB™k
 << 16Ë+Ö->
Addªss
);

758 i‡(
löe
 == 0x80)

760 
p
->
Rïót
 = 
TRUE
;

761 
p
->
LöeCou¡
 = 128;

765 
p
->
Rïót
 = !(
löe
 & 0x80);

766 
p
->
LöeCou¡
 = 
löe
 & 0x7f;

770 i‡(!
p
->
LöeCou¡
 ||Ö->
BAddªss
 == 0x18)

772 
byã
 &~
mask
;

773 
p
->
Indúe˘Addªss
 +
HDMAMemPoöãrs
 [
d
] - 
HDMABa£Poöãrs
 [d];

774 
Mem‹y
.
FûlRAM
 [0x4305 + (
d
 << 4)] = (
uöt8
Ë
p
->
Indúe˘Addªss
;

775 
Mem‹y
.
FûlRAM
 [0x4306 + (
d
 << 4)] = 
p
->
Indúe˘Addªss
 >> 8;

779 
p
->
Addªss
++;

780 
p
->
Fú°Löe
 = 1;

781 i‡(
p
->
HDMAIndúe˘Addªssög
)

783 
p
->
Indúe˘B™k
 = 
Mem‹y
.
FûlRAM
 [0x4307 + (’ - 
DMA
) << 4)];

784 
p
->
Indúe˘Addªss
 = 
	`S9xGëW‹d
 (’->
AB™k
 << 16Ë+Ö->
Addªss
);

785 
p
->
Addªss
 += 2;

789 
p
->
Indúe˘B™k
 =Ö->
AB™k
;

790 
p
->
Indúe˘Addªss
 =Ö->
Addªss
;

792 
HDMABa£Poöãrs
 [
d
] = 
HDMAMemPoöãrs
 [d] =

793 
	`S9xGëMemPoöãr
 ((
p
->
Indúe˘B™k
 << 16Ë+Ö->
Indúe˘Addªss
);

795 i‡(!
HDMAMemPoöãrs
 [
d
])

797 i‡(!(
HDMABa£Poöãrs
 [
d
] = 
HDMAMemPoöãrs
 [d] =

798 
	`S9xGëMemPoöãr
 ((
p
->
Indúe˘B™k
 << 16Ë+Ö->
Indúe˘Addªss
)))

800 
byã
 &~
mask
;

807 i‡(
p
->
Rïót
 && !p->
Fú°Löe
)

809 
p
->
LöeCou¡
--;

813 #ifde‡
DEBUGGER


814 i‡(
Sëtögs
.
Tø˚SoundDSP
 && 
p
->
Fú°Löe
 &&

815 
p
->
BAddªss
 >= 0x40 &&Ö->BAddress <= 0x43)

816 
	`S9xTø˚SoundDSP
 ("Spooling data!!!\n");

818 i‡(
Sëtögs
.
Tø˚HDMA
 && 
p
->
Fú°Löe
)

820 
	`•rötf
 (
Såög
, "H-DMA[%d] (%d) 0x%02X%04X->0x21%02X %s, Count: %3d, Rep: %s, V-LINE: %3ld %02X%04X",

821 
p
-
DMA
,Ö->
Tøns„rMode
,Ö->
Indúe˘B™k
,

822 
p
->
Indúe˘Addªss
,

823 
p
->
BAddªss
,

824 
p
->
HDMAIndúe˘Addªssög
 ? "ind" : "abs",

825 
p
->
LöeCou¡
,

826 
p
->
Rïót
 ? "yes" : "nÿ", 
CPU
.
V_Cou¡î
,

827 
p
->
AB™k
,Ö->
Addªss
);

828 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_HDMA_TRACE
, 
Såög
);

831 
p
->
Tøns„rMode
)

834 #i‚de‡
VAR_CYCLES


835 
CPU
.
Cy˛es
 += 1;

837 
CPU
.
Cy˛es
 += 8;

839 
	`S9xSëPPU
 (*
HDMAMemPoöãrs
 [
d
]++, 0x2100 + 
p
->
BAddªss
);

843 #i‚de‡
VAR_CYCLES


844 
CPU
.
Cy˛es
 += 3;

846 
CPU
.
Cy˛es
 += 16;

848 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 0), 0x2100 + 
p
->
BAddªss
);

849 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 1), 0x2101 + 
p
->
BAddªss
);

850 
HDMAMemPoöãrs
 [
d
] += 2;

854 #i‚de‡
VAR_CYCLES


855 
CPU
.
Cy˛es
 += 3;

857 
CPU
.
Cy˛es
 += 16;

859 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 0), 0x2100 + 
p
->
BAddªss
);

860 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 1), 0x2100 + 
p
->
BAddªss
);

861 
HDMAMemPoöãrs
 [
d
] += 2;

865 #i‚de‡
VAR_CYCLES


866 
CPU
.
Cy˛es
 += 6;

868 
CPU
.
Cy˛es
 += 32;

870 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 0), 0x2100 + 
p
->
BAddªss
);

871 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 1), 0x2100 + 
p
->
BAddªss
);

872 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 2), 0x2101 + 
p
->
BAddªss
);

873 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 3), 0x2101 + 
p
->
BAddªss
);

874 
HDMAMemPoöãrs
 [
d
] += 4;

877 #i‚de‡
VAR_CYCLES


878 
CPU
.
Cy˛es
 += 6;

880 
CPU
.
Cy˛es
 += 32;

882 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 0), 0x2100 + 
p
->
BAddªss
);

883 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 1), 0x2101 + 
p
->
BAddªss
);

884 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 2), 0x2102 + 
p
->
BAddªss
);

885 
	`S9xSëPPU
 (*(
HDMAMemPoöãrs
 [
d
] + 3), 0x2103 + 
p
->
BAddªss
);

886 
HDMAMemPoöãrs
 [
d
] += 4;

889 i‡(!
p
->
HDMAIndúe˘Addªssög
)

890 
p
->
Addªss
 +
HDMA_ModeByãCou¡s
 [p->
Tøns„rMode
];

891 
p
->
Fú°Löe
 = 
FALSE
;

892 
p
->
LöeCou¡
--;

895  (
byã
);

896 
	}
}

898 
	$S9xRe£tDMA
 ()

900 
d
;

901 
d
 = 0; d < 8; d++)

903 
DMA
 [
d
].
Tøns„rDúe˘i⁄
 = 
FALSE
;

904 
DMA
 [
d
].
HDMAIndúe˘Addªssög
 = 
FALSE
;

905 
DMA
 [
d
].
AAddªssFixed
 = 
TRUE
;

906 
DMA
 [
d
].
AAddªssDe¸emít
 = 
FALSE
;

907 
DMA
 [
d
].
Tøns„rMode
 = 0xff;

908 
DMA
 [
d
].
AB™k
 = 0xff;

909 
DMA
 [
d
].
AAddªss
 = 0xffff;

910 
DMA
 [
d
].
Addªss
 = 0xffff;

911 
DMA
 [
d
].
BAddªss
 = 0xff;

912 
DMA
 [
d
].
Tøns„rByãs
 = 0xffff;

914 
c
 = 0x4300; c < 0x4380; c += 0x10)

916 
d
 = 
c
; d < c + 12; d++)

917 
Mem‹y
.
FûlRAM
 [
d
] = 0xff;

919 
Mem‹y
.
FûlRAM
 [
c
 + 0xf] = 0xff;

921 
	}
}

	@dma.h

41 #i‚de‡
_DMA_H_


42 
	#_DMA_H_


	)

44 
START_EXTERN_C


45 
S9xRe£tDMA
 ();

46 
uöt8
 
S9xDoHDMA
 (uint8);

47 
S9xSèπHDMA
 ();

48 
S9xDoDMA
 (
uöt8
);

49 
	gEND_EXTERN_C


	@dsp1.cpp

89 
	~"¢es9x.h
"

90 
	~"d•1.h
"

91 
	~"missög.h
"

92 
	~"memm≠.h
"

93 
	~<m©h.h
>

95 
	~"d•1emu.c
"

96 
	~"d•2emu.c
"

99 (*
SëDSP
)(
uöt8
, 
uöt16
)=&
DSP1SëByã
;

100 
	$uöt8
 (*
GëDSP
)(
uöt16
)=&
DSP1GëByã
;

102 
	$S9xInôDSP1
 ()

104 
boﬁ8
 
öô
 = 
FALSE
;

106 i‡(!
öô
)

108 
	`InôDSP
 ();

109 
öô
 = 
TRUE
;

111 
	}
}

113 
	$S9xRe£tDSP1
 ()

115 
	`S9xInôDSP1
 ();

117 
DSP1
.
waôög4comm™d
 = 
TRUE
;

118 
DSP1
.
ö_cou¡
 = 0;

119 
DSP1
.
out_cou¡
 = 0;

120 
DSP1
.
ö_ödex
 = 0;

121 
DSP1
.
out_ödex
 = 0;

122 
DSP1
.
fú°_∑ømëî
 = 
TRUE
;

123 
	}
}

125 
uöt8
 
	$S9xGëDSP
 (
uöt16
 
addªss
)

127 
uöt8
 
t
;

129 #ifde‡
DEBUGGER


130 i‡(
Sëtögs
.
Tø˚DSP
)

132 
	`•rötf
 (
Såög
, "DSPÑód: 0x%04X", 
addªss
);

133 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_TRACE_DSP1
, 
Såög
);

137 
t
=(*
GëDSP
)(
addªss
);

139  (
t
);

140 
	}
}

142 
	$S9xSëDSP
 (
uöt8
 
byã
, 
uöt16
 
addªss
)

144 #ifde‡
DEBUGGER


145 
missög
.
unknownd•_wrôe
 = 
addªss
;

146 i‡(
Sëtögs
.
Tø˚DSP
)

148 
	`•rötf
 (
Såög
, "DSP wrôe: 0x%04X=0x%02X", 
addªss
, 
byã
);

149 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_TRACE_DSP1
, 
Såög
);

152 (*
SëDSP
)(
byã
, 
addªss
);

154 
	}
}

156 
	$DSP1SëByã
(
uöt8
 
byã
, 
uöt16
 
addªss
)

158 if–(
addªss
 & 0xf000) == 0x6000 || (address & 0x7fff) < 0x4000 )

162 if((
DSP1
.
comm™d
==0x0A||DSP1.comm™d==0x1A)&&DSP1.
out_cou¡
!=0)

164 
DSP1
.
out_cou¡
--;

165 
DSP1
.
out_ödex
++;

168 i‡(
DSP1
.
waôög4comm™d
)

170 
DSP1
.
comm™d
 = 
byã
;

171 
DSP1
.
ö_ödex
 = 0;

172 
DSP1
.
waôög4comm™d
 = 
FALSE
;

173 
DSP1
.
fú°_∑ømëî
 = 
TRUE
;

176 
byã
)

178 0x00: 
DSP1
.
ö_cou¡
 = 2; ;

180 0x10: 
DSP1
.
ö_cou¡
 = 2; ;

181 0x20: 
DSP1
.
ö_cou¡
 = 2; ;

183 0x04: 
DSP1
.
ö_cou¡
 = 2; ;

184 0x08: 
DSP1
.
ö_cou¡
 = 3; ;

185 0x18: 
DSP1
.
ö_cou¡
 = 4; ;

186 0x28: 
DSP1
.
ö_cou¡
 = 3; ;

187 0x38: 
DSP1
.
ö_cou¡
 = 4; ;

189 0x0c: 
DSP1
.
ö_cou¡
 = 3; ;

191 0x1c: 
DSP1
.
ö_cou¡
 = 6; ;

195 0x02: 
DSP1
.
ö_cou¡
 = 7; ;

196 0x0a: 
DSP1
.
ö_cou¡
 = 1; ;

200 
DSP1
. 
comm™d
 =0x1a;

201 
DSP1
.
ö_cou¡
 = 1; ;

205 0x06: 
DSP1
.
ö_cou¡
 = 3; ;

209 0x0e: 
DSP1
.
ö_cou¡
 = 2; ;

213 0x01: 
DSP1
.
ö_cou¡
 = 4; ;

215 0x11: 
DSP1
.
ö_cou¡
 = 4; ;

217 0x21: 
DSP1
.
ö_cou¡
 = 4; ;

221 0x0d: 
DSP1
.
ö_cou¡
 = 3; ;

223 0x1d: 
DSP1
.
ö_cou¡
 = 3; ;

225 0x2d: 
DSP1
.
ö_cou¡
 = 3; ;

227 0x03: 
DSP1
.
ö_cou¡
 = 3; ;

228 0x13: 
DSP1
.
ö_cou¡
 = 3; ;

229 0x23: 
DSP1
.
ö_cou¡
 = 3; ;

231 0x0b: 
DSP1
.
ö_cou¡
 = 3; ;

232 0x1b: 
DSP1
.
ö_cou¡
 = 3; ;

233 0x2b: 
DSP1
.
ö_cou¡
 = 3; ;

235 0x14: 
DSP1
.
ö_cou¡
 = 6; ;

237 0x0f: 
DSP1
.
ö_cou¡
 = 1; ;

239 0x2F: 
DSP1
.
ö_cou¡
=1; ;

243 
DSP1
.
comm™d
=0x1f;

244 0x1f: 
DSP1
.
ö_cou¡
 = 1; ;

249 
DSP1
.
ö_cou¡
 = 0;

250 
DSP1
.
waôög4comm™d
 = 
TRUE
;

251 
DSP1
.
fú°_∑ømëî
 = 
TRUE
;

254 
DSP1
.
ö_cou¡
<<=1;

258 
DSP1
.
∑ømëîs
 [DSP1.
ö_ödex
] = 
byã
;

259 
DSP1
.
fú°_∑ømëî
 = 
FALSE
;

260 
DSP1
.
ö_ödex
++;

263 i‡(
DSP1
.
waôög4comm™d
 ||

264 (
DSP1
.
fú°_∑ømëî
 && 
byã
 == 0x80))

266 
DSP1
.
waôög4comm™d
 = 
TRUE
;

267 
DSP1
.
fú°_∑ømëî
 = 
FALSE
;

269 if(
DSP1
.
fú°_∑ømëî
 && (DSP1.
ö_cou¡
 !0 || (DSP1.ö_cou¡==0&&DSP1.
ö_ödex
==0)))

277 i‡(
DSP1
.
ö_cou¡
)

280 i‡(--
DSP1
.
ö_cou¡
 == 0)

283 
DSP1
.
waôög4comm™d
 = 
TRUE
;

284 
DSP1
.
out_ödex
 = 0;

285 
DSP1
.
comm™d
)

288 
DSP1
.
out_cou¡
=2048;

291 
Op00Mu…ùliˇnd
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

292 
Op00Mu…ùlõr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

294 
	`DSPOp00
 ();

296 
DSP1
.
out_cou¡
 = 2;

297 
DSP1
.
ouçut
 [0] = 
Op00Resu…
&0xFF;

298 
DSP1
.
ouçut
 [1] = (
Op00Resu…
>>8)&0xFF;

302 
Op20Mu…ùliˇnd
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

303 
Op20Mu…ùlõr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

305 
	`DSPOp20
 ();

307 
DSP1
.
out_cou¡
 = 2;

308 
DSP1
.
ouçut
 [0] = 
Op20Resu…
&0xFF;

309 
DSP1
.
ouçut
 [1] = (
Op20Resu…
>>8)&0xFF;

314 
Op10C€fficõ¡
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

315 
Op10Exp⁄ít
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

317 
	`DSPOp10
 ();

319 
DSP1
.
out_cou¡
 = 4;

320 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(((
öt16
Ë
Op10C€fficõ¡R
)&0xFF);

321 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((((
öt16
Ë
Op10C€fficõ¡R
)>>8)&0xFF);

322 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(((
öt16
Ë
Op10Exp⁄ítR
)&0xff);

323 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((((
öt16
Ë
Op10Exp⁄ítR
)>>8)&0xff);

328 
Op04AngÀ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

329 
Op04Radius
 = (
uöt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

331 
	`DSPOp04
 ();

333 
DSP1
.
out_cou¡
 = 4;

334 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op04Sö
&0xFF);

335 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op04Sö
>>8)&0xFF);

336 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op04Cos
&0xFF);

337 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op04Cos
>>8)&0xFF);

341 
Op08X
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

342 
Op08Y
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

343 
Op08Z
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

345 
	`DSPOp08
 ();

347 
DSP1
.
out_cou¡
 = 4;

348 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(((
öt16
Ë
Op08Ll
)&0xFF);

349 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((((
öt16
Ë
Op08Ll
)>>8)&0xFF);

350 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(((
öt16
Ë
Op08Lh
)&0xFF);

351 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((((
öt16
Ë
Op08Lh
)>>8)&0xFF);

356 
Op18X
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

357 
Op18Y
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

358 
Op18Z
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

359 
Op18R
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

361 
	`DSPOp18
 ();

363 
DSP1
.
out_cou¡
 = 2;

364 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op18D
&0xFF);

365 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op18D
>>8)&0xFF);

370 
Op38X
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

371 
Op38Y
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

372 
Op38Z
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

373 
Op38R
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

375 
	`DSPOp38
 ();

377 
DSP1
.
out_cou¡
 = 2;

378 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op38D
&0xFF);

379 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op38D
>>8)&0xFF);

383 
Op28X
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

384 
Op28Y
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

385 
Op28Z
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

387 
	`DSPOp28
 ();

389 
DSP1
.
out_cou¡
 = 2;

390 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op28R
&0xFF);

391 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op28R
>>8)&0xFF);

396 
Op0CA
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

397 
Op0CX1
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

398 
Op0CY1
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

400 
	`DSPOp0C
 ();

402 
DSP1
.
out_cou¡
 = 4;

403 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op0CX2
&0xFF);

404 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op0CX2
>>8)&0xFF);

405 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op0CY2
&0xFF);

406 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op0CY2
>>8)&0xFF);

411 
Op1CZ
 = (
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

413 
Op1CY
 = (
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

414 
Op1CX
 = (
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

415 
Op1CXBR
 = (
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

416 
Op1CYBR
 = (
DSP1
.
∑ømëîs
 [8]|(DSP1.parameters[9]<<8));

417 
Op1CZBR
 = (
DSP1
.
∑ømëîs
 [10]|(DSP1.parameters[11]<<8));

419 
	`DSPOp1C
 ();

421 
DSP1
.
out_cou¡
 = 6;

422 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op1CXAR
&0xFF);

423 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op1CXAR
>>8)&0xFF);

424 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op1CYAR
&0xFF);

425 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op1CYAR
>>8)&0xFF);

426 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op1CZAR
&0xFF);

427 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op1CZAR
>>8)&0xFF);

434 
Op02FX
 = ()(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

435 
Op02FY
 = ()(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

436 
Op02FZ
 = ()(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

437 
Op02LFE
 = ()(
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

438 
Op02LES
 = ()(
DSP1
.
∑ømëîs
 [8]|(DSP1.parameters[9]<<8));

439 
Op02AAS
 = ()(
DSP1
.
∑ømëîs
 [10]|(DSP1.parameters[11]<<8));

440 
Op02AZS
 = ()(
DSP1
.
∑ømëîs
 [12]|(DSP1.parameters[13]<<8));

442 
	`DSPOp02
 ();

444 
DSP1
.
out_cou¡
 = 8;

445 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op02VOF
&0xFF);

446 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op02VOF
>>8)&0xFF);

447 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op02VVA
&0xFF);

448 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op02VVA
>>8)&0xFF);

449 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op02CX
&0xFF);

450 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op02CX
>>8)&0xFF);

451 
DSP1
.
ouçut
 [6] = (
uöt8
Ë(
Op02CY
&0xFF);

452 
DSP1
.
ouçut
 [7] = (
uöt8
Ë((
Op02CY
>>8)&0xFF);

459 
Op0AVS
 = ()(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

461 
	`DSPOp0A
 ();

463 
DSP1
.
out_cou¡
 = 8;

464 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op0AA
&0xFF);

465 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op0AB
&0xFF);

466 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op0AC
&0xFF);

467 
DSP1
.
ouçut
 [6] = (
uöt8
Ë(
Op0AD
&0xFF);

468 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op0AA
>>8)&0xFF);

469 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op0AB
>>8)&0xFF);

470 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op0AC
>>8)&0xFF);

471 
DSP1
.
ouçut
 [7] = (
uöt8
Ë((
Op0AD
>>8)&0xFF);

472 
DSP1
.
ö_ödex
=0;

479 
Op06X
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

480 
Op06Y
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

481 
Op06Z
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

483 
	`DSPOp06
 ();

485 
DSP1
.
out_cou¡
 = 6;

486 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op06H
&0xff);

487 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op06H
>>8)&0xFF);

488 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op06V
&0xFF);

489 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op06V
>>8)&0xFF);

490 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op06S
&0xFF);

491 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op06S
>>8)&0xFF);

498 
Op0EH
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

499 
Op0EV
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

501 
	`DSPOp0E
 ();

503 
DSP1
.
out_cou¡
 = 4;

504 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op0EX
&0xFF);

505 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op0EX
>>8)&0xFF);

506 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op0EY
&0xFF);

507 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op0EY
>>8)&0xFF);

515 
Op01m
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

516 
Op01Zr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

517 
Op01Yr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

518 
Op01Xr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

520 
	`DSPOp01
 ();

525 
Op11m
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

526 
Op11Zr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

527 
Op11Yr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

528 
Op11Xr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [7]|(DSP1.parameters[7]<<8));

530 
	`DSPOp11
 ();

535 
Op21m
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

536 
Op21Zr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

537 
Op21Yr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

538 
Op21Xr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

540 
	`DSPOp21
 ();

547 
Op0DX
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

548 
Op0DY
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

549 
Op0DZ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

551 
	`DSPOp0D
 ();

553 
DSP1
.
out_cou¡
 = 6;

554 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op0DF
&0xFF);

555 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op0DF
>>8)&0xFF);

556 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op0DL
&0xFF);

557 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op0DL
>>8)&0xFF);

558 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op0DU
&0xFF);

559 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op0DU
>>8)&0xFF);

564 
Op1DX
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

565 
Op1DY
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

566 
Op1DZ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

568 
	`DSPOp1D
 ();

570 
DSP1
.
out_cou¡
 = 6;

571 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op1DF
&0xFF);

572 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op1DF
>>8)&0xFF);

573 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op1DL
&0xFF);

574 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op1DL
>>8)&0xFF);

575 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op1DU
&0xFF);

576 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op1DU
>>8)&0xFF);

581 
Op2DX
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

582 
Op2DY
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

583 
Op2DZ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

585 
	`DSPOp2D
 ();

587 
DSP1
.
out_cou¡
 = 6;

588 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op2DF
&0xFF);

589 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op2DF
>>8)&0xFF);

590 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op2DL
&0xFF);

591 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op2DL
>>8)&0xFF);

592 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op2DU
&0xFF);

593 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op2DU
>>8)&0xFF);

598 
Op03F
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

599 
Op03L
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

600 
Op03U
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

602 
	`DSPOp03
 ();

604 
DSP1
.
out_cou¡
 = 6;

605 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op03X
&0xFF);

606 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op03X
>>8)&0xFF);

607 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op03Y
&0xFF);

608 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op03Y
>>8)&0xFF);

609 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op03Z
&0xFF);

610 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op03Z
>>8)&0xFF);

614 
Op13F
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

615 
Op13L
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

616 
Op13U
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

618 
	`DSPOp13
 ();

620 
DSP1
.
out_cou¡
 = 6;

621 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op13X
&0xFF);

622 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op13X
>>8)&0xFF);

623 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op13Y
&0xFF);

624 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op13Y
>>8)&0xFF);

625 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op13Z
&0xFF);

626 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op13Z
>>8)&0xFF);

630 
Op23F
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

631 
Op23L
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

632 
Op23U
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

634 
	`DSPOp23
 ();

636 
DSP1
.
out_cou¡
 = 6;

637 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op23X
&0xFF);

638 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op23X
>>8)&0xFF);

639 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op23Y
&0xFF);

640 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op23Y
>>8)&0xFF);

641 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op23Z
&0xFF);

642 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op23Z
>>8)&0xFF);

647 
Op0BX
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

648 
Op0BY
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

649 
Op0BZ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

651 
	`DSPOp0B
 ();

653 
DSP1
.
out_cou¡
 = 2;

654 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op0BS
&0xFF);

655 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op0BS
>>8)&0xFF);

659 
Op1BX
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

660 
Op1BY
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

661 
Op1BZ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

663 
	`DSPOp1B
 ();

665 
DSP1
.
out_cou¡
 = 2;

666 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op1BS
&0xFF);

667 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op1BS
>>8)&0xFF);

671 
Op2BX
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

672 
Op2BY
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

673 
Op2BZ
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

675 
	`DSPOp2B
 ();

677 
DSP1
.
out_cou¡
 = 2;

678 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op2BS
&0xFF);

679 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op2BS
>>8)&0xFF);

684 
Op14Zr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

685 
Op14Xr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [2]|(DSP1.parameters[3]<<8));

686 
Op14Yr
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [4]|(DSP1.parameters[5]<<8));

687 
Op14U
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [6]|(DSP1.parameters[7]<<8));

688 
Op14F
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [8]|(DSP1.parameters[9]<<8));

689 
Op14L
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [10]|(DSP1.parameters[11]<<8));

691 
	`DSPOp14
 ();

693 
DSP1
.
out_cou¡
 = 6;

694 
DSP1
.
ouçut
 [0] = (
uöt8
Ë(
Op14Zº
&0xFF);

695 
DSP1
.
ouçut
 [1] = (
uöt8
Ë((
Op14Zº
>>8)&0xFF);

696 
DSP1
.
ouçut
 [2] = (
uöt8
Ë(
Op14Xº
&0xFF);

697 
DSP1
.
ouçut
 [3] = (
uöt8
Ë((
Op14Xº
>>8)&0xFF);

698 
DSP1
.
ouçut
 [4] = (
uöt8
Ë(
Op14Yº
&0xFF);

699 
DSP1
.
ouçut
 [5] = (
uöt8
Ë((
Op14Yº
>>8)&0xFF);

704 
Op2FUnknown
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

706 
	`DSPOp2F
 ();

708 
DSP1
.
out_cou¡
 = 2;

709 
DSP1
.
ouçut
 [0] = (
uöt8
)(
Op2FSize
&0xFF);

710 
DSP1
.
ouçut
 [1] = (
uöt8
)((
Op2FSize
>>8)&0xFF);

716 
Op0FRamsize
 = (
öt16
Ë(
DSP1
.
∑ømëîs
 [0]|(DSP1.parameters[1]<<8));

718 
	`DSPOp0F
 ();

720 
DSP1
.
out_cou¡
 = 2;

721 
DSP1
.
ouçut
 [0] = (
uöt8
)(
Op0FPass
&0xFF);

722 
DSP1
.
ouçut
 [1] = (
uöt8
)((
Op0FPass
>>8)&0xFF);

732 
	}
}

734 
uöt8
 
	$DSP1GëByã
(
uöt16
 
addªss
)

736 
uöt8
 
t
;

737 i‡((
addªss
 & 0xf000) == 0x6000 ||

739 (
addªss
&0x7fff) < 0x4000)

741 i‡(
DSP1
.
out_cou¡
)

744 
t
 = (
uöt8
Ë
DSP1
.
ouçut
 [DSP1.
out_ödex
];

748 
DSP1
.
out_ödex
++;

749 i‡(--
DSP1
.
out_cou¡
 == 0)

751 i‡(
DSP1
.
comm™d
 == 0x1a || DSP1.command == 0x0a)

753 
	`DSPOp0A
 ();

754 
DSP1
.
out_cou¡
 = 8;

755 
DSP1
.
out_ödex
 = 0;

756 
DSP1
.
ouçut
 [0] = (
Op0AA
&0xFF);

757 
DSP1
.
ouçut
 [1] = (
Op0AA
>>8)&0xFF;

758 
DSP1
.
ouçut
 [2] = (
Op0AB
&0xFF);

759 
DSP1
.
ouçut
 [3] = (
Op0AB
>>8)&0xFF;

760 
DSP1
.
ouçut
 [4] = (
Op0AC
&0xFF);

761 
DSP1
.
ouçut
 [5] = (
Op0AC
>>8)&0xFF;

762 
DSP1
.
ouçut
 [6] = (
Op0AD
&0xFF);

763 
DSP1
.
ouçut
 [7] = (
Op0AD
>>8)&0xFF;

765 if(
DSP1
.
comm™d
==0x1f)

767 if((
DSP1
.
out_ödex
%2)!=0)

769 
t
=(
uöt8
)
DSP1ROM
[
DSP1
.
out_ödex
>>1];

773 
t
=
DSP1ROM
[
DSP1
.
out_ödex
>>1]>>8;

777 
DSP1
.
waôög4comm™d
 = 
TRUE
;

784 
t
 = 0xff;

789 
t
 = 0x80;

790  
t
;

791 
	}
}

793 
	$DSP2SëByã
(
uöt8
 
byã
, 
uöt16
 
addªss
)

795 i‡((
addªss
 & 0xf000) == 0x6000 ||

796 (
addªss
 >= 0x8000 &&áddress < 0xc000))

798 i‡(
DSP1
.
waôög4comm™d
)

800 
DSP1
.
comm™d
 = 
byã
;

801 
DSP1
.
ö_ödex
 = 0;

802 
DSP1
.
waôög4comm™d
 = 
FALSE
;

805 
byã
)

807 0x01:
DSP1
.
ö_cou¡
=32;;

808 0x03:
DSP1
.
ö_cou¡
=1;;

809 0x05:
DSP1
.
ö_cou¡
=1;;

810 0x09:
DSP1
.
ö_cou¡
=4;;

811 0x06:
DSP1
.
ö_cou¡
=1;;

812 0x0D:
DSP1
.
ö_cou¡
=2;;

814 
	`¥ötf
("Op%02X\n",
byã
);

815 0x0f:
DSP1
.
ö_cou¡
=0;;

820 
DSP1
.
∑ømëîs
 [DSP1.
ö_ödex
] = 
byã
;

822 
DSP1
.
ö_ödex
++;

825 i‡(
DSP1
.
ö_cou¡
==DSP1.
ö_ödex
)

829 
DSP1
.
waôög4comm™d
 = 
TRUE
;

830 
DSP1
.
out_ödex
 = 0;

831 
DSP1
.
comm™d
)

834 if(
DSP2Op0DHasLí
)

836 
DSP2Op0DHasLí
=
Ál£
;

837 
DSP1
.
out_cou¡
=
DSP2Op0DOutLí
;

839 
	`DSP2_Op0D
();

843 
DSP2Op0DInLí
=
DSP1
.
∑ømëîs
[0];

844 
DSP2Op0DOutLí
=
DSP1
.
∑ømëîs
[1];

845 
DSP1
.
ö_ödex
=0;

846 
DSP1
.
ö_cou¡
=(
DSP2Op0DInLí
+1)>>1;

847 
DSP2Op0DHasLí
=
åue
;

848 if(
byã
)

849 
DSP1
.
waôög4comm™d
=
Ál£
;

853 if(
DSP2Op06HasLí
)

855 
DSP2Op06HasLí
=
Ál£
;

856 
DSP1
.
out_cou¡
=
DSP2Op06Lí
;

858 
	`DSP2_Op06
();

862 
DSP2Op06Lí
=
DSP1
.
∑ømëîs
[0];

863 
DSP1
.
ö_ödex
=0;

864 
DSP1
.
ö_cou¡
=
DSP2Op06Lí
;

865 
DSP2Op06HasLí
=
åue
;

866 if(
byã
)

867 
DSP1
.
waôög4comm™d
=
Ál£
;

871 
DSP1
.
out_cou¡
=32;

872 
	`DSP2_Op01
();

876 
DSP2Op09W‹d1
 = 
DSP1
.
∑ømëîs
[0] | (DSP1.parameters[1]<<8);

877 
DSP2Op09W‹d2
 = 
DSP1
.
∑ømëîs
[2] | (DSP1.parameters[3]<<8);

878 
DSP1
.
out_cou¡
=4;

879 #ifde‡
FAST_LSB_WORD_ACCESS


880 *(
uöt32
 *)
DSP1
.
ouçut
 = 
DSP2Op09W‹d1
 * 
DSP2Op09W‹d2
;

882 
uöt32
 
ãmp
;

883 
ãmp
=
DSP2Op09W‹d1
 * 
DSP2Op09W‹d2
;

884 
DSP1
.
ouçut
[0]=
ãmp
&0xFF;

885 
DSP1
.
ouçut
[1]=(
ãmp
>>8)&0xFF;

886 
DSP1
.
ouçut
[2]=(
ãmp
>>16)&0xFF;

887 
DSP1
.
ouçut
[3]=(
ãmp
>>24)&0xFF;

891 if(
DSP2Op05HasLí
)

893 
DSP2Op05HasLí
=
Ál£
;

894 
DSP1
.
out_cou¡
=
DSP2Op05Lí
;

896 
	`DSP2_Op05
();

900 
DSP2Op05Lí
=
DSP1
.
∑ømëîs
[0];

901 
DSP1
.
ö_ödex
=0;

902 
DSP1
.
ö_cou¡
=2*
DSP2Op05Lí
;

903 
DSP2Op05HasLí
=
åue
;

904 if(
byã
)

905 
DSP1
.
waôög4comm™d
=
Ál£
;

910 
DSP2Op05Tøn•¨ít

DSP1
.
∑ømëîs
[0];

919 
	}
}

921 
uöt8
 
	$DSP2GëByã
(
uöt16
 
addªss
)

923 
uöt8
 
t
;

924 i‡((
addªss
 & 0xf000) == 0x6000 ||

925 (
addªss
 >= 0x8000 &&áddress < 0xc000))

927 i‡(
DSP1
.
out_cou¡
)

929 
t
 = (
uöt8
Ë
DSP1
.
ouçut
 [DSP1.
out_ödex
];

930 
DSP1
.
out_ödex
++;

931 if(
DSP1
.
out_cou¡
==DSP1.
out_ödex
)

932 
DSP1
.
out_cou¡
=0;

936 
t
 = 0xff;

939 
t
 = 0x80;

940  
t
;

941 
	}
}

	@dsp1.h

90 #i‚de‡
_DSP1_H_


91 
	#_DSP1_H_


	)

93 (*
SëDSP
)(
uöt8
, 
uöt16
);

94 
	$uöt8
 (*
GëDSP
)(
uöt16
);

96 
	`DSP1SëByã
(
uöt8
 
byã
, 
uöt16
 
addªss
);

97 
uöt8
 
	`DSP1GëByã
(
uöt16
 
addªss
);

99 
	`DSP2SëByã
(
uöt8
 
byã
, 
uöt16
 
addªss
);

100 
uöt8
 
	`DSP2GëByã
(
uöt16
 
addªss
);

102 
	`DSP3SëByã
(
uöt8
 
byã
, 
uöt16
 
addªss
);

103 
uöt8
 
	`DSP3GëByã
(
uöt16
 
addªss
);

104 
	`DSP3_Re£t
();

106 
	`DSP4SëByã
(
uöt8
 
byã
, 
uöt16
 
addªss
);

107 
uöt8
 
	`DSP4GëByã
(
uöt16
 
addªss
);

109 
	sSDSP1
 {

110 
uöt8
 
vîsi⁄
;

111 
boﬁ8
 
waôög4comm™d
;

112 
boﬁ8
 
fú°_∑ømëî
;

113 
uöt8
 
comm™d
;

114 
uöt32
 
ö_cou¡
;

115 
uöt32
 
ö_ödex
;

116 
uöt32
 
out_cou¡
;

117 
uöt32
 
out_ödex
;

118 
uöt8
 
∑ømëîs
 [512];

119 
uöt8
 
ouçut
 [512];

122 
START_EXTERN_C


123 
	`S9xRe£tDSP1
 ();

124 
uöt8
 
	`S9xGëDSP
 (
uöt16
 
Addªss
);

125 
	`S9xSëDSP
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
);

126 
END_EXTERN_C


128 
SDSP1
 
DSP1
;

	@dsp1_gp32.h

41 #i‚de‡
_DSP1_H_


42 
	#_DSP1_H_


	)

45 
	tMATRIX
[3][3];

46 
	tVECTOR
[3];

48 
	eAâôudeM©rix
 { 
	mM©rixA
, 
	mM©rixB
, 
	mM©rixC
 };

50 
	sSDSP1
 {

51 
boﬁ8
 
	mwaôög4comm™d
;

52 
boﬁ8
 
	mfú°_∑ømëî
;

53 
uöt8
 
	mcomm™d
;

54 
uöt32
 
	mö_cou¡
;

55 
uöt32
 
	mö_ödex
;

56 
uöt32
 
	mout_cou¡
;

57 
uöt32
 
	mout_ödex
;

58 
uöt16
 
	m∑ømëîs
 [10];

59 
uöt16
 
	mouçut
 [10];

62 
MATRIX
 
	mvMa
;

63 
MATRIX
 
	mvMb
;

64 
MATRIX
 
	mvMc
;

69 
MATRIX
 
	mvM
;

70 
VECTOR
 
	mvT
;

73 
	mvFov
;

76 
	mvPœ√D
;

79 
	mvH‹iz⁄
;

82 
S¸ìnToGround
(
VECTOR
 &
v
, 
X2d
, 
Y2d
);

84 
	mMATRIX
 &
GëM©rix
–
AâôudeM©rix
 
M©rix
 );

90 
	sDSP1_P¨amëî


92 
DSP1_P¨amëî
–
öt16
 
Fx
, i¡16 
Fy
, i¡16 
Fz
,

93 
uöt16
 
L„
, uöt16 
Les
,

94 
öt8
 
Aas
, i¡8 
Azs
 );

97 
öt16
 
	mVof
;

101 
öt16
 
	mVva
;

106 
öt16
 
	mCx
;

107 
öt16
 
	mCy
;

111 
	sDSP1_Ra°î


113 
DSP1_Ra°î
–
öt16
 
Vs
 );

117 
öt16
 
	mAn
;

118 
öt16
 
	mBn
;

119 
öt16
 
	mCn
;

120 
öt16
 
	mDn
;

124 
	sDSP1_Proje˘


126 
DSP1_Proje˘
–
öt16
 
x
, i¡16 
y
, i¡16 
z
 );

128 
öt16
 
	mH
;

129 
öt16
 
	mV
;

130 
öt16
 
	mM
;

134 
	sDSP1_T¨gë


136 
DSP1_T¨gë
–
öt16
 
h
, i¡16 
v
 );

138 
öt16
 
	mX
;

139 
öt16
 
	mY
;

143 
	sDSP1_TrüngÀ


145 
DSP1_TrüngÀ
 (
öt16
 
Thëa
, i¡16 
r
 );

146 
öt16
 
	mS
;

147 
öt16
 
	mC
;

151 
	sDSP1_Radius


153 
DSP1_Radius
–
öt16
 
x
, i¡16 
y
, i¡16 
z
 );

154 
öt16
 
	mLl
;

155 
öt16
 
	mLh
;

159 
öt16
 
DSP1_R™ge
–öt16 
x
, i¡16 
y
, i¡16 
z
, i¡16 
r
 );

162 
öt16
 
DSP1_Di°™˚
–öt16 
x
, i¡16 
y
, i¡16 
z
 );

165 
	sDSP1_RŸ©e


167 
DSP1_RŸ©e
 (
öt16
 
A
, i¡16 
x1
, i¡16 
y1
);

169 
öt16
 
	mx2
;

170 
öt16
 
	my2
;

174 
	sDSP1_Pﬁ¨


176 
DSP1_Pﬁ¨
–
öt8
 
Za
, i¡8 
Xa
, i¡8 
Ya
, 
öt16
 
x
, i¡16 
y
, i¡16 
z
 );

178 
öt16
 
	mX
;

179 
öt16
 
	mY
;

180 
öt16
 
	mZ
;

184 
DSP1_Aâôude
–
öt16
 
m
, 
öt8
 
Za
, i¡8 
Xa
, i¡8 
Ya
, 
AâôudeM©rix
 
M©rix
 );

187 
	sDSP1_Obje˘ive


189 
DSP1_Obje˘ive
–
öt16
 
x
, i¡16 
y
, i¡16 
z
, 
AâôudeM©rix
 
M©rix
 );

191 
öt16
 
	mF
;

192 
öt16
 
	mL
;

193 
öt16
 
	mU
;

197 
	sDSP1_Subje˘ive


199 
DSP1_Subje˘ive
–
öt16
 
F
, i¡16 
L
, i¡16 
U
, 
AâôudeM©rix
 
M©rix
 );

201 
öt16
 
	mX
;

202 
öt16
 
	mY
;

203 
öt16
 
	mZ
;

207 
öt16
 
DSP1_Sˇœr
–öt16 
x
, i¡16 
y
, i¡16 
z
, 
AâôudeM©rix
 
M©rix
 );

210 
	sDSP1_Gyøã


212 
DSP1_Gyøã
–
öt8
 
Zi
, i¡8 
Xi
, i¡8 
Yi
,

213 
öt8
 
dU
, i¡8 
dF
, i¡8 
dL
 );

215 
öt8
 
	mZ0
;

216 
öt8
 
	mX0
;

217 
öt8
 
	mY0
;

221 
öt16
 
DSP1_Mu…ùly
–öt16 
k
, i¡16 
I
 );

224 
	sDSP1_Invî£


226 
DSP1_Invî£
–
öt16
 
a
, i¡16 
b
 );

228 
öt16
 
	mA
;

229 
öt16
 
	mB
;

232 
START_EXTERN_C


233 
S9xRe£tDSP1
 ();

234 
uöt8
 
S9xGëDSP
 (
uöt16
 
Addªss
);

235 
S9xSëDSP
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
);

236 
	gEND_EXTERN_C


238 #i‚de‡
__GP32__


239 
SDSP1
 
DSP1
;

241 "C" 
SDSP1
 
DSP1
;

	@dsp1emu_fixed.c

18 #i‚de‡
__GP32__


19 
	~<°dio.h
>

20 
	~<°d¨g.h
>

22 
	~<m©h.h
>

24 #i‚de‡
__GP32__


25 
	~<°rög.h
>

26 
	~<°dlib.h
>

30 
	#funcSADDMULT1616
(
a
,
b
,
c
,
d
Ë(((
öt64
Ô*(öt64)b+(öt64)c*(öt64)d)>>16);

	)

32 
	#SADDMULT1616
(
ªs
,
a
,
b
,
c
,
d
Ë{\

	)

33 
	gªs
=
funcSADDMULT1616
(
a
,
b
,
c
,
d
);\

35 
	#SMULT1616
(
ªs
,
a
,
b
Ë{\

	)

36 
	gªs
=
funcSADDMULT1616
(
a
,
b
,0,0);\

50 
	#__OPT__


	)

51 
	#__OPT01__


	)

52 
	#__OPT02__


	)

53 
	#__OPT04__


	)

54 
	#__OPT06__


	)

55 
	#__OPT0C__


56 
	#__OPT11__


	)

57 
	#__OPT21__


	)

58 
	#__OPT1C__


	)

60 #ifde‡
DebugDSP1


62 
FILE
 * 
	gLogFûe
 = 
NULL
;

64 
	$Log_Mesßge
 (*
Mesßge
, ...)

66 
Msg
[400];

67 
va_li°
 
≠
;

69 
	`va_°¨t
(
≠
,
Mesßge
);

70 
	`v•rötf
(
Msg
,
Mesßge
,
≠
 );

71 
	`va_íd
(
≠
);

73 
	`°rˇt
(
Msg
,"\r\n\0");

74 
	`fwrôe
(
Msg
,
	`°æí
(Msg),1,
LogFûe
);

75 
	`fÊush
 (
LogFûe
);

76 
	}
}

78 
	$Sèπ_Log
 ()

80 
LogFûeName
[255];

83 
	`°r˝y
(
LogFûeName
,"dsp1emu.log\0");

85 
LogFûe
 = 
	`f›í
(
LogFûeName
,"wb");

86 
	}
}

88 
	$St›_Log
 ()

90 i‡(
LogFûe
)

92 
	`f˛o£
(
LogFûe
);

93 
LogFûe
 = 
NULL
;

95 
	}
}

99 c⁄° 
	gDSP1ROM
[1024] = {

235 
	#INCR
 2048

236 
	#INCR_SHIFT
 5

237 
	#_FIX_SHIFT_
 16

	)

239 
öt32
 
	gCosTabÀ2
[
INCR
];

241 
öt32
 
	gSöTabÀ2
[
INCR
];

244 
	#AngÀ
(
x
Ë(((
öt32
)(x)>>
INCR_SHIFT
Ë& (
INCR
-1Ë)

	)

246 
	#Cos
(
x
Ë((
öt32
Ë
CosTabÀ2
[x])

	)

248 
	#Sö
(
x
Ë((
öt32
Ë
SöTabÀ2
[x])

	)

250 
	#PI_Êﬂt
 3.14159265358979323846264338327f

	)

251 
	#PI
 205887

252 

	)

254 
öt32
 
	$Aèn
(
öt32
 
x
)

257 i‡((
x
>=(1<<
_FIX_SHIFT_
)) || (x<=(1<<_FIX_SHIFT_)))

259 {
öt32
 
t
;
	`SMULT1616
—,
x
,x)

260  ( ( (
öt64
)
x
<<
_FIX_SHIFT_
 ) /(1+0.28f*
t
) );}

263  ( 
PI
/2 - 
	`Aèn
–((
öt64
)1<<(
_FIX_SHIFT_
*2))/
x
) );

264 
	}
}

271 
	$InôDSP
()

273 #ifde‡
__OPT__


274 
i
;

279 
i
=0; i<
INCR
; i++){

281 
CosTabÀ2
[
i
] = (
öt32
)((
	`cos
(()(2*
PI_Êﬂt
*i/
INCR
)))*(1<<
_FIX_SHIFT_
));

283 
SöTabÀ2
[
i
] = (
öt32
)((
	`sö
(()(2*
PI_Êﬂt
*i/
INCR
)))*(1<<
_FIX_SHIFT_
));

286 #ifde‡
DebugDSP1


287 
	`Sèπ_Log
();

289 
	}
}

292 
	gOp00Mu…ùliˇnd
;

293 
	gOp00Mu…ùlõr
;

294 
	gOp00Resu…
;

296 
	$DSPOp00
()

299 
Op00Resu…
=
Op00Mu…ùliˇnd
*
Op00Mu…ùlõr
>>15;

300 #ifde‡
DebugDSP1


301 
	`Log_Mesßge
("OP00 MULT %d*%d/32768=%d",
Op00Mu…ùliˇnd
,
Op00Mu…ùlõr
,
Op00Resu…
);

303 
	}
}

305 
	gOp20Mu…ùliˇnd
;

306 
	gOp20Mu…ùlõr
;

307 
	gOp20Resu…
;

309 
	$DSPOp20
()

311 
Op20Resu…

Op20Mu…ùliˇnd
 * 
Op20Mu…ùlõr
 >> 15;

312 
Op20Resu…
++;

314 #ifde‡
DebugDSP1


315 
	`Log_Mesßge
("OP20 MULT %d*%d/32768=%d",
Op20Mu…ùliˇnd
,
Op20Mu…ùlõr
,
Op20Resu…
);

317 
	}
}

320 sig√d 
	gOp10C€fficõ¡
;

321 sig√d 
	gOp10Exp⁄ít
;

322 sig√d 
	gOp10C€fficõ¡R
;

323 sig√d 
	gOp10Exp⁄ítR
;

325 
öt32
 
	gOp10Temp
;

327 
	$DSPOp10
()

329 
Op10Exp⁄ítR
=-
Op10Exp⁄ít
;

331 
Op10Temp
 = (
Op10C€fficõ¡
<<(
_FIX_SHIFT_
-15));

332 i‡(
Op10Temp
 == 0) {

333 
Op10C€fficõ¡R
 = 0;

336 
Op10Temp
 = ((
öt64
)(1)<<(
_FIX_SHIFT_
*2)) /Op10Temp ;

337 i‡(
Op10Temp
 > 0)

339 
Op10Temp
>=(1<<
_FIX_SHIFT_
)) {

341 
Op10Temp
=Op10Temp>>1;

342 
Op10Exp⁄ítR
++;

346 
Op10Temp
<-(1<<
_FIX_SHIFT_
)) {

348 
Op10Temp
=Op10Temp>>1;

349 
Op10Exp⁄ítR
++;

352 
Op10C€fficõ¡R
 = 
Op10Temp
>>(
_FIX_SHIFT_
-15);

353 #ifde‡
DebugDSP1


354 
	`Log_Mesßge
("OP10 INV %d*2^%d = %d*2^%d", 
Op10C€fficõ¡
, 
Op10Exp⁄ít
, 
Op10C€fficõ¡R
, 
Op10Exp⁄ítR
);

356 
	}
}

359 
	gOp04AngÀ
;

360 
	gOp04Radius
;

361 
	gOp04Sö
;

362 
	gOp04Cos
;

364 #ifde‡
__OPT04__


366 
	$DSPOp04
()

368 
™gÀ
;

370 
™gÀ
 = 
	`AngÀ
(
Op04AngÀ
);

374 
	`SMULT1616
(
Op04Sö
,
	`Sö
(
™gÀ
),
Op04Radius
)

375 
	`SMULT1616
(
Op04Cos
,
	`Cos
(
™gÀ
),
Op04Radius
)

377 #ifde‡
DebugDSP1


378 
	`Log_Mesßge
("OP04 AngÀ:%d Radius:%d",(
Op04AngÀ
/256)&255,
Op04Radius
);

379 
	`Log_Mesßge
("OP04 SIN:%d COS:%d",
Op04Sö
,
Op04Cos
);

381 
	}
}

384 
	$DSPOp04
()

386 
™gÀ
;

388 
™gÀ
 = 
Op04AngÀ
*2*
PI
/65536.0;

390 
Op04Sö
 = 
	`sö
(
™gÀ
Ë* 
Op04Radius
;

391 
Op04Cos
 = 
	`cos
(
™gÀ
Ë* 
Op04Radius
;

393 #ifde‡
DebugDSP1


394 
	`Log_Mesßge
("OP04 AngÀ:%d Radius:%d",(
Op04AngÀ
/256)&255,
Op04Radius
);

395 
	`Log_Mesßge
("OP04 SIN:%d COS:%d",
Op04Sö
,
Op04Cos
);

397 
	}
}

400 
	gOp0CA
;

401 
	gOp0CX1
;

402 
	gOp0CY1
;

403 
	gOp0CX2
;

404 
	gOp0CY2
;

406 #ifde‡
__OPT0C__


407 
	$DSPOp0C
()

411 
Op0CX2
=((
öt32
)
Op0CX1
*
	`Cos
(
	`AngÀ
(
Op0CA
))+(öt32)
Op0CY1
*
	`Sö
(AngÀ(Op0CA)))>>
_FIX_SHIFT_
;

412 
Op0CY2
=((
öt32
)
Op0CX1
*-
	`Sö
(
	`AngÀ
(
Op0CA
))+(öt32)
Op0CY1
*
	`Cos
(AngÀ(Op0CA)))>>
_FIX_SHIFT_
;

414 #ifde‡
DebugDSP1


415 
	`Log_Mesßge
("OP0C AngÀ:%d X:%d Y:%d CX:%d CY:%d",(
Op0CA
/256)&255,
Op0CX1
,
Op0CY1
,
Op0CX2
,
Op0CY2
);

417 
	}
}

419 
	$DSPOp0C
()

422 
Op0CX2
=(
Op0CX1
*
	`cos
(
Op0CA
*2*
PI
/65536.0)+
Op0CY1
*
	`sö
(Op0CA*2*PI/65536.0));

423 
Op0CY2
=(
Op0CX1
*-
	`sö
(
Op0CA
*2*
PI
/65536.0)+
Op0CY1
*
	`cos
(Op0CA*2*PI/65536.0));

424 #ifde‡
DebugDSP1


425 
	`Log_Mesßge
("OP0C AngÀ:%d X:%d Y:%d CX:%d CY:%d",(
Op0CA
/256)&255,
Op0CX1
,
Op0CY1
,
Op0CX2
,
Op0CY2
);

427 
	}
}

431 
	gOp02FX
;

432 
	gOp02FY
;

433 
	gOp02FZ
;

434 
	gOp02LFE
;

435 
	gOp02LES
;

436 
	gOp02AAS
;

437 
	gOp02AZS
;

438 
	gOp02VOF
;

439 
	gOp02VVA
;

441 
	gOp02CX
;

442 
	gOp02CY
;

454 
öt32
 
	gOp02CXF
;

455 
öt32
 
	gOp02CYF
;

456 
öt32
 
	gVõwîX0
;

457 
öt32
 
	gVõwîY0
;

458 
öt32
 
	gVõwîZ0
;

459 
öt32
 
	gVõwîX1
;

460 
öt32
 
	gVõwîY1
;

461 
öt32
 
	gVõwîZ1
;

462 
öt32
 
	gVõwîX
;

463 
öt32
 
	gVõwîY
;

464 
öt32
 
	gVõwîZ
;

465 
	gVõwîAX
;

466 
	gVõwîAY
;

467 
	gVõwîAZ
;

485 
öt32
 
	gNumbîOfSl›e
;

486 
öt32
 
	gS¸ìnX
;

487 
öt32
 
	gS¸ìnY
;

488 
öt32
 
	gS¸ìnZ
;

489 
öt32
 
	gT›Le·S¸ìnX
;

490 
öt32
 
	gT›Le·S¸ìnY
;

491 
öt32
 
	gT›Le·S¸ìnZ
;

492 
öt32
 
	gBŸtomRightS¸ìnX
;

493 
öt32
 
	gBŸtomRightS¸ìnY
;

494 
öt32
 
	gBŸtomRightS¸ìnZ
;

495 
öt32
 
	gRódy
;

496 
öt32
 
	gRa°îLX
;

497 
öt32
 
	gRa°îLY
;

498 
öt32
 
	gRa°îLZ
;

499 
öt32
 
	gS¸ìnLX1
;

500 
öt32
 
	gS¸ìnLY1
;

501 
öt32
 
	gS¸ìnLZ1
;

502 
	gRevî£dLES
;

503 
	gOp02LESb
;

509 
öt32
 
	gNAzsB
,
	gNAasB
;

510 
öt32
 
	gVõwîXc
;

511 
öt32
 
	gVõwîYc
;

512 
öt32
 
	gVõwîZc
;

513 
öt32
 
	gCíãrX
,
	gCíãrY
;

514 
	gOp02CYSup
,
	gOp02CXSup
;

516 
öt32
 
	gCXdi°™˚
;

518 
	#VofAngÀ
 0x3880

	)

520 
	gTVÆDebug
,
	gTVÆDebug2
;

521 
	gS¸Di•l
;

524 #ifde‡
__OPT02__


525 
	$DSPOp02
()

527 
VõwîZ1
=-
	`Cos
(
	`AngÀ
(
Op02AZS
));

530 
	`SMULT1616
(
VõwîX1
,
	`Sö
(
	`AngÀ
(
Op02AZS
)),Sö(AngÀ(
Op02AAS
)))

531 
	`SMULT1616
(
VõwîY1
,
	`Sö
(
	`AngÀ
(
Op02AZS
)),
	`Cos
(AngÀ(
Op02AAS
)))

534 #ifde‡
debug02


535 
	`¥ötf
("\nVõwîX1 : %‡VõwîY1 : %‡VõwîZ1 : %f\n",
VõwîX1
,
VõwîY1
,

536 
VõwîZ1
);

537 
	`gëch
();

546 
VõwîX
=((
öt32
)
Op02FX
<<
_FIX_SHIFT_
)-
VõwîX1
*(öt32)
Op02LFE
;

547 
VõwîY
=((
öt32
)
Op02FY
<<
_FIX_SHIFT_
)-
VõwîY1
*(öt32)
Op02LFE
;

548 
VõwîZ
=((
öt32
)
Op02FZ
<<
_FIX_SHIFT_
)-
VõwîZ1
*(öt32)
Op02LFE
;

550 
S¸ìnX
=((
öt32
)
Op02FX
<<
_FIX_SHIFT_
)+
VõwîX1
*(öt32)(
Op02LES
-
Op02LFE
);

551 
S¸ìnY
=((
öt32
)
Op02FY
<<
_FIX_SHIFT_
)+
VõwîY1
*(öt32)(
Op02LES
-
Op02LFE
);

552 
S¸ìnZ
=((
öt32
)
Op02FZ
<<
_FIX_SHIFT_
)+
VõwîZ1
*(öt32)(
Op02LES
-
Op02LFE
);

554 #ifde‡
debug02


555 
	`¥ötf
("VõwîX : %‡VõwîY : %‡VõwîZ : %f\n",
VõwîX
,
VõwîY
,
VõwîZ
);

556 
	`¥ötf
("Op02FX : %d Op02FY : %d Op02FZ : %d\n",
Op02FX
,
Op02FY
,
Op02FZ
);

557 
	`¥ötf
("S¸ìnX : %‡S¸ìnY : %‡S¸ìnZ : %f\n",
S¸ìnX
,
S¸ìnY
,
S¸ìnZ
);

558 
	`gëch
();

560 i‡(
VõwîZ1
==0)ViewerZ1++;

561 
NumbîOfSl›e
=((
öt64
)
VõwîZ
<<
_FIX_SHIFT_
)/(-
VõwîZ1
);

565 
öt32
 
t
;

566 
	`SMULT1616
(
t
,
VõwîX1
,
NumbîOfSl›e
)

567 
Op02CX
=()(
Op02CXF
=(
VõwîX
+
t
)>>
_FIX_SHIFT_
);

568 
	`SMULT1616
(
t
,
VõwîY1
,
NumbîOfSl›e
)

569 
Op02CY
=()(
Op02CYF
=(
VõwîY
+
t
)>>
_FIX_SHIFT_
);

571 
Op02VOF
=0x0000;

572 
Revî£dLES
=0;

573 
Op02LESb
=
Op02LES
;

575 i‡((
Op02LES
>=
VofAngÀ
+16384) && (Op02LES<VofAngle+32768)) {

576 
Revî£dLES
=1;

577 
Op02LESb
=
VofAngÀ
+0x4000-(
Op02LES
-(VofAngle+0x4000));

580 
Op02VVA
 = ()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000)*6.2832/65536.0));

581 i‡((
Op02LESb
>=
VofAngÀ
) && (Op02LESb<=VofAngle+0x4000)) {

582 
Op02VOF
()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000-
VofAngÀ
)*6.2832/65536.0));

583 
Op02VVA
-=
Op02VOF
;

585 i‡(
Revî£dLES
){

586 
Op02VOF
=-Op02VOF;

590 
NAzsB
 = (
öt32
)(
Op02AZS
-0x4000);

592 
NAasB
 = (
öt32
)(
Op02AAS
);

595 i‡(
	`Sö
(
	`AngÀ
(
NAzsB
))==0) NAzsB=1043;

597 
S¸Di•l
=0;

599 i‡(
NAzsB
>-1565 ) {NAzsB=-1565;
S¸Di•l
=
Op02VVA
-0xFFDA;}

602 
CXdi°™˚
=((
öt64
)
	`Cos
(
	`AngÀ
(
NAzsB
))<<
_FIX_SHIFT_
)/
	`Sö
(Angle((NAzsB)));

605 
VõwîXc
=(
öt32
)
Op02FX
<<
_FIX_SHIFT_
;

606 
VõwîYc
=(
öt32
)
Op02FY
<<
_FIX_SHIFT_
;

607 
VõwîZc
=(
öt32
)
Op02FZ
<<
_FIX_SHIFT_
;

613 
	`SMULT1616
(
t
,-
	`Sö
(
	`AngÀ
(
NAasB
)),
VõwîZc
)

614 
	`SMULT1616
(
t
,t,
CXdi°™˚
)

615 
CíãrX
 = 
t
+
VõwîXc
;

616 
	`SMULT1616
(
t
,
	`Cos
(
	`AngÀ
(
NAasB
)),
VõwîZc
)

617 
	`SMULT1616
(
t
,t,
CXdi°™˚
)

618 
CíãrY
 = 
t
+
VõwîYc
;

619 
Op02CX
=
CíãrX
>>
_FIX_SHIFT_
;

620 
Op02CY
=
CíãrY
>>
_FIX_SHIFT_
;

622 
VõwîXc
=
VõwîX
;

623 
VõwîYc
=
VõwîY
;

624 
VõwîZc
=
VõwîZ
;

627 
	`SMULT1616
(
t
,-
	`Sö
(
	`AngÀ
(
NAasB
)),
VõwîZc
)

628 
	`SMULT1616
(
t
,t,
CXdi°™˚
)

629 
CíãrX
 = 
t
+
VõwîXc
;

636 i‡(
CíãrX
<(-32768<<
_FIX_SHIFT_
)) CenterX = (-32768<<_FIX_SHIFT_); if (CenterX>(32767<<_FIX_SHIFT_)) CenterX=(32767<<_FIX_SHIFT_);

637 
	`SMULT1616
(
t
,
	`Cos
(
	`AngÀ
(
NAasB
)),
VõwîZc
)

638 
	`SMULT1616
(
t
,t,
CXdi°™˚
)

639 
CíãrY
 = 
t
+
VõwîYc
;

640 i‡(
CíãrY
<(-32768<<
_FIX_SHIFT_
)) CenterY = (-32768<<_FIX_SHIFT_); if (CenterY>(32767<<_FIX_SHIFT_)) CenterY=(32767<<_FIX_SHIFT_);

655 #ifde‡
DebugDSP1


656 
	`Log_Mesßge
("OP02 FX:%d FY:%d FZ:%d LFE:%d LES:%d",
Op02FX
,
Op02FY
,
Op02FZ
,
Op02LFE
,
Op02LES
);

657 
	`Log_Mesßge
(" AAS:%d AZS:%d VOF:%d VVA:%d",
Op02AAS
,
Op02AZS
,
Op02VOF
,
Op02VVA
);

658 
	`Log_Mesßge
(" VX:%d VY:%d VZ:%d",()
VõwîX
,()
VõwîY
,()
VõwîZ
);

661 
	}
}

664 
	$DSPOp02
()

666 
VõwîZ1
=-
	`cos
(
Op02AZS
*6.2832/65536.0);

667 
VõwîX1
=
	`sö
(
Op02AZS
*6.2832/65536.0)*sö(
Op02AAS
*6.2832/65536.0);

668 
VõwîY1
=
	`sö
(
Op02AZS
*6.2832/65536.0)*
	`cos
(-
Op02AAS
*6.2832/65536.0);

670 #ifde‡
debug02


671 
	`¥ötf
("\nVõwîX1 : %‡VõwîY1 : %‡VõwîZ1 : %f\n",
VõwîX1
,
VõwîY1
,

672 
VõwîZ1
);

673 
	`gëch
();

675 
VõwîX
=
Op02FX
-
VõwîX1
*
Op02LFE
;

676 
VõwîY
=
Op02FY
-
VõwîY1
*
Op02LFE
;

677 
VõwîZ
=
Op02FZ
-
VõwîZ1
*
Op02LFE
;

679 
S¸ìnX
=
Op02FX
+
VõwîX1
*(
Op02LES
-
Op02LFE
);

680 
S¸ìnY
=
Op02FY
+
VõwîY1
*(
Op02LES
-
Op02LFE
);

681 
S¸ìnZ
=
Op02FZ
+
VõwîZ1
*(
Op02LES
-
Op02LFE
);

683 #ifde‡
debug02


684 
	`¥ötf
("VõwîX : %‡VõwîY : %‡VõwîZ : %f\n",
VõwîX
,
VõwîY
,
VõwîZ
);

685 
	`¥ötf
("Op02FX : %d Op02FY : %d Op02FZ : %d\n",
Op02FX
,
Op02FY
,
Op02FZ
);

686 
	`¥ötf
("S¸ìnX : %‡S¸ìnY : %‡S¸ìnZ : %f\n",
S¸ìnX
,
S¸ìnY
,
S¸ìnZ
);

687 
	`gëch
();

689 i‡(
VõwîZ1
==0)ViewerZ1++;

690 
NumbîOfSl›e
=
VõwîZ
/-
VõwîZ1
;

692 
Op02CX
=()(
Op02CXF
=
VõwîX
+
VõwîX1
*
NumbîOfSl›e
);

693 
Op02CY
=()(
Op02CYF
=
VõwîY
+
VõwîY1
*
NumbîOfSl›e
);

695 
VõwîXc
=
VõwîX
;

696 
VõwîYc
=
VõwîY
;

697 
VõwîZc
=
VõwîZ
;

699 
Op02VOF
=0x0000;

700 
Revî£dLES
=0;

701 
Op02LESb
=
Op02LES
;

702 i‡((
Op02LES
>=
VofAngÀ
+16384.0) && (Op02LES<VofAngle+32768.0)) {

703 
Revî£dLES
=1;

704 
Op02LESb
=
VofAngÀ
+0x4000-(
Op02LES
-(VofAngle+0x4000));

706 
Op02VVA
 = ()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000)*6.2832/65536.0));

707 i‡((
Op02LESb
>=
VofAngÀ
) && (Op02LESb<=VofAngle+0x4000)) {

708 
Op02VOF
()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000-
VofAngÀ
)*6.2832/65536.0));

709 
Op02VVA
-=
Op02VOF
;

711 i‡(
Revî£dLES
){

712 
Op02VOF
=-Op02VOF;

715 
NAzsB
 = (
Op02AZS
-0x4000)*6.2832/65536.0;

716 
NAasB
 = 
Op02AAS
*6.2832/65536.0;

718 i‡(
	`èn
(
NAzsB
)==0) NAzsB=0.1;

720 
S¸Di•l
=0;

721 i‡(
NAzsB
>-0.15Ë{NAzsB=-0.15;
S¸Di•l
=
Op02VVA
-0xFFDA;}

723 
CXdi°™˚
=1/
	`èn
(
NAzsB
);

725 
CíãrX
 = (-
	`sö
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîXc
;

726 i‡(
CíãrX
<-32768) CenterX = -32768; if (CenterX>32767) CenterX=32767;

727 
Op02CX
 = ()
CíãrX
;

728 
CíãrY
 = (
	`cos
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîYc
;

729 i‡(
CíãrY
<-32768) CenterY = -32768; if (CenterY>32767) CenterY=32767;

730 
Op02CY
 = ()
CíãrY
;

745 #ifde‡
DebugDSP1


746 
	`Log_Mesßge
("OP02 FX:%d FY:%d FZ:%d LFE:%d LES:%d",
Op02FX
,
Op02FY
,
Op02FZ
,
Op02LFE
,
Op02LES
);

747 
	`Log_Mesßge
(" AAS:%d AZS:%d VOF:%d VVA:%d",
Op02AAS
,
Op02AZS
,
Op02VOF
,
Op02VVA
);

748 
	`Log_Mesßge
(" VX:%d VY:%d VZ:%d",()
VõwîX
,()
VõwîY
,()
VõwîZ
);

751 
	}
}

754 
	gOp0AVS
;

755 
	gOp0AA
;

756 
	gOp0AB
;

757 
	gOp0AC
;

758 
	gOp0AD
;

778 
öt32
 
	gRa°îRX
;

779 
öt32
 
	gRa°îRY
;

780 
öt32
 
	gRa°îRZ
;

781 
öt32
 
	gRa°îLSl›eX
;

782 
öt32
 
	gRa°îLSl›eY
;

783 
öt32
 
	gRa°îLSl›eZ
;

784 
öt32
 
	gRa°îRSl›eX
;

785 
öt32
 
	gRa°îRSl›eY
;

786 
öt32
 
	gRa°îRSl›eZ
;

787 
öt32
 
	gGroundLX
;

788 
öt32
 
	gGroundLY
;

789 
öt32
 
	gGroundRX
;

790 
öt32
 
	gGroundRY
;

791 
öt32
 
	gDi°™˚
;

793 
öt32
 
	gNAzs
,
	gNAas
;

794 
öt32
 
	gRVPos
,
	gRHPos
,
	gRXRes
,
	gRYRes
;

798 
	$GëRXYPos
(){

799 
öt32
 
sˇœr
;

801 i‡(
Op02LES
==0) ;

804 
NAzs
 = 
NAzsB
 - 
	`Aèn
((
RVPos
Ë/ (
öt32
)
Op02LES
);

805 
NAas
 = 
NAasB
;

809 i‡(
	`Cos
(
	`AngÀ
(
NAzs
))==0) NAzs+=10;

810 i‡(
	`Sö
(
	`AngÀ
(
NAzs
))==0) NAzs+=10;

817 
RXRes
 = ((
öt64
)-
	`Sö
(
	`AngÀ
(
NAas
))*(öt64)
VõwîZc
/ ((öt64)(Sö(AngÀ(
NAzs
))<<
_FIX_SHIFT_
)/(öt64)
	`Cos
(AngÀ(NAzs)Ë)+
VõwîXc
);

818 
RYRes
 = ((
öt64
)
	`Cos
(
	`AngÀ
(
NAas
))*(öt64)
VõwîZc
/ ((öt64)(
	`Sö
(AngÀ(
NAzs
))<<
_FIX_SHIFT_
)/(öt64)Cos(AngÀ(NAzs)Ë)+
VõwîYc
);

819 
sˇœr
 = ((
VõwîZc
/
	`Sö
(
	`AngÀ
(
NAzs
)))/(
öt32
)
Op02LES
);

820 
öt32
 
t
;

821 
	`SMULT1616
(
t
,-
	`Sö
(
	`AngÀ
(
NAas
+
PI
/2)),
RHPos
)

822 
RXRes
 +
sˇœr
*
t
;

823 
	`SMULT1616
(
t
,
	`Cos
(
	`AngÀ
(
NAas
+
PI
/2)),
RHPos
)

824 
RYRes
 +
sˇœr
*
t
;

825 
	}
}

827 
	$DSPOp0A
()

830 
öt32
 
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
m
,
ypos
;

833 if(
Op0AVS
==0) {Op0AVS++; ;}

834 
ypos
=(
öt32
)(
Op0AVS
-
S¸Di•l
)<<
_FIX_SHIFT_
;

837 
RVPos
 = 
ypos
; 
RHPos
 = 0;

838 
	`GëRXYPos
(); 
x2
 = 
RXRes
; 
y2
 = 
RYRes
;

840 
RVPos
 = 
ypos
; 
RHPos
 = -128<<
_FIX_SHIFT_
;

841 
	`GëRXYPos
(); 
x3
 = 
RXRes
; 
y3
 = 
RYRes
;

843 
RVPos
 = 
ypos
; 
RHPos
 = 127<<
_FIX_SHIFT_
;

844 
	`GëRXYPos
(); 
x4
 = 
RXRes
; 
y4
 = 
RYRes
;

848 
m
 = (
x4
-
x3
)>>16; if (m>32767) m=32767; if (m<-32768) m=-32768;

849 
Op0AA
 = ()(
m
);

852 
m
 = (
y4
-
y3
)>>16; if (m>32767) m=32767; if (m<-32768) m=-32768;

853 
Op0AC
 = ()(
m
);

854 i‡(
ypos
==0){

855 
Op0AB
 = 0;

856 
Op0AD
 = 0;

860 
m
 = (
x2
-
CíãrX
)/
ypos
*256; if (m>32767) m=32767; if (m<-32768) m=-32768;

861 
Op0AB
 = ()(
m
);

863 
m
 = (
y2
-
CíãrY
)/
ypos
*256; if (m>32767) m=32767; if (m<-32768) m=-32768;

864 
Op0AD
 = ()(
m
);

867 
Op0AVS
+=1;

868 
	}
}

870 
	gOp06X
;

871 
	gOp06Y
;

872 
	gOp06Z
;

873 
	gOp06H
;

874 
	gOp06V
;

875 
	gOp06S
;

887 
öt32
 
	gObjPX
;

888 
öt32
 
	gObjPY
;

889 
öt32
 
	gObjPZ
;

890 
öt32
 
	gObjPX1
;

891 
öt32
 
	gObjPY1
;

892 
öt32
 
	gObjPZ1
;

893 
öt32
 
	gObjPX2
;

894 
öt32
 
	gObjPY2
;

895 
öt32
 
	gObjPZ2
;

896 
öt32
 
	gDivideOp06
;

897 
	gTemp
;

898 
	gènvÆ2
;

900 #ifde‡
__OPT06__


901 
	$DSPOp06
()

904 
ObjPX
=
Op06X
-
Op02FX
;

905 
ObjPY
=
Op06Y
-
Op02FY
;

906 
ObjPZ
=
Op06Z
-
Op02FZ
;

911 
ènvÆ2
 = 
	`AngÀ
(-
Op02AAS
+32768);

914 
	`SADDMULT1616
(
ObjPX1
,
ObjPX
,
	`Cos
(
ènvÆ2
),
ObjPY
,-
	`Sö
(tanval2))

916 
	`SADDMULT1616
(
ObjPY1
,
ObjPX
,
	`Sö
(
ènvÆ2
),
ObjPY
,
	`Cos
(tanval2))

917 
ObjPZ1
=
ObjPZ
;

922 
ènvÆ2
 = 
	`AngÀ
(-
Op02AZS
);

924 
ObjPX2
=
ObjPX1
;

926 
	`SADDMULT1616
(
ObjPY2
,
ObjPY1
,
	`Cos
(
ènvÆ2
),
ObjPZ1
,-
	`Sö
(tanval2))

928 
	`SADDMULT1616
(
ObjPZ2
,
ObjPY1
,
	`Sö
(
ènvÆ2
),
ObjPZ1
,
	`Cos
(tanval2))

930 #ifde‡
debug06


931 
	`Log_Mesßge
("ObjPX2: %‡ObjPY2: %‡ObjPZ2: %f\n",
ObjPX2
,
ObjPY2
,
ObjPZ2
);

934 
ObjPZ2
=ObjPZ2-
Op02LFE
;

936 i‡(
ObjPZ2
<0)

938 
Op06H
=()(-(
öt64
)
ObjPX2
*(öt64)
Op02LES
/-(
ObjPZ2
));

939 
Op06V
=()(-(
öt64
)
ObjPY2
*(öt64)
Op02LES
/-(
ObjPZ2
));

940 
Op06S
=()(256*(
öt64
)(
Op02LES
<<
_FIX_SHIFT_
)/-
ObjPZ2
);

944 
Op06H
=0;

945 
Op06V
=14*16;

946 
Op06S
=0xFFFF;

950 #ifde‡
DebugDSP1


951 
	`Log_Mesßge
("OP06 X:%d Y:%d Z:%d",
Op06X
,
Op06Y
,
Op06Z
);

952 
	`Log_Mesßge
("OP06 H:%d V:%d S:%d",
Op06H
,
Op06V
,
Op06S
);

954 
	}
}

957 
	$DSPOp06
()

959 
ObjPX
=
Op06X
-
Op02FX
;

960 
ObjPY
=
Op06Y
-
Op02FY
;

961 
ObjPZ
=
Op06Z
-
Op02FZ
;

964 
ènvÆ
 = (-
Op02AAS
+32768)/65536.0*6.2832;

965 
ObjPX1
=(
ObjPX
*
	`cos
(
ènvÆ
)+
ObjPY
*-
	`sö
(tanval));

966 
ObjPY1
=(
ObjPX
*
	`sö
(
ènvÆ
)+
ObjPY
*
	`cos
(tanval));

967 
ObjPZ1
=
ObjPZ
;

969 #ifde‡
debug06


970 
	`Log_Mesßge
("AngÀ : %f", 
ènvÆ
);

971 
	`Log_Mesßge
("ObjPX1: %‡ObjPY1: %‡ObjPZ1: %f\n",
ObjPX1
,
ObjPY1
,
ObjPZ1
);

972 
	`Log_Mesßge
("cos—™vÆË: %‡ sö—™vÆË: %f", 
	`cos
(
ènvÆ
), 
	`sö
(tanval));

976 
ènvÆ
 = (-
Op02AZS
)/65536.0*6.2832;

977 
ObjPX2
=
ObjPX1
;

978 
ObjPY2
=(
ObjPY1
*
	`cos
(
ènvÆ
)+
ObjPZ1
*-
	`sö
(tanval));

979 
ObjPZ2
=(
ObjPY1
*
	`sö
(
ènvÆ
)+
ObjPZ1
*
	`cos
(tanval));

981 #ifde‡
debug06


982 
	`Log_Mesßge
("ObjPX2: %‡ObjPY2: %‡ObjPZ2: %f\n",
ObjPX2
,
ObjPY2
,
ObjPZ2
);

985 
ObjPZ2
=ObjPZ2-
Op02LFE
;

987 i‡(
ObjPZ2
<0)

989 
Op06H
=()(-
ObjPX2
*
Op02LES
/-(
ObjPZ2
));

990 
Op06V
=()(-
ObjPY2
*
Op02LES
/-(
ObjPZ2
));

991 
Op06S
=()(256*()
Op02LES
/-
ObjPZ2
);

995 
Op06H
=0;

996 
Op06V
=14*16;

997 
Op06S
=0xFFFF;

1001 #ifde‡
DebugDSP1


1002 
	`Log_Mesßge
("OP06 X:%d Y:%d Z:%d",
Op06X
,
Op06Y
,
Op06Z
);

1003 
	`Log_Mesßge
("OP06 H:%d V:%d S:%d",
Op06H
,
Op06V
,
Op06S
);

1005 
	}
}

1017 
öt32
 
	gm©rixB
[3][3];

1018 
öt32
 
	gm©rixB2
[3][3];

1019 
öt32
 
	gm©rixB3
[3][3];

1021 
öt32
 
	gm©rixA
[3][3];

1022 
öt32
 
	gm©rixA2
[3][3];

1023 
öt32
 
	gm©rixA3
[3][3];

1026 
	$Mu…M©rixB
(
öt32
 
ªsu…
[3][3],öt32 
m©1
[3][3],öt32 
m©2
[3][3])

1028 
ªsu…
[0][0]=(
m©1
[0][0]*
m©2
[0][0]+m©1[0][1]*m©2[1][0]+m©1[0][2]*m©2[2][0])>>
_FIX_SHIFT_
;

1029 
ªsu…
[0][1]=(
m©1
[0][0]*
m©2
[0][1]+m©1[0][1]*m©2[1][1]+m©1[0][2]*m©2[2][1])>>
_FIX_SHIFT_
;

1030 
ªsu…
[0][2]=(
m©1
[0][0]*
m©2
[0][2]+m©1[0][1]*m©2[1][2]+m©1[0][2]*m©2[2][2])>>
_FIX_SHIFT_
;

1032 
ªsu…
[1][0]=(
m©1
[1][0]*
m©2
[0][0]+m©1[1][1]*m©2[1][0]+m©1[1][2]*m©2[2][0])>>
_FIX_SHIFT_
;

1033 
ªsu…
[1][1]=(
m©1
[1][0]*
m©2
[0][1]+m©1[1][1]*m©2[1][1]+m©1[1][2]*m©2[2][1])>>
_FIX_SHIFT_
;

1034 
ªsu…
[1][2]=(
m©1
[1][0]*
m©2
[0][2]+m©1[1][1]*m©2[1][2]+m©1[1][2]*m©2[2][2])>>
_FIX_SHIFT_
;

1036 
ªsu…
[2][0]=(
m©1
[2][0]*
m©2
[0][0]+m©1[2][1]*m©2[1][0]+m©1[2][2]*m©2[2][0])>>
_FIX_SHIFT_
;

1037 
ªsu…
[2][1]=(
m©1
[2][0]*
m©2
[0][1]+m©1[2][1]*m©2[1][1]+m©1[2][2]*m©2[2][1])>>
_FIX_SHIFT_
;

1038 
ªsu…
[2][2]=(
m©1
[2][0]*
m©2
[0][2]+m©1[2][1]*m©2[1][2]+m©1[2][2]*m©2[2][2])>>
_FIX_SHIFT_
;

1040 
	}
}

1043 
	gOp01m
;

1044 
	gOp01Zr
;

1045 
	gOp01Xr
;

1046 
	gOp01Yr
;

1047 
	gOp11m
;

1048 
	gOp11Zr
;

1049 
	gOp11Xr
;

1050 
	gOp11Yr
;

1051 
	gOp21m
;

1052 
	gOp21Zr
;

1053 
	gOp21Xr
;

1054 
	gOp21Yr
;

1056 
öt32
 
	gsc
,
	gsc2
,
	gsc3
;

1060 #ifde‡
__OPT01__


1061 
	$DSPOp01
()

1063 
zr
,
yr
,
xr
;

1065 
zr
 = 
	`AngÀ
(
Op01Zr
);

1066 
xr
 = 
	`AngÀ
(
Op01Yr
);

1067 
yr
 = 
	`AngÀ
(
Op01Xr
);

1069 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

1070 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`Cos
(
xr
); m©rixB[1][2]=-
	`Sö
(xr);

1071 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`Sö
(
xr
); m©rixB[2][2]=
	`Cos
(xr);

1073 
m©rixB2
[0][0]=
	`Cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`Sö
(yr);

1074 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

1075 
m©rixB2
[2][0]=-
	`Sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`Cos
(yr);

1077 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1079 
m©rixB2
[0][0]=
	`Cos
(
zr
); m©rixB2[0][1]=-
	`Sö
(zr); matrixB2[0][2]=0;

1080 
m©rixB2
[1][0]=
	`Sö
(
zr
); m©rixB2[1][1]=
	`Cos
(zr); matrixB2[1][2]=0;

1081 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1083 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1085 
sc
 = (()
Op01m
)/32768.0;

1087 
m©rixA
[0][0]=
m©rixB
[0][0]; matrixA[0][1]=matrixB[0][1]; matrixA[0][2]=matrixB[0][2];

1088 
m©rixA
[1][0]=
m©rixB
[1][0]; matrixA[1][1]=matrixB[1][1]; matrixA[1][2]=matrixB[1][2];

1089 
m©rixA
[2][0]=
m©rixB
[2][0]; matrixA[2][1]=matrixB[2][1]; matrixA[2][2]=matrixB[2][2];

1091 #ifde‡
DebugDSP1


1092 
	`Log_Mesßge
("OP01 ZR: %d XR: %d YR: %d",
Op01Zr
,
Op01Xr
,
Op01Yr
);

1094 
	}
}

1098 
	$DSPOp01
()

1100 
zr
,
yr
,
xr
;

1102 
zr
 = (()
Op01Zr
)*6.2832/65536;

1103 
xr
 = (()
Op01Yr
)*6.2832/65536;

1104 
yr
 = (()
Op01Xr
)*6.2832/65536;

1106 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

1107 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`cos
(
xr
); m©rixB[1][2]=-
	`sö
(xr);

1108 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`sö
(
xr
); m©rixB[2][2]=
	`cos
(xr);

1110 
m©rixB2
[0][0]=
	`cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`sö
(yr);

1111 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

1112 
m©rixB2
[2][0]=-
	`sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`cos
(yr);

1114 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1116 
m©rixB2
[0][0]=
	`cos
(
zr
); m©rixB2[0][1]=-
	`sö
(zr); matrixB2[0][2]=0;

1117 
m©rixB2
[1][0]=
	`sö
(
zr
); m©rixB2[1][1]=
	`cos
(zr); matrixB2[1][2]=0;

1118 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1120 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1122 
sc
 = (()
Op01m
)/32768.0;

1124 
m©rixA
[0][0]=
m©rixB
[0][0]; matrixA[0][1]=matrixB[0][1]; matrixA[0][2]=matrixB[0][2];

1125 
m©rixA
[1][0]=
m©rixB
[1][0]; matrixA[1][1]=matrixB[1][1]; matrixA[1][2]=matrixB[1][2];

1126 
m©rixA
[2][0]=
m©rixB
[2][0]; matrixA[2][1]=matrixB[2][1]; matrixA[2][2]=matrixB[2][2];

1128 #ifde‡
DebugDSP1


1129 
	`Log_Mesßge
("OP01 ZR: %d XR: %d YR: %d",
Op01Zr
,
Op01Xr
,
Op01Yr
);

1131 
	}
}

1135 #ifde‡
__OPT11__


1136 
	$DSPOp11
()

1138 
zr
,
yr
,
xr
;

1140 
zr
 = 
	`AngÀ
(
Op11Zr
);

1141 
xr
 = 
	`AngÀ
(
Op11Yr
);

1142 
yr
 = 
	`AngÀ
(
Op11Xr
);

1144 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

1145 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`Cos
(
xr
); m©rixB[1][2]=-
	`Sö
(xr);

1146 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`Sö
(
xr
); m©rixB[2][2]=
	`Cos
(xr);

1148 
m©rixB2
[0][0]=
	`Cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`Sö
(yr);

1149 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

1150 
m©rixB2
[2][0]=-
	`Sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`Cos
(yr);

1152 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1154 
m©rixB2
[0][0]=
	`Cos
(
zr
); m©rixB2[0][1]=-
	`Sö
(zr); matrixB2[0][2]=0;

1155 
m©rixB2
[1][0]=
	`Sö
(
zr
); m©rixB2[1][1]=
	`Cos
(zr); matrixB2[1][2]=0;

1156 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1158 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1160 
sc2
 = (()
Op11m
)/32768.0;

1162 
m©rixA2
[0][0]=
m©rixB
[0][0]; matrixA2[0][1]=matrixB[0][1]; matrixA2[0][2]=matrixB[0][2];

1163 
m©rixA2
[1][0]=
m©rixB
[1][0]; matrixA2[1][1]=matrixB[1][1]; matrixA2[1][2]=matrixB[1][2];

1164 
m©rixA2
[2][0]=
m©rixB
[2][0]; matrixA2[2][1]=matrixB[2][1]; matrixA2[2][2]=matrixB[2][2];

1165 #ifde‡
DebugDSP1


1166 
	`Log_Mesßge
("OP11 ZR: %d XR: %d YR: %d SC: %d",
Op11Zr
,
Op11Xr
,
Op11Yr
,
Op11m
);

1168 
	}
}

1171 
	$DSPOp11
()

1173 
zr
,
yr
,
xr
;

1175 
zr
 = (()
Op11Zr
)*6.2832/65536;

1176 
xr
 = (()
Op11Yr
)*6.2832/65536;

1177 
yr
 = (()
Op11Xr
)*6.2832/65536;

1179 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

1180 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`cos
(
xr
); m©rixB[1][2]=-
	`sö
(xr);

1181 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`sö
(
xr
); m©rixB[2][2]=
	`cos
(xr);

1183 
m©rixB2
[0][0]=
	`cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`sö
(yr);

1184 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

1185 
m©rixB2
[2][0]=-
	`sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`cos
(yr);

1187 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1189 
m©rixB2
[0][0]=
	`cos
(
zr
); m©rixB2[0][1]=-
	`sö
(zr); matrixB2[0][2]=0;

1190 
m©rixB2
[1][0]=
	`sö
(
zr
); m©rixB2[1][1]=
	`cos
(zr); matrixB2[1][2]=0;

1191 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1193 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1195 
sc2
 = (()
Op11m
)/32768.0;

1197 
m©rixA2
[0][0]=
m©rixB
[0][0]; matrixA2[0][1]=matrixB[0][1]; matrixA2[0][2]=matrixB[0][2];

1198 
m©rixA2
[1][0]=
m©rixB
[1][0]; matrixA2[1][1]=matrixB[1][1]; matrixA2[1][2]=matrixB[1][2];

1199 
m©rixA2
[2][0]=
m©rixB
[2][0]; matrixA2[2][1]=matrixB[2][1]; matrixA2[2][2]=matrixB[2][2];

1200 #ifde‡
DebugDSP1


1201 
	`Log_Mesßge
("OP11 ZR: %d XR: %d YR: %d SC: %d",
Op11Zr
,
Op11Xr
,
Op11Yr
,
Op11m
);

1203 
	}
}

1207 #ifde‡
__OPT21__


1208 
	$DSPOp21
()

1210 
zr
,
yr
,
xr
;

1212 
zr
 = 
	`AngÀ
(
Op21Zr
);

1213 
xr
 = 
	`AngÀ
(
Op21Yr
);

1214 
yr
 = 
	`AngÀ
(
Op21Xr
);

1217 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

1218 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`Cos
(
xr
); m©rixB[1][2]=-
	`Sö
(xr);

1219 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`Sö
(
xr
); m©rixB[2][2]=
	`Cos
(xr);

1221 
m©rixB2
[0][0]=
	`Cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`Sö
(yr);

1222 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

1223 
m©rixB2
[2][0]=-
	`Sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`Cos
(yr);

1225 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1227 
m©rixB2
[0][0]=
	`Cos
(
zr
); m©rixB2[0][1]=-
	`Sö
(zr); matrixB2[0][2]=0;

1228 
m©rixB2
[1][0]=
	`Sö
(
zr
); m©rixB2[1][1]=
	`Cos
(zr); matrixB2[1][2]=0;

1229 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1231 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1233 
sc3
 = (()
Op21m
)/32768.0;

1235 
m©rixA3
[0][0]=
m©rixB
[0][0]; matrixA3[0][1]=matrixB[0][1]; matrixA3[0][2]=matrixB[0][2];

1236 
m©rixA3
[1][0]=
m©rixB
[1][0]; matrixA3[1][1]=matrixB[1][1]; matrixA3[1][2]=matrixB[1][2];

1237 
m©rixA3
[2][0]=
m©rixB
[2][0]; matrixA3[2][1]=matrixB[2][1]; matrixA3[2][2]=matrixB[2][2];

1238 #ifde‡
DebugDSP1


1239 
	`Log_Mesßge
("OP21 ZR: %d XR: %d YR: %d",
Op21Zr
,
Op21Xr
,
Op21Yr
);

1241 
	}
}

1244 
	$DSPOp21
()

1246 
zr
,
yr
,
xr
;

1248 
zr
 = (()
Op21Zr
)*6.2832/65536;

1249 
xr
 = (()
Op21Yr
)*6.2832/65536;

1250 
yr
 = (()
Op21Xr
)*6.2832/65536;

1252 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

1253 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`cos
(
xr
); m©rixB[1][2]=-
	`sö
(xr);

1254 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`sö
(
xr
); m©rixB[2][2]=
	`cos
(xr);

1256 
m©rixB2
[0][0]=
	`cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`sö
(yr);

1257 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

1258 
m©rixB2
[2][0]=-
	`sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`cos
(yr);

1260 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1262 
m©rixB2
[0][0]=
	`cos
(
zr
); m©rixB2[0][1]=-
	`sö
(zr); matrixB2[0][2]=0;

1263 
m©rixB2
[1][0]=
	`sö
(
zr
); m©rixB2[1][1]=
	`cos
(zr); matrixB2[1][2]=0;

1264 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1266 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1268 
sc3
 = (()
Op21m
)/32768.0;

1270 
m©rixA3
[0][0]=
m©rixB
[0][0]; matrixA3[0][1]=matrixB[0][1]; matrixA3[0][2]=matrixB[0][2];

1271 
m©rixA3
[1][0]=
m©rixB
[1][0]; matrixA3[1][1]=matrixB[1][1]; matrixA3[1][2]=matrixB[1][2];

1272 
m©rixA3
[2][0]=
m©rixB
[2][0]; matrixA3[2][1]=matrixB[2][1]; matrixA3[2][2]=matrixB[2][2];

1273 #ifde‡
DebugDSP1


1274 
	`Log_Mesßge
("OP21 ZR: %d XR: %d YR: %d",
Op21Zr
,
Op21Xr
,
Op21Yr
);

1276 
	}
}

1279 
	gOp0DX
;

1280 
	gOp0DY
;

1281 
	gOp0DZ
;

1282 
	gOp0DF
;

1283 
	gOp0DL
;

1284 
	gOp0DU
;

1285 
	gOp1DX
;

1286 
	gOp1DY
;

1287 
	gOp1DZ
;

1288 
	gOp1DF
;

1289 
	gOp1DL
;

1290 
	gOp1DU
;

1291 
	gOp2DX
;

1292 
	gOp2DY
;

1293 
	gOp2DZ
;

1294 
	gOp2DF
;

1295 
	gOp2DL
;

1296 
	gOp2DU
;

1298 
	#sw≠
(
a
,
b
Ë
ãmp
˜;a=b;bÒemp;

	)

1300 
	$DSPOp0D
()

1302 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
dë
,
ãmp
;

1303 
a2
,
b2
,
c2
,
d2
,
e2
,
f2
,
g2
,
h2
,
i2
,
x
,
y
,
z
;

1305 
a
 = 
m©rixA
[0][0]; 
b
=m©rixA[0][1]; 
c
=matrixA[0][2];

1306 
d
 = 
m©rixA
[1][0]; 
e
=m©rixA[1][1]; 
f
=matrixA[1][2];

1307 
g
 = 
m©rixA
[2][0]; 
h
=m©rixA[2][1]; 
i
=matrixA[2][2];

1311 
dë
 = 
a
*
e
*
i
+
b
*
f
*
g
+
c
*
d
*
h
-g*e*c-h*f*a-i*d*b;

1312 i‡(
dë
==0) {

1313 
Op0DF
=
Op0DX
;

1314 
Op0DL
=
Op0DY
;

1315 
Op0DU
=
Op0DZ
;

1316 #ifde‡
DebugDSP1


1317 
	`Log_Mesßge
("OP0D Error! Det == 0");

1321 
	`sw≠
(
d
,
b
); sw≠(
g
,
c
); sw≠(
h
,
f
);

1322 
b
=-b; 
d
=-d; 
f
=-f; 
h
=-h;

1323 
a2
=(
e
*
i
-
h
*
f
)/
dë
; 
b2
=(
d
*i-
g
*f)/dë; 
c2
=(d*h-g*e)/det;

1324 
d2
=(
b
*
i
-
h
*
c
)/
dë
; 
e2
=(
a
*i-
g
*c)/dë; 
f2
=(a*h-g*b)/det;

1325 
g2
=(
b
*
f
-
e
*
c
)/
dë
; 
h2
=(
a
*f-
d
*c)/dë; 
i2
=(a*e-d*b)/det;

1326 
x
=
Op0DX
; 
y
=
Op0DY
; 
z
=
Op0DZ
;

1327 
Op0DF
=()((
x
*
a2
+
y
*
d2
+
z
*
g2
)/2*
sc
);

1328 
Op0DL
=()((
x
*
b2
+
y
*
e2
+
z
*
h2
)/2*
sc
);

1329 
Op0DU
=()((
x
*
c2
+
y
*
f2
+
z
*
i2
)/2*
sc
);

1331 #ifde‡
DebugDSP1


1332 
	`Log_Mesßge
("OP0D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op0DX
,
Op0DY
,
Op0DZ
,
Op0DF
,
Op0DL
,
Op0DU
);

1334 
	}
}

1336 
	$DSPOp1D
()

1338 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
dë
,
ãmp
;

1339 
a2
,
b2
,
c2
,
d2
,
e2
,
f2
,
g2
,
h2
,
i2
,
x
,
y
,
z
;

1340 
a
 = 
m©rixA2
[0][0]; 
b
=m©rixA2[0][1]; 
c
=matrixA2[0][2];

1341 
d
 = 
m©rixA2
[1][0]; 
e
=m©rixA2[1][1]; 
f
=matrixA2[1][2];

1342 
g
 = 
m©rixA2
[2][0]; 
h
=m©rixA2[2][1]; 
i
=matrixA2[2][2];

1346 
dë
 = 
a
*
e
*
i
+
b
*
f
*
g
+
c
*
d
*
h
-g*e*c-h*f*a-i*d*b;

1347 i‡(
dë
==0) {

1348 
Op1DF
=0; 
Op1DL
=0; 
Op1DU
=0;

1351 
	`sw≠
(
d
,
b
); sw≠(
g
,
c
); sw≠(
h
,
f
);

1352 
b
=-b; 
d
=-d; 
f
=-f; 
h
=-h;

1353 
a2
=(
e
*
i
-
h
*
f
)/
dë
; 
b2
=(
d
*i-
g
*f)/dë; 
c2
=(d*h-g*e)/det;

1354 
d2
=(
b
*
i
-
h
*
c
)/
dë
; 
e2
=(
a
*i-
g
*c)/dë; 
f2
=(a*h-g*b)/det;

1355 
g2
=(
b
*
f
-
e
*
c
)/
dë
; 
h2
=(
a
*f-
d
*c)/dë; 
i2
=(a*e-d*b)/det;

1356 
x
=
Op1DX
; 
y
=
Op1DY
; 
z
=
Op1DZ
;

1357 
Op1DF
=()((
x
*
a2
+
y
*
d2
+
z
*
g2
)/2*
sc2
);

1358 
Op1DL
=()((
x
*
b2
+
y
*
e2
+
z
*
h2
)/2*
sc2
);

1359 
Op1DU
=()((
x
*
c2
+
y
*
f2
+
z
*
i2
)/2*
sc2
);

1360 #ifde‡
DebugDSP1


1361 
	`Log_Mesßge
("OP1D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op1DX
,
Op1DY
,
Op1DZ
,
Op1DF
,
Op1DL
,
Op1DU
);

1363 
	}
}

1365 
	$DSPOp2D
()

1367 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
dë
,
ãmp
;

1368 
a2
,
b2
,
c2
,
d2
,
e2
,
f2
,
g2
,
h2
,
i2
,
x
,
y
,
z
;

1369 
a
 = 
m©rixA3
[0][0]; 
b
=m©rixA3[0][1]; 
c
=matrixA3[0][2];

1370 
d
 = 
m©rixA3
[1][0]; 
e
=m©rixA3[1][1]; 
f
=matrixA3[1][2];

1371 
g
 = 
m©rixA3
[2][0]; 
h
=m©rixA3[2][1]; 
i
=matrixA3[2][2];

1375 
dë
 = 
a
*
e
*
i
+
b
*
f
*
g
+
c
*
d
*
h
-g*e*c-h*f*a-i*d*b;

1376 i‡(
dë
==0) {

1377 
Op2DF
=0; 
Op2DL
=0; 
Op2DU
=0;

1380 
	`sw≠
(
d
,
b
); sw≠(
g
,
c
); sw≠(
h
,
f
);

1381 
b
=-b; 
d
=-d; 
f
=-f; 
h
=-h;

1382 
a2
=(
e
*
i
-
h
*
f
)/
dë
; 
b2
=(
d
*i-
g
*f)/dë; 
c2
=(d*h-g*e)/det;

1383 
d2
=(
b
*
i
-
h
*
c
)/
dë
; 
e2
=(
a
*i-
g
*c)/dë; 
f2
=(a*h-g*b)/det;

1384 
g2
=(
b
*
f
-
e
*
c
)/
dë
; 
h2
=(
a
*f-
d
*c)/dë; 
i2
=(a*e-d*b)/det;

1385 
x
=
Op2DX
; 
y
=
Op2DY
; 
z
=
Op2DZ
;

1386 
Op2DF
=()((
x
*
a2
+
y
*
d2
+
z
*
g2
)/2*
sc3
);

1387 
Op2DL
=()((
x
*
b2
+
y
*
e2
+
z
*
h2
)/2*
sc3
);

1388 
Op2DU
=()((
x
*
c2
+
y
*
f2
+
z
*
i2
)/2*
sc3
);

1389 #ifde‡
DebugDSP1


1390 
	`Log_Mesßge
("OP2D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op2DX
,
Op2DY
,
Op2DZ
,
Op2DF
,
Op2DL
,
Op2DU
);

1392 
	}
}

1394 
	gOp03F
;

1395 
	gOp03L
;

1396 
	gOp03U
;

1397 
	gOp03X
;

1398 
	gOp03Y
;

1399 
	gOp03Z
;

1400 
	gOp13F
;

1401 
	gOp13L
;

1402 
	gOp13U
;

1403 
	gOp13X
;

1404 
	gOp13Y
;

1405 
	gOp13Z
;

1406 
	gOp23F
;

1407 
	gOp23L
;

1408 
	gOp23U
;

1409 
	gOp23X
;

1410 
	gOp23Y
;

1411 
	gOp23Z
;

1413 
	$DSPOp03
()

1415 
F
,
L
,
U
;

1417 
F
=
Op03F
; 
L
=
Op03L
; 
U
=
Op03U
;

1418 
Op03X
=()((
F
*
m©rixA
[0][0]+
L
*m©rixA[1][0]+
U
*m©rixA[2][0])/2*
sc
);

1419 
Op03Y
=()((
F
*
m©rixA
[0][1]+
L
*m©rixA[1][1]+
U
*m©rixA[2][1])/2*
sc
);

1420 
Op03Z
=()((
F
*
m©rixA
[0][2]+
L
*m©rixA[1][2]+
U
*m©rixA[2][2])/2*
sc
);

1422 #ifde‡
DebugDSP1


1423 
	`Log_Mesßge
("OP03 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op03F
,
Op03L
,
Op03U
,
Op03X
,
Op03Y
,
Op03Z
);

1425 
	}
}

1427 
	$DSPOp13
()

1429 
F
,
L
,
U
;

1430 
F
=
Op13F
; 
L
=
Op13L
; 
U
=
Op13U
;

1431 
Op13X
=()((
F
*
m©rixA2
[0][0]+
L
*m©rixA2[1][0]+
U
*m©rixA2[2][0])/2*
sc2
);

1432 
Op13Y
=()((
F
*
m©rixA2
[0][1]+
L
*m©rixA2[1][1]+
U
*m©rixA2[2][1])/2*
sc2
);

1433 
Op13Z
=()((
F
*
m©rixA2
[0][2]+
L
*m©rixA2[1][2]+
U
*m©rixA2[2][2])/2*
sc2
);

1434 #ifde‡
DebugDSP1


1435 
	`Log_Mesßge
("OP13 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op13F
,
Op13L
,
Op13U
,
Op13X
,
Op13Y
,
Op13Z
);

1437 
	}
}

1439 
	$DSPOp23
()

1441 
F
,
L
,
U
;

1442 
F
=
Op23F
; 
L
=
Op23L
; 
U
=
Op23U
;

1443 
Op23X
=()((
F
*
m©rixA3
[0][0]+
L
*m©rixA3[1][0]+
U
*m©rixA3[2][0])/2*
sc3
);

1444 
Op23Y
=()((
F
*
m©rixA3
[0][1]+
L
*m©rixA3[1][1]+
U
*m©rixA3[2][1])/2*
sc3
);

1445 
Op23Z
=()((
F
*
m©rixA3
[0][2]+
L
*m©rixA3[1][2]+
U
*m©rixA3[2][2])/2*
sc3
);

1446 #ifde‡
DebugDSP1


1447 
	`Log_Mesßge
("OP23 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op23F
,
Op23L
,
Op23U
,
Op23X
,
Op23Y
,
Op23Z
);

1449 
	}
}

1451 
	gOp14Zr
;

1452 
	gOp14Xr
;

1453 
	gOp14Yr
;

1454 
	gOp14U
;

1455 
	gOp14F
;

1456 
	gOp14L
;

1457 
	gOp14Zº
;

1458 
	gOp14Xº
;

1459 
	gOp14Yº
;

1462 
öt32
 
	gOp14Temp
;

1463 
	$DSPOp14
()

1466 
Op14Temp
=(
Op14Zr
*6.2832/65536.0)+(1/
	`cos
(
Op14Xr
*6.2832/65536.0))*((
Op14U
*6.2832/65536.0)*cos(
Op14Yr
*6.2832/65536.0)-(
Op14F
*6.2832/65536.0)*
	`sö
(Op14Yr*6.2832/65536.0));

1467 
Op14Zº
=()(
Op14Temp
*65536.0/6.2832);

1468 
Op14Temp
=(
Op14Xr
*6.2832/65536.0)+((
Op14U
*6.2832/65536.0)*
	`sö
(
Op14Yr
*6.2832/65536.0)+(
Op14F
*6.2832/65536.0)*
	`cos
(Op14Yr*6.2832/65536.0));

1469 
Op14Xº
=()(
Op14Temp
*65536.0/6.2832);

1470 
Op14Temp
=(
Op14Yr
*6.2832/65536.0)-
	`èn
(
Op14Xr
*6.2832/65536.0)*((
Op14U
*6.2832/65536.0)*
	`cos
(Op14Yr*6.2832/65536.0)+(
Op14F
*6.2832/65536.0)*
	`sö
(Op14Yr*6.2832/65536.0))+(
Op14L
*6.2832/65536.0);

1471 
Op14Yº
=()(
Op14Temp
*65536.0/6.2832);

1474 #ifde‡
DebugDSP1


1475 
	`Log_Mesßge
("OP14 X:%d Y%d Z:%D U:%d F:%d L:%d",
Op14Xr
,
Op14Yr
,
Op14Zr
,
Op14U
,
Op14F
,
Op14L
);

1476 
	`Log_Mesßge
("OP14 X:%d Y%d Z:%D",
Op14Xº
,
Op14Yº
,
Op14Zº
);

1478 
	}
}

1480 
	gOp0EH
;

1481 
	gOp0EV
;

1482 
	gOp0EX
;

1483 
	gOp0EY
;

1485 
	$DSPOp0E
()

1490 
RVPos
 = 
Op0EV
<<
_FIX_SHIFT_
;

1492 
RHPos
 = 
Op0EH
<<
_FIX_SHIFT_
;

1493 
	`GëRXYPos
();

1495 
Op0EX
 = 
RXRes
>>
_FIX_SHIFT_
;

1497 
Op0EY
 = 
RYRes
>>
_FIX_SHIFT_
;

1499 #ifde‡
DebugDSP1


1500 
	`Log_Mesßge
("OP0E COORDINATE H:%d V:%d X:%d Y:%d",
Op0EH
,
Op0EV
,
Op0EX
,
Op0EY
);

1502 
	}
}

1504 
	gOp0BX
;

1505 
	gOp0BY
;

1506 
	gOp0BZ
;

1507 
	gOp0BS
;

1508 
	gOp1BX
;

1509 
	gOp1BY
;

1510 
	gOp1BZ
;

1511 
	gOp1BS
;

1512 
	gOp2BX
;

1513 
	gOp2BY
;

1514 
	gOp2BZ
;

1515 
	gOp2BS
;

1517 
	$DSPOp0B
()

1520 
Op0BS
 = (
Op0BX
*
m©rixA
[0][0]+
Op0BY
*
m©rixA2
[0][1]+
Op0BZ
*m©rixA2[0][2])>>
_FIX_SHIFT_
;

1521 #ifde‡
DebugDSP1


1522 
	`Log_Mesßge
("OP0B");

1524 
	}
}

1526 
	$DSPOp1B
()

1529 
Op1BS
 = (
Op1BX
*
m©rixA2
[0][0]+
Op1BY
*m©rixA2[0][1]+
Op1BZ
*m©rixA2[0][2])>>
_FIX_SHIFT_
;

1530 #ifde‡
DebugDSP1


1531 
	`Log_Mesßge
("OP1B X: %d Y: %d Z: %d S: %d",
Op1BX
,
Op1BY
,
Op1BZ
,
Op1BS
);

1532 
	`Log_Mesßge
(" MX: %d MY: %d MZ: %d SˇÀ: %d",()(
m©rixA2
[0][0]*100),()(m©rixA2[0][1]*100),()(m©rixA2[0][2]*100),()(
sc2
*100));

1535 
	}
}

1537 
	$DSPOp2B
()

1540 
Op2BS
 = (
Op2BX
*
m©rixA3
[0][0]+
Op2BY
*m©rixA3[0][1]+
Op2BZ
*m©rixA3[0][2])>>
_FIX_SHIFT_
;

1541 #ifde‡
DebugDSP1


1542 
	`Log_Mesßge
("OP2B");

1544 
	}
}

1546 
	gOp08X
,
	gOp08Y
,
	gOp08Z
,
	gOp08Ll
,
	gOp08Lh
;

1547 
	gOp08Size
;

1549 
	$DSPOp08
()

1551 
Op08Size
=(
Op08X
*Op08X+
Op08Y
*Op08Y+
Op08Z
*Op08Z)*2;

1552 
Op08Ll
 = 
Op08Size
&0xFFFF;

1553 
Op08Lh
 = (
Op08Size
>>16) & 0xFFFF;

1554 #ifde‡
DebugDSP1


1555 
	`Log_Mesßge
("OP08 %d,%d,%d",
Op08X
,
Op08Y
,
Op08Z
);

1556 
	`Log_Mesßge
("OP08 ((Op08X^2)+(Op08Y^2)+(Op08X^2))=%x",
Op08Size
 );

1558 
	}
}

1560 
	gOp18X
,
	gOp18Y
,
	gOp18Z
,
	gOp18R
,
	gOp18D
;

1562 
	$DSPOp18
()

1565 
öt32
 
x
,
y
,
z
,
r
;

1566 
x
=
Op18X
; 
y
=
Op18Y
; 
z
=
Op18Z
; 
r
=
Op18R
;

1567 
r
 = (
x
*x+
y
*y+
z
*z-r*r);

1568 i‡(
r
>32767)Ñ=32767;

1569 i‡(
r
<-32768)Ñ=-32768;

1570 
Op18D
=()
r
;

1571 #ifde‡
DebugDSP1


1572 
	`Log_Mesßge
("OP18 X: %d Y: %d Z: %d R: %D DIFF %d",
Op18X
,
Op18Y
,
Op18Z
,
Op18D
);

1574 
	}
}

1576 
	gOp38X
,
	gOp38Y
,
	gOp38Z
,
	gOp38R
,
	gOp38D
;

1578 
	$DSPOp38
()

1580 
Op38D
 = (
Op38X
 * Op38X + 
Op38Y
 * Op38Y + 
Op38Z
 * Op38Z - 
Op38R
 * Op38R) >> 15;

1581 
Op38D
++;

1583 #ifde‡
DebugDSP1


1584 
	`Log_Mesßge
("OP38 X: %d Y: %d Z: %d R: %D DIFF %d",
Op38X
,
Op38Y
,
Op38Z
,
Op38D
);

1586 
	}
}

1589 
	gOp28X
;

1590 
	gOp28Y
;

1591 
	gOp28Z
;

1592 
	gOp28R
;

1594 
	$DSPOp28
()

1597 
Op28R
=()
	`sqπ
(()(
Op28X
*Op28X+
Op28Y
*Op28Y+
Op28Z
*Op28Z));

1598 #ifde‡
DebugDSP1


1599 
	`Log_Mesßge
("OP28 X:%d Y:%d Z:%d",
Op28X
,
Op28Y
,
Op28Z
);

1600 
	`Log_Mesßge
("OP28 Ve˘‹ Lígth %d",
Op28R
);

1602 
	}
}

1604 
	gOp1CAZ
;

1605 
	gOp1CX
,
	gOp1CY
,
	gOp1CZ
;

1606 
	gOp1CXBR
,
	gOp1CYBR
,
	gOp1CZBR
,
	gOp1CXAR
,
	gOp1CYAR
,
	gOp1CZAR
;

1607 
	gOp1CX1
;

1608 
	gOp1CY1
;

1609 
	gOp1CZ1
;

1610 
	gOp1CX2
;

1611 
	gOp1CY2
;

1612 
	gOp1CZ2
;

1614 #ifde‡
__OPT1C__


1615 
	$DSPOp1C
()

1617 
ya
,
xa
,
za
;

1618 
ya
 = 
	`AngÀ
(
Op1CX
);

1619 
xa
 = 
	`AngÀ
(
Op1CY
);

1620 
za
 = 
	`AngÀ
(
Op1CZ
);

1624 
Op1CX1
=(
Op1CXBR
*
	`Cos
(
za
)+
Op1CYBR
*
	`Sö
(za))>>
_FIX_SHIFT_
;

1626 
Op1CY1
=(
Op1CXBR
*-
	`Sö
(
za
)+
Op1CYBR
*
	`Cos
(za))>>
_FIX_SHIFT_
;

1627 
Op1CZ1
=
Op1CZBR
;

1630 
Op1CX2
=(
Op1CX1
*
	`Cos
(
ya
)+
Op1CZ1
*-
	`Sö
(ya))>>
_FIX_SHIFT_
;

1631 
Op1CY2
=
Op1CY1
;

1633 
Op1CZ2
=(
Op1CX1
*
	`Sö
(
ya
)+
Op1CZ1
*
	`Cos
(ya))>>
_FIX_SHIFT_
;

1635 
Op1CXAR
=
Op1CX2
;

1637 
Op1CYAR
=(
Op1CY2
*
	`Cos
(
xa
)+
Op1CZ2
*
	`Sö
(xa))>>
_FIX_SHIFT_
;

1639 
Op1CZAR
=(
Op1CY2
*-
	`Sö
(
xa
)+
Op1CZ2
*
	`Cos
(xa))>>
_FIX_SHIFT_
;

1641 #ifde‡
DebugDSP1


1642 
	`Log_Mesßge
("OP1C Aµly M©rix CX:%d CY:%d CZ",
Op1CXAR
,
Op1CYAR
,
Op1CZAR
);

1644 
	}
}

1646 
	$DSPOp1C
()

1648 
ya
,
xa
,
za
;

1649 
ya
 = 
Op1CX
/65536.0*
PI
*2;

1650 
xa
 = 
Op1CY
/65536.0*
PI
*2;

1651 
za
 = 
Op1CZ
/65536.0*
PI
*2;

1653 
Op1CX1
=(
Op1CXBR
*
	`cos
(
za
)+
Op1CYBR
*
	`sö
(za));

1654 
Op1CY1
=(
Op1CXBR
*-
	`sö
(
za
)+
Op1CYBR
*
	`cos
(za));

1655 
Op1CZ1
=
Op1CZBR
;

1657 
Op1CX2
=(
Op1CX1
*
	`cos
(
ya
)+
Op1CZ1
*-
	`sö
(ya));

1658 
Op1CY2
=
Op1CY1
;

1659 
Op1CZ2
=(
Op1CX1
*
	`sö
(
ya
)+
Op1CZ1
*
	`cos
(ya));

1661 
Op1CXAR
=
Op1CX2
;

1662 
Op1CYAR
=(
Op1CY2
*
	`cos
(
xa
)+
Op1CZ2
*
	`sö
(xa));

1663 
Op1CZAR
=(
Op1CY2
*-
	`sö
(
xa
)+
Op1CZ2
*
	`cos
(xa));

1665 #ifde‡
DebugDSP1


1666 
	`Log_Mesßge
("OP1C Aµly M©rix CX:%d CY:%d CZ",
Op1CXAR
,
Op1CYAR
,
Op1CZAR
);

1668 
	}
}

1672 
	gOp0FRamsize
;

1673 
	gOp0FPass
;

1675 
	$DSPOp0F
()

1677 
Op0FPass
 = 0x0000;

1679 #ifde‡
DebugDSP1


1680 
	`Log_Mesßge
("OP0F RAM Te° Pass:%d", 
Op0FPass
);

1682 
	}
}

1685 
	gOp2FUnknown
;

1686 
	gOp2FSize
;

1688 
	$DSPOp2F
()

1690 
Op2FSize
=0x100;

1691 
	}
}

	@dsp1emu_yo.c

19 #i‚de‡
__GP32__


20 
	~<°dio.h
>

21 
	~<°d¨g.h
>

23 
	~<m©h.h
>

25 #i‚de‡
__GP32__


26 
	~<°rög.h
>

27 
	~<°dlib.h
>

30 #ifde‡
__GP32__


31 
	~"gp32_func.h
"

41 
	#__OPT__


	)

42 
	#__OPT01__


	)

43 
	#__OPT02__


	)

44 
	#__OPT04__


45 
	#__OPT06__


	)

46 
	#__OPT0C__


47 
	#__OPT11__


	)

48 
	#__OPT21__


	)

49 
	#__OPT1C__


	)

51 #ifde‡
DebugDSP1


53 
FILE
 * 
	gLogFûe
 = 
NULL
;

55 
	$Log_Mesßge
 (*
Mesßge
, ...)

57 
Msg
[400];

58 
va_li°
 
≠
;

60 
	`va_°¨t
(
≠
,
Mesßge
);

61 
	`v•rötf
(
Msg
,
Mesßge
,
≠
 );

62 
	`va_íd
(
≠
);

64 
	`°rˇt
(
Msg
,"\r\n\0");

65 
	`fwrôe
(
Msg
,
	`°æí
(Msg),1,
LogFûe
);

66 
	`fÊush
 (
LogFûe
);

67 
	}
}

69 
	$Sèπ_Log
 ()

71 
LogFûeName
[255];

74 
	`°r˝y
(
LogFûeName
,"dsp1emu.log\0");

76 
LogFûe
 = 
	`f›í
(
LogFûeName
,"wb");

77 
	}
}

79 
	$St›_Log
 ()

81 i‡(
LogFûe
)

83 
	`f˛o£
(
LogFûe
);

84 
LogFûe
 = 
NULL
;

86 
	}
}

95 *
	gCosTabÀ2
;

96 *
	gSöTabÀ2
;

98 
öt32
 *
	gCosTabÀ2Fix
;

99 
öt32
 *
	gSöTabÀ2Fix
;

101 
	#INCR
 2048

	)

102 
	#AngÀ
(
x
Ë(((x)/(65536/
INCR
)Ë& (INCR-1))

	)

104 
	#AngÀFix
(
x
Ë(((x)>>5Ë& (
INCR
-1))

	)

106 
	#Cos
(
x
Ë((Ë
CosTabÀ2
[x])

	)

107 
	#Sö
(
x
Ë((Ë
SöTabÀ2
[x])

	)

109 
	#CosFix
(
x
Ë(
CosTabÀ2Fix
[x])

	)

110 
	#SöFix
(
x
Ë(
SöTabÀ2Fix
[x])

	)

112 
	#PI
 3.14159265358979323846264338327

	)

114 
	$Aèn
(
x
)

116 i‡((
x
>=1) || (x<=1))

117  (
x
/(1+0.28*x*x));

119  (
PI
/2 - 
	`Aèn
(1/
x
));

120 
	}
}

128 
	$InôDSP
()

130 #ifde‡
__OPT__


131 
i
;

132 
CosTabÀ2
 = (*Ë
	`mÆloc
(
INCR
*());

133 
SöTabÀ2
 = (*Ë
	`mÆloc
(
INCR
*());

135 
CosTabÀ2Fix
 = (
öt32
 *Ë
	`mÆloc
(
INCR
*(int32));

136 
SöTabÀ2Fix
 = (
öt32
 *Ë
	`mÆloc
(
INCR
*(int32));

137 
i
=0; i<
INCR
; i++){

138 
CosTabÀ2
[
i
] = (
	`cos
(()(2*
PI
*i/
INCR
)));

139 
SöTabÀ2
[
i
] = (
	`sö
(()(2*
PI
*i/
INCR
)));

140 
CosTabÀ2Fix
[
i
] = (65536*
	`cos
(()(2*
PI
*i/
INCR
)));

141 
SöTabÀ2Fix
[
i
] = (65536*
	`sö
(()(2*
PI
*i/
INCR
)));

144 #ifde‡
DebugDSP1


145 
	`Sèπ_Log
();

147 
	}
}

150 
	gOp00Mu…ùliˇnd
;

151 
	gOp00Mu…ùlõr
;

152 
	gOp00Resu…
;

154 
	$DSPOp00
()

156 
d•_›code
[0]++;

158 
Op00Resu…
=
Op00Mu…ùliˇnd
*
Op00Mu…ùlõr
/32768;

159 #ifde‡
DebugDSP1


160 
	`Log_Mesßge
("OP00 MULT %d*%d/32768=%d",
Op00Mu…ùliˇnd
,
Op00Mu…ùlõr
,
Op00Resu…
);

162 
	}
}

164 sig√d 
	gOp10C€fficõ¡
;

165 sig√d 
	gOp10Exp⁄ít
;

166 sig√d 
	gOp10C€fficõ¡R
;

167 sig√d 
	gOp10Exp⁄ítR
;

168 
	gOp10Temp
;

170 
	$DSPOp10
()

172 
d•_›code
[0x10]++;

174 
Op10Exp⁄ítR
=-
Op10Exp⁄ít
;

175 
Op10Temp
 = 
Op10C€fficõ¡
 / 32768.0;

176 i‡(
Op10Temp
 == 0) {

177 
Op10C€fficõ¡R
 = 0;

179 
Op10Temp
 = 1/Op10Temp;

180 i‡(
Op10Temp
 > 0)

181 
Op10Temp
>=1.0) {

182 
Op10Temp
=Op10Temp/2.0;

183 
Op10Exp⁄ítR
++;

186 
Op10Temp
<-1.0) {

187 
Op10Temp
=Op10Temp/2.0;

188 
Op10Exp⁄ítR
++;

190 
Op10C€fficõ¡R
 = 
Op10Temp
*32768;

191 #ifde‡
DebugDSP1


192 
	`Log_Mesßge
("OP10 INV %d*2^%d = %d*2^%d", 
Op10C€fficõ¡
, 
Op10Exp⁄ít
, 
Op10C€fficõ¡R
, 
Op10Exp⁄ítR
);

194 
	}
}

197 
	gOp04AngÀ
;

198 
	gOp04Radius
;

199 
	gOp04Sö
;

200 
	gOp04Cos
;

202 #ifde‡
__OPT04__


204 
	$DSPOp04
()

206 
d•_›code
[0x04]++;

208 
öt32
 
™gÀ
;

210 
™gÀ
 = 
	`AngÀFix
(
Op04AngÀ
);

213 
	`SMULT1616
(
Op04Sö
,
	`SöFix
(
™gÀ
),(
öt32
)
Op04Radius
)

215 
	`SMULT1616
(
Op04Cos
,
	`CosFix
(
™gÀ
),(
öt32
)
Op04Radius
);

217 #ifde‡
DebugDSP1


218 
	`Log_Mesßge
("OP04 AngÀ:%d Radius:%d",(
Op04AngÀ
/256)&255,
Op04Radius
);

219 
	`Log_Mesßge
("OP04 SIN:%d COS:%d",
Op04Sö
,
Op04Cos
);

221 
	}
}

224 
	$DSPOp04
()

226 
™gÀ
;

228 
™gÀ
 = 
Op04AngÀ
*2*
PI
/65536.0;

230 
Op04Sö
 = 
	`sö
(
™gÀ
Ë* 
Op04Radius
;

231 
Op04Cos
 = 
	`cos
(
™gÀ
Ë* 
Op04Radius
;

233 #ifde‡
DebugDSP1


234 
	`Log_Mesßge
("OP04 AngÀ:%d Radius:%d",(
Op04AngÀ
/256)&255,
Op04Radius
);

235 
	`Log_Mesßge
("OP04 SIN:%d COS:%d",
Op04Sö
,
Op04Cos
);

237 
	}
}

240 
	gOp0CA
;

241 
	gOp0CX1
;

242 
	gOp0CY1
;

243 
	gOp0CX2
;

244 
	gOp0CY2
;

246 #ifde‡
__OPT0C__


247 
	$DSPOp0C
()

249 
d•_›code
[0x0C]++;

251 
Op0CX2
=(
Op0CX1
*
	`Cos
(
	`AngÀ
(
Op0CA
))+
Op0CY1
*
	`Sö
(Angle(Op0CA)));

252 
Op0CY2
=(
Op0CX1
*-
	`Sö
(
	`AngÀ
(
Op0CA
))+
Op0CY1
*
	`Cos
(Angle(Op0CA)));

253 #ifde‡
DebugDSP1


254 
	`Log_Mesßge
("OP0C AngÀ:%d X:%d Y:%d CX:%d CY:%d",(
Op0CA
/256)&255,
Op0CX1
,
Op0CY1
,
Op0CX2
,
Op0CY2
);

256 
	}
}

258 
	$DSPOp0C
()

261 
Op0CX2
=(
Op0CX1
*
	`cos
(
Op0CA
*2*
PI
/65536.0)+
Op0CY1
*
	`sö
(Op0CA*2*PI/65536.0));

262 
Op0CY2
=(
Op0CX1
*-
	`sö
(
Op0CA
*2*
PI
/65536.0)+
Op0CY1
*
	`cos
(Op0CA*2*PI/65536.0));

263 #ifde‡
DebugDSP1


264 
	`Log_Mesßge
("OP0C AngÀ:%d X:%d Y:%d CX:%d CY:%d",(
Op0CA
/256)&255,
Op0CX1
,
Op0CY1
,
Op0CX2
,
Op0CY2
);

266 
	}
}

270 
	gOp02FX
;

271 
	gOp02FY
;

272 
	gOp02FZ
;

273 
	gOp02LFE
;

274 
	gOp02LES
;

275 
	gOp02AAS
;

276 
	gOp02AZS
;

277 
	gOp02VOF
;

278 
	gOp02VVA
;

280 
	gOp02CX
;

281 
	gOp02CY
;

282 
	gOp02CXF
;

283 
	gOp02CYF
;

284 
	gVõwîX0
;

285 
	gVõwîY0
;

286 
	gVõwîZ0
;

287 
	gVõwîX1
;

288 
	gVõwîY1
;

289 
	gVõwîZ1
;

290 
	gVõwîX
;

291 
	gVõwîY
;

292 
	gVõwîZ
;

293 
	gVõwîAX
;

294 
	gVõwîAY
;

295 
	gVõwîAZ
;

296 
	gNumbîOfSl›e
;

297 
	gS¸ìnX
;

298 
	gS¸ìnY
;

299 
	gS¸ìnZ
;

300 
	gT›Le·S¸ìnX
;

301 
	gT›Le·S¸ìnY
;

302 
	gT›Le·S¸ìnZ
;

303 
	gBŸtomRightS¸ìnX
;

304 
	gBŸtomRightS¸ìnY
;

305 
	gBŸtomRightS¸ìnZ
;

306 
	gRódy
;

307 
	gRa°îLX
;

308 
	gRa°îLY
;

309 
	gRa°îLZ
;

310 
	gS¸ìnLX1
;

311 
	gS¸ìnLY1
;

312 
	gS¸ìnLZ1
;

313 
	gRevî£dLES
;

314 
	gOp02LESb
;

315 
	gNAzsB
,
	gNAasB
;

316 
	gVõwîXc
;

317 
	gVõwîYc
;

318 
	gVõwîZc
;

319 
	gCíãrX
,
	gCíãrY
;

320 
	gOp02CYSup
,
	gOp02CXSup
;

321 
	gCXdi°™˚
;

323 
	#VofAngÀ
 0x3880

	)

325 
	gTVÆDebug
,
	gTVÆDebug2
;

326 
	gS¸Di•l
;

329 #ifde‡
__OPT02__


330 
	$DSPOp02
()

332 
d•_›code
[0x02]++;

334 
VõwîZ1
=-
	`Cos
(
	`AngÀ
(
Op02AZS
));

335 
VõwîX1
=
	`Sö
(
	`AngÀ
(
Op02AZS
))*Sö(AngÀ(
Op02AAS
));

336 
VõwîY1
=
	`Sö
(
	`AngÀ
(
Op02AZS
))*
	`Cos
(AngÀ(
Op02AAS
));

339 #ifde‡
debug02


340 
	`¥ötf
("\nVõwîX1 : %‡VõwîY1 : %‡VõwîZ1 : %f\n",
VõwîX1
,
VõwîY1
,

341 
VõwîZ1
);

342 
	`gëch
();

344 
VõwîX
=
Op02FX
-
VõwîX1
*
Op02LFE
;

345 
VõwîY
=
Op02FY
-
VõwîY1
*
Op02LFE
;

346 
VõwîZ
=
Op02FZ
-
VõwîZ1
*
Op02LFE
;

348 
S¸ìnX
=
Op02FX
+
VõwîX1
*(
Op02LES
-
Op02LFE
);

349 
S¸ìnY
=
Op02FY
+
VõwîY1
*(
Op02LES
-
Op02LFE
);

350 
S¸ìnZ
=
Op02FZ
+
VõwîZ1
*(
Op02LES
-
Op02LFE
);

352 #ifde‡
debug02


353 
	`¥ötf
("VõwîX : %‡VõwîY : %‡VõwîZ : %f\n",
VõwîX
,
VõwîY
,
VõwîZ
);

354 
	`¥ötf
("Op02FX : %d Op02FY : %d Op02FZ : %d\n",
Op02FX
,
Op02FY
,
Op02FZ
);

355 
	`¥ötf
("S¸ìnX : %‡S¸ìnY : %‡S¸ìnZ : %f\n",
S¸ìnX
,
S¸ìnY
,
S¸ìnZ
);

356 
	`gëch
();

358 i‡(
VõwîZ1
==0)ViewerZ1++;

359 
NumbîOfSl›e
=
VõwîZ
/-
VõwîZ1
;

361 
Op02CX
=()(
Op02CXF
=
VõwîX
+
VõwîX1
*
NumbîOfSl›e
);

362 
Op02CY
=()(
Op02CYF
=
VõwîY
+
VõwîY1
*
NumbîOfSl›e
);

364 
Op02VOF
=0x0000;

365 
Revî£dLES
=0;

366 
Op02LESb
=
Op02LES
;

367 i‡((
Op02LES
>=
VofAngÀ
+16384.0) && (Op02LES<VofAngle+32768.0)) {

368 
Revî£dLES
=1;

369 
Op02LESb
=
VofAngÀ
+0x4000-(
Op02LES
-(VofAngle+0x4000));

371 
Op02VVA
 = ()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000)*6.2832/65536.0));

372 i‡((
Op02LESb
>=
VofAngÀ
) && (Op02LESb<=VofAngle+0x4000)) {

373 
Op02VOF
()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000-
VofAngÀ
)*6.2832/65536.0));

374 
Op02VVA
-=
Op02VOF
;

376 i‡(
Revî£dLES
){

377 
Op02VOF
=-Op02VOF;

380 
NAzsB
 = (
Op02AZS
-0x4000)*6.2832/65536.0;

381 
NAasB
 = 
Op02AAS
*6.2832/65536.0;

383 i‡(
	`èn
(
NAzsB
)==0) NAzsB=0.1;

385 
S¸Di•l
=0;

386 i‡(
NAzsB
>-0.15Ë{NAzsB=-0.15;
S¸Di•l
=
Op02VVA
-0xFFDA;}

388 
CXdi°™˚
=1/
	`èn
(
NAzsB
);

390 
VõwîXc
=
Op02FX
;

391 
VõwîYc
=
Op02FY
;

392 
VõwîZc
=
Op02FZ
;

394 
CíãrX
 = (-
	`sö
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîXc
;

395 
CíãrY
 = (
	`cos
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîYc
;

396 
Op02CX
 = ()
CíãrX
;

397 
Op02CY
 = ()
CíãrY
;

399 
VõwîXc
=
VõwîX
;

400 
VõwîYc
=
VõwîY
;

401 
VõwîZc
=
VõwîZ
;

403 
CíãrX
 = (-
	`sö
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîXc
;

404 i‡(
CíãrX
<-32768) CenterX = -32768; if (CenterX>32767) CenterX=32767;

405 
CíãrY
 = (
	`cos
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîYc
;

406 i‡(
CíãrY
<-32768) CenterY = -32768; if (CenterY>32767) CenterY=32767;

408 
TVÆDebug
 = (
NAzsB
*65536/6.28);

409 
TVÆDebug2
 = 
S¸Di•l
;

421 #ifde‡
DebugDSP1


422 
	`Log_Mesßge
("OP02 FX:%d FY:%d FZ:%d LFE:%d LES:%d",
Op02FX
,
Op02FY
,
Op02FZ
,
Op02LFE
,
Op02LES
);

423 
	`Log_Mesßge
(" AAS:%d AZS:%d VOF:%d VVA:%d",
Op02AAS
,
Op02AZS
,
Op02VOF
,
Op02VVA
);

424 
	`Log_Mesßge
(" VX:%d VY:%d VZ:%d",()
VõwîX
,()
VõwîY
,()
VõwîZ
);

427 
	}
}

430 
	$DSPOp02
()

432 
VõwîZ1
=-
	`cos
(
Op02AZS
*6.2832/65536.0);

433 
VõwîX1
=
	`sö
(
Op02AZS
*6.2832/65536.0)*sö(
Op02AAS
*6.2832/65536.0);

434 
VõwîY1
=
	`sö
(
Op02AZS
*6.2832/65536.0)*
	`cos
(-
Op02AAS
*6.2832/65536.0);

436 #ifde‡
debug02


437 
	`¥ötf
("\nVõwîX1 : %‡VõwîY1 : %‡VõwîZ1 : %f\n",
VõwîX1
,
VõwîY1
,

438 
VõwîZ1
);

439 
	`gëch
();

441 
VõwîX
=
Op02FX
-
VõwîX1
*
Op02LFE
;

442 
VõwîY
=
Op02FY
-
VõwîY1
*
Op02LFE
;

443 
VõwîZ
=
Op02FZ
-
VõwîZ1
*
Op02LFE
;

445 
S¸ìnX
=
Op02FX
+
VõwîX1
*(
Op02LES
-
Op02LFE
);

446 
S¸ìnY
=
Op02FY
+
VõwîY1
*(
Op02LES
-
Op02LFE
);

447 
S¸ìnZ
=
Op02FZ
+
VõwîZ1
*(
Op02LES
-
Op02LFE
);

449 #ifde‡
debug02


450 
	`¥ötf
("VõwîX : %‡VõwîY : %‡VõwîZ : %f\n",
VõwîX
,
VõwîY
,
VõwîZ
);

451 
	`¥ötf
("Op02FX : %d Op02FY : %d Op02FZ : %d\n",
Op02FX
,
Op02FY
,
Op02FZ
);

452 
	`¥ötf
("S¸ìnX : %‡S¸ìnY : %‡S¸ìnZ : %f\n",
S¸ìnX
,
S¸ìnY
,
S¸ìnZ
);

453 
	`gëch
();

455 i‡(
VõwîZ1
==0)ViewerZ1++;

456 
NumbîOfSl›e
=
VõwîZ
/-
VõwîZ1
;

458 
Op02CX
=()(
Op02CXF
=
VõwîX
+
VõwîX1
*
NumbîOfSl›e
);

459 
Op02CY
=()(
Op02CYF
=
VõwîY
+
VõwîY1
*
NumbîOfSl›e
);

461 
VõwîXc
=
VõwîX
;

462 
VõwîYc
=
VõwîY
;

463 
VõwîZc
=
VõwîZ
;

465 
Op02VOF
=0x0000;

466 
Revî£dLES
=0;

467 
Op02LESb
=
Op02LES
;

468 i‡((
Op02LES
>=
VofAngÀ
+16384.0) && (Op02LES<VofAngle+32768.0)) {

469 
Revî£dLES
=1;

470 
Op02LESb
=
VofAngÀ
+0x4000-(
Op02LES
-(VofAngle+0x4000));

472 
Op02VVA
 = ()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000)*6.2832/65536.0));

473 i‡((
Op02LESb
>=
VofAngÀ
) && (Op02LESb<=VofAngle+0x4000)) {

474 
Op02VOF
()(
Op02LESb
 * 
	`èn
((
Op02AZS
-0x4000-
VofAngÀ
)*6.2832/65536.0));

475 
Op02VVA
-=
Op02VOF
;

477 i‡(
Revî£dLES
){

478 
Op02VOF
=-Op02VOF;

481 
NAzsB
 = (
Op02AZS
-0x4000)*6.2832/65536.0;

482 
NAasB
 = 
Op02AAS
*6.2832/65536.0;

484 i‡(
	`èn
(
NAzsB
)==0) NAzsB=0.1;

486 
S¸Di•l
=0;

487 i‡(
NAzsB
>-0.15Ë{NAzsB=-0.15;
S¸Di•l
=
Op02VVA
-0xFFDA;}

489 
CXdi°™˚
=1/
	`èn
(
NAzsB
);

491 
CíãrX
 = (-
	`sö
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîXc
;

492 i‡(
CíãrX
<-32768) CenterX = -32768; if (CenterX>32767) CenterX=32767;

493 
Op02CX
 = ()
CíãrX
;

494 
CíãrY
 = (
	`cos
(
NAasB
)*
VõwîZc
*
CXdi°™˚
)+
VõwîYc
;

495 i‡(
CíãrY
<-32768) CenterY = -32768; if (CenterY>32767) CenterY=32767;

496 
Op02CY
 = ()
CíãrY
;

498 
TVÆDebug
 = (
NAzsB
*65536/6.28);

499 
TVÆDebug2
 = 
S¸Di•l
;

511 #ifde‡
DebugDSP1


512 
	`Log_Mesßge
("OP02 FX:%d FY:%d FZ:%d LFE:%d LES:%d",
Op02FX
,
Op02FY
,
Op02FZ
,
Op02LFE
,
Op02LES
);

513 
	`Log_Mesßge
(" AAS:%d AZS:%d VOF:%d VVA:%d",
Op02AAS
,
Op02AZS
,
Op02VOF
,
Op02VVA
);

514 
	`Log_Mesßge
(" VX:%d VY:%d VZ:%d",()
VõwîX
,()
VõwîY
,()
VõwîZ
);

517 
	}
}

520 
	gOp0AVS
;

521 
	gOp0AA
;

522 
	gOp0AB
;

523 
	gOp0AC
;

524 
	gOp0AD
;

526 
	gRa°îRX
;

527 
	gRa°îRY
;

528 
	gRa°îRZ
;

529 
	gRa°îLSl›eX
;

530 
	gRa°îLSl›eY
;

531 
	gRa°îLSl›eZ
;

532 
	gRa°îRSl›eX
;

533 
	gRa°îRSl›eY
;

534 
	gRa°îRSl›eZ
;

535 
	gGroundLX
;

536 
	gGroundLY
;

537 
	gGroundRX
;

538 
	gGroundRY
;

539 
	gDi°™˚
;

541 
	gNAzs
,
	gNAas
;

542 
	gRVPos
,
	gRHPos
,
	gRXRes
,
	gRYRes
;

545 
	$GëRXYPos
(){

546 
sˇœr
;

548 i‡(
Op02LES
==0) ;

551 
NAzs
 = 
NAzsB
 - 
	`Aèn
((
RVPos
Ë/ ()
Op02LES
);

552 
NAas
 = 
NAasB
;

554 i‡(
	`cos
(
NAzs
)==0) NAzs+=0.001;

555 i‡(
	`èn
(
NAzs
)==0) NAzs+=0.001;

557 
RXRes
 = (-
	`sö
(
NAas
)*
VõwîZc
/(
	`èn
(
NAzs
))+
VõwîXc
);

558 
RYRes
 = (
	`cos
(
NAas
)*
VõwîZc
/(
	`èn
(
NAzs
))+
VõwîYc
);

559 
sˇœr
 = ((
VõwîZc
/
	`sö
(
NAzs
))/()
Op02LES
);

560 
RXRes
 +
sˇœr
*-
	`sö
(
NAas
+
PI
/2)*
RHPos
;

561 
RYRes
 +
sˇœr
*
	`cos
(
NAas
+
PI
/2)*
RHPos
;

562 
	}
}

564 
	$DSPOp0A
()

566 
d•_›code
[0x0A]++;

568 
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
m
,
ypos
;

571 if(
Op0AVS
==0) {Op0AVS++; ;}

572 
ypos
=
Op0AVS
-
S¸Di•l
;

575 
RVPos
 = 
ypos
; 
RHPos
 = 0;

576 
	`GëRXYPos
(); 
x2
 = 
RXRes
; 
y2
 = 
RYRes
;

578 
RVPos
 = 
ypos
; 
RHPos
 = -128;

579 
	`GëRXYPos
(); 
x3
 = 
RXRes
; 
y3
 = 
RYRes
;

581 
RVPos
 = 
ypos
; 
RHPos
 = 127;

582 
	`GëRXYPos
(); 
x4
 = 
RXRes
; 
y4
 = 
RYRes
;

585 
m
 = (
x4
-
x3
)/256*256; if (m>32767) m=32767; if (m<-32768) m=-32768;

586 
Op0AA
 = ()(
m
);

588 
m
 = (
y4
-
y3
)/256*256; if (m>32767) m=32767; if (m<-32768) m=-32768;

589 
Op0AC
 = ()(
m
);

590 i‡(
ypos
==0){

591 
Op0AB
 = 0;

592 
Op0AD
 = 0;

596 
m
 = (
x2
-
CíãrX
)/
ypos
*256; if (m>32767) m=32767; if (m<-32768) m=-32768;

597 
Op0AB
 = ()(
m
);

599 
m
 = (
y2
-
CíãrY
)/
ypos
*256; if (m>32767) m=32767; if (m<-32768) m=-32768;

600 
Op0AD
 = ()(
m
);

603 
Op0AVS
+=1;

604 
	}
}

606 
	gOp06X
;

607 
	gOp06Y
;

608 
	gOp06Z
;

609 
	gOp06H
;

610 
	gOp06V
;

611 
	gOp06S
;

622 
öt32
 
	gObjPX
;

623 
öt32
 
	gObjPY
;

624 
öt32
 
	gObjPZ
;

625 
öt32
 
	gObjPX1
;

626 
öt32
 
	gObjPY1
;

627 
öt32
 
	gObjPZ1
;

628 
öt32
 
	gObjPX2
;

629 
öt32
 
	gObjPY2
;

630 
öt32
 
	gObjPZ2
;

631 
	gDivideOp06
;

632 
	gTemp
;

633 
	gènvÆ2
;

635 #ifde‡
__OPT06__


636 
	$DSPOp06
()

639 
d•_›code
[0x06]++;

641 
ObjPX
=
Op06X
-
Op02FX
;

642 
ObjPY
=
Op06Y
-
Op02FY
;

643 
ObjPZ
=
Op06Z
-
Op02FZ
;

653 
ènvÆ2
 = 
	`AngÀFix
(-
Op02AAS
+32768);

654 
	`SADDMULT1616
(
ObjPX1
,
ObjPX
,
	`CosFix
(
ènvÆ2
),
ObjPY
,-
	`SöFix
(tanval2))

655 
	`SADDMULT1616
(
ObjPY1
,
ObjPX
,
	`SöFix
(
ènvÆ2
),
ObjPY
,
	`CosFix
(tanval2))

656 
ObjPZ1
=
ObjPZ
;

666 
ènvÆ2
 = 
	`AngÀFix
(-
Op02AZS
);

667 
ObjPX2
=
ObjPX1
;

668 
	`SADDMULT1616
(
ObjPY2
,
ObjPY1
,
	`CosFix
(
ènvÆ2
),
ObjPZ1
,-
	`SöFix
(tanval2))

669 
	`SADDMULT1616
(
ObjPZ2
,
ObjPY1
,
	`SöFix
(
ènvÆ2
),
ObjPZ1
,
	`CosFix
(tanval2))

671 #ifde‡
debug06


672 
	`Log_Mesßge
("ObjPX2: %‡ObjPY2: %‡ObjPZ2: %f\n",
ObjPX2
,
ObjPY2
,
ObjPZ2
);

675 
ObjPZ2
=ObjPZ2-
Op02LFE
;

677 i‡(
ObjPZ2
<0)

679 
Op06H
=()(-
ObjPX2
*
Op02LES
/-(
ObjPZ2
));

680 
Op06V
=()(-
ObjPY2
*
Op02LES
/-(
ObjPZ2
));

682 
Op06S
=()(256*(
öt32
)
Op02LES
/-
ObjPZ2
);

686 
Op06H
=0;

687 
Op06V
=14*16;

688 
Op06S
=0xFFFF;

692 #ifde‡
DebugDSP1


693 
	`Log_Mesßge
("OP06 X:%d Y:%d Z:%d",
Op06X
,
Op06Y
,
Op06Z
);

694 
	`Log_Mesßge
("OP06 H:%d V:%d S:%d",
Op06H
,
Op06V
,
Op06S
);

696 
	}
}

699 
	$DSPOp06
()

701 
ObjPX
=
Op06X
-
Op02FX
;

702 
ObjPY
=
Op06Y
-
Op02FY
;

703 
ObjPZ
=
Op06Z
-
Op02FZ
;

706 
ènvÆ
 = (-
Op02AAS
+32768)/65536.0*6.2832;

707 
ObjPX1
=(
ObjPX
*
	`cos
(
ènvÆ
)+
ObjPY
*-
	`sö
(tanval));

708 
ObjPY1
=(
ObjPX
*
	`sö
(
ènvÆ
)+
ObjPY
*
	`cos
(tanval));

709 
ObjPZ1
=
ObjPZ
;

711 #ifde‡
debug06


712 
	`Log_Mesßge
("AngÀ : %f", 
ènvÆ
);

713 
	`Log_Mesßge
("ObjPX1: %‡ObjPY1: %‡ObjPZ1: %f\n",
ObjPX1
,
ObjPY1
,
ObjPZ1
);

714 
	`Log_Mesßge
("cos—™vÆË: %‡ sö—™vÆË: %f", 
	`cos
(
ènvÆ
), 
	`sö
(tanval));

718 
ènvÆ
 = (-
Op02AZS
)/65536.0*6.2832;

719 
ObjPX2
=
ObjPX1
;

720 
ObjPY2
=(
ObjPY1
*
	`cos
(
ènvÆ
)+
ObjPZ1
*-
	`sö
(tanval));

721 
ObjPZ2
=(
ObjPY1
*
	`sö
(
ènvÆ
)+
ObjPZ1
*
	`cos
(tanval));

723 #ifde‡
debug06


724 
	`Log_Mesßge
("ObjPX2: %‡ObjPY2: %‡ObjPZ2: %f\n",
ObjPX2
,
ObjPY2
,
ObjPZ2
);

727 
ObjPZ2
=ObjPZ2-
Op02LFE
;

729 i‡(
ObjPZ2
<0)

731 
Op06H
=()(-
ObjPX2
*
Op02LES
/-(
ObjPZ2
));

732 
Op06V
=()(-
ObjPY2
*
Op02LES
/-(
ObjPZ2
));

733 
Op06S
=()(256*()
Op02LES
/-
ObjPZ2
);

737 
Op06H
=0;

738 
Op06V
=14*16;

739 
Op06S
=0xFFFF;

743 #ifde‡
DebugDSP1


744 
	`Log_Mesßge
("OP06 X:%d Y:%d Z:%d",
Op06X
,
Op06Y
,
Op06Z
);

745 
	`Log_Mesßge
("OP06 H:%d V:%d S:%d",
Op06H
,
Op06V
,
Op06S
);

747 
	}
}

752 
	gm©rixB
[3][3];

753 
	gm©rixB2
[3][3];

754 
	gm©rixB3
[3][3];

756 
	gm©rixA
[3][3];

757 
	gm©rixA2
[3][3];

758 
	gm©rixA3
[3][3];

760 
	$Mu…M©rixB
(
ªsu…
[3][3],
m©1
[3][3],
m©2
[3][3])

762 
ªsu…
[0][0]=(
m©1
[0][0]*
m©2
[0][0]+mat1[0][1]*mat2[1][0]+mat1[0][2]*mat2[2][0]);

763 
ªsu…
[0][1]=(
m©1
[0][0]*
m©2
[0][1]+mat1[0][1]*mat2[1][1]+mat1[0][2]*mat2[2][1]);

764 
ªsu…
[0][2]=(
m©1
[0][0]*
m©2
[0][2]+mat1[0][1]*mat2[1][2]+mat1[0][2]*mat2[2][2]);

766 
ªsu…
[1][0]=(
m©1
[1][0]*
m©2
[0][0]+mat1[1][1]*mat2[1][0]+mat1[1][2]*mat2[2][0]);

767 
ªsu…
[1][1]=(
m©1
[1][0]*
m©2
[0][1]+mat1[1][1]*mat2[1][1]+mat1[1][2]*mat2[2][1]);

768 
ªsu…
[1][2]=(
m©1
[1][0]*
m©2
[0][2]+mat1[1][1]*mat2[1][2]+mat1[1][2]*mat2[2][2]);

770 
ªsu…
[2][0]=(
m©1
[2][0]*
m©2
[0][0]+mat1[2][1]*mat2[1][0]+mat1[2][2]*mat2[2][0]);

771 
ªsu…
[2][1]=(
m©1
[2][0]*
m©2
[0][1]+mat1[2][1]*mat2[1][1]+mat1[2][2]*mat2[2][1]);

772 
ªsu…
[2][2]=(
m©1
[2][0]*
m©2
[0][2]+mat1[2][1]*mat2[1][2]+mat1[2][2]*mat2[2][2]);

774 
	}
}

777 
	gOp01m
;

778 
	gOp01Zr
;

779 
	gOp01Xr
;

780 
	gOp01Yr
;

781 
	gOp11m
;

782 
	gOp11Zr
;

783 
	gOp11Xr
;

784 
	gOp11Yr
;

785 
	gOp21m
;

786 
	gOp21Zr
;

787 
	gOp21Xr
;

788 
	gOp21Yr
;

789 
	gsc
,
	gsc2
,
	gsc3
;

793 #ifde‡
__OPT01__


794 
	$DSPOp01
()

796 
d•_›code
[0x01]++;

798 
zr
,
yr
,
xr
;

800 
zr
 = 
	`AngÀ
(
Op01Zr
);

801 
xr
 = 
	`AngÀ
(
Op01Yr
);

802 
yr
 = 
	`AngÀ
(
Op01Xr
);

804 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

805 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`Cos
(
xr
); m©rixB[1][2]=-
	`Sö
(xr);

806 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`Sö
(
xr
); m©rixB[2][2]=
	`Cos
(xr);

808 
m©rixB2
[0][0]=
	`Cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`Sö
(yr);

809 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

810 
m©rixB2
[2][0]=-
	`Sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`Cos
(yr);

812 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

814 
m©rixB2
[0][0]=
	`Cos
(
zr
); m©rixB2[0][1]=-
	`Sö
(zr); matrixB2[0][2]=0;

815 
m©rixB2
[1][0]=
	`Sö
(
zr
); m©rixB2[1][1]=
	`Cos
(zr); matrixB2[1][2]=0;

816 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

818 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

820 
sc
 = (()
Op01m
)/32768.0;

822 
m©rixA
[0][0]=
m©rixB
[0][0]; matrixA[0][1]=matrixB[0][1]; matrixA[0][2]=matrixB[0][2];

823 
m©rixA
[1][0]=
m©rixB
[1][0]; matrixA[1][1]=matrixB[1][1]; matrixA[1][2]=matrixB[1][2];

824 
m©rixA
[2][0]=
m©rixB
[2][0]; matrixA[2][1]=matrixB[2][1]; matrixA[2][2]=matrixB[2][2];

826 #ifde‡
DebugDSP1


827 
	`Log_Mesßge
("OP01 ZR: %d XR: %d YR: %d",
Op01Zr
,
Op01Xr
,
Op01Yr
);

829 
	}
}

833 
	$DSPOp01
()

835 
zr
,
yr
,
xr
;

837 
zr
 = (()
Op01Zr
)*6.2832/65536;

838 
xr
 = (()
Op01Yr
)*6.2832/65536;

839 
yr
 = (()
Op01Xr
)*6.2832/65536;

841 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

842 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`cos
(
xr
); m©rixB[1][2]=-
	`sö
(xr);

843 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`sö
(
xr
); m©rixB[2][2]=
	`cos
(xr);

845 
m©rixB2
[0][0]=
	`cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`sö
(yr);

846 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

847 
m©rixB2
[2][0]=-
	`sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`cos
(yr);

849 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

851 
m©rixB2
[0][0]=
	`cos
(
zr
); m©rixB2[0][1]=-
	`sö
(zr); matrixB2[0][2]=0;

852 
m©rixB2
[1][0]=
	`sö
(
zr
); m©rixB2[1][1]=
	`cos
(zr); matrixB2[1][2]=0;

853 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

855 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

857 
sc
 = (()
Op01m
)/32768.0;

859 
m©rixA
[0][0]=
m©rixB
[0][0]; matrixA[0][1]=matrixB[0][1]; matrixA[0][2]=matrixB[0][2];

860 
m©rixA
[1][0]=
m©rixB
[1][0]; matrixA[1][1]=matrixB[1][1]; matrixA[1][2]=matrixB[1][2];

861 
m©rixA
[2][0]=
m©rixB
[2][0]; matrixA[2][1]=matrixB[2][1]; matrixA[2][2]=matrixB[2][2];

863 #ifde‡
DebugDSP1


864 
	`Log_Mesßge
("OP01 ZR: %d XR: %d YR: %d",
Op01Zr
,
Op01Xr
,
Op01Yr
);

866 
	}
}

870 #ifde‡
__OPT11__


871 
	$DSPOp11
()

873 
d•_›code
[0x11]++;

875 
zr
,
yr
,
xr
;

877 
zr
 = 
	`AngÀ
(
Op11Zr
);

878 
xr
 = 
	`AngÀ
(
Op11Yr
);

879 
yr
 = 
	`AngÀ
(
Op11Xr
);

881 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

882 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`Cos
(
xr
); m©rixB[1][2]=-
	`Sö
(xr);

883 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`Sö
(
xr
); m©rixB[2][2]=
	`Cos
(xr);

885 
m©rixB2
[0][0]=
	`Cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`Sö
(yr);

886 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

887 
m©rixB2
[2][0]=-
	`Sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`Cos
(yr);

889 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

891 
m©rixB2
[0][0]=
	`Cos
(
zr
); m©rixB2[0][1]=-
	`Sö
(zr); matrixB2[0][2]=0;

892 
m©rixB2
[1][0]=
	`Sö
(
zr
); m©rixB2[1][1]=
	`Cos
(zr); matrixB2[1][2]=0;

893 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

895 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

897 
sc2
 = (()
Op11m
)/32768.0;

899 
m©rixA2
[0][0]=
m©rixB
[0][0]; matrixA2[0][1]=matrixB[0][1]; matrixA2[0][2]=matrixB[0][2];

900 
m©rixA2
[1][0]=
m©rixB
[1][0]; matrixA2[1][1]=matrixB[1][1]; matrixA2[1][2]=matrixB[1][2];

901 
m©rixA2
[2][0]=
m©rixB
[2][0]; matrixA2[2][1]=matrixB[2][1]; matrixA2[2][2]=matrixB[2][2];

902 #ifde‡
DebugDSP1


903 
	`Log_Mesßge
("OP11 ZR: %d XR: %d YR: %d SC: %d",
Op11Zr
,
Op11Xr
,
Op11Yr
,
Op11m
);

905 
	}
}

908 
	$DSPOp11
()

910 
zr
,
yr
,
xr
;

912 
zr
 = (()
Op11Zr
)*6.2832/65536;

913 
xr
 = (()
Op11Yr
)*6.2832/65536;

914 
yr
 = (()
Op11Xr
)*6.2832/65536;

916 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

917 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`cos
(
xr
); m©rixB[1][2]=-
	`sö
(xr);

918 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`sö
(
xr
); m©rixB[2][2]=
	`cos
(xr);

920 
m©rixB2
[0][0]=
	`cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`sö
(yr);

921 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

922 
m©rixB2
[2][0]=-
	`sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`cos
(yr);

924 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

926 
m©rixB2
[0][0]=
	`cos
(
zr
); m©rixB2[0][1]=-
	`sö
(zr); matrixB2[0][2]=0;

927 
m©rixB2
[1][0]=
	`sö
(
zr
); m©rixB2[1][1]=
	`cos
(zr); matrixB2[1][2]=0;

928 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

930 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

932 
sc2
 = (()
Op11m
)/32768.0;

934 
m©rixA2
[0][0]=
m©rixB
[0][0]; matrixA2[0][1]=matrixB[0][1]; matrixA2[0][2]=matrixB[0][2];

935 
m©rixA2
[1][0]=
m©rixB
[1][0]; matrixA2[1][1]=matrixB[1][1]; matrixA2[1][2]=matrixB[1][2];

936 
m©rixA2
[2][0]=
m©rixB
[2][0]; matrixA2[2][1]=matrixB[2][1]; matrixA2[2][2]=matrixB[2][2];

937 #ifde‡
DebugDSP1


938 
	`Log_Mesßge
("OP11 ZR: %d XR: %d YR: %d SC: %d",
Op11Zr
,
Op11Xr
,
Op11Yr
,
Op11m
);

940 
	}
}

944 #ifde‡
__OPT21__


945 
	$DSPOp21
()

947 
d•_›code
[0x21]++;

949 
zr
,
yr
,
xr
;

951 
zr
 = 
	`AngÀ
(
Op21Zr
);

952 
xr
 = 
	`AngÀ
(
Op21Yr
);

953 
yr
 = 
	`AngÀ
(
Op21Xr
);

956 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

957 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`Cos
(
xr
); m©rixB[1][2]=-
	`Sö
(xr);

958 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`Sö
(
xr
); m©rixB[2][2]=
	`Cos
(xr);

960 
m©rixB2
[0][0]=
	`Cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`Sö
(yr);

961 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

962 
m©rixB2
[2][0]=-
	`Sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`Cos
(yr);

964 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

966 
m©rixB2
[0][0]=
	`Cos
(
zr
); m©rixB2[0][1]=-
	`Sö
(zr); matrixB2[0][2]=0;

967 
m©rixB2
[1][0]=
	`Sö
(
zr
); m©rixB2[1][1]=
	`Cos
(zr); matrixB2[1][2]=0;

968 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

970 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

972 
sc3
 = (()
Op21m
)/32768.0;

974 
m©rixA3
[0][0]=
m©rixB
[0][0]; matrixA3[0][1]=matrixB[0][1]; matrixA3[0][2]=matrixB[0][2];

975 
m©rixA3
[1][0]=
m©rixB
[1][0]; matrixA3[1][1]=matrixB[1][1]; matrixA3[1][2]=matrixB[1][2];

976 
m©rixA3
[2][0]=
m©rixB
[2][0]; matrixA3[2][1]=matrixB[2][1]; matrixA3[2][2]=matrixB[2][2];

977 #ifde‡
DebugDSP1


978 
	`Log_Mesßge
("OP21 ZR: %d XR: %d YR: %d",
Op21Zr
,
Op21Xr
,
Op21Yr
);

980 
	}
}

983 
	$DSPOp21
()

985 
zr
,
yr
,
xr
;

987 
zr
 = (()
Op21Zr
)*6.2832/65536;

988 
xr
 = (()
Op21Yr
)*6.2832/65536;

989 
yr
 = (()
Op21Xr
)*6.2832/65536;

991 
m©rixB
[0][0]=1; matrixB[0][1]=0; matrixB[0][2]=0;

992 
m©rixB
[1][0]=0; m©rixB[1][1]=
	`cos
(
xr
); m©rixB[1][2]=-
	`sö
(xr);

993 
m©rixB
[2][0]=0; m©rixB[2][1]=
	`sö
(
xr
); m©rixB[2][2]=
	`cos
(xr);

995 
m©rixB2
[0][0]=
	`cos
(
yr
); m©rixB2[0][1]=0; m©rixB2[0][2]=
	`sö
(yr);

996 
m©rixB2
[1][0]=0; matrixB2[1][1]=1; matrixB2[1][2]=0;

997 
m©rixB2
[2][0]=-
	`sö
(
yr
); m©rixB2[2][1]=0; m©rixB2[2][2]=
	`cos
(yr);

999 
	`Mu…M©rixB
(
m©rixB3
,
m©rixB
,
m©rixB2
);

1001 
m©rixB2
[0][0]=
	`cos
(
zr
); m©rixB2[0][1]=-
	`sö
(zr); matrixB2[0][2]=0;

1002 
m©rixB2
[1][0]=
	`sö
(
zr
); m©rixB2[1][1]=
	`cos
(zr); matrixB2[1][2]=0;

1003 
m©rixB2
[2][0]=0; matrixB2[2][1]=0; matrixB2[2][2]=1;

1005 
	`Mu…M©rixB
(
m©rixB
,
m©rixB3
,
m©rixB2
);

1007 
sc3
 = (()
Op21m
)/32768.0;

1009 
m©rixA3
[0][0]=
m©rixB
[0][0]; matrixA3[0][1]=matrixB[0][1]; matrixA3[0][2]=matrixB[0][2];

1010 
m©rixA3
[1][0]=
m©rixB
[1][0]; matrixA3[1][1]=matrixB[1][1]; matrixA3[1][2]=matrixB[1][2];

1011 
m©rixA3
[2][0]=
m©rixB
[2][0]; matrixA3[2][1]=matrixB[2][1]; matrixA3[2][2]=matrixB[2][2];

1012 #ifde‡
DebugDSP1


1013 
	`Log_Mesßge
("OP21 ZR: %d XR: %d YR: %d",
Op21Zr
,
Op21Xr
,
Op21Yr
);

1015 
	}
}

1018 
	gOp0DX
;

1019 
	gOp0DY
;

1020 
	gOp0DZ
;

1021 
	gOp0DF
;

1022 
	gOp0DL
;

1023 
	gOp0DU
;

1024 
	gOp1DX
;

1025 
	gOp1DY
;

1026 
	gOp1DZ
;

1027 
	gOp1DF
;

1028 
	gOp1DL
;

1029 
	gOp1DU
;

1030 
	gOp2DX
;

1031 
	gOp2DY
;

1032 
	gOp2DZ
;

1033 
	gOp2DF
;

1034 
	gOp2DL
;

1035 
	gOp2DU
;

1037 
	#sw≠
(
a
,
b
Ë
ãmp
˜;a=b;bÒemp;

	)

1039 
	$DSPOp0D
()

1041 
d•_›code
[0x0D]++;

1043 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
dë
,
ãmp
;

1044 
a2
,
b2
,
c2
,
d2
,
e2
,
f2
,
g2
,
h2
,
i2
,
x
,
y
,
z
;

1046 
a
 = 
m©rixA
[0][0]; 
b
=m©rixA[0][1]; 
c
=matrixA[0][2];

1047 
d
 = 
m©rixA
[1][0]; 
e
=m©rixA[1][1]; 
f
=matrixA[1][2];

1048 
g
 = 
m©rixA
[2][0]; 
h
=m©rixA[2][1]; 
i
=matrixA[2][2];

1052 
dë
 = 
a
*
e
*
i
+
b
*
f
*
g
+
c
*
d
*
h
-g*e*c-h*f*a-i*d*b;

1053 i‡(
dë
==0) {

1054 
Op0DF
=
Op0DX
;

1055 
Op0DL
=
Op0DY
;

1056 
Op0DU
=
Op0DZ
;

1057 #ifde‡
DebugDSP1


1058 
	`Log_Mesßge
("OP0D Error! Det == 0");

1062 
	`sw≠
(
d
,
b
); sw≠(
g
,
c
); sw≠(
h
,
f
);

1063 
b
=-b; 
d
=-d; 
f
=-f; 
h
=-h;

1064 
a2
=(
e
*
i
-
h
*
f
)/
dë
; 
b2
=(
d
*i-
g
*f)/dë; 
c2
=(d*h-g*e)/det;

1065 
d2
=(
b
*
i
-
h
*
c
)/
dë
; 
e2
=(
a
*i-
g
*c)/dë; 
f2
=(a*h-g*b)/det;

1066 
g2
=(
b
*
f
-
e
*
c
)/
dë
; 
h2
=(
a
*f-
d
*c)/dë; 
i2
=(a*e-d*b)/det;

1067 
x
=
Op0DX
; 
y
=
Op0DY
; 
z
=
Op0DZ
;

1068 
Op0DF
=()((
x
*
a2
+
y
*
d2
+
z
*
g2
)/2*
sc
);

1069 
Op0DL
=()((
x
*
b2
+
y
*
e2
+
z
*
h2
)/2*
sc
);

1070 
Op0DU
=()((
x
*
c2
+
y
*
f2
+
z
*
i2
)/2*
sc
);

1072 #ifde‡
DebugDSP1


1073 
	`Log_Mesßge
("OP0D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op0DX
,
Op0DY
,
Op0DZ
,
Op0DF
,
Op0DL
,
Op0DU
);

1075 
	}
}

1077 
	$DSPOp1D
()

1079 
d•_›code
[0x1D]++;

1081 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
dë
,
ãmp
;

1082 
a2
,
b2
,
c2
,
d2
,
e2
,
f2
,
g2
,
h2
,
i2
,
x
,
y
,
z
;

1083 
a
 = 
m©rixA2
[0][0]; 
b
=m©rixA2[0][1]; 
c
=matrixA2[0][2];

1084 
d
 = 
m©rixA2
[1][0]; 
e
=m©rixA2[1][1]; 
f
=matrixA2[1][2];

1085 
g
 = 
m©rixA2
[2][0]; 
h
=m©rixA2[2][1]; 
i
=matrixA2[2][2];

1089 
dë
 = 
a
*
e
*
i
+
b
*
f
*
g
+
c
*
d
*
h
-g*e*c-h*f*a-i*d*b;

1090 i‡(
dë
==0) {

1091 
Op1DF
=0; 
Op1DL
=0; 
Op1DU
=0;

1094 
	`sw≠
(
d
,
b
); sw≠(
g
,
c
); sw≠(
h
,
f
);

1095 
b
=-b; 
d
=-d; 
f
=-f; 
h
=-h;

1096 
a2
=(
e
*
i
-
h
*
f
)/
dë
; 
b2
=(
d
*i-
g
*f)/dë; 
c2
=(d*h-g*e)/det;

1097 
d2
=(
b
*
i
-
h
*
c
)/
dë
; 
e2
=(
a
*i-
g
*c)/dë; 
f2
=(a*h-g*b)/det;

1098 
g2
=(
b
*
f
-
e
*
c
)/
dë
; 
h2
=(
a
*f-
d
*c)/dë; 
i2
=(a*e-d*b)/det;

1099 
x
=
Op1DX
; 
y
=
Op1DY
; 
z
=
Op1DZ
;

1100 
Op1DF
=()((
x
*
a2
+
y
*
d2
+
z
*
g2
)/2*
sc2
);

1101 
Op1DL
=()((
x
*
b2
+
y
*
e2
+
z
*
h2
)/2*
sc2
);

1102 
Op1DU
=()((
x
*
c2
+
y
*
f2
+
z
*
i2
)/2*
sc2
);

1103 #ifde‡
DebugDSP1


1104 
	`Log_Mesßge
("OP1D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op1DX
,
Op1DY
,
Op1DZ
,
Op1DF
,
Op1DL
,
Op1DU
);

1106 
	}
}

1108 
	$DSPOp2D
()

1110 
d•_›code
[0x2D]++;

1112 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
dë
,
ãmp
;

1113 
a2
,
b2
,
c2
,
d2
,
e2
,
f2
,
g2
,
h2
,
i2
,
x
,
y
,
z
;

1114 
a
 = 
m©rixA3
[0][0]; 
b
=m©rixA3[0][1]; 
c
=matrixA3[0][2];

1115 
d
 = 
m©rixA3
[1][0]; 
e
=m©rixA3[1][1]; 
f
=matrixA3[1][2];

1116 
g
 = 
m©rixA3
[2][0]; 
h
=m©rixA3[2][1]; 
i
=matrixA3[2][2];

1120 
dë
 = 
a
*
e
*
i
+
b
*
f
*
g
+
c
*
d
*
h
-g*e*c-h*f*a-i*d*b;

1121 i‡(
dë
==0) {

1122 
Op2DF
=0; 
Op2DL
=0; 
Op2DU
=0;

1125 
	`sw≠
(
d
,
b
); sw≠(
g
,
c
); sw≠(
h
,
f
);

1126 
b
=-b; 
d
=-d; 
f
=-f; 
h
=-h;

1127 
a2
=(
e
*
i
-
h
*
f
)/
dë
; 
b2
=(
d
*i-
g
*f)/dë; 
c2
=(d*h-g*e)/det;

1128 
d2
=(
b
*
i
-
h
*
c
)/
dë
; 
e2
=(
a
*i-
g
*c)/dë; 
f2
=(a*h-g*b)/det;

1129 
g2
=(
b
*
f
-
e
*
c
)/
dë
; 
h2
=(
a
*f-
d
*c)/dë; 
i2
=(a*e-d*b)/det;

1130 
x
=
Op2DX
; 
y
=
Op2DY
; 
z
=
Op2DZ
;

1131 
Op2DF
=()((
x
*
a2
+
y
*
d2
+
z
*
g2
)/2*
sc3
);

1132 
Op2DL
=()((
x
*
b2
+
y
*
e2
+
z
*
h2
)/2*
sc3
);

1133 
Op2DU
=()((
x
*
c2
+
y
*
f2
+
z
*
i2
)/2*
sc3
);

1134 #ifde‡
DebugDSP1


1135 
	`Log_Mesßge
("OP2D X: %d Y: %d Z: %d / F: %d L: %d U: %d",
Op2DX
,
Op2DY
,
Op2DZ
,
Op2DF
,
Op2DL
,
Op2DU
);

1137 
	}
}

1139 
	gOp03F
;

1140 
	gOp03L
;

1141 
	gOp03U
;

1142 
	gOp03X
;

1143 
	gOp03Y
;

1144 
	gOp03Z
;

1145 
	gOp13F
;

1146 
	gOp13L
;

1147 
	gOp13U
;

1148 
	gOp13X
;

1149 
	gOp13Y
;

1150 
	gOp13Z
;

1151 
	gOp23F
;

1152 
	gOp23L
;

1153 
	gOp23U
;

1154 
	gOp23X
;

1155 
	gOp23Y
;

1156 
	gOp23Z
;

1158 
	$DSPOp03
()

1160 
d•_›code
[0x03]++;

1162 
F
,
L
,
U
;

1164 
F
=
Op03F
; 
L
=
Op03L
; 
U
=
Op03U
;

1165 
Op03X
=()((
F
*
m©rixA
[0][0]+
L
*m©rixA[1][0]+
U
*m©rixA[2][0])/2*
sc
);

1166 
Op03Y
=()((
F
*
m©rixA
[0][1]+
L
*m©rixA[1][1]+
U
*m©rixA[2][1])/2*
sc
);

1167 
Op03Z
=()((
F
*
m©rixA
[0][2]+
L
*m©rixA[1][2]+
U
*m©rixA[2][2])/2*
sc
);

1169 #ifde‡
DebugDSP1


1170 
	`Log_Mesßge
("OP03 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op03F
,
Op03L
,
Op03U
,
Op03X
,
Op03Y
,
Op03Z
);

1172 
	}
}

1174 
	$DSPOp13
()

1176 
d•_›code
[0x13]++;

1178 
F
,
L
,
U
;

1179 
F
=
Op13F
; 
L
=
Op13L
; 
U
=
Op13U
;

1180 
Op13X
=()((
F
*
m©rixA2
[0][0]+
L
*m©rixA2[1][0]+
U
*m©rixA2[2][0])/2*
sc2
);

1181 
Op13Y
=()((
F
*
m©rixA2
[0][1]+
L
*m©rixA2[1][1]+
U
*m©rixA2[2][1])/2*
sc2
);

1182 
Op13Z
=()((
F
*
m©rixA2
[0][2]+
L
*m©rixA2[1][2]+
U
*m©rixA2[2][2])/2*
sc2
);

1183 #ifde‡
DebugDSP1


1184 
	`Log_Mesßge
("OP13 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op13F
,
Op13L
,
Op13U
,
Op13X
,
Op13Y
,
Op13Z
);

1186 
	}
}

1188 
	$DSPOp23
()

1190 
d•_›code
[0x23]++;

1192 
F
,
L
,
U
;

1193 
F
=
Op23F
; 
L
=
Op23L
; 
U
=
Op23U
;

1194 
Op23X
=()((
F
*
m©rixA3
[0][0]+
L
*m©rixA3[1][0]+
U
*m©rixA3[2][0])/2*
sc3
);

1195 
Op23Y
=()((
F
*
m©rixA3
[0][1]+
L
*m©rixA3[1][1]+
U
*m©rixA3[2][1])/2*
sc3
);

1196 
Op23Z
=()((
F
*
m©rixA3
[0][2]+
L
*m©rixA3[1][2]+
U
*m©rixA3[2][2])/2*
sc3
);

1197 #ifde‡
DebugDSP1


1198 
	`Log_Mesßge
("OP23 F: %d L: %d U: %d / X: %d Y: %d Z: %d",
Op23F
,
Op23L
,
Op23U
,
Op23X
,
Op23Y
,
Op23Z
);

1200 
	}
}

1202 
	gOp14Zr
;

1203 
	gOp14Xr
;

1204 
	gOp14Yr
;

1205 
	gOp14U
;

1206 
	gOp14F
;

1207 
	gOp14L
;

1208 
	gOp14Zº
;

1209 
	gOp14Xº
;

1210 
	gOp14Yº
;

1212 
	gOp14Temp
;

1213 
	$DSPOp14
()

1215 
d•_›code
[0x14]++;

1217 
Op14Temp
=(
Op14Zr
*6.2832/65536.0)+(1/
	`cos
(
Op14Xr
*6.2832/65536.0))*((
Op14U
*6.2832/65536.0)*cos(
Op14Yr
*6.2832/65536.0)-(
Op14F
*6.2832/65536.0)*
	`sö
(Op14Yr*6.2832/65536.0));

1218 
Op14Zº
=()(
Op14Temp
*65536.0/6.2832);

1219 
Op14Temp
=(
Op14Xr
*6.2832/65536.0)+((
Op14U
*6.2832/65536.0)*
	`sö
(
Op14Yr
*6.2832/65536.0)+(
Op14F
*6.2832/65536.0)*
	`cos
(Op14Yr*6.2832/65536.0));

1220 
Op14Xº
=()(
Op14Temp
*65536.0/6.2832);

1221 
Op14Temp
=(
Op14Yr
*6.2832/65536.0)-
	`èn
(
Op14Xr
*6.2832/65536.0)*((
Op14U
*6.2832/65536.0)*
	`cos
(Op14Yr*6.2832/65536.0)+(
Op14F
*6.2832/65536.0)*
	`sö
(Op14Yr*6.2832/65536.0))+(
Op14L
*6.2832/65536.0);

1222 
Op14Yº
=()(
Op14Temp
*65536.0/6.2832);

1223 #ifde‡
DebugDSP1


1224 
	`Log_Mesßge
("OP14 X:%d Y%d Z:%D U:%d F:%d L:%d",
Op14Xr
,
Op14Yr
,
Op14Zr
,
Op14U
,
Op14F
,
Op14L
);

1225 
	`Log_Mesßge
("OP14 X:%d Y%d Z:%D",
Op14Xº
,
Op14Yº
,
Op14Zº
);

1227 
	}
}

1229 
	gOp0EH
;

1230 
	gOp0EV
;

1231 
	gOp0EX
;

1232 
	gOp0EY
;

1234 
	$DSPOp0E
()

1236 
d•_›code
[0x0E]++;

1239 
RVPos
 = 
Op0EV
;

1240 
RHPos
 = 
Op0EH
;

1241 
	`GëRXYPos
();

1242 
Op0EX
 = 
RXRes
;

1243 
Op0EY
 = 
RYRes
;

1245 #ifde‡
DebugDSP1


1246 
	`Log_Mesßge
("OP0E COORDINATE H:%d V:%d X:%d Y:%d",
Op0EH
,
Op0EV
,
Op0EX
,
Op0EY
);

1248 
	}
}

1250 
	gOp0BX
;

1251 
	gOp0BY
;

1252 
	gOp0BZ
;

1253 
	gOp0BS
;

1254 
	gOp1BX
;

1255 
	gOp1BY
;

1256 
	gOp1BZ
;

1257 
	gOp1BS
;

1258 
	gOp2BX
;

1259 
	gOp2BY
;

1260 
	gOp2BZ
;

1261 
	gOp2BS
;

1263 
	$DSPOp0B
()

1265 
d•_›code
[0x0B]++;

1267 
Op0BS
 = (
Op0BX
*
m©rixA
[0][0]+
Op0BY
*
m©rixA2
[0][1]+
Op0BZ
*matrixA2[0][2]);

1268 #ifde‡
DebugDSP1


1269 
	`Log_Mesßge
("OP0B");

1271 
	}
}

1273 
	$DSPOp1B
()

1275 
d•_›code
[0x1B]++;

1277 
Op1BS
 = (
Op1BX
*
m©rixA2
[0][0]+
Op1BY
*m©rixA2[0][1]+
Op1BZ
*matrixA2[0][2]);

1278 #ifde‡
DebugDSP1


1279 
	`Log_Mesßge
("OP1B X: %d Y: %d Z: %d S: %d",
Op1BX
,
Op1BY
,
Op1BZ
,
Op1BS
);

1280 
	`Log_Mesßge
(" MX: %d MY: %d MZ: %d SˇÀ: %d",()(
m©rixA2
[0][0]*100),()(m©rixA2[0][1]*100),()(m©rixA2[0][2]*100),()(
sc2
*100));

1283 
	}
}

1285 
	$DSPOp2B
()

1287 
d•_›code
[0x2B]++;

1289 
Op2BS
 = (
Op2BX
*
m©rixA3
[0][0]+
Op2BY
*m©rixA3[0][1]+
Op2BZ
*matrixA3[0][2]);

1290 #ifde‡
DebugDSP1


1291 
	`Log_Mesßge
("OP2B");

1293 
	}
}

1295 
	gOp08X
,
	gOp08Y
,
	gOp08Z
,
	gOp08Ll
,
	gOp08Lh
;

1296 
	gOp08Size
;

1298 
	$DSPOp08
()

1300 
d•_›code
[0x08]++;

1302 
Op08Size
=(
Op08X
*Op08X+
Op08Y
*Op08Y+
Op08Z
*Op08Z)*2;

1303 
Op08Ll
 = 
Op08Size
&0xFFFF;

1304 
Op08Lh
 = (
Op08Size
>>16) & 0xFFFF;

1305 #ifde‡
DebugDSP1


1306 
	`Log_Mesßge
("OP08 %d,%d,%d",
Op08X
,
Op08Y
,
Op08Z
);

1307 
	`Log_Mesßge
("OP08 ((Op08X^2)+(Op08Y^2)+(Op08X^2))=%x",
Op08Size
 );

1309 
	}
}

1311 
	gOp18X
,
	gOp18Y
,
	gOp18Z
,
	gOp18R
,
	gOp18D
;

1313 
	$DSPOp18
()

1315 
d•_›code
[0x18]++;

1317 
x
,
y
,
z
,
r
;

1318 
x
=
Op18X
; 
y
=
Op18Y
; 
z
=
Op18Z
; 
r
=
Op18R
;

1319 
r
 = (
x
*x+
y
*y+
z
*z-r*r);

1320 i‡(
r
>32767)Ñ=32767;

1321 i‡(
r
<-32768)Ñ=-32768;

1322 
Op18D
=()
r
;

1323 #ifde‡
DebugDSP1


1324 
	`Log_Mesßge
("OP18 X: %d Y: %d Z: %d R: %D DIFF %d",
Op18X
,
Op18Y
,
Op18Z
,
Op18D
);

1326 
	}
}

1328 
	gOp28X
;

1329 
	gOp28Y
;

1330 
	gOp28Z
;

1331 
	gOp28R
;

1333 
öt32
 
	$fixed_sqπ
(
öt32
 
r
)

1335 
öt32
 
t
,
b
,
c
=0;

1337 
b
=0x10000000;b!=0;b>>=2) {

1338 
t
 = 
c
 + 
b
;

1339 
c
 >>= 1;

1340 i‡(
t
 <
r
) {

1341 
r
 -
t
;

1342 
c
 +
b
;

1345 (
c
);

1346 
	}
}

1349 
	$DSPOp28
()

1351 
d•_›code
[0x28]++;

1354 
Op28R
=()
	`fixed_sqπ
((
öt32
)(
Op28X
*Op28X+
Op28Y
*Op28Y+
Op28Z
*Op28Z));

1355 #ifde‡
DebugDSP1


1356 
	`Log_Mesßge
("OP28 X:%d Y:%d Z:%d",
Op28X
,
Op28Y
,
Op28Z
);

1357 
	`Log_Mesßge
("OP28 Ve˘‹ Lígth %d",
Op28R
);

1359 
	}
}

1361 
	gOp1CAZ
;

1362 
	gOp1CX
,
	gOp1CY
,
	gOp1CZ
;

1363 
	gOp1CXBR
,
	gOp1CYBR
,
	gOp1CZBR
,
	gOp1CXAR
,
	gOp1CYAR
,
	gOp1CZAR
;

1364 
	gOp1CX1
;

1365 
	gOp1CY1
;

1366 
	gOp1CZ1
;

1367 
	gOp1CX2
;

1368 
	gOp1CY2
;

1369 
	gOp1CZ2
;

1371 #ifde‡
__OPT1C__


1372 
	$DSPOp1C
()

1374 
d•_›code
[0x1C]++;

1376 
ya
,
xa
,
za
;

1377 
ya
 = 
	`AngÀ
(
Op1CX
);

1378 
xa
 = 
	`AngÀ
(
Op1CY
);

1379 
za
 = 
	`AngÀ
(
Op1CZ
);

1382 
Op1CX1
=(
Op1CXBR
*
	`Cos
(
za
)+
Op1CYBR
*
	`Sö
(za));

1383 
Op1CY1
=(
Op1CXBR
*-
	`Sö
(
za
)+
Op1CYBR
*
	`Cos
(za));

1384 
Op1CZ1
=
Op1CZBR
;

1386 
Op1CX2
=(
Op1CX1
*
	`Cos
(
ya
)+
Op1CZ1
*-
	`Sö
(ya));

1387 
Op1CY2
=
Op1CY1
;

1388 
Op1CZ2
=(
Op1CX1
*
	`Sö
(
ya
)+
Op1CZ1
*
	`Cos
(ya));

1390 
Op1CXAR
=
Op1CX2
;

1391 
Op1CYAR
=(
Op1CY2
*
	`Cos
(
xa
)+
Op1CZ2
*
	`Sö
(xa));

1392 
Op1CZAR
=(
Op1CY2
*-
	`Sö
(
xa
)+
Op1CZ2
*
	`Cos
(xa));

1394 #ifde‡
DebugDSP1


1395 
	`Log_Mesßge
("OP1C Aµly M©rix CX:%d CY:%d CZ",
Op1CXAR
,
Op1CYAR
,
Op1CZAR
);

1397 
	}
}

1399 
	$DSPOp1C
()

1401 
ya
,
xa
,
za
;

1402 
ya
 = 
Op1CX
/65536.0*
PI
*2;

1403 
xa
 = 
Op1CY
/65536.0*
PI
*2;

1404 
za
 = 
Op1CZ
/65536.0*
PI
*2;

1406 
Op1CX1
=(
Op1CXBR
*
	`cos
(
za
)+
Op1CYBR
*
	`sö
(za));

1407 
Op1CY1
=(
Op1CXBR
*-
	`sö
(
za
)+
Op1CYBR
*
	`cos
(za));

1408 
Op1CZ1
=
Op1CZBR
;

1410 
Op1CX2
=(
Op1CX1
*
	`cos
(
ya
)+
Op1CZ1
*-
	`sö
(ya));

1411 
Op1CY2
=
Op1CY1
;

1412 
Op1CZ2
=(
Op1CX1
*
	`sö
(
ya
)+
Op1CZ1
*
	`cos
(ya));

1414 
Op1CXAR
=
Op1CX2
;

1415 
Op1CYAR
=(
Op1CY2
*
	`cos
(
xa
)+
Op1CZ2
*
	`sö
(xa));

1416 
Op1CZAR
=(
Op1CY2
*-
	`sö
(
xa
)+
Op1CZ2
*
	`cos
(xa));

1418 #ifde‡
DebugDSP1


1419 
	`Log_Mesßge
("OP1C Aµly M©rix CX:%d CY:%d CZ",
Op1CXAR
,
Op1CYAR
,
Op1CZAR
);

1421 
	}
}

	@dsp2emu.c

91 
uöt16
 
	gDSP2Op09W‹d1
=0;

92 
uöt16
 
	gDSP2Op09W‹d2
=0;

93 
boﬁ
 
	gDSP2Op05HasLí
=
Ál£
;

94 
	gDSP2Op05Lí
=0;

95 
boﬁ
 
	gDSP2Op06HasLí
=
Ál£
;

96 
	gDSP2Op06Lí
=0;

97 
uöt8
 
	gDSP2Op05Tøn•¨ít
=0;

99 
	$DSP2_Op05
 ()

101 
uöt8
 
cﬁ‹
;

127 
n
;

128 
c1
;

129 
c2
;

130 *
p1
 = 
DSP1
.
∑ømëîs
;

131 *
p2
 = &
DSP1
.
∑ømëîs
[
DSP2Op05Lí
];

132 *
p3
 = 
DSP1
.
ouçut
;

134 
cﬁ‹
 = 
DSP2Op05Tøn•¨ít
&0x0f;

136  
n
 = 0;Ç < 
DSP2Op05Lí
;Ç++ )

138 
c1
 = *
p1
++;

139 
c2
 = *
p2
++;

140 *
p3
++ = ( ((
c2
 >> 4Ë=
cﬁ‹
 ) ? 
c1
 & 0xf0: c2 & 0xf0 ) |

141 –((
c2
 & 0x0f)==
cﬁ‹
Ë? 
c1
 & 0x0f: c2 & 0x0f );

143 
	}
}

145 
	$DSP2_Op01
 ()

150 
j
;

151 
c0
, 
c1
, 
c2
, 
c3
;

152 *
p1
 = 
DSP1
.
∑ømëîs
;

153 *
p2a
 = 
DSP1
.
ouçut
;

154 *
p2b
 = &
DSP1
.
ouçut
[16];

158  
j
 = 0; j < 8; j++ )

160 
c0
 = *
p1
++;

161 
c1
 = *
p1
++;

162 
c2
 = *
p1
++;

163 
c3
 = *
p1
++;

165 *
p2a
++ = (
c0
 & 0x10) << 3 |

166 (
c0
 & 0x01) << 6 |

167 (
c1
 & 0x10) << 1 |

168 (
c1
 & 0x01) << 4 |

169 (
c2
 & 0x10) >> 1 |

170 (
c2
 & 0x01) << 2 |

171 (
c3
 & 0x10) >> 3 |

172 (
c3
 & 0x01);

174 *
p2a
++ = (
c0
 & 0x20) << 2 |

175 (
c0
 & 0x02) << 5 |

176 (
c1
 & 0x20) |

177 (
c1
 & 0x02) << 3 |

178 (
c2
 & 0x20) >> 2 |

179 (
c2
 & 0x02) << 1 |

180 (
c3
 & 0x20) >> 4 |

181 (
c3
 & 0x02) >> 1;

183 *
p2b
++ = (
c0
 & 0x40) << 1 |

184 (
c0
 & 0x04) << 4 |

185 (
c1
 & 0x40) >> 1 |

186 (
c1
 & 0x04) << 2 |

187 (
c2
 & 0x40) >> 3 |

188 (
c2
 & 0x04) |

189 (
c3
 & 0x40) >> 5 |

190 (
c3
 & 0x04) >> 2;

193 *
p2b
++ = (
c0
 & 0x80) |

194 (
c0
 & 0x08) << 3 |

195 (
c1
 & 0x80) >> 2 |

196 (
c1
 & 0x08) << 1 |

197 (
c2
 & 0x80) >> 4 |

198 (
c2
 & 0x08) >> 1 |

199 (
c3
 & 0x80) >> 6 |

200 (
c3
 & 0x08) >> 3;

203 
	}
}

205 
	$DSP2_Op06
 ()

211 
i
, 
j
;

213  
i
 = 0, 
j
 = 
DSP2Op06Lí
 - 1; i < DSP2Op06Len; i++, j-- )

215 
DSP1
.
ouçut
[
j
] = (DSP1.
∑ømëîs
[
i
] << 4) | (DSP1.parameters[i] >> 4);

217 
	}
}

219 
boﬁ
 
	gDSP2Op0DHasLí
=
Ál£
;

220 
	gDSP2Op0DOutLí
=0;

221 
	gDSP2Op0DInLí
=0;

223 #i‚de‡
DSP2_BIT_ACCURRATE_CODE


227 
	$DSP2_Op0D
()

237 
i
;

238 
pixñ_off£t
;

239 
uöt8
 
pixñ¨øy
[512];

241 
i
=0; i<
DSP2Op0DOutLí
*2; i++)

243 
pixñ_off£t
 = (
i
 * 
DSP2Op0DInLí
Ë/ 
DSP2Op0DOutLí
;

244 i‡–(
pixñ_off£t
&1) == 0 )

245 
pixñ¨øy
[
i
] = 
DSP1
.
∑ømëîs
[
pixñ_off£t
>>1] >> 4;

247 
pixñ¨øy
[
i
] = 
DSP1
.
∑ømëîs
[
pixñ_off£t
>>1] & 0x0f;

250  
i
=0; i < 
DSP2Op0DOutLí
; i++ )

251 
DSP1
.
ouçut
[
i
] = ( 
pixñ¨øy
[i<<1] << 4 ) |Öixelarray[(i<<1)+1];

252 
	}
}

256 
	$DSP2_Op0D
()

273 
uöt32
 
mu…ùlõr
;

274 
uöt32
 
pixloc
;

275 
i
, 
j
;

276 
uöt8
 
pixñ¨øy
[512];

278 i‡(
DSP2Op0DInLí
 <
DSP2Op0DOutLí
)

279 
mu…ùlõr
 = 0x10000;

281 
mu…ùlõr
 = (
DSP2Op0DInLí
 << 17Ë/ ((
DSP2Op0DOutLí
<<1) + 1);

283 
pixloc
 = 0;

284  
i
=0; i < 
DSP2Op0DOutLí
 * 2; i++ )

286 
j
 = 
pixloc
 >> 16;

288 i‡–
j
 & 1 )

289 
pixñ¨øy
[
i
] = 
DSP1
.
∑ømëîs
[
j
>>1] & 0x0f;

291 
pixñ¨øy
[
i
] = (
DSP1
.
∑ømëîs
[
j
>>1] & 0xf0) >> 4;

293 
pixloc
 +
mu…ùlõr
;

296  
i
=0; i < 
DSP2Op0DOutLí
; i++ )

297 
DSP1
.
ouçut
[
i
] = ( 
pixñ¨øy
[i<<1] << 4 ) |Öixelarray[(i<<1)+1];

298 
	}
}

304 
	$DSP2_Op0D
()

313 
mu…ùlõr
;

314 
pixloc
;

315 
i
, 
j
;

316 
uöt8
 
pixñ¨øy
[512];

318 i‡(
DSP2Op0DInLí
 <
DSP2Op0DOutLí
)

319 
mu…ùlõr
 = () 1.0;

321 
mu…ùlõr
 = (Ë((
DSP2Op0DInLí
 * 2.0Ë/ (
DSP2Op0DOutLí
 * 2.0 + 1.0));

323 
pixloc
 = 0.0;

324  
i
=0; i < 
DSP2Op0DOutLí
 * 2; i++ )

327 
j
 = (Ë
pixloc
;

329 i‡–
j
 & 1 )

330 
pixñ¨øy
[
i
] = 
DSP1
.
∑ømëîs
[
j
>>1] & 0x0f;

332 
pixñ¨øy
[
i
] = (
DSP1
.
∑ømëîs
[
j
>>1] & 0xf0) >> 4;

334 
pixloc
 +
mu…ùlõr
;

337  
i
=0; i < 
DSP2Op0DOutLí
; i++ )

338 
DSP1
.
ouçut
[
i
] = ( 
pixñ¨øy
[i<<1] << 4 ) |Öixelarray[(i<<1)+1];

339 
	}
}

	@font.h

41 *
	gf⁄t
[] = {

98 
	gf⁄t_width
 = 8;

99 
	gf⁄t_height
 = 9;

	@frame_skip.cpp

1 
	~<uni°d.h
>

2 
	~<sys/time.h
>

3 
	~<time.h
>

4 
	~<m©h.h
>

5 
	~"‰ame_skù.h
"

6 
	~"memm≠.h
"

8 #i‚de‡
u˛ock_t


9 
	#u˛ock_t
 

	)

12 
	#TICKS_PER_SEC
 1000000UL

	)

14 
	gCPU_FPS
=60;

15 
u˛ock_t
 
	gF
;

17 
	#MAX_FRAMESKIP
 10

	)

20 
	göô_‰ame_skù
 = 1;

21 
	gskù_√xt_‰ame
 = 0;

22 
timevÆ
 
	göô_tv
 = { 0, 0 };

25 
	$ª£t_‰ame_skù
()

29 
öô_tv
.
tv_u£c
 = 0;

30 
öô_tv
.
tv_£c
 = 0;

31 
skù_√xt_‰ame
 = 0;

32 
öô_‰ame_skù
 = 1;

33 
CPU_FPS
=
Mem‹y
.
ROMFømesPîSec⁄d
;

35 
F
 = (
u˛ock_t
Ë((Ë
TICKS_PER_SEC
 / 
CPU_FPS
);

36 
	}
}

38 
u˛ock_t
 
	$gë_ticks
()

40 
timevÆ
 
tv
;

42 
	`gëtimeofday
(&
tv
, 0);

43 i‡(
öô_tv
.
tv_£c
 == 0)

44 
öô_tv
 = 
tv
;

45  (
tv
.
tv_£c
 - 
öô_tv
.tv_£cË* 
TICKS_PER_SEC
 +Åv.
tv_u£c
 -

46 
öô_tv
.
tv_u£c
;

49 
	}
}

51 
	$‰ame_skù
()

53 
f2skù
;

54 
u˛ock_t
 
£c
 = 0;

55 
u˛ock_t
 
rfd
;

56 
u˛ock_t
 
èrgë
;

57 
nbFøme
 = 0;

58 
skpFrm
 = 0;

60 i‡(
öô_‰ame_skù
) {

61 
öô_‰ame_skù
 = 0;

62 
èrgë
 = 
	`gë_ticks
();

63 
nbFøme
 = 0;

66 
£c
 = 0;

70 
èrgë
 +
F
;

71 i‡(
f2skù
 > 0) {

72 
f2skù
--;

73 
skpFrm
++;

76 
skpFrm
 = 0;

79 
rfd
 = 
	`gë_ticks
();

81 i‡(
rfd
 < 
èrgë
 && 
f2skù
 == 0) {

82 
	`gë_ticks
(Ë< 
èrgë
);

84 
f2skù
 = (
rfd
 - 
èrgë
Ë/ (Ë
F
;

85 i‡(
f2skù
 > 
MAX_FRAMESKIP
) {

86 
f2skù
 = 
MAX_FRAMESKIP
;

87 
	`ª£t_‰ame_skù
();

93 
nbFøme
++;

94 i‡(
	`gë_ticks
(Ë- 
£c
 >
TICKS_PER_SEC
) {

95 
nbFøme
 = 0;

96 
£c
 = 
	`gë_ticks
();

99 
	}
}

	@frame_skip.h

1 #i‚de‡
_FRAME_SKIP_H


2 
	#_FRAME_SKIP_H


	)

5 
ª£t_‰ame_skù
();

6 
‰ame_skù
();

	@fxdbg.cpp

42 
	~"fxemu.h
"

43 
	~"fxö°.h
"

44 
	~<°dio.h
>

45 
	~<°rög.h
>

47 c⁄° *
fx_≠vM√m⁄icTabÀ
[];

48 
FxRegs_s
 
GSU
;

75 
	$FxPùeSåög
(* 
pvSåög
)

77 *
p
;

78 
uöt32
 
vOpcode
 = (
GSU
.
vSètusReg
 & 0x300Ë| ((uöt32)
PIPE
);

79 c⁄° *
m
 = 
fx_≠vM√m⁄icTabÀ
[
vOpcode
];

80 
uöt8
 
vPùe1
,
vPùe2
,
vByã1
,
vByã2
;

81 
uöt8
 
vPùeB™k
 = 
GSU
.
vPùeAdr
 >> 16;

84 
vPùe1
 = 
GSU
.
≠vRomB™k
[
vPùeB™k
][
	`USEX16
(GSU.
vPùeAdr
+1)];

85 
vPùe2
 = 
GSU
.
≠vRomB™k
[
vPùeB™k
][
	`USEX16
(GSU.
vPùeAdr
+2)];

88 
vByã1
 = 
	`PRGBANK
(
	`USEX16
(
R15
));

89 
vByã2
 = 
	`PRGBANK
(
	`USEX16
(
R15
+1));

92 
	`•rötf
(
pvSåög
, "%02x:%04x %02x ",

93 
	`USEX8
(
vPùeB™k
), 
	`USEX16
(
GSU
.
vPùeAdr
), USEX8(
PIPE
));

94 
p
 = &
pvSåög
[
	`°æí
(pvString)];

97 if–
PIPE
 >= 0x05 && PIPE <= 0x0f )

99 
	`•rötf
(&
pvSåög
[11], "%02x ", 
	`USEX8
(
vPùe1
));

100 #ifde‡
BRANCH_DELAY_RELATIVE


101 
	`•rötf
(
p
, 
m
, 
	`USEX16
(
R15
 + 
	`SEX8
(
vByã1
) + 1 ) );

103 
	`•rötf
(
p
, 
m
, 
	`USEX16
(
R15
 + 
	`SEX8
(
vByã1
) - 1 ) );

107 if–
PIPE
 >0x10 && PIPE <0x1‡&& 
	`TF
(
B
) )

108 
	`•rötf
(
p
, "movêr%d,r%d", 
	`USEX8
(
PIPE
 & 0x0f), 
GSU
.
pvSªg
 - GSU.
avReg
);

110 if–
PIPE
 >= 0xa0 && PIPE <= 0xaf )

112 
	`•rötf
(&
pvSåög
[11], "%02x ", 
	`USEX8
(
vPùe1
));

113 if–(
GSU
.
vSètusReg
 & 0x300) == 0x100 || (GSU.vStatusReg & 0x300) == 0x200 )

114 
	`•rötf
(
p
, 
m
, 
	`USEX16
(
vByã1
) << 1 );

116 
	`•rötf
(
p
, 
m
, 
	`USEX16
(
vByã1
) );

119 if–
PIPE
 >0xb0 && PIPE <0xb‡&& 
	`TF
(
B
) )

120 
	`•rötf
(
p
, "move†r%d,r%d", 
GSU
.
pvDªg
 - GSU.
avReg
, 
	`USEX8
(
PIPE
 & 0x0f) );

122 if–
PIPE
 >= 0xf0 )

124 
	`•rötf
(&
pvSåög
[11], "%02x %02x ", 
	`USEX8
(
vPùe1
), USEX8(
vPùe2
));

125 
	`•rötf
(
p
, 
m
, 
	`USEX8
(
vByã1
Ë| (
	`USEX16
(
vByã2
)<<8) );

129 
	`°r˝y
(
p
, 
m
);

130 
	}
}

132 c⁄° *
	gfx_≠vM√m⁄icTabÀ
[] =

	@fxemu.cpp

41 
	~"fxemu.h
"

42 
	~"fxö°.h
"

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<°dio.h
>

48 
FxRegs_s
 
	gGSU
 = {0};

50 
	$uöt32
 (**
fx_µfFun˘i⁄TabÀ
)(
uöt32
) = 0;

51 (**
fx_µfPlŸTabÀ
)() = 0;

52 (**
fx_µfOpcodeTabÀ
)() = 0;

55 
	$fx_£tCache
()

57 
uöt32
 
c
;

58 
GSU
.
bCacheA˘ive
 = 
TRUE
;

59 
GSU
.
pvRegi°îs
[0x3e] &= 0xf0;

60 
c
 = (
uöt32
)
GSU
.
pvRegi°îs
[0x3e];

61 
c
 |((
uöt32
)
GSU
.
pvRegi°îs
[0x3f])<<8;

62 if(
c
 =
GSU
.
vCacheBa£Reg
)

64 
GSU
.
vCacheBa£Reg
 = 
c
;

65 
GSU
.
vCacheFœgs
 = 0;

66 if(
c
 < (0x10000-512))

68 
uöt8
 c⁄°* 
t
 = &
	`ROM
(
c
);

69 
	`mem˝y
(
GSU
.
pvCache
,
t
,512);

73 
uöt8
 c⁄°* 
t1
;

74 
uöt8
 c⁄°* 
t2
;

75 
uöt32
 
i
 = 0x10000 - 
c
;

76 
t1
 = &
	`ROM
(
c
);

77 
t2
 = &
	`ROM
(0);

78 
	`mem˝y
(
GSU
.
pvCache
,
t1
,
i
);

79 
	`mem˝y
(&
GSU
.
pvCache
[
i
],
t2
,512-i);

81 
	}
}

84 
	$FxCacheWrôeAc˚ss
(
uöt16
 
vAddªss
)

87 if(!
GSU
.
bCacheA˘ive
)

89 
uöt8
 
v
 = 
GSU
.
pvCache
[GSU.pvCache[
vAddªss
&0x1ff];

90 
	`fx_£tCache
();

91 
GSU
.
pvCache
[GSU.pvCache[
vAddªss
&0x1ff] = 
v
;

94 if((
vAddªss
 & 0x00f) == 0x00f)

95 
GSU
.
vCacheFœgs
 |1 << ((
vAddªss
&0x1f0) >> 4);

96 
	}
}

98 
	$FxFlushCache
()

100 
GSU
.
vCacheFœgs
 = 0;

101 
GSU
.
vCacheBa£Reg
 = 0;

102 
GSU
.
bCacheA˘ive
 = 
FALSE
;

104 
	}
}

106 
	$fx_backupCache
()

109 
uöt32
 
i
;

110 
uöt32
 
v
 = 
GSU
.
vCacheFœgs
;

111 
uöt32
 
c
 = 
	`USEX16
(
GSU
.
vCacheBa£Reg
);

112 if(
v
)

113 
i
=0; i<32; i++)

115 if(
v
&1)

117 if(
c
 < (0x10000-16))

119 
uöt8
 * 
t
 = &
GSU
.
pvPrgB™k
[
c
];

120 
	`mem˝y
(&
GSU
.
avCacheBackup
[
i
<<4],
t
,16);

121 
	`mem˝y
(
t
,&
GSU
.
pvCache
[
i
<<4],16);

125 
uöt8
 * 
t1
;

126 
uöt8
 * 
t2
;

127 
uöt32
 
a
 = 0x10000 - 
c
;

128 
t1
 = &
GSU
.
pvPrgB™k
[
c
];

129 
t2
 = &
GSU
.
pvPrgB™k
[0];

130 
	`mem˝y
(&
GSU
.
avCacheBackup
[
i
<<4],
t1
,
a
);

131 
	`mem˝y
(
t1
,&
GSU
.
pvCache
[
i
<<4],
a
);

132 
	`mem˝y
(&
GSU
.
avCacheBackup
[(
i
<<4)+
a
],
t2
,16-a);

133 
	`mem˝y
(
t2
,&
GSU
.
pvCache
[(
i
<<4)+
a
],16-a);

136 
c
 = 
	`USEX16
(c+16);

137 
v
 >>= 1;

140 
	}
}

142 
	$fx_ª°‹eCache
()

145 
uöt32
 
i
;

146 
uöt32
 
v
 = 
GSU
.
vCacheFœgs
;

147 
uöt32
 
c
 = 
	`USEX16
(
GSU
.
vCacheBa£Reg
);

148 if(
v
)

149 
i
=0; i<32; i++)

151 if(
v
&1)

153 if(
c
 < (0x10000-16))

155 
uöt8
 * 
t
 = &
GSU
.
pvPrgB™k
[
c
];

156 
	`mem˝y
(
t
,&
GSU
.
avCacheBackup
[
i
<<4],16);

157 
	`mem˝y
(&
GSU
.
pvCache
[
i
<<4],
t
,16);

161 
uöt8
 * 
t1
;

162 
uöt8
 * 
t2
;

163 
uöt32
 
a
 = 0x10000 - 
c
;

164 
t1
 = &
GSU
.
pvPrgB™k
[
c
];

165 
t2
 = &
GSU
.
pvPrgB™k
[0];

166 
	`mem˝y
(
t1
,&
GSU
.
avCacheBackup
[
i
<<4],
a
);

167 
	`mem˝y
(&
GSU
.
pvCache
[
i
<<4],
t1
,
a
);

168 
	`mem˝y
(
t2
,&
GSU
.
avCacheBackup
[(
i
<<4)+
a
],16-a);

169 
	`mem˝y
(&
GSU
.
pvCache
[(
i
<<4)+
a
],
t2
,16-a);

172 
c
 = 
	`USEX16
(c+16);

173 
v
 >>= 1;

176 
	}
}

178 
	$fx_ÊushCache
()

180 
	`fx_ª°‹eCache
();

181 
GSU
.
vCacheFœgs
 = 0;

182 
GSU
.
bCacheA˘ive
 = 
FALSE
;

183 
	}
}

185 
	$fx_ªadRegi°îS∑˚
()

187 
i
;

188 
uöt8
 *
p
;

189 
uöt32
 
avHeight
[] = { 128, 160, 192, 256 };

190 
uöt32
 
avMu…
[] = { 16, 32, 32, 64 };

192 
GSU
.
vEº‹Code
 = 0;

195 
p
 = 
GSU
.
pvRegi°îs
;

196 
i
=0; i<16; i++)

198 
GSU
.
avReg
[
i
] = *
p
++;

199 
GSU
.
avReg
[
i
] +((
uöt32
)(*
p
++)) << 8;

203 
p
 = 
GSU
.
pvRegi°îs
;

204 
GSU
.
vSètusReg
 = (
uöt32
)
p
[
GSU_SFR
];

205 
GSU
.
vSètusReg
 |((
uöt32
)
p
[
GSU_SFR
+1]) << 8;

206 
GSU
.
vPrgB™kReg
 = (
uöt32
)
p
[
GSU_PBR
];

207 
GSU
.
vRomB™kReg
 = (
uöt32
)
p
[
GSU_ROMBR
];

208 
GSU
.
vRamB™kReg
 = ((
uöt32
)
p
[
GSU_RAMBR
]Ë& (
FX_RAM_BANKS
-1);

209 
GSU
.
vCacheBa£Reg
 = (
uöt32
)
p
[
GSU_CBR
];

210 
GSU
.
vCacheBa£Reg
 |((
uöt32
)
p
[
GSU_CBR
+1]) << 8;

213 
GSU
.
vZîo
 = !(GSU.
vSètusReg
 & 
FLG_Z
);

214 
GSU
.
vSign
 = (GSU.
vSètusReg
 & 
FLG_S
) << 12;

215 
GSU
.
vOvîÊow
 = (GSU.
vSètusReg
 & 
FLG_OV
) << 16;

216 
GSU
.
vC¨ry
 = (GSU.
vSètusReg
 & 
FLG_CY
) >> 2;

219 
GSU
.
pvRamB™k
 = GSU.
≠vRamB™k
[GSU.
vRamB™kReg
 & 0x3];

220 
GSU
.
pvRomB™k
 = GSU.
≠vRomB™k
[GSU.
vRomB™kReg
];

221 
GSU
.
pvPrgB™k
 = GSU.
≠vRomB™k
[GSU.
vPrgB™kReg
];

224 
GSU
.
pvS¸ìnBa£
 = &GSU.
pvRam
[ 
	`USEX8
(
p
[
GSU_SCBR
]) << 10 ];

225 
i
 = ()(!!(
p
[
GSU_SCMR
] & 0x04));

226 
i
 |(()(!!(
p
[
GSU_SCMR
] & 0x20))) << 1;

227 
GSU
.
vS¸ìnHeight
 = GSU.
vS¸ìnRólHeight
 = 
avHeight
[
i
];

228 
GSU
.
vMode
 = 
p
[
GSU_SCMR
] & 0x03;

230 if(
GSU
.
vMode
 == 2)

231 
îr‹
 
ûÀgÆ
 
cﬁ‹
 
dïth
 
GSU
.
vMode
;

233 if(
i
 == 3)

234 
GSU
.
vS¸ìnSize
 = (256/8) * (256/8) * 32;

236 
GSU
.
vS¸ìnSize
 = (GSU.
vS¸ìnHeight
/8Ë* (256/8Ë* 
avMu…
[GSU.
vMode
];

237 i‡(
GSU
.
vPlŸO±i⁄Reg
 & 0x10)

240 
GSU
.
vS¸ìnHeight
 = 256;

243 if(
GSU
.
pvS¸ìnBa£
 + GSU.
vS¸ìnSize
 > GSU.
pvRam
 + (GSU.
nRamB™ks
 * 65536))

244 
îr‹
 
ûÀgÆ
 
addªss
 
s¸ìn
 
ba£
 

246 if(
GSU
.
pvS¸ìnBa£
 + GSU.
vS¸ìnSize
 > GSU.
pvRam
 + (GSU.
nRamB™ks
 * 65536))

247 
GSU
.
pvS¸ìnBa£
 = GSU.
pvRam
 + (GSU.
nRamB™ks
 * 65536Ë- GSU.
vS¸ìnSize
;

249 
GSU
.
pfPlŸ
 = 
fx_≠fPlŸTabÀ
[GSU.
vMode
];

250 
GSU
.
pfRpix
 = 
fx_≠fPlŸTabÀ
[GSU.
vMode
 + 5];

252 
fx_µfOpcodeTabÀ
[0x04c] = 
GSU
.
pfPlŸ
;

253 
fx_µfOpcodeTabÀ
[0x14c] = 
GSU
.
pfRpix
;

254 
fx_µfOpcodeTabÀ
[0x24c] = 
GSU
.
pfPlŸ
;

255 
fx_µfOpcodeTabÀ
[0x34c] = 
GSU
.
pfRpix
;

257 
	`fx_compuãS¸ìnPoöãrs
 ();

259 
	`fx_backupCache
();

260 
	}
}

262 
	$fx_compuãS¸ìnPoöãrs
 ()

264 i‡(
GSU
.
vMode
 !GSU.
vPªvMode
 ||

265 
GSU
.
vPªvS¸ìnHeight
 !GSU.
vS¸ìnHeight
)

267 
i
;

270 
GSU
.
vS¸ìnHeight
)

273 
GSU
.
vMode
)

276 
i
 = 0; i < 32; i++)

278 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 4);

279 
GSU
.
x
[
i
] = i << 8;

283 
i
 = 0; i < 32; i++)

285 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 5);

286 
GSU
.
x
[
i
] = i << 9;

291 
i
 = 0; i < 32; i++)

293 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 6);

294 
GSU
.
x
[
i
] = i << 10;

300 
GSU
.
vMode
)

303 
i
 = 0; i < 32; i++)

305 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 4);

306 
GSU
.
x
[
i
] = (i << 8) + (i << 6);

310 
i
 = 0; i < 32; i++)

312 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 5);

313 
GSU
.
x
[
i
] = (i << 9) + (i << 7);

318 
i
 = 0; i < 32; i++)

320 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 6);

321 
GSU
.
x
[
i
] = (i << 10) + (i << 8);

327 
GSU
.
vMode
)

330 
i
 = 0; i < 32; i++)

332 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 4);

333 
GSU
.
x
[
i
] = (i << 8) + (i << 7);

337 
i
 = 0; i < 32; i++)

339 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 5);

340 
GSU
.
x
[
i
] = (i << 9) + (i << 8);

345 
i
 = 0; i < 32; i++)

347 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 + (i << 6);

348 
GSU
.
x
[
i
] = (i << 10) + (i << 9);

354 
GSU
.
vMode
)

357 
i
 = 0; i < 32; i++)

359 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 +

360 ((
i
 & 0x10) << 9) + ((i & 0xf) << 8);

361 
GSU
.
x
[
i
] = ((i & 0x10) << 8) + ((i & 0xf) << 4);

365 
i
 = 0; i < 32; i++)

367 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 +

368 ((
i
 & 0x10) << 10) + ((i & 0xf) << 9);

369 
GSU
.
x
[
i
] = ((i & 0x10) << 9) + ((i & 0xf) << 5);

374 
i
 = 0; i < 32; i++)

376 
GSU
.
≠vS¸ìn
[
i
] = GSU.
pvS¸ìnBa£
 +

377 ((
i
 & 0x10) << 11) + ((i & 0xf) << 10);

378 
GSU
.
x
[
i
] = ((i & 0x10) << 10) + ((i & 0xf) << 6);

384 
GSU
.
vPªvMode
 = GSU.
vMode
;

385 
GSU
.
vPªvS¸ìnHeight
 = GSU.
vS¸ìnHeight
;

387 
	}
}

389 
	$fx_wrôeRegi°îS∑˚
()

391 
i
;

392 
uöt8
 *
p
;

394 
p
 = 
GSU
.
pvRegi°îs
;

395 
i
=0; i<16; i++)

397 *
p
++ = (
uöt8
)
GSU
.
avReg
[
i
];

398 *
p
++ = (
uöt8
)(
GSU
.
avReg
[
i
] >> 8);

402 if–
	`USEX16
(
GSU
.
vZîo
Ë=0 ) 
	`SF
(
Z
);

403 
	`CF
(
Z
);

404 if–
GSU
.
vSign
 & 0x8000 ) 
	`SF
(
S
);

405 
	`CF
(
S
);

406 if(
GSU
.
vOvîÊow
 >0x8000 || GSU.vOvîÊow < -0x8000Ë
	`SF
(
OV
);

407 
	`CF
(
OV
);

408 if(
GSU
.
vC¨ry
Ë
	`SF
(
CY
);

409 
	`CF
(
CY
);

411 
p
 = 
GSU
.
pvRegi°îs
;

412 
p
[
GSU_SFR
] = (
uöt8
)
GSU
.
vSètusReg
;

413 
p
[
GSU_SFR
+1] = (
uöt8
)(
GSU
.
vSètusReg
>>8);

414 
p
[
GSU_PBR
] = (
uöt8
)
GSU
.
vPrgB™kReg
;

415 
p
[
GSU_ROMBR
] = (
uöt8
)
GSU
.
vRomB™kReg
;

416 
p
[
GSU_RAMBR
] = (
uöt8
)
GSU
.
vRamB™kReg
;

417 
p
[
GSU_CBR
] = (
uöt8
)
GSU
.
vCacheBa£Reg
;

418 
p
[
GSU_CBR
+1] = (
uöt8
)(
GSU
.
vCacheBa£Reg
>>8);

420 
	`fx_ª°‹eCache
();

421 
	}
}

424 
	$FxRe£t
(
FxInô_s
 *
psFxInfo
)

426 
i
;

427 
	`uöt32
 (**
≠pfFun˘i⁄
[])(
uöt32
) = {

428 &
fx_≠fFun˘i⁄TabÀ
[0],

430 &
fx_a_≠fFun˘i⁄TabÀ
[0],

431 &
fx_r_≠fFun˘i⁄TabÀ
[0],

432 &
fx_¨_≠fFun˘i⁄TabÀ
[0],

435 (**
≠pfPlŸ
[])() = {

436 &
fx_≠fPlŸTabÀ
[0],

438 &
fx_a_≠fPlŸTabÀ
[0],

439 &
fx_r_≠fPlŸTabÀ
[0],

440 &
fx_¨_≠fPlŸTabÀ
[0],

443 (**
≠pfOpcode
[])() = {

444 &
fx_≠fOpcodeTabÀ
[0],

446 &
fx_a_≠fOpcodeTabÀ
[0],

447 &
fx_r_≠fOpcodeTabÀ
[0],

448 &
fx_¨_≠fOpcodeTabÀ
[0],

453 
fx_µfFun˘i⁄TabÀ
 = 
≠pfFun˘i⁄
[
psFxInfo
->
vFœgs
 & 0x3];

454 
fx_µfPlŸTabÀ
 = 
≠pfPlŸ
[
psFxInfo
->
vFœgs
 & 0x3];

455 
fx_µfOpcodeTabÀ
 = 
≠pfOpcode
[
psFxInfo
->
vFœgs
 & 0x3];

458 
	`mem£t
((
uöt8
*)&
GSU
,0,(
FxRegs_s
));

461 
GSU
.
pvSªg
 = GSU.
pvDªg
 = &
R0
;

464 
GSU
.
pvRegi°îs
 = 
psFxInfo
->pvRegisters;

465 
GSU
.
nRamB™ks
 = 
psFxInfo
->nRamBanks;

466 
GSU
.
pvRam
 = 
psFxInfo
->pvRam;

467 
GSU
.
nRomB™ks
 = 
psFxInfo
->nRomBanks;

468 
GSU
.
pvRom
 = 
psFxInfo
->pvRom;

469 
GSU
.
vPªvS¸ìnHeight
 = ~0;

470 
GSU
.
vPªvMode
 = ~0;

473 if(
GSU
.
nRomB™ks
 > 0x20)

474 
GSU
.
nRomB™ks
 = 0x20;

477 
	`mem£t
(
GSU
.
pvRegi°îs
,0,0x300);

480 
GSU
.
pvRegi°îs
[0x3b] = 0;

483 
i
=0; i<256; i++)

485 
uöt32
 
b
 = 
i
 & 0x7f;

486 i‡(
b
 >= 0x40)

488 i‡(
GSU
.
nRomB™ks
 > 1)

489 
b
 %
GSU
.
nRomB™ks
;

491 
b
 &= 1;

493 
GSU
.
≠vRomB™k
[
i
] = &GSU.
pvRom
[ 
b
 << 16 ];

497 
b
 %
GSU
.
nRomB™ks
 * 2;

498 
GSU
.
≠vRomB™k
[
i
] = &GSU.
pvRom
[ (
b
 << 16) + 0x200000];

503 
i
=0; i<4; i++)

505 
GSU
.
≠vRamB™k
[
i
] = &GSU.
pvRam
[(ò% GSU.
nRamB™ks
) << 16];

506 
GSU
.
≠vRomB™k
[0x70 + 
i
] = GSU.
≠vRamB™k
[i];

510 
GSU
.
vPùe
 = 0x01;

513 
GSU
.
pvCache
 = &GSU.
pvRegi°îs
[0x100];

515 
	`fx_ªadRegi°îS∑˚
();

516 
	}
}

518 
uöt8
 
	$fx_checkSèπAddªss
()

521 if(
GSU
.
bCacheA˘ive
 && 
R15
 >GSU.
vCacheBa£Reg
 && R15 < (GSU.vCacheBaseReg+512))

522  
TRUE
;

525 if(
GSU
.
vPrgB™kReg
 < 0x40 && 
R15
 < 0x8000)

526  
FALSE
;

527 if(
GSU
.
vPrgB™kReg
 >= 0x60 && GSU.vPrgBankReg <= 0x6f)

528  
FALSE
;

529 if(
GSU
.
vPrgB™kReg
 >= 0x74)

530  
FALSE
;

533 if(
GSU
.
vPrgB™kReg
 >0x70 && GSU.vPrgB™kReg <0x73 && !(
SCMR
&(1<<3)) )

534  
FALSE
;

537 if(!(
SCMR
&(1<<4)))

538  
FALSE
;

540  
TRUE
;

541 
	}
}

544 
	$FxEmuœã
(
uöt32
 
nIn°ru˘i⁄s
)

546 
uöt32
 
vCou¡
;

549 
	`fx_ªadRegi°îS∑˚
();

552 if(!
	`fx_checkSèπAddªss
())

554 
	`CF
(
G
);

555 
	`fx_wrôeRegi°îS∑˚
();

557 
GSU
.
vIŒegÆAddªss
 = (GSU.
vPrgB™kReg
 << 24Ë| 
R15
;

558  
FX_ERROR_ILLEGAL_ADDRESS
;

565 
	`CF
(
IRQ
);

567 if(
GSU
.
bBªakPoöt
)

568 
vCou¡
 = 
fx_µfFun˘i⁄TabÀ
[
FX_FUNCTION_RUN_TO_BREAKPOINT
](
nIn°ru˘i⁄s
);

570 
vCou¡
 = 
fx_µfFun˘i⁄TabÀ
[
FX_FUNCTION_RUN
](
nIn°ru˘i⁄s
);

573 
	`fx_wrôeRegi°îS∑˚
();

576 if(
GSU
.
vEº‹Code
)

577  
GSU
.
vEº‹Code
;

579  
vCou¡
;

580 
	}
}

583 
	$FxBªakPoötSë
(
uöt32
 
vAddªss
)

585 
GSU
.
bBªakPoöt
 = 
TRUE
;

586 
GSU
.
vBªakPoöt
 = 
	`USEX16
(
vAddªss
);

587 
	}
}

588 
	$FxBªakPoötCÀ¨
()

590 
GSU
.
bBªakPoöt
 = 
FALSE
;

591 
	}
}

594 
	$FxSãpOvî
(
uöt32
 
nIn°ru˘i⁄s
)

596 
uöt32
 
vCou¡
;

597 
	`fx_ªadRegi°îS∑˚
();

600 if(!
	`fx_checkSèπAddªss
())

602 
	`CF
(
G
);

604 
GSU
.
vIŒegÆAddªss
 = (GSU.
vPrgB™kReg
 << 24Ë| 
R15
;

605  
FX_ERROR_ILLEGAL_ADDRESS
;

611 if–
PIPE
 >= 0xf0 )

612 
GSU
.
vSãpPoöt
 = 
	`USEX16
(
R15
+3);

613 if–(
PIPE
 >= 0x05 && PIPE <= 0x0f) || (PIPE >= 0xa0 && PIPE <= 0xaf) )

614 
GSU
.
vSãpPoöt
 = 
	`USEX16
(
R15
+2);

616 
GSU
.
vSãpPoöt
 = 
	`USEX16
(
R15
+1);

617 
vCou¡
 = 
fx_µfFun˘i⁄TabÀ
[
FX_FUNCTION_STEP_OVER
](
nIn°ru˘i⁄s
);

618 
	`fx_wrôeRegi°îS∑˚
();

619 if(
GSU
.
vEº‹Code
)

620  
GSU
.
vEº‹Code
;

622  
vCou¡
;

623 
	}
}

626 
	$FxGëEº‹Code
()

628  
GSU
.
vEº‹Code
;

629 
	}
}

631 
	$FxGëIŒegÆAddªss
()

633  
GSU
.
vIŒegÆAddªss
;

634 
	}
}

637 
uöt32
 
	$FxGëCﬁ‹Regi°î
()

639  
GSU
.
vCﬁ‹Reg
 & 0xff;

640 
	}
}

642 
uöt32
 
	$FxGëPlŸO±i⁄Regi°î
()

644  
GSU
.
vPlŸO±i⁄Reg
 & 0x1f;

645 
	}
}

647 
uöt32
 
	$FxGëSour˚Regi°îIndex
()

649  
GSU
.
pvSªg
 - GSU.
avReg
;

650 
	}
}

652 
uöt32
 
	$FxGëDe°ö©i⁄Regi°îIndex
()

654  
GSU
.
pvDªg
 - GSU.
avReg
;

655 
	}
}

657 
uöt8
 
	$FxPùe
()

659  
GSU
.
vPùe
;

660 
	}
}

	@fxemu.h

41 #i‚de‡
_FXEMU_H_


42 
	#_FXEMU_H_
 1

	)

45 #i‚de‡
¢es9x_ty≥s_deföed


46 
	#¢es9x_ty≥s_deföed


	)

48 
	tuöt8
;

49 
	tuöt16
;

50 
	tuöt32
;

51 
	tboﬁ8
;

52 sig√d 
	töt8
;

53 
	töt16
;

54 
	töt32
;

57 #i‚de‡
TRUE


58 
	#TRUE
 1

	)

61 #i‚de‡
FALSE


62 
	#FALSE
 0

	)

66 
	sFxInô_s


68 
uöt32
 
	mvFœgs
;

69 
uöt8
 * 
	mpvRegi°îs
;

70 
uöt32
 
	mnRamB™ks
;

71 
uöt8
 * 
	mpvRam
;

72 
uöt32
 
	mnRomB™ks
;

73 
uöt8
 * 
	mpvRom
;

77 
FxRe£t
(
FxInô_s
 *
psFxInfo
);

80 
FxEmuœã
(
uöt32
 
nIn°ru˘i⁄s
);

83 
FxCacheWrôeAc˚ss
(
uöt16
 
vAddªss
);

84 
FxFlushCache
();

87 
FxBªakPoötSë
(
uöt32
 
vAddªss
);

88 
FxBªakPoötCÀ¨
();

91 
FxSãpOvî
(
uöt32
 
nIn°ru˘i⁄s
);

94 
FxGëEº‹Code
();

95 
FxGëIŒegÆAddªss
();

98 
uöt32
 
FxGëCﬁ‹Regi°î
();

99 
uöt32
 
FxGëPlŸO±i⁄Regi°î
();

100 
uöt32
 
FxGëSour˚Regi°îIndex
();

101 
uöt32
 
FxGëDe°ö©i⁄Regi°îIndex
();

104 
FxPùeSåög
(* 
pvSåög
);

107 
uöt8
 
FxPùe
();

110 
	#FX_FLAG_ADDRESS_CHECKING
 0x01

	)

111 
	#FX_FLAG_ROM_BUFFER
 0x02

	)

114 
	#FX_BREAKPOINT
 -1

	)

115 
	#FX_ERROR_ILLEGAL_ADDRESS
 -2

	)

118 
	#OPCODE_BYTES
(
›
Ë((((›)>=0x05&&(›)<=0xf)||((›)>=0xa0&&(›)<=0xaf))?2:(((›)>=0xf0)?3:1))

	)

120 
fx_compuãS¸ìnPoöãrs
 ();

	@fxinst.cpp

41 
	#FX_DO_ROMBUFFER


	)

43 
	~"fxemu.h
"

44 
	~"fxö°.h
"

45 
	~<°rög.h
>

46 
	~<°dio.h
>

48 
FxRegs_s
 
GSU
;

49 
	ggsu_b™k
 [512] = {0};

53 
	#CHECK_LIMITS


	)

67 
	$fx_°›
()

69 
	`CF
(
G
);

70 
GSU
.
vCou¡î
 = 0;

71 
GSU
.
vIn°Cou¡
 = GSU.
vCou¡î
;

74 if(!(
GSU
.
pvRegi°îs
[
GSU_CFGR
] & 0x80))

75 
	`SF
(
IRQ
);

77 
GSU
.
vPlŸO±i⁄Reg
 = 0;

78 
GSU
.
vPùe
 = 1;

79 
CLRFLAGS
;

80 
R15
++;

81 
	}
}

84 
	$fx_n›
(Ë{ 
CLRFLAGS
; 
R15
++; 
	}
}

86 
fx_ÊushCache
();

89 
	$fx_ˇche
()

91 
uöt32
 
c
 = 
R15
 & 0xfff0;

92 if(
GSU
.
vCacheBa£Reg
 !
c
 || !GSU.
bCacheA˘ive
)

94 
	`fx_ÊushCache
();

95 
GSU
.
vCacheBa£Reg
 = 
c
;

96 
GSU
.
bCacheA˘ive
 = 
TRUE
;

98 if(
c
 < (0x10000-512))

100 
uöt8
 c⁄°* 
t
 = &
	`ROM
(
c
);

101 
	`mem˝y
(
GSU
.
pvCache
,
t
,512);

105 
uöt8
 c⁄°* 
t1
;

106 
uöt8
 c⁄°* 
t2
;

107 
uöt32
 
i
 = 0x10000 - 
c
;

108 
t1
 = &
	`ROM
(
c
);

109 
t2
 = &
	`ROM
(0);

110 
	`mem˝y
(
GSU
.
pvCache
,
t1
,
i
);

111 
	`mem˝y
(&
GSU
.
pvCache
[
i
],
t2
,512-i);

115 
R15
++;

116 
CLRFLAGS
;

117 
	}
}

120 
	$fx_l§
()

122 
uöt32
 
v
;

123 
GSU
.
vC¨ry
 = 
SREG
 & 1;

124 
v
 = 
	`USEX16
(
SREG
) >> 1;

125 
R15
++; 
DREG
 = 
v
;

126 
GSU
.
vSign
 = 
v
;

127 
GSU
.
vZîo
 = 
v
;

128 
TESTR14
;

129 
CLRFLAGS
;

130 
	}
}

133 
	$fx_rﬁ
()

135 
uöt32
 
v
 = (
SREG
 << 1Ë+ 
GSU
.
vC¨ry
;

136 
GSU
.
vC¨ry
 = (
SREG
 >> 15) & 1;

137 
R15
++; 
DREG
 = 
v
;

138 
GSU
.
vSign
 = 
v
;

139 
GSU
.
vZîo
 = 
v
;

140 
TESTR14
;

141 
CLRFLAGS
;

142 
	}
}

145 
	$fx_bø
(Ë{ 
uöt8
 
v
 = 
PIPE
; 
R15
++; 
FETCHPIPE
; R15 +
	`SEX8
(v); 
	}
}

148 
	#BRA_COND
(
c⁄d
Ë
uöt8
 
v
 = 
PIPE
; 
R15
++; 
FETCHPIPE
; if(c⁄dËR15 +
	`SEX8
(v); R15++;

	)

150 
	#TEST_S
 (
GSU
.
vSign
 & 0x8000)

	)

151 
	#TEST_Z
 (
	`USEX16
(
GSU
.
vZîo
Ë=0)

	)

152 
	#TEST_OV
 (
GSU
.
vOvîÊow
 >0x8000 || GSU.vOvîÊow < -0x8000)

	)

153 
	#TEST_CY
 (
GSU
.
vC¨ry
 & 1)

	)

156 
	$fx_b…
(Ë{ 
	`BRA_COND
–(
TEST_S
!=0Ë!(
TEST_OV
!=0Ë); 
	}
}

159 
	$fx_bge
(Ë{ 
	`BRA_COND
–(
TEST_S
!=0Ë=(
TEST_OV
!=0)); 
	}
}

162 
	$fx_b√
(Ë{ 
	`BRA_COND
–!
TEST_Z
 ); 
	}
}

165 
	$fx_beq
(Ë{ 
	`BRA_COND
–
TEST_Z
 ); 
	}
}

168 
	$fx_b∂
(Ë{ 
	`BRA_COND
–!
TEST_S
 ); 
	}
}

171 
	$fx_bmi
(Ë{ 
	`BRA_COND
–
TEST_S
 ); 
	}
}

174 
	$fx_bcc
(Ë{ 
	`BRA_COND
–!
TEST_CY
 ); 
	}
}

177 
	$fx_bcs
(Ë{ 
	`BRA_COND
–
TEST_CY
 ); 
	}
}

180 
	$fx_bvc
(Ë{ 
	`BRA_COND
–!
TEST_OV
 ); 
	}
}

183 
	$fx_bvs
(Ë{ 
	`BRA_COND
–
TEST_OV
 ); 
	}
}

187 
	#FX_TO
(
ªg
) \

188 if(
	`TF
(
B
)Ë{ 
GSU
.
avReg
[(
ªg
)] = 
SREG
; 
CLRFLAGS
; } \

189 { 
GSU
.
pvDªg
 = &GSU.
avReg
[
ªg
]; } 
R15
++;

	)

190 
	#FX_TO_R14
(
ªg
) \

191 if(
	`TF
(
B
)Ë{ 
GSU
.
avReg
[(
ªg
)] = 
SREG
; 
CLRFLAGS
; 
READR14
; } \

192 { 
GSU
.
pvDªg
 = &GSU.
avReg
[
ªg
]; } 
R15
++;

	)

193 
	#FX_TO_R15
(
ªg
) \

194 if(
	`TF
(
B
)Ë{ 
GSU
.
avReg
[(
ªg
)] = 
SREG
; 
CLRFLAGS
; } \

195 { 
GSU
.
pvDªg
 = &GSU.
avReg
[
ªg
]; 
R15
++; }

	)

196 
	$fx_to_r0
(Ë{ 
	`FX_TO
(0); 
	}
}

197 
	$fx_to_r1
(Ë{ 
	`FX_TO
(1); 
	}
}

198 
	$fx_to_r2
(Ë{ 
	`FX_TO
(2); 
	}
}

199 
	$fx_to_r3
(Ë{ 
	`FX_TO
(3); 
	}
}

200 
	$fx_to_r4
(Ë{ 
	`FX_TO
(4); 
	}
}

201 
	$fx_to_r5
(Ë{ 
	`FX_TO
(5); 
	}
}

202 
	$fx_to_r6
(Ë{ 
	`FX_TO
(6); 
	}
}

203 
	$fx_to_r7
(Ë{ 
	`FX_TO
(7); 
	}
}

204 
	$fx_to_r8
(Ë{ 
	`FX_TO
(8); 
	}
}

205 
	$fx_to_r9
(Ë{ 
	`FX_TO
(9); 
	}
}

206 
	$fx_to_r10
(Ë{ 
	`FX_TO
(10); 
	}
}

207 
	$fx_to_r11
(Ë{ 
	`FX_TO
(11); 
	}
}

208 
	$fx_to_r12
(Ë{ 
	`FX_TO
(12); 
	}
}

209 
	$fx_to_r13
(Ë{ 
	`FX_TO
(13); 
	}
}

210 
	$fx_to_r14
(Ë{ 
	`FX_TO_R14
(14); 
	}
}

211 
	$fx_to_r15
(Ë{ 
	`FX_TO_R15
(15); 
	}
}

214 
	#FX_WITH
(
ªg
Ë
	`SF
(
B
); 
GSU
.
pvSªg
 = GSU.
pvDªg
 = &GSU.
avReg
[ªg]; 
R15
++;

	)

215 
	$fx_wôh_r0
(Ë{ 
	`FX_WITH
(0); 
	}
}

216 
	$fx_wôh_r1
(Ë{ 
	`FX_WITH
(1); 
	}
}

217 
	$fx_wôh_r2
(Ë{ 
	`FX_WITH
(2); 
	}
}

218 
	$fx_wôh_r3
(Ë{ 
	`FX_WITH
(3); 
	}
}

219 
	$fx_wôh_r4
(Ë{ 
	`FX_WITH
(4); 
	}
}

220 
	$fx_wôh_r5
(Ë{ 
	`FX_WITH
(5); 
	}
}

221 
	$fx_wôh_r6
(Ë{ 
	`FX_WITH
(6); 
	}
}

222 
	$fx_wôh_r7
(Ë{ 
	`FX_WITH
(7); 
	}
}

223 
	$fx_wôh_r8
(Ë{ 
	`FX_WITH
(8); 
	}
}

224 
	$fx_wôh_r9
(Ë{ 
	`FX_WITH
(9); 
	}
}

225 
	$fx_wôh_r10
(Ë{ 
	`FX_WITH
(10); 
	}
}

226 
	$fx_wôh_r11
(Ë{ 
	`FX_WITH
(11); 
	}
}

227 
	$fx_wôh_r12
(Ë{ 
	`FX_WITH
(12); 
	}
}

228 
	$fx_wôh_r13
(Ë{ 
	`FX_WITH
(13); 
	}
}

229 
	$fx_wôh_r14
(Ë{ 
	`FX_WITH
(14); 
	}
}

230 
	$fx_wôh_r15
(Ë{ 
	`FX_WITH
(15); 
	}
}

233 
	#FX_STW
(
ªg
) \

234 
GSU
.
vLa°RamAdr
 = GSU.
avReg
[
ªg
]; \

235 
	`RAM
(
GSU
.
avReg
[
ªg
]Ë(
uöt8
)
SREG
; \

236 
	`RAM
(
GSU
.
avReg
[
ªg
]^1Ë(
uöt8
)(
SREG
>>8); \

237 
CLRFLAGS
; 
R15
++

	)

238 
	$fx_°w_r0
(Ë{ 
	`FX_STW
(0); 
	}
}

239 
	$fx_°w_r1
(Ë{ 
	`FX_STW
(1); 
	}
}

240 
	$fx_°w_r2
(Ë{ 
	`FX_STW
(2); 
	}
}

241 
	$fx_°w_r3
(Ë{ 
	`FX_STW
(3); 
	}
}

242 
	$fx_°w_r4
(Ë{ 
	`FX_STW
(4); 
	}
}

243 
	$fx_°w_r5
(Ë{ 
	`FX_STW
(5); 
	}
}

244 
	$fx_°w_r6
(Ë{ 
	`FX_STW
(6); 
	}
}

245 
	$fx_°w_r7
(Ë{ 
	`FX_STW
(7); 
	}
}

246 
	$fx_°w_r8
(Ë{ 
	`FX_STW
(8); 
	}
}

247 
	$fx_°w_r9
(Ë{ 
	`FX_STW
(9); 
	}
}

248 
	$fx_°w_r10
(Ë{ 
	`FX_STW
(10); 
	}
}

249 
	$fx_°w_r11
(Ë{ 
	`FX_STW
(11); 
	}
}

252 
	#FX_STB
(
ªg
) \

253 
GSU
.
vLa°RamAdr
 = GSU.
avReg
[
ªg
]; \

254 
	`RAM
(
GSU
.
avReg
[
ªg
]Ë(
uöt8
)
SREG
; \

255 
CLRFLAGS
; 
R15
++

	)

256 
	$fx_°b_r0
(Ë{ 
	`FX_STB
(0); 
	}
}

257 
	$fx_°b_r1
(Ë{ 
	`FX_STB
(1); 
	}
}

258 
	$fx_°b_r2
(Ë{ 
	`FX_STB
(2); 
	}
}

259 
	$fx_°b_r3
(Ë{ 
	`FX_STB
(3); 
	}
}

260 
	$fx_°b_r4
(Ë{ 
	`FX_STB
(4); 
	}
}

261 
	$fx_°b_r5
(Ë{ 
	`FX_STB
(5); 
	}
}

262 
	$fx_°b_r6
(Ë{ 
	`FX_STB
(6); 
	}
}

263 
	$fx_°b_r7
(Ë{ 
	`FX_STB
(7); 
	}
}

264 
	$fx_°b_r8
(Ë{ 
	`FX_STB
(8); 
	}
}

265 
	$fx_°b_r9
(Ë{ 
	`FX_STB
(9); 
	}
}

266 
	$fx_°b_r10
(Ë{ 
	`FX_STB
(10); 
	}
}

267 
	$fx_°b_r11
(Ë{ 
	`FX_STB
(11); 
	}
}

270 
	$fx_lo›
()

272 
GSU
.
vSign
 = GSU.
vZîo
 = --
R12
;

273 if–(
uöt16
Ë
R12
 != 0 )

274 
R15
 = 
R13
;

276 
R15
++;

278 
CLRFLAGS
;

279 
	}
}

282 
	$fx_Æt1
(Ë{ 
	`SF
(
ALT1
); 
	`CF
(
B
); 
R15
++; 
	}
}

285 
	$fx_Æt2
(Ë{ 
	`SF
(
ALT2
); 
	`CF
(
B
); 
R15
++; 
	}
}

288 
	$fx_Æt3
(Ë{ 
	`SF
(
ALT1
); SF(
ALT2
); 
	`CF
(
B
); 
R15
++; 
	}
}

291 
	#FX_LDW
(
ªg
Ë
uöt32
 
v
; \

292 
GSU
.
vLa°RamAdr
 = GSU.
avReg
[
ªg
]; \

293 
v
 = (
uöt32
)
	`RAM
(
GSU
.
avReg
[
ªg
]); \

294 
v
 |((
uöt32
)
	`RAM
(
GSU
.
avReg
[
ªg
]^1))<<8; \

295 
R15
++; 
DREG
 = 
v
; \

296 
TESTR14
; \

297 
CLRFLAGS


	)

298 
	$fx_ldw_r0
(Ë{ 
	`FX_LDW
(0); 
	}
}

299 
	$fx_ldw_r1
(Ë{ 
	`FX_LDW
(1); 
	}
}

300 
	$fx_ldw_r2
(Ë{ 
	`FX_LDW
(2); 
	}
}

301 
	$fx_ldw_r3
(Ë{ 
	`FX_LDW
(3); 
	}
}

302 
	$fx_ldw_r4
(Ë{ 
	`FX_LDW
(4); 
	}
}

303 
	$fx_ldw_r5
(Ë{ 
	`FX_LDW
(5); 
	}
}

304 
	$fx_ldw_r6
(Ë{ 
	`FX_LDW
(6); 
	}
}

305 
	$fx_ldw_r7
(Ë{ 
	`FX_LDW
(7); 
	}
}

306 
	$fx_ldw_r8
(Ë{ 
	`FX_LDW
(8); 
	}
}

307 
	$fx_ldw_r9
(Ë{ 
	`FX_LDW
(9); 
	}
}

308 
	$fx_ldw_r10
(Ë{ 
	`FX_LDW
(10); 
	}
}

309 
	$fx_ldw_r11
(Ë{ 
	`FX_LDW
(11); 
	}
}

312 
	#FX_LDB
(
ªg
Ë
uöt32
 
v
; \

313 
GSU
.
vLa°RamAdr
 = GSU.
avReg
[
ªg
]; \

314 
v
 = (
uöt32
)
	`RAM
(
GSU
.
avReg
[
ªg
]); \

315 
R15
++; 
DREG
 = 
v
; \

316 
TESTR14
; \

317 
CLRFLAGS


	)

318 
	$fx_ldb_r0
(Ë{ 
	`FX_LDB
(0); 
	}
}

319 
	$fx_ldb_r1
(Ë{ 
	`FX_LDB
(1); 
	}
}

320 
	$fx_ldb_r2
(Ë{ 
	`FX_LDB
(2); 
	}
}

321 
	$fx_ldb_r3
(Ë{ 
	`FX_LDB
(3); 
	}
}

322 
	$fx_ldb_r4
(Ë{ 
	`FX_LDB
(4); 
	}
}

323 
	$fx_ldb_r5
(Ë{ 
	`FX_LDB
(5); 
	}
}

324 
	$fx_ldb_r6
(Ë{ 
	`FX_LDB
(6); 
	}
}

325 
	$fx_ldb_r7
(Ë{ 
	`FX_LDB
(7); 
	}
}

326 
	$fx_ldb_r8
(Ë{ 
	`FX_LDB
(8); 
	}
}

327 
	$fx_ldb_r9
(Ë{ 
	`FX_LDB
(9); 
	}
}

328 
	$fx_ldb_r10
(Ë{ 
	`FX_LDB
(10); 
	}
}

329 
	$fx_ldb_r11
(Ë{ 
	`FX_LDB
(11); 
	}
}

332 
	$fx_∂Ÿ_2bô
()

334 
uöt32
 
x
 = 
	`USEX8
(
R1
);

335 
uöt32
 
y
 = 
	`USEX8
(
R2
);

336 
uöt8
 *
a
;

337 
uöt8
 
v
,
c
;

339 
R15
++;

340 
CLRFLAGS
;

341 
R1
++;

343 #ifde‡
CHECK_LIMITS


344 if(
y
 >
GSU
.
vS¸ìnHeight
) ;

346 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x02)

347 
c
 = (
x
^
y
)&1 ? (
uöt8
)(
GSU
.
vCﬁ‹Reg
>>4) : (uint8)GSU.vColorReg;

349 
c
 = (
uöt8
)
GSU
.
vCﬁ‹Reg
;

351 if–!(
GSU
.
vPlŸO±i⁄Reg
 & 0x01Ë&& !(
c
 & 0xf)) ;

352 
a
 = 
GSU
.
≠vS¸ìn
[
y
 >> 3] + GSU.
x
[x >> 3] + ((y & 7) << 1);

353 
v
 = 128 >> (
x
&7);

355 if(
c
 & 0x01Ë
a
[0] |
v
;

356 
a
[0] &~
v
;

357 if(
c
 & 0x02Ë
a
[1] |
v
;

358 
a
[1] &~
v
;

359 
	}
}

362 
	$fx_Ωix_2bô
()

364 
uöt32
 
x
 = 
	`USEX8
(
R1
);

365 
uöt32
 
y
 = 
	`USEX8
(
R2
);

366 
uöt8
 *
a
;

367 
uöt8
 
v
;

369 
R15
++;

370 
CLRFLAGS
;

371 #ifde‡
CHECK_LIMITS


372 if(
y
 >
GSU
.
vS¸ìnHeight
) ;

375 
a
 = 
GSU
.
≠vS¸ìn
[
y
 >> 3] + GSU.
x
[x >> 3] + ((y & 7) << 1);

376 
v
 = 128 >> (
x
&7);

378 
DREG
 = 0;

379 
DREG
 |((
uöt32
)((
a
[0] & 
v
) != 0)) << 0;

380 
DREG
 |((
uöt32
)((
a
[1] & 
v
) != 0)) << 1;

381 
TESTR14
;

382 
	}
}

385 
	$fx_∂Ÿ_4bô
()

387 
uöt32
 
x
 = 
	`USEX8
(
R1
);

388 
uöt32
 
y
 = 
	`USEX8
(
R2
);

389 
uöt8
 *
a
;

390 
uöt8
 
v
,
c
;

392 
R15
++;

393 
CLRFLAGS
;

394 
R1
++;

396 #ifde‡
CHECK_LIMITS


397 if(
y
 >
GSU
.
vS¸ìnHeight
) ;

399 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x02)

400 
c
 = (
x
^
y
)&1 ? (
uöt8
)(
GSU
.
vCﬁ‹Reg
>>4) : (uint8)GSU.vColorReg;

402 
c
 = (
uöt8
)
GSU
.
vCﬁ‹Reg
;

404 if–!(
GSU
.
vPlŸO±i⁄Reg
 & 0x01Ë&& !(
c
 & 0xf)) ;

406 
a
 = 
GSU
.
≠vS¸ìn
[
y
 >> 3] + GSU.
x
[x >> 3] + ((y & 7) << 1);

407 
v
 = 128 >> (
x
&7);

409 if(
c
 & 0x01Ë
a
[0x00] |
v
;

410 
a
[0x00] &~
v
;

411 if(
c
 & 0x02Ë
a
[0x01] |
v
;

412 
a
[0x01] &~
v
;

413 if(
c
 & 0x04Ë
a
[0x10] |
v
;

414 
a
[0x10] &~
v
;

415 if(
c
 & 0x08Ë
a
[0x11] |
v
;

416 
a
[0x11] &~
v
;

417 
	}
}

420 
	$fx_Ωix_4bô
()

422 
uöt32
 
x
 = 
	`USEX8
(
R1
);

423 
uöt32
 
y
 = 
	`USEX8
(
R2
);

424 
uöt8
 *
a
;

425 
uöt8
 
v
;

427 
R15
++;

428 
CLRFLAGS
;

430 #ifde‡
CHECK_LIMITS


431 if(
y
 >
GSU
.
vS¸ìnHeight
) ;

434 
a
 = 
GSU
.
≠vS¸ìn
[
y
 >> 3] + GSU.
x
[x >> 3] + ((y & 7) << 1);

435 
v
 = 128 >> (
x
&7);

437 
DREG
 = 0;

438 
DREG
 |((
uöt32
)((
a
[0x00] & 
v
) != 0)) << 0;

439 
DREG
 |((
uöt32
)((
a
[0x01] & 
v
) != 0)) << 1;

440 
DREG
 |((
uöt32
)((
a
[0x10] & 
v
) != 0)) << 2;

441 
DREG
 |((
uöt32
)((
a
[0x11] & 
v
) != 0)) << 3;

442 
TESTR14
;

443 
	}
}

446 
	$fx_∂Ÿ_8bô
()

448 
uöt32
 
x
 = 
	`USEX8
(
R1
);

449 
uöt32
 
y
 = 
	`USEX8
(
R2
);

450 
uöt8
 *
a
;

451 
uöt8
 
v
,
c
;

453 
R15
++;

454 
CLRFLAGS
;

455 
R1
++;

457 #ifde‡
CHECK_LIMITS


458 if(
y
 >
GSU
.
vS¸ìnHeight
) ;

460 
c
 = (
uöt8
)
GSU
.
vCﬁ‹Reg
;

461 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x10)

462 if–!(
GSU
.
vPlŸO±i⁄Reg
 & 0x01Ë&& !(
c
&0xf)) ;

464 if–!(
GSU
.
vPlŸO±i⁄Reg
 & 0x01Ë&& !
c
) ;

466 
a
 = 
GSU
.
≠vS¸ìn
[
y
 >> 3] + GSU.
x
[x >> 3] + ((y & 7) << 1);

467 
v
 = 128 >> (
x
&7);

469 if(
c
 & 0x01Ë
a
[0x00] |
v
;

470 
a
[0x00] &~
v
;

471 if(
c
 & 0x02Ë
a
[0x01] |
v
;

472 
a
[0x01] &~
v
;

473 if(
c
 & 0x04Ë
a
[0x10] |
v
;

474 
a
[0x10] &~
v
;

475 if(
c
 & 0x08Ë
a
[0x11] |
v
;

476 
a
[0x11] &~
v
;

477 if(
c
 & 0x10Ë
a
[0x20] |
v
;

478 
a
[0x20] &~
v
;

479 if(
c
 & 0x20Ë
a
[0x21] |
v
;

480 
a
[0x21] &~
v
;

481 if(
c
 & 0x40Ë
a
[0x30] |
v
;

482 
a
[0x30] &~
v
;

483 if(
c
 & 0x80Ë
a
[0x31] |
v
;

484 
a
[0x31] &~
v
;

485 
	}
}

488 
	$fx_Ωix_8bô
()

490 
uöt32
 
x
 = 
	`USEX8
(
R1
);

491 
uöt32
 
y
 = 
	`USEX8
(
R2
);

492 
uöt8
 *
a
;

493 
uöt8
 
v
;

495 
R15
++;

496 
CLRFLAGS
;

498 #ifde‡
CHECK_LIMITS


499 if(
y
 >
GSU
.
vS¸ìnHeight
) ;

501 
a
 = 
GSU
.
≠vS¸ìn
[
y
 >> 3] + GSU.
x
[x >> 3] + ((y & 7) << 1);

502 
v
 = 128 >> (
x
&7);

504 
DREG
 = 0;

505 
DREG
 |((
uöt32
)((
a
[0x00] & 
v
) != 0)) << 0;

506 
DREG
 |((
uöt32
)((
a
[0x01] & 
v
) != 0)) << 1;

507 
DREG
 |((
uöt32
)((
a
[0x10] & 
v
) != 0)) << 2;

508 
DREG
 |((
uöt32
)((
a
[0x11] & 
v
) != 0)) << 3;

509 
DREG
 |((
uöt32
)((
a
[0x20] & 
v
) != 0)) << 4;

510 
DREG
 |((
uöt32
)((
a
[0x21] & 
v
) != 0)) << 5;

511 
DREG
 |((
uöt32
)((
a
[0x30] & 
v
) != 0)) << 6;

512 
DREG
 |((
uöt32
)((
a
[0x31] & 
v
) != 0)) << 7;

513 
TESTR14
;

514 
	}
}

517 
	$fx_∂Ÿ_obj
()

519 
	`¥ötf
 ("ERROR fx_plot_obj called\n");

520 
	}
}

523 
	$fx_Ωix_obj
()

525 
	`¥ötf
 ("ERROR fx_rpix_obj called\n");

526 
	}
}

529 
	$fx_sw≠
()

531 
uöt8
 
c
 = (uöt8)
SREG
;

532 
uöt8
 
d
 = (uöt8)(
SREG
>>8);

533 
uöt32
 
v
 = (((uöt32)
c
)<<8)|((uöt32)
d
);

534 
R15
++; 
DREG
 = 
v
;

535 
GSU
.
vSign
 = 
v
;

536 
GSU
.
vZîo
 = 
v
;

537 
TESTR14
;

538 
CLRFLAGS
;

539 
	}
}

542 
	$fx_cﬁ‹
()

544 
uöt8
 
c
 = (uöt8)
SREG
;

545 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x04)

546 
c
 = (c&0xf0) | (c>>4);

547 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x08)

549 
GSU
.
vCﬁ‹Reg
 &= 0xf0;

550 
GSU
.
vCﬁ‹Reg
 |
c
 & 0x0f;

553 
GSU
.
vCﬁ‹Reg
 = 
	`USEX8
(
c
);

554 
CLRFLAGS
;

555 
R15
++;

556 
	}
}

559 
	$fx_cmode
()

561 
GSU
.
vPlŸO±i⁄Reg
 = 
SREG
;

563 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x10)

566 
GSU
.
vS¸ìnHeight
 = 256;

569 
GSU
.
vS¸ìnHeight
 = GSU.
vS¸ìnRólHeight
;

571 
	`fx_compuãS¸ìnPoöãrs
 ();

572 
CLRFLAGS
;

573 
R15
++;

574 
	}
}

577 
	$fx_nŸ
()

579 
uöt32
 
v
 = ~
SREG
;

580 
R15
++; 
DREG
 = 
v
;

581 
GSU
.
vSign
 = 
v
;

582 
GSU
.
vZîo
 = 
v
;

583 
TESTR14
;

584 
CLRFLAGS
;

585 
	}
}

588 
	#FX_ADD
(
ªg
) \

589 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë+ SUSEX16(
GSU
.
avReg
[
ªg
]); \

590 
GSU
.
vC¨ry
 = 
s
 >= 0x10000; \

591 
GSU
.
vOvîÊow
 = ~(
SREG
 ^ GSU.
avReg
[
ªg
]Ë& (GSU.avReg[ªg] ^ 
s
) & 0x8000; \

592 
GSU
.
vSign
 = 
s
; \

593 
GSU
.
vZîo
 = 
s
; \

594 
R15
++; 
DREG
 = 
s
; \

595 
TESTR14
; \

596 
CLRFLAGS


	)

597 
	$fx_add_r0
(Ë{ 
	`FX_ADD
(0); 
	}
}

598 
	$fx_add_r1
(Ë{ 
	`FX_ADD
(1); 
	}
}

599 
	$fx_add_r2
(Ë{ 
	`FX_ADD
(2); 
	}
}

600 
	$fx_add_r3
(Ë{ 
	`FX_ADD
(3); 
	}
}

601 
	$fx_add_r4
(Ë{ 
	`FX_ADD
(4); 
	}
}

602 
	$fx_add_r5
(Ë{ 
	`FX_ADD
(5); 
	}
}

603 
	$fx_add_r6
(Ë{ 
	`FX_ADD
(6); 
	}
}

604 
	$fx_add_r7
(Ë{ 
	`FX_ADD
(7); 
	}
}

605 
	$fx_add_r8
(Ë{ 
	`FX_ADD
(8); 
	}
}

606 
	$fx_add_r9
(Ë{ 
	`FX_ADD
(9); 
	}
}

607 
	$fx_add_r10
(Ë{ 
	`FX_ADD
(10); 
	}
}

608 
	$fx_add_r11
(Ë{ 
	`FX_ADD
(11); 
	}
}

609 
	$fx_add_r12
(Ë{ 
	`FX_ADD
(12); 
	}
}

610 
	$fx_add_r13
(Ë{ 
	`FX_ADD
(13); 
	}
}

611 
	$fx_add_r14
(Ë{ 
	`FX_ADD
(14); 
	}
}

612 
	$fx_add_r15
(Ë{ 
	`FX_ADD
(15); 
	}
}

615 
	#FX_ADC
(
ªg
) \

616 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë+ SUSEX16(
GSU
.
avReg
[
ªg
]Ë+ 
	`SEX16
(GSU.
vC¨ry
); \

617 
GSU
.
vC¨ry
 = 
s
 >= 0x10000; \

618 
GSU
.
vOvîÊow
 = ~(
SREG
 ^ GSU.
avReg
[
ªg
]Ë& (GSU.avReg[ªg] ^ 
s
) & 0x8000; \

619 
GSU
.
vSign
 = 
s
; \

620 
GSU
.
vZîo
 = 
s
; \

621 
R15
++; 
DREG
 = 
s
; \

622 
TESTR14
; \

623 
CLRFLAGS


	)

624 
	$fx_adc_r0
(Ë{ 
	`FX_ADC
(0); 
	}
}

625 
	$fx_adc_r1
(Ë{ 
	`FX_ADC
(1); 
	}
}

626 
	$fx_adc_r2
(Ë{ 
	`FX_ADC
(2); 
	}
}

627 
	$fx_adc_r3
(Ë{ 
	`FX_ADC
(3); 
	}
}

628 
	$fx_adc_r4
(Ë{ 
	`FX_ADC
(4); 
	}
}

629 
	$fx_adc_r5
(Ë{ 
	`FX_ADC
(5); 
	}
}

630 
	$fx_adc_r6
(Ë{ 
	`FX_ADC
(6); 
	}
}

631 
	$fx_adc_r7
(Ë{ 
	`FX_ADC
(7); 
	}
}

632 
	$fx_adc_r8
(Ë{ 
	`FX_ADC
(8); 
	}
}

633 
	$fx_adc_r9
(Ë{ 
	`FX_ADC
(9); 
	}
}

634 
	$fx_adc_r10
(Ë{ 
	`FX_ADC
(10); 
	}
}

635 
	$fx_adc_r11
(Ë{ 
	`FX_ADC
(11); 
	}
}

636 
	$fx_adc_r12
(Ë{ 
	`FX_ADC
(12); 
	}
}

637 
	$fx_adc_r13
(Ë{ 
	`FX_ADC
(13); 
	}
}

638 
	$fx_adc_r14
(Ë{ 
	`FX_ADC
(14); 
	}
}

639 
	$fx_adc_r15
(Ë{ 
	`FX_ADC
(15); 
	}
}

642 
	#FX_ADD_I
(
imm
) \

643 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë+ 
imm
; \

644 
GSU
.
vC¨ry
 = 
s
 >= 0x10000; \

645 
GSU
.
vOvîÊow
 = ~(
SREG
 ^ 
imm
Ë& (imm ^ 
s
) & 0x8000; \

646 
GSU
.
vSign
 = 
s
; \

647 
GSU
.
vZîo
 = 
s
; \

648 
R15
++; 
DREG
 = 
s
; \

649 
TESTR14
; \

650 
CLRFLAGS


	)

651 
	$fx_add_i0
(Ë{ 
	`FX_ADD_I
(0); 
	}
}

652 
	$fx_add_i1
(Ë{ 
	`FX_ADD_I
(1); 
	}
}

653 
	$fx_add_i2
(Ë{ 
	`FX_ADD_I
(2); 
	}
}

654 
	$fx_add_i3
(Ë{ 
	`FX_ADD_I
(3); 
	}
}

655 
	$fx_add_i4
(Ë{ 
	`FX_ADD_I
(4); 
	}
}

656 
	$fx_add_i5
(Ë{ 
	`FX_ADD_I
(5); 
	}
}

657 
	$fx_add_i6
(Ë{ 
	`FX_ADD_I
(6); 
	}
}

658 
	$fx_add_i7
(Ë{ 
	`FX_ADD_I
(7); 
	}
}

659 
	$fx_add_i8
(Ë{ 
	`FX_ADD_I
(8); 
	}
}

660 
	$fx_add_i9
(Ë{ 
	`FX_ADD_I
(9); 
	}
}

661 
	$fx_add_i10
(Ë{ 
	`FX_ADD_I
(10); 
	}
}

662 
	$fx_add_i11
(Ë{ 
	`FX_ADD_I
(11); 
	}
}

663 
	$fx_add_i12
(Ë{ 
	`FX_ADD_I
(12); 
	}
}

664 
	$fx_add_i13
(Ë{ 
	`FX_ADD_I
(13); 
	}
}

665 
	$fx_add_i14
(Ë{ 
	`FX_ADD_I
(14); 
	}
}

666 
	$fx_add_i15
(Ë{ 
	`FX_ADD_I
(15); 
	}
}

669 
	#FX_ADC_I
(
imm
) \

670 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë+ 
imm
 + SUSEX16(
GSU
.
vC¨ry
); \

671 
GSU
.
vC¨ry
 = 
s
 >= 0x10000; \

672 
GSU
.
vOvîÊow
 = ~(
SREG
 ^ 
imm
Ë& (imm ^ 
s
) & 0x8000; \

673 
GSU
.
vSign
 = 
s
; \

674 
GSU
.
vZîo
 = 
s
; \

675 
R15
++; 
DREG
 = 
s
; \

676 
TESTR14
; \

677 
CLRFLAGS


	)

678 
	$fx_adc_i0
(Ë{ 
	`FX_ADC_I
(0); 
	}
}

679 
	$fx_adc_i1
(Ë{ 
	`FX_ADC_I
(1); 
	}
}

680 
	$fx_adc_i2
(Ë{ 
	`FX_ADC_I
(2); 
	}
}

681 
	$fx_adc_i3
(Ë{ 
	`FX_ADC_I
(3); 
	}
}

682 
	$fx_adc_i4
(Ë{ 
	`FX_ADC_I
(4); 
	}
}

683 
	$fx_adc_i5
(Ë{ 
	`FX_ADC_I
(5); 
	}
}

684 
	$fx_adc_i6
(Ë{ 
	`FX_ADC_I
(6); 
	}
}

685 
	$fx_adc_i7
(Ë{ 
	`FX_ADC_I
(7); 
	}
}

686 
	$fx_adc_i8
(Ë{ 
	`FX_ADC_I
(8); 
	}
}

687 
	$fx_adc_i9
(Ë{ 
	`FX_ADC_I
(9); 
	}
}

688 
	$fx_adc_i10
(Ë{ 
	`FX_ADC_I
(10); 
	}
}

689 
	$fx_adc_i11
(Ë{ 
	`FX_ADC_I
(11); 
	}
}

690 
	$fx_adc_i12
(Ë{ 
	`FX_ADC_I
(12); 
	}
}

691 
	$fx_adc_i13
(Ë{ 
	`FX_ADC_I
(13); 
	}
}

692 
	$fx_adc_i14
(Ë{ 
	`FX_ADC_I
(14); 
	}
}

693 
	$fx_adc_i15
(Ë{ 
	`FX_ADC_I
(15); 
	}
}

696 
	#FX_SUB
(
ªg
) \

697 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë- SUSEX16(
GSU
.
avReg
[
ªg
]); \

698 
GSU
.
vC¨ry
 = 
s
 >= 0; \

699 
GSU
.
vOvîÊow
 = (
SREG
 ^ GSU.
avReg
[
ªg
]Ë& (SREG ^ 
s
) & 0x8000; \

700 
GSU
.
vSign
 = 
s
; \

701 
GSU
.
vZîo
 = 
s
; \

702 
R15
++; 
DREG
 = 
s
; \

703 
TESTR14
; \

704 
CLRFLAGS


	)

705 
	$fx_sub_r0
(Ë{ 
	`FX_SUB
(0); 
	}
}

706 
	$fx_sub_r1
(Ë{ 
	`FX_SUB
(1); 
	}
}

707 
	$fx_sub_r2
(Ë{ 
	`FX_SUB
(2); 
	}
}

708 
	$fx_sub_r3
(Ë{ 
	`FX_SUB
(3); 
	}
}

709 
	$fx_sub_r4
(Ë{ 
	`FX_SUB
(4); 
	}
}

710 
	$fx_sub_r5
(Ë{ 
	`FX_SUB
(5); 
	}
}

711 
	$fx_sub_r6
(Ë{ 
	`FX_SUB
(6); 
	}
}

712 
	$fx_sub_r7
(Ë{ 
	`FX_SUB
(7); 
	}
}

713 
	$fx_sub_r8
(Ë{ 
	`FX_SUB
(8); 
	}
}

714 
	$fx_sub_r9
(Ë{ 
	`FX_SUB
(9); 
	}
}

715 
	$fx_sub_r10
(Ë{ 
	`FX_SUB
(10); 
	}
}

716 
	$fx_sub_r11
(Ë{ 
	`FX_SUB
(11); 
	}
}

717 
	$fx_sub_r12
(Ë{ 
	`FX_SUB
(12); 
	}
}

718 
	$fx_sub_r13
(Ë{ 
	`FX_SUB
(13); 
	}
}

719 
	$fx_sub_r14
(Ë{ 
	`FX_SUB
(14); 
	}
}

720 
	$fx_sub_r15
(Ë{ 
	`FX_SUB
(15); 
	}
}

723 
	#FX_SBC
(
ªg
) \

724 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë- SUSEX16(
GSU
.
avReg
[
ªg
]Ë- (SUSEX16(GSU.
vC¨ry
^1)); \

725 
GSU
.
vC¨ry
 = 
s
 >= 0; \

726 
GSU
.
vOvîÊow
 = (
SREG
 ^ GSU.
avReg
[
ªg
]Ë& (SREG ^ 
s
) & 0x8000; \

727 
GSU
.
vSign
 = 
s
; \

728 
GSU
.
vZîo
 = 
s
; \

729 
R15
++; 
DREG
 = 
s
; \

730 
TESTR14
; \

731 
CLRFLAGS


	)

732 
	$fx_sbc_r0
(Ë{ 
	`FX_SBC
(0); 
	}
}

733 
	$fx_sbc_r1
(Ë{ 
	`FX_SBC
(1); 
	}
}

734 
	$fx_sbc_r2
(Ë{ 
	`FX_SBC
(2); 
	}
}

735 
	$fx_sbc_r3
(Ë{ 
	`FX_SBC
(3); 
	}
}

736 
	$fx_sbc_r4
(Ë{ 
	`FX_SBC
(4); 
	}
}

737 
	$fx_sbc_r5
(Ë{ 
	`FX_SBC
(5); 
	}
}

738 
	$fx_sbc_r6
(Ë{ 
	`FX_SBC
(6); 
	}
}

739 
	$fx_sbc_r7
(Ë{ 
	`FX_SBC
(7); 
	}
}

740 
	$fx_sbc_r8
(Ë{ 
	`FX_SBC
(8); 
	}
}

741 
	$fx_sbc_r9
(Ë{ 
	`FX_SBC
(9); 
	}
}

742 
	$fx_sbc_r10
(Ë{ 
	`FX_SBC
(10); 
	}
}

743 
	$fx_sbc_r11
(Ë{ 
	`FX_SBC
(11); 
	}
}

744 
	$fx_sbc_r12
(Ë{ 
	`FX_SBC
(12); 
	}
}

745 
	$fx_sbc_r13
(Ë{ 
	`FX_SBC
(13); 
	}
}

746 
	$fx_sbc_r14
(Ë{ 
	`FX_SBC
(14); 
	}
}

747 
	$fx_sbc_r15
(Ë{ 
	`FX_SBC
(15); 
	}
}

750 
	#FX_SUB_I
(
imm
) \

751 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë- 
imm
; \

752 
GSU
.
vC¨ry
 = 
s
 >= 0; \

753 
GSU
.
vOvîÊow
 = (
SREG
 ^ 
imm
Ë& (SREG ^ 
s
) & 0x8000; \

754 
GSU
.
vSign
 = 
s
; \

755 
GSU
.
vZîo
 = 
s
; \

756 
R15
++; 
DREG
 = 
s
; \

757 
TESTR14
; \

758 
CLRFLAGS


	)

759 
	$fx_sub_i0
(Ë{ 
	`FX_SUB_I
(0); 
	}
}

760 
	$fx_sub_i1
(Ë{ 
	`FX_SUB_I
(1); 
	}
}

761 
	$fx_sub_i2
(Ë{ 
	`FX_SUB_I
(2); 
	}
}

762 
	$fx_sub_i3
(Ë{ 
	`FX_SUB_I
(3); 
	}
}

763 
	$fx_sub_i4
(Ë{ 
	`FX_SUB_I
(4); 
	}
}

764 
	$fx_sub_i5
(Ë{ 
	`FX_SUB_I
(5); 
	}
}

765 
	$fx_sub_i6
(Ë{ 
	`FX_SUB_I
(6); 
	}
}

766 
	$fx_sub_i7
(Ë{ 
	`FX_SUB_I
(7); 
	}
}

767 
	$fx_sub_i8
(Ë{ 
	`FX_SUB_I
(8); 
	}
}

768 
	$fx_sub_i9
(Ë{ 
	`FX_SUB_I
(9); 
	}
}

769 
	$fx_sub_i10
(Ë{ 
	`FX_SUB_I
(10); 
	}
}

770 
	$fx_sub_i11
(Ë{ 
	`FX_SUB_I
(11); 
	}
}

771 
	$fx_sub_i12
(Ë{ 
	`FX_SUB_I
(12); 
	}
}

772 
	$fx_sub_i13
(Ë{ 
	`FX_SUB_I
(13); 
	}
}

773 
	$fx_sub_i14
(Ë{ 
	`FX_SUB_I
(14); 
	}
}

774 
	$fx_sub_i15
(Ë{ 
	`FX_SUB_I
(15); 
	}
}

777 
	#FX_CMP
(
ªg
) \

778 
öt32
 
s
 = 
	`SUSEX16
(
SREG
Ë- SUSEX16(
GSU
.
avReg
[
ªg
]); \

779 
GSU
.
vC¨ry
 = 
s
 >= 0; \

780 
GSU
.
vOvîÊow
 = (
SREG
 ^ GSU.
avReg
[
ªg
]Ë& (SREG ^ 
s
) & 0x8000; \

781 
GSU
.
vSign
 = 
s
; \

782 
GSU
.
vZîo
 = 
s
; \

783 
R15
++; \

784 
CLRFLAGS
;

	)

785 
	$fx_cmp_r0
(Ë{ 
	`FX_CMP
(0); 
	}
}

786 
	$fx_cmp_r1
(Ë{ 
	`FX_CMP
(1); 
	}
}

787 
	$fx_cmp_r2
(Ë{ 
	`FX_CMP
(2); 
	}
}

788 
	$fx_cmp_r3
(Ë{ 
	`FX_CMP
(3); 
	}
}

789 
	$fx_cmp_r4
(Ë{ 
	`FX_CMP
(4); 
	}
}

790 
	$fx_cmp_r5
(Ë{ 
	`FX_CMP
(5); 
	}
}

791 
	$fx_cmp_r6
(Ë{ 
	`FX_CMP
(6); 
	}
}

792 
	$fx_cmp_r7
(Ë{ 
	`FX_CMP
(7); 
	}
}

793 
	$fx_cmp_r8
(Ë{ 
	`FX_CMP
(8); 
	}
}

794 
	$fx_cmp_r9
(Ë{ 
	`FX_CMP
(9); 
	}
}

795 
	$fx_cmp_r10
(Ë{ 
	`FX_CMP
(10); 
	}
}

796 
	$fx_cmp_r11
(Ë{ 
	`FX_CMP
(11); 
	}
}

797 
	$fx_cmp_r12
(Ë{ 
	`FX_CMP
(12); 
	}
}

798 
	$fx_cmp_r13
(Ë{ 
	`FX_CMP
(13); 
	}
}

799 
	$fx_cmp_r14
(Ë{ 
	`FX_CMP
(14); 
	}
}

800 
	$fx_cmp_r15
(Ë{ 
	`FX_CMP
(15); 
	}
}

803 
	$fx_mîge
()

805 
uöt32
 
v
 = (
R7
&0xff00Ë| ((
R8
&0xff00)>>8);

806 
R15
++; 
DREG
 = 
v
;

807 
GSU
.
vOvîÊow
 = (
v
 & 0xc0c0) << 16;

808 
GSU
.
vZîo
 = !(
v
 & 0xf0f0);

809 
GSU
.
vSign
 = ((
v
 | (v<<8)) & 0x8000);

810 
GSU
.
vC¨ry
 = (
v
 & 0xe0e0) != 0;

811 
TESTR14
;

812 
CLRFLAGS
;

813 
	}
}

816 
	#FX_AND
(
ªg
) \

817 
uöt32
 
v
 = 
SREG
 & 
GSU
.
avReg
[
ªg
]; \

818 
R15
++; 
DREG
 = 
v
; \

819 
GSU
.
vSign
 = 
v
; \

820 
GSU
.
vZîo
 = 
v
; \

821 
TESTR14
; \

822 
CLRFLAGS
;

	)

823 
	$fx_™d_r1
(Ë{ 
	`FX_AND
(1); 
	}
}

824 
	$fx_™d_r2
(Ë{ 
	`FX_AND
(2); 
	}
}

825 
	$fx_™d_r3
(Ë{ 
	`FX_AND
(3); 
	}
}

826 
	$fx_™d_r4
(Ë{ 
	`FX_AND
(4); 
	}
}

827 
	$fx_™d_r5
(Ë{ 
	`FX_AND
(5); 
	}
}

828 
	$fx_™d_r6
(Ë{ 
	`FX_AND
(6); 
	}
}

829 
	$fx_™d_r7
(Ë{ 
	`FX_AND
(7); 
	}
}

830 
	$fx_™d_r8
(Ë{ 
	`FX_AND
(8); 
	}
}

831 
	$fx_™d_r9
(Ë{ 
	`FX_AND
(9); 
	}
}

832 
	$fx_™d_r10
(Ë{ 
	`FX_AND
(10); 
	}
}

833 
	$fx_™d_r11
(Ë{ 
	`FX_AND
(11); 
	}
}

834 
	$fx_™d_r12
(Ë{ 
	`FX_AND
(12); 
	}
}

835 
	$fx_™d_r13
(Ë{ 
	`FX_AND
(13); 
	}
}

836 
	$fx_™d_r14
(Ë{ 
	`FX_AND
(14); 
	}
}

837 
	$fx_™d_r15
(Ë{ 
	`FX_AND
(15); 
	}
}

840 
	#FX_BIC
(
ªg
) \

841 
uöt32
 
v
 = 
SREG
 & ~
GSU
.
avReg
[
ªg
]; \

842 
R15
++; 
DREG
 = 
v
; \

843 
GSU
.
vSign
 = 
v
; \

844 
GSU
.
vZîo
 = 
v
; \

845 
TESTR14
; \

846 
CLRFLAGS
;

	)

847 
	$fx_bic_r1
(Ë{ 
	`FX_AND
(1); 
	}
}

848 
	$fx_bic_r2
(Ë{ 
	`FX_AND
(2); 
	}
}

849 
	$fx_bic_r3
(Ë{ 
	`FX_AND
(3); 
	}
}

850 
	$fx_bic_r4
(Ë{ 
	`FX_AND
(4); 
	}
}

851 
	$fx_bic_r5
(Ë{ 
	`FX_AND
(5); 
	}
}

852 
	$fx_bic_r6
(Ë{ 
	`FX_AND
(6); 
	}
}

853 
	$fx_bic_r7
(Ë{ 
	`FX_AND
(7); 
	}
}

854 
	$fx_bic_r8
(Ë{ 
	`FX_AND
(8); 
	}
}

855 
	$fx_bic_r9
(Ë{ 
	`FX_AND
(9); 
	}
}

856 
	$fx_bic_r10
(Ë{ 
	`FX_AND
(10); 
	}
}

857 
	$fx_bic_r11
(Ë{ 
	`FX_AND
(11); 
	}
}

858 
	$fx_bic_r12
(Ë{ 
	`FX_AND
(12); 
	}
}

859 
	$fx_bic_r13
(Ë{ 
	`FX_AND
(13); 
	}
}

860 
	$fx_bic_r14
(Ë{ 
	`FX_AND
(14); 
	}
}

861 
	$fx_bic_r15
(Ë{ 
	`FX_AND
(15); 
	}
}

864 
	#FX_AND_I
(
imm
) \

865 
uöt32
 
v
 = 
SREG
 & 
imm
; \

866 
R15
++; 
DREG
 = 
v
; \

867 
GSU
.
vSign
 = 
v
; \

868 
GSU
.
vZîo
 = 
v
; \

869 
TESTR14
; \

870 
CLRFLAGS
;

	)

871 
	$fx_™d_i1
(Ë{ 
	`FX_AND_I
(1); 
	}
}

872 
	$fx_™d_i2
(Ë{ 
	`FX_AND_I
(2); 
	}
}

873 
	$fx_™d_i3
(Ë{ 
	`FX_AND_I
(3); 
	}
}

874 
	$fx_™d_i4
(Ë{ 
	`FX_AND_I
(4); 
	}
}

875 
	$fx_™d_i5
(Ë{ 
	`FX_AND_I
(5); 
	}
}

876 
	$fx_™d_i6
(Ë{ 
	`FX_AND_I
(6); 
	}
}

877 
	$fx_™d_i7
(Ë{ 
	`FX_AND_I
(7); 
	}
}

878 
	$fx_™d_i8
(Ë{ 
	`FX_AND_I
(8); 
	}
}

879 
	$fx_™d_i9
(Ë{ 
	`FX_AND_I
(9); 
	}
}

880 
	$fx_™d_i10
(Ë{ 
	`FX_AND_I
(10); 
	}
}

881 
	$fx_™d_i11
(Ë{ 
	`FX_AND_I
(11); 
	}
}

882 
	$fx_™d_i12
(Ë{ 
	`FX_AND_I
(12); 
	}
}

883 
	$fx_™d_i13
(Ë{ 
	`FX_AND_I
(13); 
	}
}

884 
	$fx_™d_i14
(Ë{ 
	`FX_AND_I
(14); 
	}
}

885 
	$fx_™d_i15
(Ë{ 
	`FX_AND_I
(15); 
	}
}

888 
	#FX_BIC_I
(
imm
) \

889 
uöt32
 
v
 = 
SREG
 & ~
imm
; \

890 
R15
++; 
DREG
 = 
v
; \

891 
GSU
.
vSign
 = 
v
; \

892 
GSU
.
vZîo
 = 
v
; \

893 
TESTR14
; \

894 
CLRFLAGS
;

	)

895 
	$fx_bic_i1
(Ë{ 
	`FX_BIC_I
(1); 
	}
}

896 
	$fx_bic_i2
(Ë{ 
	`FX_BIC_I
(2); 
	}
}

897 
	$fx_bic_i3
(Ë{ 
	`FX_BIC_I
(3); 
	}
}

898 
	$fx_bic_i4
(Ë{ 
	`FX_BIC_I
(4); 
	}
}

899 
	$fx_bic_i5
(Ë{ 
	`FX_BIC_I
(5); 
	}
}

900 
	$fx_bic_i6
(Ë{ 
	`FX_BIC_I
(6); 
	}
}

901 
	$fx_bic_i7
(Ë{ 
	`FX_BIC_I
(7); 
	}
}

902 
	$fx_bic_i8
(Ë{ 
	`FX_BIC_I
(8); 
	}
}

903 
	$fx_bic_i9
(Ë{ 
	`FX_BIC_I
(9); 
	}
}

904 
	$fx_bic_i10
(Ë{ 
	`FX_BIC_I
(10); 
	}
}

905 
	$fx_bic_i11
(Ë{ 
	`FX_BIC_I
(11); 
	}
}

906 
	$fx_bic_i12
(Ë{ 
	`FX_BIC_I
(12); 
	}
}

907 
	$fx_bic_i13
(Ë{ 
	`FX_BIC_I
(13); 
	}
}

908 
	$fx_bic_i14
(Ë{ 
	`FX_BIC_I
(14); 
	}
}

909 
	$fx_bic_i15
(Ë{ 
	`FX_BIC_I
(15); 
	}
}

912 
	#FX_MULT
(
ªg
) \

913 
uöt32
 
v
 = (uöt32)(
	`SEX8
(
SREG
Ë* SEX8(
GSU
.
avReg
[
ªg
])); \

914 
R15
++; 
DREG
 = 
v
; \

915 
GSU
.
vSign
 = 
v
; \

916 
GSU
.
vZîo
 = 
v
; \

917 
TESTR14
; \

918 
CLRFLAGS
;

	)

919 
	$fx_mu…_r0
(Ë{ 
	`FX_MULT
(0); 
	}
}

920 
	$fx_mu…_r1
(Ë{ 
	`FX_MULT
(1); 
	}
}

921 
	$fx_mu…_r2
(Ë{ 
	`FX_MULT
(2); 
	}
}

922 
	$fx_mu…_r3
(Ë{ 
	`FX_MULT
(3); 
	}
}

923 
	$fx_mu…_r4
(Ë{ 
	`FX_MULT
(4); 
	}
}

924 
	$fx_mu…_r5
(Ë{ 
	`FX_MULT
(5); 
	}
}

925 
	$fx_mu…_r6
(Ë{ 
	`FX_MULT
(6); 
	}
}

926 
	$fx_mu…_r7
(Ë{ 
	`FX_MULT
(7); 
	}
}

927 
	$fx_mu…_r8
(Ë{ 
	`FX_MULT
(8); 
	}
}

928 
	$fx_mu…_r9
(Ë{ 
	`FX_MULT
(9); 
	}
}

929 
	$fx_mu…_r10
(Ë{ 
	`FX_MULT
(10); 
	}
}

930 
	$fx_mu…_r11
(Ë{ 
	`FX_MULT
(11); 
	}
}

931 
	$fx_mu…_r12
(Ë{ 
	`FX_MULT
(12); 
	}
}

932 
	$fx_mu…_r13
(Ë{ 
	`FX_MULT
(13); 
	}
}

933 
	$fx_mu…_r14
(Ë{ 
	`FX_MULT
(14); 
	}
}

934 
	$fx_mu…_r15
(Ë{ 
	`FX_MULT
(15); 
	}
}

937 
	#FX_UMULT
(
ªg
) \

938 
uöt32
 
v
 = 
	`USEX8
(
SREG
Ë* USEX8(
GSU
.
avReg
[
ªg
]); \

939 
R15
++; 
DREG
 = 
v
; \

940 
GSU
.
vSign
 = 
v
; \

941 
GSU
.
vZîo
 = 
v
; \

942 
TESTR14
; \

943 
CLRFLAGS
;

	)

944 
	$fx_umu…_r0
(Ë{ 
	`FX_UMULT
(0); 
	}
}

945 
	$fx_umu…_r1
(Ë{ 
	`FX_UMULT
(1); 
	}
}

946 
	$fx_umu…_r2
(Ë{ 
	`FX_UMULT
(2); 
	}
}

947 
	$fx_umu…_r3
(Ë{ 
	`FX_UMULT
(3); 
	}
}

948 
	$fx_umu…_r4
(Ë{ 
	`FX_UMULT
(4); 
	}
}

949 
	$fx_umu…_r5
(Ë{ 
	`FX_UMULT
(5); 
	}
}

950 
	$fx_umu…_r6
(Ë{ 
	`FX_UMULT
(6); 
	}
}

951 
	$fx_umu…_r7
(Ë{ 
	`FX_UMULT
(7); 
	}
}

952 
	$fx_umu…_r8
(Ë{ 
	`FX_UMULT
(8); 
	}
}

953 
	$fx_umu…_r9
(Ë{ 
	`FX_UMULT
(9); 
	}
}

954 
	$fx_umu…_r10
(Ë{ 
	`FX_UMULT
(10); 
	}
}

955 
	$fx_umu…_r11
(Ë{ 
	`FX_UMULT
(11); 
	}
}

956 
	$fx_umu…_r12
(Ë{ 
	`FX_UMULT
(12); 
	}
}

957 
	$fx_umu…_r13
(Ë{ 
	`FX_UMULT
(13); 
	}
}

958 
	$fx_umu…_r14
(Ë{ 
	`FX_UMULT
(14); 
	}
}

959 
	$fx_umu…_r15
(Ë{ 
	`FX_UMULT
(15); 
	}
}

962 
	#FX_MULT_I
(
imm
) \

963 
uöt32
 
v
 = (uöt32Ë(
	`SEX8
(
SREG
Ë* ((
öt32
)
imm
)); \

964 
R15
++; 
DREG
 = 
v
; \

965 
GSU
.
vSign
 = 
v
; \

966 
GSU
.
vZîo
 = 
v
; \

967 
TESTR14
; \

968 
CLRFLAGS
;

	)

969 
	$fx_mu…_i0
(Ë{ 
	`FX_MULT_I
(0); 
	}
}

970 
	$fx_mu…_i1
(Ë{ 
	`FX_MULT_I
(1); 
	}
}

971 
	$fx_mu…_i2
(Ë{ 
	`FX_MULT_I
(2); 
	}
}

972 
	$fx_mu…_i3
(Ë{ 
	`FX_MULT_I
(3); 
	}
}

973 
	$fx_mu…_i4
(Ë{ 
	`FX_MULT_I
(4); 
	}
}

974 
	$fx_mu…_i5
(Ë{ 
	`FX_MULT_I
(5); 
	}
}

975 
	$fx_mu…_i6
(Ë{ 
	`FX_MULT_I
(6); 
	}
}

976 
	$fx_mu…_i7
(Ë{ 
	`FX_MULT_I
(7); 
	}
}

977 
	$fx_mu…_i8
(Ë{ 
	`FX_MULT_I
(8); 
	}
}

978 
	$fx_mu…_i9
(Ë{ 
	`FX_MULT_I
(9); 
	}
}

979 
	$fx_mu…_i10
(Ë{ 
	`FX_MULT_I
(10); 
	}
}

980 
	$fx_mu…_i11
(Ë{ 
	`FX_MULT_I
(11); 
	}
}

981 
	$fx_mu…_i12
(Ë{ 
	`FX_MULT_I
(12); 
	}
}

982 
	$fx_mu…_i13
(Ë{ 
	`FX_MULT_I
(13); 
	}
}

983 
	$fx_mu…_i14
(Ë{ 
	`FX_MULT_I
(14); 
	}
}

984 
	$fx_mu…_i15
(Ë{ 
	`FX_MULT_I
(15); 
	}
}

987 
	#FX_UMULT_I
(
imm
) \

988 
uöt32
 
v
 = 
	`USEX8
(
SREG
Ë* ((uöt32)
imm
); \

989 
R15
++; 
DREG
 = 
v
; \

990 
GSU
.
vSign
 = 
v
; \

991 
GSU
.
vZîo
 = 
v
; \

992 
TESTR14
; \

993 
CLRFLAGS
;

	)

994 
	$fx_umu…_i0
(Ë{ 
	`FX_UMULT_I
(0); 
	}
}

995 
	$fx_umu…_i1
(Ë{ 
	`FX_UMULT_I
(1); 
	}
}

996 
	$fx_umu…_i2
(Ë{ 
	`FX_UMULT_I
(2); 
	}
}

997 
	$fx_umu…_i3
(Ë{ 
	`FX_UMULT_I
(3); 
	}
}

998 
	$fx_umu…_i4
(Ë{ 
	`FX_UMULT_I
(4); 
	}
}

999 
	$fx_umu…_i5
(Ë{ 
	`FX_UMULT_I
(5); 
	}
}

1000 
	$fx_umu…_i6
(Ë{ 
	`FX_UMULT_I
(6); 
	}
}

1001 
	$fx_umu…_i7
(Ë{ 
	`FX_UMULT_I
(7); 
	}
}

1002 
	$fx_umu…_i8
(Ë{ 
	`FX_UMULT_I
(8); 
	}
}

1003 
	$fx_umu…_i9
(Ë{ 
	`FX_UMULT_I
(9); 
	}
}

1004 
	$fx_umu…_i10
(Ë{ 
	`FX_UMULT_I
(10); 
	}
}

1005 
	$fx_umu…_i11
(Ë{ 
	`FX_UMULT_I
(11); 
	}
}

1006 
	$fx_umu…_i12
(Ë{ 
	`FX_UMULT_I
(12); 
	}
}

1007 
	$fx_umu…_i13
(Ë{ 
	`FX_UMULT_I
(13); 
	}
}

1008 
	$fx_umu…_i14
(Ë{ 
	`FX_UMULT_I
(14); 
	}
}

1009 
	$fx_umu…_i15
(Ë{ 
	`FX_UMULT_I
(15); 
	}
}

1012 
	$fx_sbk
()

1014 
	`RAM
(
GSU
.
vLa°RamAdr
Ë(
uöt8
)
SREG
;

1015 
	`RAM
(
GSU
.
vLa°RamAdr
^1Ë(
uöt8
)(
SREG
>>8);

1016 
CLRFLAGS
;

1017 
R15
++;

1018 
	}
}

1021 
	#FX_LINK_I
(
lkn
Ë
R11
 = 
R15
 +Ükn; 
CLRFLAGS
; R15++

	)

1022 
	$fx_lök_i1
(Ë{ 
	`FX_LINK_I
(1); 
	}
}

1023 
	$fx_lök_i2
(Ë{ 
	`FX_LINK_I
(2); 
	}
}

1024 
	$fx_lök_i3
(Ë{ 
	`FX_LINK_I
(3); 
	}
}

1025 
	$fx_lök_i4
(Ë{ 
	`FX_LINK_I
(4); 
	}
}

1028 
	$fx_£x
()

1030 
uöt32
 
v
 = (uöt32)
	`SEX8
(
SREG
);

1031 
R15
++; 
DREG
 = 
v
;

1032 
GSU
.
vSign
 = 
v
;

1033 
GSU
.
vZîo
 = 
v
;

1034 
TESTR14
;

1035 
CLRFLAGS
;

1036 
	}
}

1039 
	$fx_a§
()

1041 
uöt32
 
v
;

1042 
GSU
.
vC¨ry
 = 
SREG
 & 1;

1043 
v
 = (
uöt32
)(
	`SEX16
(
SREG
)>>1);

1044 
R15
++; 
DREG
 = 
v
;

1045 
GSU
.
vSign
 = 
v
;

1046 
GSU
.
vZîo
 = 
v
;

1047 
TESTR14
;

1048 
CLRFLAGS
;

1049 
	}
}

1052 
	$fx_div2
()

1054 
uöt32
 
v
;

1055 
öt32
 
s
 = 
	`SEX16
(
SREG
);

1056 
GSU
.
vC¨ry
 = 
s
 & 1;

1057 if(
s
 == -1)

1058 
v
 = 0;

1060 
v
 = (
uöt32
)(
s
>>1);

1061 
R15
++; 
DREG
 = 
v
;

1062 
GSU
.
vSign
 = 
v
;

1063 
GSU
.
vZîo
 = 
v
;

1064 
TESTR14
;

1065 
CLRFLAGS
;

1066 
	}
}

1069 
	$fx_r‹
()

1071 
uöt32
 
v
 = (
	`USEX16
(
SREG
)>>1Ë| (
GSU
.
vC¨ry
<<15);

1072 
GSU
.
vC¨ry
 = 
SREG
 & 1;

1073 
R15
++; 
DREG
 = 
v
;

1074 
GSU
.
vSign
 = 
v
;

1075 
GSU
.
vZîo
 = 
v
;

1076 
TESTR14
;

1077 
CLRFLAGS
;

1078 
	}
}

1081 
	#FX_JMP
(
ªg
) \

1082 
R15
 = 
GSU
.
avReg
[
ªg
]; \

1083 
CLRFLAGS
;

	)

1084 
	$fx_jmp_r8
(Ë{ 
	`FX_JMP
(8); 
	}
}

1085 
	$fx_jmp_r9
(Ë{ 
	`FX_JMP
(9); 
	}
}

1086 
	$fx_jmp_r10
(Ë{ 
	`FX_JMP
(10); 
	}
}

1087 
	$fx_jmp_r11
(Ë{ 
	`FX_JMP
(11); 
	}
}

1088 
	$fx_jmp_r12
(Ë{ 
	`FX_JMP
(12); 
	}
}

1089 
	$fx_jmp_r13
(Ë{ 
	`FX_JMP
(13); 
	}
}

1092 
	#FX_LJMP
(
ªg
) \

1093 
GSU
.
vPrgB™kReg
 = GSU.
avReg
[
ªg
] & 0x7f; \

1094 
GSU
.
pvPrgB™k
 = GSU.
≠vRomB™k
[GSU.
vPrgB™kReg
]; \

1095 
R15
 = 
SREG
; \

1096 
GSU
.
bCacheA˘ive
 = 
FALSE
; 
	`fx_ˇche
(); 
R15
--;

	)

1097 
	$fx_ljmp_r8
(Ë{ 
	`FX_LJMP
(8); 
	}
}

1098 
	$fx_ljmp_r9
(Ë{ 
	`FX_LJMP
(9); 
	}
}

1099 
	$fx_ljmp_r10
(Ë{ 
	`FX_LJMP
(10); 
	}
}

1100 
	$fx_ljmp_r11
(Ë{ 
	`FX_LJMP
(11); 
	}
}

1101 
	$fx_ljmp_r12
(Ë{ 
	`FX_LJMP
(12); 
	}
}

1102 
	$fx_ljmp_r13
(Ë{ 
	`FX_LJMP
(13); 
	}
}

1105 
	$fx_lob
()

1107 
uöt32
 
v
 = 
	`USEX8
(
SREG
);

1108 
R15
++; 
DREG
 = 
v
;

1109 
GSU
.
vSign
 = 
v
<<8;

1110 
GSU
.
vZîo
 = 
v
<<8;

1111 
TESTR14
;

1112 
CLRFLAGS
;

1113 
	}
}

1116 
	$fx_fmu…
()

1118 
uöt32
 
v
;

1119 
uöt32
 
c
 = (uöt32Ë(
	`SEX16
(
SREG
Ë* SEX16(
R6
));

1120 
v
 = 
c
 >> 16;

1121 
R15
++; 
DREG
 = 
v
;

1122 
GSU
.
vSign
 = 
v
;

1123 
GSU
.
vZîo
 = 
v
;

1124 
GSU
.
vC¨ry
 = (
c
 >> 15) & 1;

1125 
TESTR14
;

1126 
CLRFLAGS
;

1127 
	}
}

1130 
	$fx_lmu…
()

1132 
uöt32
 
v
;

1133 
uöt32
 
c
 = (uöt32Ë(
	`SEX16
(
SREG
Ë* SEX16(
R6
));

1134 
R4
 = 
c
;

1135 
v
 = 
c
 >> 16;

1136 
R15
++; 
DREG
 = 
v
;

1137 
GSU
.
vSign
 = 
v
;

1138 
GSU
.
vZîo
 = 
v
;

1140 
GSU
.
vC¨ry
 = (
R4
 >> 15) & 1;

1141 
TESTR14
;

1142 
CLRFLAGS
;

1143 
	}
}

1146 
	#FX_IBT
(
ªg
) \

1147 
uöt8
 
v
 = 
PIPE
; 
R15
++; \

1148 
FETCHPIPE
; 
R15
++; \

1149 
GSU
.
avReg
[
ªg
] = 
	`SEX8
(
v
); \

1150 
CLRFLAGS
;

	)

1151 
	$fx_ibt_r0
(Ë{ 
	`FX_IBT
(0); 
	}
}

1152 
	$fx_ibt_r1
(Ë{ 
	`FX_IBT
(1); 
	}
}

1153 
	$fx_ibt_r2
(Ë{ 
	`FX_IBT
(2); 
	}
}

1154 
	$fx_ibt_r3
(Ë{ 
	`FX_IBT
(3); 
	}
}

1155 
	$fx_ibt_r4
(Ë{ 
	`FX_IBT
(4); 
	}
}

1156 
	$fx_ibt_r5
(Ë{ 
	`FX_IBT
(5); 
	}
}

1157 
	$fx_ibt_r6
(Ë{ 
	`FX_IBT
(6); 
	}
}

1158 
	$fx_ibt_r7
(Ë{ 
	`FX_IBT
(7); 
	}
}

1159 
	$fx_ibt_r8
(Ë{ 
	`FX_IBT
(8); 
	}
}

1160 
	$fx_ibt_r9
(Ë{ 
	`FX_IBT
(9); 
	}
}

1161 
	$fx_ibt_r10
(Ë{ 
	`FX_IBT
(10); 
	}
}

1162 
	$fx_ibt_r11
(Ë{ 
	`FX_IBT
(11); 
	}
}

1163 
	$fx_ibt_r12
(Ë{ 
	`FX_IBT
(12); 
	}
}

1164 
	$fx_ibt_r13
(Ë{ 
	`FX_IBT
(13); 
	}
}

1165 
	$fx_ibt_r14
(Ë{ 
	`FX_IBT
(14); 
READR14
; 
	}
}

1166 
	$fx_ibt_r15
(Ë{ 
	`FX_IBT
(15); 
	}
}

1169 
	#FX_LMS
(
ªg
) \

1170 
GSU
.
vLa°RamAdr
 = ((
uöt32
)
PIPE
) << 1; \

1171 
R15
++; 
FETCHPIPE
; R15++; \

1172 
GSU
.
avReg
[
ªg
] = (
uöt32
)
	`RAM
(GSU.
vLa°RamAdr
); \

1173 
GSU
.
avReg
[
ªg
] |((
uöt32
)
	`RAM
(GSU.
vLa°RamAdr
+1))<<8; \

1174 
CLRFLAGS
;

	)

1175 
	$fx_lms_r0
(Ë{ 
	`FX_LMS
(0); 
	}
}

1176 
	$fx_lms_r1
(Ë{ 
	`FX_LMS
(1); 
	}
}

1177 
	$fx_lms_r2
(Ë{ 
	`FX_LMS
(2); 
	}
}

1178 
	$fx_lms_r3
(Ë{ 
	`FX_LMS
(3); 
	}
}

1179 
	$fx_lms_r4
(Ë{ 
	`FX_LMS
(4); 
	}
}

1180 
	$fx_lms_r5
(Ë{ 
	`FX_LMS
(5); 
	}
}

1181 
	$fx_lms_r6
(Ë{ 
	`FX_LMS
(6); 
	}
}

1182 
	$fx_lms_r7
(Ë{ 
	`FX_LMS
(7); 
	}
}

1183 
	$fx_lms_r8
(Ë{ 
	`FX_LMS
(8); 
	}
}

1184 
	$fx_lms_r9
(Ë{ 
	`FX_LMS
(9); 
	}
}

1185 
	$fx_lms_r10
(Ë{ 
	`FX_LMS
(10); 
	}
}

1186 
	$fx_lms_r11
(Ë{ 
	`FX_LMS
(11); 
	}
}

1187 
	$fx_lms_r12
(Ë{ 
	`FX_LMS
(12); 
	}
}

1188 
	$fx_lms_r13
(Ë{ 
	`FX_LMS
(13); 
	}
}

1189 
	$fx_lms_r14
(Ë{ 
	`FX_LMS
(14); 
READR14
; 
	}
}

1190 
	$fx_lms_r15
(Ë{ 
	`FX_LMS
(15); 
	}
}

1194 
	#FX_SMS
(
ªg
) \

1195 
uöt32
 
v
 = 
GSU
.
avReg
[
ªg
]; \

1196 
GSU
.
vLa°RamAdr
 = ((
uöt32
)
PIPE
) << 1; \

1197 
R15
++; 
FETCHPIPE
; \

1198 
	`RAM
(
GSU
.
vLa°RamAdr
Ë(
uöt8
)
v
; \

1199 
	`RAM
(
GSU
.
vLa°RamAdr
+1Ë(
uöt8
)(
v
>>8); \

1200 
CLRFLAGS
; 
R15
++;

	)

1201 
	$fx_sms_r0
(Ë{ 
	`FX_SMS
(0); 
	}
}

1202 
	$fx_sms_r1
(Ë{ 
	`FX_SMS
(1); 
	}
}

1203 
	$fx_sms_r2
(Ë{ 
	`FX_SMS
(2); 
	}
}

1204 
	$fx_sms_r3
(Ë{ 
	`FX_SMS
(3); 
	}
}

1205 
	$fx_sms_r4
(Ë{ 
	`FX_SMS
(4); 
	}
}

1206 
	$fx_sms_r5
(Ë{ 
	`FX_SMS
(5); 
	}
}

1207 
	$fx_sms_r6
(Ë{ 
	`FX_SMS
(6); 
	}
}

1208 
	$fx_sms_r7
(Ë{ 
	`FX_SMS
(7); 
	}
}

1209 
	$fx_sms_r8
(Ë{ 
	`FX_SMS
(8); 
	}
}

1210 
	$fx_sms_r9
(Ë{ 
	`FX_SMS
(9); 
	}
}

1211 
	$fx_sms_r10
(Ë{ 
	`FX_SMS
(10); 
	}
}

1212 
	$fx_sms_r11
(Ë{ 
	`FX_SMS
(11); 
	}
}

1213 
	$fx_sms_r12
(Ë{ 
	`FX_SMS
(12); 
	}
}

1214 
	$fx_sms_r13
(Ë{ 
	`FX_SMS
(13); 
	}
}

1215 
	$fx_sms_r14
(Ë{ 
	`FX_SMS
(14); 
	}
}

1216 
	$fx_sms_r15
(Ë{ 
	`FX_SMS
(15); 
	}
}

1220 
	#FX_FROM
(
ªg
) \

1221 if(
	`TF
(
B
)Ë{ 
uöt32
 
v
 = 
GSU
.
avReg
[
ªg
]; 
R15
++; 
DREG
 = v; \

1222 
GSU
.
vOvîÊow
 = (
v
&0x80Ë<< 16; GSU.
vSign
 = v; GSU.
vZîo
 = v; 
TESTR14
; 
CLRFLAGS
; } \

1223 { 
GSU
.
pvSªg
 = &GSU.
avReg
[
ªg
]; 
R15
++; }

	)

1224 
	$fx_‰om_r0
(Ë{ 
	`FX_FROM
(0); 
	}
}

1225 
	$fx_‰om_r1
(Ë{ 
	`FX_FROM
(1); 
	}
}

1226 
	$fx_‰om_r2
(Ë{ 
	`FX_FROM
(2); 
	}
}

1227 
	$fx_‰om_r3
(Ë{ 
	`FX_FROM
(3); 
	}
}

1228 
	$fx_‰om_r4
(Ë{ 
	`FX_FROM
(4); 
	}
}

1229 
	$fx_‰om_r5
(Ë{ 
	`FX_FROM
(5); 
	}
}

1230 
	$fx_‰om_r6
(Ë{ 
	`FX_FROM
(6); 
	}
}

1231 
	$fx_‰om_r7
(Ë{ 
	`FX_FROM
(7); 
	}
}

1232 
	$fx_‰om_r8
(Ë{ 
	`FX_FROM
(8); 
	}
}

1233 
	$fx_‰om_r9
(Ë{ 
	`FX_FROM
(9); 
	}
}

1234 
	$fx_‰om_r10
(Ë{ 
	`FX_FROM
(10); 
	}
}

1235 
	$fx_‰om_r11
(Ë{ 
	`FX_FROM
(11); 
	}
}

1236 
	$fx_‰om_r12
(Ë{ 
	`FX_FROM
(12); 
	}
}

1237 
	$fx_‰om_r13
(Ë{ 
	`FX_FROM
(13); 
	}
}

1238 
	$fx_‰om_r14
(Ë{ 
	`FX_FROM
(14); 
	}
}

1239 
	$fx_‰om_r15
(Ë{ 
	`FX_FROM
(15); 
	}
}

1242 
	$fx_hib
()

1244 
uöt32
 
v
 = 
	`USEX8
(
SREG
>>8);

1245 
R15
++; 
DREG
 = 
v
;

1246 
GSU
.
vSign
 = 
v
<<8;

1247 
GSU
.
vZîo
 = 
v
<<8;

1248 
TESTR14
;

1249 
CLRFLAGS
;

1250 
	}
}

1253 
	#FX_OR
(
ªg
) \

1254 
uöt32
 
v
 = 
SREG
 | 
GSU
.
avReg
[
ªg
]; 
R15
++; 
DREG
 = v; \

1255 
GSU
.
vSign
 = 
v
; \

1256 
GSU
.
vZîo
 = 
v
; \

1257 
TESTR14
; \

1258 
CLRFLAGS
;

	)

1259 
	$fx_‹_r1
(Ë{ 
	`FX_OR
(1); 
	}
}

1260 
	$fx_‹_r2
(Ë{ 
	`FX_OR
(2); 
	}
}

1261 
	$fx_‹_r3
(Ë{ 
	`FX_OR
(3); 
	}
}

1262 
	$fx_‹_r4
(Ë{ 
	`FX_OR
(4); 
	}
}

1263 
	$fx_‹_r5
(Ë{ 
	`FX_OR
(5); 
	}
}

1264 
	$fx_‹_r6
(Ë{ 
	`FX_OR
(6); 
	}
}

1265 
	$fx_‹_r7
(Ë{ 
	`FX_OR
(7); 
	}
}

1266 
	$fx_‹_r8
(Ë{ 
	`FX_OR
(8); 
	}
}

1267 
	$fx_‹_r9
(Ë{ 
	`FX_OR
(9); 
	}
}

1268 
	$fx_‹_r10
(Ë{ 
	`FX_OR
(10); 
	}
}

1269 
	$fx_‹_r11
(Ë{ 
	`FX_OR
(11); 
	}
}

1270 
	$fx_‹_r12
(Ë{ 
	`FX_OR
(12); 
	}
}

1271 
	$fx_‹_r13
(Ë{ 
	`FX_OR
(13); 
	}
}

1272 
	$fx_‹_r14
(Ë{ 
	`FX_OR
(14); 
	}
}

1273 
	$fx_‹_r15
(Ë{ 
	`FX_OR
(15); 
	}
}

1276 
	#FX_XOR
(
ªg
) \

1277 
uöt32
 
v
 = 
SREG
 ^ 
GSU
.
avReg
[
ªg
]; 
R15
++; 
DREG
 = v; \

1278 
GSU
.
vSign
 = 
v
; \

1279 
GSU
.
vZîo
 = 
v
; \

1280 
TESTR14
; \

1281 
CLRFLAGS
;

	)

1282 
	$fx_x‹_r1
(Ë{ 
	`FX_XOR
(1); 
	}
}

1283 
	$fx_x‹_r2
(Ë{ 
	`FX_XOR
(2); 
	}
}

1284 
	$fx_x‹_r3
(Ë{ 
	`FX_XOR
(3); 
	}
}

1285 
	$fx_x‹_r4
(Ë{ 
	`FX_XOR
(4); 
	}
}

1286 
	$fx_x‹_r5
(Ë{ 
	`FX_XOR
(5); 
	}
}

1287 
	$fx_x‹_r6
(Ë{ 
	`FX_XOR
(6); 
	}
}

1288 
	$fx_x‹_r7
(Ë{ 
	`FX_XOR
(7); 
	}
}

1289 
	$fx_x‹_r8
(Ë{ 
	`FX_XOR
(8); 
	}
}

1290 
	$fx_x‹_r9
(Ë{ 
	`FX_XOR
(9); 
	}
}

1291 
	$fx_x‹_r10
(Ë{ 
	`FX_XOR
(10); 
	}
}

1292 
	$fx_x‹_r11
(Ë{ 
	`FX_XOR
(11); 
	}
}

1293 
	$fx_x‹_r12
(Ë{ 
	`FX_XOR
(12); 
	}
}

1294 
	$fx_x‹_r13
(Ë{ 
	`FX_XOR
(13); 
	}
}

1295 
	$fx_x‹_r14
(Ë{ 
	`FX_XOR
(14); 
	}
}

1296 
	$fx_x‹_r15
(Ë{ 
	`FX_XOR
(15); 
	}
}

1299 
	#FX_OR_I
(
imm
) \

1300 
uöt32
 
v
 = 
SREG
 | 
imm
; 
R15
++; 
DREG
 = v; \

1301 
GSU
.
vSign
 = 
v
; \

1302 
GSU
.
vZîo
 = 
v
; \

1303 
TESTR14
; \

1304 
CLRFLAGS
;

	)

1305 
	$fx_‹_i1
(Ë{ 
	`FX_OR_I
(1); 
	}
}

1306 
	$fx_‹_i2
(Ë{ 
	`FX_OR_I
(2); 
	}
}

1307 
	$fx_‹_i3
(Ë{ 
	`FX_OR_I
(3); 
	}
}

1308 
	$fx_‹_i4
(Ë{ 
	`FX_OR_I
(4); 
	}
}

1309 
	$fx_‹_i5
(Ë{ 
	`FX_OR_I
(5); 
	}
}

1310 
	$fx_‹_i6
(Ë{ 
	`FX_OR_I
(6); 
	}
}

1311 
	$fx_‹_i7
(Ë{ 
	`FX_OR_I
(7); 
	}
}

1312 
	$fx_‹_i8
(Ë{ 
	`FX_OR_I
(8); 
	}
}

1313 
	$fx_‹_i9
(Ë{ 
	`FX_OR_I
(9); 
	}
}

1314 
	$fx_‹_i10
(Ë{ 
	`FX_OR_I
(10); 
	}
}

1315 
	$fx_‹_i11
(Ë{ 
	`FX_OR_I
(11); 
	}
}

1316 
	$fx_‹_i12
(Ë{ 
	`FX_OR_I
(12); 
	}
}

1317 
	$fx_‹_i13
(Ë{ 
	`FX_OR_I
(13); 
	}
}

1318 
	$fx_‹_i14
(Ë{ 
	`FX_OR_I
(14); 
	}
}

1319 
	$fx_‹_i15
(Ë{ 
	`FX_OR_I
(15); 
	}
}

1322 
	#FX_XOR_I
(
imm
) \

1323 
uöt32
 
v
 = 
SREG
 ^ 
imm
; 
R15
++; 
DREG
 = v; \

1324 
GSU
.
vSign
 = 
v
; \

1325 
GSU
.
vZîo
 = 
v
; \

1326 
TESTR14
; \

1327 
CLRFLAGS
;

	)

1328 
	$fx_x‹_i1
(Ë{ 
	`FX_XOR_I
(1); 
	}
}

1329 
	$fx_x‹_i2
(Ë{ 
	`FX_XOR_I
(2); 
	}
}

1330 
	$fx_x‹_i3
(Ë{ 
	`FX_XOR_I
(3); 
	}
}

1331 
	$fx_x‹_i4
(Ë{ 
	`FX_XOR_I
(4); 
	}
}

1332 
	$fx_x‹_i5
(Ë{ 
	`FX_XOR_I
(5); 
	}
}

1333 
	$fx_x‹_i6
(Ë{ 
	`FX_XOR_I
(6); 
	}
}

1334 
	$fx_x‹_i7
(Ë{ 
	`FX_XOR_I
(7); 
	}
}

1335 
	$fx_x‹_i8
(Ë{ 
	`FX_XOR_I
(8); 
	}
}

1336 
	$fx_x‹_i9
(Ë{ 
	`FX_XOR_I
(9); 
	}
}

1337 
	$fx_x‹_i10
(Ë{ 
	`FX_XOR_I
(10); 
	}
}

1338 
	$fx_x‹_i11
(Ë{ 
	`FX_XOR_I
(11); 
	}
}

1339 
	$fx_x‹_i12
(Ë{ 
	`FX_XOR_I
(12); 
	}
}

1340 
	$fx_x‹_i13
(Ë{ 
	`FX_XOR_I
(13); 
	}
}

1341 
	$fx_x‹_i14
(Ë{ 
	`FX_XOR_I
(14); 
	}
}

1342 
	$fx_x‹_i15
(Ë{ 
	`FX_XOR_I
(15); 
	}
}

1345 
	#FX_INC
(
ªg
) \

1346 
GSU
.
avReg
[
ªg
] += 1; \

1347 
GSU
.
vSign
 = GSU.
avReg
[
ªg
]; \

1348 
GSU
.
vZîo
 = GSU.
avReg
[
ªg
]; \

1349 
CLRFLAGS
; 
R15
++;

	)

1350 
	$fx_öc_r0
(Ë{ 
	`FX_INC
(0); 
	}
}

1351 
	$fx_öc_r1
(Ë{ 
	`FX_INC
(1); 
	}
}

1352 
	$fx_öc_r2
(Ë{ 
	`FX_INC
(2); 
	}
}

1353 
	$fx_öc_r3
(Ë{ 
	`FX_INC
(3); 
	}
}

1354 
	$fx_öc_r4
(Ë{ 
	`FX_INC
(4); 
	}
}

1355 
	$fx_öc_r5
(Ë{ 
	`FX_INC
(5); 
	}
}

1356 
	$fx_öc_r6
(Ë{ 
	`FX_INC
(6); 
	}
}

1357 
	$fx_öc_r7
(Ë{ 
	`FX_INC
(7); 
	}
}

1358 
	$fx_öc_r8
(Ë{ 
	`FX_INC
(8); 
	}
}

1359 
	$fx_öc_r9
(Ë{ 
	`FX_INC
(9); 
	}
}

1360 
	$fx_öc_r10
(Ë{ 
	`FX_INC
(10); 
	}
}

1361 
	$fx_öc_r11
(Ë{ 
	`FX_INC
(11); 
	}
}

1362 
	$fx_öc_r12
(Ë{ 
	`FX_INC
(12); 
	}
}

1363 
	$fx_öc_r13
(Ë{ 
	`FX_INC
(13); 
	}
}

1364 
	$fx_öc_r14
(Ë{ 
	`FX_INC
(14); 
READR14
; 
	}
}

1367 
	$fx_gëc
()

1369 #i‚de‡
FX_DO_ROMBUFFER


1370 
uöt8
 
c
;

1371 
c
 = 
	`ROM
(
R14
);

1373 
uöt8
 
c
 = 
GSU
.
vRomBuf„r
;

1375 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x04)

1376 
c
 = (c&0xf0) | (c>>4);

1377 if(
GSU
.
vPlŸO±i⁄Reg
 & 0x08)

1379 
GSU
.
vCﬁ‹Reg
 &= 0xf0;

1380 
GSU
.
vCﬁ‹Reg
 |
c
 & 0x0f;

1383 
GSU
.
vCﬁ‹Reg
 = 
	`USEX8
(
c
);

1384 
CLRFLAGS
;

1385 
R15
++;

1386 
	}
}

1389 
	$fx_ømb
()

1391 
GSU
.
vRamB™kReg
 = 
SREG
 & (
FX_RAM_BANKS
-1);

1392 
GSU
.
pvRamB™k
 = GSU.
≠vRamB™k
[GSU.
vRamB™kReg
 & 0x3];

1393 
CLRFLAGS
;

1394 
R15
++;

1395 
	}
}

1398 
	$fx_romb
()

1400 
GSU
.
vRomB™kReg
 = 
	`USEX8
(
SREG
) & 0x7f;

1401 
GSU
.
pvRomB™k
 = GSU.
≠vRomB™k
[GSU.
vRomB™kReg
];

1402 
CLRFLAGS
;

1403 
R15
++;

1404 
	}
}

1407 
	#FX_DEC
(
ªg
) \

1408 
GSU
.
avReg
[
ªg
] -= 1; \

1409 
GSU
.
vSign
 = GSU.
avReg
[
ªg
]; \

1410 
GSU
.
vZîo
 = GSU.
avReg
[
ªg
]; \

1411 
CLRFLAGS
; 
R15
++;

	)

1412 
	$fx_dec_r0
(Ë{ 
	`FX_DEC
(0); 
	}
}

1413 
	$fx_dec_r1
(Ë{ 
	`FX_DEC
(1); 
	}
}

1414 
	$fx_dec_r2
(Ë{ 
	`FX_DEC
(2); 
	}
}

1415 
	$fx_dec_r3
(Ë{ 
	`FX_DEC
(3); 
	}
}

1416 
	$fx_dec_r4
(Ë{ 
	`FX_DEC
(4); 
	}
}

1417 
	$fx_dec_r5
(Ë{ 
	`FX_DEC
(5); 
	}
}

1418 
	$fx_dec_r6
(Ë{ 
	`FX_DEC
(6); 
	}
}

1419 
	$fx_dec_r7
(Ë{ 
	`FX_DEC
(7); 
	}
}

1420 
	$fx_dec_r8
(Ë{ 
	`FX_DEC
(8); 
	}
}

1421 
	$fx_dec_r9
(Ë{ 
	`FX_DEC
(9); 
	}
}

1422 
	$fx_dec_r10
(Ë{ 
	`FX_DEC
(10); 
	}
}

1423 
	$fx_dec_r11
(Ë{ 
	`FX_DEC
(11); 
	}
}

1424 
	$fx_dec_r12
(Ë{ 
	`FX_DEC
(12); 
	}
}

1425 
	$fx_dec_r13
(Ë{ 
	`FX_DEC
(13); 
	}
}

1426 
	$fx_dec_r14
(Ë{ 
	`FX_DEC
(14); 
READR14
; 
	}
}

1429 
	$fx_gëb
()

1431 
uöt32
 
v
;

1432 #i‚de‡
FX_DO_ROMBUFFER


1433 
v
 = (
uöt32
)
	`ROM
(
R14
);

1435 
v
 = (
uöt32
)
GSU
.
vRomBuf„r
;

1437 
R15
++; 
DREG
 = 
v
;

1438 
TESTR14
;

1439 
CLRFLAGS
;

1440 
	}
}

1443 
	$fx_gëbh
()

1445 
uöt32
 
v
;

1446 #i‚de‡
FX_DO_ROMBUFFER


1447 
uöt32
 
c
;

1448 
c
 = (
uöt32
)
	`ROM
(
R14
);

1450 
uöt32
 
c
 = 
	`USEX8
(
GSU
.
vRomBuf„r
);

1452 
v
 = 
	`USEX8
(
SREG
Ë| (
c
<<8);

1453 
R15
++; 
DREG
 = 
v
;

1454 
TESTR14
;

1455 
CLRFLAGS
;

1456 
	}
}

1459 
	$fx_gëbl
()

1461 
uöt32
 
v
;

1462 #i‚de‡
FX_DO_ROMBUFFER


1463 
uöt32
 
c
;

1464 
c
 = (
uöt32
)
	`ROM
(
R14
);

1466 
uöt32
 
c
 = 
	`USEX8
(
GSU
.
vRomBuf„r
);

1468 
v
 = (
SREG
 & 0xff00Ë| 
c
;

1469 
R15
++; 
DREG
 = 
v
;

1470 
TESTR14
;

1471 
CLRFLAGS
;

1472 
	}
}

1475 
	$fx_gëbs
()

1477 
uöt32
 
v
;

1478 #i‚de‡
FX_DO_ROMBUFFER


1479 
öt8
 
c
;

1480 
c
 = 
	`ROM
(
R14
);

1481 
v
 = 
	`SEX8
(
c
);

1483 
v
 = 
	`SEX8
(
GSU
.
vRomBuf„r
);

1485 
R15
++; 
DREG
 = 
v
;

1486 
TESTR14
;

1487 
CLRFLAGS
;

1488 
	}
}

1491 
	#FX_IWT
(
ªg
) \

1492 
uöt32
 
v
 = 
PIPE
; 
R15
++; 
FETCHPIPE
; R15++; \

1493 
v
 |
	`USEX8
(
PIPE
Ë<< 8; 
FETCHPIPE
; 
R15
++; \

1494 
GSU
.
avReg
[
ªg
] = 
v
; \

1495 
CLRFLAGS
;

	)

1496 
	$fx_iwt_r0
(Ë{ 
	`FX_IWT
(0); 
	}
}

1497 
	$fx_iwt_r1
(Ë{ 
	`FX_IWT
(1); 
	}
}

1498 
	$fx_iwt_r2
(Ë{ 
	`FX_IWT
(2); 
	}
}

1499 
	$fx_iwt_r3
(Ë{ 
	`FX_IWT
(3); 
	}
}

1500 
	$fx_iwt_r4
(Ë{ 
	`FX_IWT
(4); 
	}
}

1501 
	$fx_iwt_r5
(Ë{ 
	`FX_IWT
(5); 
	}
}

1502 
	$fx_iwt_r6
(Ë{ 
	`FX_IWT
(6); 
	}
}

1503 
	$fx_iwt_r7
(Ë{ 
	`FX_IWT
(7); 
	}
}

1504 
	$fx_iwt_r8
(Ë{ 
	`FX_IWT
(8); 
	}
}

1505 
	$fx_iwt_r9
(Ë{ 
	`FX_IWT
(9); 
	}
}

1506 
	$fx_iwt_r10
(Ë{ 
	`FX_IWT
(10); 
	}
}

1507 
	$fx_iwt_r11
(Ë{ 
	`FX_IWT
(11); 
	}
}

1508 
	$fx_iwt_r12
(Ë{ 
	`FX_IWT
(12); 
	}
}

1509 
	$fx_iwt_r13
(Ë{ 
	`FX_IWT
(13); 
	}
}

1510 
	$fx_iwt_r14
(Ë{ 
	`FX_IWT
(14); 
READR14
; 
	}
}

1511 
	$fx_iwt_r15
(Ë{ 
	`FX_IWT
(15); 
	}
}

1514 
	#FX_LM
(
ªg
) \

1515 
GSU
.
vLa°RamAdr
 = 
PIPE
; 
R15
++; 
FETCHPIPE
; R15++; \

1516 
GSU
.
vLa°RamAdr
 |
	`USEX8
(
PIPE
Ë<< 8; 
FETCHPIPE
; 
R15
++; \

1517 
GSU
.
avReg
[
ªg
] = 
	`RAM
(GSU.
vLa°RamAdr
); \

1518 
GSU
.
avReg
[
ªg
] |
	`USEX8
(
	`RAM
(GSU.
vLa°RamAdr
^1)) << 8; \

1519 
CLRFLAGS
;

	)

1520 
	$fx_lm_r0
(Ë{ 
	`FX_LM
(0); 
	}
}

1521 
	$fx_lm_r1
(Ë{ 
	`FX_LM
(1); 
	}
}

1522 
	$fx_lm_r2
(Ë{ 
	`FX_LM
(2); 
	}
}

1523 
	$fx_lm_r3
(Ë{ 
	`FX_LM
(3); 
	}
}

1524 
	$fx_lm_r4
(Ë{ 
	`FX_LM
(4); 
	}
}

1525 
	$fx_lm_r5
(Ë{ 
	`FX_LM
(5); 
	}
}

1526 
	$fx_lm_r6
(Ë{ 
	`FX_LM
(6); 
	}
}

1527 
	$fx_lm_r7
(Ë{ 
	`FX_LM
(7); 
	}
}

1528 
	$fx_lm_r8
(Ë{ 
	`FX_LM
(8); 
	}
}

1529 
	$fx_lm_r9
(Ë{ 
	`FX_LM
(9); 
	}
}

1530 
	$fx_lm_r10
(Ë{ 
	`FX_LM
(10); 
	}
}

1531 
	$fx_lm_r11
(Ë{ 
	`FX_LM
(11); 
	}
}

1532 
	$fx_lm_r12
(Ë{ 
	`FX_LM
(12); 
	}
}

1533 
	$fx_lm_r13
(Ë{ 
	`FX_LM
(13); 
	}
}

1534 
	$fx_lm_r14
(Ë{ 
	`FX_LM
(14); 
READR14
; 
	}
}

1535 
	$fx_lm_r15
(Ë{ 
	`FX_LM
(15); 
	}
}

1539 
	#FX_SM
(
ªg
) \

1540 
uöt32
 
v
 = 
GSU
.
avReg
[
ªg
]; \

1541 
GSU
.
vLa°RamAdr
 = 
PIPE
; 
R15
++; 
FETCHPIPE
; R15++; \

1542 
GSU
.
vLa°RamAdr
 |
	`USEX8
(
PIPE
Ë<< 8; 
FETCHPIPE
; \

1543 
	`RAM
(
GSU
.
vLa°RamAdr
Ë(
uöt8
)
v
; \

1544 
	`RAM
(
GSU
.
vLa°RamAdr
^1Ë(
uöt8
)(
v
>>8); \

1545 
CLRFLAGS
; 
R15
++;

	)

1546 
	$fx_sm_r0
(Ë{ 
	`FX_SM
(0); 
	}
}

1547 
	$fx_sm_r1
(Ë{ 
	`FX_SM
(1); 
	}
}

1548 
	$fx_sm_r2
(Ë{ 
	`FX_SM
(2); 
	}
}

1549 
	$fx_sm_r3
(Ë{ 
	`FX_SM
(3); 
	}
}

1550 
	$fx_sm_r4
(Ë{ 
	`FX_SM
(4); 
	}
}

1551 
	$fx_sm_r5
(Ë{ 
	`FX_SM
(5); 
	}
}

1552 
	$fx_sm_r6
(Ë{ 
	`FX_SM
(6); 
	}
}

1553 
	$fx_sm_r7
(Ë{ 
	`FX_SM
(7); 
	}
}

1554 
	$fx_sm_r8
(Ë{ 
	`FX_SM
(8); 
	}
}

1555 
	$fx_sm_r9
(Ë{ 
	`FX_SM
(9); 
	}
}

1556 
	$fx_sm_r10
(Ë{ 
	`FX_SM
(10); 
	}
}

1557 
	$fx_sm_r11
(Ë{ 
	`FX_SM
(11); 
	}
}

1558 
	$fx_sm_r12
(Ë{ 
	`FX_SM
(12); 
	}
}

1559 
	$fx_sm_r13
(Ë{ 
	`FX_SM
(13); 
	}
}

1560 
	$fx_sm_r14
(Ë{ 
	`FX_SM
(14); 
	}
}

1561 
	$fx_sm_r15
(Ë{ 
	`FX_SM
(15); 
	}
}

1565 
uöt32
 
	$fx_run
(
uöt32
 
nIn°ru˘i⁄s
)

1567 
GSU
.
vCou¡î
 = 
nIn°ru˘i⁄s
;

1568 
READR14
;

1569 
GSU
.
vCou¡î
-- > 0)

1570 
FX_STEP
;

1576  (
nIn°ru˘i⁄s
 - 
GSU
.
vIn°Cou¡
);

1577 
	}
}

1579 
uöt32
 
	$fx_run_to_bªakpoöt
(
uöt32
 
nIn°ru˘i⁄s
)

1581 
uöt32
 
vCou¡î
 = 0;

1582 
	`TF
(
G
Ë&& 
vCou¡î
 < 
nIn°ru˘i⁄s
)

1584 
vCou¡î
++;

1585 
FX_STEP
;

1586 if(
	`USEX16
(
R15
Ë=
GSU
.
vBªakPoöt
)

1588 
GSU
.
vEº‹Code
 = 
FX_BREAKPOINT
;

1597  
vCou¡î
;

1598 
	}
}

1600 
uöt32
 
	$fx_°ï_ovî
(
uöt32
 
nIn°ru˘i⁄s
)

1602 
uöt32
 
vCou¡î
 = 0;

1603 
	`TF
(
G
Ë&& 
vCou¡î
 < 
nIn°ru˘i⁄s
)

1605 
vCou¡î
++;

1606 
FX_STEP
;

1607 if(
	`USEX16
(
R15
Ë=
GSU
.
vBªakPoöt
)

1609 
GSU
.
vEº‹Code
 = 
FX_BREAKPOINT
;

1612 if(
	`USEX16
(
R15
Ë=
GSU
.
vSãpPoöt
)

1620  
vCou¡î
;

1621 
	}
}

1623 #ifde‡
FX_FUNCTION_TABLE


1624 
	$uöt32
 (*
FX_FUNCTION_TABLE
[])(
uöt32
) =

1626 
	$uöt32
 (*
fx_≠fFun˘i⁄TabÀ
[])(
uöt32
) =

1629 &
fx_run
,

1630 &
fx_run_to_bªakpoöt
,

1631 &
fx_°ï_ovî
,

1632 
	}
};

1636 #ifde‡
FX_PLOT_TABLE


1637 (*
	gFX_PLOT_TABLE
[])() =

1639 (*
fx_≠fPlŸTabÀ
[])() =

1642 &
fx_∂Ÿ_2bô
, &
fx_∂Ÿ_4bô
, &fx_∂Ÿ_4bô, &
fx_∂Ÿ_8bô
, &
fx_∂Ÿ_obj
,

1643 &
fx_Ωix_2bô
, &
fx_Ωix_4bô
, &fx_Ωix_4bô, &
fx_Ωix_8bô
, &
fx_Ωix_obj
,

1648 #ifde‡
FX_OPCODE_TABLE


1649 (*
	gFX_OPCODE_TABLE
[])() =

1651 (*
fx_≠fOpcodeTabÀ
[])() =

1658 &
fx_°›
, &
fx_n›
, &
fx_ˇche
, &
fx_l§
, &
fx_rﬁ
, &
fx_bø
, &
fx_bge
, &
fx_b…
,

1659 &
fx_b√
, &
fx_beq
, &
fx_b∂
, &
fx_bmi
, &
fx_bcc
, &
fx_bcs
, &
fx_bvc
, &
fx_bvs
,

1661 &
fx_to_r0
, &
fx_to_r1
, &
fx_to_r2
, &
fx_to_r3
, &
fx_to_r4
, &
fx_to_r5
, &
fx_to_r6
, &
fx_to_r7
,

1662 &
fx_to_r8
, &
fx_to_r9
, &
fx_to_r10
, &
fx_to_r11
, &
fx_to_r12
, &
fx_to_r13
, &
fx_to_r14
, &
fx_to_r15
,

1664 &
fx_wôh_r0
, &
fx_wôh_r1
, &
fx_wôh_r2
, &
fx_wôh_r3
, &
fx_wôh_r4
, &
fx_wôh_r5
, &
fx_wôh_r6
, &
fx_wôh_r7
,

1665 &
fx_wôh_r8
, &
fx_wôh_r9
, &
fx_wôh_r10
, &
fx_wôh_r11
, &
fx_wôh_r12
, &
fx_wôh_r13
, &
fx_wôh_r14
, &
fx_wôh_r15
,

1667 &
fx_°w_r0
, &
fx_°w_r1
, &
fx_°w_r2
, &
fx_°w_r3
, &
fx_°w_r4
, &
fx_°w_r5
, &
fx_°w_r6
, &
fx_°w_r7
,

1668 &
fx_°w_r8
, &
fx_°w_r9
, &
fx_°w_r10
, &
fx_°w_r11
, &
fx_lo›
, &
fx_Æt1
, &
fx_Æt2
, &
fx_Æt3
,

1670 &
fx_ldw_r0
, &
fx_ldw_r1
, &
fx_ldw_r2
, &
fx_ldw_r3
, &
fx_ldw_r4
, &
fx_ldw_r5
, &
fx_ldw_r6
, &
fx_ldw_r7
,

1671 &
fx_ldw_r8
, &
fx_ldw_r9
, &
fx_ldw_r10
, &
fx_ldw_r11
, &
fx_∂Ÿ_2bô
,&
fx_sw≠
, &
fx_cﬁ‹
, &
fx_nŸ
,

1673 &
fx_add_r0
, &
fx_add_r1
, &
fx_add_r2
, &
fx_add_r3
, &
fx_add_r4
, &
fx_add_r5
, &
fx_add_r6
, &
fx_add_r7
,

1674 &
fx_add_r8
, &
fx_add_r9
, &
fx_add_r10
, &
fx_add_r11
, &
fx_add_r12
, &
fx_add_r13
, &
fx_add_r14
, &
fx_add_r15
,

1676 &
fx_sub_r0
, &
fx_sub_r1
, &
fx_sub_r2
, &
fx_sub_r3
, &
fx_sub_r4
, &
fx_sub_r5
, &
fx_sub_r6
, &
fx_sub_r7
,

1677 &
fx_sub_r8
, &
fx_sub_r9
, &
fx_sub_r10
, &
fx_sub_r11
, &
fx_sub_r12
, &
fx_sub_r13
, &
fx_sub_r14
, &
fx_sub_r15
,

1679 &
fx_mîge
, &
fx_™d_r1
, &
fx_™d_r2
, &
fx_™d_r3
, &
fx_™d_r4
, &
fx_™d_r5
, &
fx_™d_r6
, &
fx_™d_r7
,

1680 &
fx_™d_r8
, &
fx_™d_r9
, &
fx_™d_r10
, &
fx_™d_r11
, &
fx_™d_r12
, &
fx_™d_r13
, &
fx_™d_r14
, &
fx_™d_r15
,

1682 &
fx_mu…_r0
, &
fx_mu…_r1
, &
fx_mu…_r2
, &
fx_mu…_r3
, &
fx_mu…_r4
, &
fx_mu…_r5
, &
fx_mu…_r6
, &
fx_mu…_r7
,

1683 &
fx_mu…_r8
, &
fx_mu…_r9
, &
fx_mu…_r10
, &
fx_mu…_r11
, &
fx_mu…_r12
, &
fx_mu…_r13
, &
fx_mu…_r14
, &
fx_mu…_r15
,

1685 &
fx_sbk
, &
fx_lök_i1
, &
fx_lök_i2
, &
fx_lök_i3
, &
fx_lök_i4
, &
fx_£x
, &
fx_a§
, &
fx_r‹
,

1686 &
fx_jmp_r8
, &
fx_jmp_r9
, &
fx_jmp_r10
, &
fx_jmp_r11
, &
fx_jmp_r12
, &
fx_jmp_r13
, &
fx_lob
, &
fx_fmu…
,

1688 &
fx_ibt_r0
, &
fx_ibt_r1
, &
fx_ibt_r2
, &
fx_ibt_r3
, &
fx_ibt_r4
, &
fx_ibt_r5
, &
fx_ibt_r6
, &
fx_ibt_r7
,

1689 &
fx_ibt_r8
, &
fx_ibt_r9
, &
fx_ibt_r10
, &
fx_ibt_r11
, &
fx_ibt_r12
, &
fx_ibt_r13
, &
fx_ibt_r14
, &
fx_ibt_r15
,

1691 &
fx_‰om_r0
, &
fx_‰om_r1
, &
fx_‰om_r2
, &
fx_‰om_r3
, &
fx_‰om_r4
, &
fx_‰om_r5
, &
fx_‰om_r6
, &
fx_‰om_r7
,

1692 &
fx_‰om_r8
, &
fx_‰om_r9
, &
fx_‰om_r10
, &
fx_‰om_r11
, &
fx_‰om_r12
, &
fx_‰om_r13
, &
fx_‰om_r14
, &
fx_‰om_r15
,

1694 &
fx_hib
, &
fx_‹_r1
, &
fx_‹_r2
, &
fx_‹_r3
, &
fx_‹_r4
, &
fx_‹_r5
, &
fx_‹_r6
, &
fx_‹_r7
,

1695 &
fx_‹_r8
, &
fx_‹_r9
, &
fx_‹_r10
, &
fx_‹_r11
, &
fx_‹_r12
, &
fx_‹_r13
, &
fx_‹_r14
, &
fx_‹_r15
,

1697 &
fx_öc_r0
, &
fx_öc_r1
, &
fx_öc_r2
, &
fx_öc_r3
, &
fx_öc_r4
, &
fx_öc_r5
, &
fx_öc_r6
, &
fx_öc_r7
,

1698 &
fx_öc_r8
, &
fx_öc_r9
, &
fx_öc_r10
, &
fx_öc_r11
, &
fx_öc_r12
, &
fx_öc_r13
, &
fx_öc_r14
, &
fx_gëc
,

1700 &
fx_dec_r0
, &
fx_dec_r1
, &
fx_dec_r2
, &
fx_dec_r3
, &
fx_dec_r4
, &
fx_dec_r5
, &
fx_dec_r6
, &
fx_dec_r7
,

1701 &
fx_dec_r8
, &
fx_dec_r9
, &
fx_dec_r10
, &
fx_dec_r11
, &
fx_dec_r12
, &
fx_dec_r13
, &
fx_dec_r14
, &
fx_gëb
,

1703 &
fx_iwt_r0
, &
fx_iwt_r1
, &
fx_iwt_r2
, &
fx_iwt_r3
, &
fx_iwt_r4
, &
fx_iwt_r5
, &
fx_iwt_r6
, &
fx_iwt_r7
,

1704 &
fx_iwt_r8
, &
fx_iwt_r9
, &
fx_iwt_r10
, &
fx_iwt_r11
, &
fx_iwt_r12
, &
fx_iwt_r13
, &
fx_iwt_r14
, &
fx_iwt_r15
,

1711 &
fx_°›
, &
fx_n›
, &
fx_ˇche
, &
fx_l§
, &
fx_rﬁ
, &
fx_bø
, &
fx_bge
, &
fx_b…
,

1712 &
fx_b√
, &
fx_beq
, &
fx_b∂
, &
fx_bmi
, &
fx_bcc
, &
fx_bcs
, &
fx_bvc
, &
fx_bvs
,

1714 &
fx_to_r0
, &
fx_to_r1
, &
fx_to_r2
, &
fx_to_r3
, &
fx_to_r4
, &
fx_to_r5
, &
fx_to_r6
, &
fx_to_r7
,

1715 &
fx_to_r8
, &
fx_to_r9
, &
fx_to_r10
, &
fx_to_r11
, &
fx_to_r12
, &
fx_to_r13
, &
fx_to_r14
, &
fx_to_r15
,

1717 &
fx_wôh_r0
, &
fx_wôh_r1
, &
fx_wôh_r2
, &
fx_wôh_r3
, &
fx_wôh_r4
, &
fx_wôh_r5
, &
fx_wôh_r6
, &
fx_wôh_r7
,

1718 &
fx_wôh_r8
, &
fx_wôh_r9
, &
fx_wôh_r10
, &
fx_wôh_r11
, &
fx_wôh_r12
, &
fx_wôh_r13
, &
fx_wôh_r14
, &
fx_wôh_r15
,

1720 &
fx_°b_r0
, &
fx_°b_r1
, &
fx_°b_r2
, &
fx_°b_r3
, &
fx_°b_r4
, &
fx_°b_r5
, &
fx_°b_r6
, &
fx_°b_r7
,

1721 &
fx_°b_r8
, &
fx_°b_r9
, &
fx_°b_r10
, &
fx_°b_r11
, &
fx_lo›
, &
fx_Æt1
, &
fx_Æt2
, &
fx_Æt3
,

1723 &
fx_ldb_r0
, &
fx_ldb_r1
, &
fx_ldb_r2
, &
fx_ldb_r3
, &
fx_ldb_r4
, &
fx_ldb_r5
, &
fx_ldb_r6
, &
fx_ldb_r7
,

1724 &
fx_ldb_r8
, &
fx_ldb_r9
, &
fx_ldb_r10
, &
fx_ldb_r11
, &
fx_Ωix_2bô
,&
fx_sw≠
, &
fx_cmode
, &
fx_nŸ
,

1726 &
fx_adc_r0
, &
fx_adc_r1
, &
fx_adc_r2
, &
fx_adc_r3
, &
fx_adc_r4
, &
fx_adc_r5
, &
fx_adc_r6
, &
fx_adc_r7
,

1727 &
fx_adc_r8
, &
fx_adc_r9
, &
fx_adc_r10
, &
fx_adc_r11
, &
fx_adc_r12
, &
fx_adc_r13
, &
fx_adc_r14
, &
fx_adc_r15
,

1729 &
fx_sbc_r0
, &
fx_sbc_r1
, &
fx_sbc_r2
, &
fx_sbc_r3
, &
fx_sbc_r4
, &
fx_sbc_r5
, &
fx_sbc_r6
, &
fx_sbc_r7
,

1730 &
fx_sbc_r8
, &
fx_sbc_r9
, &
fx_sbc_r10
, &
fx_sbc_r11
, &
fx_sbc_r12
, &
fx_sbc_r13
, &
fx_sbc_r14
, &
fx_sbc_r15
,

1732 &
fx_mîge
, &
fx_bic_r1
, &
fx_bic_r2
, &
fx_bic_r3
, &
fx_bic_r4
, &
fx_bic_r5
, &
fx_bic_r6
, &
fx_bic_r7
,

1733 &
fx_bic_r8
, &
fx_bic_r9
, &
fx_bic_r10
, &
fx_bic_r11
, &
fx_bic_r12
, &
fx_bic_r13
, &
fx_bic_r14
, &
fx_bic_r15
,

1735 &
fx_umu…_r0
,&
fx_umu…_r1
,&
fx_umu…_r2
, &
fx_umu…_r3
, &
fx_umu…_r4
, &
fx_umu…_r5
, &
fx_umu…_r6
, &
fx_umu…_r7
,

1736 &
fx_umu…_r8
,&
fx_umu…_r9
,&
fx_umu…_r10
,&
fx_umu…_r11
,&
fx_umu…_r12
,&
fx_umu…_r13
,&
fx_umu…_r14
,&
fx_umu…_r15
,

1738 &
fx_sbk
, &
fx_lök_i1
, &
fx_lök_i2
, &
fx_lök_i3
, &
fx_lök_i4
, &
fx_£x
, &
fx_div2
, &
fx_r‹
,

1739 &
fx_ljmp_r8
, &
fx_ljmp_r9
, &
fx_ljmp_r10
, &
fx_ljmp_r11
, &
fx_ljmp_r12
, &
fx_ljmp_r13
, &
fx_lob
, &
fx_lmu…
,

1741 &
fx_lms_r0
, &
fx_lms_r1
, &
fx_lms_r2
, &
fx_lms_r3
, &
fx_lms_r4
, &
fx_lms_r5
, &
fx_lms_r6
, &
fx_lms_r7
,

1742 &
fx_lms_r8
, &
fx_lms_r9
, &
fx_lms_r10
, &
fx_lms_r11
, &
fx_lms_r12
, &
fx_lms_r13
, &
fx_lms_r14
, &
fx_lms_r15
,

1744 &
fx_‰om_r0
, &
fx_‰om_r1
, &
fx_‰om_r2
, &
fx_‰om_r3
, &
fx_‰om_r4
, &
fx_‰om_r5
, &
fx_‰om_r6
, &
fx_‰om_r7
,

1745 &
fx_‰om_r8
, &
fx_‰om_r9
, &
fx_‰om_r10
, &
fx_‰om_r11
, &
fx_‰om_r12
, &
fx_‰om_r13
, &
fx_‰om_r14
, &
fx_‰om_r15
,

1747 &
fx_hib
, &
fx_x‹_r1
, &
fx_x‹_r2
, &
fx_x‹_r3
, &
fx_x‹_r4
, &
fx_x‹_r5
, &
fx_x‹_r6
, &
fx_x‹_r7
,

1748 &
fx_x‹_r8
, &
fx_x‹_r9
, &
fx_x‹_r10
, &
fx_x‹_r11
, &
fx_x‹_r12
, &
fx_x‹_r13
, &
fx_x‹_r14
, &
fx_x‹_r15
,

1750 &
fx_öc_r0
, &
fx_öc_r1
, &
fx_öc_r2
, &
fx_öc_r3
, &
fx_öc_r4
, &
fx_öc_r5
, &
fx_öc_r6
, &
fx_öc_r7
,

1751 &
fx_öc_r8
, &
fx_öc_r9
, &
fx_öc_r10
, &
fx_öc_r11
, &
fx_öc_r12
, &
fx_öc_r13
, &
fx_öc_r14
, &
fx_gëc
,

1753 &
fx_dec_r0
, &
fx_dec_r1
, &
fx_dec_r2
, &
fx_dec_r3
, &
fx_dec_r4
, &
fx_dec_r5
, &
fx_dec_r6
, &
fx_dec_r7
,

1754 &
fx_dec_r8
, &
fx_dec_r9
, &
fx_dec_r10
, &
fx_dec_r11
, &
fx_dec_r12
, &
fx_dec_r13
, &
fx_dec_r14
, &
fx_gëbh
,

1756 &
fx_lm_r0
, &
fx_lm_r1
, &
fx_lm_r2
, &
fx_lm_r3
, &
fx_lm_r4
, &
fx_lm_r5
, &
fx_lm_r6
, &
fx_lm_r7
,

1757 &
fx_lm_r8
, &
fx_lm_r9
, &
fx_lm_r10
, &
fx_lm_r11
, &
fx_lm_r12
, &
fx_lm_r13
, &
fx_lm_r14
, &
fx_lm_r15
,

1764 &
fx_°›
, &
fx_n›
, &
fx_ˇche
, &
fx_l§
, &
fx_rﬁ
, &
fx_bø
, &
fx_bge
, &
fx_b…
,

1765 &
fx_b√
, &
fx_beq
, &
fx_b∂
, &
fx_bmi
, &
fx_bcc
, &
fx_bcs
, &
fx_bvc
, &
fx_bvs
,

1767 &
fx_to_r0
, &
fx_to_r1
, &
fx_to_r2
, &
fx_to_r3
, &
fx_to_r4
, &
fx_to_r5
, &
fx_to_r6
, &
fx_to_r7
,

1768 &
fx_to_r8
, &
fx_to_r9
, &
fx_to_r10
, &
fx_to_r11
, &
fx_to_r12
, &
fx_to_r13
, &
fx_to_r14
, &
fx_to_r15
,

1770 &
fx_wôh_r0
, &
fx_wôh_r1
, &
fx_wôh_r2
, &
fx_wôh_r3
, &
fx_wôh_r4
, &
fx_wôh_r5
, &
fx_wôh_r6
, &
fx_wôh_r7
,

1771 &
fx_wôh_r8
, &
fx_wôh_r9
, &
fx_wôh_r10
, &
fx_wôh_r11
, &
fx_wôh_r12
, &
fx_wôh_r13
, &
fx_wôh_r14
, &
fx_wôh_r15
,

1773 &
fx_°w_r0
, &
fx_°w_r1
, &
fx_°w_r2
, &
fx_°w_r3
, &
fx_°w_r4
, &
fx_°w_r5
, &
fx_°w_r6
, &
fx_°w_r7
,

1774 &
fx_°w_r8
, &
fx_°w_r9
, &
fx_°w_r10
, &
fx_°w_r11
, &
fx_lo›
, &
fx_Æt1
, &
fx_Æt2
, &
fx_Æt3
,

1776 &
fx_ldw_r0
, &
fx_ldw_r1
, &
fx_ldw_r2
, &
fx_ldw_r3
, &
fx_ldw_r4
, &
fx_ldw_r5
, &
fx_ldw_r6
, &
fx_ldw_r7
,

1777 &
fx_ldw_r8
, &
fx_ldw_r9
, &
fx_ldw_r10
, &
fx_ldw_r11
, &
fx_∂Ÿ_2bô
,&
fx_sw≠
, &
fx_cﬁ‹
, &
fx_nŸ
,

1779 &
fx_add_i0
, &
fx_add_i1
, &
fx_add_i2
, &
fx_add_i3
, &
fx_add_i4
, &
fx_add_i5
, &
fx_add_i6
, &
fx_add_i7
,

1780 &
fx_add_i8
, &
fx_add_i9
, &
fx_add_i10
, &
fx_add_i11
, &
fx_add_i12
, &
fx_add_i13
, &
fx_add_i14
, &
fx_add_i15
,

1782 &
fx_sub_i0
, &
fx_sub_i1
, &
fx_sub_i2
, &
fx_sub_i3
, &
fx_sub_i4
, &
fx_sub_i5
, &
fx_sub_i6
, &
fx_sub_i7
,

1783 &
fx_sub_i8
, &
fx_sub_i9
, &
fx_sub_i10
, &
fx_sub_i11
, &
fx_sub_i12
, &
fx_sub_i13
, &
fx_sub_i14
, &
fx_sub_i15
,

1785 &
fx_mîge
, &
fx_™d_i1
, &
fx_™d_i2
, &
fx_™d_i3
, &
fx_™d_i4
, &
fx_™d_i5
, &
fx_™d_i6
, &
fx_™d_i7
,

1786 &
fx_™d_i8
, &
fx_™d_i9
, &
fx_™d_i10
, &
fx_™d_i11
, &
fx_™d_i12
, &
fx_™d_i13
, &
fx_™d_i14
, &
fx_™d_i15
,

1788 &
fx_mu…_i0
, &
fx_mu…_i1
, &
fx_mu…_i2
, &
fx_mu…_i3
, &
fx_mu…_i4
, &
fx_mu…_i5
, &
fx_mu…_i6
, &
fx_mu…_i7
,

1789 &
fx_mu…_i8
, &
fx_mu…_i9
, &
fx_mu…_i10
, &
fx_mu…_i11
, &
fx_mu…_i12
, &
fx_mu…_i13
, &
fx_mu…_i14
, &
fx_mu…_i15
,

1791 &
fx_sbk
, &
fx_lök_i1
, &
fx_lök_i2
, &
fx_lök_i3
, &
fx_lök_i4
, &
fx_£x
, &
fx_a§
, &
fx_r‹
,

1792 &
fx_jmp_r8
, &
fx_jmp_r9
, &
fx_jmp_r10
, &
fx_jmp_r11
, &
fx_jmp_r12
, &
fx_jmp_r13
, &
fx_lob
, &
fx_fmu…
,

1794 &
fx_sms_r0
, &
fx_sms_r1
, &
fx_sms_r2
, &
fx_sms_r3
, &
fx_sms_r4
, &
fx_sms_r5
, &
fx_sms_r6
, &
fx_sms_r7
,

1795 &
fx_sms_r8
, &
fx_sms_r9
, &
fx_sms_r10
, &
fx_sms_r11
, &
fx_sms_r12
, &
fx_sms_r13
, &
fx_sms_r14
, &
fx_sms_r15
,

1797 &
fx_‰om_r0
, &
fx_‰om_r1
, &
fx_‰om_r2
, &
fx_‰om_r3
, &
fx_‰om_r4
, &
fx_‰om_r5
, &
fx_‰om_r6
, &
fx_‰om_r7
,

1798 &
fx_‰om_r8
, &
fx_‰om_r9
, &
fx_‰om_r10
, &
fx_‰om_r11
, &
fx_‰om_r12
, &
fx_‰om_r13
, &
fx_‰om_r14
, &
fx_‰om_r15
,

1800 &
fx_hib
, &
fx_‹_i1
, &
fx_‹_i2
, &
fx_‹_i3
, &
fx_‹_i4
, &
fx_‹_i5
, &
fx_‹_i6
, &
fx_‹_i7
,

1801 &
fx_‹_i8
, &
fx_‹_i9
, &
fx_‹_i10
, &
fx_‹_i11
, &
fx_‹_i12
, &
fx_‹_i13
, &
fx_‹_i14
, &
fx_‹_i15
,

1803 &
fx_öc_r0
, &
fx_öc_r1
, &
fx_öc_r2
, &
fx_öc_r3
, &
fx_öc_r4
, &
fx_öc_r5
, &
fx_öc_r6
, &
fx_öc_r7
,

1804 &
fx_öc_r8
, &
fx_öc_r9
, &
fx_öc_r10
, &
fx_öc_r11
, &
fx_öc_r12
, &
fx_öc_r13
, &
fx_öc_r14
, &
fx_ømb
,

1806 &
fx_dec_r0
, &
fx_dec_r1
, &
fx_dec_r2
, &
fx_dec_r3
, &
fx_dec_r4
, &
fx_dec_r5
, &
fx_dec_r6
, &
fx_dec_r7
,

1807 &
fx_dec_r8
, &
fx_dec_r9
, &
fx_dec_r10
, &
fx_dec_r11
, &
fx_dec_r12
, &
fx_dec_r13
, &
fx_dec_r14
, &
fx_gëbl
,

1809 &
fx_sm_r0
, &
fx_sm_r1
, &
fx_sm_r2
, &
fx_sm_r3
, &
fx_sm_r4
, &
fx_sm_r5
, &
fx_sm_r6
, &
fx_sm_r7
,

1810 &
fx_sm_r8
, &
fx_sm_r9
, &
fx_sm_r10
, &
fx_sm_r11
, &
fx_sm_r12
, &
fx_sm_r13
, &
fx_sm_r14
, &
fx_sm_r15
,

1817 &
fx_°›
, &
fx_n›
, &
fx_ˇche
, &
fx_l§
, &
fx_rﬁ
, &
fx_bø
, &
fx_bge
, &
fx_b…
,

1818 &
fx_b√
, &
fx_beq
, &
fx_b∂
, &
fx_bmi
, &
fx_bcc
, &
fx_bcs
, &
fx_bvc
, &
fx_bvs
,

1820 &
fx_to_r0
, &
fx_to_r1
, &
fx_to_r2
, &
fx_to_r3
, &
fx_to_r4
, &
fx_to_r5
, &
fx_to_r6
, &
fx_to_r7
,

1821 &
fx_to_r8
, &
fx_to_r9
, &
fx_to_r10
, &
fx_to_r11
, &
fx_to_r12
, &
fx_to_r13
, &
fx_to_r14
, &
fx_to_r15
,

1823 &
fx_wôh_r0
, &
fx_wôh_r1
, &
fx_wôh_r2
, &
fx_wôh_r3
, &
fx_wôh_r4
, &
fx_wôh_r5
, &
fx_wôh_r6
, &
fx_wôh_r7
,

1824 &
fx_wôh_r8
, &
fx_wôh_r9
, &
fx_wôh_r10
, &
fx_wôh_r11
, &
fx_wôh_r12
, &
fx_wôh_r13
, &
fx_wôh_r14
, &
fx_wôh_r15
,

1826 &
fx_°b_r0
, &
fx_°b_r1
, &
fx_°b_r2
, &
fx_°b_r3
, &
fx_°b_r4
, &
fx_°b_r5
, &
fx_°b_r6
, &
fx_°b_r7
,

1827 &
fx_°b_r8
, &
fx_°b_r9
, &
fx_°b_r10
, &
fx_°b_r11
, &
fx_lo›
, &
fx_Æt1
, &
fx_Æt2
, &
fx_Æt3
,

1829 &
fx_ldb_r0
, &
fx_ldb_r1
, &
fx_ldb_r2
, &
fx_ldb_r3
, &
fx_ldb_r4
, &
fx_ldb_r5
, &
fx_ldb_r6
, &
fx_ldb_r7
,

1830 &
fx_ldb_r8
, &
fx_ldb_r9
, &
fx_ldb_r10
, &
fx_ldb_r11
, &
fx_Ωix_2bô
,&
fx_sw≠
, &
fx_cmode
, &
fx_nŸ
,

1832 &
fx_adc_i0
, &
fx_adc_i1
, &
fx_adc_i2
, &
fx_adc_i3
, &
fx_adc_i4
, &
fx_adc_i5
, &
fx_adc_i6
, &
fx_adc_i7
,

1833 &
fx_adc_i8
, &
fx_adc_i9
, &
fx_adc_i10
, &
fx_adc_i11
, &
fx_adc_i12
, &
fx_adc_i13
, &
fx_adc_i14
, &
fx_adc_i15
,

1835 &
fx_cmp_r0
, &
fx_cmp_r1
, &
fx_cmp_r2
, &
fx_cmp_r3
, &
fx_cmp_r4
, &
fx_cmp_r5
, &
fx_cmp_r6
, &
fx_cmp_r7
,

1836 &
fx_cmp_r8
, &
fx_cmp_r9
, &
fx_cmp_r10
, &
fx_cmp_r11
, &
fx_cmp_r12
, &
fx_cmp_r13
, &
fx_cmp_r14
, &
fx_cmp_r15
,

1838 &
fx_mîge
, &
fx_bic_i1
, &
fx_bic_i2
, &
fx_bic_i3
, &
fx_bic_i4
, &
fx_bic_i5
, &
fx_bic_i6
, &
fx_bic_i7
,

1839 &
fx_bic_i8
, &
fx_bic_i9
, &
fx_bic_i10
, &
fx_bic_i11
, &
fx_bic_i12
, &
fx_bic_i13
, &
fx_bic_i14
, &
fx_bic_i15
,

1841 &
fx_umu…_i0
,&
fx_umu…_i1
,&
fx_umu…_i2
, &
fx_umu…_i3
, &
fx_umu…_i4
, &
fx_umu…_i5
, &
fx_umu…_i6
, &
fx_umu…_i7
,

1842 &
fx_umu…_i8
,&
fx_umu…_i9
,&
fx_umu…_i10
,&
fx_umu…_i11
,&
fx_umu…_i12
,&
fx_umu…_i13
,&
fx_umu…_i14
,&
fx_umu…_i15
,

1844 &
fx_sbk
, &
fx_lök_i1
, &
fx_lök_i2
, &
fx_lök_i3
, &
fx_lök_i4
, &
fx_£x
, &
fx_div2
, &
fx_r‹
,

1845 &
fx_ljmp_r8
, &
fx_ljmp_r9
, &
fx_ljmp_r10
, &
fx_ljmp_r11
, &
fx_ljmp_r12
, &
fx_ljmp_r13
, &
fx_lob
, &
fx_lmu…
,

1847 &
fx_lms_r0
, &
fx_lms_r1
, &
fx_lms_r2
, &
fx_lms_r3
, &
fx_lms_r4
, &
fx_lms_r5
, &
fx_lms_r6
, &
fx_lms_r7
,

1848 &
fx_lms_r8
, &
fx_lms_r9
, &
fx_lms_r10
, &
fx_lms_r11
, &
fx_lms_r12
, &
fx_lms_r13
, &
fx_lms_r14
, &
fx_lms_r15
,

1850 &
fx_‰om_r0
, &
fx_‰om_r1
, &
fx_‰om_r2
, &
fx_‰om_r3
, &
fx_‰om_r4
, &
fx_‰om_r5
, &
fx_‰om_r6
, &
fx_‰om_r7
,

1851 &
fx_‰om_r8
, &
fx_‰om_r9
, &
fx_‰om_r10
, &
fx_‰om_r11
, &
fx_‰om_r12
, &
fx_‰om_r13
, &
fx_‰om_r14
, &
fx_‰om_r15
,

1853 &
fx_hib
, &
fx_x‹_i1
, &
fx_x‹_i2
, &
fx_x‹_i3
, &
fx_x‹_i4
, &
fx_x‹_i5
, &
fx_x‹_i6
, &
fx_x‹_i7
,

1854 &
fx_x‹_i8
, &
fx_x‹_i9
, &
fx_x‹_i10
, &
fx_x‹_i11
, &
fx_x‹_i12
, &
fx_x‹_i13
, &
fx_x‹_i14
, &
fx_x‹_i15
,

1856 &
fx_öc_r0
, &
fx_öc_r1
, &
fx_öc_r2
, &
fx_öc_r3
, &
fx_öc_r4
, &
fx_öc_r5
, &
fx_öc_r6
, &
fx_öc_r7
,

1857 &
fx_öc_r8
, &
fx_öc_r9
, &
fx_öc_r10
, &
fx_öc_r11
, &
fx_öc_r12
, &
fx_öc_r13
, &
fx_öc_r14
, &
fx_romb
,

1859 &
fx_dec_r0
, &
fx_dec_r1
, &
fx_dec_r2
, &
fx_dec_r3
, &
fx_dec_r4
, &
fx_dec_r5
, &
fx_dec_r6
, &
fx_dec_r7
,

1860 &
fx_dec_r8
, &
fx_dec_r9
, &
fx_dec_r10
, &
fx_dec_r11
, &
fx_dec_r12
, &
fx_dec_r13
, &
fx_dec_r14
, &
fx_gëbs
,

1862 &
fx_lm_r0
, &
fx_lm_r1
, &
fx_lm_r2
, &
fx_lm_r3
, &
fx_lm_r4
, &
fx_lm_r5
, &
fx_lm_r6
, &
fx_lm_r7
,

1863 &
fx_lm_r8
, &
fx_lm_r9
, &
fx_lm_r10
, &
fx_lm_r11
, &
fx_lm_r12
, &
fx_lm_r13
, &
fx_lm_r14
, &
fx_lm_r15
,

	@fxinst.h

41 #i‚de‡
_FXINST_H_


42 
	#_FXINST_H_
 1

	)

163 
	#FX_RAM_BANKS
 4

	)

171 
	sFxRegs_s


174 
uöt32
 
	mavReg
[16];

175 
uöt32
 
	mvCﬁ‹Reg
;

176 
uöt32
 
	mvPlŸO±i⁄Reg
;

177 
uöt32
 
	mvSètusReg
;

178 
uöt32
 
	mvPrgB™kReg
;

179 
uöt32
 
	mvRomB™kReg
;

180 
uöt32
 
	mvRamB™kReg
;

181 
uöt32
 
	mvCacheBa£Reg
;

182 
uöt32
 
	mvCacheFœgs
;

183 
uöt32
 
	mvLa°RamAdr
;

184 
uöt32
 * 
	mpvDªg
;

185 
uöt32
 * 
	mpvSªg
;

186 
uöt8
 
	mvRomBuf„r
;

187 
uöt8
 
	mvPùe
;

188 
uöt32
 
	mvPùeAdr
;

191 
uöt32
 
	mvSign
;

192 
uöt32
 
	mvZîo
;

193 
uöt32
 
	mvC¨ry
;

194 
öt32
 
	mvOvîÊow
;

198 
öt32
 
	mvEº‹Code
;

199 
uöt32
 
	mvIŒegÆAddªss
;

201 
uöt8
 
	mbBªakPoöt
;

202 
uöt32
 
	mvBªakPoöt
;

203 
uöt32
 
	mvSãpPoöt
;

205 
uöt8
 * 
	mpvRegi°îs
;

206 
uöt32
 
	mnRamB™ks
;

207 
uöt8
 * 
	mpvRam
;

208 
uöt32
 
	mnRomB™ks
;

209 
uöt8
 * 
	mpvRom
;

211 
uöt32
 
	mvMode
;

212 
uöt32
 
	mvPªvMode
;

213 
uöt8
 * 
	mpvS¸ìnBa£
;

214 
uöt8
 * 
	m≠vS¸ìn
[32];

215 
	mx
[32];

216 
uöt32
 
	mvS¸ìnHeight
;

217 
uöt32
 
	mvS¸ìnRólHeight
;

218 
uöt32
 
	mvPªvS¸ìnHeight
;

219 
uöt32
 
	mvS¸ìnSize
;

220 (*
	mpfPlŸ
)();

221 (*
	mpfRpix
)();

223 
uöt8
 * 
	mpvRamB™k
;

224 
uöt8
 * 
	mpvRomB™k
;

225 
uöt8
 * 
	mpvPrgB™k
;

227 
uöt8
 * 
	m≠vRamB™k
[
FX_RAM_BANKS
];

228 
uöt8
 * 
	m≠vRomB™k
[256];

230 
uöt8
 
	mbCacheA˘ive
;

231 
uöt8
 * 
	mpvCache
;

232 
uöt8
 
	mavCacheBackup
[512];

233 
uöt32
 
	mvCou¡î
;

234 
uöt32
 
	mvIn°Cou¡
;

238 
	#GSU_R0
 0x000

	)

239 
	#GSU_R1
 0x002

	)

240 
	#GSU_R2
 0x004

	)

241 
	#GSU_R3
 0x006

	)

242 
	#GSU_R4
 0x008

	)

243 
	#GSU_R5
 0x00a

	)

244 
	#GSU_R6
 0x00c

	)

245 
	#GSU_R7
 0x00e

	)

246 
	#GSU_R8
 0x010

	)

247 
	#GSU_R9
 0x012

	)

248 
	#GSU_R10
 0x014

	)

249 
	#GSU_R11
 0x016

	)

250 
	#GSU_R12
 0x018

	)

251 
	#GSU_R13
 0x01a

	)

252 
	#GSU_R14
 0x01c

	)

253 
	#GSU_R15
 0x01e

	)

254 
	#GSU_SFR
 0x030

	)

255 
	#GSU_BRAMR
 0x033

	)

256 
	#GSU_PBR
 0x034

	)

257 
	#GSU_ROMBR
 0x036

	)

258 
	#GSU_CFGR
 0x037

	)

259 
	#GSU_SCBR
 0x038

	)

260 
	#GSU_CLSR
 0x039

	)

261 
	#GSU_SCMR
 0x03a

	)

262 
	#GSU_VCR
 0x03b

	)

263 
	#GSU_RAMBR
 0x03c

	)

264 
	#GSU_CBR
 0x03e

	)

265 
	#GSU_CACHERAM
 0x100

	)

268 
	#FLG_Z
 (1<<1)

	)

269 
	#FLG_CY
 (1<<2)

	)

270 
	#FLG_S
 (1<<3)

	)

271 
	#FLG_OV
 (1<<4)

	)

272 
	#FLG_G
 (1<<5)

	)

273 
	#FLG_R
 (1<<6)

	)

274 
	#FLG_ALT1
 (1<<8)

	)

275 
	#FLG_ALT2
 (1<<9)

	)

276 
	#FLG_IL
 (1<<10)

	)

277 
	#FLG_IH
 (1<<11)

	)

278 
	#FLG_B
 (1<<12)

	)

279 
	#FLG_IRQ
 (1<<15)

	)

282 
	#TF
(
a
Ë(
GSU
.
vSètusReg
 & 
FLG_
##®)

	)

283 
	#CF
(
a
Ë(
GSU
.
vSètusReg
 &~
FLG_
##®)

	)

284 
	#SF
(
a
Ë(
GSU
.
vSètusReg
 |
FLG_
##®)

	)

287 
	#TS
(
a
,
b
Ë
GSU
.
vSètusReg
 = ( (GSU.vSètusReg & (~
FLG_
##a)Ë| ( (!!(##b)Ë* FLG_##®Ë)

	)

290 
	#ALT0
 (!
	`TF
(
ALT1
)&&!TF(
ALT2
))

	)

291 
	#ALT1
 (
	`TF
(
ALT1
)&&!TF(
ALT2
))

	)

292 
	#ALT2
 (!
	`TF
(
ALT1
)&&TF(
ALT2
))

	)

293 
	#ALT3
 (
	`TF
(
ALT1
)&&TF(
ALT2
))

	)

296 
	#SEX16
(
a
Ë((
öt32
)((
öt16
)◊)))

	)

297 
	#SEX8
(
a
Ë((
öt32
)((
öt8
)◊)))

	)

300 
	#USEX16
(
a
Ë((
uöt32
)((
uöt16
)◊)))

	)

301 
	#USEX8
(
a
Ë((
uöt32
)((
uöt8
)◊)))

	)

303 
	#SUSEX16
(
a
Ë((
öt32
)((
uöt16
)◊)))

	)

306 
	#TSZ
(
num
Ë
	`TS
(
S
, (num & 0x8000)); TS(
Z
, (!
	`USEX16
“um)Ë)

	)

309 
	#CLRFLAGS
 
GSU
.
vSètusReg
 &~(
FLG_ALT1
|
FLG_ALT2
|
FLG_B
); GSU.
pvDªg
 = GSU.
pvSªg
 = &
R0
;

	)

312 
	#RAM
(
adr
Ë
GSU
.
pvRamB™k
[
	`USEX16
◊dr)]

	)

315 
	#ROM
(
idx
Ë(
GSU
.
pvRomB™k
[
	`USEX16
(idx)])

	)

318 
	#PIPE
 
GSU
.
vPùe


	)

321 
	#PRGBANK
(
idx
Ë
GSU
.
pvPrgB™k
[
	`USEX16
(idx)]

	)

325 
	#FETCHPIPE
 { 
PIPE
 = 
	`PRGBANK
(
R15
); 
GSU
.
vPùeAdr
 = (GSU.
vPrgB™kReg
<<16Ë+ R15; }

	)

327 
	#FETCHPIPE
 { 
PIPE
 = 
	`PRGBANK
(
R15
); }

	)

331 
	#ABS
(
x
Ë((x)<0?-(x):(x))

	)

334 
	#SREG
 (*
GSU
.
pvSªg
)

	)

337 
	#DREG
 (*
GSU
.
pvDªg
)

	)

339 #i‚de‡
FX_DO_ROMBUFFER


342 
	#READR14


	)

345 
	#TESTR14


	)

350 
	#READR14
 
GSU
.
vRomBuf„r
 = 
	`ROM
(
R14
)

	)

353 
	#TESTR14
 if(
GSU
.
pvDªg
 =&
R14
Ë
READR14


	)

358 
	#R0
 
GSU
.
avReg
[0]

	)

359 
	#R1
 
GSU
.
avReg
[1]

	)

360 
	#R2
 
GSU
.
avReg
[2]

	)

361 
	#R3
 
GSU
.
avReg
[3]

	)

362 
	#R4
 
GSU
.
avReg
[4]

	)

363 
	#R5
 
GSU
.
avReg
[5]

	)

364 
	#R6
 
GSU
.
avReg
[6]

	)

365 
	#R7
 
GSU
.
avReg
[7]

	)

366 
	#R8
 
GSU
.
avReg
[8]

	)

367 
	#R9
 
GSU
.
avReg
[9]

	)

368 
	#R10
 
GSU
.
avReg
[10]

	)

369 
	#R11
 
GSU
.
avReg
[11]

	)

370 
	#R12
 
GSU
.
avReg
[12]

	)

371 
	#R13
 
GSU
.
avReg
[13]

	)

372 
	#R14
 
GSU
.
avReg
[14]

	)

373 
	#R15
 
GSU
.
avReg
[15]

	)

374 
	#SFR
 
GSU
.
vSètusReg


	)

375 
	#PBR
 
GSU
.
vPrgB™kReg


	)

376 
	#ROMBR
 
GSU
.
vRomB™kReg


	)

377 
	#RAMBR
 
GSU
.
vRamB™kReg


	)

378 
	#CBR
 
GSU
.
vCacheBa£Reg


	)

379 
	#SCBR
 
	`USEX8
(
GSU
.
pvRegi°îs
[
GSU_SCBR
])

	)

380 
	#SCMR
 
	`USEX8
(
GSU
.
pvRegi°îs
[
GSU_SCMR
])

	)

381 
	#COLR
 
GSU
.
vCﬁ‹Reg


	)

382 
	#POR
 
GSU
.
vPlŸO±i⁄Reg


	)

383 
	#BRAMR
 
	`USEX8
(
GSU
.
pvRegi°îs
[
GSU_BRAMR
])

	)

384 
	#VCR
 
	`USEX8
(
GSU
.
pvRegi°îs
[
GSU_VCR
])

	)

385 
	#CFGR
 
	`USEX8
(
GSU
.
pvRegi°îs
[
GSU_CFGR
])

	)

386 
	#CLSR
 
	`USEX8
(
GSU
.
pvRegi°îs
[
GSU_CLSR
])

	)

389 
	#FX_STEP
 { 
uöt32
 
vOpcode
 = (uöt32)
PIPE
; 
FETCHPIPE
; \

390 (*
fx_µfOpcodeTabÀ
[ (
GSU
.
vSètusReg
 & 0x300Ë| 
vOpcode
 ])(); } \

391 

	)

392 
	#FX_FUNCTION_RUN
 0

	)

393 
	#FX_FUNCTION_RUN_TO_BREAKPOINT
 1

	)

394 
	#FX_FUNCTION_STEP_OVER
 2

	)

396 
	$uöt32
 (**
fx_µfFun˘i⁄TabÀ
)(
uöt32
);

397 (**
fx_µfPlŸTabÀ
)();

398 (**
fx_µfOpcodeTabÀ
)();

400 
	$uöt32
 (*
fx_≠fFun˘i⁄TabÀ
[])(
uöt32
);

401 (*
fx_≠fOpcodeTabÀ
[])();

402 (*
fx_≠fPlŸTabÀ
[])();

403 
	$uöt32
 (*
fx_a_≠fFun˘i⁄TabÀ
[])(
uöt32
);

404 (*
fx_a_≠fOpcodeTabÀ
[])();

405 (*
fx_a_≠fPlŸTabÀ
[])();

406 
	$uöt32
 (*
fx_r_≠fFun˘i⁄TabÀ
[])(
uöt32
);

407 (*
fx_r_≠fOpcodeTabÀ
[])();

408 (*
fx_r_≠fPlŸTabÀ
[])();

409 
	$uöt32
 (*
fx_¨_≠fFun˘i⁄TabÀ
[])(
uöt32
);

410 (*
fx_¨_≠fOpcodeTabÀ
[])();

411 (*
fx_¨_≠fPlŸTabÀ
[])();

415 
	#BRANCH_DELAY_RELATIVE


	)

	@gammatab.h

1 
	ggamm©ab
[10][32]={

	@getset.h

41 #i‚de‡
_GETSET_H_


42 
	#_GETSET_H_


	)

44 
	~"µu.h
"

45 
	~"d•1.h
"

46 
	~"˝uexec.h
"

47 
	~"ß1.h
"

49 
	#__memcheck__


	)

51 
›∑u£
;

52 
uöt16
 
mem_check
;

54 
INLINE
 
uöt8
 
	$S9xGëByã
 (
uöt32
 
Addªss
)

56 #ifde‡
__show_io__


57 
°r
[64];

58 
	`•rötf
(
°r
,"rd @ %04X",
Addªss
);

59 
	`S9xMesßge
(0,0,
°r
);

60 
	`gp32_∑u£
();

62 #ifde‡
__memcheck__


63 
mem_check
+=(
Addªss
>>16)+Address;

65 #i‡
	`deföed
(
VAR_CYCLES
Ë|| deföed(
CPU_SHUTDOWN
)

66 
block
;

67 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [
block
 = (
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

69 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

71 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

73 #ifde‡
VAR_CYCLES


74 
CPU
.
Cy˛es
 +
Mem‹y
.
Mem‹yS≥ed
 [
block
];

76 #ifde‡
CPU_SHUTDOWN


77 i‡(
Mem‹y
.
BlockIsRAM
 [
block
])

78 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

80  (*(
GëAddªss
 + (
Addªss
 & 0xffff)));

83 (Ë
GëAddªss
)

85 
CMem‹y
::
MAP_PPU
:

86 #ifde‡
VAR_CYCLES


87 i‡(!
CPU
.
InDMA
)

88 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

90  (
	`S9xGëPPU
 (
Addªss
 & 0xffff));

91 
CMem‹y
::
MAP_CPU
:

92 #ifde‡
VAR_CYCLES


93 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

95  (
	`S9xGëCPU
 (
Addªss
 & 0xffff));

96 
CMem‹y
::
MAP_DSP
:

97 #ifde‡
VAR_CYCLES


98 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

100  (
	`S9xGëDSP
 (
Addªss
 & 0xffff));

101 
CMem‹y
::
MAP_SA1RAM
:

102 
CMem‹y
::
MAP_LOROM_SRAM
:

103 #ifde‡
VAR_CYCLES


104 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

106  (*(
Mem‹y
.
SRAM
 + ((
Addªss
 & 
CPU
.
Mem‹y_SRAMMask
))));

108 
CMem‹y
::
MAP_HIROM_SRAM
:

109 #ifde‡
VAR_CYCLES


110 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

112  (*(
Mem‹y
.
SRAM
 + (((
Addªss
 & 0x7fff) - 0x6000 +

113 ((
Addªss
 & 0xf0000Ë>> 3)Ë& 
CPU
.
Mem‹y_SRAMMask
)));

115 
CMem‹y
::
MAP_DEBUG
:

116 #ifde‡
DEBUGGER


117 
	`¥ötf
 ("R(BË%06x\n", 
Addªss
);

120 
CMem‹y
::
MAP_BWRAM
:

121 #ifde‡
VAR_CYCLES


122 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

124  (*(
Mem‹y
.
BWRAM
 + ((
Addªss
 & 0x7fff) - 0x6000)));

126 
CMem‹y
::
MAP_C4
:

127  (
	`S9xGëC4
 (
Addªss
 & 0xffff));

130 
CMem‹y
::
MAP_NONE
:

131 #ifde‡
VAR_CYCLES


132 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

134 #ifde‡
DEBUGGER


135 
	`¥ötf
 ("R(BË%06x\n", 
Addªss
);

137  ((
Addªss
 >> 8) & 0xff);

139 
	}
}

141 
INLINE
 
uöt16
 
	$S9xGëW‹d
 (
uöt32
 
Addªss
)

143 #ifde‡
__show_io__


144 
°r
[64];

145 
	`•rötf
(
°r
,"rd @ %04X",
Addªss
);

146 
	`S9xMesßge
(0,0,
°r
);

147 
	`gp32_∑u£
();

149 #ifde‡
__memcheck__


150 
mem_check
+=(
Addªss
>>16)+Address;

152 i‡((
Addªss
 & 0x1fff) == 0x1fff)

154  (
	`S9xGëByã
 (
Addªss
) | (S9xGetByte (Address + 1) << 8));

156 #i‡
	`deföed
(
VAR_CYCLES
Ë|| deföed(
CPU_SHUTDOWN
)

157 
block
;

158 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [
block
 = (
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

160 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

162 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

164 #ifde‡
VAR_CYCLES


165 
CPU
.
Cy˛es
 +
Mem‹y
.
Mem‹yS≥ed
 [
block
] << 1;

167 #ifde‡
CPU_SHUTDOWN


168 i‡(
Mem‹y
.
BlockIsRAM
 [
block
])

169 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

171 #ifde‡
FAST_LSB_WORD_ACCESS


172  (*(
uöt16
 *Ë(
GëAddªss
 + (
Addªss
 & 0xffff)));

174  (*(
GëAddªss
 + (
Addªss
 & 0xffff)) |

175 (*(
GëAddªss
 + (
Addªss
 & 0xffff) + 1) << 8));

179 (Ë
GëAddªss
)

181 
CMem‹y
::
MAP_PPU
:

182 #ifde‡
VAR_CYCLES


183 i‡(!
CPU
.
InDMA
)

184 
CPU
.
Cy˛es
 +
TWO_CYCLES
;

186  (
	`S9xGëPPU
 (
Addªss
 & 0xffff) |

187 (
	`S9xGëPPU
 ((
Addªss
 + 1) & 0xffff) << 8));

188 
CMem‹y
::
MAP_CPU
:

189 #ifde‡
VAR_CYCLES


190 
CPU
.
Cy˛es
 +
TWO_CYCLES
;

192  (
	`S9xGëCPU
 (
Addªss
 & 0xffff) |

193 (
	`S9xGëCPU
 ((
Addªss
 + 1) & 0xffff) << 8));

194 
CMem‹y
::
MAP_DSP
:

195 #ifde‡
VAR_CYCLES


196 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

198  (
	`S9xGëDSP
 (
Addªss
 & 0xffff) |

199 (
	`S9xGëDSP
 ((
Addªss
 + 1) & 0xffff) << 8));

200 
CMem‹y
::
MAP_SA1RAM
:

201 
CMem‹y
::
MAP_LOROM_SRAM
:

202 #ifde‡
VAR_CYCLES


203 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

205  (*(
Mem‹y
.
SRAM
 + (
Addªss
 & 
CPU
.
Mem‹y_SRAMMask
)) |

206 (*(
Mem‹y
.
SRAM
 + ((
Addªss
 + 1Ë& 
CPU
.
Mem‹y_SRAMMask
)) << 8));

208 
CMem‹y
::
MAP_HIROM_SRAM
:

209 #ifde‡
VAR_CYCLES


210 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

212  (*(
Mem‹y
.
SRAM
 +

213 (((
Addªss
 & 0x7fff) - 0x6000 +

214 ((
Addªss
 & 0xf0000Ë>> 3)Ë& 
CPU
.
Mem‹y_SRAMMask
)) |

215 (*(
Mem‹y
.
SRAM
 +

216 ((((
Addªss
 + 1) & 0x7fff) - 0x6000 +

217 (((
Addªss
 + 1Ë& 0xf0000Ë>> 3)Ë& 
CPU
.
Mem‹y_SRAMMask
)) << 8));

219 
CMem‹y
::
MAP_BWRAM
:

220 #ifde‡
VAR_CYCLES


221 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

223  (*(
Mem‹y
.
BWRAM
 + ((
Addªss
 & 0x7fff) - 0x6000)) |

224 (*(
Mem‹y
.
BWRAM
 + (((
Addªss
 + 1) & 0x7fff) - 0x6000)) << 8));

226 
CMem‹y
::
MAP_DEBUG
:

227 #ifde‡
DEBUGGER


228 
	`¥ötf
 ("R(WË%06x\n", 
Addªss
);

232 
CMem‹y
::
MAP_C4
:

233  (
	`S9xGëC4
 (
Addªss
 & 0xffff) |

234 (
	`S9xGëC4
 ((
Addªss
 + 1) & 0xffff) << 8));

237 
CMem‹y
::
MAP_NONE
:

238 #ifde‡
VAR_CYCLES


239 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

241 #ifde‡
DEBUGGER


242 
	`¥ötf
 ("R(WË%06x\n", 
Addªss
);

244  (((
Addªss
 >> 8) | (Address & 0xff00)) & 0xffff);

246 
	}
}

248 
INLINE
 
	$S9xSëByã
 (
uöt8
 
Byã
, 
uöt32
 
Addªss
)

250 #ifde‡
__show_io__


251 
°r
[64];

252 
	`•rötf
(
°r
,"w∏@ %04X %02X",
Addªss
,
Byã
);

253 
	`S9xMesßge
(0,0,
°r
);

254 
	`gp32_∑u£
();

256 #ifde‡
__memcheck__


257 
mem_check
+=
Byã
;

260 #i‡
	`deföed
(
CPU_SHUTDOWN
)

261 
CPU
.
WaôAddªss
 = 
NULL
;

263 #i‡
	`deföed
(
VAR_CYCLES
)

264 
block
;

265 
uöt8
 *
SëAddªss
 = 
Mem‹y
.
WrôeM≠
 [
block
 = ((
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
)];

267 
uöt8
 *
SëAddªss
 = 
Mem‹y
.
WrôeM≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

270 i‡(
SëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

272 #ifde‡
VAR_CYCLES


273 
CPU
.
Cy˛es
 +
Mem‹y
.
Mem‹yS≥ed
 [
block
];

275 #ifde‡
CPU_SHUTDOWN


276 
SëAddªss
 +
Addªss
 & 0xffff;

277 #ifde‡
USE_SA1


278 i‡(
SëAddªss
 =
SA1
.
WaôByãAddªss1
 ||

279 
SëAddªss
 =
SA1
.
WaôByãAddªss2
)

281 
SA1
.
Executög
 = SA1.
S9xOpcodes
 !
NULL
;

282 
SA1
.
WaôCou¡î
 = 0;

285 *
SëAddªss
 = 
Byã
;

287 *(
SëAddªss
 + (
Addªss
 & 0xffff)Ë
Byã
;

292 (Ë
SëAddªss
)

294 
CMem‹y
::
MAP_PPU
:

295 #ifde‡
VAR_CYCLES


296 i‡(!
CPU
.
InDMA
)

297 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

299 
	`S9xSëPPU
 (
Byã
, 
Addªss
 & 0xffff);

302 
CMem‹y
::
MAP_CPU
:

303 #ifde‡
VAR_CYCLES


304 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

306 
	`S9xSëCPU
 (
Byã
, 
Addªss
 & 0xffff);

309 
CMem‹y
::
MAP_DSP
:

310 #ifde‡
VAR_CYCLES


311 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

313 
	`S9xSëDSP
 (
Byã
, 
Addªss
 & 0xffff);

316 
CMem‹y
::
MAP_LOROM_SRAM
:

317 #ifde‡
VAR_CYCLES


318 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

320 i‡(
CPU
.
Mem‹y_SRAMMask
)

322 *(
Mem‹y
.
SRAM
 + (
Addªss
 & 
CPU
.
Mem‹y_SRAMMask
)Ë
Byã
;

323 
CPU
.
SRAMModifõd
 = 
TRUE
;

327 
CMem‹y
::
MAP_HIROM_SRAM
:

328 #ifde‡
VAR_CYCLES


329 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

331 i‡(
CPU
.
Mem‹y_SRAMMask
)

333 *(
Mem‹y
.
SRAM
 + (((
Addªss
 & 0x7fff) - 0x6000 +

334 ((
Addªss
 & 0xf0000Ë>> 3)Ë& 
CPU
.
Mem‹y_SRAMMask
)Ë
Byã
;

335 
CPU
.
SRAMModifõd
 = 
TRUE
;

339 
CMem‹y
::
MAP_BWRAM
:

340 #ifde‡
VAR_CYCLES


341 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

343 *(
Mem‹y
.
BWRAM
 + ((
Addªss
 & 0x7fffË- 0x6000)Ë
Byã
;

344 
CPU
.
SRAMModifõd
 = 
TRUE
;

347 
CMem‹y
::
MAP_DEBUG
:

348 #ifde‡
DEBUGGER


349 
	`¥ötf
 ("W(BË%06x\n", 
Addªss
);

352 
CMem‹y
::
MAP_SA1RAM
:

353 #ifde‡
VAR_CYCLES


354 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

356 *(
Mem‹y
.
SRAM
 + (
Addªss
 & 0xffff)Ë
Byã
;

357 
SA1
.
Executög
 = !SA1.
Waôög
;

360 
CMem‹y
::
MAP_C4
:

361 
	`S9xSëC4
 (
Byã
, 
Addªss
 & 0xffff);

365 
CMem‹y
::
MAP_NONE
:

366 #ifde‡
VAR_CYCLES


367 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

369 #ifde‡
DEBUGGER


370 
	`¥ötf
 ("W(BË%06x\n", 
Addªss
);

374 
	}
}

376 
INLINE
 
	$S9xSëW‹d
 (
uöt16
 
W‹d
, 
uöt32
 
Addªss
)

378 #ifde‡
__show_io__


379 
°r
[64];

380 
	`•rötf
(
°r
,"w∏@ %04X %04X",
Addªss
,
W‹d
);

381 
	`S9xMesßge
(0,0,
°r
);

382 
	`gp32_∑u£
();

384 #ifde‡
__memcheck__


385 
mem_check
+=
W‹d
;

387 #i‡
	`deföed
(
CPU_SHUTDOWN
)

388 
CPU
.
WaôAddªss
 = 
NULL
;

390 #i‡
	`deföed
 (
VAR_CYCLES
)

391 
block
;

392 
uöt8
 *
SëAddªss
 = 
Mem‹y
.
WrôeM≠
 [
block
 = ((
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
)];

394 
uöt8
 *
SëAddªss
 = 
Mem‹y
.
WrôeM≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

397 i‡(
SëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

399 #ifde‡
VAR_CYCLES


400 
CPU
.
Cy˛es
 +
Mem‹y
.
Mem‹yS≥ed
 [
block
] << 1;

402 #i‡
	`deföed
(
CPU_SHUTDOWN
Ë&& deföed(
USE_SA1
)

403 
uöt8
 *
SëAddªssSA1
 +
Addªss
 & 0xffff;

404 i‡(
SëAddªssSA1
 =
SA1
.
WaôByãAddªss1
 ||

405 
SëAddªssSA1
 =
SA1
.
WaôByãAddªss2
)

407 
SA1
.
Executög
 = SA1.
S9xOpcodes
 !
NULL
;

408 
SA1
.
WaôCou¡î
 = 0;

411 #ifde‡
FAST_LSB_WORD_ACCESS


412 *(
uöt16
 *Ë(
SëAddªss
 + (
Addªss
 & 0xffff)Ë
W‹d
;

414 *(
SëAddªss
 + (
Addªss
 & 0xffff)Ë(
uöt8
Ë
W‹d
;

415 *(
SëAddªss
 + ((
Addªss
 + 1Ë& 0xffff)Ë
W‹d
 >> 8;

420 (Ë
SëAddªss
)

422 
CMem‹y
::
MAP_PPU
:

423 #ifde‡
VAR_CYCLES


424 i‡(!
CPU
.
InDMA
)

425 
CPU
.
Cy˛es
 +
TWO_CYCLES
;

427 
	`S9xSëPPU
 ((
uöt8
Ë
W‹d
, 
Addªss
 & 0xffff);

428 
	`S9xSëPPU
 (
W‹d
 >> 8, (
Addªss
 & 0xffff) + 1);

431 
CMem‹y
::
MAP_CPU
:

432 #ifde‡
VAR_CYCLES


433 
CPU
.
Cy˛es
 +
TWO_CYCLES
;

435 
	`S9xSëCPU
 ((
uöt8
Ë
W‹d
, (
Addªss
 & 0xffff));

436 
	`S9xSëCPU
 (
W‹d
 >> 8, (
Addªss
 & 0xffff) + 1);

439 
CMem‹y
::
MAP_DSP
:

440 #ifde‡
VAR_CYCLES


441 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

443 
	`S9xSëDSP
 ((
uöt8
Ë
W‹d
, (
Addªss
 & 0xffff));

444 
	`S9xSëDSP
 (
W‹d
 >> 8, (
Addªss
 & 0xffff) + 1);

447 
CMem‹y
::
MAP_LOROM_SRAM
:

448 #ifde‡
VAR_CYCLES


449 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

451 i‡(
CPU
.
Mem‹y_SRAMMask
)

453 *(
Mem‹y
.
SRAM
 + (
Addªss
 & 
CPU
.
Mem‹y_SRAMMask
)Ë(
uöt8
Ë
W‹d
;

454 *(
Mem‹y
.
SRAM
 + ((
Addªss
 + 1Ë& 
CPU
.
Mem‹y_SRAMMask
)Ë
W‹d
 >> 8;

455 
CPU
.
SRAMModifõd
 = 
TRUE
;

459 
CMem‹y
::
MAP_HIROM_SRAM
:

460 #ifde‡
VAR_CYCLES


461 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

463 i‡(
CPU
.
Mem‹y_SRAMMask
)

465 *(
Mem‹y
.
SRAM
 +

466 (((
Addªss
 & 0x7fff) - 0x6000 +

467 ((
Addªss
 & 0xf0000Ë>> 
MEMMAP_SHIFT
Ë& 
CPU
.
Mem‹y_SRAMMask
))Ë(
uöt8
Ë
W‹d
;

468 *(
Mem‹y
.
SRAM
 +

469 ((((
Addªss
 + 1) & 0x7fff) - 0x6000 +

470 (((
Addªss
 + 1Ë& 0xf0000Ë>> 
MEMMAP_SHIFT
Ë& 
CPU
.
Mem‹y_SRAMMask
))Ë(
uöt8
Ë(
W‹d
 >> 8);

471 
CPU
.
SRAMModifõd
 = 
TRUE
;

475 
CMem‹y
::
MAP_BWRAM
:

476 #ifde‡
VAR_CYCLES


477 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

479 *(
Mem‹y
.
BWRAM
 + ((
Addªss
 & 0x7fffË- 0x6000)Ë(
uöt8
Ë
W‹d
;

480 *(
Mem‹y
.
BWRAM
 + (((
Addªss
 + 1Ë& 0x7fffË- 0x6000)Ë(
uöt8
Ë(
W‹d
 >> 8);

481 
CPU
.
SRAMModifõd
 = 
TRUE
;

484 
CMem‹y
::
MAP_DEBUG
:

485 #ifde‡
DEBUGGER


486 
	`¥ötf
 ("W(WË%06x\n", 
Addªss
);

489 
CMem‹y
::
MAP_SA1RAM
:

490 #ifde‡
VAR_CYCLES


491 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
;

493 *(
Mem‹y
.
SRAM
 + (
Addªss
 & 0xffff)Ë(
uöt8
Ë
W‹d
;

494 *(
Mem‹y
.
SRAM
 + ((
Addªss
 + 1Ë& 0xffff)Ë(
uöt8
Ë(
W‹d
 >> 8);

495 
SA1
.
Executög
 = !SA1.
Waôög
;

498 
CMem‹y
::
MAP_C4
:

499 
	`S9xSëC4
 (
W‹d
 & 0xff, 
Addªss
 & 0xffff);

500 
	`S9xSëC4
 ((
uöt8
Ë(
W‹d
 >> 8), (
Addªss
 + 1) & 0xffff);

504 
CMem‹y
::
MAP_NONE
:

505 #ifde‡
VAR_CYCLES


506 
CPU
.
Cy˛es
 +
SLOW_ONE_CYCLE
 * 2;

508 #ifde‡
DEBUGGER


509 
	`¥ötf
 ("W(WË%06x\n", 
Addªss
);

513 
	}
}

515 
INLINE
 
uöt8
 *
	$GëBa£Poöãr
 (
uöt32
 
Addªss
)

517 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

518 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

519  (
GëAddªss
);

521 (Ë
GëAddªss
)

523 
CMem‹y
::
MAP_PPU
:

524  (
Mem‹y
.
FûlRAM
 - 0x2000);

525 
CMem‹y
::
MAP_CPU
:

526  (
Mem‹y
.
FûlRAM
 - 0x4000);

527 
CMem‹y
::
MAP_DSP
:

528  (
Mem‹y
.
FûlRAM
 - 0x6000);

529 
CMem‹y
::
MAP_SA1RAM
:

530 
CMem‹y
::
MAP_LOROM_SRAM
:

531  (
Mem‹y
.
SRAM
);

532 
CMem‹y
::
MAP_BWRAM
:

533  (
Mem‹y
.
BWRAM
 - 0x6000);

534 
CMem‹y
::
MAP_HIROM_SRAM
:

535  (
Mem‹y
.
SRAM
 - 0x6000);

537 
CMem‹y
::
MAP_C4
:

538  (
Mem‹y
.
C4RAM
 - 0x6000);

540 
CMem‹y
::
MAP_DEBUG
:

541 #ifde‡
DEBUGGER


542 
	`¥ötf
 ("GBP %06x\n", 
Addªss
);

546 
CMem‹y
::
MAP_NONE
:

547 #ifde‡
DEBUGGER


548 
	`¥ötf
 ("GBP %06x\n", 
Addªss
);

552 
	}
}

554 
INLINE
 
uöt8
 *
	$S9xGëMemPoöãr
 (
uöt32
 
Addªss
)

556 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

557 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

558  (
GëAddªss
 + (
Addªss
 & 0xffff));

560 (Ë
GëAddªss
)

562 
CMem‹y
::
MAP_PPU
:

563  (
Mem‹y
.
FûlRAM
 - 0x2000 + (
Addªss
 & 0xffff));

564 
CMem‹y
::
MAP_CPU
:

565  (
Mem‹y
.
FûlRAM
 - 0x4000 + (
Addªss
 & 0xffff));

566 
CMem‹y
::
MAP_DSP
:

567  (
Mem‹y
.
FûlRAM
 - 0x6000 + (
Addªss
 & 0xffff));

568 
CMem‹y
::
MAP_SA1RAM
:

569 
CMem‹y
::
MAP_LOROM_SRAM
:

570  (
Mem‹y
.
SRAM
 + (
Addªss
 & 0xffff));

571 
CMem‹y
::
MAP_BWRAM
:

572  (
Mem‹y
.
BWRAM
 - 0x6000 + (
Addªss
 & 0xffff));

573 
CMem‹y
::
MAP_HIROM_SRAM
:

574  (
Mem‹y
.
SRAM
 - 0x6000 + (
Addªss
 & 0xffff));

576 
CMem‹y
::
MAP_C4
:

577  (
Mem‹y
.
C4RAM
 - 0x6000 + (
Addªss
 & 0xffff));

579 
CMem‹y
::
MAP_DEBUG
:

580 #ifde‡
DEBUGGER


581 
	`¥ötf
 ("GMP %06x\n", 
Addªss
);

584 
CMem‹y
::
MAP_NONE
:

585 #ifde‡
DEBUGGER


586 
	`¥ötf
 ("GMP %06x\n", 
Addªss
);

590 
	}
}

592 
INLINE
 
	$S9xSëPCBa£
 (
uöt32
 
Addªss
)

594 #ifde‡
VAR_CYCLES


595 
block
;

596 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [
block
 = (
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

598 
uöt8
 *
GëAddªss
 = 
Mem‹y
.
M≠
 [(
Addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

600 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

602 #ifde‡
VAR_CYCLES


603 
CPU
.
MemS≥ed
 = 
Mem‹y
.
Mem‹yS≥ed
 [
block
];

604 
CPU
.
MemS≥edx2
 = CPU.
MemS≥ed
 << 1;

606 
CPU
.
PCBa£
 = 
GëAddªss
;

607 
CPU
.
PC
 = 
GëAddªss
 + (
Addªss
 & 0xffff);

611 (Ë
GëAddªss
)

613 
CMem‹y
::
MAP_PPU
:

614 #ifde‡
VAR_CYCLES


615 
CPU
.
MemS≥ed
 = 
ONE_CYCLE
;

616 
CPU
.
MemS≥edx2
 = 
TWO_CYCLES
;

618 
CPU
.
PCBa£
 = 
Mem‹y
.
FûlRAM
 - 0x2000;

619 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

622 
CMem‹y
::
MAP_CPU
:

623 #ifde‡
VAR_CYCLES


624 
CPU
.
MemS≥ed
 = 
ONE_CYCLE
;

625 
CPU
.
MemS≥edx2
 = 
TWO_CYCLES
;

627 
CPU
.
PCBa£
 = 
Mem‹y
.
FûlRAM
 - 0x4000;

628 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

631 
CMem‹y
::
MAP_DSP
:

632 #ifde‡
VAR_CYCLES


633 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

634 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

636 
CPU
.
PCBa£
 = 
Mem‹y
.
FûlRAM
 - 0x6000;

637 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

640 
CMem‹y
::
MAP_SA1RAM
:

641 
CMem‹y
::
MAP_LOROM_SRAM
:

642 #ifde‡
VAR_CYCLES


643 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

644 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

646 
CPU
.
PCBa£
 = 
Mem‹y
.
SRAM
;

647 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

650 
CMem‹y
::
MAP_BWRAM
:

651 #ifde‡
VAR_CYCLES


652 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

653 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

655 
CPU
.
PCBa£
 = 
Mem‹y
.
BWRAM
 - 0x6000;

656 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

658 
CMem‹y
::
MAP_HIROM_SRAM
:

659 #ifde‡
VAR_CYCLES


660 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

661 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

663 
CPU
.
PCBa£
 = 
Mem‹y
.
SRAM
 - 0x6000;

664 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

667 
CMem‹y
::
MAP_C4
:

668 #ifde‡
VAR_CYCLES


669 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

670 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

672 
CPU
.
PCBa£
 = 
Mem‹y
.
C4RAM
 - 0x6000;

673 
CPU
.
PC
 = CPU.
PCBa£
 + (
Addªss
 & 0xffff);

676 
CMem‹y
::
MAP_DEBUG
:

677 #ifde‡
DEBUGGER


678 
	`¥ötf
 ("SBP %06x\n", 
Addªss
);

682 
CMem‹y
::
MAP_NONE
:

683 #ifde‡
VAR_CYCLES


684 
CPU
.
MemS≥ed
 = 
SLOW_ONE_CYCLE
;

685 
CPU
.
MemS≥edx2
 = 
SLOW_ONE_CYCLE
 * 2;

687 #ifde‡
DEBUGGER


688 
	`¥ötf
 ("SBP %06x\n", 
Addªss
);

690 
CPU
.
PCBa£
 = 
Mem‹y
.
SRAM
;

691 
CPU
.
PC
 = 
Mem‹y
.
SRAM
 + (
Addªss
 & 0xffff);

694 
	}
}

	@gfx.cpp

41 
	~"¢es9x.h
"

43 
	~"memm≠.h
"

44 
	~"µu.h
"

45 
	~"˝uexec.h
"

46 
	~"di•œy.h
"

47 
	~"gfx.h
"

48 
	~"≠u.h
"

49 
	~"chóts.h
"

50 
	~<°döt.h
>

54 #ifde‡
__˝lu•lus


57 
mem˝y16
(*
de°
, *
§c
, 
cou¡
);

58 
mem˝y16bsw≠
(*
de°
, *
§c
, 
cou¡
);

59 
mem˝y32
(
uöt32_t
 *
de°
, uöt32_à*
§c
, 
cou¡
);

60 
mem£t32
(
uöt32_t
 *
de°
, 
c
, 
cou¡
);

61 #ifde‡
__˝lu•lus


65 
	#M7
 19

	)

66 
	#M8
 19

	)

68 
CompuãClùWödows
 ();

69 
S9xDi•œyFømeR©e
 ();

70 
S9xDi•œySåög
 (c⁄° *
°rög
);

72 
uöt8
 
BôShi·s
[8][4];

73 
uöt8
 
TûeShi·s
[8][4];

74 
uöt8
 
PÆëãShi·s
[8][4];

75 
uöt8
 
PÆëãMasks
[8][4];

76 
uöt8
 
Dïths
[8][4];

77 
uöt8
 
BGSizes
 [2];

79 
N‹mÆTûeRídîî
 
DøwTûePå
;

80 
Clù≥dTûeRídîî
 
DøwClù≥dTûePå
;

81 
N‹mÆTûeRídîî
 
DøwHiResTûePå
;

82 
Clù≥dTûeRídîî
 
DøwHiResClù≥dTûePå
;

83 
L¨gePixñRídîî
 
DøwL¨gePixñPå
;

85 
SBG
 
BG
;

87 
SLöeD©a
 
LöeD©a
[240];

88 
SLöeM©rixD©a
 
LöeM©rixD©a
 [240];

90 
uöt8
 
Mode7Dïths
 [2];

92 
	#ON_MAIN
(
N
) \

93 (
GFX
.
r212c
 & (1 << (
N
)) && \

94 !(
PPU
.
BG_F‹˚d
 & (1 << (
N
))))

	)

96 
	#SUB_OR_ADD
(
N
) \

97 (
GFX
.
r2131
 & (1 << (
N
)))

	)

99 
	#ON_SUB
(
N
) \

100 ((
GFX
.
r2130
 & 0x30) != 0x30 && \

101 (
GFX
.
r2130
 & 2) && \

102 (
GFX
.
r212d
 & (1 << 
N
)) && \

103 !(
PPU
.
BG_F‹˚d
 & (1 << (
N
))))

	)

105 
	#ANYTHING_ON_SUB
 \

106 ((
GFX
.
r2130
 & 0x30) != 0x30 && \

107 (
GFX
.
r2130
 & 2) && \

108 (
GFX
.
r212d
 & 0x1f))

	)

110 
	#ADD_OR_SUB_ON_ANYTHING
 \

111 (
GFX
.
r2131
 & 0x3f)

	)

113 
	#BLACK
 
	`BUILD_PIXEL
(0,0,0)

	)

115 
DøwTûe
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

116 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

117 
DøwClù≥dTûe
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

118 
uöt32
 
SèπPixñ
, uöt32 
Width
,

119 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

120 
DøwTûex2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

121 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

122 
DøwClù≥dTûex2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

123 
uöt32
 
SèπPixñ
, uöt32 
Width
,

124 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

125 
DøwTûex2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

126 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

127 
DøwClù≥dTûex2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

128 
uöt32
 
SèπPixñ
, uöt32 
Width
,

129 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

130 
DøwL¨gePixñ
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

131 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

132 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

134 
DøwTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

135 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

136 
DøwClù≥dTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

137 
uöt32
 
SèπPixñ
, uöt32 
Width
,

138 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

139 
DøwTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

140 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

141 
DøwClù≥dTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

142 
uöt32
 
SèπPixñ
, uöt32 
Width
,

143 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

144 
DøwTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

145 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

146 
DøwClù≥dTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

147 
uöt32
 
SèπPixñ
, uöt32 
Width
,

148 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

149 
DøwL¨gePixñ16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

150 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

151 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

153 
DøwTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

154 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

156 
DøwClù≥dTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

157 
uöt32
 
SèπPixñ
, uöt32 
Width
,

158 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

160 
DøwTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

161 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

163 
DøwClù≥dTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

164 
uöt32
 
SèπPixñ
, uöt32 
Width
,

165 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

167 
DøwTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

168 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

170 
DøwClù≥dTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

171 
uöt32
 
SèπPixñ
, uöt32 
Width
,

172 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

174 
DøwTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

175 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

177 
DøwClù≥dTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

178 
uöt32
 
SèπPixñ
, uöt32 
Width
,

179 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

181 
DøwTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

182 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

184 
DøwClù≥dTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

185 
uöt32
 
SèπPixñ
, uöt32 
Width
,

186 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

188 
DøwTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

189 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
);

191 
DøwClù≥dTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

192 
uöt32
 
SèπPixñ
, uöt32 
Width
,

193 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

195 
DøwL¨gePixñ16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

196 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

197 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

199 
DøwL¨gePixñ16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

200 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

201 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

203 
DøwL¨gePixñ16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

204 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

205 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

207 
DøwL¨gePixñ16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

208 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

209 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

211 
DøwHiResClù≥dTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

212 
uöt32
 
SèπPixñ
, uöt32 
Width
,

213 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

215 
DøwHiResTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

216 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
);

218 
boﬁ8_32
 
	$S9xGøphicsInô
 ()

220 
uöt32
 
PixñOdd
 = 1;

221 
uöt32
 
PixñEví
 = 2;

223 #ifde‡
GFX_MULTI_FORMAT


224 i‡(
GFX
.
BuûdPixñ
 =
NULL
)

225 
	`S9xSëRídîPixñF‹m©
 (
RGB565
);

228 
uöt8
 
bôshi·
 = 0; bitshift < 4; bitshift++)

230 
i
 = 0; i < 16; i++)

232 
uöt32
 
h
 = 0;

233 
uöt32
 
l
 = 0;

235 #i‡
	`deföed
(
LSB_FIRST
)

236 i‡(
i
 & 8)

237 
h
 |
PixñOdd
;

238 i‡(
i
 & 4)

239 
h
 |
PixñOdd
 << 8;

240 i‡(
i
 & 2)

241 
h
 |
PixñOdd
 << 16;

242 i‡(
i
 & 1)

243 
h
 |
PixñOdd
 << 24;

244 i‡(
i
 & 8)

245 
l
 |
PixñOdd
;

246 i‡(
i
 & 4)

247 
l
 |
PixñOdd
 << 8;

248 i‡(
i
 & 2)

249 
l
 |
PixñOdd
 << 16;

250 i‡(
i
 & 1)

251 
l
 |
PixñOdd
 << 24;

253 i‡(
i
 & 8)

254 
h
 |(
PixñOdd
 << 24);

255 i‡(
i
 & 4)

256 
h
 |(
PixñOdd
 << 16);

257 i‡(
i
 & 2)

258 
h
 |(
PixñOdd
 << 8);

259 i‡(
i
 & 1)

260 
h
 |
PixñOdd
;

261 i‡(
i
 & 8)

262 
l
 |(
PixñOdd
 << 24);

263 i‡(
i
 & 4)

264 
l
 |(
PixñOdd
 << 16);

265 i‡(
i
 & 2)

266 
l
 |(
PixñOdd
 << 8);

267 i‡(
i
 & 1)

268 
l
 |
PixñOdd
;

271 
odd_high
[
bôshi·
][
i
] = 
h
;

272 
odd_low
[
bôshi·
][
i
] = 
l
;

273 
h
 = 
l
 = 0;

275 #i‡
	`deföed
(
LSB_FIRST
)

276 i‡(
i
 & 8)

277 
h
 |
PixñEví
;

278 i‡(
i
 & 4)

279 
h
 |
PixñEví
 << 8;

280 i‡(
i
 & 2)

281 
h
 |
PixñEví
 << 16;

282 i‡(
i
 & 1)

283 
h
 |
PixñEví
 << 24;

284 i‡(
i
 & 8)

285 
l
 |
PixñEví
;

286 i‡(
i
 & 4)

287 
l
 |
PixñEví
 << 8;

288 i‡(
i
 & 2)

289 
l
 |
PixñEví
 << 16;

290 i‡(
i
 & 1)

291 
l
 |
PixñEví
 << 24;

293 i‡(
i
 & 8)

294 
h
 |(
PixñEví
 << 24);

295 i‡(
i
 & 4)

296 
h
 |(
PixñEví
 << 16);

297 i‡(
i
 & 2)

298 
h
 |(
PixñEví
 << 8);

299 i‡(
i
 & 1)

300 
h
 |
PixñEví
;

301 i‡(
i
 & 8)

302 
l
 |(
PixñEví
 << 24);

303 i‡(
i
 & 4)

304 
l
 |(
PixñEví
 << 16);

305 i‡(
i
 & 2)

306 
l
 |(
PixñEví
 << 8);

307 i‡(
i
 & 1)

308 
l
 |
PixñEví
;

311 
eví_high
[
bôshi·
][
i
] = 
h
;

312 
eví_low
[
bôshi·
][
i
] = 
l
;

314 
PixñEví
 <<= 2;

315 
PixñOdd
 <<= 2;

318 
GFX
.
RólPôch
 = GFX.
Pôch2
 = GFX.
Pôch
;

319 
GFX
.
ZPôch
 = GFX.
Pôch
;

320 i‡(
Sëtögs
.
SixãíBô
)

321 
GFX
.
ZPôch
 >>= 1;

322 
GFX
.
Dñè
 = (GFX.
SubS¸ìn
 - GFX.
S¸ìn
) >> 1;

323 
GFX
.
DïthDñè
 = GFX.
SubZBuf„r
 - GFX.
ZBuf„r
;

327 
PPU
.
BG_F‹˚d
 = 0;

328 
IPPU
.
OBJCh™ged
 = 
TRUE
;

329 i‡(
Sëtögs
.
Tøn•¨ícy
)

330 
Sëtögs
.
SixãíBô
 = 
TRUE
;

332 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
TRUE
;

333 
GFX
.
PixSize
 = 1;

334 i‡(
Sëtögs
.
SixãíBô
)

336 
DøwTûePå
 = 
DøwTûe16
;

337 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16
;

338 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ16
;

339 
DøwHiResTûePå

DøwHiResTûe16
;

340 
DøwHiResClù≥dTûePå
 = 
DøwHiResClù≥dTûe16
;

341 
GFX
.
PPL
 = GFX.
Pôch
 >> 1;

342 
GFX
.
PPLx2
 = GFX.
Pôch
;

346 
DøwTûePå
 = 
DøwTûe
;

347 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe
;

348 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ
;

349 
DøwHiResTûePå
 = 
DøwTûe
;

350 
DøwHiResClù≥dTûePå
 = 
DøwClù≥dTûe
;

351 
GFX
.
PPL
 = GFX.
Pôch
;

352 
GFX
.
PPLx2
 = GFX.
Pôch
 * 2;

354 
	`S9xFixCﬁourBrighäess
 ();

356 i‡(
Sëtögs
.
SixãíBô
)

358 i‡(!(
GFX
.
X2
 = (
uöt16
 *Ë
	`mÆloc
 ( (uint16) * 0x10000)))

359  (
FALSE
);

361 i‡(!(
GFX
.
ZERO_OR_X2
 = (
uöt16
 *Ë
	`mÆloc
 ( (uint16) * 0x10000)) ||

362 !(
GFX
.
ZERO
 = (
uöt16
 *Ë
	`mÆloc
 ( (uint16) * 0x10000)))

364 i‡(
GFX
.
ZERO_OR_X2
)

366 
	`‰ì
 ((*Ë
GFX
.
ZERO_OR_X2
);

367 
GFX
.
ZERO_OR_X2
 = 
NULL
;

369 i‡(
GFX
.
X2
)

371 
	`‰ì
 ((*Ë
GFX
.
X2
);

372 
GFX
.
X2
 = 
NULL
;

374  (
FALSE
);

376 
uöt32
 
r
, 
g
, 
b
;

380 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

382 
uöt32
 
r2
 = 
r
 << 1;

383 i‡(
r2
 > 
MAX_RED
)

384 
r2
 = 
MAX_RED
;

385 
g
 = 0; g <
MAX_GREEN
; g++)

387 
uöt32
 
g2
 = 
g
 << 1;

388 i‡(
g2
 > 
MAX_GREEN
)

389 
g2
 = 
MAX_GREEN
;

390 
b
 = 0; b <
MAX_BLUE
; b++)

392 
uöt32
 
b2
 = 
b
 << 1;

393 i‡(
b2
 > 
MAX_BLUE
)

394 
b2
 = 
MAX_BLUE
;

395 
GFX
.
X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

396 
GFX
.
X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

400 
	`ZîoMem‹y
 (
GFX
.
ZERO
, 0x10000 *  (
uöt16
));

401 
	`ZîoMem‹y
 (
GFX
.
ZERO_OR_X2
, 0x10000 *  (
uöt16
));

406 #i‡
	`deföed
(
OLD_COLOUR_BLENDING
)

407 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

409 
uöt32
 
r2
 = 
r
;

410 i‡((
r2
 & 0x10) == 0)

411 
r2
 = 0;

413 
r2
 = (r2 << 1Ë& 
MAX_RED
;

415 
g
 = 0; g <
MAX_GREEN
; g++)

417 
uöt32
 
g2
 = 
g
;

418 i‡((
g2
 & 
GREEN_HI_BIT
) == 0)

419 
g2
 = 0;

421 
g2
 = (g2 << 1Ë& 
MAX_GREEN
;

423 
b
 = 0; b <
MAX_BLUE
; b++)

425 
uöt32
 
b2
 = 
b
;

426 i‡((
b2
 & 0x10) == 0)

427 
b2
 = 0;

429 
b2
 = (b2 << 1Ë& 
MAX_BLUE
;

431 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

432 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

437 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

439 
uöt32
 
r2
 = 
r
;

440 i‡((
r2
 & 0x10) == 0)

441 
r2
 = 0;

443 
r2
 = (r2 << 1Ë& 
MAX_RED
;

445 i‡(
r2
 == 0)

446 
r2
 = 1;

447 
g
 = 0; g <
MAX_GREEN
; g++)

449 
uöt32
 
g2
 = 
g
;

450 i‡((
g2
 & 
GREEN_HI_BIT
) == 0)

451 
g2
 = 0;

453 
g2
 = (g2 << 1Ë& 
MAX_GREEN
;

455 i‡(
g2
 == 0)

456 
g2
 = 1;

457 
b
 = 0; b <
MAX_BLUE
; b++)

459 
uöt32
 
b2
 = 
b
;

460 i‡((
b2
 & 0x10) == 0)

461 
b2
 = 0;

463 
b2
 = (b2 << 1Ë& 
MAX_BLUE
;

465 i‡(
b2
 == 0)

466 
b2
 = 1;

467 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

468 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

476 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

478 
uöt32
 
r2
 = 
r
;

479 i‡((
r2
 & 0x10) == 0)

480 
r2
 = 0;

482 
r2
 &= ~0x10;

484 
g
 = 0; g <
MAX_GREEN
; g++)

486 
uöt32
 
g2
 = 
g
;

487 i‡((
g2
 & 
GREEN_HI_BIT
) == 0)

488 
g2
 = 0;

490 
g2
 &~
GREEN_HI_BIT
;

491 
b
 = 0; b <
MAX_BLUE
; b++)

493 
uöt32
 
b2
 = 
b
;

494 i‡((
b2
 & 0x10) == 0)

495 
b2
 = 0;

497 
b2
 &= ~0x10;

499 
GFX
.
ZERO
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

500 
GFX
.
ZERO
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

507 
GFX
.
X2
 = 
NULL
;

508 
GFX
.
ZERO_OR_X2
 = 
NULL
;

509 
GFX
.
ZERO
 = 
NULL
;

512  (
TRUE
);

513 
	}
}

515 
	$S9xGøphicsDeöô
 ()

518 i‡(
GFX
.
X2
)

520 
	`‰ì
 ((*Ë
GFX
.
X2
);

521 
GFX
.
X2
 = 
NULL
;

523 i‡(
GFX
.
ZERO_OR_X2
)

525 
	`‰ì
 ((*Ë
GFX
.
ZERO_OR_X2
);

526 
GFX
.
ZERO_OR_X2
 = 
NULL
;

528 i‡(
GFX
.
ZERO
)

530 
	`‰ì
 ((*Ë
GFX
.
ZERO
);

531 
GFX
.
ZERO
 = 
NULL
;

533 
	}
}

535 
	$S9xBuûdDúe˘CﬁourM≠s
 ()

537 
uöt32
 
p
 = 0;Ö < 8;Ö++)

539 
uöt32
 
c
 = 0; c < 256; c++)

542 
Dúe˘CﬁourM≠s
 [
p
][
c
] = 
	`BUILD_PIXEL
 (((c & 7) << 2) | ((p & 1) << 1),

543 ((
c
 & 0x38Ë>> 1Ë| (
p
 & 2),

544 ((
c
 & 0xc0Ë>> 3Ë| (
p
 & 4));

547 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
FALSE
;

548 
	}
}

550 
	$S9xSèπS¸ìnRe‰esh
 ()

552 i‡(
GFX
.
InfoSåögTimeout
 > 0 && --GFX.InfoStringTimeout == 0)

553 
GFX
.
InfoSåög
 = 
NULL
;

555 i‡(
IPPU
.
RídîThisFøme
)

557 #i‚de‡
_SNESPPC


558 i‡(!
	`S9xInôUpd©e
 ())

560 
IPPU
.
RídîThisFøme
 = 
FALSE
;

564 
IPPU
.
RídîedFømesCou¡
++;

565 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
 = 0;

566 
IPPU
.
MaxBrighäess
 = 
PPU
.
Brighäess
;

567 
IPPU
.
L©chedBœnkög
 = 
PPU
.
F‹˚dBœnkög
;

568 
IPPU
.
L©chedI¡îœ˚
 = (
Mem‹y
.
FûlRAM
[0x2133] & 1);

569 
IPPU
.
RídîedS¸ìnWidth
 = 256;

570 
IPPU
.
RídîedS¸ìnHeight
 = 
PPU
.
S¸ìnHeight
;

571 
IPPU
.
DoubÀWidthPixñs
 = 
FALSE
;

572 
GFX
.
Pôch2
 = GFX.
Pôch
 = GFX.
RólPôch
;

573 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

574 
GFX
.
ZPôch
 = GFX.
RólPôch
;

575 i‡(
Sëtögs
.
SixãíBô
)

576 
GFX
.
ZPôch
 >>= 1;

577 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

578 
GFX
.
DïthDñè
 = GFX.
SubZBuf„r
 - GFX.
ZBuf„r
;

579 
GFX
.
Dñè
 = (GFX.
SubS¸ìn
 - GFX.
S¸ìn
) >> 1;

581 i‡(++
IPPU
.
FømeCou¡
 % 
Mem‹y
.
ROMFømesPîSec⁄d
 == 0)

583 
IPPU
.
Di•œyedRídîedFømeCou¡
 = IPPU.
RídîedFømesCou¡
;

584 
IPPU
.
RídîedFømesCou¡
 = 0;

585 
IPPU
.
FømeCou¡
 = 0;

587 
	}
}

589 
	$RídîLöe
 (
uöt8
 
C
)

591 i‡(
IPPU
.
RídîThisFøme
)

594 
LöeD©a
[
C
].
BG
[0].
VOff£t
 = 
PPU
.BG[0].VOffset + 1;

595 
LöeD©a
[
C
].
BG
[0].
HOff£t
 = 
PPU
.BG[0].HOffset;

596 
LöeD©a
[
C
].
BG
[1].
VOff£t
 = 
PPU
.BG[1].VOffset + 1;

597 
LöeD©a
[
C
].
BG
[1].
HOff£t
 = 
PPU
.BG[1].HOffset;

599 i‡(
PPU
.
BGMode
 == 7)

601 
SLöeM©rixD©a
 *
p
 = &
LöeM©rixD©a
 [
C
];

602 
p
->
M©rixA
 = 
PPU
.MatrixA;

603 
p
->
M©rixB
 = 
PPU
.MatrixB;

604 
p
->
M©rixC
 = 
PPU
.MatrixC;

605 
p
->
M©rixD
 = 
PPU
.MatrixD;

606 
p
->
CíåeX
 = 
PPU
.CentreX;

607 
p
->
CíåeY
 = 
PPU
.CentreY;

611 #i‚de‡
RC_OPTIMIZED


612 i‡(
Sëtögs
.
SèrfoxHack
 && 
PPU
.
BG
[2].
VOff£t
 == 0 &&

613 
PPU
.
BG
[2].
HOff£t
 == 0xe000)

615 
LöeD©a
[
C
].
BG
[2].
VOff£t
 = 0xe1;

616 
LöeD©a
[
C
].
BG
[2].
HOff£t
 = 0;

622 
LöeD©a
[
C
].
BG
[2].
VOff£t
 = 
PPU
.BG[2].VOffset + 1;

623 
LöeD©a
[
C
].
BG
[2].
HOff£t
 = 
PPU
.BG[2].HOffset;

624 
LöeD©a
[
C
].
BG
[3].
VOff£t
 = 
PPU
.BG[3].VOffset + 1;

625 
LöeD©a
[
C
].
BG
[3].
HOff£t
 = 
PPU
.BG[3].HOffset;

629 
IPPU
.
CuºítLöe
 = 
C
 + 1;

631 
	}
}

634 
	$S9xEndS¸ìnRe‰esh
()

636 
IPPU
.
HDMASèπed
 = 
FALSE
;

639 i‡(
IPPU
.
RídîThisFøme
)

641 
	`FLUSH_REDRAW
 ();

642 i‡(
IPPU
.
Cﬁ‹sCh™ged
)

644 
uöt32
 
ßved
 = 
PPU
.
CGDATA
[0];

645 i‡(!
Sëtögs
.
SixãíBô
)

649 i‡(!(
Mem‹y
.
FûlRAM
 [0x2131] & 0x80) &&

650 (
Mem‹y
.
FûlRAM
[0x2131] & 0x20) &&

651 (
PPU
.
FixedCﬁourRed
 || PPU.
FixedCﬁourGªí
 ||

652 
PPU
.
FixedCﬁourBlue
))

654 
PPU
.
CGDATA
[0] = PPU.
FixedCﬁourRed
 |

655 (
PPU
.
FixedCﬁourGªí
 << 5) |

656 (
PPU
.
FixedCﬁourBlue
 << 10);

659 
IPPU
.
Cﬁ‹sCh™ged
 = 
FALSE
;

661 
	`S9xSëPÆëã
 ();

663 
PPU
.
CGDATA
[0] = 
ßved
;

665 
GFX
.
Pôch
 = GFX.
Pôch2
 = GFX.
RólPôch
;

666 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

668 i‡(
Sëtögs
.
Di•œyFømeR©e
)

669 
	`S9xDi•œyFømeR©e
 ();

670 i‡(
GFX
.
InfoSåög
)

671 
	`S9xDi•œySåög
 (
GFX
.
InfoSåög
);

673 
	`S9xDeöôUpd©e
 (
IPPU
.
RídîedS¸ìnWidth
, IPPU.
RídîedS¸ìnHeight
,

674 
Sëtögs
.
SixãíBô
);

676 #i‚de‡
RC_OPTIMIZED


677 
	`S9xAµlyChóts
 ();

681 #ifde‡
DEBUGGER


682 i‡(
CPU
.
Fœgs
 & 
FRAME_ADVANCE_FLAG
)

684 i‡(
ICPU
.
FømeAdv™˚Cou¡
)

686 
ICPU
.
FømeAdv™˚Cou¡
--;

687 
IPPU
.
RídîThisFøme
 = 
TRUE
;

688 
IPPU
.
FømeSkù
 = 0;

692 
CPU
.
Fœgs
 &~
FRAME_ADVANCE_FLAG
;

693 
CPU
.
Fœgs
 |
DEBUG_MODE_FLAG
;

716 
	}
}

718 
	$S9xSëInfoSåög
 (c⁄° *
°rög
)

720 
GFX
.
InfoSåög
 = 
°rög
;

721 
GFX
.
InfoSåögTimeout
 = 120;

722 
	}
}

724 
INLINE
 
	$Sñe˘TûeRídîî
 (
boﬁ8_32
 
n‹mÆ
)

726 i‡(
n‹mÆ
)

728 
DøwTûePå
 = 
DøwTûe16
;

729 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16
;

730 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ16
;

734 i‡(
GFX
.
r2131
 & 0x80)

736 i‡(
GFX
.
r2131
 & 0x40)

738 i‡(
GFX
.
r2130
 & 2)

740 
DøwTûePå
 = 
DøwTûe16Sub1_2
;

741 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16Sub1_2
;

746 
DøwTûePå
 = 
DøwTûe16FixedSub1_2
;

747 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16FixedSub1_2
;

749 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ16Sub1_2
;

753 
DøwTûePå
 = 
DøwTûe16Sub
;

754 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16Sub
;

755 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ16Sub
;

760 i‡(
GFX
.
r2131
 & 0x40)

762 i‡(
GFX
.
r2130
 & 2)

764 
DøwTûePå
 = 
DøwTûe16Add1_2
;

765 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16Add1_2
;

770 
DøwTûePå
 = 
DøwTûe16FixedAdd1_2
;

771 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16FixedAdd1_2
;

773 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ16Add1_2
;

777 
DøwTûePå
 = 
DøwTûe16Add
;

778 
DøwClù≥dTûePå
 = 
DøwClù≥dTûe16Add
;

779 
DøwL¨gePixñPå
 = 
DøwL¨gePixñ16Add
;

783 
	}
}

785 
	$S9xSëupOBJ
 ()

787 
SmÆlSize
;

788 
L¨geSize
;

790 
PPU
.
OBJSizeSñe˘
)

793 
SmÆlSize
 = 8;

794 
L¨geSize
 = 16;

797 
SmÆlSize
 = 8;

798 
L¨geSize
 = 32;

801 
SmÆlSize
 = 8;

802 
L¨geSize
 = 64;

805 
SmÆlSize
 = 16;

806 
L¨geSize
 = 32;

809 
SmÆlSize
 = 16;

810 
L¨geSize
 = 64;

814 
SmÆlSize
 = 32;

815 
L¨geSize
 = 64;

819 
C
 = 0;

821 
Fú°S¥ôe
 = 
PPU
.FirstSprite & 0x7f;

822 
S
 = 
Fú°S¥ôe
;

825 
Size
;

826 i‡(
PPU
.
OBJ
 [
S
].
Size
)

827 
Size
 = 
L¨geSize
;

829 
Size
 = 
SmÆlSize
;

831 
VPos
 = 
PPU
.
OBJ
 [
S
].VPos;

833 i‡(
VPos
 >
PPU
.
S¸ìnHeight
)

834 
VPos
 -= 256;

835 i‡(
PPU
.
OBJ
 [
S
].
HPos
 < 256 && PPU.OBJ [S].HPo†> -
Size
 &&

836 
VPos
 < 
PPU
.
S¸ìnHeight
 && VPo†> -
Size
)

838 
GFX
.
OBJLi°
 [
C
++] = 
S
;

839 
GFX
.
Sizes
[
S
] = 
Size
;

840 
GFX
.
VPosôi⁄s
[
S
] = 
VPos
;

842 
S
 = (S + 1) & 0x7f;

843 } 
S
 !
Fú°S¥ôe
);

846 
GFX
.
OBJLi°
 [
C
] = -1;

847 
IPPU
.
OBJCh™ged
 = 
FALSE
;

848 
	}
}

850 
	$DøwOBJS
 (
boﬁ8_32
 
OnMaö
 = 
FALSE
, 
uöt8
 
D
 = 0)

852 
uöt32
 
O
;

853 
uöt32
 
Ba£Tûe
, 
Tûe
;

855 
	`CHECK_SOUND
();

857 
BG
.
BôShi·
 = 4;

858 
BG
.
TûeShi·
 = 5;

859 
BG
.
TûeAddªss
 = 
PPU
.
OBJNameBa£
;

860 
BG
.
SèπPÆëã
 = 128;

861 
BG
.
PÆëãShi·
 = 4;

862 
BG
.
PÆëãMask
 = 7;

863 
BG
.
Buf„r
 = 
IPPU
.
TûeCache
 [
TILE_4BIT
];

864 
BG
.
Buf„ªd
 = 
IPPU
.
TûeCached
 [
TILE_4BIT
];

865 
BG
.
NameSñe˘
 = 
PPU
.
OBJNameSñe˘
;

866 
BG
.
Dúe˘CﬁourMode
 = 
FALSE
;

868 
GFX
.
PixSize
 = 1;

870 
GFX
.
Z1
 = 
D
 + 2;

872 
I
 = 0;

873 
S
 = 
GFX
.
OBJLi°
 [
I
++]; S >= 0; S = GFX.OBJList [I++])

875 
VPos
 = 
GFX
.
VPosôi⁄s
 [
S
];

876 
Size
 = 
GFX
.
Sizes
[
S
];

877 
TûeInc
 = 1;

878 
Off£t
;

880 i‡(
VPos
 + 
Size
 <(Ë
GFX
.
SèπY
 || VPo†> (ËGFX.
EndY
)

883 i‡(
OnMaö
 && 
	`SUB_OR_ADD
(4))

885 
	`Sñe˘TûeRídîî
 (!
GFX
.
P£udo
 && 
PPU
.
OBJ
 [
S
].
PÆëã
 < 4);

888 
Ba£Tûe
 = 
PPU
.
OBJ
[
S
].
Name
 | (PPU.OBJ[S].
PÆëã
 << 10);

890 i‡(
PPU
.
OBJ
[
S
].
HFlù
)

892 
Ba£Tûe
 +((
Size
 >> 3Ë- 1Ë| 
H_FLIP
;

893 
TûeInc
 = -1;

895 i‡(
PPU
.
OBJ
[
S
].
VFlù
)

896 
Ba£Tûe
 |
V_FLIP
;

898 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [4];

899 i‡(!
˛ùcou¡
)

900 
˛ùcou¡
 = 1;

902 
GFX
.
Z2
 = (
PPU
.
OBJ
[
S
].
Pri‹ôy
 + 1Ë* 4 + 
D
;

904 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

906 
Le·
;

907 
Right
;

908 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [4])

910 
Le·
 = 0;

911 
Right
 = 256;

915 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][4];

916 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][4];

919 i‡(
Right
 <
Le·
 || 
PPU
.
OBJ
[
S
].
HPos
 + 
Size
 <= Left ||

920 
PPU
.
OBJ
[
S
].
HPos
 >
Right
)

923 
Y
 = 0; Y < 
Size
; Y += 8)

925 i‡(
VPos
 + 
Y
 + 7 >(Ë
GFX
.
SèπY
 && VPo†+ Y <(ËGFX.
EndY
)

927 
SèπLöe
;

928 
TûeLöe
;

929 
LöeCou¡
;

930 
La°
;

932 i‡((
SèπLöe
 = 
VPos
 + 
Y
Ë< (Ë
GFX
.
SèπY
)

934 
SèπLöe
 = 
GFX
.
SèπY
 - StartLine;

935 
LöeCou¡
 = 8 - 
SèπLöe
;

939 
SèπLöe
 = 0;

940 
LöeCou¡
 = 8;

942 i‡((
La°
 = 
VPos
 + 
Y
 + 7 - 
GFX
.
EndY
) > 0)

943 i‡((
LöeCou¡
 -
La°
) <= 0)

946 
TûeLöe
 = 
SèπLöe
 << 3;

947 
O
 = (
VPos
 + 
Y
 + 
SèπLöe
Ë* 
GFX
.
PPL
;

948 i‡(!
PPU
.
OBJ
[
S
].
VFlù
)

949 
Tûe
 = 
Ba£Tûe
 + (
Y
 << 1);

951 
Tûe
 = 
Ba£Tûe
 + ((
Size
 - 
Y
 - 8) << 1);

953 
MiddÀ
 = 
Size
 >> 3;

954 i‡(
PPU
.
OBJ
[
S
].
HPos
 < 
Le·
)

956 
Tûe
 +((
Le·
 - 
PPU
.
OBJ
[
S
].
HPos
Ë>> 3Ë* 
TûeInc
;

957 
MiddÀ
 -(
Le·
 - 
PPU
.
OBJ
[
S
].
HPos
) >> 3;

958 
O
 +
Le·
 * 
GFX
.
PixSize
;

959 i‡((
Off£t
 = (
Le·
 - 
PPU
.
OBJ
[
S
].
HPos
) & 7))

961 
O
 -
Off£t
 * 
GFX
.
PixSize
;

962 
W
 = 8 - 
Off£t
;

963 
Width
 = 
Right
 - 
Le·
;

964 i‡(
W
 > 
Width
)

965 
W
 = 
Width
;

966 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
O
, 
Off£t
, 
W
,

967 
TûeLöe
, 
LöeCou¡
, &
GFX
);

969 i‡(
W
 >
Width
)

971 
Tûe
 +
TûeInc
;

972 
MiddÀ
--;

973 
O
 +8 * 
GFX
.
PixSize
;

977 
O
 +
PPU
.
OBJ
[
S
].
HPos
 * 
GFX
.
PixSize
;

979 i‡(
PPU
.
OBJ
[
S
].
HPos
 + 
Size
 >
Right
)

981 
MiddÀ
 -((
PPU
.
OBJ
[
S
].
HPos
 + 
Size
 + 7) -

982 
Right
) >> 3;

983 
Off£t
 = (
Right
 - (
PPU
.
OBJ
[
S
].
HPos
 + 
Size
)) & 7;

986 
Off£t
 = 0;

988 
X
 = 0; X < 
MiddÀ
; X++, 
O
 +8 * 
GFX
.
PixSize
,

989 
Tûe
 +
TûeInc
)

991 (*
DøwTûePå
Ë(
Tûe
, 
O
, 
TûeLöe
, 
LöeCou¡
, &
GFX
);

993 i‡(
Off£t
)

995 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
O
, 0, 
Off£t
,

996 
TûeLöe
, 
LöeCou¡
, &
GFX
);

1002 
	}
}

1004 
	$DøwBackgroundMoßic
 (
uöt32
 
BGMode
, uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1006 
	`CHECK_SOUND
();

1008 
uöt32
 
Tûe
;

1009 
uöt16
 *
SC0
;

1010 
uöt16
 *
SC1
;

1011 
uöt16
 *
SC2
;

1012 
uöt16
 *
SC3
;

1013 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1015 i‡(
BGMode
 == 0)

1016 
BG
.
SèπPÆëã
 = 
bg
 << 5;

1018 
BG
.
SèπPÆëã
 = 0;

1020 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1022 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1023 
SC1
 = 
SC0
 + 1024;

1025 
SC1
 = 
SC0
;

1027 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 2)

1028 
SC2
 = 
SC1
 + 1024;

1030 
SC2
 = 
SC0
;

1032 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1033 
SC3
 = 
SC2
 + 1024;

1035 
SC3
 = 
SC2
;

1037 
uöt32
 
Löes
;

1038 
uöt32
 
Off£tMask
;

1039 
uöt32
 
Off£tShi·
;

1041 i‡(
BG
.
TûeSize
 == 16)

1043 
Off£tMask
 = 0x3ff;

1044 
Off£tShi·
 = 4;

1048 
Off£tMask
 = 0x1ff;

1049 
Off£tShi·
 = 3;

1052 
uöt32
 
Y
 = 
GFX
.
SèπY
; Y <GFX.
EndY
; Y +
Löes
)

1054 
uöt32
 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1055 
uöt32
 
HOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].HOffset;

1056 
uöt32
 
MoßicOff£t
 = 
Y
 % 
PPU
.
Moßic
;

1058 
Löes
 = 1; Löe†< 
PPU
.
Moßic
 - 
MoßicOff£t
; Lines++)

1059 i‡((
VOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].VOffset) ||

1060 (
HOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].HOffset))

1063 
uöt32
 
MoßicLöe
 = 
VOff£t
 + 
Y
 - 
MoßicOff£t
;

1065 i‡(
Y
 + 
Löes
 > 
GFX
.
EndY
)

1066 
Löes
 = 
GFX
.
EndY
 + 1 - 
Y
;

1067 
uöt32
 
VútAlign
 = (
MoßicLöe
 & 7) << 3;

1069 
uöt16
 *
b1
;

1070 
uöt16
 *
b2
;

1072 
uöt32
 
S¸ìnLöe
 = 
MoßicLöe
 >> 
Off£tShi·
;

1073 
uöt32
 
Rem16
 = 
MoßicLöe
 & 15;

1075 i‡(
S¸ìnLöe
 & 0x20)

1076 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1078 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1080 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1081 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1082 
uöt16
 *
t
;

1083 
uöt32
 
Le·
 = 0;

1084 
uöt32
 
Right
 = 256;

1086 
uöt32
 
ClùCou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1087 
uöt32
 
HPos
 = 
HOff£t
;

1088 
uöt32
 
PixWidth
 = 
PPU
.
Moßic
;

1090 i‡(!
ClùCou¡
)

1091 
ClùCou¡
 = 1;

1093 
uöt32
 
˛ù
 = 0; clù < 
ClùCou¡
; clip++)

1095 i‡(
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1097 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
];

1098 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
];

1099 
uöt32
 
r
 = 
Le·
 % 
PPU
.
Moßic
;

1100 
HPos
 = 
HOff£t
 + 
Le·
;

1101 
PixWidth
 = 
PPU
.
Moßic
 - 
r
;

1103 
uöt32
 
s
 = 
Y
 * 
GFX
.
PPL
 + 
Le·
 * GFX.
PixSize
;

1104 
uöt32
 
x
 = 
Le·
; x < 
Right
; x +
PixWidth
,

1105 
s
 +
PixWidth
 * 
GFX
.
PixSize
,

1106 
HPos
 +
PixWidth
, PixWidth = 
PPU
.
Moßic
)

1108 
uöt32
 
QuŸ
 = (
HPos
 & 
Off£tMask
) >> 3;

1110 i‡(
x
 + 
PixWidth
 >
Right
)

1111 
PixWidth
 = 
Right
 - 
x
;

1113 i‡(
BG
.
TûeSize
 == 8)

1115 i‡(
QuŸ
 > 31)

1116 
t
 = 
b2
 + (
QuŸ
 & 0x1f);

1118 
t
 = 
b1
 + 
QuŸ
;

1122 i‡(
QuŸ
 > 63)

1123 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1125 
t
 = 
b1
 + (
QuŸ
 >> 1);

1128 
Tûe
 = 
	`READ_2BYTES
 (
t
);

1129 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1132 i‡(
BG
.
TûeSize
 != 8)

1134 i‡(
Tûe
 & 
H_FLIP
)

1137 i‡(
Tûe
 & 
V_FLIP
)

1140 i‡(
Rem16
 < 8)

1142 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 17 - (
QuŸ
 & 1), 
s
,

1143 
HPos
 & 7, 
PixWidth
,

1144 
VútAlign
, 
Löes
, &
GFX
);

1148 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1), 
s
,

1149 
HPos
 & 7, 
PixWidth
,

1150 
VútAlign
, 
Löes
, &
GFX
);

1156 i‡(
Rem16
 > 7)

1158 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 17 - (
QuŸ
 & 1), 
s
,

1159 
HPos
 & 7, 
PixWidth
,

1160 
VútAlign
, 
Löes
, &
GFX
);

1164 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1), 
s
,

1165 
HPos
 & 7, 
PixWidth
,

1166 
VútAlign
, 
Löes
, &
GFX
);

1173 i‡(
Tûe
 & 
V_FLIP
)

1176 i‡(
Rem16
 < 8)

1178 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 16 + (
QuŸ
 & 1), 
s
,

1179 
HPos
 & 7, 
PixWidth
,

1180 
VútAlign
, 
Löes
, &
GFX
);

1184 (*
DøwL¨gePixñPå
Ë(
Tûe
 + (
QuŸ
 & 1), 
s
,

1185 
HPos
 & 7, 
PixWidth
,

1186 
VútAlign
, 
Löes
, &
GFX
);

1192 i‡(
Rem16
 > 7)

1194 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 16 + (
QuŸ
 & 1), 
s
,

1195 
HPos
 & 7, 
PixWidth
,

1196 
VútAlign
, 
Löes
, &
GFX
);

1200 (*
DøwL¨gePixñPå
Ë(
Tûe
 + (
QuŸ
 & 1), 
s
,

1201 
HPos
 & 7, 
PixWidth
,

1202 
VútAlign
, 
Löes
, &
GFX
);

1208 (*
DøwL¨gePixñPå
Ë(
Tûe
, 
s
, 
HPos
 & 7, 
PixWidth
,

1209 
VútAlign
, 
Löes
, &
GFX
);

1213 
	}
}

1215 
	$DøwBackgroundOff£t
 (
uöt32
 
BGMode
, uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1217 
	`CHECK_SOUND
();

1219 
uöt32
 
Tûe
;

1220 
uöt16
 *
SC0
;

1221 
uöt16
 *
SC1
;

1222 
uöt16
 *
SC2
;

1223 
uöt16
 *
SC3
;

1224 
uöt16
 *
BPS0
;

1225 
uöt16
 *
BPS1
;

1226 
uöt16
 *
BPS2
;

1227 
uöt16
 *
BPS3
;

1228 
uöt32
 
Width
;

1229 
VOff£tOff£t
 = 
BGMode
 == 4 ? 0 : 32;

1230 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1232 
BG
.
SèπPÆëã
 = 0;

1234 
BPS0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[2].
SCBa£
 << 1];

1236 i‡(
PPU
.
BG
[2].
SCSize
 & 1)

1237 
BPS1
 = 
BPS0
 + 1024;

1239 
BPS1
 = 
BPS0
;

1241 i‡(
PPU
.
BG
[2].
SCSize
 & 2)

1242 
BPS2
 = 
BPS1
 + 1024;

1244 
BPS2
 = 
BPS0
;

1246 i‡(
PPU
.
BG
[2].
SCSize
 & 1)

1247 
BPS3
 = 
BPS2
 + 1024;

1249 
BPS3
 = 
BPS2
;

1251 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1253 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1254 
SC1
 = 
SC0
 + 1024;

1256 
SC1
 = 
SC0
;

1258 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 2)

1259 
SC2
 = 
SC1
 + 1024;

1261 
SC2
 = 
SC0
;

1262 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1263 
SC3
 = 
SC2
 + 1024;

1265 
SC3
 = 
SC2
;

1267 c⁄° 
Löes
 = 1;

1268 
Off£tMask
;

1269 
Off£tShi·
;

1270 
Off£tE«bÀMask
 = 1 << (
bg
 + 13);

1272 i‡(
BG
.
TûeSize
 == 16)

1274 
Off£tMask
 = 0x3ff;

1275 
Off£tShi·
 = 4;

1279 
Off£tMask
 = 0x1ff;

1280 
Off£tShi·
 = 3;

1283 
uöt32
 
Y
 = 
GFX
.
SèπY
; Y <GFX.
EndY
; Y++)

1285 
uöt32
 
VOff
 = 
LöeD©a
 [
Y
].
BG
[2].
VOff£t
;

1286 
uöt32
 
HOff
 = 
LöeD©a
 [
Y
].
BG
[2].
HOff£t
;

1287 
VútAlign
;

1288 
S¸ìnLöe
 = 
VOff
 >> 3;

1289 
t1
;

1290 
t2
;

1291 
uöt16
 *
s0
;

1292 
uöt16
 *
s1
;

1293 
uöt16
 *
s2
;

1295 i‡(
S¸ìnLöe
 & 0x20)

1296 
s1
 = 
BPS2
, 
s2
 = 
BPS3
;

1298 
s1
 = 
BPS0
, 
s2
 = 
BPS1
;

1300 
s1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1301 
s2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1303 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1304 i‡(!
˛ùcou¡
)

1305 
˛ùcou¡
 = 1;

1307 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

1309 
uöt32
 
Le·
;

1310 
uöt32
 
Right
;

1312 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1314 
Le·
 = 0;

1315 
Right
 = 256;

1319 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
];

1320 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
];

1322 i‡(
Right
 <
Le·
)

1326 
uöt32
 
VOff£t
;

1327 
uöt32
 
HOff£t
;

1328 
uöt32
 
LöeHOff£t
=
LöeD©a
 [
Y
].
BG
[
bg
].
HOff£t
;

1329 
uöt32
 
Off£t
;

1330 
uöt32
 
HPos
;

1331 
uöt32
 
QuŸ
;

1332 
uöt32
 
Cou¡
;

1333 
uöt16
 *
t
;

1334 
uöt32
 
QuŸ2
;

1335 
uöt32
 
VCñlOff£t
;

1336 
uöt32
 
HCñlOff£t
;

1337 
uöt16
 *
b1
;

1338 
uöt16
 *
b2
;

1339 
uöt32
 
TŸÆCou¡
 = 0;

1340 
uöt32
 
MaxCou¡
 = 8;

1342 
uöt32
 
s
 = 
Le·
 * 
GFX
.
PixSize
 + 
Y
 * GFX.
PPL
;

1343 
boﬁ8_32
 
À·_h™d_edge
 = (
Le·
 == 0);

1344 
Width
 = 
Right
 - 
Le·
;

1346 i‡(
Le·
 & 7)

1347 
MaxCou¡
 = 8 - (
Le·
 & 7);

1349 
Le·
 < 
Right
)

1351 i‡(
À·_h™d_edge
)

1356 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1357 
HOff£t
 = 
LöeHOff£t
;

1358 
À·_h™d_edge
 = 
FALSE
;

1364 
QuŸ2
 = ((
HOff
 + 
Le·
 - 1Ë& 
Off£tMask
) >> 3;

1366 i‡(
QuŸ2
 > 31)

1367 
s0
 = 
s2
 + (
QuŸ2
 & 0x1f);

1369 
s0
 = 
s1
 + 
QuŸ2
;

1371 
HCñlOff£t
 = 
	`READ_2BYTES
 (
s0
);

1373 i‡(
BGMode
 == 4)

1375 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1376 
HOff£t
=
LöeHOff£t
;

1377 i‡((
HCñlOff£t
 & 
Off£tE«bÀMask
))

1379 i‡(
HCñlOff£t
 & 0x8000)

1380 
VOff£t
 = 
HCñlOff£t
 + 1;

1382 
HOff£t
 = 
HCñlOff£t
;

1387 
VCñlOff£t
 = 
	`READ_2BYTES
 (
s0
 + 
VOff£tOff£t
);

1388 i‡((
VCñlOff£t
 & 
Off£tE«bÀMask
))

1389 
VOff£t
 = 
VCñlOff£t
 + 1;

1391 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1393 i‡((
HCñlOff£t
 & 
Off£tE«bÀMask
))

1394 
HOff£t
 = (
HCñlOff£t
 & ~7)|(
LöeHOff£t
&7);

1396 
HOff£t
=
LöeHOff£t
;

1399 
VútAlign
 = ((
Y
 + 
VOff£t
) & 7) << 3;

1400 
S¸ìnLöe
 = (
VOff£t
 + 
Y
Ë>> 
Off£tShi·
;

1402 i‡(((
VOff£t
 + 
Y
) & 15) > 7)

1404 
t1
 = 16;

1405 
t2
 = 0;

1409 
t1
 = 0;

1410 
t2
 = 16;

1413 i‡(
S¸ìnLöe
 & 0x20)

1414 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1416 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1418 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1419 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1421 
HPos
 = (
HOff£t
 + 
Le·
Ë& 
Off£tMask
;

1423 
QuŸ
 = 
HPos
 >> 3;

1425 i‡(
BG
.
TûeSize
 == 8)

1427 i‡(
QuŸ
 > 31)

1428 
t
 = 
b2
 + (
QuŸ
 & 0x1f);

1430 
t
 = 
b1
 + 
QuŸ
;

1434 i‡(
QuŸ
 > 63)

1435 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1437 
t
 = 
b1
 + (
QuŸ
 >> 1);

1440 i‡(
MaxCou¡
 + 
TŸÆCou¡
 > 
Width
)

1441 
MaxCou¡
 = 
Width
 - 
TŸÆCou¡
;

1443 
Off£t
 = 
HPos
 & 7;

1445 
Cou¡
 = 8 - 
Off£t
;

1446 i‡(
Cou¡
 > 
MaxCou¡
)

1447 
Cou¡
 = 
MaxCou¡
;

1449 
s
 -
Off£t
 * 
GFX
.
PixSize
;

1450 
Tûe
 = 
	`READ_2BYTES
(
t
);

1451 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1453 i‡(
BG
.
TûeSize
 == 8)

1454 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1457 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1460 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1461 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1464 i‡(
Tûe
 & 
H_FLIP
)

1466 i‡(
Tûe
 & 
V_FLIP
)

1469 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1470 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1475 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1476 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1482 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1483 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1487 
Le·
 +
Cou¡
;

1488 
TŸÆCou¡
 +
Cou¡
;

1489 
s
 +(
Off£t
 + 
Cou¡
Ë* 
GFX
.
PixSize
;

1490 
MaxCou¡
 = 8;

1494 
	}
}

1496 
	$DøwBackgroundMode5
 (
uöt32
 , uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1498 
	`CHECK_SOUND
();

1500 
GFX
.
Pôch
 = GFX.
RólPôch
;

1501 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

1502 
GFX
.
PixSize
 = 1;

1503 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1505 
uöt32
 
Tûe
;

1506 
uöt16
 *
SC0
;

1507 
uöt16
 *
SC1
;

1508 
uöt16
 *
SC2
;

1509 
uöt16
 *
SC3
;

1510 
uöt32
 
Width
;

1512 
BG
.
SèπPÆëã
 = 0;

1514 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1516 i‡((
PPU
.
BG
[
bg
].
SCSize
 & 1))

1517 
SC1
 = 
SC0
 + 1024;

1519 
SC1
 = 
SC0
;

1521 i‡((
PPU
.
BG
[
bg
].
SCSize
 & 2))

1522 
SC2
 = 
SC1
 + 1024;

1524 
SC2
 = 
SC0
;

1526 i‡((
PPU
.
BG
[
bg
].
SCSize
 & 1))

1527 
SC3
 = 
SC2
 + 1024;

1529 
SC3
 = 
SC2
;

1531 
Löes
;

1532 
VOff£tMask
;

1533 
VOff£tShi·
;

1535 i‡(
BG
.
TûeSize
 == 16)

1537 
VOff£tMask
 = 0x3ff;

1538 
VOff£tShi·
 = 4;

1542 
VOff£tMask
 = 0x1ff;

1543 
VOff£tShi·
 = 3;

1545 
ídy
 = 
GFX
.
EndY
;

1547 
Y
 = 
GFX
.
SèπY
; Y <
ídy
; Y +
Löes
)

1549 
y
 = 
Y
;

1550 
uöt32
 
VOff£t
 = 
LöeD©a
 [
y
].
BG
[
bg
].VOffset;

1551 
uöt32
 
HOff£t
 = 
LöeD©a
 [
y
].
BG
[
bg
].HOffset;

1552 
VútAlign
 = (
Y
 + 
VOff£t
) & 7;

1554 
Löes
 = 1; Löe†< 8 - 
VútAlign
; Lines++)

1555 i‡((
VOff£t
 !
LöeD©a
 [
y
 + 
Löes
].
BG
[
bg
].VOffset) ||

1556 (
HOff£t
 !
LöeD©a
 [
y
 + 
Löes
].
BG
[
bg
].HOffset))

1559 
HOff£t
 <<= 1;

1560 i‡(
Y
 + 
Löes
 > 
ídy
)

1561 
Löes
 = 
ídy
 + 1 - 
Y
;

1563 
S¸ìnLöe
 = (
VOff£t
 + 
Y
Ë>> 
VOff£tShi·
;

1564 
t1
;

1565 
t2
;

1566 i‡(((
VOff£t
 + 
Y
) & 15) > 7)

1568 
t1
 = 16;

1569 
t2
 = 0;

1573 
t1
 = 0;

1574 
t2
 = 16;

1576 
uöt16
 *
b1
;

1577 
uöt16
 *
b2
;

1579 i‡(
S¸ìnLöe
 & 0x20)

1580 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1582 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1584 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1585 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1587 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1588 i‡(!
˛ùcou¡
)

1589 
˛ùcou¡
 = 1;

1590 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

1592 
Le·
;

1593 
Right
;

1595 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1597 
Le·
 = 0;

1598 
Right
 = 512;

1602 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
] * 2;

1603 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
] * 2;

1605 i‡(
Right
 <
Le·
)

1609 
uöt32
 
s
 = (
Le·
>>1Ë* 
GFX
.
PixSize
 + 
Y
 * GFX.
PPL
;

1610 
uöt32
 
HPos
 = (
HOff£t
 + 
Le·
 * 
GFX
.
PixSize
) & 0x3ff;

1612 
uöt32
 
QuŸ
 = 
HPos
 >> 3;

1613 
uöt32
 
Cou¡
 = 0;

1615 
uöt16
 *
t
;

1616 i‡(
QuŸ
 > 63)

1617 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1619 
t
 = 
b1
 + (
QuŸ
 >> 1);

1621 
Width
 = 
Right
 - 
Le·
;

1623 i‡(
HPos
 & 7)

1625 
Off£t
 = (
HPos
 & 7);

1626 
Cou¡
 = 8 - 
Off£t
;

1627 i‡(
Cou¡
 > 
Width
)

1628 
Cou¡
 = 
Width
;

1629 
s
 -(
Off£t
>>1);

1630 
Tûe
 = 
	`READ_2BYTES
 (
t
);

1631 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1633 i‡(
BG
.
TûeSize
 == 8)

1635 i‡(!(
Tûe
 & 
H_FLIP
))

1638 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + (
QuŸ
 & 1),

1639 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1644 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1),

1645 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1650 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1653 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1654 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1657 i‡(
Tûe
 & 
H_FLIP
)

1659 i‡(
Tûe
 & 
V_FLIP
)

1662 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1663 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1668 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1669 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1675 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1676 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1680 
t
 +
QuŸ
 & 1;

1681 i‡(
QuŸ
 == 63)

1682 
t
 = 
b2
;

1683 i‡(
QuŸ
 == 127)

1684 
t
 = 
b1
;

1685 
QuŸ
++;

1686 
s
 += 4;

1690 
Cou¡
 = 
Width
 - Count;

1691 
MiddÀ
 = 
Cou¡
 >> 3;

1692 
Cou¡
 &= 7;

1693 
C
 = 
MiddÀ
; C > 0; 
s
 +4, 
QuŸ
++, C--)

1695 
Tûe
 = 
	`READ_2BYTES
(
t
);

1696 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1697 i‡(
BG
.
TûeSize
 == 8)

1699 i‡(!(
Tûe
 & 
H_FLIP
))

1702 (*
DøwHiResTûePå
Ë(
Tûe
 + (
QuŸ
 & 1),

1703 
s
, 
VútAlign
, 
Löes
, &
GFX
);

1708 (*
DøwHiResTûePå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1),

1709 
s
, 
VútAlign
, 
Löes
, &
GFX
);

1714 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1717 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1718 
s
, 
VútAlign
, 
Löes
, &
GFX
);

1721 i‡(
Tûe
 & 
H_FLIP
)

1723 i‡(
Tûe
 & 
V_FLIP
)

1726 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1727 
s
, 
VútAlign
, 
Löes
, &
GFX
);

1732 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1733 
s
, 
VútAlign
, 
Löes
, &
GFX
);

1739 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1740 
s
, 
VútAlign
, 
Löes
, &
GFX
);

1744 
t
 +
QuŸ
 & 1;

1745 i‡(
QuŸ
 == 63)

1746 
t
 = 
b2
;

1748 i‡(
QuŸ
 == 127)

1749 
t
 = 
b1
;

1753 i‡(
Cou¡
)

1755 
Tûe
 = 
	`READ_2BYTES
(
t
);

1756 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1757 i‡(
BG
.
TûeSize
 == 8)

1759 i‡(!(
Tûe
 & 
H_FLIP
))

1762 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + (
QuŸ
 & 1),

1763 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1768 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1),

1769 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1774 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1777 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1778 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1781 i‡(
Tûe
 & 
H_FLIP
)

1783 i‡(
Tûe
 & 
V_FLIP
)

1786 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1787 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1792 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1793 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1799 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1800 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

1806 
	}
}

1808 
	$DøwBackground
 (
uöt32
 
BGMode
, uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1810 
GFX
.
PixSize
 = 1;

1812 
BG
.
TûeSize
 = 
BGSizes
 [
PPU
.BG[
bg
].
BGSize
];

1813 
BG
.
BôShi·
 = 
BôShi·s
[
BGMode
][
bg
];

1814 
BG
.
TûeShi·
 = 
TûeShi·s
[
BGMode
][
bg
];

1815 
BG
.
TûeAddªss
 = 
PPU
.BG[
bg
].
NameBa£
 << 1;

1816 
BG
.
NameSñe˘
 = 0;

1817 
BG
.
Buf„r
 = 
IPPU
.
TûeCache
 [
Dïths
 [
BGMode
][
bg
]];

1818 
BG
.
Buf„ªd
 = 
IPPU
.
TûeCached
 [
Dïths
 [
BGMode
][
bg
]];

1819 
BG
.
PÆëãShi·
 = 
PÆëãShi·s
[
BGMode
][
bg
];

1820 
BG
.
PÆëãMask
 = 
PÆëãMasks
[
BGMode
][
bg
];

1821 
BG
.
Dúe˘CﬁourMode
 = (
BGMode
 =3 || BGModê=4Ë&& 
bg
 == 0 &&

1822 (
GFX
.
r2130
 & 1);

1824 i‡(
PPU
.
BGMoßic
 [
bg
] && PPU.
Moßic
 > 1)

1826 
	`DøwBackgroundMoßic
 (
BGMode
, 
bg
, 
Z1
, 
Z2
);

1830 
BGMode
)

1833 i‡(
Sëtögs
.
Wª°Àm™üArˇde
)

1836 
	`DøwBackgroundOff£t
 (
BGMode
, 
bg
, 
Z1
, 
Z2
);

1841 
	`DøwBackgroundMode5
 (
BGMode
, 
bg
, 
Z1
, 
Z2
);

1849 
	`CHECK_SOUND
();

1851 
uöt32
 
Tûe
;

1852 
uöt16
 *
SC0
;

1853 
uöt16
 *
SC1
;

1854 
uöt16
 *
SC2
;

1855 
uöt16
 *
SC3
;

1856 
uöt32
 
Width
;

1857 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1859 i‡(
BGMode
 == 0)

1860 
BG
.
SèπPÆëã
 = 
bg
 << 5;

1862 
BG
.
SèπPÆëã
 = 0;

1864 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1866 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1867 
SC1
 = 
SC0
 + 1024;

1869 
SC1
 = 
SC0
;

1871 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 2)

1872 
SC2
 = 
SC1
 + 1024;

1874 
SC2
 = 
SC0
;

1876 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1877 
SC3
 = 
SC2
 + 1024;

1879 
SC3
 = 
SC2
;

1881 
Löes
;

1882 
Off£tMask
;

1883 
Off£tShi·
;

1885 i‡(
BG
.
TûeSize
 == 16)

1887 
Off£tMask
 = 0x3ff;

1888 
Off£tShi·
 = 4;

1892 
Off£tMask
 = 0x1ff;

1893 
Off£tShi·
 = 3;

1896 
uöt32
 
Y
 = 
GFX
.
SèπY
; Y <GFX.
EndY
; Y +
Löes
)

1898 
uöt32
 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1899 
uöt32
 
HOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].HOffset;

1900 
VútAlign
 = (
Y
 + 
VOff£t
) & 7;

1902 
Löes
 = 1; Löe†< 8 - 
VútAlign
; Lines++)

1903 i‡((
VOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].VOffset) ||

1904 (
HOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].HOffset))

1907 i‡(
Y
 + 
Löes
 > 
GFX
.
EndY
)

1908 
Löes
 = 
GFX
.
EndY
 + 1 - 
Y
;

1910 
VútAlign
 <<= 3;

1912 
uöt32
 
S¸ìnLöe
 = (
VOff£t
 + 
Y
Ë>> 
Off£tShi·
;

1913 
uöt32
 
t1
;

1914 
uöt32
 
t2
;

1915 i‡(((
VOff£t
 + 
Y
) & 15) > 7)

1917 
t1
 = 16;

1918 
t2
 = 0;

1922 
t1
 = 0;

1923 
t2
 = 16;

1925 
uöt16
 *
b1
;

1926 
uöt16
 *
b2
;

1928 i‡(
S¸ìnLöe
 & 0x20)

1929 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1931 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1933 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1934 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1936 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1937 i‡(!
˛ùcou¡
)

1938 
˛ùcou¡
 = 1;

1939 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

1941 
uöt32
 
Le·
;

1942 
uöt32
 
Right
;

1944 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1946 
Le·
 = 0;

1947 
Right
 = 256;

1951 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
];

1952 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
];

1954 i‡(
Right
 <
Le·
)

1958 
uöt32
 
s
 = 
Le·
 * 
GFX
.
PixSize
 + 
Y
 * GFX.
PPL
;

1959 
uöt32
 
HPos
 = (
HOff£t
 + 
Le·
Ë& 
Off£tMask
;

1961 
uöt32
 
QuŸ
 = 
HPos
 >> 3;

1962 
uöt32
 
Cou¡
 = 0;

1964 
uöt16
 *
t
;

1965 i‡(
BG
.
TûeSize
 == 8)

1967 i‡(
QuŸ
 > 31)

1968 
t
 = 
b2
 + (
QuŸ
 & 0x1f);

1970 
t
 = 
b1
 + 
QuŸ
;

1974 i‡(
QuŸ
 > 63)

1975 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1977 
t
 = 
b1
 + (
QuŸ
 >> 1);

1980 
Width
 = 
Right
 - 
Le·
;

1982 i‡(
HPos
 & 7)

1984 
uöt32
 
Off£t
 = (
HPos
 & 7);

1985 
Cou¡
 = 8 - 
Off£t
;

1986 i‡(
Cou¡
 > 
Width
)

1987 
Cou¡
 = 
Width
;

1988 
s
 -
Off£t
 * 
GFX
.
PixSize
;

1989 
Tûe
 = 
	`READ_2BYTES
(
t
);

1990 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1992 i‡(
BG
.
TûeSize
 == 8)

1994 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
,

1995 
Löes
, &
GFX
);

1999 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

2002 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

2003 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

2006 i‡(
Tûe
 & 
H_FLIP
)

2008 i‡(
Tûe
 & 
V_FLIP
)

2011 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

2012 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

2017 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

2018 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

2024 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1), 
s
,

2025 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

2029 i‡(
BG
.
TûeSize
 == 8)

2031 
t
++;

2032 i‡(
QuŸ
 == 31)

2033 
t
 = 
b2
;

2034 i‡(
QuŸ
 == 63)

2035 
t
 = 
b1
;

2039 
t
 +
QuŸ
 & 1;

2040 i‡(
QuŸ
 == 63)

2041 
t
 = 
b2
;

2042 i‡(
QuŸ
 == 127)

2043 
t
 = 
b1
;

2045 
QuŸ
++;

2046 
s
 +8 * 
GFX
.
PixSize
;

2050 
Cou¡
 = 
Width
 - Count;

2051 
MiddÀ
 = 
Cou¡
 >> 3;

2052 
Cou¡
 &= 7;

2053 
C
 = 
MiddÀ
; C > 0; 
s
 +8 * 
GFX
.
PixSize
, 
QuŸ
++, C--)

2055 
Tûe
 = 
	`READ_2BYTES
(
t
);

2056 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

2058 i‡(
BG
.
TûeSize
 != 8)

2060 i‡(
Tûe
 & 
H_FLIP
)

2063 i‡(
Tûe
 & 
V_FLIP
)

2066 (*
DøwTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1), 
s
,

2067 
VútAlign
, 
Löes
, &
GFX
);

2072 (*
DøwTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1), 
s
,

2073 
VútAlign
, 
Löes
, &
GFX
);

2079 i‡(
Tûe
 & 
V_FLIP
)

2082 (*
DøwTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1), 
s
,

2083 
VútAlign
, 
Löes
, &
GFX
);

2088 (*
DøwTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1), 
s
,

2089 
VútAlign
, 
Löes
, &
GFX
);

2095 (*
DøwTûePå
Ë(
Tûe
, 
s
, 
VútAlign
, 
Löes
, &
GFX
);

2098 i‡(
BG
.
TûeSize
 == 8)

2100 
t
++;

2101 i‡(
QuŸ
 == 31)

2102 
t
 = 
b2
;

2104 i‡(
QuŸ
 == 63)

2105 
t
 = 
b1
;

2109 
t
 +
QuŸ
 & 1;

2110 i‡(
QuŸ
 == 63)

2111 
t
 = 
b2
;

2113 i‡(
QuŸ
 == 127)

2114 
t
 = 
b1
;

2118 i‡(
Cou¡
)

2120 
Tûe
 = 
	`READ_2BYTES
(
t
);

2121 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

2123 i‡(
BG
.
TûeSize
 == 8)

2124 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
s
, 0, 
Cou¡
, 
VútAlign
,

2125 
Löes
, &
GFX
);

2128 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

2131 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1), 
s
, 0,

2132 
Cou¡
, 
VútAlign
, 
Löes
, &
GFX
);

2135 i‡(
Tûe
 & 
H_FLIP
)

2137 i‡(
Tûe
 & 
V_FLIP
)

2140 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

2141 
s
, 0, 
Cou¡
, 
VútAlign
,

2142 
Löes
, &
GFX
);

2147 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

2148 
s
, 0, 
Cou¡
, 
VútAlign
,

2149 
Löes
, &
GFX
);

2155 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

2156 
s
, 0, 
Cou¡
, 
VútAlign
,

2157 
Löes
, &
GFX
);

2163 
	}
}

2165 
	#RENDER_BACKGROUND_MODE7
(
TYPE
,
FUNC
) \

2166 
	`CHECK_SOUND
(); \

2168 
uöt8
 *
VRAM1
 = 
Mem‹y
.
VRAM
 + 1; \

2169 i‡(
GFX
.
r2130
 & 1) \

2171 i‡(
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
) \

2172 
	`S9xBuûdDúe˘CﬁourM≠s
 (); \

2173 
GFX
.
S¸ìnCﬁ‹s
 = 
Dúe˘CﬁourM≠s
 [0]; \

2176 
GFX
.
S¸ìnCﬁ‹s
 = 
IPPU
.ScreenColors; \

2178 
Ø
, 
cc
; \

2179 
dú
; \

2180 
°¨tx
, 
ídx
; \

2181 
uöt32
 
Le·
 = 0; \

2182 
uöt32
 
Right
 = 256; \

2183 
uöt32
 
ClùCou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
]; \

2185 i‡(!
ClùCou¡
) \

2186 
ClùCou¡
 = 1; \

2188 
S¸ìn
 +
GFX
.
SèπY
 * GFX.
Pôch
; \

2189 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + GFX.
SèπY
 * GFX.
PPL
; \

2190 
SLöeM©rixD©a
 *
l
 = &
LöeM©rixD©a
 [
GFX
.
SèπY
]; \

2192 
uöt32
 
Löe
 = 
GFX
.
SèπY
; Löê<GFX.
EndY
; Löe++, 
S¸ìn
 +GFX.
Pôch
, 
Dïth
 +GFX.
PPL
, 
l
++) \

2194 
yy
; \

2196 
öt32
 
HOff£t
 = ((öt32Ë
LöeD©a
 [
Löe
].
BG
[0].HOff£à<< 
M7
) >> M7; \

2197 
öt32
 
VOff£t
 = ((öt32Ë
LöeD©a
 [
Löe
].
BG
[0].VOff£à<< 
M7
) >> M7; \

2199 
öt32
 
CíåeX
 = ((öt32Ë
l
->CíåeX << 
M7
) >> M7; \

2200 
öt32
 
CíåeY
 = ((öt32Ë
l
->CíåeY << 
M7
) >> M7; \

2202 i‡(
PPU
.
Mode7VFlù
) \

2203 
yy
 = 261 - (Ë
Löe
; \

2205 
yy
 = 
Löe
; \

2207 i‡(
PPU
.
Mode7Rïót
 == 0) \

2208 
yy
 +(
VOff£t
 - 
CíåeY
) % 1023; \

2210 
yy
 +
VOff£t
 - 
CíåeY
; \

2211 
BB
 = 
l
->
M©rixB
 * 
yy
 + (
CíåeX
 << 8); \

2212 
DD
 = 
l
->
M©rixD
 * 
yy
 + (
CíåeY
 << 8); \

2214 
uöt32
 
˛ù
 = 0; clù < 
ClùCou¡
; clip++) \

2216 i‡(
GFX
.
pCuºítClù
->
Cou¡
 [
bg
]) \

2218 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
]; \

2219 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
]; \

2220 i‡(
Right
 <
Le·
) \

2223 
TYPE
 *
p
 = (TYPE *Ë
S¸ìn
 + 
Le·
; \

2224 
uöt8
 *
d
 = 
Dïth
 + 
Le·
; \

2226 i‡(
PPU
.
Mode7HFlù
) \

2228 
°¨tx
 = 
Right
 - 1; \

2229 
ídx
 = 
Le·
 - 1; \

2230 
dú
 = -1; \

2231 
Ø
 = -
l
->
M©rixA
; \

2232 
cc
 = -
l
->
M©rixC
; \

2236 
°¨tx
 = 
Le·
; \

2237 
ídx
 = 
Right
; \

2238 
dú
 = 1; \

2239 
Ø
 = 
l
->
M©rixA
; \

2240 
cc
 = 
l
->
M©rixC
; \

2242 
xx
; \

2243 i‡(
PPU
.
Mode7Rïót
 == 0) \

2244 
xx
 = 
°¨tx
 + (
HOff£t
 - 
CíåeX
) % 1023; \

2246 
xx
 = 
°¨tx
 + 
HOff£t
 - 
CíåeX
; \

2247 
AA
 = 
l
->
M©rixA
 * 
xx
; \

2248 
CC
 = 
l
->
M©rixC
 * 
xx
; \

2250 i‡(!
PPU
.
Mode7Rïót
) \

2252 
x
 = 
°¨tx
; x !
ídx
; x +
dú
, 
AA
 +
Ø
, 
CC
 +
cc
, 
p
++, 
d
++) \

2254 
X
 = ((
AA
 + 
BB
) >> 8) & 0x3ff; \

2255 
Y
 = ((
CC
 + 
DD
) >> 8) & 0x3ff; \

2256 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2257 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2258 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2259 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2261 *
p
 = (
FUNC
); \

2262 *
d
 = 
GFX
.
Z1
; \

2268 
x
 = 
°¨tx
; x !
ídx
; x +
dú
, 
AA
 +
Ø
, 
CC
 +
cc
, 
p
++, 
d
++) \

2270 
X
 = ((
AA
 + 
BB
) >> 8); \

2271 
Y
 = ((
CC
 + 
DD
) >> 8); \

2273 i‡(
Sëtögs
.
Dez´m⁄
 && 
PPU
.
Mode7Rïót
 == 2) \

2275 
X
 &= 0x7ff; \

2276 
Y
 &= 0x7ff; \

2279 i‡(((
X
 | 
Y
) & ~0x3ff) == 0) \

2281 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2282 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2283 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2284 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2286 *
p
 = (
FUNC
); \

2287 *
d
 = 
GFX
.
Z1
; \

2292 i‡(
PPU
.
Mode7Rïót
 == 3) \

2294 
X
 = (
x
 + 
HOff£t
) & 7; \

2295 
Y
 = (
yy
 + 
CíåeY
) & 7; \

2296 
uöt32
 
b
 = *(
VRAM1
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2297 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2298 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2300 *
p
 = (
FUNC
); \

2301 *
d
 = 
GFX
.
Z1
; \

2308 }

	)

2310 
	$DøwBGMode7Background
 (
uöt8
 *
S¸ìn
, 
bg
)

2312 
	`RENDER_BACKGROUND_MODE7
 (
uöt8
, (uöt8Ë(
b
 & 
GFX
.
Mode7Mask
))

2313 
	}
}

2315 
	$DøwBGMode7Background16
 (
uöt8
 *
S¸ìn
, 
bg
)

2317 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2318 
	}
}

2320 
	$DøwBGMode7Background16Add
 (
uöt8
 *
S¸ìn
, 
bg
)

2322 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2323 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2324 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2325 
p
 [
GFX
.
Dñè
]) :

2326 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2327 
GFX
.
FixedCﬁour
)) :

2328 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2329 
	}
}

2331 
	$DøwBGMode7Background16Add1_2
 (
uöt8
 *
S¸ìn
, 
bg
)

2333 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2334 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2335 
	`COLOR_ADD1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2336 
p
 [
GFX
.
Dñè
]) :

2337 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2338 
GFX
.
FixedCﬁour
)) :

2339 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2340 
	}
}

2342 
	$DøwBGMode7Background16Sub
 (
uöt8
 *
S¸ìn
, 
bg
)

2344 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2345 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2346 
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2347 
p
 [
GFX
.
Dñè
]) :

2348 
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2349 
GFX
.
FixedCﬁour
)) :

2350 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2351 
	}
}

2353 
	$DøwBGMode7Background16Sub1_2
 (
uöt8
 *
S¸ìn
, 
bg
)

2355 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2356 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2357 
	`COLOR_SUB1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2358 
p
 [
GFX
.
Dñè
]) :

2359 
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2360 
GFX
.
FixedCﬁour
)) :

2361 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2362 
	}
}

2364 
	#RENDER_BACKGROUND_MODE7_i
(
TYPE
,
FUNC
,
COLORFUNC
) \

2365 
	`CHECK_SOUND
(); \

2367 
uöt8
 *
VRAM1
 = 
Mem‹y
.
VRAM
 + 1; \

2368 i‡(
GFX
.
r2130
 & 1) \

2370 i‡(
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
) \

2371 
	`S9xBuûdDúe˘CﬁourM≠s
 (); \

2372 
GFX
.
S¸ìnCﬁ‹s
 = 
Dúe˘CﬁourM≠s
 [0]; \

2375 
GFX
.
S¸ìnCﬁ‹s
 = 
IPPU
.ScreenColors; \

2377 
Ø
, 
cc
; \

2378 
dú
; \

2379 
°¨tx
, 
ídx
; \

2380 
uöt32
 
Le·
 = 0; \

2381 
uöt32
 
Right
 = 256; \

2382 
uöt32
 
ClùCou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
]; \

2384 i‡(!
ClùCou¡
) \

2385 
ClùCou¡
 = 1; \

2387 
S¸ìn
 +
GFX
.
SèπY
 * GFX.
Pôch
; \

2388 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + GFX.
SèπY
 * GFX.
PPL
; \

2389 
SLöeM©rixD©a
 *
l
 = &
LöeM©rixD©a
 [
GFX
.
SèπY
]; \

2390 
boﬁ8_32
 
ÆlowSim∂eCa£
 = 
FALSE
; \

2391 i‡(!
l
->
M©rixB
 && !l->
M©rixC
 && (l->
M©rixA
 =0x0100Ë&& (l->
M©rixD
 == 0x0100) \

2392 && !
LöeM©rixD©a
[
GFX
.
EndY
].
M©rixB
 && !LöeM©rixD©a[GFX.EndY].
M©rixC
 \

2393 && (
LöeM©rixD©a
[
GFX
.
EndY
].
M©rixA
 =0x0100Ë&& (LöeM©rixD©a[GFX.EndY].
M©rixD
 == 0x0100) \

2395 
ÆlowSim∂eCa£
 = 
TRUE
; \

2397 
uöt32
 
Löe
 = 
GFX
.
SèπY
; Löê<GFX.
EndY
; Löe++, 
S¸ìn
 +GFX.
Pôch
, 
Dïth
 +GFX.
PPL
, 
l
++) \

2399 
yy
; \

2401 
HOff£t
 = ((Ë
LöeD©a
 [
Löe
].
BG
[0].HOff£à<< 
M7
) >> M7; \

2402 
VOff£t
 = ((Ë
LöeD©a
 [
Löe
].
BG
[0].VOff£à<< 
M7
) >> M7; \

2404 
CíåeX
 = ((Ë
l
->CíåeX << 
M7
) >> M7; \

2405 
CíåeY
 = ((Ë
l
->CíåeY << 
M7
) >> M7; \

2407 i‡(
PPU
.
Mode7VFlù
) \

2408 
yy
 = 261 - (Ë
Löe
; \

2410 
yy
 = 
Löe
; \

2412 i‡(
PPU
.
Mode7Rïót
 == 0) \

2413 
yy
 +(
VOff£t
 - 
CíåeY
) % 1023; \

2415 
yy
 +
VOff£t
 - 
CíåeY
; \

2416 
boﬁ8_32
 
sim∂eCa£
 = 
FALSE
; \

2417 
BB
; \

2418 
DD
; \

2421 i‡(
ÆlowSim∂eCa£
 && !
l
->
M©rixB
 && !l->
M©rixC
 && (l->
M©rixA
 =0x0100Ë&& (l->
M©rixD
 == 0x0100)) \

2423 
BB
 = 
CíåeX
 << 8; \

2424 
DD
 = (
yy
 + 
CíåeY
) << 8; \

2425 
sim∂eCa£
 = 
TRUE
; \

2429 
BB
 = 
l
->
M©rixB
 * 
yy
 + (
CíåeX
 << 8); \

2430 
DD
 = 
l
->
M©rixD
 * 
yy
 + (
CíåeY
 << 8); \

2433 
uöt32
 
˛ù
 = 0; clù < 
ClùCou¡
; clip++) \

2435 i‡(
GFX
.
pCuºítClù
->
Cou¡
 [
bg
]) \

2437 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
]; \

2438 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
]; \

2439 i‡(
Right
 <
Le·
) \

2442 
TYPE
 *
p
 = (TYPE *Ë
S¸ìn
 + 
Le·
; \

2443 
uöt8
 *
d
 = 
Dïth
 + 
Le·
; \

2445 i‡(
PPU
.
Mode7HFlù
) \

2447 
°¨tx
 = 
Right
 - 1; \

2448 
ídx
 = 
Le·
 - 1; \

2449 
dú
 = -1; \

2450 
Ø
 = -
l
->
M©rixA
; \

2451 
cc
 = -
l
->
M©rixC
; \

2455 
°¨tx
 = 
Le·
; \

2456 
ídx
 = 
Right
; \

2457 
dú
 = 1; \

2458 
Ø
 = 
l
->
M©rixA
; \

2459 
cc
 = 
l
->
M©rixC
; \

2461 
xx
; \

2462 i‡(
PPU
.
Mode7Rïót
 == 0) \

2463 
xx
 = 
°¨tx
 + (
HOff£t
 - 
CíåeX
) % 1023; \

2465 
xx
 = 
°¨tx
 + 
HOff£t
 - 
CíåeX
; \

2466 
AA
, 
CC
 = 0; \

2467 i‡(
sim∂eCa£
) \

2469 
AA
 = 
xx
 << 8; \

2473 
AA
 = 
l
->
M©rixA
 * 
xx
; \

2474 
CC
 = 
l
->
M©rixC
 * 
xx
; \

2476 i‡(
sim∂eCa£
) \

2478 i‡(!
PPU
.
Mode7Rïót
) \

2480 
x
 = 
°¨tx
; \

2483 
X
 = ((
AA
 + 
BB
) >> 8) & 0x3ff; \

2484 
Y
 = (
DD
 >> 8) & 0x3ff; \

2485 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2486 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2487 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2488 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2490 
TYPE
 
theCﬁ‹
 = 
COLORFUNC
; \

2491 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2492 *
d
 = 
GFX
.
Z1
; \

2494 
AA
 +
Ø
, 
p
++, 
d
++; \

2495 
x
 +
dú
; \

2496 } 
x
 !
ídx
); \

2500 
x
 = 
°¨tx
; \

2502 
X
 = (
AA
 + 
BB
) >> 8; \

2503 
Y
 = 
DD
 >> 8; \

2505 if(
Sëtögs
.
Dez´m⁄
 && 
PPU
.
Mode7Rïót
 == 2) \

2507 
X
 &= 0x7ff; \

2508 
Y
 &= 0x7ff; \

2511 i‡(((
X
 | 
Y
) & ~0x3ff) == 0) \

2513 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2514 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2515 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2516 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2518 
TYPE
 
theCﬁ‹
 = 
COLORFUNC
; \

2519 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2520 *
d
 = 
GFX
.
Z1
; \

2523 i‡(
PPU
.
Mode7Rïót
 == 3) \

2525 
X
 = (
x
 + 
HOff£t
) & 7; \

2526 
Y
 = (
yy
 + 
CíåeY
) & 7; \

2527 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2528 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2529 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2530 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2532 
TYPE
 
theCﬁ‹
 = 
COLORFUNC
; \

2533 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2534 *
d
 = 
GFX
.
Z1
; \

2537 
AA
 +
Ø
; 
p
++; 
d
++; \

2538 
x
 +
dú
; \

2539 } 
x
 !
ídx
); \

2542 i‡(!
PPU
.
Mode7Rïót
) \

2554 i‡((
Ø
 < 460 &&á®> -460Ë&& (
cc
 < 460 && cc > -460)) \

2556 
x
 = 
°¨tx
; x !
ídx
; x +
dú
, 
AA
 +
Ø
, 
CC
 +
cc
, 
p
++, 
d
++) \

2558 
uöt32
 
xPos
 = 
AA
 + 
BB
; \

2559 
uöt32
 
xPix
 = 
xPos
 >> 8; \

2560 
uöt32
 
yPos
 = 
CC
 + 
DD
; \

2561 
uöt32
 
yPix
 = 
yPos
 >> 8; \

2562 
uöt32
 
X
 = 
xPix
 & 0x3ff; \

2563 
uöt32
 
Y
 = 
yPix
 & 0x3ff; \

2564 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2565 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2566 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2567 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2570 
uöt32
 
X10
 = (
xPix
 + 
dú
) & 0x3ff; \

2571 
uöt32
 
Y01
 = (
yPix
 + 
dú
) & 0x3ff; \

2572 
uöt8
 *
TûeD©a10
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X10
 >> 2) & ~1)] << 7); \

2573 
uöt8
 *
TûeD©a11
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y01
 & ~7Ë<< 5Ë+ ((
X10
 >> 2) & ~1)] << 7); \

2574 
uöt8
 *
TûeD©a01
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y01
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2575 
uöt32
 
p1
 = 
COLORFUNC
; \

2576 
p1
 = (p1 & 
FIRST_THIRD_COLOR_MASK
Ë| (’1 & 
SECOND_COLOR_MASK
) << 16); \

2577 
b
 = *(
TûeD©a10
 + ((
Y
 & 7Ë<< 4Ë+ ((
X10
 & 7) << 1)); \

2578 
uöt32
 
p2
 = 
COLORFUNC
; \

2579 
p2
 = (p2 & 
FIRST_THIRD_COLOR_MASK
Ë| (’2 & 
SECOND_COLOR_MASK
) << 16); \

2580 
b
 = *(
TûeD©a11
 + ((
Y01
 & 7Ë<< 4Ë+ ((
X10
 & 7) << 1)); \

2581 
uöt32
 
p4
 = 
COLORFUNC
; \

2582 
p4
 = (p4 & 
FIRST_THIRD_COLOR_MASK
Ë| (’4 & 
SECOND_COLOR_MASK
) << 16); \

2583 
b
 = *(
TûeD©a01
 + ((
Y01
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2584 
uöt32
 
p3
 = 
COLORFUNC
; \

2585 
p3
 = (p3 & 
FIRST_THIRD_COLOR_MASK
Ë| (’3 & 
SECOND_COLOR_MASK
) << 16); \

2587 
uöt32
 
Xdñ
 = (
xPos
 >> 3) & 0x1F; \

2588 
uöt32
 
Ydñ
 = (
yPos
 >> 3) & 0x1F; \

2589 
uöt32
 
XY
 = (
Xdñ
*
Ydñ
) >> 5; \

2590 
uöt32
 
¨ó1
 = 0x20 + 
XY
 - 
Xdñ
 - 
Ydñ
; \

2591 
uöt32
 
¨ó2
 = 
Xdñ
 - 
XY
; \

2592 
uöt32
 
¨ó3
 = 
Ydñ
 - 
XY
; \

2593 
uöt32
 
¨ó4
 = 
XY
; \

2594 
uöt32
 
ãmpCﬁ‹
 = ((
¨ó1
 * 
p1
) + \

2595 (
¨ó2
 * 
p2
) + \

2596 (
¨ó3
 * 
p3
) + \

2597 (
¨ó4
 * 
p4
)) >> 5; \

2598 
TYPE
 
theCﬁ‹
 = (
ãmpCﬁ‹
 & 
FIRST_THIRD_COLOR_MASK
Ë| (—empCﬁ‹ >> 16Ë& 
SECOND_COLOR_MASK
); \

2599 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2600 *
d
 = 
GFX
.
Z1
; \

2610 
uöt32
 
ØDñX
 = 
Ø
 >> 1; \

2611 
uöt32
 
ccDñX
 = 
cc
 >> 1; \

2612 
uöt32
 
bbDñY
 = 
l
->
M©rixB
 >> 1; \

2613 
uöt32
 
ddDñY
 = 
l
->
M©rixD
 >> 1; \

2616 
BB
 -(
bbDñY
 >> 1); \

2617 
DD
 -(
ddDñY
 >> 1); \

2618 
AA
 -(
ØDñX
 >> 1); \

2619 
CC
 -(
ccDñX
 >> 1); \

2620 
uöt32
 
BB10
 = 
BB
 + 
ØDñX
; \

2621 
uöt32
 
BB01
 = 
BB
 + 
bbDñY
; \

2622 
uöt32
 
BB11
 = 
BB
 + 
ØDñX
 + 
bbDñY
; \

2623 
uöt32
 
DD10
 = 
DD
 + 
ccDñX
; \

2624 
uöt32
 
DD01
 = 
DD
 + 
ddDñY
; \

2625 
uöt32
 
DD11
 = 
DD
 + 
ccDñX
 + 
ddDñY
; \

2626 
x
 = 
°¨tx
; x !
ídx
; x +
dú
, 
AA
 +
Ø
, 
CC
 +
cc
, 
p
++, 
d
++) \

2628 
uöt32
 
X
 = ((
AA
 + 
BB
) >> 8) & 0x3ff; \

2629 
uöt32
 
Y
 = ((
CC
 + 
DD
) >> 8) & 0x3ff; \

2630 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2631 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2632 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2633 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2637 
uöt32
 
X10
 = ((
AA
 + 
BB10
) >> 8) & 0x3ff; \

2638 
uöt32
 
Y10
 = ((
CC
 + 
DD10
) >> 8) & 0x3ff; \

2639 
uöt32
 
X01
 = ((
AA
 + 
BB01
) >> 8) & 0x3ff; \

2640 
uöt32
 
Y01
 = ((
CC
 + 
DD01
) >> 8) & 0x3ff; \

2641 
uöt32
 
X11
 = ((
AA
 + 
BB11
) >> 8) & 0x3ff; \

2642 
uöt32
 
Y11
 = ((
CC
 + 
DD11
) >> 8) & 0x3ff; \

2643 
uöt8
 *
TûeD©a10
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y10
 & ~7Ë<< 5Ë+ ((
X10
 >> 2) & ~1)] << 7); \

2644 
uöt8
 *
TûeD©a01
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y01
 & ~7Ë<< 5Ë+ ((
X01
 >> 2) & ~1)] << 7); \

2645 
uöt8
 *
TûeD©a11
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y11
 & ~7Ë<< 5Ë+ ((
X11
 >> 2) & ~1)] << 7); \

2646 
TYPE
 
p1
 = 
COLORFUNC
; \

2647 
b
 = *(
TûeD©a10
 + ((
Y10
 & 7Ë<< 4Ë+ ((
X10
 & 7) << 1)); \

2648 
TYPE
 
p2
 = 
COLORFUNC
; \

2649 
b
 = *(
TûeD©a01
 + ((
Y01
 & 7Ë<< 4Ë+ ((
X01
 & 7) << 1)); \

2650 
TYPE
 
p3
 = 
COLORFUNC
; \

2651 
b
 = *(
TûeD©a11
 + ((
Y11
 & 7Ë<< 4Ë+ ((
X11
 & 7) << 1)); \

2652 
TYPE
 
p4
 = 
COLORFUNC
; \

2653 
TYPE
 
theCﬁ‹
 = 
	`Q_INTERPOLATE
(
p1
, 
p2
, 
p3
, 
p4
); \

2654 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2655 *
d
 = 
GFX
.
Z1
; \

2662 
x
 = 
°¨tx
; x !
ídx
; x +
dú
, 
AA
 +
Ø
, 
CC
 +
cc
, 
p
++, 
d
++) \

2664 
uöt32
 
xPos
 = 
AA
 + 
BB
; \

2665 
uöt32
 
xPix
 = 
xPos
 >> 8; \

2666 
uöt32
 
yPos
 = 
CC
 + 
DD
; \

2667 
uöt32
 
yPix
 = 
yPos
 >> 8; \

2668 
uöt32
 
X
 = 
xPix
; \

2669 
uöt32
 
Y
 = 
yPix
; \

2672 if(
Sëtögs
.
Dez´m⁄
 && 
PPU
.
Mode7Rïót
 == 2) \

2674 
X
 &= 0x7ff; \

2675 
Y
 &= 0x7ff; \

2678 i‡(((
X
 | 
Y
) & ~0x3ff) == 0) \

2680 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2681 
uöt32
 
b
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2682 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2683 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2686 
uöt32
 
X10
 = (
xPix
 + 
dú
) & 0x3ff; \

2687 
uöt32
 
Y01
 = (
yPix
 + 
dú
) & 0x3ff; \

2688 
uöt8
 *
TûeD©a10
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X10
 >> 2) & ~1)] << 7); \

2689 
uöt8
 *
TûeD©a11
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y01
 & ~7Ë<< 5Ë+ ((
X10
 >> 2) & ~1)] << 7); \

2690 
uöt8
 *
TûeD©a01
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y01
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2691 
uöt32
 
p1
 = 
COLORFUNC
; \

2692 
p1
 = (p1 & 
FIRST_THIRD_COLOR_MASK
Ë| (’1 & 
SECOND_COLOR_MASK
) << 16); \

2693 
b
 = *(
TûeD©a10
 + ((
Y
 & 7Ë<< 4Ë+ ((
X10
 & 7) << 1)); \

2694 
uöt32
 
p2
 = 
COLORFUNC
; \

2695 
p2
 = (p2 & 
FIRST_THIRD_COLOR_MASK
Ë| (’2 & 
SECOND_COLOR_MASK
) << 16); \

2696 
b
 = *(
TûeD©a11
 + ((
Y01
 & 7Ë<< 4Ë+ ((
X10
 & 7) << 1)); \

2697 
uöt32
 
p4
 = 
COLORFUNC
; \

2698 
p4
 = (p4 & 
FIRST_THIRD_COLOR_MASK
Ë| (’4 & 
SECOND_COLOR_MASK
) << 16); \

2699 
b
 = *(
TûeD©a01
 + ((
Y01
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2700 
uöt32
 
p3
 = 
COLORFUNC
; \

2701 
p3
 = (p3 & 
FIRST_THIRD_COLOR_MASK
Ë| (’3 & 
SECOND_COLOR_MASK
) << 16); \

2703 
uöt32
 
Xdñ
 = (
xPos
 >> 3) & 0x1F; \

2704 
uöt32
 
Ydñ
 = (
yPos
 >> 3) & 0x1F; \

2705 
uöt32
 
XY
 = (
Xdñ
*
Ydñ
) >> 5; \

2706 
uöt32
 
¨ó1
 = 0x20 + 
XY
 - 
Xdñ
 - 
Ydñ
; \

2707 
uöt32
 
¨ó2
 = 
Xdñ
 - 
XY
; \

2708 
uöt32
 
¨ó3
 = 
Ydñ
 - 
XY
; \

2709 
uöt32
 
¨ó4
 = 
XY
; \

2710 
uöt32
 
ãmpCﬁ‹
 = ((
¨ó1
 * 
p1
) + \

2711 (
¨ó2
 * 
p2
) + \

2712 (
¨ó3
 * 
p3
) + \

2713 (
¨ó4
 * 
p4
)) >> 5; \

2714 
TYPE
 
theCﬁ‹
 = (
ãmpCﬁ‹
 & 
FIRST_THIRD_COLOR_MASK
Ë| (—empCﬁ‹ >> 16Ë& 
SECOND_COLOR_MASK
); \

2715 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2716 *
d
 = 
GFX
.
Z1
; \

2721 i‡(
PPU
.
Mode7Rïót
 == 3) \

2723 
X
 = (
x
 + 
HOff£t
) & 7; \

2724 
Y
 = (
yy
 + 
CíåeY
) & 7; \

2725 
uöt32
 
b
 = *(
VRAM1
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2726 
GFX
.
Z1
 = 
Mode7Dïths
 [(
b
 & GFX.
Mode7Pri‹ôyMask
) >> 7]; \

2727 i‡(
GFX
.
Z1
 > *
d
 && 
b
) \

2729 
TYPE
 
theCﬁ‹
 = 
COLORFUNC
; \

2730 *
p
 = (
FUNC
Ë| 
ALPHA_BITS_MASK
; \

2731 *
d
 = 
GFX
.
Z1
; \

2738 }

	)

2740 
STATIC
 
uöt32
 
	$Q_INTERPOLATE
(
uöt32
 
A
, uöt32 
B
, uöt32 
C
, uöt32 
D
)

2742 
uöt32
 
x
 = ((
A
 >> 2Ë& 
HIGH_BITS_SHIFTED_TWO_MASK
) +

2743 ((
B
 >> 2Ë& 
HIGH_BITS_SHIFTED_TWO_MASK
) +

2744 ((
C
 >> 2Ë& 
HIGH_BITS_SHIFTED_TWO_MASK
) +

2745 ((
D
 >> 2Ë& 
HIGH_BITS_SHIFTED_TWO_MASK
);

2746 
uöt32
 
y
 = (
A
 & 
TWO_LOW_BITS_MASK
) +

2747 (
B
 & 
TWO_LOW_BITS_MASK
) +

2748 (
C
 & 
TWO_LOW_BITS_MASK
) +

2749 (
D
 & 
TWO_LOW_BITS_MASK
);

2750 
y
 = (y>>2Ë& 
TWO_LOW_BITS_MASK
;

2751  
x
+
y
;

2752 
	}
}

2754 
	$DøwBGMode7Background16_i
 (
uöt8
 *
S¸ìn
, 
bg
)

2756 
	`RENDER_BACKGROUND_MODE7_i
 (
uöt16
, 
theCﬁ‹
, (
GFX
.
S¸ìnCﬁ‹s
[
b
 & GFX.
Mode7Mask
]));

2757 
	}
}

2759 
	$DøwBGMode7Background16Add_i
 (
uöt8
 *
S¸ìn
, 
bg
)

2761 
	`RENDER_BACKGROUND_MODE7_i
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2762 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2763 (
	`COLOR_ADD
 (
theCﬁ‹
,

2764 
p
 [
GFX
.
Dñè
])) :

2765 (
	`COLOR_ADD
 (
theCﬁ‹
,

2766 
GFX
.
FixedCﬁour
))) :

2767 
theCﬁ‹
, (
GFX
.
S¸ìnCﬁ‹s
[
b
 & GFX.
Mode7Mask
]));

2768 
	}
}

2770 
	$DøwBGMode7Background16Add1_2_i
 (
uöt8
 *
S¸ìn
, 
bg
)

2772 
	`RENDER_BACKGROUND_MODE7_i
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2773 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2774 
	`COLOR_ADD1_2
 (
theCﬁ‹
,

2775 
p
 [
GFX
.
Dñè
]) :

2776 
	`COLOR_ADD
 (
theCﬁ‹
,

2777 
GFX
.
FixedCﬁour
)) :

2778 
theCﬁ‹
, (
GFX
.
S¸ìnCﬁ‹s
[
b
 & GFX.
Mode7Mask
]));

2779 
	}
}

2781 
	$DøwBGMode7Background16Sub_i
 (
uöt8
 *
S¸ìn
, 
bg
)

2783 
	`RENDER_BACKGROUND_MODE7_i
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2784 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2785 
	`COLOR_SUB
 (
theCﬁ‹
,

2786 
p
 [
GFX
.
Dñè
]) :

2787 
	`COLOR_SUB
 (
theCﬁ‹
,

2788 
GFX
.
FixedCﬁour
)) :

2789 
theCﬁ‹
, (
GFX
.
S¸ìnCﬁ‹s
[
b
 & GFX.
Mode7Mask
]));

2790 
	}
}

2792 
	$DøwBGMode7Background16Sub1_2_i
 (
uöt8
 *
S¸ìn
, 
bg
)

2794 
	`RENDER_BACKGROUND_MODE7_i
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2795 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2796 
	`COLOR_SUB1_2
 (
theCﬁ‹
,

2797 
p
 [
GFX
.
Dñè
]) :

2798 
	`COLOR_SUB
 (
theCﬁ‹
,

2799 
GFX
.
FixedCﬁour
)) :

2800 
theCﬁ‹
, (
GFX
.
S¸ìnCﬁ‹s
[
b
 & GFX.
Mode7Mask
]));

2801 
	}
}

2803 
	#_BUILD_SETUP
(
F
) \

2804 
GFX
.
BuûdPixñ
 = BuûdPixñ##
F
; \

2805 
GFX
.
BuûdPixñ2
 = BuûdPixñ2##
F
; \

2806 
GFX
.
Decompo£Pixñ
 = Decompo£Pixñ##
F
; \

2807 
RED_LOW_BIT_MASK
 = 
RED_LOW_BIT_MASK_
##
F
; \

2808 
GREEN_LOW_BIT_MASK
 = 
GREEN_LOW_BIT_MASK_
##
F
; \

2809 
BLUE_LOW_BIT_MASK
 = 
BLUE_LOW_BIT_MASK_
##
F
; \

2810 
RED_HI_BIT_MASK
 = 
RED_HI_BIT_MASK_
##
F
; \

2811 
GREEN_HI_BIT_MASK
 = 
GREEN_HI_BIT_MASK_
##
F
; \

2812 
BLUE_HI_BIT_MASK
 = 
BLUE_HI_BIT_MASK_
##
F
; \

2813 
MAX_RED
 = 
MAX_RED_
##
F
; \

2814 
MAX_GREEN
 = 
MAX_GREEN_
##
F
; \

2815 
MAX_BLUE
 = 
MAX_BLUE_
##
F
; \

2816 
GREEN_HI_BIT
 = ((
MAX_GREEN_
##
F
 + 1) >> 1); \

2817 
SPARE_RGB_BIT_MASK
 = 
SPARE_RGB_BIT_MASK_
##
F
; \

2818 
RGB_LOW_BITS_MASK
 = (
RED_LOW_BIT_MASK_
##
F
 | \

2819 
GREEN_LOW_BIT_MASK_
##
F
 | \

2820 
BLUE_LOW_BIT_MASK_
##
F
); \

2821 
RGB_HI_BITS_MASK
 = (
RED_HI_BIT_MASK_
##
F
 | \

2822 
GREEN_HI_BIT_MASK_
##
F
 | \

2823 
BLUE_HI_BIT_MASK_
##
F
); \

2824 
RGB_HI_BITS_MASKx2
 = ((
RED_HI_BIT_MASK_
##
F
 | \

2825 
GREEN_HI_BIT_MASK_
##
F
 | \

2826 
BLUE_HI_BIT_MASK_
##
F
) << 1); \

2827 
RGB_REMOVE_LOW_BITS_MASK
 = ~
RGB_LOW_BITS_MASK
; \

2828 
FIRST_COLOR_MASK
 = 
FIRST_COLOR_MASK_
##
F
; \

2829 
SECOND_COLOR_MASK
 = 
SECOND_COLOR_MASK_
##
F
; \

2830 
THIRD_COLOR_MASK
 = 
THIRD_COLOR_MASK_
##
F
; \

2831 
ALPHA_BITS_MASK
 = 
ALPHA_BITS_MASK_
##
F
; \

2832 
FIRST_THIRD_COLOR_MASK
 = 
FIRST_COLOR_MASK
 | 
THIRD_COLOR_MASK
; \

2833 
TWO_LOW_BITS_MASK
 = 
RGB_LOW_BITS_MASK
 | (RGB_LOW_BITS_MASK << 1); \

2834 
HIGH_BITS_SHIFTED_TWO_MASK
 = (–(
FIRST_COLOR_MASK
 | 
SECOND_COLOR_MASK
 | 
THIRD_COLOR_MASK
) & \

2835 ~
TWO_LOW_BITS_MASK
 ) >> 2);

	)

2837 
	$RídîS¸ìn
 (
uöt8
 *
S¸ìn
, 
boﬁ8_32
 
sub
, boﬁ8_32 
f‹˚_no_add
, uöt8 
D
)

2839 
boﬁ8_32
 
BG0
;

2840 
boﬁ8_32
 
BG1
;

2841 
boﬁ8_32
 
BG2
;

2842 
boﬁ8_32
 
BG3
;

2843 
boﬁ8_32
 
OB
;

2845 
GFX
.
S
 = 
S¸ìn
;

2847 i‡(!
sub
)

2849 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [0];

2850 
BG0
 = 
	`ON_MAIN
 (0Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG0
);

2851 
BG1
 = 
	`ON_MAIN
 (1Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG1
);

2852 
BG2
 = 
	`ON_MAIN
 (2Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG2
);

2853 
BG3
 = 
	`ON_MAIN
 (3Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG3
);

2854 
OB
 = 
	`ON_MAIN
 (4Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_OBJ
);

2858 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [1];

2859 
BG0
 = 
	`ON_SUB
 (0Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG0
);

2860 
BG1
 = 
	`ON_SUB
 (1Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG1
);

2861 
BG2
 = 
	`ON_SUB
 (2Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG2
);

2862 
BG3
 = 
	`ON_SUB
 (3Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG3
);

2863 
OB
 = 
	`ON_SUB
 (4Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_OBJ
);

2866 
sub
 |
f‹˚_no_add
;

2868 i‡(
PPU
.
BGMode
 <= 1)

2870 i‡(
OB
)

2872 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(4));

2873 
	`DøwOBJS
 (!
sub
, 
D
);

2875 i‡(
BG0
)

2877 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(0));

2878 
	`DøwBackground
 (
PPU
.
BGMode
, 0, 
D
 + 10, D + 14);

2880 i‡(
BG1
)

2882 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(1));

2883 
	`DøwBackground
 (
PPU
.
BGMode
, 1, 
D
 + 9, D + 13);

2885 i‡(
BG2
)

2887 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(2));

2888 
	`DøwBackground
 (
PPU
.
BGMode
, 2, 
D
 + 3,

2889 (
Mem‹y
.
FûlRAM
 [0x2105] & 8Ë=0 ? 
D
 + 6 : D + 17);

2891 i‡(
BG3
 && 
PPU
.
BGMode
 == 0)

2893 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(3));

2894 
	`DøwBackground
 (
PPU
.
BGMode
, 3, 
D
 + 2, D + 5);

2897 i‡(
PPU
.
BGMode
 != 7)

2899 i‡(
OB
)

2901 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(4));

2902 
	`DøwOBJS
 (!
sub
, 
D
);

2904 i‡(
BG0
)

2906 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(0));

2907 
	`DøwBackground
 (
PPU
.
BGMode
, 0, 
D
 + 5, D + 13);

2909 i‡(
PPU
.
BGMode
 !6 && 
BG1
)

2911 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(1));

2912 
	`DøwBackground
 (
PPU
.
BGMode
, 1, 
D
 + 2, D + 9);

2917 i‡(
OB
)

2919 
	`Sñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(4));

2920 
	`DøwOBJS
 (!
sub
, 
D
);

2922 i‡(
BG0
 || ((
Mem‹y
.
FûlRAM
 [0x2133] & 0x40Ë&& 
BG1
))

2924 
bg
;

2926 i‡(
Mem‹y
.
FûlRAM
 [0x2133] & 0x40)

2928 
GFX
.
Mode7Mask
 = 0x7f;

2929 
GFX
.
Mode7Pri‹ôyMask
 = 0x80;

2930 
Mode7Dïths
 [0] = 5 + 
D
;

2931 
Mode7Dïths
 [1] = 9 + 
D
;

2932 
bg
 = 1;

2936 
GFX
.
Mode7Mask
 = 0xff;

2937 
GFX
.
Mode7Pri‹ôyMask
 = 0;

2938 
Mode7Dïths
 [0] = 5 + 
D
;

2939 
Mode7Dïths
 [1] = 5 + 
D
;

2940 
bg
 = 0;

2942 i‡(
sub
 || !
	`SUB_OR_ADD
(0))

2944 i‡(!
Sëtögs
.
Mode7I¡îpﬁ©e
)

2945 
	`DøwBGMode7Background16
 (
S¸ìn
, 
bg
);

2947 
	`DøwBGMode7Background16_i
 (
S¸ìn
, 
bg
);

2951 i‡(
GFX
.
r2131
 & 0x80)

2953 i‡(
GFX
.
r2131
 & 0x40)

2955 i‡(!
Sëtögs
.
Mode7I¡îpﬁ©e
)

2956 
	`DøwBGMode7Background16Sub1_2
 (
S¸ìn
, 
bg
);

2958 
	`DøwBGMode7Background16Sub1_2_i
 (
S¸ìn
, 
bg
);

2962 i‡(!
Sëtögs
.
Mode7I¡îpﬁ©e
)

2963 
	`DøwBGMode7Background16Sub
 (
S¸ìn
, 
bg
);

2965 
	`DøwBGMode7Background16Sub_i
 (
S¸ìn
, 
bg
);

2970 i‡(
GFX
.
r2131
 & 0x40)

2972 i‡(!
Sëtögs
.
Mode7I¡îpﬁ©e
)

2973 
	`DøwBGMode7Background16Add1_2
 (
S¸ìn
, 
bg
);

2975 
	`DøwBGMode7Background16Add1_2_i
 (
S¸ìn
, 
bg
);

2979 i‡(!
Sëtögs
.
Mode7I¡îpﬁ©e
)

2980 
	`DøwBGMode7Background16Add
 (
S¸ìn
, 
bg
);

2982 
	`DøwBGMode7Background16Add_i
 (
S¸ìn
, 
bg
);

2988 
	}
}

2990 
	~"f⁄t.h
"

2992 
	$Di•œyCh¨
 (
uöt8
 *
S¸ìn
, uöt8 
c
)

2994 
löe
 = (((
c
 & 0x7fË- 32Ë>> 4Ë* 
f⁄t_height
;

2995 
off£t
 = (((
c
 & 0x7fË- 32Ë& 15Ë* 
f⁄t_width
;

2996 #i‚de‡
_SNESPPC


2997 i‡(
Sëtögs
.
SixãíBô
)

3000 
h
, 
w
;

3001 
uöt16
 *
s
 = (uöt16 *Ë
S¸ìn
;

3002 
h
 = 0; h < 
f⁄t_height
; h++, 
löe
++,

3003 
s
 +
GFX
.
PPL
 - 
f⁄t_width
)

3005 
w
 = 0; w < 
f⁄t_width
; w++, 
s
++)

3007 
uöt8
 
p
 = 
f⁄t
 [
löe
][
off£t
 + 
w
];

3009 i‡(
p
 == '#')

3010 *
s
 = 0xffff;

3012 i‡(
p
 == '.')

3013 *
s
 = 
BLACK
;

3017 #i‚de‡
_SNESPPC


3020 
h
, 
w
;

3021 
uöt8
 *
s
 = 
S¸ìn
;

3022 
h
 = 0; h < 
f⁄t_height
; h++, 
löe
++,

3023 
s
 +
GFX
.
PPL
 - 
f⁄t_width
)

3025 
w
 = 0; w < 
f⁄t_width
; w++, 
s
++)

3027 
uöt8
 
p
 = 
f⁄t
 [
löe
][
off£t
 + 
w
];

3029 i‡(
p
 == '#')

3030 *
s
 = 255;

3032 i‡(
p
 == '.')

3033 *
s
 = 
BLACK
;

3038 
	}
}

3040 
	$S9xDi•œyFømeR©e
 ()

3042 
uöt8
 *
S¸ìn
 = 
GFX
.Screen + 2 +

3043 (
IPPU
.
RídîedS¸ìnHeight
 - 
f⁄t_height
 - 1Ë* 
GFX
.
Pôch2
;

3044 
°rög
 [10];

3045 
Àn
 = 5;

3047 
	`•rötf
 (
°rög
, "%02d/%02d", 
IPPU
.
Di•œyedRídîedFømeCou¡
,

3048 (Ë
Mem‹y
.
ROMFømesPîSec⁄d
);

3050 
i
;

3051 #ifde‡
_SNESPPC


3052 
S¸ìn
 +(
f⁄t_width
 - 1Ë* (
uöt16
);

3054 
i
 = 0; i < 
Àn
; i++)

3056 
	`Di•œyCh¨
 (
S¸ìn
, 
°rög
 [
i
]);

3057 
S¸ìn
 +
Sëtögs
.
SixãíBô
 ? (
f⁄t_width
 - 1Ë*  (
uöt16
) :

3058 (
f⁄t_width
 - 1);

3060 
	}
}

3062 
	$S9xDi•œySåög
 (c⁄° *
°rög
)

3064 
uöt8
 *
S¸ìn
 = 
GFX
.Screen + 2 +

3065 (
IPPU
.
RídîedS¸ìnHeight
 - 
f⁄t_height
 * 5Ë* 
GFX
.
Pôch2
;

3066 
Àn
 = 
	`°æí
 (
°rög
);

3067 
max_ch¨s
 = 
IPPU
.
RídîedS¸ìnWidth
 / (
f⁄t_width
 - 1);

3068 
ch¨_cou¡
 = 0;

3069 
i
;

3071 
i
 = 0; i < 
Àn
; i++, 
ch¨_cou¡
++)

3073 i‡(
ch¨_cou¡
 >
max_ch¨s
 || 
°rög
 [
i
] < 32)

3075 
S¸ìn
 -
Sëtögs
.
SixãíBô
 ?

3076 (
f⁄t_width
 - 1Ë*  (
uöt16
Ë* 
max_ch¨s
 :

3077 (
f⁄t_width
 - 1Ë* 
max_ch¨s
;

3078 
S¸ìn
 +
f⁄t_height
 * 
GFX
.
Pôch
;

3079 i‡(
S¸ìn
 >
GFX
.S¸ì¿+ GFX.
Pôch
 * 
IPPU
.
RídîedS¸ìnHeight
)

3081 
ch¨_cou¡
 -
max_ch¨s
;

3083 i‡(
°rög
 [
i
] < 32)

3085 
	`Di•œyCh¨
 (
S¸ìn
, 
°rög
 [
i
]);

3086 
S¸ìn
 +
Sëtögs
.
SixãíBô
 ? (
f⁄t_width
 - 1Ë*  (
uöt16
) :

3087 (
f⁄t_width
 - 1);

3089 
	}
}

3091 
	$S9xUpd©eS¸ìn
 ()

3093 
öt32
 
x2
 = 1;

3095 
GFX
.
S
 = GFX.
S¸ìn
;

3097 *
mem‹yfûÃam
 = 
Mem‹y
.
FûlRAM
;

3100 
GFX
.
r2131
 = 
mem‹yfûÃam
 [0x2131];

3101 
GFX
.
r212c
 = 
mem‹yfûÃam
 [0x212c];

3102 
GFX
.
r212d
 = 
mem‹yfûÃam
 [0x212d];

3103 
GFX
.
r2130
 = 
mem‹yfûÃam
 [0x2130];

3110 
GFX
.
P£udo
 = (
mem‹yfûÃam
 [0x2133] & 8) != 0 &&

3111 (
GFX
.
r212c
 & 15Ë!(GFX.
r212d
 & 15) &&

3112 (
GFX
.
r2131
 & 0x3f) == 0;

3116 i‡(
IPPU
.
OBJCh™ged
)

3118 
	`S9xSëupOBJ
 ();

3121 i‡(
PPU
.
RecompuãClùWödows
)

3123 
	`CompuãClùWödows
 ();

3124 
PPU
.
RecompuãClùWödows
 = 
FALSE
;

3127 
GFX
.
SèπY
 = 
IPPU
.
PªviousLöe
;

3128 i‡((
GFX
.
EndY
 = 
IPPU
.
CuºítLöe
 - 1Ë>
PPU
.
S¸ìnHeight
)

3129 
GFX
.
EndY
 = 
PPU
.
S¸ìnHeight
 - 1;

3131 
uöt32
 
°¨ty
 = 
GFX
.
SèπY
;

3132 
uöt32
 
ídy
 = 
GFX
.
EndY
;

3134 #i‚de‡
RC_OPTIMIZED


3135 i‡(
Sëtögs
.
Suµ‹tHiRes
 &&

3136 (
PPU
.
BGMode
 =5 || PPU.BGModê=6 || 
IPPU
.
L©chedI¡îœ˚
))

3138 i‡(
PPU
.
BGMode
 == 5 || PPU.BGMode == 6)

3140 
IPPU
.
RídîedS¸ìnWidth
 = 512;

3141 
x2
 = 2;

3143 i‡(
IPPU
.
L©chedI¡îœ˚
)

3145 
°¨ty
 = 
GFX
.
SèπY
 * 2;

3146 
ídy
 = 
GFX
.
EndY
 * 2 + 1;

3148 i‡(!
IPPU
.
DoubÀWidthPixñs
)

3152 #i‚de‡
_SNESPPC


3153 i‡(
Sëtögs
.
SixãíBô
)

3156 #i‡
	`deföed
 (
USE_GLIDE
Ë|| deföed (
USE_OPENGL
)

3158 #ifde‡
USE_GLIDE


3159 (
Sëtögs
.
GlideE«bÀ
 && 
GFX
.
Pôch
 == 512) ||

3161 #ifde‡
USE_OPENGL


3162 (
Sëtögs
.
O≥nGLE«bÀ
 && 
GFX
.
Pôch
 == 512) ||

3170 
öt32
 
y
 = (öt32Ë
GFX
.
SèπY
 - 1; y >= 0; y--)

3172 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
) + 255;

3173 
uöt16
 *
q
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
RólPôch
) + 510;

3174 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3175 *
q
 = *(q + 1Ë*
p
;

3177 
GFX
.
Pôch
 = GFX.
Pôch2
 = GFX.
RólPôch
;

3178 
GFX
.
PPL
 = GFX.
Pôch
 >> 1;

3179 
GFX
.
PPLx2
 = GFX.
Pôch
;

3180 
GFX
.
ZPôch
 = GFX.
PPL
;

3184 
uöt32
 
y
 = 0; y < 
GFX
.
SèπY
; y++)

3186 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
) + 255;

3187 
uöt16
 *
q
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
) + 510;

3188 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3189 *
q
 = *(q + 1Ë*
p
;

3192 #i‚de‡
_SNESPPC


3195 
uöt32
 
y
 = 0; y < 
GFX
.
SèπY
; y++)

3197 
uöt8
 *
p
 = 
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
 + 255;

3198 
uöt8
 *
q
 = 
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
 + 510;

3199 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3200 *
q
 = *(q + 1Ë*
p
;

3204 
IPPU
.
DoubÀWidthPixñs
 = 
TRUE
;

3209 
uöt32
 
bœck
 = 
BLACK
 | (BLACK << 16);

3212 i‡(
Sëtögs
.
Tøn•¨ícy
 && Sëtögs.
SixãíBô
)

3214 i‡(
GFX
.
P£udo
)

3216 
GFX
.
r2131
 = 0x5f;

3217 
GFX
.
r212d
 = (
Mem‹y
.
FûlRAM
 [0x212c] ^

3218 
Mem‹y
.
FûlRAM
 [0x212d]) & 15;

3219 
GFX
.
r212c
 &~GFX.
r212d
;

3220 
GFX
.
r2130
 |= 2;

3224 i‡(!
PPU
.
F‹˚dBœnkög
 && 
ADD_OR_SUB_ON_ANYTHING
 &&

3225 (
GFX
.
r2130
 & 0x30) != 0x30 &&

3226 !((
GFX
.
r2130
 & 0x30Ë=0x10 && 
IPPU
.
Clù
[1].
Cou¡
[5] == 0))

3229 
ClùD©a
 *
pClù
;

3230 
uöt32
 
fixedCﬁour
;

3231 
GFX
.
FixedCﬁour
 = 
	`BUILD_PIXEL
 (
IPPU
.
XB
 [
PPU
.
FixedCﬁourRed
],

3232 
IPPU
.
XB
 [
PPU
.
FixedCﬁourGªí
],

3233 
IPPU
.
XB
 [
PPU
.
FixedCﬁourBlue
]);

3234 
fixedCﬁour
 = (
GFX
.
FixedCﬁour
<<16|GFX.FixedColour);

3237 
pClù
 = &
IPPU
.
Clù
 [1];

3241 i‡(
pClù
->
Cou¡
 [5])

3246 #ifde‡
RC_OPTIMIZED


3247 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3250 
	`ZîoMem‹y
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
,

3251 
IPPU
.
RídîedS¸ìnWidth
);

3252 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3253 
IPPU
.
RídîedS¸ìnWidth
);

3255 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3257 
	`mem£t
 ((
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
), 
bœck
, 
IPPU
.
RídîedS¸ìnWidth
);

3259 
uöt32
 
c
 = 0; c < 
pClù
->
Cou¡
 [5]; c++)

3261 i‡(
pClù
->
Right
 [
c
][5] >ÖClù->
Le·
 [c][5])

3263 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
pClù
->
Le·
 [
c
][5] * 
x2
,

3264 1, (
pClù
->
Right
 [
c
][5] -ÖClù->
Le·
 [c][5]Ë* 
x2
);

3265 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3271 
	`mem£t
 ((
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
pClù
->
Le·
 [
c
][5] * 
x2
,

3272 
GFX
.
FixedCﬁour
,

3273 
pClù
->
Right
[
c
][5]*
x2
 -ÖClù->
Le·
 [c][5] * x2);

3281 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3284 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
),0,

3285 
IPPU
.
RídîedS¸ìnWidth
>>2);

3287 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
),0,

3288 
IPPU
.
RídîedS¸ìnWidth
>>2);

3291 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3293 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
), 
bœck
, 
IPPU
.
RídîedS¸ìnWidth
>>1);

3297 
uöt32
 
c
 = 0; c < 
pClù
->
Cou¡
 [5]; c++)

3299 i‡(
pClù
->
Right
 [
c
][5] >ÖClù->
Le·
 [c][5])

3301 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
pClù
->
Le·
 [
c
][5] * 
x2
,

3302 1, (
pClù
->
Right
 [
c
][5] -ÖClù->
Le·
 [c][5]Ë* 
x2
);

3303 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3310 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

3311 
uöt16
 *
q
 = 
p
 + 
pClù
->
Right
 [
c
][5] * 
x2
;

3312 
p
 +
pClù
->
Le·
 [
c
][5] * 
x2
;

3314 
p
 < 
q
)

3315 *
p
++ = (
uöt16
Ë
GFX
.
FixedCﬁour
;

3328 #ifde‡
RC_OPTIMIZED


3330 i‡(
GFX
.
ZPôch
 =(
uöt32
)
IPPU
.
RídîedS¸ìnWidth
)

3333 
	`mem£t
 (
GFX
.
ZBuf„r
 + 
°¨ty
 * GFX.
ZPôch
, 0, GFX.ZPôch * (
ídy
 - starty - 1));

3334 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
°¨ty
 * GFX.
ZPôch
, 1, GFX.ZPôch * (
ídy
 - starty - 1));

3338 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3340 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3341 
IPPU
.
RídîedS¸ìnWidth
);

3342 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
, 1,

3343 
IPPU
.
RídîedS¸ìnWidth
);

3347 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3353 i‡(
GFX
.
Pôch2
 =(
uöt32
)
IPPU
.
RídîedS¸ìnWidth
)

3355 
	`mem£t
 ((
GFX
.
SubS¸ìn
 + 
°¨ty
 * GFX.
Pôch2
),

3356 
GFX
.
FixedCﬁour
 | (GFX.FixedColour << 16),

3357 
GFX
.
Pôch2
 * (
ídy
 - 
°¨ty
 - 1));

3361 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3363 
	`mem£t
 ((
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
),

3364 
GFX
.
FixedCﬁour
 | (GFX.FixedColour << 16),

3365 
IPPU
.
RídîedS¸ìnWidth
);

3372 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3375 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
),0,

3376 
IPPU
.
RídîedS¸ìnWidth
>>2);

3378 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
), 0x01010101,

3379 
IPPU
.
RídîedS¸ìnWidth
>>2);

3380 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3388 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
), 
fixedCﬁour
,

3389 
IPPU
.
RídîedS¸ìnWidth
>>1);

3396 i‡(
ANYTHING_ON_SUB
)

3398 
GFX
.
DB
 = GFX.
SubZBuf„r
;

3399 
	`RídîS¸ìn
 (
GFX
.
SubS¸ìn
, 
TRUE
, TRUE, 
SUB_SCREEN_DEPTH
);

3402 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3404 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3406 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3407 
uöt8
 *
d
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 ;

3408 
uöt8
 *
e
 = 
d
 + 
SNES_WIDTH
;

3410 
d
 < 
e
)

3412 i‡(*
d
 > 1)

3413 *
p
 = *’ + 
GFX
.
Dñè
);

3415 *
p
 = 
BLACK
;

3416 
d
++;

3417 
p
++;

3422 
GFX
.
DB
 = GFX.
ZBuf„r
;

3423 
	`RídîS¸ìn
 (
GFX
.
S¸ìn
, 
FALSE
, FALSE, 
MAIN_SCREEN_DEPTH
);

3424 i‡(
	`SUB_OR_ADD
(5))

3426 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0];

3427 
uöt32
 
Le·
 = 0;

3428 
uöt32
 
Right
 = 256;

3429 
uöt32
 
Cou¡
;

3431 
pClù
 = &
IPPU
.
Clù
 [0];

3433 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3435 i‡(!(
Cou¡
 = 
pClù
->Count [5]))

3437 
Le·
 = 0;

3438 
Right
 = 256 * 
x2
;

3439 
Cou¡
 = 1;

3442 
uöt32
 
b
 = 0; b < 
Cou¡
; b++)

3444 i‡(
pClù
->
Cou¡
 [5])

3446 
Le·
 = 
pClù
->Le· [
b
][5] * 
x2
;

3447 
Right
 = 
pClù
->Righà[
b
][5] * 
x2
;

3448 i‡(
Right
 <
Le·
)

3452 i‡(
GFX
.
r2131
 & 0x80)

3454 i‡(
GFX
.
r2131
 & 0x40)

3457 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3458 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3459 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3460 
uöt8
 *
e
 = 
d
 + 
Right
;

3461 
uöt16
 
back_fixed
 = 
	`COLOR_SUB
 (
back
, 
GFX
.
FixedCﬁour
);

3463 
d
 +
Le·
;

3464 
d
 < 
e
)

3466 i‡(*
d
 == 0)

3468 i‡(*
s
)

3470 i‡(*
s
 != 1)

3471 *
p
 = 
	`COLOR_SUB1_2
 (
back
, *’ + 
GFX
.
Dñè
));

3473 *
p
 = 
back_fixed
;

3476 *
p
 = (
uöt16
Ë
back
;

3478 
d
++;

3479 
p
++;

3480 
s
++;

3486 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3487 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3488 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3489 
uöt8
 *
e
 = 
d
 + 
Right
;

3490 
uöt16
 
back_fixed
 = 
	`COLOR_SUB
 (
back
, 
GFX
.
FixedCﬁour
);

3492 
d
 +
Le·
;

3493 
d
 < 
e
)

3495 i‡(*
d
 == 0)

3497 i‡(*
s
)

3499 i‡(*
s
 != 1)

3500 *
p
 = 
	`COLOR_SUB
 (
back
, *’ + 
GFX
.
Dñè
));

3502 *
p
 = 
back_fixed
;

3505 *
p
 = (
uöt16
Ë
back
;

3507 
d
++;

3508 
p
++;

3509 
s
++;

3514 i‡(
GFX
.
r2131
 & 0x40)

3516 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3517 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3518 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3519 
uöt8
 *
e
 = 
d
 + 
Right
;

3520 
uöt16
 
back_fixed
 = 
	`COLOR_ADD
 (
back
, 
GFX
.
FixedCﬁour
);

3521 
d
 +
Le·
;

3522 
d
 < 
e
)

3524 i‡(*
d
 == 0)

3526 i‡(*
s
)

3528 i‡(*
s
 != 1)

3529 *
p
 = 
	`COLOR_ADD1_2
 (
back
, *’ + 
GFX
.
Dñè
));

3531 *
p
 = 
back_fixed
;

3534 *
p
 = (
uöt16
Ë
back
;

3536 
d
++;

3537 
p
++;

3538 
s
++;

3542 i‡(
back
 != 0)

3544 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3545 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3546 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3547 
uöt8
 *
e
 = 
d
 + 
Right
;

3548 
uöt16
 
back_fixed
 = 
	`COLOR_ADD
 (
back
, 
GFX
.
FixedCﬁour
);

3549 
d
 +
Le·
;

3550 
d
 < 
e
)

3552 i‡(*
d
 == 0)

3554 i‡(*
s
)

3556 i‡(*
s
 != 1)

3557 *
p
 = 
	`COLOR_ADD
 (
back
, *’ + 
GFX
.
Dñè
));

3559 *
p
 = 
back_fixed
;

3562 *
p
 = (
uöt16
Ë
back
;

3564 
d
++;

3565 
p
++;

3566 
s
++;

3571 i‡(!
pClù
->
Cou¡
 [5])

3577 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3578 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3579 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3580 
uöt8
 *
e
 = 
d
 + 
Right
;

3581 
d
 +
Le·
;

3582 
d
 < 
e
)

3584 i‡(*
d
 == 0)

3586 i‡(*
s
)

3588 i‡(*
s
 != 1)

3589 *
p
 = *’ + 
GFX
.
Dñè
);

3591 *
p
 = 
GFX
.
FixedCﬁour
;

3594 *
p
 = (
uöt16
Ë
back
;

3596 
d
++;

3597 
p
++;

3598 
s
++;

3609 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] | (IPPU.ScreenColors [0] << 16);

3610 
pClù
 = &
IPPU
.
Clù
 [0];

3612 i‡(
pClù
->
Cou¡
 [5])

3614 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3616 
uöt32
 
b
 = 0; b < 
pClù
->
Cou¡
 [5]; b++)

3618 
uöt32
 
Le·
 = 
pClù
->Le· [
b
][5] * 
x2
;

3619 
uöt32
 
Right
 = 
pClù
->Righà[
b
][5] * 
x2
;

3620 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3621 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3622 
uöt8
 *
e
 = 
d
 + 
Right
;

3623 
d
 +
Le·
;

3625 
d
 < 
e
)

3627 i‡(*
d
++ == 0)

3628 *
p
 = (
öt16
Ë
back
;

3629 
p
++;

3636 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3638 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3639 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3640 
uöt8
 *
e
 = 
d
 + 256 * 
x2
;

3642 
d
 < 
e
)

3644 i‡(*
d
 == 0)

3645 #ifde‡
RC_OPTIMIZED


3646 *
p
++ = 
back
;

3647 
d
++;

3649 *
p
 = (
öt16
Ë
back
;

3650 
d
++;

3651 
p
++;

3664 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] |

3665 (
IPPU
.
S¸ìnCﬁ‹s
 [0] << 16);

3668 i‡(
PPU
.
F‹˚dBœnkög
)

3669 
back
 = 
bœck
;

3673 i‡(
IPPU
.
Clù
 [0].
Cou¡
[5])

3676 #ifde‡
RC_OPTIMIZED


3677 i‡(
GFX
.
Pôch2
 =(
uöt32
)
IPPU
.
RídîedS¸ìnWidth
)

3679 
	`mem£t
 (
GFX
.
S¸ìn
 + 
°¨ty
 * GFX.
Pôch2
, 
bœck
,

3680 
GFX
.
Pôch2
 * (
ídy
 - 
°¨ty
 - 1));

3684 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3686 
	`mem£t
 (
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
, 
bœck
,

3687 
GFX
.
Pôch2
);

3690 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3692 
uöt32
 
c
 = 0; c < 
IPPU
.
Clù
 [0].
Cou¡
 [5]; c++)

3694 i‡(
IPPU
.
Clù
 [0].
Right
 [
c
][5] > IPPU.Clù [0].
Le·
 [c][5])

3697 
	`mem£t
 ((
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
IPPU
.
Clù
 [0].
Le·
 [
c
][5] * 
x2
,

3698 
back
,

3699 
IPPU
.
Clù
 [0].
Right
 [
c
][5] * 
x2
 - IPPU.Clù [0].
Le·
 [c][5] * x2);

3705 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3707 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
), 
bœck
,

3708 
IPPU
.
RídîedS¸ìnWidth
>>1);

3710 i‡(
bœck
!=
back
)

3712 
uöt32
 
c
 = 0; c < 
IPPU
.
Clù
 [0].
Cou¡
 [5]; c++)

3714 i‡(
IPPU
.
Clù
 [0].
Right
 [
c
][5] > IPPU.Clù [0].
Le·
 [c][5])

3716 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3717 
uöt16
 *
q
 = 
p
 + 
IPPU
.
Clù
 [0].
Right
 [
c
][5] * 
x2
;

3718 
p
 +
IPPU
.
Clù
 [0].
Le·
 [
c
][5] * 
x2
;

3720 
p
 < 
q
)

3721 *
p
++ = (
uöt16
Ë
back
;

3730 #ifde‡
RC_OPTIMIZED


3731 i‡(
GFX
.
Pôch2
 =(
uöt32
)
IPPU
.
RídîedS¸ìnWidth
)

3733 
	`mem£t
 (
GFX
.
S¸ìn
 + 
°¨ty
 * GFX.
Pôch2
, 
back
,

3734 
GFX
.
Pôch2
 * (
ídy
 - 
°¨ty
 - 1));

3738 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3740 
	`mem£t
 (
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
, 
back
,

3741 
GFX
.
Pôch2
);

3746 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3748 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
), 
back
,

3749 
IPPU
.
RídîedS¸ìnWidth
>>1);

3755 i‡(!
PPU
.
F‹˚dBœnkög
)

3757 #ifde‡
RC_OPTIMIZED


3758 i‡(
GFX
.
ZPôch
 =(
uöt32
)
IPPU
.
RídîedS¸ìnWidth
)

3760 
	`mem£t
 (
GFX
.
ZBuf„r
 + 
°¨ty
 * GFX.
ZPôch
, 0,

3761 
GFX
.
ZPôch
 * (
ídy
 - 
°¨ty
 - 1));

3765 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3767 
	`mem£t
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
, 0,

3768 
GFX
.
ZPôch
);

3773 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3775 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
), 0,

3776 
GFX
.
ZPôch
>>2);

3779 
GFX
.
DB
 = GFX.
ZBuf„r
;

3780 
	`RídîS¸ìn
 (
GFX
.
S¸ìn
, 
FALSE
, 
TRUE
, 
SUB_SCREEN_DEPTH
);

3786 #i‚de‡
_SNESPPC


3787 i‡(
Sëtögs
.
SixãíBô
)

3791 
uöt32
 
back
;

3792 i‡(!(
Mem‹y
.
FûlRAM
 [0x2131] & 0x80) &&(Memory.FillRAM[0x2131] & 0x20) &&

3793 (
PPU
.
FixedCﬁourRed
 || PPU.
FixedCﬁourGªí
 || PPU.
FixedCﬁourBlue
))

3795 
back
 = (
IPPU
.
XB
[
PPU
.
FixedCﬁourRed
]<<11) |

3796 (
IPPU
.
XB
[
PPU
.
FixedCﬁourGªí
] << 6) |

3797 (
IPPU
.
XB
[
PPU
.
FixedCﬁourBlue
] << 1) | 1;

3798 
back
 = (back << 16) | back;

3802 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] | (IPPU.ScreenColors [0] << 16);

3806 i‡(
PPU
.
F‹˚dBœnkög
)

3807 
back
 = 
bœck
;

3810 
	`Sñe˘TûeRídîî
 (
TRUE
);

3817 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3819 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
), 
back
,

3820 
IPPU
.
RídîedS¸ìnWidth
>>1);

3823 #i‚de‡
_SNESPPC


3830 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3832 
	`ZîoMem‹y
 (
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
,

3833 
IPPU
.
RídîedS¸ìnWidth
);

3837 i‡(!
PPU
.
F‹˚dBœnkög
)

3841 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3843 
	`mem£t32
 ((
uöt32_t
*)(
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
), 0,

3844 
IPPU
.
RídîedS¸ìnWidth
>>2);

3846 
GFX
.
DB
 = GFX.
ZBuf„r
;

3847 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [0];

3850 
	#FIXCLIP
(
n
) \

3851 i‡(
GFX
.
r212c
 & (1 << (
n
))) \

3852 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [0]; \

3854 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [1]

	)

3857 
	#DISPLAY
(
n
) \

3858 (!(
PPU
.
BG_F‹˚d
 & 
n
) && \

3859 (
GFX
.
r212c
 & 
n
) || \

3860 ((
GFX
.
r212d
 & 
n
Ë&& 
subadd
))

	)

3862 
uöt8
 
subadd
 = 
GFX
.
r2131
 & 0x3f;

3865 
boﬁ8_32
 
BG0
 = 
	`DISPLAY
(1Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG0
);

3866 
boﬁ8_32
 
BG1
 = 
	`DISPLAY
(2Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG1
);

3867 
boﬁ8_32
 
BG2
 = 
	`DISPLAY
(4Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG2
);

3868 
boﬁ8_32
 
BG3
 = 
	`DISPLAY
(8Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_BG3
);

3869 
boﬁ8_32
 
OB
 = 
	`DISPLAY
(16Ë&& !(
Sëtögs
.
os9x_hack
 & 
GFX_IGNORE_OBJ
);

3871 i‡(
PPU
.
BGMode
 <= 1)

3874 i‡(
OB
)

3876 
	`FIXCLIP
(4);

3877 
	`DøwOBJS
 ();

3879 i‡(
BG0
)

3881 
	`FIXCLIP
(0);

3882 
	`DøwBackground
 (
PPU
.
BGMode
, 0, 10, 14);

3884 i‡(
BG1
)

3886 
	`FIXCLIP
(1);

3887 
	`DøwBackground
 (
PPU
.
BGMode
, 1, 9, 13);

3889 i‡(
BG2
)

3891 
	`FIXCLIP
(2);

3892 
	`DøwBackground
 (
PPU
.
BGMode
, 2, 3,

3893 (
Mem‹y
.
FûlRAM
 [0x2105] & 8) == 0 ? 6 : 17);

3895 i‡(
BG3
 && 
PPU
.
BGMode
 == 0)

3897 
	`FIXCLIP
(3);

3898 
	`DøwBackground
 (
PPU
.
BGMode
, 3, 2, 5);

3901 i‡(
PPU
.
BGMode
 != 7)

3904 i‡(
OB
)

3906 
	`FIXCLIP
(4);

3907 
	`DøwOBJS
 ();

3909 i‡(
BG0
)

3911 
	`FIXCLIP
(0);

3912 
	`DøwBackground
 (
PPU
.
BGMode
, 0, 5, 13);

3914 i‡(
BG1
 && 
PPU
.
BGMode
 != 6)

3916 
	`FIXCLIP
(1);

3917 
	`DøwBackground
 (
PPU
.
BGMode
, 1, 2, 9);

3923 i‡(
OB
)

3925 
	`FIXCLIP
(4);

3926 
	`DøwOBJS
 ();

3928 i‡(
BG0
 || ((
Mem‹y
.
FûlRAM
 [0x2133] & 0x40Ë&& 
BG1
))

3930 
bg
;

3931 
	`FIXCLIP
(0);

3932 i‡(
Mem‹y
.
FûlRAM
 [0x2133] & 0x40)

3934 
GFX
.
Mode7Mask
 = 0x7f;

3935 
GFX
.
Mode7Pri‹ôyMask
 = 0x80;

3936 
Mode7Dïths
 [0] = 5;

3937 
Mode7Dïths
 [1] = 9;

3938 
bg
 = 1;

3942 
GFX
.
Mode7Mask
 = 0xff;

3943 
GFX
.
Mode7Pri‹ôyMask
 = 0;

3944 
Mode7Dïths
 [0] = 5;

3945 
Mode7Dïths
 [1] = 5;

3946 
bg
 = 0;

3949 #i‚de‡
_SNESPPC


3950 i‡(!
Sëtögs
.
SixãíBô
)

3951 
	`DøwBGMode7Background
 (
GFX
.
S¸ìn
, 
bg
);

3955 i‡(!
Sëtögs
.
Mode7I¡îpﬁ©e
)

3957 
	`DøwBGMode7Background16
 (
GFX
.
S¸ìn
, 
bg
);

3961 
	`DøwBGMode7Background16_i
 (
GFX
.
S¸ìn
, 
bg
);

3968 #i‚de‡
RC_OPTIMIZE


3969 i‡(
Sëtögs
.
Suµ‹tHiRes
 && 
PPU
.
BGMode
 != 5 && PPU.BGMode != 6)

3971 i‡(
IPPU
.
DoubÀWidthPixñs
)

3975 #i‚de‡
_SNESPPC


3976 i‡(
Sëtögs
.
SixãíBô
)

3979 
uöt32
 
y
 = 
GFX
.
SèπY
; y <GFX.
EndY
; y++)

3981 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
) + 255;

3982 
uöt16
 *
q
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
) + 510;

3983 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3984 *
q
 = *(q + 1Ë*
p
;

3987 #i‚de‡
_SNESPPC


3990 
uöt32
 
y
 = 
GFX
.
SèπY
; y <GFX.
EndY
; y++)

3992 
uöt8
 *
p
 = 
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
 + 255;

3993 
uöt8
 *
q
 = 
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch
 + 510;

3994 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3995 *
q
 = *(q + 1Ë*
p
;

4001 i‡(
IPPU
.
L©chedI¡îœ˚
)

4005 
uöt32
 
y
 = 
GFX
.
SèπY
; y <GFX.
EndY
; y++)

4007 
	`mem˝y32
 ((
uöt32_t
*)(
GFX
.
S¸ìn
 + (
y
 * 2 + 1Ë* GFX.
Pôch2
),

4008 (
uöt32_t
*)(
GFX
.
S¸ìn
 + 
y
 * 2 * GFX.
Pôch2
),

4009 
GFX
.
Pôch2
>>2);

4014 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
;

4015 
	}
}

4017 #ifde‡
GFX_MULTI_FORMAT


4019 
	#_BUILD_PIXEL
(
F
) \

4020 
uöt32
 
BuûdPixñ
##
	`F
(uöt32 
R
, uöt32 
G
, uöt32 
B
) \

4022  (
BUILD_PIXEL_
##
	`F
(
R
,
G
,
B
)); \

4024 
uöt32
 
BuûdPixñ2
##
	`F
(uöt32 
R
, uöt32 
G
, uöt32 
B
) \

4026  (
BUILD_PIXEL2_
##
	`F
(
R
,
G
,
B
)); \

4028 
Decompo£Pixñ
##
	`F
(
uöt32
 
pixñ
, uöt32 &
R
, uöt32 &
G
, uöt32 &
B
) \

4030 
DECOMPOSE_PIXEL_
##
	`F
(
pixñ
,
R
,
G
,
B
); \

4031 }

	)

4033 
	$_BUILD_PIXEL
(
RGB565
)

4034 
	$_BUILD_PIXEL
(
RGB555
)

4035 
	$_BUILD_PIXEL
(
BGR565
)

4036 
	$_BUILD_PIXEL
(
BGR555
)

4037 
	$_BUILD_PIXEL
(
GBR565
)

4038 
	$_BUILD_PIXEL
(
GBR555
)

4039 
	$_BUILD_PIXEL
(
RGB5551
)

4041 
boﬁ8_32
 
	$S9xSëRídîPixñF‹m©
 (
f‹m©
)

4043 
uöt32
 
cuºít_gøphic_f‹m©
;

4045 
cuºít_gøphic_f‹m©
 = 
f‹m©
;

4047 
f‹m©
)

4049 
RGB565
:

4050 
	`_BUILD_SETUP
(
RGB565
)

4051  (
TRUE
);

4052 
RGB555
:

4053 
	`_BUILD_SETUP
(
RGB555
)

4054  (
TRUE
);

4055 
BGR565
:

4056 
	`_BUILD_SETUP
(
BGR565
)

4057  (
TRUE
);

4058 
BGR555
:

4059 
	`_BUILD_SETUP
(
BGR555
)

4060  (
TRUE
);

4061 
GBR565
:

4062 
	`_BUILD_SETUP
(
GBR565
)

4063  (
TRUE
);

4064 
GBR555
:

4065 
	`_BUILD_SETUP
(
GBR555
)

4066  (
TRUE
);

4067 
RGB5551
:

4068 
	`_BUILD_SETUP
(
RGB5551
)

4069  (
TRUE
);

4073  (
FALSE
);

4074 
	}
}

	@gfx.h

41 #i‚de‡
_GFX_H_


42 
	#_GFX_H_


	)

44 
	~"p‹t.h
"

46 
	sSGFX
{

48 
uöt8
 *
	mS¸ìn
;

49 
uöt8
 *
	mSubS¸ìn
;

50 
uöt8
 *
	mZBuf„r
;

51 
uöt8
 *
	mSubZBuf„r
;

52 
uöt32
 
	mPôch
;

55 
	mDñè
;

56 
uöt16
 *
	mX2
;

57 
uöt16
 *
	mZERO_OR_X2
;

58 
uöt16
 *
	mZERO
;

59 
uöt32
 
	mRólPôch
;

60 
uöt32
 
	mPôch2
;

61 
uöt32
 
	mZPôch
;

62 
uöt32
 
	mPPL
;

63 
uöt32
 
	mPPLx2
;

64 
uöt32
 
	mPixSize
;

65 
uöt8
 *
	mS
;

66 
uöt8
 *
	mDB
;

67 
uöt16
 *
	mS¸ìnCﬁ‹s
;

68 
uöt32
 
	mDïthDñè
;

69 
uöt8
 
	mZ1
;

70 
uöt8
 
	mZ2
;

71 
uöt32
 
	mFixedCﬁour
;

72 c⁄° *
	mInfoSåög
;

73 
uöt32
 
	mInfoSåögTimeout
;

74 
uöt32
 
	mSèπY
;

75 
uöt32
 
	mEndY
;

76 
ClùD©a
 *
	mpCuºítClù
;

77 
uöt32
 
	mMode7Mask
;

78 
uöt32
 
	mMode7Pri‹ôyMask
;

79 
	mOBJLi°
 [129];

80 
uöt32
 
	mSizes
 [129];

81 
	mVPosôi⁄s
 [129];

83 
uöt8
 
	mr212c
;

84 
uöt8
 
	mr212d
;

85 
uöt8
 
	mr2130
;

86 
uöt8
 
	mr2131
;

87 
boﬁ8_32
 
	mP£udo
;

89 #ifde‡
GFX_MULTI_FORMAT


90 
uöt32
 
	mPixñF‹m©
;

91 
uöt32
 (*
BuûdPixñ
Ë(uöt32 
	mR
, uöt32 
	mG
, uöt32 
	mB
);

92 
uöt32
 (*
BuûdPixñ2
Ë(uöt32 
	mR
, uöt32 
	mG
, uöt32 
	mB
);

93 (*
	mDecompo£Pixñ
Ë(
uöt32
 
	mPixñ
, 
	muöt32
 &
	mR
, uöt32 &
	mG
, uöt32 &
	mB
);

97 
	sSLöeD©a
 {

99 
uöt16
 
	mVOff£t
;

100 
uöt16
 
	mHOff£t
;

101 } 
	mBG
 [4];

104 
	#H_FLIP
 0x4000

	)

105 
	#V_FLIP
 0x8000

	)

106 
	#BLANK_TILE
 2

	)

107 
	#IN_VIDEO_MEMORY
 3

	)

109 
	sSBG


111 
uöt32
 
	mTûeSize
;

112 
uöt32
 
	mBôShi·
;

113 
uöt32
 
	mTûeShi·
;

114 
uöt32
 
	mTûeAddªss
;

115 
uöt32
 
	mNameSñe˘
;

116 
uöt32
 
	mSCBa£
;

118 
uöt32
 
	mSèπPÆëã
;

119 
uöt32
 
	mPÆëãShi·
;

120 
uöt32
 
	mPÆëãMask
;

122 
uöt8
 *
	mBuf„r
;

123 
uöt8
 *
	mBuf„ªd
;

124 
boﬁ8_32
 
	mDúe˘CﬁourMode
;

127 
	sSLöeM©rixD©a


129 
	mM©rixA
;

130 
	mM©rixB
;

131 
	mM©rixC
;

132 
	mM©rixD
;

133 
	mCíåeX
;

134 
	mCíåeY
;

137 
uöt32
 
odd_high
 [4][16];

138 
uöt32
 
odd_low
 [4][16];

139 
uöt32
 
eví_high
 [4][16];

140 
uöt32
 
eví_low
 [4][16];

141 
SBG
 
BG
;

142 
uöt16
 
Dúe˘CﬁourM≠s
 [8][256];

148 
uöt8
 
mul_brighäess
 [16][32];

151 
	#SWAP_DWORD
(
dw
) dw = ((dw & 0xff) << 24) | ((dw & 0xff00) << 8) | \

152 ((
dw
 & 0xff0000Ë>> 8Ë| ((dw & 0xff000000Ë>> 24)

	)

154 #ifde‡
FAST_LSB_WORD_ACCESS


155 
	#READ_2BYTES
(
s
Ë(*(
uöt16
 *Ë(s))

	)

156 
	#WRITE_2BYTES
(
s
, 
d
Ë*(
uöt16
 *Ë(sË(d)

	)

158 #ifde‡
LSB_FIRST


159 
	#READ_2BYTES
(
s
Ë(*(
uöt8
 *Ë(sË| (*((uöt8 *Ë(sË+ 1Ë<< 8))

	)

160 
	#WRITE_2BYTES
(
s
, 
d
Ë*(
uöt8
 *) (s) = (d), \

161 *((
uöt8
 *Ë(
s
Ë+ 1Ë(
d
Ë>> 8

	)

163 
	#READ_2BYTES
(
s
Ë(*(
uöt8
 *Ë(sË| (*((uöt8 *Ë(sË+ 1Ë<< 8))

	)

164 
	#WRITE_2BYTES
(
s
, 
d
Ë*(
uöt8
 *) (s) = (d), \

165 *((
uöt8
 *Ë(
s
Ë+ 1Ë(
d
Ë>> 8

	)

169 
	#SUB_SCREEN_DEPTH
 0

	)

170 
	#MAIN_SCREEN_DEPTH
 32

	)

172 #i‡
deföed
(
OLD_COLOUR_BLENDING
)

173 
	#COLOR_ADD
(
C1
, 
C2
) \

174 
GFX
.
X2
 [((((
C1
Ë& 
RGB_REMOVE_LOW_BITS_MASK
) + \

175 ((
C2
Ë& 
RGB_REMOVE_LOW_BITS_MASK
)) >> 1) + \

176 ((
C1
Ë& (
C2
Ë& 
RGB_LOW_BITS_MASK
)]

	)

178 
	#COLOR_ADD
(
C1
, 
C2
) \

179 (
GFX
.
X2
 [((((
C1
Ë& 
RGB_REMOVE_LOW_BITS_MASK
) + \

180 ((
C2
Ë& 
RGB_REMOVE_LOW_BITS_MASK
)) >> 1) + \

181 ((
C1
Ë& (
C2
Ë& 
RGB_LOW_BITS_MASK
)] | \

182 (((
C1
Ë^ (
C2
)Ë& 
RGB_LOW_BITS_MASK
))

	)

185 
	#COLOR_ADD1_2
(
C1
, 
C2
) \

186 (((((
C1
Ë& 
RGB_REMOVE_LOW_BITS_MASK
) + \

187 ((
C2
Ë& 
RGB_REMOVE_LOW_BITS_MASK
)) >> 1) + \

188 ((
C1
Ë& (
C2
Ë& 
RGB_LOW_BITS_MASK
Ë| 
ALPHA_BITS_MASK
)

	)

190 #i‡
deföed
(
OLD_COLOUR_BLENDING
)

191 
	#COLOR_SUB
(
C1
, 
C2
) \

192 
GFX
.
ZERO_OR_X2
 [(((
C1
Ë| 
RGB_HI_BITS_MASKx2
) - \

193 ((
C2
Ë& 
RGB_REMOVE_LOW_BITS_MASK
)Ë>> 1]

	)

195 
	#COLOR_SUB
(
C1
, 
C2
) \

196 (
GFX
.
ZERO_OR_X2
 [(((
C1
Ë| 
RGB_HI_BITS_MASKx2
) - \

197 ((
C2
Ë& 
RGB_REMOVE_LOW_BITS_MASK
)) >> 1] + \

198 ((
C1
Ë& 
RGB_LOW_BITS_MASK
Ë- ((
C2
Ë& RGB_LOW_BITS_MASK))

	)

201 
	#COLOR_SUB1_2
(
C1
, 
C2
) \

202 
GFX
.
ZERO
 [(((
C1
Ë| 
RGB_HI_BITS_MASKx2
) - \

203 ((
C2
Ë& 
RGB_REMOVE_LOW_BITS_MASK
)Ë>> 1]

	)

205 (*
	tN‹mÆTûeRídîî
Ë(
	tuöt32
 
	tTûe
, uöt32 
	tOff£t
,

206 
	tuöt32
 
	tSèπLöe
, uöt32 
	tLöeCou¡
, 
	tSGFX
 * 
	tgfx
);

207 (*
	tClù≥dTûeRídîî
Ë(
	tuöt32
 
	tTûe
, uöt32 
	tOff£t
,

208 
	tuöt32
 
	tSèπPixñ
, uöt32 
	tWidth
,

209 
	tuöt32
 
	tSèπLöe
, uöt32 
	tLöeCou¡
, 
	tSGFX
 * 
	tgfx
);

210 (*
	tL¨gePixñRídîî
Ë(
	tuöt32
 
	tTûe
, uöt32 
	tOff£t
,

211 
	tuöt32
 
	tSèπPixñ
, uöt32 
	tPixñs
,

212 
	tuöt32
 
	tSèπLöe
, uöt32 
	tLöeCou¡
, 
	tSGFX
 * 
	tgfx
);

214 
START_EXTERN_C


215 
	`S9xSèπS¸ìnRe‰esh
 ();

216 
	`S9xDøwSˇnLöe
 (
uöt8
 
Löe
);

217 
	`S9xEndS¸ìnRe‰esh
 ();

218 
	`S9xSëupOBJ
 (
SOBJ
 *);

219 
	`S9xUpd©eS¸ìn
 ();

220 
	`RídîLöe
 (
uöt8
 
löe
);

221 
	`S9xBuûdDúe˘CﬁourM≠s
 ();

225 
SGFX
 
GFX
;

227 
boﬁ8_32
 
	`S9xGøphicsInô
 ();

228 
	`S9xGøphicsDeöô
();

229 
boﬁ8_32
 
	`S9xInôUpd©e
 ();

230 
boﬁ8_32
 
	`S9xDeöôUpd©e
 (
Width
, 
Height
, boﬁ8_32 
sixãí_bô
);

231 
	`S9xSëPÆëã
 ();

232 
	`S9xSyncS≥ed
 ();

234 #ifde‡
GFX_MULTI_FORMAT


235 
boﬁ8_32
 
	`S9xSëRídîPixñF‹m©
 (
f‹m©
);

238 
END_EXTERN_C


	@gfx_org.cpp

41 
	~"¢es9x.h
"

43 
	~"memm≠.h
"

44 
	~"µu.h
"

45 
	~"˝uexec.h
"

46 
	~"di•œy.h
"

47 
	~"gfx.h
"

48 
	~"≠u.h
"

49 
	~"chóts.h
"

51 
	#M7
 19

	)

52 
	#M8
 19

	)

54 
uöt32
 
gp32_gammavÆue
;

56 
CompuãClùWödows
 ();

58 
S9xSëupOBJ
();

60 
uöt8
 
BôShi·s
[8][4];

61 
uöt8
 
TûeShi·s
[8][4];

62 
uöt8
 
PÆëãShi·s
[8][4];

63 
uöt8
 
PÆëãMasks
[8][4];

64 
uöt8
 
Dïths
[8][4];

65 
uöt8
 
BGSizes
 [2];

67 
N‹mÆTûeRídîî
 
DøwTûePå
;

68 
Clù≥dTûeRídîî
 
DøwClù≥dTûePå
;

69 
N‹mÆTûeRídîî
 
DøwHiResTûePå
;

70 
Clù≥dTûeRídîî
 
DøwHiResClù≥dTûePå
;

71 
L¨gePixñRídîî
 
DøwL¨gePixñPå
;

73 
SBG
 
BG
;

75 
SLöeD©a
 
LöeD©a
[240];

76 
SLöeM©rixD©a
 
LöeM©rixD©a
 [240];

78 
uöt8
 
Mode7Dïths
 [2];

79 
gamm©ab
[10][32];

80 
	#ON_MAIN
(
N
Ë\

	)

81 (
	gGFX
.
	gr212c
 & (1 << (
	gN
)) && \

82 !(
	gPPU
.
	gBG_F‹˚d
 & (1 << (
	gN
))))

84 
	#SUB_OR_ADD
(
N
Ë\

	)

85 (
	gGFX
.
	gr2131
 & (1 << (
	gN
)))

87 
	#ON_SUB
(
N
Ë\

	)

88 ((
	gGFX
.
	gr2130
 & 0x30) != 0x30 && \

89 (
GFX
.
r2130
 & 2) && \

90 (
GFX
.
r212d
 & (1 << 
N
)) && \

91 !(
PPU
.
BG_F‹˚d
 & (1 << (
N
))))

93 
	#ANYTHING_ON_SUB
 \

	)

94 ((
GFX
.
r2130
 & 0x30) != 0x30 && \

95 (
GFX
.
r2130
 & 2) && \

96 (
GFX
.
r212d
 & 0x1f))

98 
	#ADD_OR_SUB_ON_ANYTHING
 \

	)

99 (
GFX
.
r2131
 & 0x3f)

101 
	#BLACK
 
	`BUILD_PIXEL
(0,0,0)

	)

103 
‹gDøwTûeHi16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

104 
uöt32
 
LöeCou¡
);

105 
‹gDøwClù≥dTûeHi16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

106 
uöt32
 
SèπPixñ
, uöt32 
Width
,

107 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

109 
‹gDøwTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

110 
uöt32
 
LöeCou¡
);

111 
‹gDøwClù≥dTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

112 
uöt32
 
SèπPixñ
, uöt32 
Width
,

113 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

114 
‹gDøwTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

115 
uöt32
 
LöeCou¡
);

116 
‹gDøwClù≥dTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

117 
uöt32
 
SèπPixñ
, uöt32 
Width
,

118 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

119 
‹gDøwTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

120 
uöt32
 
LöeCou¡
);

121 
‹gDøwClù≥dTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

122 
uöt32
 
SèπPixñ
, uöt32 
Width
,

123 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

124 
‹gDøwL¨gePixñ16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

125 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

126 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

128 
‹gDøwTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

129 
uöt32
 
LöeCou¡
);

131 
‹gDøwClù≥dTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

132 
uöt32
 
SèπPixñ
, uöt32 
Width
,

133 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

135 
‹gDøwTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

136 
uöt32
 
LöeCou¡
);

138 
‹gDøwClù≥dTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

139 
uöt32
 
SèπPixñ
, uöt32 
Width
,

140 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

142 
‹gDøwTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

143 
uöt32
 
LöeCou¡
);

145 
‹gDøwClù≥dTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

146 
uöt32
 
SèπPixñ
, uöt32 
Width
,

147 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

149 
‹gDøwTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

150 
uöt32
 
LöeCou¡
);

152 
‹gDøwClù≥dTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

153 
uöt32
 
SèπPixñ
, uöt32 
Width
,

154 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

156 
‹gDøwTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

157 
uöt32
 
LöeCou¡
);

159 
‹gDøwClù≥dTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

160 
uöt32
 
SèπPixñ
, uöt32 
Width
,

161 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

163 
‹gDøwTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

164 
uöt32
 
LöeCou¡
);

166 
‹gDøwClù≥dTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

167 
uöt32
 
SèπPixñ
, uöt32 
Width
,

168 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

170 
‹gDøwL¨gePixñ16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

171 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

172 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

174 
‹gDøwL¨gePixñ16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

175 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

176 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

178 
‹gDøwL¨gePixñ16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

179 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

180 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

182 
‹gDøwL¨gePixñ16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

183 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

184 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
);

187 
boﬁ8
 
	$S9xGøphicsInô
 ()

189 
uöt32
 
PixñOdd
 = 1;

190 
uöt32
 
PixñEví
 = 2;

192 #ifde‡
GFX_MULTI_FORMAT


193 i‡(
GFX
.
BuûdPixñ
 =
NULL
)

194 
	`S9xSëRídîPixñF‹m©
 (
RGB565
);

197 
uöt8
 
bôshi·
 = 0; bitshift < 4; bitshift++)

199 
i
 = 0; i < 16; i++)

201 
uöt32
 
h
 = 0;

202 
uöt32
 
l
 = 0;

204 #i‡
	`deföed
(
LSB_FIRST
)

205 i‡(
i
 & 8)

206 
h
 |
PixñOdd
;

207 i‡(
i
 & 4)

208 
h
 |
PixñOdd
 << 8;

209 i‡(
i
 & 2)

210 
h
 |
PixñOdd
 << 16;

211 i‡(
i
 & 1)

212 
h
 |
PixñOdd
 << 24;

213 i‡(
i
 & 8)

214 
l
 |
PixñOdd
;

215 i‡(
i
 & 4)

216 
l
 |
PixñOdd
 << 8;

217 i‡(
i
 & 2)

218 
l
 |
PixñOdd
 << 16;

219 i‡(
i
 & 1)

220 
l
 |
PixñOdd
 << 24;

222 i‡(
i
 & 8)

223 
h
 |(
PixñOdd
 << 24);

224 i‡(
i
 & 4)

225 
h
 |(
PixñOdd
 << 16);

226 i‡(
i
 & 2)

227 
h
 |(
PixñOdd
 << 8);

228 i‡(
i
 & 1)

229 
h
 |
PixñOdd
;

230 i‡(
i
 & 8)

231 
l
 |(
PixñOdd
 << 24);

232 i‡(
i
 & 4)

233 
l
 |(
PixñOdd
 << 16);

234 i‡(
i
 & 2)

235 
l
 |(
PixñOdd
 << 8);

236 i‡(
i
 & 1)

237 
l
 |
PixñOdd
;

240 
odd_high
[
bôshi·
][
i
] = 
h
;

241 
odd_low
[
bôshi·
][
i
] = 
l
;

242 
h
 = 
l
 = 0;

244 #i‡
	`deföed
(
LSB_FIRST
)

245 i‡(
i
 & 8)

246 
h
 |
PixñEví
;

247 i‡(
i
 & 4)

248 
h
 |
PixñEví
 << 8;

249 i‡(
i
 & 2)

250 
h
 |
PixñEví
 << 16;

251 i‡(
i
 & 1)

252 
h
 |
PixñEví
 << 24;

253 i‡(
i
 & 8)

254 
l
 |
PixñEví
;

255 i‡(
i
 & 4)

256 
l
 |
PixñEví
 << 8;

257 i‡(
i
 & 2)

258 
l
 |
PixñEví
 << 16;

259 i‡(
i
 & 1)

260 
l
 |
PixñEví
 << 24;

262 i‡(
i
 & 8)

263 
h
 |(
PixñEví
 << 24);

264 i‡(
i
 & 4)

265 
h
 |(
PixñEví
 << 16);

266 i‡(
i
 & 2)

267 
h
 |(
PixñEví
 << 8);

268 i‡(
i
 & 1)

269 
h
 |
PixñEví
;

270 i‡(
i
 & 8)

271 
l
 |(
PixñEví
 << 24);

272 i‡(
i
 & 4)

273 
l
 |(
PixñEví
 << 16);

274 i‡(
i
 & 2)

275 
l
 |(
PixñEví
 << 8);

276 i‡(
i
 & 1)

277 
l
 |
PixñEví
;

280 
eví_high
[
bôshi·
][
i
] = 
h
;

281 
eví_low
[
bôshi·
][
i
] = 
l
;

283 
PixñEví
 <<= 2;

284 
PixñOdd
 <<= 2;

287 
GFX
.
RólPôch
 = GFX.
Pôch2
 = GFX.
Pôch
;

288 
GFX
.
ZPôch
 = GFX.
Pôch
;

289 i‡(
Sëtögs
.
SixãíBô
)

290 
GFX
.
ZPôch
 >>= 1;

291 
GFX
.
Dñè
 = (GFX.
SubS¸ìn
 - GFX.
S¸ìn
) >> 1;

292 
GFX
.
DïthDñè
 = GFX.
SubZBuf„r
 - GFX.
ZBuf„r
;

296 
PPU
.
BG_F‹˚d
 = 0;

297 
IPPU
.
OBJCh™ged
 = 
TRUE
;

298 i‡(
Sëtögs
.
Tøn•¨ícy
)

299 
Sëtögs
.
SixãíBô
 = 
TRUE
;

301 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
TRUE
;

302 
GFX
.
PixSize
 = 1;

303 i‡(
Sëtögs
.
SixãíBô
)

305 
GFX
.
PPL
 = GFX.
Pôch
 >> 1;

306 
GFX
.
PPLx2
 = GFX.
Pôch
;

310 
GFX
.
PPL
 = GFX.
Pôch
;

311 
GFX
.
PPLx2
 = GFX.
Pôch
 * 2;

313 
	`S9xFixCﬁourBrighäess
 ();

315 #ifde‡
_TRANSP_SUPPORT_


316 i‡(!(
GFX
.
X2
 = (
uöt16
 *Ë
	`mÆloc
 ( (uint16) * 0x10000)))

317  (
FALSE
);

319 i‡((!(
GFX
.
ZERO_OR_X2
 = (
uöt16
 *Ë
	`mÆloc
 ( (uint16) * 0x10000)))

320 ||!(
GFX
.
ZERO
 = (
uöt16
 *Ë
	`mÆloc
 ( (uint16) * 0x10000)))

322 i‡(
GFX
.
ZERO_OR_X2
)

324 
	`‰ì
 ((*Ë
GFX
.
ZERO_OR_X2
);

325 
GFX
.
ZERO_OR_X2
 = 
NULL
;

327 i‡(
GFX
.
X2
)

329 
	`‰ì
 ((*Ë
GFX
.
X2
);

330 
GFX
.
X2
 = 
NULL
;

332  (
FALSE
);

334 
uöt32
 
r
, 
g
, 
b
;

338 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

340 
uöt32
 
r2
 = 
r
 << 1;

341 i‡(
r2
 > 
MAX_RED
)

342 
r2
 = 
MAX_RED
;

343 
g
 = 0; g <
MAX_GREEN
; g++)

345 
uöt32
 
g2
 = 
g
 << 1;

346 i‡(
g2
 > 
MAX_GREEN
)

347 
g2
 = 
MAX_GREEN
;

348 
b
 = 0; b <
MAX_BLUE
; b++)

350 
uöt32
 
b2
 = 
b
 << 1;

351 i‡(
b2
 > 
MAX_BLUE
)

352 
b2
 = 
MAX_BLUE
;

353 
GFX
.
X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

354 
GFX
.
X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

358 
	`ZîoMem‹y
 (
GFX
.
ZERO
, 0x10000 *  (
uöt16
));

359 
	`ZîoMem‹y
 (
GFX
.
ZERO_OR_X2
, 0x10000 *  (
uöt16
));

364 #i‡
	`deföed
(
OLD_COLOUR_BLENDING
)

365 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

367 
uöt32
 
r2
 = 
r
;

368 i‡((
r2
 & 0x10) == 0)

369 
r2
 = 0;

371 
r2
 = (r2 << 1Ë& 
MAX_RED
;

373 
g
 = 0; g <
MAX_GREEN
; g++)

375 
uöt32
 
g2
 = 
g
;

376 i‡((
g2
 & 
GREEN_HI_BIT
) == 0)

377 
g2
 = 0;

379 
g2
 = (g2 << 1Ë& 
MAX_GREEN
;

381 
b
 = 0; b <
MAX_BLUE
; b++)

383 
uöt32
 
b2
 = 
b
;

384 i‡((
b2
 & 0x10) == 0)

385 
b2
 = 0;

387 
b2
 = (b2 << 1Ë& 
MAX_BLUE
;

389 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

390 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

395 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

397 
uöt32
 
r2
 = 
r
;

398 i‡((
r2
 & 0x10) == 0)

399 
r2
 = 0;

401 
r2
 = (r2 << 1Ë& 
MAX_RED
;

403 i‡(
r2
 == 0)

404 
r2
 = 1;

405 
g
 = 0; g <
MAX_GREEN
; g++)

407 
uöt32
 
g2
 = 
g
;

408 i‡((
g2
 & 
GREEN_HI_BIT
) == 0)

409 
g2
 = 0;

411 
g2
 = (g2 << 1Ë& 
MAX_GREEN
;

413 i‡(
g2
 == 0)

414 
g2
 = 1;

415 
b
 = 0; b <
MAX_BLUE
; b++)

417 
uöt32
 
b2
 = 
b
;

418 i‡((
b2
 & 0x10) == 0)

419 
b2
 = 0;

421 
b2
 = (b2 << 1Ë& 
MAX_BLUE
;

423 i‡(
b2
 == 0)

424 
b2
 = 1;

425 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

426 
GFX
.
ZERO_OR_X2
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

434 
r
 = 0;Ñ <
MAX_RED
;Ñ++)

436 
uöt32
 
r2
 = 
r
;

437 i‡((
r2
 & 0x10) == 0)

438 
r2
 = 0;

440 
r2
 &= ~0x10;

442 
g
 = 0; g <
MAX_GREEN
; g++)

444 
uöt32
 
g2
 = 
g
;

445 i‡((
g2
 & 
GREEN_HI_BIT
) == 0)

446 
g2
 = 0;

448 
g2
 &~
GREEN_HI_BIT
;

449 
b
 = 0; b <
MAX_BLUE
; b++)

451 
uöt32
 
b2
 = 
b
;

452 i‡((
b2
 & 0x10) == 0)

453 
b2
 = 0;

455 
b2
 &= ~0x10;

457 
GFX
.
ZERO
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
)] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

458 
GFX
.
ZERO
 [
	`BUILD_PIXEL2
 (
r
, 
g
, 
b
Ë& ~
ALPHA_BITS_MASK
] = BUILD_PIXEL2 (
r2
, 
g2
, 
b2
);

465 
GFX
.
X2
 = 
NULL
;

466 
GFX
.
ZERO_OR_X2
 = 
NULL
;

467 
GFX
.
ZERO
 = 
NULL
;

470  (
TRUE
);

471 
	}
}

473 
	$S9xGøphicsDeöô
 ()

476 i‡(
GFX
.
X2
)

478 
	`‰ì
 (
GFX
.
X2
);

479 
GFX
.
X2
 = 
NULL
;

481 i‡(
GFX
.
ZERO_OR_X2
)

483 
	`‰ì
 (
GFX
.
ZERO_OR_X2
);

484 
GFX
.
ZERO_OR_X2
 = 
NULL
;

486 i‡(
GFX
.
ZERO
)

488 
	`‰ì
 (
GFX
.
ZERO
);

489 
GFX
.
ZERO
 = 
NULL
;

491 
	}
}

494 
	$S9xBuûdDúe˘CﬁourM≠s
 ()

496 
uöt8
 *
cgamma
=(uöt8*)
gamm©ab
[
gp32_gammavÆue
];

497 
uöt32
 
p
 = 0;Ö < 8;Ö++)

499 
uöt32
 
c
 = 0; c < 256; c++)

502 
Dúe˘CﬁourM≠s
 [
p
][
c
] = 
	`BUILD_PIXEL
 (
cgamma
[((c & 7) << 2) | ((p & 1) << 1)],

503 
cgamma
[((
c
 & 0x38Ë>> 1Ë| (
p
 & 2)],

504 
cgamma
[((
c
 & 0xc0Ë>> 3Ë| (
p
 & 4)]);

507 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
FALSE
;

508 
	}
}

510 
	$S9xSèπS¸ìnRe‰esh
 ()

512 i‡(
GFX
.
InfoSåögTimeout
 > 0 && --GFX.InfoStringTimeout == 0)

513 
GFX
.
InfoSåög
 = 
NULL
;

515 i‡(
IPPU
.
RídîThisFøme
)

517 i‡(!
	`S9xInôUpd©e
 ())

519 
IPPU
.
RídîThisFøme
 = 
FALSE
;

522 
IPPU
.
RídîedFømesCou¡
++;

523 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
 = 0;

524 
IPPU
.
MaxBrighäess
 = 
PPU
.
Brighäess
;

525 
IPPU
.
L©chedBœnkög
 = 
PPU
.
F‹˚dBœnkög
;

526 
IPPU
.
L©chedI¡îœ˚
 = (
Mem‹y
.
FûlRAM
[0x2133] & 1);

528 i‡(
Sëtögs
.
Suµ‹tHiRes
 && (
PPU
.
BGMode
 == 5 || PPU.BGMode == 6 ||

529 
IPPU
.
L©chedI¡îœ˚
 ))

531 i‡(
PPU
.
BGMode
 == 5 || PPU.BGMode == 6)

533 
IPPU
.
RídîedS¸ìnWidth
 = 512;

534 
IPPU
.
DoubÀWidthPixñs
 = 
TRUE
;

536 i‡–
IPPU
.
L©chedI¡îœ˚
)

538 
IPPU
.
RídîedS¸ìnHeight
 = 
PPU
.
S¸ìnHeight
 << 1;

539 
GFX
.
Pôch2
 = GFX.
RólPôch
;

540 
GFX
.
Pôch
 = GFX.
RólPôch
 * 2;

541 i‡(
Sëtögs
.
SixãíBô
)

542 
GFX
.
PPL
 = GFX.
PPLx2
 = GFX.
RólPôch
;

544 
GFX
.
PPL
 = GFX.
PPLx2
 = GFX.
RólPôch
 << 1;

548 
IPPU
.
RídîedS¸ìnHeight
 = 
PPU
.
S¸ìnHeight
;

549 
GFX
.
Pôch2
 = GFX.
Pôch
 = GFX.
RólPôch
;

550 i‡(
Sëtögs
.
SixãíBô
)

551 
GFX
.
PPL
 = GFX.
Pôch
 >> 1;

553 
GFX
.
PPL
 = GFX.
Pôch
;

554 
GFX
.
PPLx2
 = GFX.
PPL
 << 1;

556 #i‡
	`deföed
(
USE_GLIDE
Ë|| deföed(
USE_OPENGL
)

557 
GFX
.
ZPôch
 = GFX.
RólPôch
;

558 i‡(
Sëtögs
.
SixãíBô
)

559 
GFX
.
ZPôch
 >>= 1;

564 
IPPU
.
RídîedS¸ìnWidth
 = 256;

565 
IPPU
.
RídîedS¸ìnHeight
 = 
PPU
.
S¸ìnHeight
;

566 
IPPU
.
DoubÀWidthPixñs
 = 
FALSE
;

568 
GFX
.
Pôch2
 = GFX.
Pôch
 = GFX.
RólPôch
;

569 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

570 
GFX
.
ZPôch
 = GFX.
RólPôch
;

571 i‡(
Sëtögs
.
SixãíBô
)

572 
GFX
.
ZPôch
 >>= 1;

575 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

576 
GFX
.
DïthDñè
 = GFX.
SubZBuf„r
 - GFX.
ZBuf„r
;

577 
GFX
.
Dñè
 = (GFX.
SubS¸ìn
 - GFX.
S¸ìn
) >> 1;

579 i‡(++
IPPU
.
FømeCou¡
 % 
Mem‹y
.
ROMFømesPîSec⁄d
 == 0)

581 
IPPU
.
Di•œyedRídîedFømeCou¡
 = IPPU.
RídîedFømesCou¡
;

582 
IPPU
.
RídîedFømesCou¡
 = 0;

583 
IPPU
.
FømeCou¡
 = 0;

586 
	}
}

588 
	$RídîLöe
 (
uöt8
 
C
)

590 i‡(
IPPU
.
RídîThisFøme
)

592 
LöeD©a
[
C
].
BG
[0].
VOff£t
 = 
PPU
.BG[0].VOffset + 1;

593 
LöeD©a
[
C
].
BG
[0].
HOff£t
 = 
PPU
.BG[0].HOffset;

594 
LöeD©a
[
C
].
BG
[1].
VOff£t
 = 
PPU
.BG[1].VOffset + 1;

595 
LöeD©a
[
C
].
BG
[1].
HOff£t
 = 
PPU
.BG[1].HOffset;

597 i‡(
PPU
.
BGMode
 == 7)

599 
SLöeM©rixD©a
 *
p
 = &
LöeM©rixD©a
 [
C
];

600 
p
->
M©rixA
 = 
PPU
.MatrixA;

601 
p
->
M©rixB
 = 
PPU
.MatrixB;

602 
p
->
M©rixC
 = 
PPU
.MatrixC;

603 
p
->
M©rixD
 = 
PPU
.MatrixD;

604 
p
->
CíåeX
 = 
PPU
.CentreX;

605 
p
->
CíåeY
 = 
PPU
.CentreY;

609 i‡(
Sëtögs
.
SèrfoxHack
 && 
PPU
.
BG
[2].
VOff£t
 == 0 &&

610 
PPU
.
BG
[2].
HOff£t
 == 0xe000)

612 
LöeD©a
[
C
].
BG
[2].
VOff£t
 = 0xe1;

613 
LöeD©a
[
C
].
BG
[2].
HOff£t
 = 0;

617 
LöeD©a
[
C
].
BG
[2].
VOff£t
 = 
PPU
.BG[2].VOffset + 1;

618 
LöeD©a
[
C
].
BG
[2].
HOff£t
 = 
PPU
.BG[2].HOffset;

619 
LöeD©a
[
C
].
BG
[3].
VOff£t
 = 
PPU
.BG[3].VOffset + 1;

620 
LöeD©a
[
C
].
BG
[3].
HOff£t
 = 
PPU
.BG[3].HOffset;

623 
IPPU
.
CuºítLöe
 = 
C
 + 1;

625 
	}
}

627 
	$S9xEndS¸ìnRe‰esh
 ()

629 
IPPU
.
HDMASèπed
 = 
FALSE
;

630 i‡(
IPPU
.
RídîThisFøme
)

632 
	`FLUSH_REDRAW
 ();

633 i‡(
IPPU
.
Cﬁ‹sCh™ged
)

635 
uöt32
 
ßved
 = 
PPU
.
CGDATA
[0];

636 i‡(!
Sëtögs
.
SixãíBô
)

640 i‡(!(
Mem‹y
.
FûlRAM
 [0x2131] & 0x80) &&

641 (
Mem‹y
.
FûlRAM
[0x2131] & 0x20) &&

642 (
PPU
.
FixedCﬁourRed
 || PPU.
FixedCﬁourGªí
 ||

643 
PPU
.
FixedCﬁourBlue
))

645 
PPU
.
CGDATA
[0] = PPU.
FixedCﬁourRed
 |

646 (
PPU
.
FixedCﬁourGªí
 << 5) |

647 (
PPU
.
FixedCﬁourBlue
 << 10);

650 
IPPU
.
Cﬁ‹sCh™ged
 = 
FALSE
;

651 
	`S9xSëPÆëã
 ();

652 
PPU
.
CGDATA
[0] = 
ßved
;

654 
GFX
.
Pôch
 = GFX.
Pôch2
 = GFX.
RólPôch
;

655 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

663 
	`S9xDeöôUpd©e
 (
IPPU
.
RídîedS¸ìnWidth
, IPPU.
RídîedS¸ìnHeight
,

664 
Sëtögs
.
SixãíBô
);

667 #ifde‡
DEBUGGER


668 i‡(
CPU
.
Fœgs
 & 
FRAME_ADVANCE_FLAG
)

670 i‡(
ICPU
.
FømeAdv™˚Cou¡
)

672 
ICPU
.
FømeAdv™˚Cou¡
--;

673 
IPPU
.
RídîThisFøme
 = 
TRUE
;

674 
IPPU
.
FømeSkù
 = 0;

678 
CPU
.
Fœgs
 &~
FRAME_ADVANCE_FLAG
;

679 
CPU
.
Fœgs
 |
DEBUG_MODE_FLAG
;

683 i‡(
CPU
.
SRAMModifõd
)

685 i‡(!
CPU
.
AutoSaveTimî
)

687 i‡(!(
CPU
.
AutoSaveTimî
 = 
Sëtögs
.
AutoSaveDñay
 * 
Mem‹y
.
ROMFømesPîSec⁄d
))

688 
CPU
.
SRAMModifõd
 = 
FALSE
;

692 i‡(!--
CPU
.
AutoSaveTimî
)

694 
	`S9xAutoSaveSRAM
 ();

695 
CPU
.
SRAMModifõd
 = 
FALSE
;

699 
	}
}

701 
	$S9xSëInfoSåög
 (c⁄° *
°rög
)

703 
GFX
.
InfoSåög
 = 
°rög
;

704 
GFX
.
InfoSåögTimeout
 = 120;

705 
	}
}

710 
	$S9xSëupOBJ
 ()

712 
SmÆlSize
;

713 
L¨geSize
;

715 
PPU
.
OBJSizeSñe˘
)

718 
SmÆlSize
 = 8;

719 
L¨geSize
 = 16;

722 
SmÆlSize
 = 8;

723 
L¨geSize
 = 32;

726 
SmÆlSize
 = 8;

727 
L¨geSize
 = 64;

730 
SmÆlSize
 = 16;

731 
L¨geSize
 = 32;

734 
SmÆlSize
 = 16;

735 
L¨geSize
 = 64;

739 
SmÆlSize
 = 32;

740 
L¨geSize
 = 64;

744 
C
 = 0;

746 
Fú°S¥ôe
 = 
PPU
.FirstSprite & 0x7f;

747 
S
 = 
Fú°S¥ôe
;

750 
Size
;

751 i‡(
PPU
.
OBJ
 [
S
].
Size
)

752 
Size
 = 
L¨geSize
;

754 
Size
 = 
SmÆlSize
;

756 
VPos
 = 
PPU
.
OBJ
 [
S
].VPos;

758 i‡(
VPos
 >
PPU
.
S¸ìnHeight
)

759 
VPos
 -= 256;

760 i‡(
PPU
.
OBJ
 [
S
].
HPos
 < 256 && PPU.OBJ [S].HPo†> -
Size
 &&

761 
VPos
 < 
PPU
.
S¸ìnHeight
 && VPo†> -
Size
)

763 
GFX
.
OBJLi°
 [
C
++] = 
S
;

764 
GFX
.
Sizes
[
S
] = 
Size
;

765 
GFX
.
VPosôi⁄s
[
S
] = 
VPos
;

767 
S
 = (S + 1) & 0x7f;

768 } 
S
 !
Fú°S¥ôe
);

771 
GFX
.
OBJLi°
 [
C
] = -1;

772 
IPPU
.
OBJCh™ged
 = 
FALSE
;

773 
	}
}

778 
ölöe
 
	$‹gSñe˘TûeRídîî
 (
boﬁ8
 
n‹mÆ
)

780 
DøwHiResTûePå

‹gDøwTûeHi16
;

781 
DøwHiResClù≥dTûePå
 = 
‹gDøwClù≥dTûeHi16
;

784 i‡(
n‹mÆ
)

786 
DøwTûePå
 = 
‹gDøwTûe16
;

787 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16
;

788 
DøwL¨gePixñPå
 = 
‹gDøwL¨gePixñ16
;

792 i‡(
GFX
.
r2131
 & 0x80)

794 i‡(
GFX
.
r2131
 & 0x40)

796 i‡(
GFX
.
r2130
 & 2)

798 
DøwTûePå
 = 
‹gDøwTûe16Sub1_2
;

799 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16Sub1_2
;

804 
DøwTûePå
 = 
‹gDøwTûe16FixedSub1_2
;

805 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16FixedSub1_2
;

807 
DøwL¨gePixñPå
 = 
‹gDøwL¨gePixñ16Sub1_2
;

811 
DøwTûePå
 = 
‹gDøwTûe16Sub
;

812 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16Sub
;

813 
DøwL¨gePixñPå
 = 
‹gDøwL¨gePixñ16Sub
;

818 i‡(
GFX
.
r2131
 & 0x40)

820 i‡(
GFX
.
r2130
 & 2)

822 
DøwTûePå
 = 
‹gDøwTûe16Add1_2
;

823 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16Add1_2
;

828 
DøwTûePå
 = 
‹gDøwTûe16FixedAdd1_2
;

829 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16FixedAdd1_2
;

831 
DøwL¨gePixñPå
 = 
‹gDøwL¨gePixñ16Add1_2
;

835 
DøwTûePå
 = 
‹gDøwTûe16Add
;

836 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16Add
;

837 
DøwL¨gePixñPå
 = 
‹gDøwL¨gePixñ16Add
;

841 
	}
}

843 
	$‹gDøwOBJS
 (
boﬁ8
 
OnMaö
 = 
FALSE
, 
uöt8
 
D
 = 0)

845 
uöt32
 
O
;

846 
uöt32
 
Ba£Tûe
, 
Tûe
;

848 
	`CHECK_SOUND
();

850 
BG
.
BôShi·
 = 4;

851 
BG
.
TûeShi·
 = 5;

852 
BG
.
TûeAddªss
 = 
PPU
.
OBJNameBa£
;

853 
BG
.
SèπPÆëã
 = 128;

854 
BG
.
PÆëãShi·
 = 4;

855 
BG
.
PÆëãMask
 = 7;

856 
BG
.
Buf„r
 = 
IPPU
.
TûeCache
 [
TILE_4BIT
];

857 
BG
.
Buf„ªd
 = 
IPPU
.
TûeCached
 [
TILE_4BIT
];

858 
BG
.
NameSñe˘
 = 
PPU
.
OBJNameSñe˘
;

859 
BG
.
Dúe˘CﬁourMode
 = 
FALSE
;

861 
GFX
.
PixSize
 = 1;

865 
DøwTûePå
 = 
‹gDøwTûe16
;

866 
DøwClù≥dTûePå
 = 
‹gDøwClù≥dTûe16
;

868 
GFX
.
Z1
 = 
D
 + 2;

870 
I
 = 0;

871 
S
 = 
GFX
.
OBJLi°
 [
I
++]; S >= 0; S = GFX.OBJList [I++])

873 
VPos
 = 
GFX
.
VPosôi⁄s
 [
S
];

874 
Size
 = 
GFX
.
Sizes
[
S
];

875 
TûeInc
 = 1;

876 
Off£t
;

878 i‡(
VPos
 + 
Size
 <(Ë
GFX
.
SèπY
 || VPo†> (ËGFX.
EndY
)

881 i‡(
OnMaö
 && 
	`SUB_OR_ADD
(4))

883 
	`‹gSñe˘TûeRídîî
 (!
GFX
.
P£udo
 && 
PPU
.
OBJ
 [
S
].
PÆëã
 < 4);

886 
Ba£Tûe
 = 
PPU
.
OBJ
[
S
].
Name
 | (PPU.OBJ[S].
PÆëã
 << 10);

888 i‡(
PPU
.
OBJ
[
S
].
HFlù
)

890 
Ba£Tûe
 +((
Size
 >> 3Ë- 1Ë| 
H_FLIP
;

891 
TûeInc
 = -1;

893 i‡(
PPU
.
OBJ
[
S
].
VFlù
)

894 
Ba£Tûe
 |
V_FLIP
;

896 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [4];

897 i‡(!
˛ùcou¡
)

898 
˛ùcou¡
 = 1;

900 
GFX
.
Z2
 = (
PPU
.
OBJ
[
S
].
Pri‹ôy
 + 1Ë* 4 + 
D
;

902 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

904 
Le·
;

905 
Right
;

906 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [4])

908 
Le·
 = 0;

909 
Right
 = 256;

913 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][4];

914 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][4];

917 i‡(
Right
 <
Le·
 || 
PPU
.
OBJ
[
S
].
HPos
 + 
Size
 <= Left ||

918 
PPU
.
OBJ
[
S
].
HPos
 >
Right
)

921 
Y
 = 0; Y < 
Size
; Y += 8)

923 i‡(
VPos
 + 
Y
 + 7 >(Ë
GFX
.
SèπY
 && VPo†+ Y <(ËGFX.
EndY
)

925 
SèπLöe
;

926 
TûeLöe
;

927 
LöeCou¡
;

928 
La°
;

930 i‡((
SèπLöe
 = 
VPos
 + 
Y
Ë< (Ë
GFX
.
SèπY
)

932 
SèπLöe
 = 
GFX
.
SèπY
 - StartLine;

933 
LöeCou¡
 = 8 - 
SèπLöe
;

937 
SèπLöe
 = 0;

938 
LöeCou¡
 = 8;

940 i‡((
La°
 = 
VPos
 + 
Y
 + 7 - 
GFX
.
EndY
) > 0)

941 i‡((
LöeCou¡
 -
La°
) <= 0)

944 
TûeLöe
 = 
SèπLöe
 << 3;

945 
O
 = (
VPos
 + 
Y
 + 
SèπLöe
Ë* 
GFX
.
PPL
;

946 i‡(!
PPU
.
OBJ
[
S
].
VFlù
)

947 
Tûe
 = 
Ba£Tûe
 + (
Y
 << 1);

949 
Tûe
 = 
Ba£Tûe
 + ((
Size
 - 
Y
 - 8) << 1);

951 
MiddÀ
 = 
Size
 >> 3;

952 i‡(
PPU
.
OBJ
[
S
].
HPos
 < 
Le·
)

954 
Tûe
 +((
Le·
 - 
PPU
.
OBJ
[
S
].
HPos
Ë>> 3Ë* 
TûeInc
;

955 
MiddÀ
 -(
Le·
 - 
PPU
.
OBJ
[
S
].
HPos
) >> 3;

956 
O
 +
Le·
 * 
GFX
.
PixSize
;

957 i‡((
Off£t
 = (
Le·
 - 
PPU
.
OBJ
[
S
].
HPos
) & 7))

959 
O
 -
Off£t
 * 
GFX
.
PixSize
;

960 
W
 = 8 - 
Off£t
;

961 
Width
 = 
Right
 - 
Le·
;

962 i‡(
W
 > 
Width
)

963 
W
 = 
Width
;

964 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
O
, 
Off£t
, 
W
,

965 
TûeLöe
, 
LöeCou¡
);

967 i‡(
W
 >
Width
)

969 
Tûe
 +
TûeInc
;

970 
MiddÀ
--;

971 
O
 +8 * 
GFX
.
PixSize
;

975 
O
 +
PPU
.
OBJ
[
S
].
HPos
 * 
GFX
.
PixSize
;

977 i‡(
PPU
.
OBJ
[
S
].
HPos
 + 
Size
 >
Right
)

979 
MiddÀ
 -((
PPU
.
OBJ
[
S
].
HPos
 + 
Size
 + 7) -

980 
Right
) >> 3;

981 
Off£t
 = (
Right
 - (
PPU
.
OBJ
[
S
].
HPos
 + 
Size
)) & 7;

984 
Off£t
 = 0;

986 
X
 = 0; X < 
MiddÀ
; X++, 
O
 +8 * 
GFX
.
PixSize
,

987 
Tûe
 +
TûeInc
)

989 (*
DøwTûePå
Ë(
Tûe
, 
O
, 
TûeLöe
, 
LöeCou¡
);

991 i‡(
Off£t
)

993 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
O
, 0, 
Off£t
,

994 
TûeLöe
, 
LöeCou¡
);

1000 
	}
}

1002 
	$‹gDøwBackgroundMoßic
 (
uöt32
 
BGMode
, uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1004 
	`CHECK_SOUND
();

1006 
uöt32
 
Tûe
;

1007 
uöt16
 *
SC0
;

1008 
uöt16
 *
SC1
;

1009 
uöt16
 *
SC2
;

1010 
uöt16
 *
SC3
;

1011 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1013 i‡(
BGMode
 == 0)

1014 
BG
.
SèπPÆëã
 = 
bg
 << 5;

1016 
BG
.
SèπPÆëã
 = 0;

1018 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1020 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1021 
SC1
 = 
SC0
 + 1024;

1023 
SC1
 = 
SC0
;

1025 if((
SC1
-(*)
Mem‹y
.
VRAM
)>0x10000)

1026 
SC1
-=0x10000;

1029 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 2)

1030 
SC2
 = 
SC1
 + 1024;

1032 
SC2
 = 
SC0
;

1034 if((
SC2
-(*)
Mem‹y
.
VRAM
)>0x10000)

1035 
SC2
-=0x10000;

1038 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1039 
SC3
 = 
SC2
 + 1024;

1041 
SC3
 = 
SC2
;

1043 if((
SC3
-(*)
Mem‹y
.
VRAM
)>0x10000)

1044 
SC3
-=0x10000;

1046 
uöt32
 
Löes
;

1047 
uöt32
 
Off£tMask
;

1048 
uöt32
 
Off£tShi·
;

1050 i‡(
BG
.
TûeSize
 == 16)

1052 
Off£tMask
 = 0x3ff;

1053 
Off£tShi·
 = 4;

1057 
Off£tMask
 = 0x1ff;

1058 
Off£tShi·
 = 3;

1061 
uöt32
 
Y
 = 
GFX
.
SèπY
; Y <GFX.
EndY
; Y +
Löes
)

1063 
uöt32
 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1064 
uöt32
 
HOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].HOffset;

1065 
uöt32
 
MoßicOff£t
 = 
Y
 % 
PPU
.
Moßic
;

1067 
Löes
 = 1; Löe†< 
PPU
.
Moßic
 - 
MoßicOff£t
; Lines++)

1068 i‡((
VOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].VOffset) ||

1069 (
HOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].HOffset))

1072 
uöt32
 
MoßicLöe
 = 
VOff£t
 + 
Y
 - 
MoßicOff£t
;

1074 i‡(
Y
 + 
Löes
 > 
GFX
.
EndY
)

1075 
Löes
 = 
GFX
.
EndY
 + 1 - 
Y
;

1076 
uöt32
 
VútAlign
 = (
MoßicLöe
 & 7) << 3;

1078 
uöt16
 *
b1
;

1079 
uöt16
 *
b2
;

1081 
uöt32
 
S¸ìnLöe
 = 
MoßicLöe
 >> 
Off£tShi·
;

1082 
uöt32
 
Rem16
 = 
MoßicLöe
 & 15;

1084 i‡(
S¸ìnLöe
 & 0x20)

1085 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1087 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1089 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1090 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1091 
uöt16
 *
t
;

1092 
uöt32
 
Le·
 = 0;

1093 
uöt32
 
Right
 = 256;

1095 
uöt32
 
ClùCou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1096 
uöt32
 
HPos
 = 
HOff£t
;

1097 
uöt32
 
PixWidth
 = 
PPU
.
Moßic
;

1099 i‡(!
ClùCou¡
)

1100 
ClùCou¡
 = 1;

1102 
uöt32
 
˛ù
 = 0; clù < 
ClùCou¡
; clip++)

1104 i‡(
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1106 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
];

1107 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
];

1108 
uöt32
 
r
 = 
Le·
 % 
PPU
.
Moßic
;

1109 
HPos
 = 
HOff£t
 + 
Le·
;

1110 
PixWidth
 = 
PPU
.
Moßic
 - 
r
;

1112 
uöt32
 
s
 = 
Y
 * 
GFX
.
PPL
 + 
Le·
 * GFX.
PixSize
;

1113 
uöt32
 
x
 = 
Le·
; x < 
Right
; x +
PixWidth
,

1114 
s
 +
PixWidth
 * 
GFX
.
PixSize
,

1115 
HPos
 +
PixWidth
, PixWidth = 
PPU
.
Moßic
)

1117 
uöt32
 
QuŸ
 = (
HPos
 & 
Off£tMask
) >> 3;

1119 i‡(
x
 + 
PixWidth
 >
Right
)

1120 
PixWidth
 = 
Right
 - 
x
;

1122 i‡(
BG
.
TûeSize
 == 8)

1124 i‡(
QuŸ
 > 31)

1125 
t
 = 
b2
 + (
QuŸ
 & 0x1f);

1127 
t
 = 
b1
 + 
QuŸ
;

1131 i‡(
QuŸ
 > 63)

1132 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1134 
t
 = 
b1
 + (
QuŸ
 >> 1);

1137 
Tûe
 = 
	`READ_2BYTES
 (
t
);

1138 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1141 i‡(
BG
.
TûeSize
 != 8)

1143 i‡(
Tûe
 & 
H_FLIP
)

1146 i‡(
Tûe
 & 
V_FLIP
)

1149 i‡(
Rem16
 < 8)

1151 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 17 - (
QuŸ
 & 1), 
s
,

1152 
HPos
 & 7, 
PixWidth
,

1153 
VútAlign
, 
Löes
);

1157 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1), 
s
,

1158 
HPos
 & 7, 
PixWidth
,

1159 
VútAlign
, 
Löes
);

1165 i‡(
Rem16
 > 7)

1167 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 17 - (
QuŸ
 & 1), 
s
,

1168 
HPos
 & 7, 
PixWidth
,

1169 
VútAlign
, 
Löes
);

1173 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1), 
s
,

1174 
HPos
 & 7, 
PixWidth
,

1175 
VútAlign
, 
Löes
);

1182 i‡(
Tûe
 & 
V_FLIP
)

1185 i‡(
Rem16
 < 8)

1187 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 16 + (
QuŸ
 & 1), 
s
,

1188 
HPos
 & 7, 
PixWidth
,

1189 
VútAlign
, 
Löes
);

1193 (*
DøwL¨gePixñPå
Ë(
Tûe
 + (
QuŸ
 & 1), 
s
,

1194 
HPos
 & 7, 
PixWidth
,

1195 
VútAlign
, 
Löes
);

1201 i‡(
Rem16
 > 7)

1203 (*
DøwL¨gePixñPå
Ë(
Tûe
 + 16 + (
QuŸ
 & 1), 
s
,

1204 
HPos
 & 7, 
PixWidth
,

1205 
VútAlign
, 
Löes
);

1209 (*
DøwL¨gePixñPå
Ë(
Tûe
 + (
QuŸ
 & 1), 
s
,

1210 
HPos
 & 7, 
PixWidth
,

1211 
VútAlign
, 
Löes
);

1217 (*
DøwL¨gePixñPå
Ë(
Tûe
, 
s
, 
HPos
 & 7, 
PixWidth
,

1218 
VútAlign
, 
Löes
);

1222 
	}
}

1224 
	$‹gDøwBackgroundOff£t
 (
uöt32
 
BGMode
, uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1226 
	`CHECK_SOUND
();

1228 
uöt32
 
Tûe
;

1229 
uöt16
 *
SC0
;

1230 
uöt16
 *
SC1
;

1231 
uöt16
 *
SC2
;

1232 
uöt16
 *
SC3
;

1233 
uöt16
 *
BPS0
;

1234 
uöt16
 *
BPS1
;

1235 
uöt16
 *
BPS2
;

1236 
uöt16
 *
BPS3
;

1237 
uöt32
 
Width
;

1238 
VOff£tOff£t
 = 
BGMode
 == 4 ? 0 : 32;

1239 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1241 
BG
.
SèπPÆëã
 = 0;

1243 
BPS0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[2].
SCBa£
 << 1];

1245 i‡(
PPU
.
BG
[2].
SCSize
 & 1)

1246 
BPS1
 = 
BPS0
 + 1024;

1248 
BPS1
 = 
BPS0
;

1250 i‡(
PPU
.
BG
[2].
SCSize
 & 2)

1251 
BPS2
 = 
BPS1
 + 1024;

1253 
BPS2
 = 
BPS0
;

1255 i‡(
PPU
.
BG
[2].
SCSize
 & 1)

1256 
BPS3
 = 
BPS2
 + 1024;

1258 
BPS3
 = 
BPS2
;

1260 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1262 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1263 
SC1
 = 
SC0
 + 1024;

1265 
SC1
 = 
SC0
;

1267 if((
SC1
-(*)
Mem‹y
.
VRAM
)>0x10000)

1268 
SC1
-=0x10000;

1271 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 2)

1272 
SC2
 = 
SC1
 + 1024;

1274 
SC2
 = 
SC0
;

1276 if((
SC2
-(*)
Mem‹y
.
VRAM
)>0x10000)

1277 
SC2
-=0x10000;

1280 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1281 
SC3
 = 
SC2
 + 1024;

1283 
SC3
 = 
SC2
;

1285 if((
SC3
-(*)
Mem‹y
.
VRAM
)>0x10000)

1286 
SC3
-=0x10000;

1289 c⁄° 
Löes
 = 1;

1290 
Off£tMask
;

1291 
Off£tShi·
;

1292 
Off£tE«bÀMask
 = 1 << (
bg
 + 13);

1294 i‡(
BG
.
TûeSize
 == 16)

1296 
Off£tMask
 = 0x3ff;

1297 
Off£tShi·
 = 4;

1301 
Off£tMask
 = 0x1ff;

1302 
Off£tShi·
 = 3;

1305 
uöt32
 
Y
 = 
GFX
.
SèπY
; Y <GFX.
EndY
; Y++)

1307 
uöt32
 
VOff
 = 
LöeD©a
 [
Y
].
BG
[2].
VOff£t
 - 1;

1309 
uöt32
 
HOff
 = 
LöeD©a
 [
Y
].
BG
[2].
HOff£t
;

1311 
VútAlign
;

1312 
S¸ìnLöe
 = 
VOff
 >> 3;

1313 
t1
;

1314 
t2
;

1315 
uöt16
 *
s0
;

1316 
uöt16
 *
s1
;

1317 
uöt16
 *
s2
;

1319 i‡(
S¸ìnLöe
 & 0x20)

1320 
s1
 = 
BPS2
, 
s2
 = 
BPS3
;

1322 
s1
 = 
BPS0
, 
s2
 = 
BPS1
;

1324 
s1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1325 
s2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1327 if(
BGMode
 != 4)

1329 if((
S¸ìnLöe
 & 0x1f) == 0x1f)

1331 if(
S¸ìnLöe
 & 0x20)

1332 
VOff£tOff£t
 = 
BPS0
 - 
BPS2
 - 0x1f*32;

1334 
VOff£tOff£t
 = 
BPS2
 - 
BPS0
 - 0x1f*32;

1338 
VOff£tOff£t
 = 32;

1342 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1343 i‡(!
˛ùcou¡
)

1344 
˛ùcou¡
 = 1;

1346 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

1348 
uöt32
 
Le·
;

1349 
uöt32
 
Right
;

1351 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1353 
Le·
 = 0;

1354 
Right
 = 256;

1358 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
];

1359 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
];

1361 i‡(
Right
 <
Le·
)

1365 
uöt32
 
VOff£t
;

1366 
uöt32
 
HOff£t
;

1368 
uöt32
 
LöeHOff£t
=
LöeD©a
 [
Y
].
BG
[
bg
].
HOff£t
;

1370 
uöt32
 
Off£t
;

1371 
uöt32
 
HPos
;

1372 
uöt32
 
QuŸ
;

1373 
uöt32
 
Cou¡
;

1374 
uöt16
 *
t
;

1375 
uöt32
 
QuŸ2
;

1376 
uöt32
 
VCñlOff£t
;

1377 
uöt32
 
HCñlOff£t
;

1378 
uöt16
 *
b1
;

1379 
uöt16
 *
b2
;

1380 
uöt32
 
TŸÆCou¡
 = 0;

1381 
uöt32
 
MaxCou¡
 = 8;

1383 
uöt32
 
s
 = 
Le·
 * 
GFX
.
PixSize
 + 
Y
 * GFX.
PPL
;

1384 
boﬁ8
 
À·_h™d_edge
 = (
Le·
 == 0);

1385 
Width
 = 
Right
 - 
Le·
;

1387 i‡(
Le·
 & 7)

1388 
MaxCou¡
 = 8 - (
Le·
 & 7);

1390 
Le·
 < 
Right
)

1392 i‡(
À·_h™d_edge
)

1397 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1402 
HOff£t
 = 
LöeHOff£t
;

1405 
À·_h™d_edge
 = 
FALSE
;

1413 
QuŸ2
 = ((
HOff
 + 
Le·
 - 1Ë& 
Off£tMask
) >> 3;

1415 i‡(
QuŸ2
 > 31)

1416 
s0
 = 
s2
 + (
QuŸ2
 & 0x1f);

1418 
s0
 = 
s1
 + 
QuŸ2
;

1420 
HCñlOff£t
 = 
	`READ_2BYTES
 (
s0
);

1422 i‡(
BGMode
 == 4)

1424 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1428 
HOff£t
=
LöeHOff£t
;

1431 i‡((
HCñlOff£t
 & 
Off£tE«bÀMask
))

1433 i‡(
HCñlOff£t
 & 0x8000)

1434 
VOff£t
 = 
HCñlOff£t
 + 1;

1436 
HOff£t
 = 
HCñlOff£t
;

1441 
VCñlOff£t
 = 
	`READ_2BYTES
 (
s0
 + 
VOff£tOff£t
);

1442 i‡((
VCñlOff£t
 & 
Off£tE«bÀMask
))

1443 
VOff£t
 = 
VCñlOff£t
 + 1;

1445 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1448 i‡((
HCñlOff£t
 & 
Off£tE«bÀMask
))

1452 
HOff£t
 = (
HCñlOff£t
 & ~7)|(
LöeHOff£t
&7);

1456 
HOff£t
=
LöeHOff£t
;

1463 
VútAlign
 = ((
Y
 + 
VOff£t
) & 7) << 3;

1464 
S¸ìnLöe
 = (
VOff£t
 + 
Y
Ë>> 
Off£tShi·
;

1466 i‡(((
VOff£t
 + 
Y
) & 15) > 7)

1468 
t1
 = 16;

1469 
t2
 = 0;

1473 
t1
 = 0;

1474 
t2
 = 16;

1477 i‡(
S¸ìnLöe
 & 0x20)

1478 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1480 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1482 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1483 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1485 
HPos
 = (
HOff£t
 + 
Le·
Ë& 
Off£tMask
;

1487 
QuŸ
 = 
HPos
 >> 3;

1489 i‡(
BG
.
TûeSize
 == 8)

1491 i‡(
QuŸ
 > 31)

1492 
t
 = 
b2
 + (
QuŸ
 & 0x1f);

1494 
t
 = 
b1
 + 
QuŸ
;

1498 i‡(
QuŸ
 > 63)

1499 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1501 
t
 = 
b1
 + (
QuŸ
 >> 1);

1504 i‡(
MaxCou¡
 + 
TŸÆCou¡
 > 
Width
)

1505 
MaxCou¡
 = 
Width
 - 
TŸÆCou¡
;

1507 
Off£t
 = 
HPos
 & 7;

1510 
Cou¡
 = 8 - 
Off£t
;

1511 i‡(
Cou¡
 > 
MaxCou¡
)

1512 
Cou¡
 = 
MaxCou¡
;

1514 
s
 -
Off£t
 * 
GFX
.
PixSize
;

1515 
Tûe
 = 
	`READ_2BYTES
(
t
);

1516 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1518 i‡(
BG
.
TûeSize
 == 8)

1519 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1522 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1525 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1526 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1529 i‡(
Tûe
 & 
H_FLIP
)

1531 i‡(
Tûe
 & 
V_FLIP
)

1534 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1535 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1540 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1541 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1547 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1548 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1552 
Le·
 +
Cou¡
;

1553 
TŸÆCou¡
 +
Cou¡
;

1554 
s
 +(
Off£t
 + 
Cou¡
Ë* 
GFX
.
PixSize
;

1555 
MaxCou¡
 = 8;

1559 
	}
}

1561 
	$‹gDøwBackgroundMode5
 (
uöt32
 , uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1563 
	`CHECK_SOUND
();

1565 
GFX
.
Pôch
 = GFX.
RólPôch
;

1566 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

1567 
GFX
.
PixSize
 = 1;

1568 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1570 
uöt32
 
Tûe
;

1571 
uöt16
 *
SC0
;

1572 
uöt16
 *
SC1
;

1573 
uöt16
 *
SC2
;

1574 
uöt16
 *
SC3
;

1575 
uöt32
 
Width
;

1577 
BG
.
SèπPÆëã
 = 0;

1579 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1581 i‡((
PPU
.
BG
[
bg
].
SCSize
 & 1))

1582 
SC1
 = 
SC0
 + 1024;

1584 
SC1
 = 
SC0
;

1586 if((
SC1
-(*)
Mem‹y
.
VRAM
)>0x10000)

1587 
SC1
=(
uöt16
*)&
Mem‹y
.
VRAM
[(((
uöt8
*)SC1)-Memory.VRAM)%0x10000];

1589 i‡((
PPU
.
BG
[
bg
].
SCSize
 & 2))

1590 
SC2
 = 
SC1
 + 1024;

1592 
SC2
 = 
SC0
;

1594 if((
SC2
-(*)
Mem‹y
.
VRAM
)>0x10000)

1595 
SC2
=(
uöt16
*)&
Mem‹y
.
VRAM
[(((
uöt8
*)SC2)-Memory.VRAM)%0x10000];

1598 i‡((
PPU
.
BG
[
bg
].
SCSize
 & 1))

1599 
SC3
 = 
SC2
 + 1024;

1601 
SC3
 = 
SC2
;

1603 if((
SC3
-(*)
Mem‹y
.
VRAM
)>0x10000)

1604 
SC3
=(
uöt16
*)&
Mem‹y
.
VRAM
[(((
uöt8
*)SC3)-Memory.VRAM)%0x10000];

1607 
Löes
;

1608 
VOff£tMask
;

1609 
VOff£tShi·
;

1611 i‡(
BG
.
TûeSize
 == 16)

1613 
VOff£tMask
 = 0x3ff;

1614 
VOff£tShi·
 = 4;

1618 
VOff£tMask
 = 0x1ff;

1619 
VOff£tShi·
 = 3;

1621 
ídy
 = 
GFX
.
EndY
;

1623 
Y
 = 
GFX
.
SèπY
; Y <
ídy
; Y +
Löes
)

1625 
y
 = 
Y
;

1626 
uöt32
 
VOff£t
 = 
LöeD©a
 [
y
].
BG
[
bg
].VOffset;

1627 
uöt32
 
HOff£t
 = 
LöeD©a
 [
y
].
BG
[
bg
].HOffset;

1628 
VútAlign
 = (
Y
 + 
VOff£t
) & 7;

1630 
Löes
 = 1; Löe†< 8 - 
VútAlign
; Lines++)

1631 i‡((
VOff£t
 !
LöeD©a
 [
y
 + 
Löes
].
BG
[
bg
].VOffset) ||

1632 (
HOff£t
 !
LöeD©a
 [
y
 + 
Löes
].
BG
[
bg
].HOffset))

1635 
HOff£t
 <<= 1;

1636 i‡(
Y
 + 
Löes
 > 
ídy
)

1637 
Löes
 = 
ídy
 + 1 - 
Y
;

1640 
S¸ìnLöe
 = (
VOff£t
 + 
Y
Ë>> 
VOff£tShi·
;

1641 
t1
;

1642 
t2
;

1643 i‡(((
VOff£t
 + 
Y
) & 15) > 7)

1645 
t1
 = 16;

1646 
t2
 = 0;

1650 
t1
 = 0;

1651 
t2
 = 16;

1653 
uöt16
 *
b1
;

1654 
uöt16
 *
b2
;

1656 i‡(
S¸ìnLöe
 & 0x20)

1657 
b1
 = 
SC2
, 
b2
 = 
SC3
;

1659 
b1
 = 
SC0
, 
b2
 = 
SC1
;

1661 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

1662 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

1664 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

1665 i‡(!
˛ùcou¡
)

1666 
˛ùcou¡
 = 1;

1667 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

1669 
Le·
;

1670 
Right
;

1672 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

1674 
Le·
 = 0;

1675 
Right
 = 512;

1679 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
]* 2;

1680 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
] * 2;

1682 i‡(
Right
 <
Le·
)

1686 
uöt32
 
s
 = (
Le·
>>1Ë + 
Y
 * 256;

1687 
uöt32
 
HPos
 = (
HOff£t
 + 
Le·
 ) & 0x3ff;

1689 
uöt32
 
QuŸ
 = 
HPos
 >> 3;

1690 
uöt32
 
Cou¡
 = 0;

1692 
uöt16
 *
t
;

1693 i‡(
QuŸ
 > 63)

1694 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

1696 
t
 = 
b1
 + (
QuŸ
 >> 1);

1698 
Width
 = 
Right
 - 
Le·
;

1700 i‡(
HPos
 & 7)

1702 
Off£t
 = (
HPos
 & 7);

1703 
Cou¡
 = 8 - 
Off£t
;

1704 i‡(
Cou¡
 > 
Width
)

1705 
Cou¡
 = 
Width
;

1706 
s
 -
Off£t
>>1;

1707 
Tûe
 = 
	`READ_2BYTES
 (
t
);

1708 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1710 i‡(
BG
.
TûeSize
 == 8)

1712 i‡(!(
Tûe
 & 
H_FLIP
))

1715 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + (
QuŸ
 & 1),

1716 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1721 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1),

1722 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1727 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1730 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1731 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1734 i‡(
Tûe
 & 
H_FLIP
)

1736 i‡(
Tûe
 & 
V_FLIP
)

1739 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1740 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1745 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1746 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1752 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1753 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

1757 
t
 +
QuŸ
 & 1;

1758 i‡(
QuŸ
 == 63)

1759 
t
 = 
b2
;

1760 i‡(
QuŸ
 == 127)

1761 
t
 = 
b1
;

1762 
QuŸ
++;

1763 
s
 += 4;

1767 
Cou¡
 = 
Width
 - Count;

1768 
MiddÀ
 = 
Cou¡
 >> 3;

1769 
Cou¡
 &= 7;

1770 
C
 = 
MiddÀ
; C > 0; 
s
 + 4, 
QuŸ
++, C--)

1772 
Tûe
 = 
	`READ_2BYTES
(
t
);

1773 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1774 i‡(
BG
.
TûeSize
 == 8)

1776 i‡(!(
Tûe
 & 
H_FLIP
))

1779 (*
DøwHiResTûePå
Ë(
Tûe
 + (
QuŸ
 & 1),

1780 
s
, 
VútAlign
, 
Löes
);

1785 (*
DøwHiResTûePå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1),

1786 
s
, 
VútAlign
, 
Löes
);

1791 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1794 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1795 
s
, 
VútAlign
, 
Löes
);

1798 i‡(
Tûe
 & 
H_FLIP
)

1800 i‡(
Tûe
 & 
V_FLIP
)

1803 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1804 
s
, 
VútAlign
, 
Löes
);

1809 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1810 
s
, 
VútAlign
, 
Löes
);

1816 (*
DøwHiResTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1817 
s
, 
VútAlign
, 
Löes
);

1821 
t
 +
QuŸ
 & 1;

1822 i‡(
QuŸ
 == 63)

1823 
t
 = 
b2
;

1825 i‡(
QuŸ
 == 127)

1826 
t
 = 
b1
;

1830 i‡(
Cou¡
)

1832 
Tûe
 = 
	`READ_2BYTES
(
t
);

1833 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

1834 i‡(
BG
.
TûeSize
 == 8)

1836 i‡(!(
Tûe
 & 
H_FLIP
))

1839 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + (
QuŸ
 & 1),

1840 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
);

1845 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 1 - (
QuŸ
 & 1),

1846 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
);

1851 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

1854 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

1855 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
);

1858 i‡(
Tûe
 & 
H_FLIP
)

1860 i‡(
Tûe
 & 
V_FLIP
)

1863 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

1864 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
);

1869 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

1870 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
);

1876 (*
DøwHiResClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

1877 
s
, 0, 
Cou¡
, 
VútAlign
, 
Löes
);

1883 
GFX
.
Pôch
 = GFX.
RólPôch
;

1884 
GFX
.
PPL
 = GFX.
PPLx2
 >> 1;

1885 
	}
}

1887 
	$‹gDøwBackground
 (
uöt32
 
BGMode
, uöt32 
bg
, 
uöt8
 
Z1
, uöt8 
Z2
)

1889 
GFX
.
PixSize
 = 1;

1891 
BG
.
TûeSize
 = 
BGSizes
 [
PPU
.BG[
bg
].
BGSize
];

1892 
BG
.
BôShi·
 = 
BôShi·s
[
BGMode
][
bg
];

1893 
BG
.
TûeShi·
 = 
TûeShi·s
[
BGMode
][
bg
];

1894 
BG
.
TûeAddªss
 = 
PPU
.BG[
bg
].
NameBa£
 << 1;

1895 
BG
.
NameSñe˘
 = 0;

1896 
BG
.
Buf„r
 = 
IPPU
.
TûeCache
 [
Dïths
 [
BGMode
][
bg
]];

1897 
BG
.
Buf„ªd
 = 
IPPU
.
TûeCached
 [
Dïths
 [
BGMode
][
bg
]];

1898 
BG
.
PÆëãShi·
 = 
PÆëãShi·s
[
BGMode
][
bg
];

1899 
BG
.
PÆëãMask
 = 
PÆëãMasks
[
BGMode
][
bg
];

1900 
BG
.
Dúe˘CﬁourMode
 = (
BGMode
 =3 || BGModê=4Ë&& 
bg
 == 0 &&

1901 (
GFX
.
r2130
 & 1);

1903 i‡(
PPU
.
BGMoßic
 [
bg
] && PPU.
Moßic
 > 1)

1905 
	`‹gDøwBackgroundMoßic
 (
BGMode
, 
bg
, 
Z1
, 
Z2
);

1909 
BGMode
)

1912 i‡(
Sëtögs
.
Wª°Àm™üArˇde
)

1915 
	`‹gDøwBackgroundOff£t
 (
BGMode
, 
bg
, 
Z1
, 
Z2
);

1922 
	`‹gDøwBackgroundMode5
 (
BGMode
, 
bg
, 
Z1
, 
Z2
);

1927 
	`CHECK_SOUND
();

1929 
uöt32
 
Tûe
;

1930 
uöt16
 *
SC0
;

1931 
uöt16
 *
SC1
;

1932 
uöt16
 *
SC2
;

1933 
uöt16
 *
SC3
;

1934 
uöt32
 
Width
;

1935 
uöt8
 
dïths
 [2] = {
Z1
, 
Z2
};

1937 i‡(
BGMode
 == 0)

1938 
BG
.
SèπPÆëã
 = 
bg
 << 5;

1940 
BG
.
SèπPÆëã
 = 0;

1942 
SC0
 = (
uöt16
 *Ë&
Mem‹y
.
VRAM
[
PPU
.
BG
[
bg
].
SCBa£
 << 1];

1944 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1945 
SC1
 = 
SC0
 + 1024;

1947 
SC1
 = 
SC0
;

1949 if(
SC1
>=(*)(
Mem‹y
.
VRAM
+0x10000))

1950 
SC1
=(
uöt16
*)&
Mem‹y
.
VRAM
[((
uöt8
*)SC1-&Memory.VRAM[0])%0x10000];

1952 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 2)

1953 
SC2
 = 
SC1
 + 1024;

1955 
SC2
 = 
SC0
;

1957 if((
SC2
-(*)
Mem‹y
.
VRAM
)>0x10000)

1958 
SC2
-=0x10000;

1961 i‡(
PPU
.
BG
[
bg
].
SCSize
 & 1)

1962 
SC3
 = 
SC2
 + 1024;

1964 
SC3
 = 
SC2
;

1966 if((
SC3
-(*)
Mem‹y
.
VRAM
)>0x10000)

1967 
SC3
-=0x10000;

1970 
Löes
;

1971 
Off£tMask
;

1972 
Off£tShi·
;

1974 i‡(
BG
.
TûeSize
 == 16)

1976 
Off£tMask
 = 0x3ff;

1977 
Off£tShi·
 = 4;

1981 
Off£tMask
 = 0x1ff;

1982 
Off£tShi·
 = 3;

1985 
uöt32
 
Y
 = 
GFX
.
SèπY
; Y <GFX.
EndY
; Y +
Löes
)

1987 
uöt32
 
VOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].VOffset;

1988 
uöt32
 
HOff£t
 = 
LöeD©a
 [
Y
].
BG
[
bg
].HOffset;

1989 
VútAlign
 = (
Y
 + 
VOff£t
) & 7;

1991 
Löes
 = 1; Löe†< 8 - 
VútAlign
; Lines++)

1992 i‡((
VOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].VOffset) ||

1993 (
HOff£t
 !
LöeD©a
 [
Y
 + 
Löes
].
BG
[
bg
].HOffset))

1996 i‡(
Y
 + 
Löes
 > 
GFX
.
EndY
)

1997 
Löes
 = 
GFX
.
EndY
 + 1 - 
Y
;

1999 
VútAlign
 <<= 3;

2001 
uöt32
 
S¸ìnLöe
 = (
VOff£t
 + 
Y
Ë>> 
Off£tShi·
;

2002 
uöt32
 
t1
;

2003 
uöt32
 
t2
;

2004 i‡(((
VOff£t
 + 
Y
) & 15) > 7)

2006 
t1
 = 16;

2007 
t2
 = 0;

2011 
t1
 = 0;

2012 
t2
 = 16;

2014 
uöt16
 *
b1
;

2015 
uöt16
 *
b2
;

2017 i‡(
S¸ìnLöe
 & 0x20)

2018 
b1
 = 
SC2
, 
b2
 = 
SC3
;

2020 
b1
 = 
SC0
, 
b2
 = 
SC1
;

2022 
b1
 +(
S¸ìnLöe
 & 0x1f) << 5;

2023 
b2
 +(
S¸ìnLöe
 & 0x1f) << 5;

2025 
˛ùcou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
];

2026 i‡(!
˛ùcou¡
)

2027 
˛ùcou¡
 = 1;

2028 
˛ù
 = 0; clù < 
˛ùcou¡
; clip++)

2030 
uöt32
 
Le·
;

2031 
uöt32
 
Right
;

2033 i‡(!
GFX
.
pCuºítClù
->
Cou¡
 [
bg
])

2035 
Le·
 = 0;

2036 
Right
 = 256;

2040 
Le·
 = 
GFX
.
pCuºítClù
->Le· [
˛ù
][
bg
];

2041 
Right
 = 
GFX
.
pCuºítClù
->Righà[
˛ù
][
bg
];

2043 i‡(
Right
 <
Le·
)

2047 
uöt32
 
s
 = 
Le·
 * 
GFX
.
PixSize
 + 
Y
 * GFX.
PPL
;

2048 
uöt32
 
HPos
 = (
HOff£t
 + 
Le·
Ë& 
Off£tMask
;

2050 
uöt32
 
QuŸ
 = 
HPos
 >> 3;

2051 
uöt32
 
Cou¡
 = 0;

2053 
uöt16
 *
t
;

2054 i‡(
BG
.
TûeSize
 == 8)

2056 i‡(
QuŸ
 > 31)

2057 
t
 = 
b2
 + (
QuŸ
 & 0x1f);

2059 
t
 = 
b1
 + 
QuŸ
;

2063 i‡(
QuŸ
 > 63)

2064 
t
 = 
b2
 + ((
QuŸ
 >> 1) & 0x1f);

2066 
t
 = 
b1
 + (
QuŸ
 >> 1);

2069 
Width
 = 
Right
 - 
Le·
;

2071 i‡(
HPos
 & 7)

2073 
uöt32
 
Off£t
 = (
HPos
 & 7);

2074 
Cou¡
 = 8 - 
Off£t
;

2075 i‡(
Cou¡
 > 
Width
)

2076 
Cou¡
 = 
Width
;

2077 
s
 -
Off£t
 * 
GFX
.
PixSize
;

2078 
Tûe
 = 
	`READ_2BYTES
(
t
);

2079 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

2081 i‡(
BG
.
TûeSize
 == 8)

2083 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
,

2084 
Löes
);

2088 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

2091 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1),

2092 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

2095 i‡(
Tûe
 & 
H_FLIP
)

2097 i‡(
Tûe
 & 
V_FLIP
)

2100 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

2101 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

2106 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

2107 
s
, 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

2113 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1), 
s
,

2114 
Off£t
, 
Cou¡
, 
VútAlign
, 
Löes
);

2118 i‡(
BG
.
TûeSize
 == 8)

2120 
t
++;

2121 i‡(
QuŸ
 == 31)

2122 
t
 = 
b2
;

2123 i‡(
QuŸ
 == 63)

2124 
t
 = 
b1
;

2128 
t
 +
QuŸ
 & 1;

2129 i‡(
QuŸ
 == 63)

2130 
t
 = 
b2
;

2131 i‡(
QuŸ
 == 127)

2132 
t
 = 
b1
;

2134 
QuŸ
++;

2135 
s
 +8 * 
GFX
.
PixSize
;

2139 
Cou¡
 = 
Width
 - Count;

2140 
MiddÀ
 = 
Cou¡
 >> 3;

2141 
Cou¡
 &= 7;

2142 
C
 = 
MiddÀ
; C > 0; 
s
 +8 * 
GFX
.
PixSize
, 
QuŸ
++, C--)

2144 
Tûe
 = 
	`READ_2BYTES
(
t
);

2145 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

2147 i‡(
BG
.
TûeSize
 != 8)

2149 i‡(
Tûe
 & 
H_FLIP
)

2152 i‡(
Tûe
 & 
V_FLIP
)

2155 (*
DøwTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1), 
s
,

2156 
VútAlign
, 
Löes
);

2161 (*
DøwTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1), 
s
,

2162 
VútAlign
, 
Löes
);

2168 i‡(
Tûe
 & 
V_FLIP
)

2171 (*
DøwTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1), 
s
,

2172 
VútAlign
, 
Löes
);

2177 (*
DøwTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1), 
s
,

2178 
VútAlign
, 
Löes
);

2184 (*
DøwTûePå
Ë(
Tûe
, 
s
, 
VútAlign
, 
Löes
);

2187 i‡(
BG
.
TûeSize
 == 8)

2189 
t
++;

2190 i‡(
QuŸ
 == 31)

2191 
t
 = 
b2
;

2193 i‡(
QuŸ
 == 63)

2194 
t
 = 
b1
;

2198 
t
 +
QuŸ
 & 1;

2199 i‡(
QuŸ
 == 63)

2200 
t
 = 
b2
;

2202 i‡(
QuŸ
 == 127)

2203 
t
 = 
b1
;

2207 i‡(
Cou¡
)

2209 
Tûe
 = 
	`READ_2BYTES
(
t
);

2210 
GFX
.
Z1
 = GFX.
Z2
 = 
dïths
 [(
Tûe
 & 0x2000) >> 13];

2212 i‡(
BG
.
TûeSize
 == 8)

2213 (*
DøwClù≥dTûePå
Ë(
Tûe
, 
s
, 0, 
Cou¡
, 
VútAlign
,

2214 
Löes
);

2217 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
)))

2220 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + (
QuŸ
 & 1), 
s
, 0,

2221 
Cou¡
, 
VútAlign
, 
Löes
);

2224 i‡(
Tûe
 & 
H_FLIP
)

2226 i‡(
Tûe
 & 
V_FLIP
)

2229 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + 1 - (
QuŸ
 & 1),

2230 
s
, 0, 
Cou¡
, 
VútAlign
,

2231 
Löes
);

2236 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t1
 + 1 - (
QuŸ
 & 1),

2237 
s
, 0, 
Cou¡
, 
VútAlign
,

2238 
Löes
);

2244 (*
DøwClù≥dTûePå
Ë(
Tûe
 + 
t2
 + (
QuŸ
 & 1),

2245 
s
, 0, 
Cou¡
, 
VútAlign
,

2246 
Löes
);

2252 
	}
}

2254 
	#RENDER_BACKGROUND_MODE7
(
TYPE
,
FUNC
Ë\

	)

2255 
CHECK_SOUND
(); \

2257 
uöt8
 *
	gVRAM1
 = 
Mem‹y
.
VRAM
 + 1; \

2258 i‡(
	gGFX
.
	gr2130
 & 1) \

2260 i‡(
	gIPPU
.
	gDúe˘CﬁourM≠sNìdRebuûd
) \

2261 
S9xBuûdDúe˘CﬁourM≠s
 (); \

2262 
	gGFX
.
	gS¸ìnCﬁ‹s
 = 
Dúe˘CﬁourM≠s
 [0]; \

2265 
	gGFX
.
	gS¸ìnCﬁ‹s
 = 
IPPU
.
S¸ìnCﬁ‹s
; \

2267 
	gØ
, 
	gcc
; \

2268 
	gdú
; \

2269 
	g°¨tx
, 
	gídx
; \

2270 
uöt32
 
	gLe·
 = 0; \

2271 
uöt32
 
	gRight
 = 256; \

2272 
uöt32
 
	gClùCou¡
 = 
GFX
.
pCuºítClù
->
Cou¡
 [
bg
]; \

2274 i‡(!
	gClùCou¡
) \

2275 
	gClùCou¡
 = 1; \

2277 
	gS¸ìn
 +
GFX
.
SèπY
 * GFX.
Pôch
; \

2278 
uöt8
 *
	gDïth
 = 
GFX
.
DB
 + GFX.
SèπY
 * GFX.
PPL
; \

2279 
SLöeM©rixD©a
 *
	gl
 = &
LöeM©rixD©a
 [
GFX
.
SèπY
]; \

2281 
uöt32
 
	gLöe
 = 
GFX
.
SèπY
; Löê<GFX.
EndY
; Löe++, 
	gS¸ìn
 +GFX.
Pôch
, 
	gDïth
 +GFX.
PPL
, 
	gl
++) \

2283 
	gyy
; \

2285 
öt32
 
	gHOff£t
 = ((öt32Ë
LöeD©a
 [
Löe
].
BG
[0].
HOff£t
 << 
M7
) >> M7; \

2286 
öt32
 
	gVOff£t
 = ((öt32Ë
LöeD©a
 [
Löe
].
BG
[0].
VOff£t
 << 
M7
) >> M7; \

2288 
öt32
 
	gCíåeX
 = ((öt32Ë
l
->
CíåeX
 << 
M7
) >> M7; \

2289 
öt32
 
	gCíåeY
 = ((öt32Ë
l
->
CíåeY
 << 
M7
) >> M7; \

2291 i‡(
	gPPU
.
	gMode7VFlù
) \

2292 
	gyy
 = 261 - (Ë
Löe
; \

2294 
	gyy
 = 
Löe
; \

2296 i‡(
	gPPU
.
	gMode7Rïót
 == 0) \

2297 
yy
 +(
VOff£t
 - 
CíåeY
) % 1023; \

2299 
	gyy
 +
VOff£t
 - 
CíåeY
; \

2300 
	gBB
 = 
l
->
M©rixB
 * 
yy
 + (
CíåeX
 << 8); \

2301 
	gDD
 = 
l
->
M©rixD
 * 
yy
 + (
CíåeY
 << 8); \

2303 
uöt32
 
	g˛ù
 = 0; clù < 
	gClùCou¡
; clip++) \

2305 i‡(
	gGFX
.
	gpCuºítClù
->
	gCou¡
 [
bg
]) \

2307 
	gLe·
 = 
GFX
.
pCuºítClù
->
Le·
 [
˛ù
][
bg
]; \

2308 
	gRight
 = 
GFX
.
pCuºítClù
->
Right
 [
˛ù
][
bg
]; \

2309 i‡(
	gRight
 <
Le·
) \

2312 
TYPE
 *
	gp
 = (TYPE *Ë
S¸ìn
 + 
Le·
; \

2313 
uöt8
 *
	gd
 = 
Dïth
 + 
Le·
; \

2315 i‡(
	gPPU
.
	gMode7HFlù
) \

2317 
	g°¨tx
 = 
Right
 - 1; \

2318 
	gídx
 = 
Le·
 - 1; \

2319 
	gdú
 = -1; \

2320 
	gØ
 = -
l
->
M©rixA
; \

2321 
	gcc
 = -
l
->
M©rixC
; \

2325 
	g°¨tx
 = 
Le·
; \

2326 
	gídx
 = 
Right
; \

2327 
	gdú
 = 1; \

2328 
	gØ
 = 
l
->
M©rixA
; \

2329 
	gcc
 = 
l
->
M©rixC
; \

2331 
	gxx
; \

2332 i‡(
	gPPU
.
	gMode7Rïót
 == 0) \

2333 
xx
 = 
°¨tx
 + (
HOff£t
 - 
CíåeX
) % 1023; \

2335 
	gxx
 = 
°¨tx
 + 
HOff£t
 - 
CíåeX
; \

2336 
	gAA
 = 
l
->
M©rixA
 * 
xx
; \

2337 
	gCC
 = 
l
->
M©rixC
 * 
xx
; \

2339 i‡(!
	gPPU
.
	gMode7Rïót
) \

2341 
	gx
 = 
°¨tx
; x !
ídx
; x +
dú
, 
	gAA
 +
Ø
, 
	gCC
 +
cc
, 
	gp
++, 
	gd
++) \

2343 
	gX
 = ((
AA
 + 
BB
) >> 8) & 0x3ff; \

2344 
	gY
 = ((
CC
 + 
DD
) >> 8) & 0x3ff; \

2345 
uöt8
 *
	gTûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2346 
uöt32
 
	gb
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2347 
	gGFX
.
	gZ1
 = 
Mode7Dïths
 [(
b
 & 
GFX
.
Mode7Pri‹ôyMask
) >> 7]; \

2348 i‡(
	gGFX
.
	gZ1
 > *
	gd
 && (
	gb
 & GFX.
	gMode7Mask
) ) \

2350 *
	gp
 = (
FUNC
); \

2351 *
	gd
 = 
GFX
.
Z1
; \

2357 
	gx
 = 
°¨tx
; x !
ídx
; x +
dú
, 
	gAA
 +
Ø
, 
	gCC
 +
cc
, 
	gp
++, 
	gd
++) \

2359 
	gX
 = ((
AA
 + 
BB
) >> 8); \

2360 
	gY
 = ((
CC
 + 
DD
) >> 8); \

2362 i‡(
	gSëtögs
.
	gDez´m⁄
 && 
	gPPU
.
	gMode7Rïót
 == 2) \

2364 
X
 &= 0x7ff; \

2365 
	gY
 &= 0x7ff; \

2368 i‡(((
	gX
 | 
	gY
) & ~0x3ff) == 0) \

2370 
uöt8
 *
TûeD©a
 = 
VRAM1
 + (
Mem‹y
.
VRAM
[((
Y
 & ~7Ë<< 5Ë+ ((
X
 >> 2) & ~1)] << 7); \

2371 
uöt32
 
	gb
 = *(
TûeD©a
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2372 
	gGFX
.
	gZ1
 = 
Mode7Dïths
 [(
b
 & 
GFX
.
Mode7Pri‹ôyMask
) >> 7]; \

2373 i‡(
	gGFX
.
	gZ1
 > *
	gd
 && (
	gb
 & GFX.
	gMode7Mask
) ) \

2375 *
	gp
 = (
FUNC
); \

2376 *
	gd
 = 
GFX
.
Z1
; \

2381 i‡(
	gPPU
.
	gMode7Rïót
 == 3) \

2383 
X
 = (
x
 + 
HOff£t
) & 7; \

2384 
	gY
 = (
yy
 + 
CíåeY
) & 7; \

2385 
uöt32
 
	gb
 = *(
VRAM1
 + ((
Y
 & 7Ë<< 4Ë+ ((
X
 & 7) << 1)); \

2386 
	gGFX
.
	gZ1
 = 
Mode7Dïths
 [(
b
 & 
GFX
.
Mode7Pri‹ôyMask
) >> 7]; \

2387 i‡(
	gGFX
.
	gZ1
 > *
	gd
 && (
	gb
 & GFX.
	gMode7Mask
) ) \

2389 *
	gp
 = (
FUNC
); \

2390 *
	gd
 = 
GFX
.
Z1
; \

2400 
	$‹gDøwBGMode7Background16
 (
uöt8
 *
S¸ìn
, 
bg
)

2402 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2403 
	}
}

2405 
	$‹gDøwBGMode7Background16Add
 (
uöt8
 *
S¸ìn
, 
bg
)

2407 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2408 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2409 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2410 
p
 [
GFX
.
Dñè
]) :

2411 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2412 
GFX
.
FixedCﬁour
)) :

2413 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2414 
	}
}

2416 
	$‹gDøwBGMode7Background16Add1_2
 (
uöt8
 *
S¸ìn
, 
bg
)

2418 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2419 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2420 
	`COLOR_ADD1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2421 
p
 [
GFX
.
Dñè
]) :

2422 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2423 
GFX
.
FixedCﬁour
)) :

2424 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2425 
	}
}

2427 
	$‹gDøwBGMode7Background16Sub
 (
uöt8
 *
S¸ìn
, 
bg
)

2429 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2430 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2431 
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2432 
p
 [
GFX
.
Dñè
]) :

2433 
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2434 
GFX
.
FixedCﬁour
)) :

2435 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2436 
	}
}

2438 
	$‹gDøwBGMode7Background16Sub1_2
 (
uöt8
 *
S¸ìn
, 
bg
)

2440 
	`RENDER_BACKGROUND_MODE7
 (
uöt16
, *(
d
 + 
GFX
.
DïthDñè
) ?

2441 (*(
d
 + 
GFX
.
DïthDñè
) != 1 ?

2442 
	`COLOR_SUB1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2443 
p
 [
GFX
.
Dñè
]) :

2444 
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
],

2445 
GFX
.
FixedCﬁour
)) :

2446 
GFX
.
S¸ìnCﬁ‹s
 [
b
 & GFX.
Mode7Mask
]);

2447 
	}
}

2450 
	#_BUILD_SETUP
(
F
Ë\

	)

2451 
	gGFX
.
	gBuûdPixñ
 = 
BuûdPixñ
##
F
; \

2452 
	gGFX
.
	gBuûdPixñ2
 = 
BuûdPixñ2
##
F
; \

2453 
	gGFX
.
	gDecompo£Pixñ
 = 
Decompo£Pixñ
##
F
; \

2454 
	gRED_LOW_BIT_MASK
 = 
RED_LOW_BIT_MASK_
##
F
; \

2455 
	gGREEN_LOW_BIT_MASK
 = 
GREEN_LOW_BIT_MASK_
##
F
; \

2456 
	gBLUE_LOW_BIT_MASK
 = 
BLUE_LOW_BIT_MASK_
##
F
; \

2457 
	gRED_HI_BIT_MASK
 = 
RED_HI_BIT_MASK_
##
F
; \

2458 
	gGREEN_HI_BIT_MASK
 = 
GREEN_HI_BIT_MASK_
##
F
; \

2459 
	gBLUE_HI_BIT_MASK
 = 
BLUE_HI_BIT_MASK_
##
F
; \

2460 
	gMAX_RED
 = 
MAX_RED_
##
F
; \

2461 
	gMAX_GREEN
 = 
MAX_GREEN_
##
F
; \

2462 
	gMAX_BLUE
 = 
MAX_BLUE_
##
F
; \

2463 
	gGREEN_HI_BIT
 = ((
MAX_GREEN_
##
F
 + 1) >> 1); \

2464 
	gSPARE_RGB_BIT_MASK
 = 
SPARE_RGB_BIT_MASK_
##
F
; \

2465 
	gRGB_LOW_BITS_MASK
 = (
RED_LOW_BIT_MASK_
##
F
 | \

2466 
GREEN_LOW_BIT_MASK_
##
F
 | \

2467 
BLUE_LOW_BIT_MASK_
##
F
); \

2468 
	gRGB_HI_BITS_MASK
 = (
RED_HI_BIT_MASK_
##
F
 | \

2469 
GREEN_HI_BIT_MASK_
##
F
 | \

2470 
BLUE_HI_BIT_MASK_
##
F
); \

2471 
	gRGB_HI_BITS_MASKx2
 = ((
RED_HI_BIT_MASK_
##
F
 | \

2472 
GREEN_HI_BIT_MASK_
##
F
 | \

2473 
BLUE_HI_BIT_MASK_
##
F
) << 1); \

2474 
	gRGB_REMOVE_LOW_BITS_MASK
 = ~
RGB_LOW_BITS_MASK
; \

2475 
	gFIRST_COLOR_MASK
 = 
FIRST_COLOR_MASK_
##
F
; \

2476 
	gSECOND_COLOR_MASK
 = 
SECOND_COLOR_MASK_
##
F
; \

2477 
	gTHIRD_COLOR_MASK
 = 
THIRD_COLOR_MASK_
##
F
; \

2478 
	gALPHA_BITS_MASK
 = 
ALPHA_BITS_MASK_
##
F
; \

2479 
	gFIRST_THIRD_COLOR_MASK
 = 
FIRST_COLOR_MASK
 | 
THIRD_COLOR_MASK
; \

2480 
	gTWO_LOW_BITS_MASK
 = 
RGB_LOW_BITS_MASK
 | (RGB_LOW_BITS_MASK << 1); \

2481 
	gHIGH_BITS_SHIFTED_TWO_MASK
 = (–(
FIRST_COLOR_MASK
 | 
SECOND_COLOR_MASK
 | 
THIRD_COLOR_MASK
) & \

2482 ~
TWO_LOW_BITS_MASK
 ) >> 2);

2484 
	$RídîS¸ìn
 (
uöt8
 *
S¸ìn
, 
boﬁ8
 
sub
, boﬁ8 
f‹˚_no_add
, uöt8 
D
)

2486 
boﬁ8
 
BG0
;

2487 
boﬁ8
 
BG1
;

2488 
boﬁ8
 
BG2
;

2489 
boﬁ8
 
BG3
;

2490 
boﬁ8
 
OB
;

2492 
GFX
.
S
 = 
S¸ìn
;

2494 i‡(!
sub
)

2496 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [0];

2497 
BG0
 = 
	`ON_MAIN
 (0);

2498 
BG1
 = 
	`ON_MAIN
 (1);

2499 
BG2
 = 
	`ON_MAIN
 (2);

2500 
BG3
 = 
	`ON_MAIN
 (3);

2501 
OB
 = 
	`ON_MAIN
 (4);

2505 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [1];

2506 
BG0
 = 
	`ON_SUB
 (0);

2507 
BG1
 = 
	`ON_SUB
 (1);

2508 
BG2
 = 
	`ON_SUB
 (2);

2509 
BG3
 = 
	`ON_SUB
 (3);

2510 
OB
 = 
	`ON_SUB
 (4);

2513 
sub
 |
f‹˚_no_add
;

2515 i‡(
PPU
.
BGMode
 <= 1)

2517 i‡(
OB
)

2519 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(4));

2520 
	`‹gDøwOBJS
 (!
sub
, 
D
);

2522 i‡(
BG0
)

2524 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(0));

2525 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 0, 
D
 + 10, D + 14);

2527 i‡(
BG1
)

2529 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(1));

2530 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 1, 
D
 + 9, D + 13);

2532 i‡(
BG2
)

2534 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(2));

2535 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 2, 
D
 + 3,

2536 (
Mem‹y
.
FûlRAM
 [0x2105] & 8Ë=0 ? 
D
 + 6 : D + 17);

2538 i‡(
BG3
 && 
PPU
.
BGMode
 == 0)

2540 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(3));

2541 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 3, 
D
 + 2, D + 5);

2544 i‡(
PPU
.
BGMode
 != 7)

2546 i‡(
OB
)

2548 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(4));

2549 
	`‹gDøwOBJS
 (!
sub
, 
D
);

2551 i‡(
BG0
)

2553 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(0));

2554 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 0, 
D
 + 5, D + 13);

2556 i‡(
PPU
.
BGMode
 !6 && 
BG1
)

2558 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(1));

2559 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 1, 
D
 + 2, D + 9);

2564 i‡(
OB
)

2566 
	`‹gSñe˘TûeRídîî
 (
sub
 || !
	`SUB_OR_ADD
(4));

2567 
	`‹gDøwOBJS
 (!
sub
, 
D
);

2569 i‡(
BG0
 || ((
Mem‹y
.
FûlRAM
 [0x2133] & 0x40Ë&& 
BG1
))

2571 
bg
;

2573 i‡(
Mem‹y
.
FûlRAM
 [0x2133] & 0x40)

2575 
GFX
.
Mode7Mask
 = 0x7f;

2576 
GFX
.
Mode7Pri‹ôyMask
 = 0x80;

2577 
Mode7Dïths
 [0] = 5 + 
D
;

2578 
Mode7Dïths
 [1] = 9 + 
D
;

2579 
bg
 = 1;

2583 
GFX
.
Mode7Mask
 = 0xff;

2584 
GFX
.
Mode7Pri‹ôyMask
 = 0;

2585 
Mode7Dïths
 [0] = 5 + 
D
;

2586 
Mode7Dïths
 [1] = 5 + 
D
;

2587 
bg
 = 0;

2589 i‡(
sub
 || !
	`SUB_OR_ADD
(0))

2592 
	`‹gDøwBGMode7Background16
 (
S¸ìn
, 
bg
);

2596 i‡(
GFX
.
r2131
 & 0x80)

2598 i‡(
GFX
.
r2131
 & 0x40)

2600 
	`‹gDøwBGMode7Background16Sub1_2
 (
S¸ìn
, 
bg
);

2604 
	`‹gDøwBGMode7Background16Sub
 (
S¸ìn
, 
bg
);

2609 i‡(
GFX
.
r2131
 & 0x40)

2611 
	`‹gDøwBGMode7Background16Add1_2
 (
S¸ìn
, 
bg
);

2616 
	`‹gDøwBGMode7Background16Add
 (
S¸ìn
, 
bg
);

2622 
	}
}

2625 
	$‹gS9xUpd©eS¸ìn
 ()

2627 
öt32
 
x2
 = 1;

2629 
GFX
.
S
 = GFX.
S¸ìn
;

2630 
GFX
.
r2131
 = 
Mem‹y
.
FûlRAM
 [0x2131];

2631 
GFX
.
r212c
 = 
Mem‹y
.
FûlRAM
 [0x212c];

2632 
GFX
.
r212d
 = 
Mem‹y
.
FûlRAM
 [0x212d];

2633 
GFX
.
r2130
 = 
Mem‹y
.
FûlRAM
 [0x2130];

2634 
GFX
.
P£udo
 = (
Mem‹y
.
FûlRAM
 [0x2133] & 8) != 0 &&

2635 (
GFX
.
r212c
 & 15Ë!(GFX.
r212d
 & 15) &&

2636 (
GFX
.
r2131
 & 0x3f) == 0;

2638 i‡(
IPPU
.
OBJCh™ged
)

2639 
	`S9xSëupOBJ
 ();

2641 i‡(
PPU
.
RecompuãClùWödows
)

2643 
	`CompuãClùWödows
 ();

2644 
PPU
.
RecompuãClùWödows
 = 
FALSE
;

2647 
GFX
.
SèπY
 = 
IPPU
.
PªviousLöe
;

2648 i‡((
GFX
.
EndY
 = 
IPPU
.
CuºítLöe
 - 1Ë>
PPU
.
S¸ìnHeight
)

2649 
GFX
.
EndY
 = 
PPU
.
S¸ìnHeight
 - 1;

2651 
uöt32
 
°¨ty
 = 
GFX
.
SèπY
;

2652 
uöt32
 
ídy
 = 
GFX
.
EndY
;

2654 
uöt32
 
bœck
 = 
BLACK
 | (BLACK << 16);

2658 i‡(
GFX
.
P£udo
)

2660 
GFX
.
r2131
 = 0x5f;

2661 
GFX
.
r212d
 = (
Mem‹y
.
FûlRAM
 [0x212c] ^

2662 
Mem‹y
.
FûlRAM
 [0x212d]) & 15;

2663 
GFX
.
r212c
 &~GFX.
r212d
;

2664 
GFX
.
r2130
 |= 2;

2667 i‡(!
PPU
.
F‹˚dBœnkög
 && 
ADD_OR_SUB_ON_ANYTHING
 &&

2668 (
GFX
.
r2130
 & 0x30) != 0x30 &&

2669 !((
GFX
.
r2130
 & 0x30Ë=0x10 && 
IPPU
.
Clù
[1].
Cou¡
[5] == 0))

2671 
ClùD©a
 *
pClù
;

2673 
GFX
.
FixedCﬁour
 = 
	`BUILD_PIXEL
 (
IPPU
.
XB
 [
PPU
.
FixedCﬁourRed
],

2674 
IPPU
.
XB
 [
PPU
.
FixedCﬁourGªí
],

2675 
IPPU
.
XB
 [
PPU
.
FixedCﬁourBlue
]);

2679 
pClù
 = &
IPPU
.
Clù
 [1];

2682 i‡(
pClù
->
Cou¡
 [5])

2685 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

2687 
	`ZîoMem‹y
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
,

2688 
IPPU
.
RídîedS¸ìnWidth
);

2689 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

2690 
IPPU
.
RídîedS¸ìnWidth
);

2691 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

2693 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

2694 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

2695 
p
 < 
q
)

2696 *
p
++ = 
bœck
;

2698 
uöt32
 
c
 = 0; c < 
pClù
->
Cou¡
 [5]; c++)

2700 i‡(
pClù
->
Right
 [
c
][5] >ÖClù->
Le·
 [c][5])

2702 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
pClù
->
Le·
 [
c
][5] * 
x2
,

2703 1, (
pClù
->
Right
 [
c
][5] -ÖClù->
Le·
 [c][5]Ë* 
x2
);

2704 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

2711 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

2712 
uöt16
 *
q
 = 
p
 + 
pClù
->
Right
 [
c
][5] * 
x2
;

2713 
p
 +
pClù
->
Le·
 [
c
][5] * 
x2
;

2715 
p
 < 
q
)

2716 *
p
++ = (
uöt16
Ë
GFX
.
FixedCﬁour
;

2724 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

2726 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

2727 
IPPU
.
RídîedS¸ìnWidth
);

2728 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
, 1,

2729 
IPPU
.
RídîedS¸ìnWidth
);

2731 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

2738 
uöt32
 
b
 = 
GFX
.
FixedCﬁour
 | (GFX.FixedColour << 16);

2739 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

2740 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

2742 
p
 < 
q
)

2743 *
p
++ = 
b
;

2747 i‡(
ANYTHING_ON_SUB
)

2749 
GFX
.
DB
 = GFX.
SubZBuf„r
;

2750 
	`RídîS¸ìn
 (
GFX
.
SubS¸ìn
, 
TRUE
, TRUE, 
SUB_SCREEN_DEPTH
);

2753 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

2756 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

2758 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

2759 
uöt8
 *
d
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
;

2760 
uöt8
 *
e
 = 
d
 + 
IPPU
.
RídîedS¸ìnWidth
;

2762 
d
 < 
e
)

2764 i‡(*
d
 > 1)

2765 *
p
 = *’ + 
GFX
.
Dñè
);

2767 *
p
 = 
BLACK
;

2768 
d
++;

2769 
p
++;

2774 
GFX
.
DB
 = GFX.
ZBuf„r
;

2775 
	`RídîS¸ìn
 (
GFX
.
S¸ìn
, 
FALSE
, FALSE, 
MAIN_SCREEN_DEPTH
);

2777 i‡(
	`SUB_OR_ADD
(5))

2779 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0];

2780 
uöt32
 
Le·
 = 0;

2781 
uöt32
 
Right
 = 256;

2782 
uöt32
 
Cou¡
;

2784 
pClù
 = &
IPPU
.
Clù
 [0];

2785 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

2787 i‡(!(
Cou¡
 = 
pClù
->Count [5]))

2789 
Le·
 = 0;

2790 
Right
 = 256 * 
x2
;

2791 
Cou¡
 = 1;

2794 
uöt32
 
b
 = 0; b < 
Cou¡
; b++)

2796 i‡(
pClù
->
Cou¡
 [5])

2798 
Le·
 = 
pClù
->Le· [
b
][5] * 
x2
;

2799 
Right
 = 
pClù
->Righà[
b
][5] * 
x2
;

2800 i‡(
Right
 <
Le·
)

2804 i‡(
GFX
.
r2131
 & 0x80)

2806 i‡(
GFX
.
r2131
 & 0x40)

2809 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

2810 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2811 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

2812 
uöt8
 *
e
 = 
d
 + 
Right
;

2813 
uöt16
 
back_fixed
 = 
	`COLOR_SUB
 (
back
, 
GFX
.
FixedCﬁour
);

2815 
d
 +
Le·
;

2816 
d
 < 
e
)

2818 i‡(*
d
 == 0)

2820 i‡(*
s
)

2822 i‡(*
s
 != 1)

2823 *
p
 = 
	`COLOR_SUB1_2
 (
back
, *’ + 
GFX
.
Dñè
));

2825 *
p
 = 
back_fixed
;

2828 *
p
 = (
uöt16
Ë
back
;

2830 
d
++;

2831 
p
++;

2832 
s
++;

2838 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

2839 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

2840 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2841 
uöt8
 *
e
 = 
d
 + 
Right
;

2842 
uöt16
 
back_fixed
 = 
	`COLOR_SUB
 (
back
, 
GFX
.
FixedCﬁour
);

2844 
d
 +
Le·
;

2845 
d
 < 
e
)

2847 i‡(*
d
 == 0)

2849 i‡(*
s
)

2851 i‡(*
s
 != 1)

2852 *
p
 = 
	`COLOR_SUB
 (
back
, *’ + 
GFX
.
Dñè
));

2854 *
p
 = 
back_fixed
;

2857 *
p
 = (
uöt16
Ë
back
;

2859 
d
++;

2860 
p
++;

2861 
s
++;

2866 i‡(
GFX
.
r2131
 & 0x40)

2868 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

2869 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2870 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

2871 
uöt8
 *
e
 = 
d
 + 
Right
;

2872 
uöt16
 
back_fixed
 = 
	`COLOR_ADD
 (
back
, 
GFX
.
FixedCﬁour
);

2873 
d
 +
Le·
;

2874 
d
 < 
e
)

2876 i‡(*
d
 == 0)

2878 i‡(*
s
)

2880 i‡(*
s
 != 1)

2881 *
p
 = 
	`COLOR_ADD1_2
 (
back
, *’ + 
GFX
.
Dñè
));

2883 *
p
 = 
back_fixed
;

2886 *
p
 = (
uöt16
Ë
back
;

2888 
d
++;

2889 
p
++;

2890 
s
++;

2894 i‡(
back
 != 0)

2896 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

2897 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2898 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

2899 
uöt8
 *
e
 = 
d
 + 
Right
;

2900 
uöt16
 
back_fixed
 = 
	`COLOR_ADD
 (
back
, 
GFX
.
FixedCﬁour
);

2901 
d
 +
Le·
;

2902 
d
 < 
e
)

2904 i‡(*
d
 == 0)

2906 i‡(*
s
)

2908 i‡(*
s
 != 1)

2909 *
p
 = 
	`COLOR_ADD
 (
back
, *’ + 
GFX
.
Dñè
));

2911 *
p
 = 
back_fixed
;

2914 *
p
 = (
uöt16
Ë
back
;

2916 
d
++;

2917 
p
++;

2918 
s
++;

2923 i‡(!
pClù
->
Cou¡
 [5])

2929 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

2930 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2931 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

2932 
uöt8
 *
e
 = 
d
 + 
Right
;

2933 
d
 +
Le·
;

2934 
d
 < 
e
)

2936 i‡(*
d
 == 0)

2938 i‡(*
s
)

2940 i‡(*
s
 != 1)

2941 *
p
 = *’ + 
GFX
.
Dñè
);

2943 *
p
 = 
GFX
.
FixedCﬁour
;

2946 *
p
 = (
uöt16
Ë
back
;

2948 
d
++;

2949 
p
++;

2950 
s
++;

2960 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] | (IPPU.ScreenColors [0] << 16);

2961 
pClù
 = &
IPPU
.
Clù
 [0];

2963 i‡(
pClù
->
Cou¡
 [5])

2965 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

2967 
uöt32
 
b
 = 0; b < 
pClù
->
Cou¡
 [5]; b++)

2969 
uöt32
 
Le·
 = 
pClù
->Le· [
b
][5] * 
x2
;

2970 
uöt32
 
Right
 = 
pClù
->Righà[
b
][5] * 
x2
;

2971 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

2972 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2973 
uöt8
 *
e
 = 
d
 + 
Right
;

2974 
d
 +
Le·
;

2976 
d
 < 
e
)

2978 i‡(*
d
 == 0)

2979 *
p
 = (
öt16
Ë
back
;

2980 
d
++;

2981 
p
++;

2988 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

2990 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

2991 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

2992 
uöt8
 *
e
 = 
d
 + 256 * 
x2
;

2994 
d
 < 
e
)

2996 i‡(*
d
 == 0)

2997 *
p
 = (
öt16
Ë
back
;

2998 
d
++;

2999 
p
++;

3010 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] |

3011 (
IPPU
.
S¸ìnCﬁ‹s
 [0] << 16);

3013 i‡(
PPU
.
F‹˚dBœnkög
)

3014 
back
 = 
bœck
;

3016 i‡(
IPPU
.
Clù
 [0].
Cou¡
[5])

3018 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3020 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3021 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3023 
p
 < 
q
)

3024 *
p
++ = 
bœck
;

3026 
uöt32
 
c
 = 0; c < 
IPPU
.
Clù
 [0].
Cou¡
 [5]; c++)

3028 i‡(
IPPU
.
Clù
 [0].
Right
 [
c
][5] > IPPU.Clù [0].
Le·
 [c][5])

3030 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3031 
uöt16
 *
q
 = 
p
 + 
IPPU
.
Clù
 [0].
Right
 [
c
][5] * 
x2
;

3032 
p
 +
IPPU
.
Clù
 [0].
Le·
 [
c
][5] * 
x2
;

3034 
p
 < 
q
)

3035 *
p
++ = (
uöt16
Ë
back
;

3042 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3044 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3045 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3046 
p
 < 
q
)

3047 *
p
++ = 
back
;

3050 i‡(!
PPU
.
F‹˚dBœnkög
)

3052 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3054 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3055 
IPPU
.
RídîedS¸ìnWidth
);

3057 
GFX
.
DB
 = GFX.
ZBuf„r
;

3058 
	`RídîS¸ìn
 (
GFX
.
S¸ìn
, 
FALSE
, 
TRUE
, 
SUB_SCREEN_DEPTH
);

3063 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
;

3064 
	}
}

3066 #ifde‡
GFX_MULTI_FORMAT


3068 
	#_BUILD_PIXEL
(
F
Ë\

	)

3069 
uöt32
 
	gBuûdPixñ
##
F
(uöt32 
R
, uöt32 
G
, uöt32 
B
) \

3071  (
	gBUILD_PIXEL_
##
F
(
R
,
G
,
B
)); \

3073 
uöt32
 
	gBuûdPixñ2
##
F
(uöt32 
R
, uöt32 
G
, uöt32 
B
) \

3075  (
	gBUILD_PIXEL2_
##
F
(
R
,
G
,
B
)); \

3077 
	gDecompo£Pixñ
##
F
(
uöt32
 
pixñ
, uöt32 &
R
, uöt32 &
G
, uöt32 &
B
) \

3079 
	gDECOMPOSE_PIXEL_
##
F
(
pixñ
,
R
,
G
,
B
); \

3082 
	$_BUILD_PIXEL
(
RGB565
)

3083 
	$_BUILD_PIXEL
(
RGB555
)

3084 
	$_BUILD_PIXEL
(
BGR565
)

3085 
	$_BUILD_PIXEL
(
BGR555
)

3086 
	$_BUILD_PIXEL
(
GBR565
)

3087 
	$_BUILD_PIXEL
(
GBR555
)

3088 
	$_BUILD_PIXEL
(
RGB5551
)

3090 
boﬁ8
 
	$S9xSëRídîPixñF‹m©
 (
f‹m©
)

3092 
uöt32
 
cuºít_gøphic_f‹m©
;

3094 
cuºít_gøphic_f‹m©
 = 
f‹m©
;

3096 
f‹m©
)

3098 
RGB565
:

3099 
	`_BUILD_SETUP
(
RGB565
)

3100  (
TRUE
);

3101 
RGB555
:

3102 
	`_BUILD_SETUP
(
RGB555
)

3103  (
TRUE
);

3104 
BGR565
:

3105 
	`_BUILD_SETUP
(
BGR565
)

3106  (
TRUE
);

3107 
BGR555
:

3108 
	`_BUILD_SETUP
(
BGR555
)

3109  (
TRUE
);

3110 
GBR565
:

3111 
	`_BUILD_SETUP
(
GBR565
)

3112  (
TRUE
);

3113 
GBR555
:

3114 
	`_BUILD_SETUP
(
GBR555
)

3115  (
TRUE
);

3116 
RGB5551
:

3117 
	`_BUILD_SETUP
(
RGB5551
)

3118  (
TRUE
);

3122  (
FALSE
);

3123 
	}
}

3127 
	$S9xUpd©eS¸ìn
 ()

3129 
öt32
 
x2
 = 1;

3131 
GFX
.
S
 = GFX.
S¸ìn
;

3132 
GFX
.
r2131
 = 
Mem‹y
.
FûlRAM
 [0x2131];

3133 
GFX
.
r212c
 = 
Mem‹y
.
FûlRAM
 [0x212c];

3134 
GFX
.
r212d
 = 
Mem‹y
.
FûlRAM
 [0x212d];

3135 
GFX
.
r2130
 = 
Mem‹y
.
FûlRAM
 [0x2130];

3137 #ifde‡
JP_FIX


3139 
GFX
.
P£udo
 = (
Mem‹y
.
FûlRAM
 [0x2133] & 8) != 0 &&

3140 (
GFX
.
r212c
 & 15Ë!(GFX.
r212d
 & 15) &&

3141 (
GFX
.
r2131
 == 0x3f);

3145 
GFX
.
P£udo
 = (
Mem‹y
.
FûlRAM
 [0x2133] & 8) != 0 &&

3146 (
GFX
.
r212c
 & 15Ë!(GFX.
r212d
 & 15) &&

3147 (
GFX
.
r2131
 & 0x3f) == 0;

3151 i‡(
IPPU
.
OBJCh™ged
)

3152 
	`S9xSëupOBJ
 ();

3154 i‡(
PPU
.
RecompuãClùWödows
)

3156 
	`CompuãClùWödows
 ();

3157 
PPU
.
RecompuãClùWödows
 = 
FALSE
;

3160 
GFX
.
SèπY
 = 
IPPU
.
PªviousLöe
;

3161 i‡((
GFX
.
EndY
 = 
IPPU
.
CuºítLöe
 - 1Ë>
PPU
.
S¸ìnHeight
)

3162 
GFX
.
EndY
 = 
PPU
.
S¸ìnHeight
 - 1;

3167 
uöt32
 
°¨ty
 = 
GFX
.
SèπY
;

3168 
uöt32
 
ídy
 = 
GFX
.
EndY
;

3269 
uöt32
 
bœck
 = 
BLACK
 | (BLACK << 16);

3271 i‡(
Sëtögs
.
Tøn•¨ícy
 && Sëtögs.
SixãíBô
)

3273 i‡(
GFX
.
P£udo
)

3275 
GFX
.
r2131
 = 0x5f;

3276 
GFX
.
r212c
 &(
Mem‹y
.
FûlRAM
 [0x212d] | 0xf0);

3277 
GFX
.
r212d
 |(
Mem‹y
.
FûlRAM
 [0x212c] & 0x0f);

3278 
GFX
.
r2130
 |= 2;

3281 i‡(!
PPU
.
F‹˚dBœnkög
 && 
ADD_OR_SUB_ON_ANYTHING
 &&

3282 (
GFX
.
r2130
 & 0x30) != 0x30 &&

3283 !((
GFX
.
r2130
 & 0x30Ë=0x10 && 
IPPU
.
Clù
[1].
Cou¡
[5] == 0))

3285 
ClùD©a
 *
pClù
;

3287 
GFX
.
FixedCﬁour
 = 
	`BUILD_PIXEL
 (
IPPU
.
XB
 [
PPU
.
FixedCﬁourRed
],

3288 
IPPU
.
XB
 [
PPU
.
FixedCﬁourGªí
],

3289 
IPPU
.
XB
 [
PPU
.
FixedCﬁourBlue
]);

3293 
pClù
 = &
IPPU
.
Clù
 [1];

3296 i‡(
pClù
->
Cou¡
 [5])

3299 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3301 
	`ZîoMem‹y
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
,

3302 
IPPU
.
RídîedS¸ìnWidth
);

3303 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3304 
IPPU
.
RídîedS¸ìnWidth
);

3305 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3307 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

3308 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3309 
p
 < 
q
)

3310 *
p
++ = 
bœck
;

3312 
uöt32
 
c
 = 0; c < 
pClù
->
Cou¡
 [5]; c++)

3314 i‡(
pClù
->
Right
 [
c
][5] >ÖClù->
Le·
 [c][5])

3316 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
pClù
->
Le·
 [
c
][5] * 
x2
,

3317 1, (
pClù
->
Right
 [
c
][5] -ÖClù->
Le·
 [c][5]Ë* 
x2
);

3318 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3325 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

3326 
uöt16
 *
q
 = 
p
 + 
pClù
->
Right
 [
c
][5] * 
x2
;

3327 
p
 +
pClù
->
Le·
 [
c
][5] * 
x2
;

3329 
p
 < 
q
)

3330 *
p
++ = (
uöt16
Ë
GFX
.
FixedCﬁour
;

3338 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3340 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3341 
IPPU
.
RídîedS¸ìnWidth
);

3342 
	`mem£t
 (
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
, 1,

3343 
IPPU
.
RídîedS¸ìnWidth
);

3345 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3352 
uöt32
 
b
 = 
GFX
.
FixedCﬁour
 | (GFX.FixedColour << 16);

3353 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
SubS¸ìn
 + 
y
 * GFX.
Pôch2
);

3354 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3356 
p
 < 
q
)

3357 *
p
++ = 
b
;

3361 i‡(
ANYTHING_ON_SUB
)

3363 
GFX
.
DB
 = GFX.
SubZBuf„r
;

3364 
	`RídîS¸ìn
 (
GFX
.
SubS¸ìn
, 
TRUE
, TRUE, 
SUB_SCREEN_DEPTH
);

3367 i‡(
IPPU
.
Clù
 [0].
Cou¡
 [5])

3369 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3371 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3372 
uöt8
 *
d
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
;

3373 
uöt8
 *
e
 = 
d
 + 
IPPU
.
RídîedS¸ìnWidth
;

3375 
d
 < 
e
)

3377 i‡(*
d
 > 1)

3378 *
p
 = *’ + 
GFX
.
Dñè
);

3380 *
p
 = 
BLACK
;

3381 
d
++;

3382 
p
++;

3387 
GFX
.
DB
 = GFX.
ZBuf„r
;

3388 
	`RídîS¸ìn
 (
GFX
.
S¸ìn
, 
FALSE
, FALSE, 
MAIN_SCREEN_DEPTH
);

3390 i‡(
	`SUB_OR_ADD
(5))

3392 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0];

3393 
uöt32
 
Le·
 = 0;

3394 
uöt32
 
Right
 = 256;

3395 
uöt32
 
Cou¡
;

3397 
pClù
 = &
IPPU
.
Clù
 [0];

3398 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3400 i‡(!(
Cou¡
 = 
pClù
->Count [5]))

3402 
Le·
 = 0;

3403 
Right
 = 256 * 
x2
;

3404 
Cou¡
 = 1;

3407 
uöt32
 
b
 = 0; b < 
Cou¡
; b++)

3409 i‡(
pClù
->
Cou¡
 [5])

3411 
Le·
 = 
pClù
->Le· [
b
][5] * 
x2
;

3412 
Right
 = 
pClù
->Righà[
b
][5] * 
x2
;

3413 i‡(
Right
 <
Le·
)

3417 i‡(
GFX
.
r2131
 & 0x80)

3419 i‡(
GFX
.
r2131
 & 0x40)

3422 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3423 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3424 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3425 
uöt8
 *
e
 = 
d
 + 
Right
;

3426 
uöt16
 
back_fixed
 = 
	`COLOR_SUB
 (
back
, 
GFX
.
FixedCﬁour
);

3428 
d
 +
Le·
;

3429 
d
 < 
e
)

3431 i‡(*
d
 == 0)

3433 i‡(*
s
)

3435 i‡(*
s
 != 1)

3436 *
p
 = 
	`COLOR_SUB1_2
 (
back
, *’ + 
GFX
.
Dñè
));

3438 *
p
 = 
back_fixed
;

3441 *
p
 = (
uöt16
Ë
back
;

3443 
d
++;

3444 
p
++;

3445 
s
++;

3451 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3452 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3453 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3454 
uöt8
 *
e
 = 
d
 + 
Right
;

3455 
uöt16
 
back_fixed
 = 
	`COLOR_SUB
 (
back
, 
GFX
.
FixedCﬁour
);

3457 
d
 +
Le·
;

3458 
d
 < 
e
)

3460 i‡(*
d
 == 0)

3462 i‡(*
s
)

3464 i‡(*
s
 != 1)

3465 *
p
 = 
	`COLOR_SUB
 (
back
, *’ + 
GFX
.
Dñè
));

3467 *
p
 = 
back_fixed
;

3470 *
p
 = (
uöt16
Ë
back
;

3472 
d
++;

3473 
p
++;

3474 
s
++;

3479 i‡(
GFX
.
r2131
 & 0x40)

3481 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3482 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3483 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3484 
uöt8
 *
e
 = 
d
 + 
Right
;

3485 
uöt16
 
back_fixed
 = 
	`COLOR_ADD
 (
back
, 
GFX
.
FixedCﬁour
);

3486 
d
 +
Le·
;

3487 
d
 < 
e
)

3489 i‡(*
d
 == 0)

3491 i‡(*
s
)

3493 i‡(*
s
 != 1)

3494 *
p
 = 
	`COLOR_ADD1_2
 (
back
, *’ + 
GFX
.
Dñè
));

3496 *
p
 = 
back_fixed
;

3499 *
p
 = (
uöt16
Ë
back
;

3501 
d
++;

3502 
p
++;

3503 
s
++;

3507 i‡(
back
 != 0)

3509 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3510 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3511 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3512 
uöt8
 *
e
 = 
d
 + 
Right
;

3513 
uöt16
 
back_fixed
 = 
	`COLOR_ADD
 (
back
, 
GFX
.
FixedCﬁour
);

3514 
d
 +
Le·
;

3515 
d
 < 
e
)

3517 i‡(*
d
 == 0)

3519 i‡(*
s
)

3521 i‡(*
s
 != 1)

3522 *
p
 = 
	`COLOR_ADD
 (
back
, *’ + 
GFX
.
Dñè
));

3524 *
p
 = 
back_fixed
;

3527 *
p
 = (
uöt16
Ë
back
;

3529 
d
++;

3530 
p
++;

3531 
s
++;

3536 i‡(!
pClù
->
Cou¡
 [5])

3542 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3543 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3544 
uöt8
 *
s
 = 
GFX
.
SubZBuf„r
 + 
y
 * GFX.
ZPôch
 + 
Le·
;

3545 
uöt8
 *
e
 = 
d
 + 
Right
;

3546 
d
 +
Le·
;

3547 
d
 < 
e
)

3549 i‡(*
d
 == 0)

3551 i‡(*
s
)

3553 i‡(*
s
 != 1)

3554 *
p
 = *’ + 
GFX
.
Dñè
);

3556 *
p
 = 
GFX
.
FixedCﬁour
;

3559 *
p
 = (
uöt16
Ë
back
;

3561 
d
++;

3562 
p
++;

3563 
s
++;

3573 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] | (IPPU.ScreenColors [0] << 16);

3574 
pClù
 = &
IPPU
.
Clù
 [0];

3576 i‡(
pClù
->
Cou¡
 [5])

3578 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3580 
uöt32
 
b
 = 0; b < 
pClù
->
Cou¡
 [5]; b++)

3582 
uöt32
 
Le·
 = 
pClù
->Le· [
b
][5] * 
x2
;

3583 
uöt32
 
Right
 = 
pClù
->Righà[
b
][5] * 
x2
;

3584 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
Ë+ 
Le·
;

3585 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3586 
uöt8
 *
e
 = 
d
 + 
Right
;

3587 
d
 +
Le·
;

3589 
d
 < 
e
)

3591 i‡(*
d
 == 0)

3592 *
p
 = (
öt16
Ë
back
;

3593 
d
++;

3594 
p
++;

3601 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3603 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3604 
uöt8
 *
d
 = 
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
;

3605 
uöt8
 *
e
 = 
d
 + 256 * 
x2
;

3607 
d
 < 
e
)

3609 i‡(*
d
 == 0)

3610 *
p
 = (
öt16
Ë
back
;

3611 
d
++;

3612 
p
++;

3623 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] |

3624 (
IPPU
.
S¸ìnCﬁ‹s
 [0] << 16);

3626 i‡(
PPU
.
F‹˚dBœnkög
)

3627 
back
 = 
bœck
;

3629 i‡(
IPPU
.
Clù
 [0].
Cou¡
[5])

3631 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3633 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3634 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3636 
p
 < 
q
)

3637 *
p
++ = 
bœck
;

3639 
uöt32
 
c
 = 0; c < 
IPPU
.
Clù
 [0].
Cou¡
 [5]; c++)

3641 i‡(
IPPU
.
Clù
 [0].
Right
 [
c
][5] > IPPU.Clù [0].
Le·
 [c][5])

3643 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3644 
uöt16
 *
q
 = 
p
 + 
IPPU
.
Clù
 [0].
Right
 [
c
][5] * 
x2
;

3645 
p
 +
IPPU
.
Clù
 [0].
Le·
 [
c
][5] * 
x2
;

3647 
p
 < 
q
)

3648 *
p
++ = (
uöt16
Ë
back
;

3655 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3657 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3658 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3659 
p
 < 
q
)

3660 *
p
++ = 
back
;

3663 i‡(!
PPU
.
F‹˚dBœnkög
)

3665 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3667 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3668 
IPPU
.
RídîedS¸ìnWidth
);

3670 
GFX
.
DB
 = GFX.
ZBuf„r
;

3671 
	`RídîS¸ìn
 (
GFX
.
S¸ìn
, 
FALSE
, 
TRUE
, 
SUB_SCREEN_DEPTH
);

3677 i‡(
Sëtögs
.
SixãíBô
)

3679 
uöt32
 
back
 = 
IPPU
.
S¸ìnCﬁ‹s
 [0] | (IPPU.ScreenColors [0] << 16);

3680 i‡(
PPU
.
F‹˚dBœnkög
)

3681 
back
 = 
bœck
;

3683 
	`‹gSñe˘TûeRídîî
 (
TRUE
);

3685 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3687 
uöt32
 *
p
 = (uöt32 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
);

3688 
uöt32
 *
q
 = (uöt32 *Ë((
uöt16
 *Ë
p
 + 
IPPU
.
RídîedS¸ìnWidth
);

3689 
p
 < 
q
)

3690 *
p
++ = 
back
;

3695 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3697 
	`ZîoMem‹y
 (
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
,

3698 
IPPU
.
RídîedS¸ìnWidth
);

3701 i‡(!
PPU
.
F‹˚dBœnkög
)

3703 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3705 
	`ZîoMem‹y
 (
GFX
.
ZBuf„r
 + 
y
 * GFX.
ZPôch
,

3706 
IPPU
.
RídîedS¸ìnWidth
);

3708 
GFX
.
DB
 = GFX.
ZBuf„r
;

3709 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [0];

3711 
	#FIXCLIP
(
n
)\

	)

3712 i‡(
GFX
.
r212c
 & (1 << (
n
))) \

3713 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [0]; \

3715 
GFX
.
pCuºítClù
 = &
IPPU
.
Clù
 [1]

3718 
	#DISPLAY
(
n
)\

	)

3719 (!(
PPU
.
BG_F‹˚d
 & 
n
) && \

3720 (
GFX
.
r212c
 & 
n
) || \

3721 ((
GFX
.
r212d
 & 
n
Ë&& 
subadd
))

3723 
uöt8
 
subadd
 = 
GFX
.
r2131
 & 0x3f;

3725 
boﬁ8
 
BG0
 = 
	`DISPLAY
(1);

3726 
boﬁ8
 
BG1
 = 
	`DISPLAY
(2);

3727 
boﬁ8
 
BG2
 = 
	`DISPLAY
(4);

3728 
boﬁ8
 
BG3
 = 
	`DISPLAY
(8);

3729 
boﬁ8
 
OB
 = 
	`DISPLAY
(16);

3731 i‡(
PPU
.
BGMode
 <= 1)

3733 i‡(
OB
)

3735 
	`FIXCLIP
(4);

3736 
	`‹gDøwOBJS
 ();

3738 i‡(
BG0
)

3740 
	`FIXCLIP
(0);

3741 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 0, 10, 14);

3743 i‡(
BG1
)

3745 
	`FIXCLIP
(1);

3746 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 1, 9, 13);

3748 i‡(
BG2
)

3750 
	`FIXCLIP
(2);

3751 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 2, 3,

3752 
PPU
.
BG3Pri‹ôy
 ? 17 : 6);

3754 i‡(
BG3
 && 
PPU
.
BGMode
 == 0)

3756 
	`FIXCLIP
(3);

3757 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 3, 2, 5);

3760 i‡(
PPU
.
BGMode
 != 7)

3762 i‡(
OB
)

3764 
	`FIXCLIP
(4);

3765 
	`‹gDøwOBJS
 ();

3767 i‡(
BG0
)

3769 
	`FIXCLIP
(0);

3770 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 0, 5, 13);

3772 i‡(
BG1
 && 
PPU
.
BGMode
 != 6)

3774 
	`FIXCLIP
(1);

3775 
	`‹gDøwBackground
 (
PPU
.
BGMode
, 1, 2, 9);

3780 i‡(
OB
)

3782 
	`FIXCLIP
(4);

3783 
	`‹gDøwOBJS
 ();

3785 i‡(
BG0
 || ((
Mem‹y
.
FûlRAM
 [0x2133] & 0x40Ë&& 
BG1
))

3787 
bg
;

3788 
	`FIXCLIP
(0);

3789 i‡((
Mem‹y
.
FûlRAM
 [0x2133] & 0x40Ë&& 
BG1
)

3791 
GFX
.
Mode7Mask
 = 0x7f;

3792 
GFX
.
Mode7Pri‹ôyMask
 = 0x80;

3793 
Mode7Dïths
 [0] = (
BG0
?5:1);

3794 
Mode7Dïths
 [1] = 9;

3795 
bg
 = 1;

3799 
GFX
.
Mode7Mask
 = 0xff;

3800 
GFX
.
Mode7Pri‹ôyMask
 = 0;

3801 
Mode7Dïths
 [0] = 5;

3802 
Mode7Dïths
 [1] = 5;

3803 
bg
 = 0;

3806 i‡(!
Sëtögs
.
SixãíBô
)

3807 
	`‹gDøwBGMode7Background16
 (
GFX
.
S¸ìn
, 
bg
);

3811 
	`‹gDøwBGMode7Background16
 (
GFX
.
S¸ìn
, 
bg
);

3819 i‡(
Sëtögs
.
Suµ‹tHiRes
)

3821 i‡(
PPU
.
BGMode
 !5 && PPU.BGModê!6 && 
IPPU
.
DoubÀWidthPixñs
)

3825 i‡(
Sëtögs
.
SixãíBô
)

3827 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3829 
uöt16
 *
p
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
) + 255;

3830 
uöt16
 *
q
 = (uöt16 *Ë(
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
) + 510;

3831 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3832 *
q
 = *(q + 1Ë*
p
;

3837 
uöt32
 
y
 = 
°¨ty
; y <
ídy
; y++)

3839 
uöt8
 *
p
 = 
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
 + 255;

3840 
uöt8
 *
q
 = 
GFX
.
S¸ìn
 + 
y
 * GFX.
Pôch2
 + 510;

3841 
x
 = 255; x >0; x--, 
p
--, 
q
 -= 2)

3842 *
q
 = *(q + 1Ë*
p
;

3851 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
;

3852 
	}
}

	@giz_kgsdk.c

2 
	~<uni°d.h
>

3 
	~"giz_kgsdk.h
"

4 
	~<Fømew‹kAudio.h
>

6 *
	g‰amebuf„r16
[4]={0,0,0,0};

7 *
	g‰amebuf„r8
[4];

8 *
	gGizPrim¨yFømeBuf„r
=
NULL
;

9 vﬁ©ûê
	ggp2x_∑Àâe
[512][2];

10 
	gTimî
=0;

11 
	gbµMode
 = 16;

12 
	g∑dVÆues
[2]={0,0};

15 
	g‰ameBuf„rMem‹y
[320*250];

18 c⁄° 
	gf⁄t8x8
[]= {0x0,0x0,0xc3663c18,0x3c2424e7,0xe724243c,0x183c66c3,0xc16f3818,0x18386fc1,0x83f61c18,0x181cf683,0xe7c3993c,0x3c99c3,0x3f7fffff,0xe7cf9f,0x3c99c3e7,0xe7c399,0x3160c080,0x40e1b,0xcbcbc37e,

36 
__ölöe__


37 
	$gp_døwPixñ8
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

39 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

40 
	}
}

42 
__ölöe__


43 
	$gp_døwPixñ16
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

45 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

46 
	}
}

49 
	$£t_ch¨8x8_16bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

51 
y
, 
pixñ
;

52 
off£t
 *= 2;

53 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

54 
y
 = 0; y < 4; y++)

56 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

57 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

58 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

59 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

60 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

61 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

62 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

63 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

65 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

66 
y
 = 0; y < 4; y++)

68 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

69 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

70 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

71 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

72 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

73 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

74 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

75 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

78 
	}
}

81 
	$£t_ch¨8x8_8bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

83 
y
, 
pixñ
;

84 
off£t
 *= 2;

85 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

86 
y
 = 0; y < 4; y++)

88 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

89 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

90 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

91 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

92 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

93 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

94 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

95 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

97 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

98 
y
 = 0; y < 4; y++)

100 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

101 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

102 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

103 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

104 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

105 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

106 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

107 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

110 
	}
}

112 
	$gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
)

114 
l
,
ba£
=0;

116 
l
=0;l<
Àn
;l++)

118 i‡(
bµMode
==8)

120 
	`£t_ch¨8x8_8bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,
‰amebuf„r
);

124 
	`£t_ch¨8x8_16bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,
‰amebuf„r
);

126 
ba£
+=8;

128 
	}
}

130 
	$gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
)

132 
x
,
y
;

133 
y
=0;y<240;y++)

135 
x
=0;x<320;x++)

137 *
‰amebuf„r
++ = 
∑l
;

140 
	}
}

143 
	$gp_gëBuâ⁄
(
íabÀ_düg«ls
)

145 
∑d
=0;

146 
ãxt
[256];

147 
x
=0;

149 
	`Fømew‹k_Pro˚ssMesßges
();

151 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(0)Ë
∑d
|=(1<<
INP_BUTTON_LEFT
);

152 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(1)Ë
∑d
|=(1<<
INP_BUTTON_RIGHT
);

153 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(2)Ë
∑d
|=(1<<
INP_BUTTON_UP
);

154 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(3)Ë
∑d
|=(1<<
INP_BUTTON_DOWN
);

155 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(4)Ë
∑d
|=(1<<
INP_BUTTON_STOP
);

156 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(5)Ë
∑d
|=(1<<
INP_BUTTON_PLAY
);

157 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(6)Ë
∑d
|=(1<<
INP_BUTTON_FORWARD
);

158 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(7)Ë
∑d
|=(1<<
INP_BUTTON_REWIND
);

159 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(8)Ë
∑d
|=(1<<
INP_BUTTON_L
);

160 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(9)Ë
∑d
|=(1<<
INP_BUTTON_R
);

161 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(10)Ë
∑d
|=(1<<
INP_BUTTON_HOME
);

162 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(11)Ë
∑d
|=(1<<
INP_BUTTON_BRIGHT
);

163 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(12)Ë
∑d
|=(1<<
INP_BUTTON_TRIANGLE
);

164 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(13)Ë
∑d
|=(1<<
INP_BUTTON_POWER
);

166  
∑d
;

167 
	}
}

169 
	$gp_öôGøphics
(
bµ
, 
Êù
, 
≠∂yMmuHack
)

171 if(!
	`Fømew‹k_Inô
(
	`GëModuÀH™dÀW
(
NULL
),0))

176 if(!
	`Fømew‹k2D_Inô
())

181 
bµMode
 = 
bµ
;

183 i‡(
GizPrim¨yFømeBuf„r
==
NULL
ËGizPrim¨yFømeBuf„r=(*)
	`Fømew‹k2D_LockBuf„r
();

185 
‰amebuf„r8
[0]=(*)&
‰ameBuf„rMem‹y
[320*5];

186 
‰amebuf„r8
[1]=framebuffer8[0];

187 
‰amebuf„r8
[2]=framebuffer8[0];

188 
‰amebuf„r8
[3]=framebuffer8[0];

197 i‡(
bµMode
==16)

199 
‰amebuf„r16
[0]=&
‰ameBuf„rMem‹y
[320*5];

200 
‰amebuf„r16
[1]=framebuffer16[0];

201 
‰amebuf„r16
[2]=framebuffer16[0];

202 
‰amebuf„r16
[3]=framebuffer16[0];

206 
‰amebuf„r16
[0]=(*)
GizPrim¨yFømeBuf„r
;

207 
‰amebuf„r16
[1]=framebuffer16[0];

208 
‰amebuf„r16
[2]=framebuffer16[0];

209 
‰amebuf„r16
[3]=framebuffer16[0];

211 
	}
}

214 
	$gp_£tFømebuf„r
(
Êù
, 
sync
)

216 i‡(
bµMode
==16)

219 
	`BlôBuf„rToS¸ìn
((*)(*)
‰amebuf„r16
[0],(*)
GizPrim¨yFømeBuf„r
);

221 *
bufTo
=(*)
GizPrim¨yFømeBuf„r
;

222 *
bufFrom
=(*)
‰amebuf„r16
[0];

223 
x
,
y
;

224 
y
=0;y<240;y++)

226 
x
=0;x<320;x++)

228 *
bufTo
++=*
bufFrom
++;

230 
bufTo
++;

250 
	}
}

254 
	$gp2x_video_£çÆëã
()

257 
	}
}

265 *
	$gp2x_sound_∂ay
()

268  
NULL
;

269 
	}
}

271 
	$gp2x_sound_∂ay_b™k
(
b™k
)

274 
	}
}

276 
	$gp2x_sound_sync
()

279 
	}
}

281 
	$gp2x_sound_vﬁume
(
l
, 
r
)

283 
	`Fømew‹kAudio_SëVﬁume
(
r
,
l
);

284 
	}
}

286 
	$gp2x_timî_ªad
()

288  
	`Fømew‹k_GëTicks
();

289 
	}
}

291 
	$gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
)

293 
ãxt
[256];

294 
x
=0;

296 
x
=
	`Fømew‹kAudio_Inô
(
øã
, 
°îeo
, 
Hz
);

298 if(
x
)

300 
	`•rötf
(
ãxt
,"AudiÿInô Faûed,Éº‹: %x",
x
);

301 
	`gp_døwSåög
(0,60,
	`°æí
(
ãxt
),ãxt,0xFFFF,
‰amebuf„r16
[0]);

302 
	`MíuFlù
();

303 
	`MíuPau£
();

306 
	}
}

308 
	$gp_°›Sound
()

310 
	`Fømew‹kAudio_Clo£
();

311 
	}
}

319 
	$gp_Re£t
()

321 
	`Fømew‹k2D_Clo£
();

322 
	`Fømew‹k_Clo£
();

323 
	}
}

325 
	$gp2x_video_RGB_£tsˇlög
(
W
, 
H
)

328 
	}
}

330 
	$gp_£tCpu•ìd
(
MHZ
)

334 
	}
}

336 
	$£t_gamma
(
g100
)

339 
	}
}

	@giz_kgsdk.h

1 #i‚de‡
_GIZ_KGSDK_H_


2 
	#_GIZ_KGSDK_H_


	)

4 #ifde‡
__˝lu•lus


8 
	#SOUND_THREAD_SOUND_ON
 1

	)

9 
	#SOUND_THREAD_SOUND_OFF
 2

	)

10 
	#SOUND_THREAD_PAUSE
 3

	)

12 
	#INP_BUTTON_PLAY
 (0)

	)

13 
	#INP_BUTTON_STOP
 (1)

	)

14 
	#INP_BUTTON_REWIND
 (2)

	)

15 
	#INP_BUTTON_FORWARD
 (3)

	)

16 
	#INP_BUTTON_L
 (4)

	)

17 
	#INP_BUTTON_R
 (5)

	)

18 
	#INP_BUTTON_HOME
 (6)

	)

19 
	#INP_BUTTON_VOL
 (7)

	)

20 
	#INP_BUTTON_BRIGHT
 (8)

	)

21 
	#INP_BUTTON_TRIANGLE
 (9)

22 
	#INP_BUTTON_POWER
 (10)

23 
	#INP_BUTTON_UP
 (11)

	)

24 
	#INP_BUTTON_LEFT
 (12)

	)

25 
	#INP_BUTTON_DOWN
 (13)

	)

26 
	#INP_BUTTON_RIGHT
 (14)

	)

28 
gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
);

29 
gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
);

30 
gp_£tCpu•ìd
(
˝u•ìd
);

31 
gp_öôGøphics
(
bµ
, 
Êù
, 
≠∂yMmuHack
);

32 
gp_£tFømebuf„r
(
Êù
, 
sync
);

33 
gp2x_video_£çÆëã
();

34 
gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
);

35 
gp_°›Sound
();

36 
gp_Re£t
();

37 
gp2x_íabÀIRQ
();

38 
gp2x_dißbÀIRQ
();

39 
gp2x_sound_vﬁume
(
l
, 
r
);

40 
gp2x_timî_ªad
();

41 
gp_gëBuâ⁄
(
íabÀ_düg«ls
);

42 
gp2x_video_RGB_£tsˇlög
(
W
, 
H
);

43 
gp2x_sound_∂ay_b™k
(
b™k
);

44 
gp2x_sound_sync
();

45 
BlôBuf„rToS¸ìn
(*
buf„rFrom
, *
buf„rTo
);

46 
£t_gamma
(
g100
);

48 *
‰amebuf„r16
[];

49 *
‰amebuf„r8
[];

50 *
GizPrim¨yFømeBuf„r
;

51 vﬁ©ûê
gp2x_∑Àâe
[512][2];

53 #ifde‡
__˝lu•lus


	@giz_sdk.cpp

4 
	~<w32≠i/wödows.h
>

5 
	~<uni°d.h
>

6 
	~<°dio.h
>

7 
	~<w32≠i/GizSdk/Fømew‹k.h
>

8 
	~<w32≠i/GizSdk/ddøw.h
>

9 
	~<w32≠i/GizSdk/Fømew‹k2D.h
>

10 
	~<w32≠i/GizSdk/gÀs.h
>

11 
	~<w32≠i/GizSdk/Fømew‹kGL.h
>

12 
	~<w32≠i/GizSdk/Fømew‹kAudio.h
>

13 
	~"míu.h
"

14 
	~"giz_sdk.h
"

16 *
	g‰amebuf„r16
[4]={0,0,0,0};

17 *
	g‰amebuf„r8
[4];

18 *
	gGizPrim¨yFømeBuf„r
=
NULL
;

19 vﬁ©ûê
	ggp2x_∑Àâe
[512][2];

20 
	gTimî
=0;

21 
	gbµMode
 = 16;

22 
	g∑dVÆues
[2]={0,0};

25 
	g‰ameBuf„rMem‹y1
[320*500];

29 c⁄° 
	gf⁄t8x8
[]= {0x0,0x0,0xc3663c18,0x3c2424e7,0xe724243c,0x183c66c3,0xc16f3818,0x18386fc1,0x83f61c18,0x181cf683,0xe7c3993c,0x3c99c3,0x3f7fffff,0xe7cf9f,0x3c99c3e7,0xe7c399,0x3160c080,0x40e1b,0xcbcbc37e,

47 
__ölöe__


48 
	$gp_døwPixñ8
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

50 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

51 
	}
}

53 
__ölöe__


54 
	$gp_døwPixñ16
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

56 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

57 
	}
}

60 
	$£t_ch¨8x8_16bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

62 
y
, 
pixñ
;

63 
off£t
 *= 2;

64 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

65 
y
 = 0; y < 4; y++)

67 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

68 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

69 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

70 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

71 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

72 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

73 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

74 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

76 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

77 
y
 = 0; y < 4; y++)

79 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

80 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

81 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

82 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

83 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

84 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

85 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

86 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

89 
	}
}

92 
	$£t_ch¨8x8_8bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

94 
y
, 
pixñ
;

95 
off£t
 *= 2;

96 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

97 
y
 = 0; y < 4; y++)

99 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

100 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

101 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

102 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

103 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

104 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

105 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

106 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

108 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

109 
y
 = 0; y < 4; y++)

111 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

112 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

113 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

114 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

115 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

116 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

117 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

118 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

121 
	}
}

123 
	$gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
)

125 
l
,
ba£
=0;

127 
l
=0;l<
Àn
;l++)

129 i‡(
bµMode
==8)

131 
	`£t_ch¨8x8_8bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,(*)
‰amebuf„r
);

135 
	`£t_ch¨8x8_16bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,(*)
‰amebuf„r
);

137 
ba£
+=8;

139 
	}
}

141 
	$gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
)

143 
x
,
y
;

144 
y
=0;y<240;y++)

146 
x
=0;x<320;x++)

148 *
‰amebuf„r
++ = 
∑l
;

151 
	}
}

154 
	$gp_gëBuâ⁄
(
íabÀ_düg«ls
)

156 
	`Fømew‹k_Pro˚ssMesßges
();

158  
	`Fømew‹k_PﬁlGëBuâ⁄s
();

159 
	}
}

161 
	$gp_öôGøphics
(
bµ
, 
Êù
, 
≠∂yMmuHack
)

163 if(!
	`Fømew‹k_Inô
(
	`GëModuÀH™dÀW
(
NULL
),0))

168 if(!
	`Fømew‹k2D_Inô
())

173 
bµMode
 = 
bµ
;

176 
GizPrim¨yFømeBuf„r
=(*)
	`Fømew‹k2D_LockBuf„r
(1);

178 
‰amebuf„r8
[0]=(*)&
‰ameBuf„rMem‹y1
[320*5];

179 
‰amebuf„r8
[1]=(*)&
‰ameBuf„rMem‹y1
[320*5];

180 
‰amebuf„r8
[2]=(*)&
‰ameBuf„rMem‹y1
[320*5];

181 
‰amebuf„r8
[3]=(*)&
‰ameBuf„rMem‹y1
[320*5];

183 
‰amebuf„r16
[0]=&
‰ameBuf„rMem‹y1
[320*5];

184 
‰amebuf„r16
[1]=&
‰ameBuf„rMem‹y1
[320*5];

185 
‰amebuf„r16
[2]=&
‰ameBuf„rMem‹y1
[320*5];

186 
‰amebuf„r16
[3]=&
‰ameBuf„rMem‹y1
[320*5];

188 
	}
}

191 
	$gp_£tFømebuf„r
(
Êù
, 
sync
)

193 i‡(
bµMode
==16)

197 
	`BlôBuf„rToS¸ìn
((*)(*)
‰amebuf„r16
[
Êù
],(*)
GizPrim¨yFømeBuf„r
);

201 *
bufTo
=(*)
GizPrim¨yFømeBuf„r
;

202 *
bufFrom
=(*)
‰amebuf„r16
[0];

203 
x
,
y
;

204 
y
=0;y<240;y++)

206 
x
=0;x<320;x++)

208 *
bufTo
++=*
bufFrom
++;

210 
bufTo
++;

219 
	}
}

223 
	$gp2x_video_£çÆëã
()

226 
	}
}

234 *
	$gp2x_sound_∂ay
()

237  
NULL
;

238 
	}
}

240 
	$gp2x_sound_∂ay_b™k
(
b™k
)

243 
	}
}

245 
	$gp2x_sound_sync
()

248 
	}
}

250 
	$gp2x_sound_vﬁume
(
l
, 
r
)

252 
	`Fømew‹kAudio_SëVﬁume
(
r
,
l
);

253 
	}
}

255 
	$gp2x_timî_ªad
()

257  
	`Fømew‹k_GëTicks
();

258 
	}
}

260 
	$gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
)

262 
ãxt
[256];

263 
x
=0;

265 
x
=
	`Fømew‹kAudio_Inô
(
øã
, 
°îeo
, 
Hz
);

267 if(
x
)

269 
	`•rötf
(
ãxt
,"AudiÿInô Faûed,Éº‹: %x",
x
);

270 
	`gp_døwSåög
(0,60,
	`°æí
(
ãxt
),ãxt,0xFFFF,
‰amebuf„r16
[0]);

271 
	`MíuFlù
();

272 
	`MíuPau£
();

275 
	}
}

277 
	$gp_°›Sound
()

279 
	`Fømew‹kAudio_Clo£
();

280 
	}
}

288 
	$gp_Re£t
()

290 
	`Fømew‹k2D_Clo£
();

291 
	`Fømew‹k_Clo£
();

292 
	}
}

294 
	$gp2x_video_RGB_£tsˇlög
(
W
, 
H
)

297 
	}
}

299 
	$gp_£tCpu•ìd
(
MHZ
)

303 
	}
}

305 
	$£t_gamma
(
g100
)

308 
	}
}

	@giz_sdk.h

1 #i‚de‡
_GIZ_SDK_H_


2 
	#_GIZ_SDK_H_


	)

4 #ifde‡
__˝lu•lus


10 
	#SOUND_THREAD_SOUND_ON
 1

	)

11 
	#SOUND_THREAD_SOUND_OFF
 2

	)

12 
	#SOUND_THREAD_PAUSE
 3

	)

14 
	#INP_BUTTON_LEFT
 (0)

	)

15 
	#INP_BUTTON_RIGHT
 (1)

	)

16 
	#INP_BUTTON_UP
 (2)

	)

17 
	#INP_BUTTON_DOWN
 (3)

	)

18 
	#INP_BUTTON_STOP
 (4)

	)

19 
	#INP_BUTTON_PLAY
 (5)

	)

20 
	#INP_BUTTON_FORWARD
 (6)

	)

21 
	#INP_BUTTON_REWIND
 (7)

	)

22 
	#INP_BUTTON_L
 (8)

	)

23 
	#INP_BUTTON_R
 (9)

	)

24 
	#INP_BUTTON_HOME
 (10)

	)

25 
	#INP_BUTTON_VOL
 (11)

	)

26 
	#INP_BUTTON_BRIGHT
 (12)

	)

27 
	#INP_BUTTON_TRIANGLE
 (13)

	)

28 
	#INP_BUTTON_POWER
 (14)

	)

31 
gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
);

32 
gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
);

33 
gp_£tCpu•ìd
(
˝u•ìd
);

34 
gp_öôGøphics
(
bµ
, 
Êù
, 
≠∂yMmuHack
);

35 
gp_£tFømebuf„r
(
Êù
, 
sync
);

36 
gp2x_video_£çÆëã
();

37 
gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
);

38 
gp_°›Sound
();

39 
gp_Re£t
();

40 
gp2x_íabÀIRQ
();

41 
gp2x_dißbÀIRQ
();

42 
gp2x_sound_vﬁume
(
l
, 
r
);

43 
gp2x_timî_ªad
();

44 
gp_gëBuâ⁄
(
íabÀ_düg«ls
);

45 
gp2x_video_RGB_£tsˇlög
(
W
, 
H
);

46 
gp2x_sound_∂ay_b™k
(
b™k
);

47 
gp2x_sound_sync
();

48 
BlôBuf„rToS¸ìn
(*
buf„rFrom
, *
buf„rTo
);

49 
£t_gamma
(
g100
);

51 *
‰amebuf„r16
[];

52 *
‰amebuf„r8
[];

53 *
GizPrim¨yFømeBuf„r
;

54 vﬁ©ûê
gp2x_∑Àâe
[512][2];

56 #ifde‡
__˝lu•lus


	@giz_sdk_kgsdk.c

2 
	#DEBUG


	)

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<±hªad.h
>

7 
	~"giz_sdk_kgsdk.h
"

8 
	~<Fømew‹kAudio.h
>

11 
	#SYS_CLK_FREQ
 7372800

	)

12 
	ggp2x_ticks_≥r_£c⁄d
=7372800/1000;

13 
	ggp2x_dev
[5]={0,0,0,0,0};

14 
	ggp2x_physvøm
[4]={0,0,0,0};

15 *
	g‰amebuf„r16
[4]={0,0,0,0};

16 *
	g‰amebuf„r_mm≠
[4]={0,0,0,0};

17 
	gfb_size
=(320*240*2)+(16*2);

18 *
	ggp2x_logvøm15
[2], 
	ggp2x_sound_buf„r
[4+((44100*2)*8)];

19 vﬁ©ûê*
	ggp2x_memªgs
;

20 vﬁ©ûê*
	ggp2x_memªgl
;

21 vﬁ©ûê*
	ggp2x_blôãr
 = 
NULL
;

22 *
	ggp2x_ötVe˘‹s
;

23 vﬁ©ûê
	ggp2x_∑Àâe
[512][2];

24 *
	g‰amebuf„r8
[4], *
	ggp2x_s¸ìn8¥ev
, *
	ggp2x_logvøm8
[2];

26 vﬁ©ûê*
	gpOuçut
[8];

27 
	gInôFømebuf„r
=0;

28 
	gTimî
=0;

29 vﬁ©ûê
	gSoundThªadFœg
=0;

30 vﬁ©ûê
	gCuºítSoundB™k
=0;

31 
	gCuºítFømeBuf„r
=0;

32 
	gCuºítFøg
=0;

33 
	g‰ameBuf„rMem‹y
[320*250];

38 c⁄° 
	gf⁄t8x8
[]= {0x0,0x0,0xc3663c18,0x3c2424e7,0xe724243c,0x183c66c3,0xc16f3818,0x18386fc1,0x83f61c18,0x181cf683,0xe7c3993c,0x3c99c3,0x3f7fffff,0xe7cf9f,0x3c99c3e7,0xe7c399,0x3160c080,0x40e1b,0xcbcbc37e,

50 
	gbµMode
 = 16;

51 
	g∑dVÆues
[2]={0,0};

52 
	gExi°ögI¡H™dÀr
;

62 
__ölöe__


63 
	$gp_døwPixñ8
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

65 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

66 
	}
}

68 
__ölöe__


69 
	$gp_døwPixñ16
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

71 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

72 
	}
}

75 
	$£t_ch¨8x8_16bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

77 
y
, 
pixñ
;

78 
off£t
 *= 2;

79 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

80 
y
 = 0; y < 4; y++)

82 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

83 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

84 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

85 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

86 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

87 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

88 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

89 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

91 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

92 
y
 = 0; y < 4; y++)

94 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

95 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

96 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

97 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

98 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

99 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

100 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

101 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

104 
	}
}

107 
	$£t_ch¨8x8_8bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

109 
y
, 
pixñ
;

110 
off£t
 *= 2;

111 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

112 
y
 = 0; y < 4; y++)

114 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

115 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

116 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

117 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

118 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

119 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

120 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

121 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

123 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

124 
y
 = 0; y < 4; y++)

126 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

127 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

128 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

129 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

130 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

131 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

132 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

133 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

136 
	}
}

138 
	$gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
)

141 
l
,
ba£
=0;

143 
l
=0;l<
Àn
;l++)

145 i‡(
bµMode
==8)

147 
	`£t_ch¨8x8_8bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,
‰amebuf„r
);

151 
	`£t_ch¨8x8_16bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,
‰amebuf„r
);

153 
ba£
+=8;

156 
	}
}

158 
	$gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
)

160 
x
,
y
;

161 
y
=0;y<240;y++)

163 
x
=0;x<320;x++)

165 *
‰amebuf„r
++ = 
∑l
;

168 
	}
}

171 
	$gp_gëBuâ⁄
(
íabÀ_düg«ls
)

173 
∑d
=0;

174 
ãxt
[256];

175 
x
=0;

177 
	`Fømew‹k_Pro˚ssMesßges
();

179 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(0)Ë
∑d
|=(1<<
INP_BUTTON_LEFT
);

180 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(1)Ë
∑d
|=(1<<
INP_BUTTON_RIGHT
);

181 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(2)Ë
∑d
|=(1<<
INP_BUTTON_UP
);

182 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(3)Ë
∑d
|=(1<<
INP_BUTTON_DOWN
);

183 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(4)Ë
∑d
|=(1<<
INP_BUTTON_STOP
);

184 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(5)Ë
∑d
|=(1<<
INP_BUTTON_PLAY
);

185 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(6)Ë
∑d
|=(1<<
INP_BUTTON_FORWARD
);

186 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(7)Ë
∑d
|=(1<<
INP_BUTTON_REWIND
);

187 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(8)Ë
∑d
|=(1<<
INP_BUTTON_L
);

188 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(9)Ë
∑d
|=(1<<
INP_BUTTON_R
);

189 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(10)Ë
∑d
|=(1<<
INP_BUTTON_HOME
);

190 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(11)Ë
∑d
|=(1<<
INP_BUTTON_BRIGHT
);

191 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(12)Ë
∑d
|=(1<<
INP_BUTTON_TRIANGLE
);

192 if(
	`Fømew‹k_IsBuâ⁄Pªs£d
(13)Ë
∑d
|=(1<<
INP_BUTTON_POWER
);

194  
∑d
;

195 
	}
}

197 
	$gp_öôGøphics
(
bµ
, 
Êù
)

201 if(!
	`Fømew‹k_Inô
(
	`GëModuÀH™dÀW
(
NULL
),0))

206 if(!
	`Fømew‹k2D_Inô
(
bµ
))

212 i‡(
‰amebuf„r16
[0] == 0)

214 
‰amebuf„r16
[0]=
	`Fømew‹k2D_LockBuf„r
();

215 
‰amebuf„r16
[1]=framebuffer16[0];

216 
‰amebuf„r16
[2]=framebuffer16[0];

217 
‰amebuf„r16
[3]=framebuffer16[0];

219 
‰amebuf„r8
[0]=&
‰ameBuf„rMem‹y
[320*5];

220 
‰amebuf„r8
[1]=framebuffer8[0];

221 
‰amebuf„r8
[2]=framebuffer8[0];

222 
‰amebuf„r8
[3]=framebuffer8[0];

224 
	}
}

227 
	$gp_£tFømebuf„r
(
Êù
, 
sync
)

241 
	`Fømew‹k2D_U∆ockBuf„r
();

242 
	`Fømew‹k2D_End
(0);

243 
‰amebuf„r16
[0]=
	`Fømew‹k2D_LockBuf„r
();

244 
‰amebuf„r16
[1]=framebuffer16[0];

245 
‰amebuf„r16
[2]=framebuffer16[0];

246 
‰amebuf„r16
[3]=framebuffer16[0];

247 
‰amebuf„r8
[0]=&
‰ameBuf„rMem‹y
[320*5];

248 
‰amebuf„r8
[1]=framebuffer8[0];

249 
‰amebuf„r8
[2]=framebuffer8[0];

250 
‰amebuf„r8
[3]=framebuffer8[0];

251 
	}
}

253 
	$gp2x_video_£çÆëã
()

256 
	}
}

264 *
	$gp2x_sound_∂ay
()

267  
NULL
;

268 
	}
}

270 
	$gp2x_sound_∂ay_b™k
(
b™k
)

273 
	}
}

275 
	$gp2x_sound_sync
()

278 
	}
}

280 
	$gp2x_sound_vﬁume
(
l
, 
r
)

282 
	`Fømew‹kAudio_SëVﬁume
(
r
,
l
);

283 
	}
}

285 
	$gp2x_timî_ªad
()

287  
	`Fømew‹k_GëTicks
();

288 
	}
}

290 
	$gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
)

292 
ãxt
[256];

293 
x
=0;

295 
x
=
	`Fømew‹kAudio_Inô
(
øã
, 
°îeo
, 
Hz
);

297 if(
x
)

299 
	`•rötf
(
ãxt
,"AudiÿInô Faûed,Éº‹: %x",
x
);

300 
	`gp_døwSåög
(0,60,
	`°æí
(
ãxt
),ãxt,0xFFFF,
‰amebuf„r16
[0]);

301 
	`MíuFlù
();

302 
	`MíuPau£
();

313 
	}
}

315 
	$gp_°›Sound
()

317 
	`Fømew‹kAudio_Clo£
();

318 
	}
}

326 
	$gp_Re£t
()

328 
	`Fømew‹k2D_Clo£
();

329 
	`Fømew‹k_Clo£
();

330 
	}
}

332 
	$gp2x_video_RGB_£tsˇlög
(
W
, 
H
)

335 
	}
}

337 
	$gp_£tCpu•ìd
(
MHZ
)

341 
	}
}

	@giz_sdk_kgsdk.h

1 #i‚de‡
_GIZ_SDK_KGSDK_H_


2 
	#_GIZ_SDK_KGSDK_H_


	)

4 #ifde‡
__˝lu•lus


8 
	#SOUND_THREAD_SOUND_ON
 1

	)

9 
	#SOUND_THREAD_SOUND_OFF
 2

	)

10 
	#SOUND_THREAD_PAUSE
 3

	)

12 
	#INP_BUTTON_PLAY
 (0)

	)

13 
	#INP_BUTTON_STOP
 (1)

	)

14 
	#INP_BUTTON_REWIND
 (2)

	)

15 
	#INP_BUTTON_FORWARD
 (3)

	)

16 
	#INP_BUTTON_L
 (4)

	)

17 
	#INP_BUTTON_R
 (5)

	)

18 
	#INP_BUTTON_HOME
 (6)

	)

19 
	#INP_BUTTON_VOL
 (7)

	)

20 
	#INP_BUTTON_BRIGHT
 (8)

	)

21 
	#INP_BUTTON_TRIANGLE
 (9)

22 
	#INP_BUTTON_POWER
 (10)

23 
	#INP_BUTTON_UP
 (11)

	)

24 
	#INP_BUTTON_LEFT
 (12)

	)

25 
	#INP_BUTTON_DOWN
 (13)

	)

26 
	#INP_BUTTON_RIGHT
 (14)

	)

28 
gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
);

29 
gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
);

30 
gp_£tCpu•ìd
(
˝u•ìd
);

31 
gp_öôGøphics
(
bµ
, 
Êù
);

32 
gp_£tFømebuf„r
(
Êù
, 
sync
);

33 
gp2x_video_£çÆëã
();

34 
gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
);

35 
gp_°›Sound
();

36 
gp_Re£t
();

37 
gp2x_íabÀIRQ
();

38 
gp2x_dißbÀIRQ
();

39 
gp2x_sound_vﬁume
(
l
, 
r
);

40 
gp2x_timî_ªad
();

41 
gp_gëBuâ⁄
(
íabÀ_düg«ls
);

42 
gp2x_video_RGB_£tsˇlög
(
W
, 
H
);

43 
gp2x_sound_∂ay_b™k
(
b™k
);

44 
gp2x_sound_sync
();

47 vﬁ©ûê
SoundThªadFœg
;

48 vﬁ©ûê
CuºítSoundB™k
;

49 
CuºítFømeBuf„r
;

50 vﬁ©ûê*
pOuçut
[];

51 *
‰amebuf„r16
[];

52 
gp2x_physvøm
[];

53 *
‰amebuf„r8
[];

54 vﬁ©ûê
gp2x_∑Àâe
[512][2];

55 vﬁ©ûê*
gp2x_memªgs
;

56 vﬁ©ûê*
gp2x_memªgl
;

57 vﬁ©ûê*
gp2x_blôãr
;

59 #ifde‡
__˝lu•lus


	@globals.cpp

41 
	~"¢es9x.h
"

42 
	~"memm≠.h
"

43 
	~"µu.h
"

44 
	~"d•1.h
"

45 
	~"missög.h
"

46 
	~"˝uexec.h
"

47 
	~"debug.h
"

48 
	~"≠u.h
"

49 
	~"dma.h
"

50 
	~"fxemu.h
"

51 
	~"gfx.h
"

52 
	~"soundux.h
"

53 
	~"chóts.h
"

54 
	~"ß1.h
"

55 #i‚de‡
_SNESPPC


59 
START_EXTERN_C


60 
	gSåög
[513];

62 
Missög
 
	gmissög
;

64 
SICPU
 
	gICPU
;

66 
SCPUSèã
 
	gCPU
;

70 
SAPU
 
	gAPU
;

72 
SIAPU
 
	gIAPU
;

74 
SAPURegi°îs
 
	gAPURegi°îs
;

76 
SSëtögs
 
	gSëtögs
;

78 
SDSP1
 
	gDSP1
;

80 
SSA1Regi°îs
 
	gSA1Regi°îs
;

82 
SSA1
 
	gSA1
;

85 
uöt8
 *
	gSRAM
 = 
NULL
;

86 
uöt8
 *
	gROM
 = 
NULL
;

87 
uöt8
 *
	gRegRAM
 = 
NULL
;

88 
uöt8
 *
	gC4RAM
 = 
NULL
;

90 
	gOpAddªss
 = 0;

92 
CMem‹y
 
	gMem‹y
;

94 
SSNESGameFixes
 
	gSNESGameFixes
;

96 #i‚de‡
ASM_SPC700


97 
uöt8
 
	gA1
 = 0, 
	gA2
 = 0, 
	gA3
 = 0, 
	gA4
 = 0, 
	gW1
 = 0, 
	gW2
 = 0, 
	gW3
 = 0, 
	gW4
 = 0;

98 
uöt8
 
	gAns8
 = 0;

99 
uöt16
 
	gAns16
 = 0;

100 
uöt32
 
	gAns32
 = 0;

101 
uöt8
 
	gW‹k8
 = 0;

102 
uöt16
 
	gW‹k16
 = 0;

103 
uöt32
 
	gW‹k32
 = 0;

104 sig√d 
	gI¡8
 = 0;

105 
	gI¡16
 = 0;

106 
	gI¡32
 = 0;

109 
	gEND_EXTERN_C


111 #i‚de‡
ZSNES_FX


112 
FxInô_s
 
	gSu≥rFX
;

114 
START_EXTERN_C


115 
uöt8
 *
	gSFXPlŸTabÀ
 = 
NULL
;

116 
	gEND_EXTERN_C


119 
SPPU
 
	gPPU
;

120 
I¡î«lPPU
 
	gIPPU
;

122 
SDMA
 
	gDMA
[8];

124 
uöt8
 *
	gHDMAMemPoöãrs
 [8];

125 
uöt8
 *
	gHDMABa£Poöãrs
 [8];

127 
SBG
 
	gBG
;

129 
SGFX
 
	gGFX
;

130 
SLöeD©a
 
	gLöeD©a
[240];

131 
SLöeM©rixD©a
 
	gLöeM©rixD©a
 [240];

133 
uöt8
 
	gMode7Dïths
 [2];

134 
N‹mÆTûeRídîî
 
	gDøwTûePå
 = 
NULL
;

135 
Clù≥dTûeRídîî
 
	gDøwClù≥dTûePå
 = 
NULL
;

136 
N‹mÆTûeRídîî
 
	gDøwHiResTûePå
 = 
NULL
;

137 
Clù≥dTûeRídîî
 
	gDøwHiResClù≥dTûePå
 = 
NULL
;

138 
L¨gePixñRídîî
 
	gDøwL¨gePixñPå
 = 
NULL
;

140 
uöt32
 
	godd_high
[4][16];

141 
uöt32
 
	godd_low
[4][16];

142 
uöt32
 
	geví_high
[4][16];

143 
uöt32
 
	geví_low
[4][16];

145 #ifde‡
GFX_MULTI_FORMAT


147 
uöt32
 
	gRED_LOW_BIT_MASK
 = 
RED_LOW_BIT_MASK_RGB565
;

148 
uöt32
 
	gGREEN_LOW_BIT_MASK
 = 
GREEN_LOW_BIT_MASK_RGB565
;

149 
uöt32
 
	gBLUE_LOW_BIT_MASK
 = 
BLUE_LOW_BIT_MASK_RGB565
;

150 
uöt32
 
	gRED_HI_BIT_MASK
 = 
RED_HI_BIT_MASK_RGB565
;

151 
uöt32
 
	gGREEN_HI_BIT_MASK
 = 
GREEN_HI_BIT_MASK_RGB565
;

152 
uöt32
 
	gBLUE_HI_BIT_MASK
 = 
BLUE_HI_BIT_MASK_RGB565
;

153 
uöt32
 
	gMAX_RED
 = 
MAX_RED_RGB565
;

154 
uöt32
 
	gMAX_GREEN
 = 
MAX_GREEN_RGB565
;

155 
uöt32
 
	gMAX_BLUE
 = 
MAX_BLUE_RGB565
;

156 
uöt32
 
	gSPARE_RGB_BIT_MASK
 = 
SPARE_RGB_BIT_MASK_RGB565
;

157 
uöt32
 
	gGREEN_HI_BIT
 = (
MAX_GREEN_RGB565
 + 1) >> 1;

158 
uöt32
 
	gRGB_LOW_BITS_MASK
 = (
RED_LOW_BIT_MASK_RGB565
 |

159 
GREEN_LOW_BIT_MASK_RGB565
 |

160 
BLUE_LOW_BIT_MASK_RGB565
);

161 
uöt32
 
	gRGB_HI_BITS_MASK
 = (
RED_HI_BIT_MASK_RGB565
 |

162 
GREEN_HI_BIT_MASK_RGB565
 |

163 
BLUE_HI_BIT_MASK_RGB565
);

164 
uöt32
 
	gRGB_HI_BITS_MASKx2
 = (
RED_HI_BIT_MASK_RGB565
 |

165 
GREEN_HI_BIT_MASK_RGB565
 |

166 
BLUE_HI_BIT_MASK_RGB565
) << 1;

167 
uöt32
 
	gRGB_REMOVE_LOW_BITS_MASK
 = ~
RGB_LOW_BITS_MASK
;

168 
uöt32
 
	gFIRST_COLOR_MASK
 = 
FIRST_COLOR_MASK_RGB565
;

169 
uöt32
 
	gSECOND_COLOR_MASK
 = 
SECOND_COLOR_MASK_RGB565
;

170 
uöt32
 
	gTHIRD_COLOR_MASK
 = 
THIRD_COLOR_MASK_RGB565
;

171 
uöt32
 
	gALPHA_BITS_MASK
 = 
ALPHA_BITS_MASK_RGB565
;

172 
uöt32
 
	gFIRST_THIRD_COLOR_MASK
 = 0;

173 
uöt32
 
	gTWO_LOW_BITS_MASK
 = 0;

174 
uöt32
 
	gHIGH_BITS_SHIFTED_TWO_MASK
 = 0;

176 
uöt32
 
	gcuºít_gøphic_f‹m©
 = 
RGB565
;

179 
uöt8
 
	gGëB™k
 = 0;

180 
SChótD©a
 
	gChót
;

182 
SoundSètus
 
	gso
;

183 
SSoundD©a
 
	gSoundD©a
;

184 
	gEcho
 [24000];

185 
	gDummyEchoBuf„r
 [
SOUND_BUFFER_SIZE
];

186 
	gMixBuf„r
 [
SOUND_BUFFER_SIZE
];

187 
	gEchoBuf„r
 [
SOUND_BUFFER_SIZE
];

188 
	gFûãrT≠s
 [8];

189 
	gZ
 = 0;

190 
	gLo›
 [16];

192 
uöt16
 
	gSignExãnd
 [2] = {

196 
	gHDMA_ModeByãCou¡s
 [8] = {

200 
uöt8
 
	gBôShi·s
[8][4] =

211 
uöt8
 
	gTûeShi·s
[8][4] =

222 
uöt8
 
	gPÆëãShi·s
[8][4] =

233 
uöt8
 
	gPÆëãMasks
[8][4] =

244 
uöt8
 
	gDïths
[8][4] =

246 {
TILE_2BIT
, TILE_2BIT, TILE_2BIT, TILE_2BIT},

247 {
TILE_4BIT
, TILE_4BIT, 
TILE_2BIT
, 0},

248 {
TILE_4BIT
, TILE_4BIT, 0, 0},

249 {
TILE_8BIT
, 
TILE_4BIT
, 0, 0},

250 {
TILE_8BIT
, 
TILE_2BIT
, 0, 0},

251 {
TILE_4BIT
, 
TILE_2BIT
, 0, 0},

252 {
TILE_8BIT
, 0, 0, 0},

255 
uöt8
 
	gBGSizes
 [2] = {

258 
uöt16
 
	gDúe˘CﬁourM≠s
 [8][256];

260 
	gFûãrVÆues
[4][2] =

268 
	gNoi£Fªq
 [32] = {

274 
uöt32
 
	gHódMask
 [4] = {

275 #ifde‡
LSB_FIRST


282 
uöt32
 
	gTaûMask
 [5] = {

283 #ifde‡
LSB_FIRST


290 
START_EXTERN_C


291 
uöt8
 
	gAPUROM
 [64] =

300 #ifde‡
NETPLAY_SUPPORT


301 
SNëPœy
 
	gNëPœy
;

305 
öt32
 
	gS9xAPUCy˛eLígths
 [256] =

328 
öt32
 
	gS9xAPUCy˛es
 [256] =

349 #i‚de‡
VAR_CYCLES


350 
uöt8
 
	gS9xE1M1X1
 [256] = {

369 
uöt8
 
	gS9xE0M1X1
 [256] = {

388 
uöt8
 
	gS9xE0M0X1
 [256] = {

407 
uöt8
 
	gS9xE0M1X0
 [256] = {

426 
uöt8
 
	gS9xE0M0X0
 [256] = {

446 
	gEND_EXTERN_C


	@gp2x_highlightbar.c

16 
	#highlightb¨_width
 320

	)

17 
	#highlightb¨_height
 16

	)

18 
	ghighLightB¨
[5120];

19 
	ghighLightB¨Orig
[5120] = {

	@gp2x_menu_header.c

16 
	#míu_hódî_width
 320

	)

17 
	#míu_hódî_height
 48

	)

18 
	gmíuHódî
[15360];

19 
	gmíuHódîOrig
[15360] = {

	@gp2x_menutile.c

16 
	#míutûe_width
 64

	)

17 
	#míutûe_height
 64

	)

18 
	gmíuTûe
[4096];

19 
	gmíuTûeOrig
[4096] = {

	@gp2x_sdk.c

2 
	#DEBUG


	)

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/time.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sys/soundˇrd.h
>

10 
	~<löux/fb.h
>

11 
	~<±hªad.h
>

12 
	~"míu.h
"

13 
	~"gp2x_sdk.h
"

14 
	~"squidgehack.h
"

15 
	~<time.h
>

17 
	#SYS_CLK_FREQ
 7372800

	)

19 vﬁ©ûê
	ggp2x_∑Àâe
[512][2];

21 
	gfb_size
=(320*240*2)+(16*2);

22 
	gmmuHackSètus
=0;

25 
	ggp2x_dev
[5]={0,0,0,0,0};

26 
	ggp2x_physvøm
[4]={0,0,0,0};

28 *
	g‰amebuf„r16
[4]={0,0,0,0};

29 *
	g‰amebuf„r_mm≠
[4]={0,0,0,0};

30 *
	ggp2x_logvøm15
[2], 
	ggp2x_sound_buf„r
[4+((44100*2)*8)];

31 vﬁ©ûê*
	ggp2x_memªgs
;

32 vﬁ©ûê*
	ggp2x_memªgl
;

33 vﬁ©ûê*
	ggp2x_blôãr
 = 
NULL
;

34 *
	ggp2x_ötVe˘‹s
;

35 *
	g‰amebuf„r8
[4], *
	ggp2x_s¸ìn8¥ev
, *
	ggp2x_logvøm8
[2];

37 vﬁ©ûê*
	gpOuçut
[8];

38 
	gInôFømebuf„r
=0;

39 
	gTimî
=0;

40 vﬁ©ûê
	gSoundThªadFœg
=0;

41 vﬁ©ûê
	gCuºítSoundB™k
=0;

42 
	gCuºítFømeBuf„r
=0;

43 
	gCuºítFøg
=0;

44 
	gExi°ögI¡H™dÀr
;

45 
	gVﬁumeMu…ùlõr
 = 0x50;

48 c⁄° 
	gf⁄t8x8
[]= {0x0,0x0,0xc3663c18,0x3c2424e7,0xe724243c,0x183c66c3,0xc16f3818,0x18386fc1,0x83f61c18,0x181cf683,0xe7c3993c,0x3c99c3,0x3f7fffff,0xe7cf9f,0x3c99c3e7,0xe7c399,0x3160c080,0x40e1b,0xcbcbc37e,0x7ec3c3db,0x3c3c3c18,0x81c087e,0x8683818,0x60f0e08,0x81422418,0x18244281,0xbd5a2418,0x18245abd,0x818181ff,0xff8181,0xa1c181ff,0xff8995,0x63633e,0x3e6363,0x606060,0x606060,0x3e60603e,0x3e0303,0x3e60603e,0x3e6060,0x3e636363,0x606060,0x3e03033e,0x3e6060,0x3e03033e,0x3e6363,0x60603e,0x606060,0x3e63633e,0x3e6363,0x3e63633e,0x3e6060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18181818,0x180018,0x666666,0x0,0x367f3600,0x367f36,0x3c067c18,0x183e60,0x18366600,0x62660c,0xe1c361c,0x6e337b,0x181818,0x0,0x18183870,0x703818,0x18181c0e,0xe1c18,0xff3c6600,0x663c,0x7e181800,0x1818,0x0,0x60c0c00,0x7e000000,0x0,0x0,0x181800,0x18306040,0x2060c,0x6e76663c,0x3c6666,0x18181c18,0x7e1818,0x3060663c,0x7e0c18,0x3018307e,0x3c6660,0x363c3830,0x30307e,0x603e067e,0x3c6660,0x3e06063c,0x3c6666,0x1830607e,0xc0c0c,0x3c66663c,0x3c6666,0x7c66663c,0x1c3060,0x181800,0x1818,0x181800,0xc1818,0xc183060,0x603018,0x7e0000,0x7e00,0x30180c06,0x60c18,0x3060663c,0x180018,0x5676663c,0x7c0676,0x66663c18,0x66667e,0x3e66663e,0x3e6666,0x606663c,0x3c6606,0x6666361e,0x1e3666,0x3e06067e,0x7e0606,0x3e06067e,0x60606,0x7606067c,0x7c6666,0x7e666666,0x666666,0x1818183c,0x3c1818,0x60606060,0x3c6660,0xe1e3666,0x66361e,0x6060606,0x7e0606,0x6b7f7763,0x636363,0x7e7e6e66,0x666676,0x6666663c,0x3c6666,0x3e66663e,0x60606,0x6666663c,0x6c366e,0x3e66663e,0x666636,0x3c06663c,0x3c6660,0x1818187e,0x181818,0x66666666,0x7c6666,0x66666666,0x183c66,0x6b636363,0x63777f,0x183c6666,0x66663c,0x3c666666,0x181818,0x1830607e,0x7e060c,0x18181878,0x781818,0x180c0602,0x406030,0x1818181e,0x1e1818,0x63361c08,0x0,0x0,0x7f0000,0xc060300,0x0,0x603c0000,0x7c667c,0x663e0606,0x3e6666,0x63c0000,0x3c0606,0x667c6060,0x7c6666,0x663c0000,0x3c067e,0xc3e0c38,0xc0c0c,0x667c0000,0x3e607c66,0x663e0606,0x666666,0x181c0018,0x3c1818,0x18180018,0xe181818,0x36660606,0x66361e,0x1818181c,0x3c1818,0x7f370000,0x63636b,0x663e0000,0x666666,0x663c0000,0x3c6666,0x663e0000,0x63e6666,0x667c0000,0x607c6666,0x663e0000,0x60606,0x67c0000,0x3e603c,0x187e1800,0x701818,0x66660000,0x7c6666,0x66660000,0x183c66,0x63630000,0x363e6b,0x3c660000,0x663c18,0x66660000,0x3e607c66,0x307e0000,0x7e0c18,0xc181870,0x701818,0x18181818,0x18181818,0x3018180e,0xe1818,0x794f0600,0x30};

50 
±hªad_t
 
	ggp2x_sound_thªad
=0, 
	ggp2x_sound_thªad_exô
=0;

51 
fb_fix_s¸ìnöfo
 
	gfb0_fixed_öfo
;

52 
fb_fix_s¸ìnöfo
 
	gfb1_fixed_öfo
;

60 
	$debug
(*
ãxt
, 
∑u£
)

62 
bµmode
;

63 
bµmode
=
gp2x_memªgs
[0x28DA>>1];

64 
bµmode
>>=9;

65 
bµmode
<<=3;

67 if(
bµmode
==8)

69 
	`gp_˛órFømebuf„r8
(
‰amebuf„r8
[
cuºFB
],0);

70 
	`gp_døwSåög
(0,0,
	`°æí
(
ãxt
),ãxt,0x51,
‰amebuf„r16
[
cuºFB
]);

74 
	`gp_˛órFømebuf„r8
(
‰amebuf„r16
[
cuºFB
],0);

75 
	`gp_døwSåög
(0,0,
	`°æí
(
ãxt
),ãxt,()
	`RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

77 
	`MíuFlù
();

78 if(
∑u£
Ë
	`MíuPau£
();

80 
	}
}

81 
__ölöe__


82 
	$gp_døwPixñ8
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

84 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

85 
	}
}

87 
__ölöe__


88 
	$gp_døwPixñ16
 ( 
x
, 
y
, 
c
, *
‰amebuf„r
 )

90 *(
‰amebuf„r
 +(320*
y
)+
x
 ) = 
c
;

91 
	}
}

94 
	$£t_ch¨8x8_16bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

96 
y
, 
pixñ
;

97 
off£t
 *= 2;

98 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

99 
y
 = 0; y < 4; y++)

101 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

102 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

103 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

104 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

105 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

106 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

107 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

108 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

110 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

111 
y
 = 0; y < 4; y++)

113 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

114 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

115 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

116 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

117 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

118 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

119 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

120 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ16
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

123 
	}
}

126 
	$£t_ch¨8x8_8bµ
 (
xx
,
yy
,
off£t
,
mode
,*
‰amebuf„r
)

128 
y
, 
pixñ
;

129 
off£t
 *= 2;

130 
pixñ
 = 
f⁄t8x8
[0 + 
off£t
];

131 
y
 = 0; y < 4; y++)

133 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y, 
mode
, 
‰amebuf„r
);

134 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y, 
mode
, 
‰amebuf„r
);

135 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y, 
mode
, 
‰amebuf„r
);

136 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y, 
mode
, 
‰amebuf„r
);

137 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y, 
mode
, 
‰amebuf„r
);

138 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y, 
mode
, 
‰amebuf„r
);

139 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y, 
mode
, 
‰amebuf„r
);

140 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y, 
mode
, 
‰amebuf„r
);

142 
pixñ
 = 
f⁄t8x8
[1 + 
off£t
];

143 
y
 = 0; y < 4; y++)

145 i‡(
pixñ
&(1<<(0+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+0, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

146 i‡(
pixñ
&(1<<(1+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+1, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

147 i‡(
pixñ
&(1<<(2+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+2, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

148 i‡(
pixñ
&(1<<(3+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+3, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

149 i‡(
pixñ
&(1<<(4+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+4, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

150 i‡(
pixñ
&(1<<(5+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+5, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

151 i‡(
pixñ
&(1<<(6+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+6, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

152 i‡(
pixñ
&(1<<(7+(
y
<<3)))Ë
	`gp_døwPixñ8
(
xx
+7, 
yy
+y+4, 
mode
, 
‰amebuf„r
);

155 
	}
}

157 
	$gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
)

159 
l
,
ba£
=0;

160 
bµmode
;

161 
bµmode
=
gp2x_memªgs
[0x28DA>>1];

162 
bµmode
>>=9;

163 
bµmode
<<=3;

165 
l
=0;l<
Àn
;l++)

167 i‡(
bµmode
==8)

169 
	`£t_ch¨8x8_8bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,
‰amebuf„r
);

173 
	`£t_ch¨8x8_16bµ
 (
x
+
ba£
,
y
,
buf„r
[
l
],
cﬁ‹
,
‰amebuf„r
);

175 
ba£
+=8;

177 
	}
}

179 
	$gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
)

181 
x
,
y
;

182 
y
=0;y<240;y++)

184 
x
=0;x<320;x++)

186 *
‰amebuf„r
++ = 
∑l
;

189 
	}
}

191 
	$gp_˛órFømebuf„r8
(*
‰amebuf„r
, 
∑l
)

193 
x
,
y
;

194 
y
=0;y<240;y++)

196 
x
=0;x<320;x++)

198 *
‰amebuf„r
++ = 
∑l
;

201 
	}
}

203 
	$gp_˛órFømebuf„r
(*
‰amebuf„r
, 
∑l
)

205 
bµmode
;

206 
bµmode
=
gp2x_memªgs
[0x28DA>>1];

207 
bµmode
>>=9;

208 
bµmode
<<=3;

209 if(
bµmode
==8Ë
	`gp_˛órFømebuf„r8
((*)
‰amebuf„r
,()
∑l
);

210 
	`gp_˛órFømebuf„r16
((*)
‰amebuf„r
,()
∑l
);

211 
	}
}

216 
	$gp_gëBuâ⁄
(
íabÀ_düg«ls
)

218 
vÆue
=(
gp2x_memªgs
[0x1198>>1] & 0x00FF);

239 
vÆue
)

244 
vÆue
 = 0xFE;

250 
vÆue
 = 0xBF;

256 
vÆue
 = 0xEF;

262 
vÆue
 = 0xFB;

266 i‡(
íabÀ_düg«ls
)

269 if(
vÆue
==0xFD) value=0xFA;

270 if(
vÆue
==0xF7) value=0xEB;

271 if(
vÆue
==0xDF) value=0xAF;

272 if(
vÆue
==0x7F) value=0xBE;

276  ~((
gp2x_memªgs
[0x1184>>1] & 0xFF00Ë| 
vÆue
 | (gp2x_memregs[0x1186>>1] << 16));

277 
	}
}

279 
	$gp_öôGøphics
(
bµ
, 
Êù
, 
≠∂yMmuHack
)

282 
x
 = 0;

283 
key
 = 0;

284 
off£t
 = 0;

285 
buf
[256];

288 #ifde‡
DEBUG


289 
	`¥ötf
("Entering gp_initGraphics....\r\n");

294 i‡(!
InôFømebuf„r
)

296 #ifde‡
DEBUG


297 
	`•rötf
(
buf
, "Initing buffer\r\n");

298 
	`¥ötf
(
buf
);

300 
gp2x_dev
[0] = 
	`›í
("/dev/fb0", 
O_RDWR
);

301 
gp2x_dev
[1] = 
	`›í
("/dev/fb1", 
O_RDWR
);

302 
gp2x_dev
[2] = 
	`›í
("/dev/mem", 
O_RDWR
);

304 #ifde‡
DEBUG


305 
	`•rötf
(
buf
, "Devices opened\r\n");

306 
	`¥ötf
(
buf
);

307 
	`•rötf
(
buf
, "/dev/fb0: %x \r\n", 
gp2x_dev
[0]);

308 
	`¥ötf
(
buf
);

309 
	`•rötf
(
buf
, "/dev/fb1: %x \r\n", 
gp2x_dev
[1]);

310 
	`¥ötf
(
buf
);

311 
	`•rötf
(
buf
, "/dev/mem: %x \r\n", 
gp2x_dev
[2]);

312 
	`¥ötf
(
buf
);

315 
gp2x_memªgs
=(*)
	`mm≠
(0, 0x10000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], 0xc0000000);

316 
gp2x_memªgl
=(*)
gp2x_memªgs
;

317 i‡(!
gp2x_blôãr
Ëgp2x_blôãr=(*)
	`mm≠
(0, 0x100, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], 0xe0020000);

319 i‡(!
‰amebuf„r_mm≠
[0]Ë‰amebuf„r_mm≠[0]=(*)
	`mm≠
(0, 
fb_size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], (
gp2x_physvøm
[0]=0x04000000-(0x26000*4) ));

320 i‡(!
‰amebuf„r_mm≠
[1]Ë‰amebuf„r_mm≠[1]=(*)
	`mm≠
(0, 
fb_size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], (
gp2x_physvøm
[1]=0x04000000-(0x26000*3) ));

321 i‡(!
‰amebuf„r_mm≠
[2]Ë‰amebuf„r_mm≠[2]=(*)
	`mm≠
(0, 
fb_size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], (
gp2x_physvøm
[2]=0x04000000-(0x26000*2) ));

322 i‡(!
‰amebuf„r_mm≠
[3]Ë‰amebuf„r_mm≠[3]=(*)
	`mm≠
(0, 
fb_size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
gp2x_dev
[2], (
gp2x_physvøm
[3]=0x04000000-(0x26000*1) ));

324 i‡(
≠∂yMmuHack
)

326 
	`¥ötf
("Aµlyög MMUHACK..."); 
	`fÊush
(
°dout
);

327 
mmuHackSètus
 = 
	`mmuhack
();

328 
	`•rötf
(
buf
, "D⁄e\r\n. MMUHACKÑëu∫ed: %x\r\n", 
mmuHackSètus
);

329 
	`¥ötf
(
buf
); 
	`fÊush
(
°dout
);

334 
‰amebuf„r16
[0]=
‰amebuf„r_mm≠
[0]+8;

335 
‰amebuf„r16
[1]=
‰amebuf„r_mm≠
[1]+8;

336 
‰amebuf„r16
[2]=
‰amebuf„r_mm≠
[2]+8;

337 
‰amebuf„r16
[3]=
‰amebuf„r_mm≠
[3]+8;

339 
gp2x_physvøm
[0]+=16;

340 
gp2x_physvøm
[1]+=16;

341 
gp2x_physvøm
[2]+=16;

342 
gp2x_physvøm
[3]+=16;

346 
‰amebuf„r8
[0]=(*)
‰amebuf„r16
[0];

347 
‰amebuf„r8
[1]=(*)
‰amebuf„r16
[1];

348 
‰amebuf„r8
[2]=(*)
‰amebuf„r16
[2];

349 
‰amebuf„r8
[3]=(*)
‰amebuf„r16
[3];

352 
	`mem£t
(
‰amebuf„r16
[0],0,320*240*2);

353 
	`mem£t
(
‰amebuf„r16
[1],0,320*240*2);

354 
	`mem£t
(
‰amebuf„r16
[2],0,320*240*2);

355 
	`mem£t
(
‰amebuf„r16
[3],0,320*240*2);

357 
InôFømebuf„r
=1;

369 
gp2x_memªgs
[0x28DA>>1]=(((
bµ
+1)/8)<<9)|0xAB;

370 
gp2x_memªgs
[0x290C>>1]=320*((
bµ
+1)/8);

373 
	`gp2x_video_RGB_£tsˇlög
(320,240);

379 
	`gp_£tFømebuf„r
(
Êù
,1);

381 #ifde‡
DEBUG


382 
	`¥ötf
("Leaving gp_initGraphics....\r\n");

384 
	}
}

386 
	$gp_£tFømebuf„r
(
Êù
, 
sync
)

388 
CuºítFømeBuf„r
=
Êù
;

389 
addªss
=()
gp2x_physvøm
[
Êù
];

390 
x
=0;

421 
gp2x_memªgs
[0x290E>>1]=()(
addªss
 & 0xffff);

422 
gp2x_memªgs
[0x2910>>1]=()(
addªss
 >> 16);

423 
gp2x_memªgs
[0x2912>>1]=()(
addªss
 & 0xffff);

424 
gp2x_memªgs
[0x2914>>1]=()(
addªss
 >> 16);

425 
	}
}

427 
	$gp2x_video_£çÆëã
()

429 *
g
=(*)
gp2x_∑Àâe
; 
i
=512;

430 
gp2x_memªgs
[0x2958>>1]=0;

431 
i
--Ë
gp2x_memªgs
[0x295A>>1]=*
g
++;

432 
	}
}

440 *
	$gp2x_sound_∂ay
()

443 ! 
gp2x_sound_thªad_exô
)

445 
Timî
++;

446 
CuºítSoundB™k
++;

448 i‡(
CuºítSoundB™k
 >= 8) CurrentSoundBank = 0;

450 i‡(
SoundThªadFœg
==
SOUND_THREAD_SOUND_ON
)

452 
	`wrôe
(
gp2x_dev
[3], (*)
pOuçut
[
CuºítSoundB™k
], 
gp2x_sound_buf„r
[1]);

453 
	`io˘l
(
gp2x_dev
[3], 
SOUND_PCM_SYNC
, 0);

459 
	`wrôe
(
gp2x_dev
[3], (*)&
gp2x_sound_buf„r
[4], gp2x_sound_buffer[1]);

460 
	`io˘l
(
gp2x_dev
[3], 
SOUND_PCM_SYNC
, 0);

466  
NULL
;

467 
	}
}

469 
	$gp2x_sound_∂ay_b™k
(
b™k
)

471 
	`wrôe
(
gp2x_dev
[3], (*)(&
gp2x_sound_buf„r
[4+(
b™k
*gp2x_sound_buffer[1])]), gp2x_sound_buffer[1]);

472 
	}
}

474 
	$gp2x_sound_sync
()

476 
	`io˘l
(
gp2x_dev
[3], 
SOUND_PCM_SYNC
, 0);

477 
	}
}

479 
	$gp2x_sound_vﬁume
(
l
, 
r
)

481 if(!
gp2x_dev
[4])

483 
gp2x_dev
[4] = 
	`›í
("/dev/mixî", 
O_WRONLY
);

485 
l
=((÷*
VﬁumeMu…ùlõr
)/100)<<8)|((
r
*VolumeMultiplier)/100);

486 
	`io˘l
(
gp2x_dev
[4], 
SOUND_MIXER_WRITE_PCM
, &
l
);

487 
	}
}

489 
	$gp2x_timî_ªad
()

495 
timevÆ
 
tvÆ
;

497 
	`gëtimeofday
(&
tvÆ
, 0);

500  (
tvÆ
.
tv_£c
*1000000)+tvÆ.
tv_u£c
;

501 
	}
}

503 
	$gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
)

505 
°©us
;

506 
i
=0;

507 
n⁄blockög
=1;

508 
buf„rSèπ
=0;

509 
ªsu…
;

510 
ãxt
[256];

513 
fd
;

514 
fd
=
	`›í
("/dev/touchs¸ìn/wm97xx", 
O_RDONLY
 | 
O_NOCTTY
);

515 i‡(
fd
!=-1)

518 
VﬁumeMu…ùlõr
 = 0x28;

519 
	`˛o£
(
fd
);

528 i‡((
‰ag
!
CuºítFøg
)&&(
gp2x_dev
[3]!=0))

532 
	`˛o£
(
gp2x_dev
[3]);

533 
gp2x_dev
[3]=0;

536 i‡(
gp2x_dev
[3]==0)

538 
gp2x_dev
[3] = 
	`›í
("/dev/d•", 
O_WRONLY
);

539 
	`¥ötf
("O≥nög sound devi˚: %x\r\n",
gp2x_dev
[3]);

540 
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_SETFRAGMENT
, &
‰ag
);

541 
CuºítFøg
=
‰ag
;

545 
ªsu…
=
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_SPEED
, &
øã
);

546 if(
ªsu…
==-1)

548 
	`debug
("Error setting DSP Speed",1);

552 
ªsu…
=
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_SETFMT
, &
bôs
);

553 if(
ªsu…
==-1)

555 
	`debug
("Error setting DSP format",1);

559 
ªsu…
=
	`io˘l
(
gp2x_dev
[3], 
SNDCTL_DSP_STEREO
, &
°îeo
);

560 if(
ªsu…
==-1)

562 
	`debug
("Error setting DSP format",1);

567 
gp2x_sound_buf„r
[1]=(gp2x_sound_buf„r[0]=(
øã
/
Hz
)Ë<< (
°îeo
 + (
bôs
==16));

568 
gp2x_sound_buf„r
[2]=(1000000000/
Hz
)&0xFFFF;

569 
gp2x_sound_buf„r
[3]=(1000000000/
Hz
)>>16;

571 
buf„rSèπ
&
gp2x_sound_buf„r
[4];

572 
pOuçut
[0] = (*)
buf„rSèπ
+(0*
gp2x_sound_buf„r
[1]);

573 
pOuçut
[1] = (*)
buf„rSèπ
+(1*
gp2x_sound_buf„r
[1]);

574 
pOuçut
[2] = (*)
buf„rSèπ
+(2*
gp2x_sound_buf„r
[1]);

575 
pOuçut
[3] = (*)
buf„rSèπ
+(3*
gp2x_sound_buf„r
[1]);

576 
pOuçut
[4] = (*)
buf„rSèπ
+(4*
gp2x_sound_buf„r
[1]);

577 
pOuçut
[5] = (*)
buf„rSèπ
+(5*
gp2x_sound_buf„r
[1]);

578 
pOuçut
[6] = (*)
buf„rSèπ
+(6*
gp2x_sound_buf„r
[1]);

579 
pOuçut
[7] = (*)
buf„rSèπ
+(7*
gp2x_sound_buf„r
[1]);

581 if(!
gp2x_sound_thªad
)

583 
	`±hªad_¸óã
–&
gp2x_sound_thªad
, 
NULL
, 
gp2x_sound_∂ay
, NULL);

587 
i
=0;i<(
gp2x_sound_buf„r
[1]*8);i++)

589 
gp2x_sound_buf„r
[4+
i
] = 0;

593 
	}
}

595 
	$gp_°›Sound
()

597 
i
=0;

598 
gp2x_sound_thªad_exô
=1;

599 
	`¥ötf
("Killing Thread\r\n");

600 
i
=0;i<(
gp2x_sound_buf„r
[1]*8);i++)

602 
gp2x_sound_buf„r
[4+
i
] = 0;

604 
	`u¶ìp
(100000);

605 
	`¥ötf
("Thread is dead\r\n");

606 
gp2x_sound_thªad
=0;

607 
gp2x_sound_thªad_exô
=0;

608 
CuºítSoundB™k
=0;

609 
	}
}

617 
	$gp_Re£t
()

619 
i
=0;

622 if–
gp2x_sound_thªad
)

624 
gp2x_sound_thªad_exô
=1;

625 
	`u¶ìp
(500);

628 
gp2x_memªgs
[0x28DA>>1]=0x4AB;

629 
gp2x_memªgs
[0x290C>>1]=640;

630 
	`munm≠
((*)
gp2x_memªgs
, 0x10000);

632 
	`munm≠
(
‰amebuf„r_mm≠
[0], 
fb_size
);

633 
	`munm≠
(
‰amebuf„r_mm≠
[1], 
fb_size
);

634 
	`munm≠
(
‰amebuf„r_mm≠
[2], 
fb_size
);

635 
	`munm≠
(
‰amebuf„r_mm≠
[3], 
fb_size
);

637 i‡(
gp2x_dev
[0]Ë
	`˛o£
(gp2x_dev[0]);

638 i‡(
gp2x_dev
[1]Ë
	`˛o£
(gp2x_dev[1]);

639 i‡(
gp2x_dev
[2]Ë
	`˛o£
(gp2x_dev[2]);

640 i‡(
gp2x_dev
[3]Ë
	`˛o£
(gp2x_dev[3]);

641 i‡(
gp2x_dev
[4]Ë
	`˛o£
(gp2x_dev[4]);

643 
	`f˛o£Æl
();

646 i‡(
mmuHackSètus
Ë
	`mmuunhack
();

648 
	`chdú
("/usr/gp2x");

649 
	`exe˛
("gp2xmíu",
NULL
);

651 
	}
}

653 
	$gp2x_video_RGB_£tsˇlög
(
W
, 
H
)

655 
esˇœw
,
esˇœh
;

656 
bµ
=(
gp2x_memªgs
[0x28DA>>1]>>9)&0x3;

658 if(
gp2x_memªgs
[0x2800>>1]&0x100)

660 
esˇœw
=489.0;

661 i‡(
gp2x_memªgs
[0x2818>>1] == 287)

662 
esˇœh
=274.0;

663 i‡(
gp2x_memªgs
[0x2818>>1] == 239)

664 
esˇœh
=331.0;

668 
esˇœw
=1024.0;

669 
esˇœh
=320.0;

673 
gp2x_memªgs
[0x2906>>1]=()(()
esˇœw
 *(
W
/320.0));

675 
gp2x_memªgl
[0x2908>>2]=()(()
esˇœh
 *
bµ
 *(
H
/240.0));

676 
	}
}

678 
	$gp_£tCpu•ìd
(
MHZ
)

680 
v
;

681 
mdiv
,
pdiv
=3,
sˇÀ
=0;

683 
MHZ
*=1000000;

684 
mdiv
=(
MHZ
*
pdiv
)/
SYS_CLK_FREQ
;

685 
mdiv
=((mdiv-8)<<8) & 0xff00;

686 
pdiv
=((pdiv-2)<<2) & 0xfc;

687 
sˇÀ
&=3;

688 
v
=
mdiv
 | 
pdiv
 | 
sˇÀ
;

689 
gp2x_memªgs
[0x910>>1]=
v
;

691 
	}
}

695 
	$£t_RAM_Timögs
(
tRC
, 
tRAS
, 
tWR
, 
tMRD
, 
tRFC
, 
tRP
, 
tRCD
)

697 
tRC
 -1; 
tRAS
 -1; 
tWR
 -1; 
tMRD
 -1; 
tRFC
 -1; 
tRP
 -1; 
tRCD
 -= 1;

698 
gp2x_memªgs
[0x3802>>1] = ((
tMRD
 & 0xFË<< 12Ë| ((
tRFC
 & 0xFË<< 8Ë| ((
tRP
 & 0xFË<< 4Ë| (
tRCD
 & 0xF);

699 
gp2x_memªgs
[0x3804>>1] = ((
tRC
 & 0xFË<< 8Ë| ((
tRAS
 & 0xFË<< 4Ë| (
tWR
 & 0xF);

700 
	}
}

702 
	$£t_gamma
(
g100
)

704 
gamma
 = (Ë
g100
 / 100;

705 
i
;

706 
gamma
 = 1/gamma;

709 
gp2x_memªgs
[0x2880>>1]&=~(1<<12);

711 
gp2x_memªgs
[0x295C>>1]=0;

712 
i
=0; i<256; i++)

714 
g
;

715 
s
;

716 
g
 =()(255.0*
	`pow
(
i
/255.0,
gamma
));

717 
s
 = (
g
<<8) | g;

718 
gp2x_memªgs
[0x295E>>1]
s
;

719 
gp2x_memªgs
[0x295E>>1]
g
;

721 
	}
}

	@gp2x_sdk.h

1 #i‚de‡
_GP2X_SDK_H_


2 
	#_GP2X_SDK_H_


	)

4 #ifde‡
__˝lu•lus


8 
	#SOUND_THREAD_SOUND_ON
 1

	)

9 
	#SOUND_THREAD_SOUND_OFF
 2

	)

10 
	#SOUND_THREAD_PAUSE
 3

	)

12 
	#INP_BUTTON_UP
 (0)

	)

13 
	#INP_BUTTON_LEFT
 (2)

	)

14 
	#INP_BUTTON_DOWN
 (4)

	)

15 
	#INP_BUTTON_RIGHT
 (6)

	)

16 
	#INP_BUTTON_START
 (8)

	)

17 
	#INP_BUTTON_SELECT
 (9)

	)

18 
	#INP_BUTTON_L
 (10)

	)

19 
	#INP_BUTTON_R
 (11)

	)

20 
	#INP_BUTTON_A
 (12)

	)

21 
	#INP_BUTTON_B
 (13)

	)

22 
	#INP_BUTTON_X
 (14)

	)

23 
	#INP_BUTTON_Y
 (15)

	)

24 
	#INP_BUTTON_VOL_UP
 (23)

	)

25 
	#INP_BUTTON_VOL_DOWN
 (22)

	)

26 
	#INP_BUTTON_STICK_PUSH
 (27)

	)

28 
gp_døwSåög
 (
x
,
y
,
Àn
,*
buf„r
,
cﬁ‹
,*
‰amebuf„r
);

29 
gp_˛órFømebuf„r16
(*
‰amebuf„r
, 
∑l
);

30 
gp_˛órFømebuf„r8
(*
‰amebuf„r
, 
∑l
);

31 
gp_˛órFømebuf„r
(*
‰amebuf„r
, 
∑l
);

32 
gp_£tCpu•ìd
(
˝u•ìd
);

33 
gp_öôGøphics
(
bµ
, 
Êù
, 
≠∂yMmuHack
);

34 
gp_£tFømebuf„r
(
Êù
, 
sync
);

35 
gp2x_video_£çÆëã
();

36 
gp_öôSound
(
øã
, 
bôs
, 
°îeo
, 
Hz
, 
‰ag
);

37 
gp_°›Sound
();

38 
gp_Re£t
();

39 
gp2x_íabÀIRQ
();

40 
gp2x_dißbÀIRQ
();

41 
gp2x_sound_vﬁume
(
l
, 
r
);

42 
gp2x_timî_ªad
();

43 
gp_gëBuâ⁄
(
íabÀ_düg«ls
);

44 
gp2x_video_RGB_£tsˇlög
(
W
, 
H
);

45 
gp2x_sound_∂ay_b™k
(
b™k
);

46 
gp2x_sound_sync
();

47 
£t_gamma
(
g100
);

48 
£t_RAM_Timögs
(
tRC
, 
tRAS
, 
tWR
, 
tMRD
, 
tRFC
, 
tRP
, 
tRCD
);

50 vﬁ©ûê
SoundThªadFœg
;

51 vﬁ©ûê
CuºítSoundB™k
;

52 
CuºítFømeBuf„r
;

53 vﬁ©ûê*
pOuçut
[];

54 *
‰amebuf„r16
[];

55 
gp2x_physvøm
[];

56 *
‰amebuf„r8
[];

57 vﬁ©ûê
gp2x_∑Àâe
[512][2];

58 vﬁ©ûê*
gp2x_memªgs
;

59 vﬁ©ûê*
gp2x_memªgl
;

60 vﬁ©ûê*
gp2x_blôãr
;

62 #ifde‡
__˝lu•lus


	@gp32_func.h

1 #i‚de‡
__gp32_func_h__


2 
	#__gp32_func_h__


	)

4 "C" 
funcSADDMULT1616
(
a
,
b
,
c
,
d
);

6 
	#SADDMULT1616
(
ªs
,
a
,
b
,
c
,
d
Ë{\

	)

7 
	gªs
=
funcSADDMULT1616
(
a
,
b
,
c
,
d
);\

9 
	#SMULT1616
(
ªs
,
a
,
b
Ë{\

	)

10 
	gªs
=
funcSADDMULT1616
(
a
,
b
,0,0);\

	@gx.h

9 #ifde‡
GXDLL_EXPORTS


10 
	#GXDLL_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

12 
	#GXDLL_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

15 
	sGXDi•œyPr›îtõs
 {

16 
DWORD
 
	mcxWidth
;

17 
DWORD
 
	mcyHeight
;

18 
	mcbxPôch
;

19 
	mcbyPôch
;

20 
	mcBPP
;

21 
DWORD
 
	mffF‹m©
;

24 
	sGXKeyLi°
 {

25 
	mvkUp
;

26 
POINT
 
	m±Up
;

27 
	mvkDown
;

28 
POINT
 
	m±Down
;

29 
	mvkLe·
;

30 
POINT
 
	m±Le·
;

31 
	mvkRight
;

32 
POINT
 
	m±Right
;

33 
	mvkA
;

34 
POINT
 
	m±A
;

35 
	mvkB
;

36 
POINT
 
	m±B
;

37 
	mvkC
;

38 
POINT
 
	m±C
;

39 
	mvkSèπ
;

40 
POINT
 
	m±Sèπ
;

43 
	sGXS¸ìnRe˘
 {

44 
DWORD
 
	mdwT›
;

45 
DWORD
 
	mdwLe·
;

46 
DWORD
 
	mdwWidth
;

47 
DWORD
 
	mdwHeight
;

50 
GXDLL_API
 
GXO≥nDi•œy
(
HWND
 
hWnd
, 
DWORD
 
dwFœgs
);

51 
GXDLL_API
 
GXClo£Di•œy
();

52 
GXDLL_API
 * 
GXBegöDøw
();

53 
GXDLL_API
 
GXEndDøw
();

54 
GXDLL_API
 
GXO≥nI≈ut
();

55 
GXDLL_API
 
GXClo£I≈ut
();

58 
GXDLL_API
 
GXDi•œyPr›îtõs
 
GXGëDi•œyPr›îtõs
();

59 
GXDLL_API
 
GXKeyLi°
 
GXGëDeÁu…Keys
(
iO±i⁄s
);

60 
GXDLL_API
 
GXSu•íd
();

61 
GXDLL_API
 
GXResume
();

62 
GXDLL_API
 
GXSëVõwp‹t
–
DWORD
 
dwT›
, DWORD 
dwHeight
, DWORD 
dwRe£rved1
, DWORD 
dwRe£rved2
 );

63 
GXDLL_API
 
BOOL
 
GXIsDi•œyDRAMBuf„r
();

69 
	#GX_FULLSCREEN
 0x01

70 
	#GX_NORMALKEYS
 0x02

	)

71 
	#GX_LANDSCAPEKEYS
 0x03

	)

73 #i‚de‡
kfL™dsˇ≥


74 
	#kfL™dsˇ≥
 0x8

75 
	#kfPÆëã
 0x10

76 
	#kfDúe˘
 0x20

77 
	#kfDúe˘555
 0x40

78 
	#kfDúe˘565
 0x80

79 
	#kfDúe˘888
 0x100

80 
	#kfDúe˘444
 0x200

81 
	#kfDúe˘Invîãd
 0x400

	)

	@imgdecmp.h

12 #i‚de‡
__IMGDECMP_H__


13 
	#__IMGDECMP_H__


	)

15 #ifde‡
__˝lu•lus


19 
	~"imgªndr.h
"

21 (
CALLBACK
 *
	tPROGRESSFUNC
)(
	tIImageRídî
 *
	tpRídî
, 
	tBOOL
 
	tbCom∂ëe
, 
	tLPARAM
 
	tlP¨am
);

22 
DWORD
 (
	tCALLBACK
 *
	tGETDATAFUNC
)(
	tLPSTR
 
	tszBuf„r
, 
	tDWORD
 
	tdwBuf„rMax
, 
	tLPARAM
 
	tlP¨am
);

24 
	sègDecom¥essImageInfo
 {

25 
DWORD
 
dwSize
;

26 
LPBYTE
 
pbBuf„r
;

27 
DWORD
 
dwBuf„rMax
;

28 
DWORD
 
dwBuf„rCuºít
;

29 
HBITMAP
 * 
phBM
;

30 
IImageRídî
 ** 
µImageRídî
;

31 
iBôDïth
;

32 
LPARAM
 
lP¨am
;

33 
HDC
 
hdc
;

34 
iSˇÀ
;

35 
iMaxWidth
;

36 
iMaxHeight
;

37 
GETDATAFUNC
 
p‚GëD©a
;

38 
PROGRESSFUNC
 
p‚ImageProgªss
;

39 
COLORREF
 
¸Tøn•¨ítOvîride
;

41 } 
	tDecom¥essImageInfo
;

43 
	#IMGDECOMP_E_NOIMAGE
 0x800b0100

	)

45 
COLORREF
 *

46 
GëHÆ·⁄ePÆëã
();

48 
COLORREF
 *

49 
Gë332PÆëã
();

51 
HRESULT


52 
Decom¥essImageIndúe˘
(
Decom¥essImageInfo
 *
pP¨ams
);

54 #ifde‡
__˝lu•lus


	@imgrendr.h

12 
	~"Ωc.h
"

13 
	~"Ω˙dr.h
"

14 #i‚de‡
COM_NO_WINDOWS_H


15 
	~"wödows.h
"

16 
	~"ﬁe2.h
"

19 #i‚de‡
__imgªndr_h__


20 
	#__imgªndr_h__


	)

22 #ifde‡
__˝lu•lus


28 #i‚de‡
__IImageRídî_FWD_DEFINED__


29 
	#__IImageRídî_FWD_DEFINED__


	)

30 
öãrÁ˚
 
	tIImageRídî
 IImageRender;

35 
	~"ﬂidl.h
"

36 
	~"ocidl.h
"

38 
__RPC_FAR
 * 
__RPC_USER
 
MIDL_u£r_Æloˇã
(
size_t
);

39 
__RPC_USER
 
MIDL_u£r_‰ì
–
__RPC_FAR
 * );

41 #i‚de‡
__IImageRídî_INTERFACE_DEFINED__


42 
	#__IImageRídî_INTERFACE_DEFINED__


	)

53 
EXTERN_C
 c⁄° 
IID
 
	gIID_IImageRídî
;

55 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
CINTERFACE
)

57 
öãrÁ˚
 
DECLSPEC_UUID
("59032090-154B-11d1-A9BF-006097DE299B")

58 
	gIImageRídî
 : 
public
 
IUnknown


60 
public
:

61 
vútuÆ
 
HRESULT
 
STDMETHODCALLTYPE
 
Døw
(

62 
HDC
 
hdc
,

63 
RECT
 
__RPC_FAR
 *
ÕRe˘
) = 0;

65 
vútuÆ
 
HRESULT
 
STDMETHODCALLTYPE
 
GëBôm≠
(

66 
HBITMAP
 
__RPC_FAR
 *
phBôm≠
,

67 
BOOL
 
fTake
) = 0;

69 
vútuÆ
 
HRESULT
 
STDMETHODCALLTYPE
 
GëOrigWidth
(

70 
__RPC_FAR
 *
piWidth
) = 0;

72 
vútuÆ
 
HRESULT
 
STDMETHODCALLTYPE
 
GëOrigHeight
(

73 
__RPC_FAR
 *
piHeight
) = 0;

75 
vútuÆ
 
HRESULT
 
STDMETHODCALLTYPE
 
GëBôs
(

76 
__RPC_FAR
 *__RPC_FAR *
µbBôs
) = 0;

78 
vútuÆ
 
HRESULT
 
STDMETHODCALLTYPE
 
ImageFaû
(

79 
BOOL
 
__RPC_FAR
 *
pbFaû
) = 0;

85 
	sIImageRídîVtbl


87 
BEGIN_INTERFACE


89 
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
QuîyI¡îÁ˚
 )(

90 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

91  
REFIID
 
	griid
,

92  
__RPC_FAR
 *__RPC_FAR *
	gµvObje˘
);

94 
ULONG
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
AddRef
 )(

95 
IImageRídî
 
__RPC_FAR
 * 
	gThis
);

97 
ULONG
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
Rñó£
 )(

98 
IImageRídî
 
__RPC_FAR
 * 
	gThis
);

100  
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
Døw
 )(

101 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

102 
HDC
 
	ghdc
,

103 
RECT
 
__RPC_FAR
 *
	gÕRe˘
);

105  
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
GëBôm≠
 )(

106 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

107 
HBITMAP
 
__RPC_FAR
 *
	gphBôm≠
,

108 
BOOL
 
	gfTake
);

110  
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
GëOrigWidth
 )(

111 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

112 
__RPC_FAR
 *
	gpiWidth
);

114  
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
GëOrigHeight
 )(

115 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

116 
__RPC_FAR
 *
	gpiHeight
);

118  
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
GëBôs
 )(

119 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

120 
__RPC_FAR
 *__RPC_FAR *
	gµbBôs
);

122  
HRESULT
 ( 
STDMETHODCALLTYPE
 
__RPC_FAR
 *
ImageFaû
 )(

123 
IImageRídî
 
__RPC_FAR
 * 
	gThis
,

124 
BOOL
 
__RPC_FAR
 *
	gpbFaû
);

126 
	gEND_INTERFACE


127 } 
	tIImageRídîVtbl
;

129 
öãrÁ˚
 
	gIImageRídî


131 
CONST_VTBL
 
IImageRídîVtbl
 
__RPC_FAR
 *
	gÕVtbl
;

136 #ifde‡
COBJMACROS


139 
	#IImageRídî_QuîyI¡îÁ˚
(
This
,
riid
,
µvObje˘
Ë\

	)

140 (
	gThis
)->
	gÕVtbl
 -> 
QuîyI¡îÁ˚
(
This
,
riid
,
µvObje˘
)

142 
	#IImageRídî_AddRef
(
This
Ë\

	)

143 (
	gThis
)->
	gÕVtbl
 -> 
AddRef
(
This
)

145 
	#IImageRídî_Rñó£
(
This
Ë\

	)

146 (
	gThis
)->
	gÕVtbl
 -> 
Rñó£
(
This
)

149 
	#IImageRídî_Døw
(
This
,
hdc
,
ÕRe˘
Ë\

	)

150 (
	gThis
)->
	gÕVtbl
 -> 
Døw
(
This
,
hdc
,
ÕRe˘
)

152 
	#IImageRídî_GëBôm≠
(
This
,
phBôm≠
,
fTake
Ë\

	)

153 (
	gThis
)->
	gÕVtbl
 -> 
GëBôm≠
(
This
,
phBôm≠
,
fTake
)

155 
	#IImageRídî_GëOrigWidth
(
This
,
piWidth
Ë\

	)

156 (
	gThis
)->
	gÕVtbl
 -> 
GëOrigWidth
(
This
,
piWidth
)

158 
	#IImageRídî_GëOrigHeight
(
This
,
piHeight
Ë\

	)

159 (
	gThis
)->
	gÕVtbl
 -> 
GëOrigHeight
(
This
,
piHeight
)

161 
	#IImageRídî_GëBôs
(
This
,
µbBôs
Ë\

	)

162 (
	gThis
)->
	gÕVtbl
 -> 
GëBôs
(
This
,
µbBôs
)

164 
	#IImageRídî_ImageFaû
(
This
,
pbFaû
Ë\

	)

165 (
	gThis
)->
	gÕVtbl
 -> 
ImageFaû
(
This
,
pbFaû
)

174  
HRESULT
 
STDMETHODCALLTYPE
 
IImageRídî_Døw_Proxy
(

175 
IImageRídî
 
__RPC_FAR
 * 
This
,

176 
HDC
 
hdc
,

177 
RECT
 
__RPC_FAR
 *
ÕRe˘
);

180 
__RPC_STUB
 
IImageRídî_Døw_Stub
(

181 
IRpcStubBuf„r
 *
This
,

182 
IRpcCh™√lBuf„r
 *
_pRpcCh™√lBuf„r
,

183 
PRPC_MESSAGE
 
_pRpcMesßge
,

184 
DWORD
 *
_pdwStubPha£
);

187  
HRESULT
 
STDMETHODCALLTYPE
 
IImageRídî_GëBôm≠_Proxy
(

188 
IImageRídî
 
__RPC_FAR
 * 
This
,

189 
HBITMAP
 
__RPC_FAR
 *
phBôm≠
,

190 
BOOL
 
fTake
);

193 
__RPC_STUB
 
IImageRídî_GëBôm≠_Stub
(

194 
IRpcStubBuf„r
 *
This
,

195 
IRpcCh™√lBuf„r
 *
_pRpcCh™√lBuf„r
,

196 
PRPC_MESSAGE
 
_pRpcMesßge
,

197 
DWORD
 *
_pdwStubPha£
);

200  
HRESULT
 
STDMETHODCALLTYPE
 
IImageRídî_GëOrigWidth_Proxy
(

201 
IImageRídî
 
__RPC_FAR
 * 
This
,

202 
__RPC_FAR
 *
piWidth
);

205 
__RPC_STUB
 
IImageRídî_GëOrigWidth_Stub
(

206 
IRpcStubBuf„r
 *
This
,

207 
IRpcCh™√lBuf„r
 *
_pRpcCh™√lBuf„r
,

208 
PRPC_MESSAGE
 
_pRpcMesßge
,

209 
DWORD
 *
_pdwStubPha£
);

212  
HRESULT
 
STDMETHODCALLTYPE
 
IImageRídî_GëOrigHeight_Proxy
(

213 
IImageRídî
 
__RPC_FAR
 * 
This
,

214 
__RPC_FAR
 *
piHeight
);

217 
__RPC_STUB
 
IImageRídî_GëOrigHeight_Stub
(

218 
IRpcStubBuf„r
 *
This
,

219 
IRpcCh™√lBuf„r
 *
_pRpcCh™√lBuf„r
,

220 
PRPC_MESSAGE
 
_pRpcMesßge
,

221 
DWORD
 *
_pdwStubPha£
);

224  
HRESULT
 
STDMETHODCALLTYPE
 
IImageRídî_GëBôs_Proxy
(

225 
IImageRídî
 
__RPC_FAR
 * 
This
,

226 
__RPC_FAR
 *__RPC_FAR *
µbBôs
);

229 
__RPC_STUB
 
IImageRídî_GëBôs_Stub
(

230 
IRpcStubBuf„r
 *
This
,

231 
IRpcCh™√lBuf„r
 *
_pRpcCh™√lBuf„r
,

232 
PRPC_MESSAGE
 
_pRpcMesßge
,

233 
DWORD
 *
_pdwStubPha£
);

236  
HRESULT
 
STDMETHODCALLTYPE
 
IImageRídî_ImageFaû_Proxy
(

237 
IImageRídî
 
__RPC_FAR
 * 
This
,

238 
BOOL
 
__RPC_FAR
 *
pbFaû
);

241 
__RPC_STUB
 
IImageRídî_ImageFaû_Stub
(

242 
IRpcStubBuf„r
 *
This
,

243 
IRpcCh™√lBuf„r
 *
_pRpcCh™√lBuf„r
,

244 
PRPC_MESSAGE
 
_pRpcMesßge
,

245 
DWORD
 *
_pdwStubPha£
);

254 
__RPC_USER
 
HBITMAP_U£rSize
–
__RPC_FAR
 *, , 
HBITMAP
 __RPC_FAR * );

255 
__RPC_FAR
 * 
__RPC_USER
 
HBITMAP_U£rM¨shÆ
–__RPC_FAR *, __RPC_FAR *, 
HBITMAP
 __RPC_FAR * );

256 
__RPC_FAR
 * 
__RPC_USER
 
HBITMAP_U£rUnm¨shÆ
(__RPC_FAR *, __RPC_FAR *, 
HBITMAP
 __RPC_FAR * );

257 
__RPC_USER
 
HBITMAP_U£rFªe
–
__RPC_FAR
 *, 
HBITMAP
 __RPC_FAR * );

259 
__RPC_USER
 
HDC_U£rSize
–
__RPC_FAR
 *, , 
HDC
 __RPC_FAR * );

260 
__RPC_FAR
 * 
__RPC_USER
 
HDC_U£rM¨shÆ
–__RPC_FAR *, __RPC_FAR *, 
HDC
 __RPC_FAR * );

261 
__RPC_FAR
 * 
__RPC_USER
 
HDC_U£rUnm¨shÆ
(__RPC_FAR *, __RPC_FAR *, 
HDC
 __RPC_FAR * );

262 
__RPC_USER
 
HDC_U£rFªe
–
__RPC_FAR
 *, 
HDC
 __RPC_FAR * );

266 #ifde‡
__˝lu•lus


	@input.c

2 
	~"míu.h
"

3 
	~"giz_sdk.h
"

4 #i‡
deföed
(
__GP2X__
)

5 
	~"usbjoy.h
"

6 
usbjoy
 *
	gjoys
[4];

7 
	gjoyCou¡
 = 0;

8 
	gbuâ⁄M≠
[4][32];

11 
INPUT
 
	gI≈
;

12 
	gª≥©Cou¡î
 = 0;

13 
	$I≈utInô
()

15 
	`mem£t
(&
I≈
,0,(Inp));

16 #i‡
	`deföed
(
__GP2X__
)

17 
i
;

18 
i
=1; i<5; i++)

20 
usbjoy
 *
joy
 = 
	`joy_›í
(
i
);

21 if(
joy
 !
NULL
)

23 
joys
[
joyCou¡
] = 
joy
;

24 
	`mem£t
(
buâ⁄M≠
[
joyCou¡
],0,(buttonMap[joyCount]));

25 
buâ⁄M≠
[
joyCou¡
][0] = (1<<
INP_BUTTON_A
);

26 
buâ⁄M≠
[
joyCou¡
][1] = (1<<
INP_BUTTON_B
);

27 
buâ⁄M≠
[
joyCou¡
][2] = (1<<
INP_BUTTON_X
);

28 
buâ⁄M≠
[
joyCou¡
][3] = (1<<
INP_BUTTON_Y
);

29 
buâ⁄M≠
[
joyCou¡
][4] = (1<<
INP_BUTTON_L
);

30 
buâ⁄M≠
[
joyCou¡
][5] = (1<<
INP_BUTTON_R
);

31 i‡(
joy
->
numbuâ⁄s
<10)

33 
buâ⁄M≠
[
joyCou¡
][6] = (1<<
INP_BUTTON_SELECT
);

34 
buâ⁄M≠
[
joyCou¡
][7] = (1<<
INP_BUTTON_START
);

38 
buâ⁄M≠
[
joyCou¡
][6] = (1<<
INP_BUTTON_L
);

39 
buâ⁄M≠
[
joyCou¡
][7] = (1<<
INP_BUTTON_R
);

40 
buâ⁄M≠
[
joyCou¡
][8] = (1<<
INP_BUTTON_SELECT
);

41 
buâ⁄M≠
[
joyCou¡
][9] = (1<<
INP_BUTTON_START
);

43 
joyCou¡
++;

48 
	}
}

50 #i‡
deföed
(
__GP2X__
)

51 
	$I≈utClo£
()

53 
i
;

54 
i
=0; i<
joyCou¡
; i++)

56 
	`joy_˛o£
(
joys
[
i
]);

58 
	}
}

60 
	$joy_gëBuâ⁄
(
joyNumbî
)

62 
key
=0;

63 i‡(
joyNumbî
<
joyCou¡
)

65 
i
;

66 
	`joy_upd©e
(
joys
[
joyNumbî
]);

67 if(
	`joy_gëaxe
(
JOYUP
, 
joys
[
joyNumbî
])Ë
key
|(1<<
INP_BUTTON_UP
);

68 if(
	`joy_gëaxe
(
JOYDOWN
, 
joys
[
joyNumbî
])Ë
key
|(1<<
INP_BUTTON_DOWN
);

69 if(
	`joy_gëaxe
(
JOYLEFT
, 
joys
[
joyNumbî
])Ë
key
|(1<<
INP_BUTTON_LEFT
);

70 if(
	`joy_gëaxe
(
JOYRIGHT
, 
joys
[
joyNumbî
])Ë
key
|(1<<
INP_BUTTON_RIGHT
);

71 
i
 = 0; i < 
	`joy_buâ⁄s
(
joys
[
joyNumbî
]); i++)

73 i‡(
	`joy_gëbuâ⁄
(
i
, 
joys
[
joyNumbî
]))

74 
key
|
buâ⁄M≠
[
joyNumbî
][
i
];

77  
key
;

78 
	}
}

80 
	$joy_Cou¡
()

82  
joyCou¡
;

83 
	}
}

86 
	$I≈utUpd©e
(
E«bÀDüg«ls
)

88 
i
=0;

89 
key
=0;

91 #i‡
	`deföed
(
__GIZ__
)

92 
key
=
	`gp_gëBuâ⁄
(
E«bÀDüg«ls
);

93 
key
&(1<<
INP_BUTTON_UP
)|

94 (1<<
INP_BUTTON_LEFT
)|

95 (1<<
INP_BUTTON_DOWN
)|

96 (1<<
INP_BUTTON_RIGHT
)|

97 (1<<
INP_BUTTON_HOME
)|

98 (1<<
INP_BUTTON_VOL
)|

99 (1<<
INP_BUTTON_L
)|

100 (1<<
INP_BUTTON_R
)|

101 (1<<
INP_BUTTON_REWIND
)|

102 (1<<
INP_BUTTON_FORWARD
)|

103 (1<<
INP_BUTTON_PLAY
)|

104 (1<<
INP_BUTTON_STOP
)|

105 (1<<
INP_BUTTON_BRIGHT
);

108 #i‡
	`deföed
(
__GP2X__
)

109 
key
=
	`gp_gëBuâ⁄
(
E«bÀDüg«ls
);

110 
key
&(1<<
INP_BUTTON_UP
)|

111 (1<<
INP_BUTTON_LEFT
)|

112 (1<<
INP_BUTTON_DOWN
)|

113 (1<<
INP_BUTTON_RIGHT
)|

114 (1<<
INP_BUTTON_START
)|

115 (1<<
INP_BUTTON_SELECT
)|

116 (1<<
INP_BUTTON_L
)|

117 (1<<
INP_BUTTON_R
)|

118 (1<<
INP_BUTTON_A
)|

119 (1<<
INP_BUTTON_B
)|

120 (1<<
INP_BUTTON_X
)|

121 (1<<
INP_BUTTON_Y
)|

122 (1<<
INP_BUTTON_VOL_UP
)|

123 (1<<
INP_BUTTON_VOL_DOWN
)|

124 (1<<
INP_BUTTON_STICK_PUSH
);

125 
key
 |
	`joy_gëBuâ⁄
(0);

128 
i
=0;i<32;i++)

130 
hñd
=
I≈
.hñd[
i
];

132 i‡(
key
&(1<<
i
)Ë
hñd
++; held=0;

136 
I≈
.
hñd
[
i
]=held;

140 
i
=0;i<32;i++)

142 
ªp
=0;

143 
hñd
=
I≈
.hñd[
i
];

145 i‡(
hñd
==1)

148 
ªp
=1;

154 i‡(
hñd
>=0x20)

156 
ª≥©Cou¡î
++;

157 if(
ª≥©Cou¡î
>15)

159 
ªp
=1;

160 
ª≥©Cou¡î
=0;

165 
I≈
.
ª≥©
[
i
]=
ªp
;

169 
	}
}

	@ioapi.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	~"zlib.h
"

14 
	~"iﬂpi.h
"

20 #i‚de‡
SEEK_CUR


21 
	#SEEK_CUR
 1

	)

24 #i‚de‡
SEEK_END


25 
	#SEEK_END
 2

	)

28 #i‚de‡
SEEK_SET


29 
	#SEEK_SET
 0

	)

32 
voidpf
 
ZCALLBACK
 
f›í_fûe_func
 
OF
((

33 
voidpf
 
›aque
,

34 c⁄° * 
fûíame
,

35 
mode
));

37 
uL⁄g
 
ZCALLBACK
 
‰ód_fûe_func
 
OF
((

38 
voidpf
 
›aque
,

39 
voidpf
 
°ªam
,

40 * 
buf
,

41 
uL⁄g
 
size
));

43 
uL⁄g
 
ZCALLBACK
 
fwrôe_fûe_func
 
OF
((

44 
voidpf
 
›aque
,

45 
voidpf
 
°ªam
,

46 c⁄° * 
buf
,

47 
uL⁄g
 
size
));

49 
ZCALLBACK
 
·ñl_fûe_func
 
OF
((

50 
voidpf
 
›aque
,

51 
voidpf
 
°ªam
));

53 
ZCALLBACK
 
f£ek_fûe_func
 
OF
((

54 
voidpf
 
›aque
,

55 
voidpf
 
°ªam
,

56 
uL⁄g
 
off£t
,

57 
‹igö
));

59 
ZCALLBACK
 
f˛o£_fûe_func
 
OF
((

60 
voidpf
 
›aque
,

61 
voidpf
 
°ªam
));

63 
ZCALLBACK
 
„º‹_fûe_func
 
OF
((

64 
voidpf
 
›aque
,

65 
voidpf
 
°ªam
));

68 
voidpf
 
ZCALLBACK
 
	$f›í_fûe_func
 (
›aque
, 
fûíame
, 
mode
)

69 
voidpf
 
›aque
;

70 c⁄° * 
fûíame
;

71 
mode
;

73 
FILE
* 
fûe
 = 
NULL
;

74 c⁄° * 
mode_f›í
 = 
NULL
;

75 i‡((
mode
 & 
ZLIB_FILEFUNC_MODE_READWRITEFILTER
)==
ZLIB_FILEFUNC_MODE_READ
)

76 
mode_f›í
 = "rb";

78 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_EXISTING
)

79 
mode_f›í
 = "r+b";

81 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_CREATE
)

82 
mode_f›í
 = "wb";

84 i‡((
fûíame
!=
NULL
Ë&& (
mode_f›í
 != NULL))

85 
fûe
 = 
	`f›í
(
fûíame
, 
mode_f›í
);

86  
fûe
;

87 
	}
}

90 
uL⁄g
 
ZCALLBACK
 
	$‰ód_fûe_func
 (
›aque
, 
°ªam
, 
buf
, 
size
)

91 
voidpf
 
›aque
;

92 
voidpf
 
°ªam
;

93 * 
buf
;

94 
uL⁄g
 
size
;

96 
uL⁄g
 
ªt
;

97 
ªt
 = (
uL⁄g
)
	`‰ód
(
buf
, 1, (
size_t
)
size
, (
FILE
 *)
°ªam
);

98  
ªt
;

99 
	}
}

102 
uL⁄g
 
ZCALLBACK
 
	$fwrôe_fûe_func
 (
›aque
, 
°ªam
, 
buf
, 
size
)

103 
voidpf
 
›aque
;

104 
voidpf
 
°ªam
;

105 c⁄° * 
buf
;

106 
uL⁄g
 
size
;

108 
uL⁄g
 
ªt
;

109 
ªt
 = (
uL⁄g
)
	`fwrôe
(
buf
, 1, (
size_t
)
size
, (
FILE
 *)
°ªam
);

110  
ªt
;

111 
	}
}

113 
ZCALLBACK
 
	$·ñl_fûe_func
 (
›aque
, 
°ªam
)

114 
voidpf
 
›aque
;

115 
voidpf
 
°ªam
;

117 
ªt
;

118 
ªt
 = 
	`·ñl
((
FILE
 *)
°ªam
);

119  
ªt
;

120 
	}
}

122 
ZCALLBACK
 
	$f£ek_fûe_func
 (
›aque
, 
°ªam
, 
off£t
, 
‹igö
)

123 
voidpf
 
›aque
;

124 
voidpf
 
°ªam
;

125 
uL⁄g
 
off£t
;

126 
‹igö
;

128 
f£ek_‹igö
=0;

129 
ªt
;

130 
‹igö
)

132 
ZLIB_FILEFUNC_SEEK_CUR
 :

133 
f£ek_‹igö
 = 
SEEK_CUR
;

135 
ZLIB_FILEFUNC_SEEK_END
 :

136 
f£ek_‹igö
 = 
SEEK_END
;

138 
ZLIB_FILEFUNC_SEEK_SET
 :

139 
f£ek_‹igö
 = 
SEEK_SET
;

143 
ªt
 = 0;

144 
	`f£ek
((
FILE
 *)
°ªam
, 
off£t
, 
f£ek_‹igö
);

145  
ªt
;

146 
	}
}

148 
ZCALLBACK
 
	$f˛o£_fûe_func
 (
›aque
, 
°ªam
)

149 
voidpf
 
›aque
;

150 
voidpf
 
°ªam
;

152 
ªt
;

153 
ªt
 = 
	`f˛o£
((
FILE
 *)
°ªam
);

154  
ªt
;

155 
	}
}

157 
ZCALLBACK
 
	$„º‹_fûe_func
 (
›aque
, 
°ªam
)

158 
voidpf
 
›aque
;

159 
voidpf
 
°ªam
;

161 
ªt
;

162 
ªt
 = 
	`„º‹
((
FILE
 *)
°ªam
);

163  
ªt
;

164 
	}
}

166 
	$fûl_f›í_fûefunc
 (
pzlib_fûefunc_def
)

167 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

169 
pzlib_fûefunc_def
->
z›í_fûe
 = 
f›í_fûe_func
;

170 
pzlib_fûefunc_def
->
zªad_fûe
 = 
‰ód_fûe_func
;

171 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
fwrôe_fûe_func
;

172 
pzlib_fûefunc_def
->
zãŒ_fûe
 = 
·ñl_fûe_func
;

173 
pzlib_fûefunc_def
->
z£ek_fûe
 = 
f£ek_fûe_func
;

174 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
f˛o£_fûe_func
;

175 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
„º‹_fûe_func
;

176 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

177 
	}
}

	@ioapi.h

9 #i‚de‡
_ZLIBIOAPI_H


10 
	#_ZLIBIOAPI_H


	)

13 
	#ZLIB_FILEFUNC_SEEK_CUR
 (1)

	)

14 
	#ZLIB_FILEFUNC_SEEK_END
 (2)

	)

15 
	#ZLIB_FILEFUNC_SEEK_SET
 (0)

	)

17 
	#ZLIB_FILEFUNC_MODE_READ
 (1)

	)

18 
	#ZLIB_FILEFUNC_MODE_WRITE
 (2)

	)

19 
	#ZLIB_FILEFUNC_MODE_READWRITEFILTER
 (3)

	)

21 
	#ZLIB_FILEFUNC_MODE_EXISTING
 (4)

	)

22 
	#ZLIB_FILEFUNC_MODE_CREATE
 (8)

	)

25 #i‚de‡
ZCALLBACK


27 #i‡(
deföed
(
WIN32
Ë|| deföed (
WINDOWS
Ë|| deföed (
_WINDOWS
)Ë&& deföed(
CALLBACK
Ë&& deföed (
USEWINDOWS_CALLBACK
)

28 
	#ZCALLBACK
 
CALLBACK


	)

30 
	#ZCALLBACK


	)

34 #ifde‡
__˝lu•lus


38 
voidpf
 (
	tZCALLBACK
 *
	t›í_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, c⁄° * 
	tfûíame
, 
	tmode
));

39 
uL⁄g
 (
	tZCALLBACK
 *
	tªad_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, * 
	tbuf
, 
	tuL⁄g
 
	tsize
));

40 
uL⁄g
 (
	tZCALLBACK
 *
	twrôe_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, c⁄° * 
	tbuf
, 
	tuL⁄g
 
	tsize
));

41 (
ZCALLBACK
 *
	tãŒ_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

42 (
ZCALLBACK
 *
	t£ek_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, 
	tuL⁄g
 
	toff£t
, 
	t‹igö
));

43 (
ZCALLBACK
 *
	t˛o£_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

44 (
ZCALLBACK
 *
	tã°îr‹_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

46 
	szlib_fûefunc_def_s


48 
›í_fûe_func
 
z›í_fûe
;

49 
ªad_fûe_func
 
zªad_fûe
;

50 
wrôe_fûe_func
 
zwrôe_fûe
;

51 
ãŒ_fûe_func
 
zãŒ_fûe
;

52 
£ek_fûe_func
 
z£ek_fûe
;

53 
˛o£_fûe_func
 
z˛o£_fûe
;

54 
ã°îr‹_fûe_func
 
zîr‹_fûe
;

55 
voidpf
 
›aque
;

56 } 
	tzlib_fûefunc_def
;

60 
fûl_f›í_fûefunc
 
OF
((
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

62 
	#ZREAD
(
fûefunc
,
fûe°ªam
,
buf
,
size
Ë((*((fûefunc).
zªad_fûe
))((fûefunc).
›aque
,fûe°ªam,buf,size))

	)

63 
	#ZWRITE
(
fûefunc
,
fûe°ªam
,
buf
,
size
Ë((*((fûefunc).
zwrôe_fûe
))((fûefunc).
›aque
,fûe°ªam,buf,size))

	)

64 
	#ZTELL
(
fûefunc
,
fûe°ªam
Ë((*((fûefunc).
zãŒ_fûe
))((fûefunc).
›aque
,fûe°ªam))

	)

65 
	#ZSEEK
(
fûefunc
,
fûe°ªam
,
pos
,
mode
Ë((*((fûefunc).
z£ek_fûe
))((fûefunc).
›aque
,fûe°ªam,pos,mode))

	)

66 
	#ZCLOSE
(
fûefunc
,
fûe°ªam
Ë((*((fûefunc).
z˛o£_fûe
))((fûefunc).
›aque
,fûe°ªam))

	)

67 
	#ZERROR
(
fûefunc
,
fûe°ªam
Ë((*((fûefunc).
zîr‹_fûe
))((fûefunc).
›aque
,fûe°ªam))

	)

70 #ifde‡
__˝lu•lus


	@keycodes.h

41 
	#SCANCODE_K
 167

	)

42 
	#SCANCODE_ESC
 197

	)

43 
	#SCANCODE_CURSORBLOCKRIGHT
 175

	)

44 
	#SCANCODE_CURSORBLOCKLEFT
 173

	)

45 
	#SCANCODE_CURSORBLOCKUP
 190

	)

46 
	#SCANCODE_CURSORBLOCKDOWN
 158

	)

47 
	#SCANCODE_H
 165

	)

48 
	#SCANCODE_N
 182

	)

49 
	#SCANCODE_J
 166

	)

50 
	#SCANCODE_U
 150

	)

51 
	#SCANCODE_ENTER
 196

	)

52 
	#SCANCODE_SPACE
 192

	)

53 
	#SCANCODE_A
 160

	)

54 
	#SCANCODE_V
 180

	)

55 
	#SCANCODE_Q
 144

	)

56 
	#SCANCODE_Z
 149

	)

57 
	#SCANCODE_B
 181

	)

58 
	#SCANCODE_W
 145

	)

59 
	#SCANCODE_S
 161

	)

60 
	#SCANCODE_M
 183

	)

61 
	#SCANCODE_E
 146

	)

62 
	#SCANCODE_X
 178

	)

63 
	#SCANCODE_COMMA
 184

	)

64 
	#SCANCODE_R
 147

	)

65 
	#SCANCODE_D
 162

	)

66 
	#SCANCODE_PERIOD
 185

	)

67 
	#SCANCODE_T
 148

	)

68 
	#SCANCODE_C
 179

	)

69 
	#SCANCODE_SLASH
 186

	)

70 
	#SCANCODE_Y
 177

	)

71 
	#SCANCODE_CURSORRIGHT
 206

	)

72 
	#SCANCODE_CURSORLEFT
 207

	)

73 
	#SCANCODE_CURSORDOWN
 205

	)

74 
	#SCANCODE_CURSORUP
 204

	)

75 
	#SCANCODE_KEYPADENTER
 195

	)

76 
	#SCANCODE_KEYPADPLUS
 222

	)

77 
	#SCANCODE_INSERT
 143

	)

78 
	#SCANCODE_REMOVE
 188

	)

79 
	#SCANCODE_HOME
 189

	)

80 
	#SCANCODE_END
 157

	)

81 
	#SCANCODE_PAGEUP
 191

	)

82 
	#SCANCODE_PAGEDOWN
 159

	)

83 
	#SCANCODE_0
 138

	)

84 
	#SCANCODE_1
 129

	)

85 
	#SCANCODE_2
 130

	)

86 
	#SCANCODE_3
 131

	)

87 
	#SCANCODE_4
 132

	)

88 
	#SCANCODE_5
 133

	)

89 
	#SCANCODE_6
 134

	)

90 
	#SCANCODE_7
 135

	)

91 
	#SCANCODE_8
 136

	)

92 
	#SCANCODE_9
 137

	)

93 
	#SCANCODE_BACKSPACE
 193

	)

94 
	#SCANCODE_F1
 208

	)

95 
	#SCANCODE_F2
 209

	)

96 
	#SCANCODE_F3
 210

	)

97 
	#SCANCODE_F4
 211

	)

98 
	#SCANCODE_F5
 212

	)

99 
	#SCANCODE_F6
 213

	)

100 
	#SCANCODE_F7
 214

	)

101 
	#SCANCODE_F8
 215

	)

102 
	#SCANCODE_F9
 216

	)

103 
	#SCANCODE_F10
 217

	)

104 
	#SCANCODE_F11
 198

	)

105 
	#SCANCODE_F12
 223

	)

106 
	#SCANCODE_P
 153

	)

107 
	#SCANCODE_LESSER
 176

	)

108 
	#SCANCODE_PLUS
 155

	)

	@language.h

92 
	#WINDOW_TITLE
 "S√s9X v%†f‹ Wödows(NK Cu°om)"

	)

94 
	#MY_REG_KEY
 "So·w¨e\\Emuœt‹s\\S√s9X"

	)

96 
	#REG_KEY_VER
 "1.31"

	)

98 
	#DISCLAIMER_TEXT
 "S√s9X v%†f‹ Wödows.\r\n" \

	)

110 
	#APP_NAME
 "S√s9x"

	)

112 
	#SNES9X_INFO
 "S√s9x: Inf‹m©i⁄"

	)

113 
	#SNES9X_WARN
 "S√s9x: WARNING!"

	)

114 
	#SNES9X_DXS
 "S√s9X: Dúe˘Sound"

	)

115 
	#SNES9X_SNDQ
 "S√s9X: Sound CPU Que°i⁄"

	)

116 
	#SNES9X_NP_ERROR
 "S√s9X: NëPœy Eº‹"

	)

117 
	#BUTTON_OK
 "&OK"

	)

118 
	#BUTTON_CANCEL
 "&C™˚l"

	)

121 
	#INPUTCONFIG_TITLE
 "I≈uàC⁄figuøti⁄"

	)

122 
	#INPUTCONFIG_JPTOGGLE
 "E«bÀ"

	)

123 
	#INPUTCONFIG_DIAGTOGGLE
 "ToggÀ Düg⁄Æs"

	)

126 
	#INPUTCONFIG_JPCOMBO
 "Joy∑d #%d"

	)

127 
	#INPUTCONFIG_LABEL_UP
 "Up"

	)

128 
	#INPUTCONFIG_LABEL_DOWN
 "Down"

	)

129 
	#INPUTCONFIG_LABEL_LEFT
 "Le·"

	)

130 
	#INPUTCONFIG_LABEL_RIGHT
 "Right"

	)

131 
	#INPUTCONFIG_LABEL_A
 "A"

	)

132 
	#INPUTCONFIG_LABEL_B
 "B"

	)

133 
	#INPUTCONFIG_LABEL_X
 "X"

	)

134 
	#INPUTCONFIG_LABEL_Y
 "Y"

	)

135 
	#INPUTCONFIG_LABEL_L
 "L"

	)

136 
	#INPUTCONFIG_LABEL_R
 "R"

	)

137 
	#INPUTCONFIG_LABEL_START
 "Sèπ"

	)

138 
	#INPUTCONFIG_LABEL_SELECT
 "Sñe˘"

	)

139 
	#INPUTCONFIG_LABEL_UPLEFT
 "U∞Le·"

	)

140 
	#INPUTCONFIG_LABEL_UPRIGHT
 "U∞Right"

	)

141 
	#INPUTCONFIG_LABEL_DOWNRIGHT
 "Dow¿Right"

	)

142 
	#INPUTCONFIG_LABEL_DOWNLEFT
 "Dow¿Le·"

	)

143 
	#INPUTCONFIG_LABEL_BLUE
 "Bluêmón†thêcuºíàkey/buâ⁄ i†Æªady m≠≥d; Red món†ô'†®S√s9x/Wödow†ª£rved key."

	)

146 
	#GAMEDEVICE_JOYNUMPREFIX
 "(J%d)"

	)

147 
	#GAMEDEVICE_JOYBUTPREFIX
 "#[%d]"

	)

148 
	#GAMEDEVICE_XNEG
 "Le·"

	)

149 
	#GAMEDEVICE_XPOS
 "Right"

	)

150 
	#GAMEDEVICE_YPOS
 "Up"

	)

151 
	#GAMEDEVICE_YNEG
 "Down"

	)

152 
	#GAMEDEVICE_POVLEFT
 "POV Le·"

	)

153 
	#GAMEDEVICE_POVRIGHT
 "POV Right"

	)

154 
	#GAMEDEVICE_POVUP
 "POV Up"

	)

155 
	#GAMEDEVICE_POVDOWN
 "POV Down"

	)

156 
	#GAMEDEVICE_POVDNLEFT
 "POV D¿Le·"

	)

157 
	#GAMEDEVICE_POVDNRIGHT
 "POV D¿Right"

	)

158 
	#GAMEDEVICE_POVUPLEFT
 "POV U∞Le·"

	)

159 
	#GAMEDEVICE_POVUPRIGHT
 "POV U∞Right"

	)

160 
	#GAMEDEVICE_ZPOS
 "Z Up"

	)

161 
	#GAMEDEVICE_ZNEG
 "Z Down"

	)

162 
	#GAMEDEVICE_RPOS
 "R Up"

	)

163 
	#GAMEDEVICE_RNEG
 "R Down"

	)

164 
	#GAMEDEVICE_UPOS
 "U Up"

	)

165 
	#GAMEDEVICE_UNEG
 "U Down"

	)

166 
	#GAMEDEVICE_VPOS
 "V Up"

	)

167 
	#GAMEDEVICE_VNEG
 "V Down"

	)

168 
	#GAMEDEVICE_BUTTON
 "Buâ⁄ %d"

	)

171 
	#GAMEDEVICE_DISABLED
 "DißbÀd"

	)

174 
	#GAMEDEVICE_KEY
 "#%d"

	)

175 
	#GAMEDEVICE_NUMPADPREFIX
 "Num∑d-%c"

	)

176 
	#GAMEDEVICE_VK_TAB
 "Tab"

	)

177 
	#GAMEDEVICE_VK_BACK
 "Back•a˚"

	)

178 
	#GAMEDEVICE_VK_CLEAR
 "Dñëe"

	)

179 
	#GAMEDEVICE_VK_RETURN
 "E¡î"

	)

180 
	#GAMEDEVICE_VK_LSHIFT
 "LShi·"

	)

181 
	#GAMEDEVICE_VK_RSHIFT
 "RShi·"

	)

182 
	#GAMEDEVICE_VK_LCONTROL
 "LCTRL"

	)

183 
	#GAMEDEVICE_VK_RCONTROL
 "RCTRL"

	)

184 
	#GAMEDEVICE_VK_LMENU
 "LA…"

	)

185 
	#GAMEDEVICE_VK_RMENU
 "RA…"

	)

186 
	#GAMEDEVICE_VK_PAUSE
 "Pau£"

	)

187 
	#GAMEDEVICE_VK_CAPITAL
 "C≠¶ock"

	)

188 
	#GAMEDEVICE_VK_ESCAPE
 "DißbÀd"

	)

189 
	#GAMEDEVICE_VK_SPACE
 "S∑˚"

	)

190 
	#GAMEDEVICE_VK_PRIOR
 "PgUp"

	)

191 
	#GAMEDEVICE_VK_NEXT
 "PgDn"

	)

192 
	#GAMEDEVICE_VK_HOME
 "Home"

	)

193 
	#GAMEDEVICE_VK_END
 "End"

	)

194 
	#GAMEDEVICE_VK_LEFT
 "Le·"

	)

195 
	#GAMEDEVICE_VK_RIGHT
 "Right"

	)

196 
	#GAMEDEVICE_VK_UP
 "Up"

	)

197 
	#GAMEDEVICE_VK_DOWN
 "Down"

	)

198 
	#GAMEDEVICE_VK_SELECT
 "Sñe˘"

	)

199 
	#GAMEDEVICE_VK_PRINT
 "Pröt"

	)

200 
	#GAMEDEVICE_VK_EXECUTE
 "Execuã"

	)

201 
	#GAMEDEVICE_VK_SNAPSHOT
 "S«pShŸ"

	)

202 
	#GAMEDEVICE_VK_INSERT
 "In£π"

	)

203 
	#GAMEDEVICE_VK_DELETE
 "Dñëe"

	)

204 
	#GAMEDEVICE_VK_HELP
 "Hñp"

	)

205 
	#GAMEDEVICE_VK_LWIN
 "LWöKey"

	)

206 
	#GAMEDEVICE_VK_RWIN
 "RWöKey"

	)

207 
	#GAMEDEVICE_VK_APPS
 "AµKey"

	)

208 
	#GAMEDEVICE_VK_MULTIPLY
 "Num∑d *"

	)

209 
	#GAMEDEVICE_VK_ADD
 "Num∑d +"

	)

210 
	#GAMEDEVICE_VK_SEPARATOR
 "\\"

	)

211 
	#GAMEDEVICE_VK_OEM_1
 "Semi-Cﬁ⁄"

	)

212 
	#GAMEDEVICE_VK_OEM_7
 "Apo°r›he"

	)

213 
	#GAMEDEVICE_VK_OEM_COMMA
 "Comma"

	)

214 
	#GAMEDEVICE_VK_OEM_PERIOD
 "Pîiod"

	)

215 
	#GAMEDEVICE_VK_SUBTRACT
 "Num∑d -"

	)

216 
	#GAMEDEVICE_VK_DECIMAL
 "Num∑d ."

	)

217 
	#GAMEDEVICE_VK_DIVIDE
 "Num∑d /"

	)

218 
	#GAMEDEVICE_VK_NUMLOCK
 "Num-lock"

	)

219 
	#GAMEDEVICE_VK_SCROLL
 "S¸ﬁl-lock"

	)

223 
	#WINPROC_TURBOMODE_ON
 "TurbÿModêA˘iv©ed"

	)

224 
	#WINPROC_TURBOMODE_OFF
 "TurbÿModêDó˘iv©ed"

	)

225 
	#WINPROC_TURBOMODE_TEXT
 "TurbÿMode"

	)

226 
	#WINPROC_HDMA_TEXT
 "HDMAÉmuœti⁄"

	)

227 
	#WINPROC_BG1
 "BG#1"

	)

228 
	#WINPROC_BG2
 "BG#2"

	)

229 
	#WINPROC_BG3
 "BG#3"

	)

230 
	#WINPROC_BG4
 "BG#4"

	)

231 
	#WINPROC_SPRITES
 "S¥ôes"

	)

232 
	#WINPROC_PADSWAP
 "Joy∑d sw≠pög"

	)

233 
	#WINPROC_CONTROLERS0
 "Mu…ùœyî 5 o¿#0"

	)

234 
	#WINPROC_CONTROLERS1
 "Joy∑d o¿#0"

	)

235 
	#WINPROC_CONTROLERS2
 "Mou£ o¿#1"

	)

236 
	#WINPROC_CONTROLERS3
 "Mou£ o¿#0"

	)

237 
	#WINPROC_CONTROLERS4
 "Su≥rsc›ê⁄ #1"

	)

238 
	#WINPROC_CONTROLERS5
 "Ju°ifõ∏1 o¿#1"

	)

239 
	#WINPROC_CONTROLERS6
 "Ju°ifõ∏2 o¿#1"

	)

240 
	#WINPROC_BGHACK
 "BackgroundÜayîög hack"

	)

241 
	#WINPROC_MODE7INTER
 "Modê7 I¡îpﬁ©i⁄"

	)

242 
	#WINPROC_TRANSPARENCY
 "Tøn•¨ícyÉf„˘s"

	)

243 
	#WINPROC_CLIPWIN
 "Gøphi¯˛ù wödows"

	)

244 
	#WINPROC_PAUSE
 "Pau£"

	)

245 
	#WINPROC_EMUFRAMETIME
 "Emuœãd fømêtime: %dms"

	)

246 
	#WINPROC_AUTOSKIP
 "AutÿFømêSkù"

	)

247 
	#WINPROC_FRAMESKIP
 "Fømêskù: %d"

	)

248 
	#WINPROC_TURBO_R_ON
 "TurbÿR A˘iv©ed"

	)

249 
	#WINPROC_TURBO_R_OFF
 "TurbÿR Dó˘iv©ed"

	)

250 
	#WINPROC_TURBO_L_ON
 "TurbÿL A˘iv©ed"

	)

251 
	#WINPROC_TURBO_L_OFF
 "TurbÿL Dó˘iv©ed"

	)

252 
	#WINPROC_TURBO_X_ON
 "TurbÿX A˘iv©ed"

	)

253 
	#WINPROC_TURBO_X_OFF
 "TurbÿX Dó˘iv©ed"

	)

254 
	#WINPROC_TURBO_Y_ON
 "TurbÿY A˘iv©ed"

	)

255 
	#WINPROC_TURBO_Y_OFF
 "TurbÿY Dó˘iv©ed"

	)

256 
	#WINPROC_TURBO_A_ON
 "TurbÿA A˘iv©ed"

	)

257 
	#WINPROC_TURBO_A_OFF
 "TurbÿA Dó˘iv©ed"

	)

258 
	#WINPROC_TURBO_B_ON
 "TurbÿB A˘iv©ed"

	)

259 
	#WINPROC_TURBO_B_OFF
 "TurbÿB Dó˘iv©ed"

	)

260 
	#WINPROC_TURBO_SEL_ON
 "TurbÿSñe˘ A˘iv©ed"

	)

261 
	#WINPROC_TURBO_SEL_OFF
 "TurbÿSñe˘ Dó˘iv©ed"

	)

262 
	#WINPROC_TURBO_START_ON
 "TurbÿSèπ A˘iv©ed"

	)

263 
	#WINPROC_TURBO_START_OFF
 "TurbÿSèπ Dó˘iv©ed"

	)

264 
	#WINPROC_FILTER_RESTART
 "You wû»√edÅÿª°¨àS√s9x bef‹êthêouçuàimage\≈ro˚ssög o±i⁄ ch™gêwû»èkêef„˘."

	)

265 
	#WINPROC_DISCONNECT
 "Disc⁄√˘ fromÅhêNëPœy sîvî fú°."

	)

266 
	#WINPROC_NET_RESTART
 "You∏gamêwû»bêª£àa·îÅhêROM ha†bì¿£¡ duêto\nyou∏'Syn¯Usög Re£àGame' sëtög.\n\n"

	)

267 
	#WINPROC_INTERPOLATED_SND
 "I¡îpﬁ©ed sound"

	)

268 
	#WINPROC_SYNC_SND
 "Syn¯sound"

	)

269 
	#WINPROC_SND_OFF
 "DißblögÅhêsound CPUÉmuœti⁄ wû»hñ∞tÿim¥ove\√muœti⁄ s≥ed buàyou wû»nŸ hó∏™y soundÉf„˘s\n‹ music. I‡youÜ©î w™àtÿª-íabÀÅhêsound CPU\√muœti⁄ you wû»√edÅÿª£àyou∏gamêbef‹êô wûl\¡akêef„˘.\n\nAª you suªÅhi†i†wh© you w™t?"

	)

270 
	#WINPROC_SND_RESTART
 "You wû»√edÅÿª£àyou∏gamê‹ÜﬂdánŸhî o√\nbef‹êíablögÅhêsound CPU wû»èkêef„˘."

	)

274 
	#EMUSET_TITLE
 "Emuœti⁄ Sëtögs"

	)

275 
	#EMUSET_LABEL_FREEZE
 "FªezêFﬁdî Dúe˘‹y"

	)

276 
	#EMUSET_BROWSE
 "&Brow£..."

	)

277 
	#EMUSET_LABEL_ASRAM
 "Auto-SavêS-RAM"

	)

278 
	#EMUSET_LABEL_ASRAM_TEXT
 "£c⁄d†a·îÜa° ch™gê(0 dißbÀ†auto-ßve)"

	)

279 
	#EMUSET_LABEL_SMAX
 "Skùáàmo°"

	)

280 
	#EMUSET_LABEL_SMAX_TEXT
 "‰ame†öáuto-‰amêøã mode"

	)

281 
	#EMUSET_LABEL_STURBO
 "Skù Rídîög"

	)

282 
	#EMUSET_LABEL_STURBO_TEXT
 "‰ame†ö Turbÿmode"

	)

283 
	#EMUSET_TOGGLE_TURBO
 "Tab ToggÀ†Turbo"

	)

287 
	#NPOPT_TITLE
 "Në∂ay O±i⁄s"

	)

288 
	#NPOPT_LABEL_PORTNUM
 "Sockë P‹àNumbî"

	)

289 
	#NPOPT_LABEL_PAUSEINTERVAL
 "Ask SîvîÅÿPau£ whí"

	)

290 
	#NPOPT_LABEL_PAUSEINTERVAL_TEXT
 "‰ame†behöd"

	)

291 
	#NPOPT_LABEL_MAXSKIP
 "Maximum FømêR©êSkù"

	)

292 
	#NPOPT_SYNCBYRESET
 "Syn¯By Re£t"

	)

293 
	#NPOPT_SENDROM
 "Síd ROM ImagêtÿClõ¡ o¿C⁄√˘"

	)

294 
	#NPOPT_ACTASSERVER
 "A˘ A†Sîvî"

	)

295 
	#NPOPT_PORTNUMBLOCK
 "P‹àSëtögs"

	)

296 
	#NPOPT_CLIENTSETTINGSBLOCK
 "Clõ¡ Sëtögs"

	)

297 
	#NPOPT_SERVERSETTINGSBLOCK
 "Sîvî Sëtögs"

	)

302 
	#NPCON_TITLE
 "C⁄√˘ÅÿSîvî"

	)

303 
	#NPCON_LABEL_SERVERADDY
 "Sîvî Addªss"

	)

304 
	#NPCON_LABEL_PORTNUM
 "P‹àNumbî"

	)

305 
	#NPCON_CLEARHISTORY
 "CÀ¨ Hi°‹y"

	)

310 
	#MOVIE_INFO_REPLAY
 "MovõÑïœy"

	)

311 
	#MOVIE_INFO_RECORD
 "MovõÑec‹d"

	)

312 
	#MOVIE_INFO_RERECORD
 "MovõÑe-ªc‹d"

	)

313 
	#MOVIE_INFO_REWIND
 "MovõÑewöd"

	)

314 
	#MOVIE_INFO_STOP
 "Movõ st›"

	)

315 
	#MOVIE_INFO_END
 "MovõÉnd"

	)

316 
	#MOVIE_INFO_RECORDING_ENABLED
 "Rec‹dögÉ«bÀd"

	)

317 
	#MOVIE_INFO_RECORDING_DISABLED
 "Rec‹dög dißbÀd"

	)

318 
	#MOVIE_ERR_SNAPSHOT_WRONG_MOVIE
 "S«pshŸÇŸ fromÅhi†movõ"

	)

319 
	#MOVIE_ERR_SNAPSHOT_NOT_MOVIE
 "NŸá movõ s«pshŸ"

	)

320 
	#MOVIE_ERR_COULD_NOT_OPEN
 "CouldÇŸ o≥¿movõ fûe."

	)

321 
	#MOVIE_ERR_NOT_FOUND
 "FûênŸ found."

	)

322 
	#MOVIE_ERR_WRONG_FORMAT
 "Fûêi†wr⁄g f‹m©."

	)

323 
	#MOVIE_ERR_WRONG_VERSION
 "Fûêi†wr⁄g vîsi⁄."

	)

328 
	#AVI_CONFIGURATION_CHANGED
 "AVIÑec‹dög st›≥d (c⁄figuøti⁄ sëtög†ch™ged)."

	)

	@loadzip.cpp

42 
	~"p‹t.h
"

44 #ifde‡
UNZIP_SUPPORT


50 
	~<°rög.h
>

51 
	~<˘y≥.h
>

53 #i‚de‡
NO_INLINE_SET_GET


54 
	#NO_INLINE_SET_GET


	)

57 
	~"¢es9x.h
"

58 
	~"memm≠.h
"

60 
	~"unzù.h
"

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

65 
boﬁ8
 
	$LﬂdZù
(c⁄° * 
zù«me
,

66 
öt32
 *
TŸÆFûeSize
,

67 
öt32
 *
hódîs
)

69 *
TŸÆFûeSize
 = 0;

70 *
hódîs
 = 0;

72 
unzFûe
 
fûe
 = 
	`unzO≥n
(
zù«me
);

73 if(
fûe
 =
NULL
)

74  (
FALSE
);

78 
fûíame
[132];

79 
fûesize
 = 0;

80 
p‹t
 = 
	`unzGoToFú°Fûe
(
fûe
);

81 
unz_fûe_öfo
 
öfo
;

82 
p‹t
 =
UNZ_OK
)

84 
«me
[132];

85 
	`unzGëCuºítFûeInfo
(
fûe
, &
öfo
, 
«me
,128, 
NULL
,0, NULL,0);

88 
ˇlc_size
 = 
öfo
.
uncom¥es£d_size
 / 0x2000;

89 
ˇlc_size
 *= 0x2000;

90 if(!(
öfo
.
uncom¥es£d_size
 - 
ˇlc_size
 == 512 || info.uncompressed_size == calc_size))

92 
p‹t
 = 
	`unzGoToNextFûe
(
fûe
);

97 if(
öfo
.
uncom¥es£d_size
 > (
CMem‹y
::
MAX_ROM_SIZE
 + 512))

99 
p‹t
 = 
	`unzGoToNextFûe
(
fûe
);

103 i‡((Ë
öfo
.
uncom¥es£d_size
 > 
fûesize
)

105 
	`°r˝y
(
fûíame
,
«me
);

106 
fûesize
 = 
öfo
.
uncom¥es£d_size
;

108 
Àn
 = 
	`°æí
(
«me
);

109 if(
«me
[
Àn
-2] == '.' &&Çame[len-1] == '1')

111 
	`°r˝y
(
fûíame
,
«me
);

112 
fûesize
 = 
öfo
.
uncom¥es£d_size
;

115 
p‹t
 = 
	`unzGoToNextFûe
(
fûe
);

117 if–!(
p‹t
 =
UNZ_END_OF_LIST_OF_FILE
 ||Ö‹à=
UNZ_OK
Ë|| 
fûesize
 == 0)

119 
	`unzClo£
(
fûe
);

120  (
FALSE
);

124 
tmp
[2];

125 
tmp
[0] =Åmp[1] = 0;

126 *
ext
 = 
	`°ºchr
(
fûíame
,'.');

127 if(
ext
)Éxt++;

128 
ext
 = 
tmp
;

130 
uöt8
 *
±r
 = 
Mem‹y
.
ROM
;

131 
boﬁ8
 
m‹e
 = 
FALSE
;

133 
	`unzLoˇãFûe
(
fûe
,
fûíame
,1);

134 
	`unzGëCuºítFûeInfo
(
fûe
, &
öfo
, 
fûíame
,128, 
NULL
,0, NULL,0);

136 if–
	`unzO≥nCuºítFûe
(
fûe
Ë!
UNZ_OK
 )

138 
	`unzClo£
(
fûe
);

139  (
FALSE
);

145 
FûeSize
 = 
öfo
.
uncom¥es£d_size
;

147 
ˇlc_size
 = 
FûeSize
 / 0x2000;

148 
ˇlc_size
 *= 0x2000;

150 
l
 = 
	`unzRódCuºítFûe
(
fûe
,
±r
,
FûeSize
);

151 if(
	`unzClo£CuºítFûe
(
fûe
Ë=
UNZ_CRCERROR
)

153 
	`unzClo£
(
fûe
);

154  (
FALSE
);

157 if(
l
 <0 ||Ü !
FûeSize
)

159 
	`unzClo£
(
fûe
);

160 
l
)

162 
UNZ_ERRNO
:

164 
UNZ_EOF
:

166 
UNZ_PARAMERROR
:

168 
UNZ_BADZIPFILE
:

170 
UNZ_INTERNALERROR
:

172 
UNZ_CRCERROR
:

175  (
FALSE
);

178 i‡((
FûeSize
 - 
ˇlc_size
 =512 && !
Sëtögs
.
F‹˚NoHódî
) ||

179 
Sëtögs
.
F‹˚Hódî
)

181 
	`memmove
 (
±r
,Öå + 512, 
ˇlc_size
);

182 (*
hódîs
)++;

183 
FûeSize
 -= 512;

185 
±r
 +
FûeSize
;

186 (*
TŸÆFûeSize
Ë+
FûeSize
;

188 
Àn
;

189 i‡(
±r
 - 
Mem‹y
.
ROM
 < 
CMem‹y
::
MAX_ROM_SIZE
 + 0x200 &&

190 (
	`isdigô
 (
ext
 [0]) &&Éxt [1] == 0 &&Éxt [0] < '9'))

192 
m‹e
 = 
TRUE
;

193 
ext
 [0]++;

195 i‡(
±r
 - 
Mem‹y
.
ROM
 < 
CMem‹y
::
MAX_ROM_SIZE
 + 0x200 &&

196 (((
Àn
 = 
	`°æí
 (
fûíame
)) == 7 ||Üen == 8) &&

197 
	`°∫ˇ£cmp
 (
fûíame
, "sf", 2) == 0 &&

198 
	`isdigô
 (
fûíame
 [2]) && isdigit (filename [3]) && isdigit (filename [4]) &&

199 
	`isdigô
 (
fûíame
 [5]Ë&& 
	`ißÕha
 (fûíamê[
Àn
 - 1])))

201 
m‹e
 = 
TRUE
;

202 
fûíame
 [
Àn
 - 1]++;

205 
m‹e
 = 
FALSE
;

207 if(
m‹e
)

209 if–
	`unzLoˇãFûe
(
fûe
,
fûíame
,1Ë!
UNZ_OK
 ||

210 
	`unzGëCuºítFûeInfo
(
fûe
, &
öfo
, 
fûíame
,128, 
NULL
,0, NULL,0Ë!
UNZ_OK
 ||

211 
	`unzO≥nCuºítFûe
(
fûe
Ë!
UNZ_OK
)

215 } 
m‹e
);

217 
	`unzClo£
(
fûe
);

218  (
TRUE
);

219 
	}
}

	@main.cpp

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<sys/°©.h
>

7 
	~<dúít.h
>

8 
	~<î∫o.h
>

9 
	~<zlib.h
>

10 
	~"unzù.h
"

11 
	~"zù.h
"

13 #ifde‡
__GIZ__


14 
	#TIMER_1_SECOND
 1000

	)

15 
	~<uni°d.h
>

16 
	~<w32≠i/GizSdk/Fømew‹kAudio.h
>

17 
	~"giz_sdk.h
"

20 #ifde‡
__GP2X__


21 
	#TIMER_1_SECOND
 1000000

	)

22 
	~"gp2x_sdk.h
"

23 
	~"squidgehack.h
"

26 
	~"míu.h
"

27 
	~"¢es9x.h
"

28 
	~"memm≠.h
"

29 
	~"≠u.h
"

30 
	~"gfx.h
"

31 
	~"soundux.h
"

32 
	~"¢≠shŸ.h
"

35 
	#EMUVERSION
 "SquidgeSNES V0.37 01-Jun-06"

	)

39 #ifde‡
__GP2X__


40 "C" 
joy_Cou¡
();

41 "C" 
I≈utClo£
();

42 "C" 
joy_gëBuâ⁄
(
joyNumbî
);

45 
	ggamm©ab
[10][32]={

68 
öt32
 
	ggp32_Á°mode
 = 1;

69 
	ggp32_8bômode
 = 0;

70 
öt32
 
	ggp32_ShowSub
 = 0;

71 
	ggp32_Á°•rôe
 = 1;

72 
	ggp32_gammavÆue
 = 0;

73 
	gsquidgëønshack
 = 0;

74 
	gglobexô
 = 0;

75 
	g¢dvﬁL
, 
	g¢dvﬁR
;

76 
	gÂs_di•œy
[256];

77 
	gßm∂ecou¡
=0;

78 
	gíãrMíu
 = 0;

79 *
	gcuºítFømeBuf„r
;

80 
öt16
 
	gﬁdHeight
 = 0;

82 
	$S9xCom∑ªSDD1IndexE¡rõs
 (c⁄° *
p1
, c⁄° *
p2
)

84  (*(
uöt32
 *Ë
p1
 - *(uöt32 *Ë
p2
);

85 
	}
}

87 
	$S9xExô
 ()

89 
	}
}

90 
	$S9xGíî©eSound
 ()

92 
	`S9xMesßge
 (0,0,"generate sound");

94 
	}
}

98 
S9xSëPÆëã
 ()

103 
S9xExåaUßge
 ()

107 
S9xP¨£Arg
 (**
¨gv
, &
ödex
, 
¨gc
)

111 
boﬁ8
 
S9xO≥nS«pshŸFûe
 (c⁄° *
‚ame
, boﬁ8 
ªad_⁄ly
, 
STREAM
 *
fûe
)

113 i‡(
ªad_⁄ly
)

115 i‡(*
fûe
 = 
OPEN_STREAM
(
‚ame
,"rb"))

116 (
TRUE
);

120 i‡(*
fûe
 = 
OPEN_STREAM
(
‚ame
,"w+b"))

121 (
TRUE
);

124  (
FALSE
);

127 
S9xClo£S«pshŸFûe
 (
STREAM
 
fûe
)

129 
CLOSE_STREAM
(
fûe
);

132 
S9xMesßge
 (, , c⁄° *
mesßge
)

134 
¥ötf
 ("%s\n", 
mesßge
);

137 
îk
 ()

139 
S9xMesßge
 (0,0, "Erk!");

142 *
osd_GëPackDú
()

144 
S9xMesßge
 (0,0,"getÖack dir");

148 c⁄° *
S9xGëS«pshŸDúe˘‹y
()

150 
S9xMesßge
 (0,0,"get snapshot dir");

154 
S9xLﬂdSDD1D©a
 ()

156 
fûíame
 [
_MAX_PATH
 + 1];

157 
ödex
 [
_MAX_PATH
 + 1];

158 
d©a
 [
_MAX_PATH
 + 1];

159 
∑tch
 [
_MAX_PATH
 + 1];

160 
ãxt
[256];

163 
Sëtögs
.
SDD1Pack
=
TRUE
;

164 
Mem‹y
.
FªeSDD1D©a
();

166 
gp_˛órFømebuf„r16
(
‰amebuf„r16
[
cuºFB
],0x0);

167 
•rötf
(
ãxt
,"Loading SDD1Öack...");

168 
gp_døwSåög
(0,0,
°æí
(
ãxt
),ãxt,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

169 
MíuFlù
();

170 
°r˝y
 (
fûíame
, 
romDú
);

172 i‡(
°∫cmp
 (
Mem‹y
.
ROMName
, "Star Ocean", 10) == 0)

173 
°rˇt
 (
fûíame
, "/socnsdd1");

175 
°rˇt
 (
fûíame
, "/sfa2sdd1");

177 
DIR
 *
dú
 = 
›ídú
 (
fûíame
);

179 
ödex
 [0] = 0;

180 
d©a
 [0] = 0;

181 
∑tch
 [0] = 0;

184 i‡(
dú
)

186 
dúít
 *
d
;

188 (
d
 = 
ªaddú
 (
dú
)))

191 i‡(
°rˇ£cmp
 (
d
->
d_«me
, "sdd1gfx.idx") == 0)

193 
°r˝y
 (
ödex
, 
fûíame
);

194 
°rˇt
 (
ödex
, "/");

195 
°rˇt
 (
ödex
, 
d
->
d_«me
);

199 i‡(
°rˇ£cmp
 (
d
->
d_«me
, "sdd1gfx.dat") == 0)

201 
°r˝y
 (
d©a
, 
fûíame
);

202 
°rˇt
 (
d©a
, "/");

203 
°rˇt
 (
d©a
, 
d
->
d_«me
);

206 i‡(
°rˇ£cmp
 (
d
->
d_«me
, "sdd1gfx.pat") == 0)

208 
°r˝y
 (
∑tch
, 
fûíame
);

209 
°rˇt
 (
∑tch
, "/");

210 
°rˇt
 (
∑tch
, 
d
->
d_«me
);

213 
˛o£dú
 (
dú
);

215 i‡(
°æí
 (
ödex
Ë&& såÀ¿(
d©a
))

217 
FILE
 *
fs
 = 
f›í
 (
ödex
, "rb");

218 
Àn
 = 0;

220 i‡(
fs
)

227 
f£ek
 (
fs
, 0, 
SEEK_END
);

228 
Àn
 = 
·ñl
 (
fs
);

229 
ªwöd
 (
fs
);

230 
Mem‹y
.
SDD1Index
 = (
uöt8
 *Ë
mÆloc
 (
Àn
);

231 
‰ód
 (
Mem‹y
.
SDD1Index
, 1, 
Àn
, 
fs
);

232 
f˛o£
 (
fs
);

233 
Mem‹y
.
SDD1E¡rõs
 = 
Àn
 / 12;

235 i‡(!(
fs
 = 
f›í
 (
d©a
, "rb")))

237 
‰ì
 ((*Ë
Mem‹y
.
SDD1Index
);

238 
Mem‹y
.
SDD1Index
 = 
NULL
;

239 
Mem‹y
.
SDD1E¡rõs
 = 0;

243 
f£ek
 (
fs
, 0, 
SEEK_END
);

244 
Àn
 = 
·ñl
 (
fs
);

245 
ªwöd
 (
fs
);

246 
Mem‹y
.
SDD1D©a
 = (
uöt8
 *Ë
mÆloc
 (
Àn
);

247 
‰ód
 (
Mem‹y
.
SDD1D©a
, 1, 
Àn
, 
fs
);

248 
f˛o£
 (
fs
);

250 i‡(
°æí
 (
∑tch
) > 0 &&

251 (
fs
 = 
f›í
 (
∑tch
, "rb")))

253 
f˛o£
 (
fs
);

255 #ifde‡
MSB_FIRST


258 
uöt8
 *
±r
 = 
Mem‹y
.
SDD1Index
;

259 
i
 = 0; i < 
Mem‹y
.
SDD1E¡rõs
; i++, 
±r
 += 12)

261 
SWAP_DWORD
 ((*(
uöt32
 *Ë(
±r
 + 0)));

262 
SWAP_DWORD
 ((*(
uöt32
 *Ë(
±r
 + 4)));

263 
SWAP_DWORD
 ((*(
uöt32
 *Ë(
±r
 + 8)));

266 
qs‹t
 (
Mem‹y
.
SDD1Index
, Mem‹y.
SDD1E¡rõs
, 12,

267 
S9xCom∑ªSDD1IndexE¡rõs
);

270 
Sëtögs
.
SDD1Pack
 = 
FALSE
;

276 
gp_˛órFømebuf„r16
(
‰amebuf„r16
[
cuºFB
],0x0);

277 
•rötf
(
ãxt
,"Decompressed dataÖackÇot found!");

278 
gp_døwSåög
(0,8,
°æí
(
ãxt
),ãxt,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

279 
MíuFlù
();

280 
MíuPau£
();

285 
boﬁ8_32
 
S9xInôUpd©e
 ()

287 
√edfskù
 = 0;

289 
cuºFB
++;

290 
cuºFB
&=3;

292 i‡(
¢esMíuO±i⁄s
.
ªndîMode
 =
RENDER_MODE_SCALED
)

293 
GFX
.
S¸ìn
 = (
uöt8
 *Ë
‰amebuf„r16
[
cuºFB
];

294 i‡(
PPU
.
S¸ìnHeight
 !
SNES_HEIGHT_EXTENDED
)

295 
GFX
.
S¸ìn
 = (
uöt8
 *Ë
‰amebuf„r16
[
cuºFB
]+ (640*8) + 64;

297 
GFX
.
S¸ìn
 = (
uöt8
 *Ë
‰amebuf„r16
[
cuºFB
]+ 64;

299  (
TRUE
);

302 
boﬁ8_32
 
S9xDeöôUpd©e
 (
Width
, 
Height
, bool8_32)

304 i‡(
¢esMíuO±i⁄s
.
showFps
)

306 *
pix
;

307 
pix
=(*)
‰amebuf„r16
[
cuºFB
];

308 
i
=8;i;i--)

310 *
pix
++ = 0x0;

311 *
pix
++ = 0x0;

312 *
pix
++ = 0x0;

313 *
pix
++ = 0x0;

314 *
pix
++ = 0x0;

315 *
pix
++ = 0x0;

316 *
pix
++ = 0x0;

317 *
pix
++ = 0x0;

318 *
pix
++ = 0x0;

319 *
pix
++ = 0x0;

320 *
pix
++ = 0x0;

321 *
pix
++ = 0x0;

322 *
pix
++ = 0x0;

323 *
pix
++ = 0x0;

324 *
pix
++ = 0x0;

325 *
pix
++ = 0x0;

326 *
pix
++ = 0x0;

327 *
pix
++ = 0x0;

328 *
pix
++ = 0x0;

329 *
pix
++ = 0x0;

330 *
pix
++ = 0x0;

331 *
pix
++ = 0x0;

332 *
pix
++ = 0x0;

333 *
pix
++ = 0x0;

334 *
pix
++ = 0x0;

335 *
pix
++ = 0x0;

336 *
pix
++ = 0x0;

337 *
pix
++ = 0x0;

338 *
pix
++ = 0x0;

339 *
pix
++ = 0x0;

340 *
pix
++ = 0x0;

341 *
pix
++ = 0x0;

342 
pix
+=128;

344 
gp_døwSåög
(0,0,
°æí
(
Âs_di•œy
),Âs_di•œy,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

346 i‡–
¢esMíuO±i⁄s
.
ªndîMode
 =
RENDER_MODE_SCALED
 && 
ﬁdHeight
!=
Height
)

348 
gp2x_video_RGB_£tsˇlög
(256,
Height
);

349 
ﬁdHeight
=
Height
;

352 
gp_£tFømebuf„r
(
cuºFB
,0);

355 c⁄° *
S9xGëFûíame
 (c⁄° *
ex
)

357 
fûíame
 [
PATH_MAX
 + 1];

358 
drive
 [
_MAX_DRIVE
 + 1];

359 
dú
 [
_MAX_DIR
 + 1];

360 
‚ame
 [
_MAX_FNAME
 + 1];

361 
ext
 [
_MAX_EXT
 + 1];

363 
_•lô∑th
 (
Mem‹y
.
ROMFûíame
, 
drive
, 
dú
, 
‚ame
, 
ext
);

364 
°r˝y
 (
fûíame
, 
S9xGëS«pshŸDúe˘‹y
 ());

365 
°rˇt
 (
fûíame
, 
SLASH_STR
);

366 
°rˇt
 (
fûíame
, 
‚ame
);

367 
°rˇt
 (
fûíame
, 
ex
);

369  (
fûíame
);

372 #ifde‡
__GIZ__


373 
uöt32
 
S9xRódJoy∑d
 (
which1
)

375 
uöt32
 
vÆ
=0x80000000;

377 i‡(
which1
 !0Ë 
vÆ
;

378 
joy
 = 
gp_gëBuâ⁄
(0);

380 i‡(
joy
 & (1<<
INP_BUTTON_REWIND
)Ë
vÆ
 |
SNES_Y_MASK
;

381 i‡(
joy
 & (1<<
INP_BUTTON_FORWARD
)Ë
vÆ
 |
SNES_A_MASK
;

382 i‡(
joy
 & (1<<
INP_BUTTON_PLAY
)Ë
vÆ
 |
SNES_B_MASK
;

383 i‡(
joy
 & (1<<
INP_BUTTON_STOP
)Ë
vÆ
 |
SNES_X_MASK
;

385 i‡(
joy
 & (1<<
INP_BUTTON_UP
)Ë
vÆ
 |
SNES_UP_MASK
;

386 i‡(
joy
 & (1<<
INP_BUTTON_DOWN
)Ë
vÆ
 |
SNES_DOWN_MASK
;

387 i‡(
joy
 & (1<<
INP_BUTTON_LEFT
)Ë
vÆ
 |
SNES_LEFT_MASK
;

388 i‡(
joy
 & (1<<
INP_BUTTON_RIGHT
)Ë
vÆ
 |
SNES_RIGHT_MASK
;

389 i‡(
joy
 & (1<<
INP_BUTTON_HOME
)Ë
vÆ
 |
SNES_START_MASK
;

390 i‡(
joy
 & (1<<
INP_BUTTON_VOL
)Ë
vÆ
 |
SNES_SELECT_MASK
;

391 i‡(
joy
 & (1<<
INP_BUTTON_L
)Ë
vÆ
 |
SNES_TL_MASK
;

392 i‡(
joy
 & (1<<
INP_BUTTON_R
)Ë
vÆ
 |
SNES_TR_MASK
;

394 i‡(
joy
 & (1<<
INP_BUTTON_BRIGHT
)Ë
íãrMíu
 = 1;

395  
vÆ
;

399 #ifde‡
__GP2X__


400 
uöt32
 
S9xRódJoy∑d
 (
which1
)

402 
uöt32
 
vÆ
=0x80000000;

403 
joy
 = 0;

405 i‡(
which1
 == 0)

407 
joy
 = 
gp_gëBuâ⁄
(1);

409 i‡(
joy
 >
joy_Cou¡
()Ë 
vÆ
;

411 
joy
 |
joy_gëBuâ⁄
(
which1
++);

413 i‡(
¢esMíuO±i⁄s
.
a˘i⁄Buâ⁄s
)

415 i‡(
joy
 & (1<<
INP_BUTTON_A
)Ë
vÆ
 |
SNES_Y_MASK
;

416 i‡(
joy
 & (1<<
INP_BUTTON_B
)Ë
vÆ
 |
SNES_A_MASK
;

417 i‡(
joy
 & (1<<
INP_BUTTON_X
)Ë
vÆ
 |
SNES_B_MASK
;

418 i‡(
joy
 & (1<<
INP_BUTTON_Y
)Ë
vÆ
 |
SNES_X_MASK
;

422 i‡(
joy
 & (1<<
INP_BUTTON_A
)Ë
vÆ
 |
SNES_A_MASK
;

423 i‡(
joy
 & (1<<
INP_BUTTON_B
)Ë
vÆ
 |
SNES_B_MASK
;

424 i‡(
joy
 & (1<<
INP_BUTTON_X
)Ë
vÆ
 |
SNES_X_MASK
;

425 i‡(
joy
 & (1<<
INP_BUTTON_Y
)Ë
vÆ
 |
SNES_Y_MASK
;

428 i‡(
joy
 & (1<<
INP_BUTTON_UP
)Ë
vÆ
 |
SNES_UP_MASK
;

429 i‡(
joy
 & (1<<
INP_BUTTON_DOWN
)Ë
vÆ
 |
SNES_DOWN_MASK
;

430 i‡(
joy
 & (1<<
INP_BUTTON_LEFT
)Ë
vÆ
 |
SNES_LEFT_MASK
;

431 i‡(
joy
 & (1<<
INP_BUTTON_RIGHT
)Ë
vÆ
 |
SNES_RIGHT_MASK
;

432 i‡(
joy
 & (1<<
INP_BUTTON_START
)Ë
vÆ
 |
SNES_START_MASK
;

433 i‡(
joy
 & (1<<
INP_BUTTON_L
)Ë
vÆ
 |
SNES_TL_MASK
;

434 i‡(
joy
 & (1<<
INP_BUTTON_R
)Ë
vÆ
 |
SNES_TR_MASK
;

436 i‡(
joy
 & (1<<
INP_BUTTON_SELECT
)Ë
vÆ
 |
SNES_SELECT_MASK
;

438 i‡((
joy
 & (1<<
INP_BUTTON_VOL_UP
)Ë&& (joy & (1<<
INP_BUTTON_VOL_DOWN
))Ë
íãrMíu
 = 1;

439 i‡(
joy
 & (1<<
INP_BUTTON_VOL_UP
))

441 
¢esMíuO±i⁄s
.
vﬁume
+=1;

442 if(
¢esMíuO±i⁄s
.
vﬁume
>100) snesMenuOptions.volume=100;

443 
gp2x_sound_vﬁume
(
¢esMíuO±i⁄s
.
vﬁume
,snesMenuOptions.volume);

445 i‡(
joy
 & (1<<
INP_BUTTON_VOL_DOWN
))

447 
¢esMíuO±i⁄s
.
vﬁume
-=1;

448 if(
¢esMíuO±i⁄s
.
vﬁume
>100) snesMenuOptions.volume=0;

449 
gp2x_sound_vﬁume
(
¢esMíuO±i⁄s
.
vﬁume
,snesMenuOptions.volume);

452  
vÆ
;

457 
boﬁ8
 
S9xRódMou£Posôi⁄
 (, & , & ,

458 
uöt32
 & )

460 
S9xMesßge
 (0,0,"read mouse");

461  (
FALSE
);

464 
boﬁ8
 
S9xRódSu≥rSc›ePosôi⁄
 (& , & ,

465 
uöt32
 & )

467 
S9xMesßge
 (0,0,"read scope");

468  (
FALSE
);

471 c⁄° *
S9xGëFûíameInc
 (c⁄° *
e
)

473 
S9xMesßge
 (0,0,"get filename inc");

474  
e
;

477 
S9xSyncS≥ed
()

482 c⁄° *
S9xBa£«me
 (c⁄° *
f
)

484 c⁄° *
p
;

486 
S9xMesßge
 (0,0,"s9x baseÇame");

488 i‡((
p
 = 
°ºchr
 (
f
, '/')Ë!
NULL
 || (p = strrchr (f, '\\')) != NULL)

489  (
p
 + 1);

491  (
f
);

497 
	$S9xAutoSaveSRAM
 ()

503 
	}
}

505 
	$S9xLﬂdSRAM
 ()

507 
∑th
[
MAX_PATH
];

509 
	`•rötf
(
∑th
,"%s%s%s",
¢esSømDú
,
DIR_SEP
,
	`S9xGëFûíame
 (".srm"));

510 
Mem‹y
.
	`LﬂdSRAM
 (
∑th
);

511 
	}
}

513 
	$S9xSaveSRAM
 ()

515 
∑th
[
MAX_PATH
];

517 i‡(
CPU
.
SRAMModifõd
)

519 
	`•rötf
(
∑th
,"%s%s%s",
¢esSømDú
,
DIR_SEP
,
	`S9xGëFûíame
 (".srm"));

520 
Mem‹y
.
	`SaveSRAM
 (
∑th
);

521 
	`sync
();

523 
	}
}

525 
boﬁ
 
	$Ju°ifõrOffs¸ìn
()

527  
Ál£
;

528 
	}
}

530 
	$Ju°ifõrBuâ⁄s
(
uöt32
& 
ju°ifõrs
)

532 
	}
}

534 
	$S√sRomLﬂd
()

536 
fûíame
[
MAX_PATH
+1];

537 
check
;

538 
ãxt
[256];

539 
FILE
 *
°ªam
=
NULL
;

541 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[
cuºFB
],0x0);

542 
	`•rötf
(
ãxt
,"Loading Rom...");

543 
	`gp_døwSåög
(0,0,
	`°æí
(
ãxt
),ãxt,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

544 
	`MíuFlù
();

545 
	`S9xRe£t
();

548 
	`•rötf
(
fûíame
,"%s%s%s",
romDú
,
DIR_SEP
,
cuºítRomFûíame
);

550 i‡(!
Mem‹y
.
	`LﬂdROM
 (
fûíame
))

552 
	`•rötf
(
ãxt
,"Loading Rom...Failed");

553 
	`gp_døwSåög
(0,0,
	`°æí
(
ãxt
),ãxt,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

554 
	`MíuFlù
();

555 
	`MíuPau£
();

559 
	`•rötf
(
ãxt
,"Loading Rom...OK!");

560 
	`gp_døwSåög
(0,0,
	`°æí
(
ãxt
),ãxt,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

561 
	`•rötf
(
ãxt
,"Loading Sram");

562 
	`gp_døwSåög
(0,8,
	`°æí
(
ãxt
),ãxt,0xFFFF,(*)
‰amebuf„r16
[
cuºFB
]);

563 
	`MíuFlù
();

566 
	`S9xLﬂdSRAM
();

569 i‡(
	`LﬂdMíuO±i⁄s
(
¢esO±i⁄sDú
, 
cuºítRomFûíame
, 
MENU_OPTIONS_EXT
, (*)&
¢esMíuO±i⁄s
, (snesMenuOptions),1))

572 i‡(
	`LﬂdMíuO±i⁄s
(
¢esO±i⁄sDú
, 
MENU_OPTIONS_FILENAME
, 
MENU_OPTIONS_EXT
, (*)&
¢esMíuO±i⁄s
, (snesMenuOptions),1))

575 
	`S√sDeÁu…MíuO±i⁄s
();

579 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[
cuºFB
],0x0);

582 
	}
}

584 #ifde‡
__GIZ__


585 
	$SegAim
()

588 
aim
=
	`Fømew‹kAudio_GëCuºítB™k
();

589  
aim
;

590 
	}
}

593 #ifde‡
__GP2X__


594 
	$SegAim
()

596 
aim
=
CuºítSoundB™k
;

597 
aim
--; if (aim<0)áim+=8;

599  
aim
;

600 
	}
}

604 
	$_makï©h
 (*
∑th
, c⁄° *, c⁄° *
dú
,

605 c⁄° *
‚ame
, c⁄° *
ext
)

607 i‡(
dú
 && *dir)

609 
	`°r˝y
 (
∑th
, 
dú
);

610 
	`°rˇt
 (
∑th
, "/");

613 *
∑th
 = 0;

614 
	`°rˇt
 (
∑th
, 
‚ame
);

615 i‡(
ext
 && *ext)

617 
	`°rˇt
 (
∑th
, ".");

618 
	`°rˇt
 (
∑th
, 
ext
);

620 
	}
}

622 
	$_•lô∑th
 (c⁄° *
∑th
, *
drive
, *
dú
, *
‚ame
,

623 *
ext
)

625 *
drive
 = 0;

627 *
¶ash
 = 
	`°ºchr
 (
∑th
, '/');

628 i‡(!
¶ash
)

629 
¶ash
 = 
	`°ºchr
 (
∑th
, '\\');

631 *
dŸ
 = 
	`°ºchr
 (
∑th
, '.');

633 i‡(
dŸ
 && 
¶ash
 && dot < slash)

634 
dŸ
 = 
NULL
;

636 i‡(!
¶ash
)

638 
	`°r˝y
 (
dú
, "");

639 
	`°r˝y
 (
‚ame
, 
∑th
);

640 i‡(
dŸ
)

642 *(
‚ame
 + (
dŸ
 - 
∑th
)) = 0;

643 
	`°r˝y
 (
ext
, 
dŸ
 + 1);

646 
	`°r˝y
 (
ext
, "");

650 
	`°r˝y
 (
dú
, 
∑th
);

651 *(
dú
 + (
¶ash
 - 
∑th
)) = 0;

652 
	`°r˝y
 (
‚ame
, 
¶ash
 + 1);

653 i‡(
dŸ
)

655 *(
‚ame
 + (
dŸ
 - 
¶ash
) - 1) = 0;

656 
	`°r˝y
 (
ext
, 
dŸ
 + 1);

659 
	`°r˝y
 (
ext
, "");

661 
	}
}

664 (*
°©ef_›í
)(c⁄° *
‚ame
, c⁄° *
mode
);

665 (*
°©ef_ªad
)(*
p
, 
l
);

666 (*
°©ef_wrôe
)(*
p
, 
l
);

667 (*
°©ef_˛o£
)();

668 
FILE
 *
°©e_fûe
 = 0;

669 
°©e_fûíame
[
MAX_PATH
];

670 *
°©e_mem
 = 
NULL
;

671 
°©e_mem_pos
 = 0;

672 
°©e_mem_size
=0;

673 
°©e_mode
 = 0;

675 
	$check_zù
(*
fûíame
)

677 
uöt8
 
buf
[2];

678 
FILE
 *
fd
 = 
NULL
;

679 
fd
 = (
FILE
*)
	`f›í
(
fûíame
, "rb");

680 if(!
fd
)  (0);

681 
	`‰ód
(
buf
, 1, 2, 
fd
);

682 
	`f˛o£
(
fd
);

683 if(
	`memcmp
(
buf
, "PK", 2) == 0)  (1);

685 
	}
}

687 *
	$lﬂd_¨chive
(*
fûíame
, *
fûe_size
)

689 
size
 = 0;

690 *
buf
 = 
NULL
;

691 
ãxt
[128];

693 
unzFûe
 
fd
 = 
NULL
;

694 
unz_fûe_öfo
 
öfo
;

695 
ªt
 = 0;

698 
fd
 = 
	`unzO≥n
(
fûíame
);

699 if(!
fd
)

701 
	`¥ötf
("FailedÅo openárchive\r\n");

702  
NULL
;

706 
ªt
 = 
	`unzGoToFú°Fûe
(
fd
);

707 if(
ªt
 !
UNZ_OK
)

709 
	`¥ötf
("FailedÅo find first file in zip\r\n");

710 
	`unzClo£
(
fd
);

711  
NULL
;

714 
ªt
 = 
	`unzGëCuºítFûeInfo
(
fd
, &
öfo
, 
NULL
, 0, NULL, 0, NULL, 0);

715 if(
ªt
 !
UNZ_OK
)

717 
	`¥ötf
("FailedÅo zip info\r\n");

718 
	`unzClo£
(
fd
);

719  
NULL
;

723 
ªt
 = 
	`unzO≥nCuºítFûe
(
fd
);

724 if(
ªt
 !
UNZ_OK
)

726 
	`¥ötf
("FailedÅoÑead file\r\n");

727 
	`unzClo£
(
fd
);

728  
NULL
;

732 
size
 = 
öfo
.
uncom¥es£d_size
;

733 
buf
=(*)
	`mÆloc
(
size
);

734 if(!
buf
)

736 
	`¥ötf
("FailedÅo malloc zip buffer\r\n");

737 
	`unzClo£
(
fd
);

738  
NULL
;

742 
ªt
 = 
	`unzRódCuºítFûe
(
fd
, 
buf
, 
öfo
.
uncom¥es£d_size
);

743 if(
ªt
 !
öfo
.
uncom¥es£d_size
)

745 
	`‰ì
(
buf
);

746 
	`¥ötf
("File failedÅo uncompress fully\r\n");

747 
	`unzClo£CuºítFûe
(
fd
);

748 
	`unzClo£
(
fd
);

749  
NULL
;

753 
ªt
 = 
	`unzClo£CuºítFûe
(
fd
);

754 if(
ªt
 !
UNZ_OK
)

756 
	`‰ì
(
buf
);

757 
	`¥ötf
("FailedÅo close file in zip\r\n");

758 
	`unzClo£
(
fd
);

759  
NULL
;

763 
ªt
 = 
	`unzClo£
(
fd
);

764 if(
ªt
 !
UNZ_OK
)

766 
	`‰ì
(
buf
);

767 
	`¥ötf
("FailedÅo close zip\r\n");

768  
NULL
;

772 *
fûe_size
 = 
size
;

773  
buf
;

774 
	}
}

776 
	$ßve_¨chive
(*
fûíame
, *
buf„r
, 
size
)

778 
uöt8
 *
buf
 = 
NULL
;

779 
ãxt
[128]="";

780 
zùFûe
 
fd
 = 
NULL
;

781 
ªt
 = 0;

782 
fd
=
	`zùO≥n
(
fûíame
,0);

783 if(!
fd
)

785 
	`¥ötf
("FailedÅo create zip\r\n");

789 
ªt
=
	`zùO≥nNewFûeInZù
(
fd
,"SNAPSHOT",

790 
NULL
,

791 
NULL
,0,

792 
NULL
,0,

793 
NULL
,

794 
Z_DEFLATED
,

795 
Z_BEST_COMPRESSION
);

797 if(
ªt
 !
ZIP_OK
)

799 
	`zùClo£
(
fd
,
NULL
);

800 
	`¥ötf
("FailedÅo create file in zip\r\n");

804 
ªt
=
	`zùWrôeInFûeInZù
(
fd
,
buf„r
,
size
);

805 if(
ªt
 !
ZIP_OK
)

807 
	`zùClo£FûeInZù
(
fd
);

808 
	`zùClo£
(
fd
,
NULL
);

809 
	`¥ötf
("FailedÅo write file in zip\r\n");

813 
ªt
=
	`zùClo£FûeInZù
(
fd
);

814 if(
ªt
 !
ZIP_OK
)

816 
	`zùClo£
(
fd
,
NULL
);

817 
	`¥ötf
("FailedÅo close file in zip\r\n");

821 
ªt
=
	`zùClo£
(
fd
,
NULL
);

822 if(
ªt
 !
ZIP_OK
)

824 
	`¥ötf
("FailedÅo close zip\r\n");

829 
	}
}

831 
	$°©e_unc_›í
(c⁄° *
‚ame
, c⁄° *
mode
)

836 if(
mode
[0]=='r')

839 if(
	`check_zù
((*)
‚ame
))

842 
	`¥ötf
("state is zipped\r\n");

843 
°©e_mode
 = 1;

844 
°©e_mem
=
	`lﬂd_¨chive
((*)
‚ame
,&
°©e_mem_size
);

845 if(!
°©e_mem
)  0;

846 
°©e_mem_pos
=0;

847 
	`°r˝y
(
°©e_fûíame
,
‚ame
);

848 
	`¥ötf
("Unzipped ok\r\n");

853 
°©e_mode
 = 0;

854 
°©e_fûe
 = 
	`f›í
(
‚ame
, 
mode
);

855  (Ë
°©e_fûe
;

860 
	`¥ötf
("open fileÅo write\r\n");

862 
°©e_mode
 = 1;

863 
°©e_mem
=(*)
	`mÆloc
(200);

864 
°©e_mem_size
=200;

865 
°©e_mem_pos
 = 0;

866 
	`°r˝y
(
°©e_fûíame
,
‚ame
);

869 
	}
}

871 
	$°©e_unc_ªad
(*
p
, 
l
)

873 if(
°©e_mode
==0)

875  
	`‰ód
(
p
, 1, 
l
, 
°©e_fûe
);

880 if((
°©e_mem_pos
+
l
)>
°©e_mem_size
)

883 
	`¥ötf
("ªadÑeq:%dá˘:%d\r\n",
l
,0);

888 
	`mem˝y
(
p
,
°©e_mem
+
°©e_mem_pos
,
l
);

889 
°©e_mem_pos
+=
l
;

890 
	`¥ötf
("ªadÑeq:%dá˘:%d\r\n",
l
,l);

892  
l
;

894 
	}
}

896 
	$°©e_unc_wrôe
(*
p
, 
l
)

898 
	`¥ötf
("write file\r\n");

899 if(
°©e_mode
==0)

901  
	`fwrôe
(
p
, 1, 
l
, 
°©e_fûe
);

905 
	`¥ötf
("ok\r\n");

906 if((
°©e_mem_pos
+
l
)>
°©e_mem_size
)

908 
	`¥ötf
("realloc\r\n");

910 
°©e_mem
=(*)
	`ªÆloc
(°©e_mem,
°©e_mem_pos
+
l
);

911 
°©e_mem_size
=
°©e_mem_pos
+
l
;

913 
	`¥ötf
("do write\r\n");

915 
	`mem˝y
(
°©e_mem
+
°©e_mem_pos
,
p
,
l
);

916 
°©e_mem_pos
+=
l
;

917 
	`¥ötf
("leaving\r\n");

918  
l
;

920 
	}
}

922 
	$°©e_unc_˛o£
()

924 if(
°©e_mode
==0)

926 
	`f˛o£
(
°©e_fûe
);

930 
	`¥ötf
("f:%s\r\n",
°©e_fûíame
);

931 
	`ßve_¨chive
(
°©e_fûíame
,
°©e_mem
,
°©e_mem_size
);

932 
	`‰ì
(
°©e_mem
);

933 
°©e_mem
=
NULL
;

934 
°©e_mem_size
=0;

935 
°©e_mem_pos
=0;

936 
°©e_fûíame
[0]=0;

938 
	}
}

940 **
	gg_¨gv
;

941 
	$maö
(
¨gc
, *
¨gv
[])

943 
i
,
j
 = 0;

944 
romru¬ög
 = 0;

945 
aim
=0, 
d⁄e
=0, 
skù
=0, 
Fømes
=0, 
Âs
=0, 
tick
=0,
eÂs
=0;

946 
uöt8
 *
soundbuf„r
=
NULL
;

947 
Timî
=0;

948 
a˘i⁄
=0;

949 
romlﬂded
=0;

950 
ãxt
[256];

951 
boﬁ8
 
ROMAPUE«bÀd
 = 0;

952 
DIR
 *
d
;

954 
g_¨gv
 = 
¨gv
;

957 
°©ef_›í
 = 
°©e_unc_›í
;

958 
°©ef_ªad
 = 
°©e_unc_ªad
;

959 
°©ef_wrôe
 = 
°©e_unc_wrôe
;

960 
°©ef_˛o£
 = 
°©e_unc_˛o£
;

964 
	`gëcwd
(
cuºítW‹kögDú
, 
MAX_PATH
);

965 
	`CheckDúSï
(
cuºítW‹kögDú
);

967 
	`•rötf
(
¢esO±i⁄sDú
,"%s%s%s",
cuºítW‹kögDú
,
DIR_SEP
,
SNES_OPTIONS_DIR
);

968 
	`•rötf
(
¢esSømDú
,"%s%s%s",
cuºítW‹kögDú
,
DIR_SEP
,
SNES_SRAM_DIR
);

969 
	`•rötf
(
¢esSaveSèãDú
,"%s%s%s",
cuºítW‹kögDú
,
DIR_SEP
,
SNES_SAVESTATE_DIR
);

972 
	`I≈utInô
();

976 
	`mkdú
(
¢esO±i⁄sDú
,0777);

977 
	`mkdú
(
¢esSømDú
,0777);

978 
	`mkdú
(
¢esSaveSèãDú
,0777);

980 
	`¥ötf
("Lﬂdög globÆ míu o±i⁄s\r\n"); 
	`fÊush
(
°dout
);

981 i‡(
	`LﬂdMíuO±i⁄s
(
¢esO±i⁄sDú
,
MENU_OPTIONS_FILENAME
,
MENU_OPTIONS_EXT
,(*)&
¢esMíuO±i⁄s
, (snesMenuOptions),0))

984 
	`¥ötf
("FaûedÅÿlﬂd globÆ o±i⁄s, sÿusög deÁu…s\r\n"); 
	`fÊush
(
°dout
);

985 
	`S√sDeÁu…MíuO±i⁄s
();

988 
	`¥ötf
("Lﬂdög deÁu…Ñom dúe˘‹y\r\n"); 
	`fÊush
(
°dout
);

989 i‡(
	`LﬂdMíuO±i⁄s
(
¢esO±i⁄sDú
,
DEFAULT_ROM_DIR_FILENAME
,
DEFAULT_ROM_DIR_EXT
,(*)
¢esRomDú
, 
MAX_PATH
,0))

992 
	`¥ötf
("FaûedÅÿdeÁu…Ñom dú, sÿusög cuºíàdú\r\n"); 
	`fÊush
(
°dout
);

993 
	`°r˝y
(
¢esRomDú
,
cuºítW‹kögDú
);

997 
d
 = 
	`›ídú
(
romDú
);

998 if(
d
)

1000 
	`˛o£dú
(
d
);

1005 
	`°r˝y
(
¢esRomDú
,
cuºítW‹kögDú
);

1009 
	`gp_öôGøphics
(16,0,
¢esMíuO±i⁄s
.
mmuHack
);

1011 #ifde‡
__GP2X__


1012 i‡(
¢esMíuO±i⁄s
.
ømSëtögs
)

1014 
	`¥ötf
("Cøig†RAM sëtög†¨êíabÀd. Nowáµlyög sëtögs..."); 
	`fÊush
(
°dout
);

1016 
	`£t_RAM_Timögs
(6, 4, 1, 1, 1, 2, 2);

1017 
	`¥ötf
("D⁄e\r\n"); 
	`fÊush
(
°dout
);

1021 
	`¥ötf
("UsögÇ‹mÆ Ram sëtögs.\r\n"); 
	`fÊush
(
°dout
);

1024 
	`£t_gamma
(
¢esMíuO±i⁄s
.
gamma
+100);

1027 
	`Upd©eMíuGøphicsGamma
();

1030 
	`ZîoMem‹y
 (&
Sëtögs
,  (Settings));

1032 
Sëtögs
.
Joy°ickE«bÀd
 = 
FALSE
;

1033 
Sëtögs
.
SoundPœybackR©e
 = 22050;

1034 
Sëtögs
.
Sãªo
 = 
FALSE
;

1035 
Sëtögs
.
SoundBuf„rSize
 = 0;

1036 
Sëtögs
.
Cy˛esPî˚¡age
 = 100;

1037 
Sëtögs
.
DißbÀSoundEcho
 = 
FALSE
;

1038 
Sëtögs
.
APUE«bÀd
 = 
FALSE
;

1039 
Sëtögs
.
H_Max
 = 
SNES_CYCLES_PER_SCANLINE
;

1040 
Sëtögs
.
SkùFømes
 = 
AUTO_FRAMERATE
;

1041 
Sëtögs
.
Shutdown
 = Sëtögs.
ShutdownMa°î
 = 
TRUE
;

1042 
Sëtögs
.
FømeTimePAL
 = 20000;

1043 
Sëtögs
.
FømeTimeNTSC
 = 16667;

1044 
Sëtögs
.
FømeTime
 = Sëtögs.
FømeTimeNTSC
;

1045 
Sëtögs
.
DißbÀSam∂eCachög
 = 
FALSE
;

1046 
Sëtögs
.
DißbÀMa°îVﬁume
 = 
FALSE
;

1047 
Sëtögs
.
Mou£
 = 
FALSE
;

1048 
Sëtögs
.
Su≥rSc›e
 = 
FALSE
;

1049 
Sëtögs
.
Mu…iPœyî5
 = 
FALSE
;

1051 
Sëtögs
.
C⁄åﬁÀrO±i⁄
 = 0;

1053 
Sëtögs
.
F‹˚Tøn•¨ícy
 = 
FALSE
;

1054 
Sëtögs
.
Tøn•¨ícy
 = 
FALSE
;

1055 
Sëtögs
.
SixãíBô
 = 
TRUE
;

1057 
Sëtögs
.
Suµ‹tHiRes
 = 
FALSE
;

1058 
Sëtögs
.
NëPœy
 = 
FALSE
;

1059 
Sëtögs
.
SîvîName
 [0] = 0;

1060 
Sëtögs
.
AutoSaveDñay
 = 30;

1061 
Sëtögs
.
AµlyChóts
 = 
FALSE
;

1062 
Sëtögs
.
TurboMode
 = 
FALSE
;

1063 
Sëtögs
.
TurboSkùFømes
 = 15;

1064 
Sëtögs
.
ThªadSound
 = 
FALSE
;

1065 
Sëtögs
.
SoundSync
 = 
FALSE
;

1070 
GFX
.
Pôch
 = 320 * 2;

1071 
GFX
.
RólPôch
 = 320 * 2;

1072 
GFX
.
S¸ìn
 = (
uöt8
 *Ë
‰amebuf„r16
[
cuºFB
];

1074 
GFX
.
SubS¸ìn
 = (
uöt8
 *)
	`mÆloc
(GFX.
RólPôch
 * 480 * 2);

1075 
GFX
.
ZBuf„r
 = (
uöt8
 *)
	`mÆloc
(GFX.
RólPôch
 * 480 * 2);

1076 
GFX
.
SubZBuf„r
 = (
uöt8
 *)
	`mÆloc
(GFX.
RólPôch
 * 480 * 2);

1077 
GFX
.
Dñè
 = (GFX.
SubS¸ìn
 - GFX.
S¸ìn
) >> 1;

1078 
GFX
.
PPL
 = GFX.
Pôch
 >> 1;

1079 
GFX
.
PPLx2
 = GFX.
Pôch
;

1080 
GFX
.
ZPôch
 = GFX.
Pôch
 >> 1;

1082 i‡(
Sëtögs
.
F‹˚NoTøn•¨ícy
)

1083 
Sëtögs
.
Tøn•¨ícy
 = 
FALSE
;

1085 i‡(
Sëtögs
.
Tøn•¨ícy
)

1086 
Sëtögs
.
SixãíBô
 = 
TRUE
;

1088 
Sëtögs
.
HBœnkSèπ
 = (256 * Sëtögs.
H_Max
Ë/ 
SNES_HCOUNTER_MAX
;

1090 i‡(!
Mem‹y
.
	`Inô
 (Ë|| !
	`S9xInôAPU
())

1091 
	`îk
();

1093 
	`S9xInôSound
 ();

1096 
	`S9xSëSoundMuã
 (
TRUE
);

1098 i‡(!
	`S9xGøphicsInô
 ())

1099 
	`îk
();

1104 
	`S9xSëSoundMuã
 (
TRUE
);

1105 
a˘i⁄
=
	`MaöMíu
(action);

1106 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[
cuºFB
],0x0);

1107 i‡(
a˘i⁄
==
EVENT_EXIT_APP
) ;

1109 i‡(
a˘i⁄
==
EVENT_LOAD_SNES_ROM
)

1112 
romlﬂded
=
	`S√sRomLﬂd
();

1113 if(
romlﬂded
)

1115 #ifde‡
ASM_SPC700


1116 
ROMAPUE«bÀd
 = 
Sëtögs
.
APUE«bÀd
;

1118 
a˘i⁄
=
EVENT_RUN_SNES_ROM
;

1121 
a˘i⁄
=0;

1124 i‡(
a˘i⁄
==
EVENT_RESET_SNES_ROM
)

1127 
	`S9xRe£t
();

1128 
a˘i⁄
=
EVENT_RUN_SNES_ROM
;

1131 i‡(
a˘i⁄
==
EVENT_RUN_SNES_ROM
)

1134 
	`gp_£tCpu•ìd
(
˝uS≥edLookup
[
¢esMíuO±i⁄s
.
˝uS≥ed
]);

1135 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[0],0x0);

1136 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[1],0x0);

1137 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[2],0x0);

1138 
	`gp_˛órFømebuf„r16
(
‰amebuf„r16
[3],0x0);

1140 
Sëtögs
.
os9x_hack
 = 
¢esMíuO±i⁄s
.
gøphHacks
;

1141 i‡(
¢esMíuO±i⁄s
.
å™•¨ícy
)

1143 
Sëtögs
.
Tøn•¨ícy
 = 
TRUE
;

1144 
Sëtögs
.
SixãíBô
 = 
TRUE
;

1148 
Sëtögs
.
Tøn•¨ícy
 = 
FALSE
;

1149 
Sëtögs
.
SixãíBô
 = 
TRUE
;

1151 
¢esMíuO±i⁄s
.
ªgi⁄
)

1154 
Sëtögs
.
F‹˚NTSC
 = Sëtögs.
F‹˚PAL
 = 
FALSE
;

1155 i‡(
Mem‹y
.
HiROM
)

1157 
Sëtögs
.
PAL
 = 
ROM
 [0xffd9] >= 2;

1159 
Sëtögs
.
PAL
 = 
ROM
 [0x7fd9] >= 2;

1162 
Sëtögs
.
F‹˚NTSC
 = 
TRUE
;

1163 
Sëtögs
.
PAL
 = Sëtögs.
F‹˚PAL

FALSE
;

1166 
Sëtögs
.
F‹˚NTSC
 = 
FALSE
;

1167 
Sëtögs
.
PAL
 = Sëtögs.
F‹˚PAL

TRUE
;

1170 
Sëtögs
.
FømeTime
 = Sëtögs.
PAL
?Sëtögs.
FømeTimePAL
:Sëtögs.
FømeTimeNTSC
;

1171 
Mem‹y
.
ROMFømesPîSec⁄d
 = 
Sëtögs
.
PAL
?50:60;

1173 
ﬁdHeight
 = 0;

1175 i‡(!
	`S9xGøphicsInô
 ())

1176 
	`îk
();

1178 i‡(
¢esMíuO±i⁄s
.
soundOn
)

1180 
‰ame_limô
 = (
Sëtögs
.
PAL
?50:60);

1181 
aimCheck
=0;

1182 
gp32_Á°mode
 = 1;

1183 
gp32_8bômode
 = 0;

1184 
gp32_ShowSub
 = 0;

1185 
gp32_Á°•rôe
 = 1;

1186 
gp32_gammavÆue
 = 
¢esMíuO±i⁄s
.
gamma
;

1187 
squidgëønshack
 = 0;

1188 i‡(
¢esMíuO±i⁄s
.
soundHack
)

1189 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
 = 3;

1191 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
 = 
ROMAPUE«bÀd
 | 1;

1192 
Sëtögs
.
SoundPœybackR©e
=()
soundR©es
[
¢esMíuO±i⁄s
.
soundR©e
];

1193 
Sëtögs
.
SixãíBôSound
=
åue
;

1194 
Sëtögs
.
Sãªo
=
¢esMíuO±i⁄s
.
°îeo
;

1195 
ßm∂ecou¡
=
Sëtögs
.
SoundPœybackR©e
/
‰ame_limô
;

1196 i‡(
Sëtögs
.
Sãªo
)

1197 
ßm∂ecou¡
 = samplecount * 2;

1198 
	`gp_öôSound
(
Sëtögs
.
SoundPœybackR©e
,16,Sëtögs.
Sãªo
,
‰ame_limô
,0x0002000F);

1199 
so
.
°îeo
 = 
Sëtögs
.
Sãªo
;

1200 
so
.
∂ayback_øã
 = 
Sëtögs
.
SoundPœybackR©e
;

1201 
	`S9xSëPœybackR©e
(
so
.
∂ayback_øã
);

1202 
	`S9xSëSoundMuã
 (
FALSE
);

1203 #i‡
	`deföed
(
__GP2X__
)

1204 
SoundThªadFœg
 = 
SOUND_THREAD_SOUND_ON
;

1206 
	`gp2x_sound_vﬁume
(
¢esMíuO±i⁄s
.
vﬁume
,snesMenuOptions.volume);

1210 
i
=10;i;i--)

1212 
Timî
=
	`gp2x_timî_ªad
();

1213 if(
Timî
-
tick
>
TIMER_1_SECOND
)

1215 
Âs
=
Fømes
;

1216 
Fømes
=0;

1217 
tick
=
Timî
;

1218 
	`•rötf
(
Âs_di•œy
,"Fps: %d",
Âs
);

1220 i‡(
Timî
<
tick
)

1223 
tick
=
Timî
;

1230 
aim
=
	`SegAim
();

1231 i‡(
d⁄e
!=
aim
)

1234 #ifde‡
__GIZ__


1235 
soundbuf„r
=(
uöt8
 *)
	`Fømew‹kAudio_GëAudioB™k
(
d⁄e
);

1237 #ifde‡
__GP2X__


1238 
soundbuf„r
=(
uöt8
 *)
pOuçut
[
d⁄e
];

1240 
d⁄e
++; if (done>=8) done=0;

1241 if(
¢esMíuO±i⁄s
.
‰ameSkù
==0)

1243 #i‡
	`deföed
(
__GIZ__
)

1244 
aim1
;

1245 
aim2
;

1246 
aim3
;

1247 
aim1
=
aim
-1;

1248 if(
aim1
<0)áim1+=7;

1249 
aim2
=
aim
-2;

1250 if(
aim2
<0)áim2+=7;

1251 
aim3
=
aim
-3;

1252 if(
aim3
<0)áim3+=7;

1257 (
d⁄e
==
aim
) ||

1258 (
d⁄e
==
aim1
) ||

1259 (
d⁄e
==
aim2
) ||

1260 (
d⁄e
==
aim3
)

1263 
IPPU
.
RídîThisFøme
=
TRUE
;

1264 
Fømes
++;

1268 #i‡
	`deföed
(
__GP2X__
)

1269 i‡((
d⁄e
==
aim
))

1271 
IPPU
.
RídîThisFøme
=
TRUE
;

1272 
Fømes
++;

1275 
IPPU
.
RídîThisFøme
=
FALSE
;

1279 i‡(
skù
)

1281 
IPPU
.
RídîThisFøme
=
FALSE
;

1282 
skù
--;

1286 
IPPU
.
RídîThisFøme
=
TRUE
;

1287 
Fømes
++;

1288 
skù
=
¢esMíuO±i⁄s
.
‰ameSkù
-1;

1292 
	`S9xMaöLo›
 ();

1293 
	`S9xMixSam∂es
((*)
soundbuf„r
, 
ßm∂ecou¡
);

1295 i‡(
d⁄e
==
aim
) ;

1297 #i‡
	`deföed
 (
__GP2X__
)

1298 
d⁄e
=
aim
;

1301 i‡(
íãrMíu
)

1304 
íãrMíu
=0;

1305 
	`gp_°›Sound
();

1309 
quô
=0,
ticks
=0,
now
=0,
d⁄e
=0,
i
=0;

1310 
tick
=0,
Âs
=0;

1311 
‰ame_limô
 = (
Sëtögs
.
PAL
?50:60);

1312 
‰amëime
=
TIMER_1_SECOND
/
‰ame_limô
;

1313 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
 = 0;

1314 
	`S9xSëSoundMuã
 (
TRUE
);

1315 
Timî
=0;

1316 
Fømes
=0;

1319 
Timî
=
	`gp2x_timî_ªad
()/
‰amëime
;

1320 if(
Timî
-
tick
>
‰ame_limô
)

1322 
Âs
=
Fømes
;

1323 
Fømes
=0;

1324 
tick
=
Timî
;

1325 
	`•rötf
(
Âs_di•œy
,"Fps: %d",
Âs
);

1327 i‡(
Timî
<
tick
)

1330 
tick
=
Timî
;

1333 
now
=
Timî
;

1334 
ticks
=
now
-
d⁄e
;

1336 if(
ticks
<1) ;

1337 if(
¢esMíuO±i⁄s
.
‰ameSkù
==0)

1339 if(
ticks
>10)Åicks=10;

1340 
i
=0; i<
ticks
-1; i++)

1342 
IPPU
.
RídîThisFøme
=
FALSE
;

1343 
	`S9xMaöLo›
 ();

1345 if(
ticks
>=1)

1347 
IPPU
.
RídîThisFøme
=
TRUE
;

1348 
Fømes
++;

1349 
	`S9xMaöLo›
 ();

1354 if(
ticks
>(
¢esMíuO±i⁄s
.
‰ameSkù
-1))Åicks=snesMenuOptions.frameSkip-1;

1355 
i
=0; i<
ticks
-1; i++)

1357 
IPPU
.
RídîThisFøme
=
FALSE
;

1358 
	`S9xMaöLo›
 ();

1360 if(
ticks
>=1)

1362 
IPPU
.
RídîThisFøme
=
TRUE
;

1363 
Fømes
++;

1364 
	`S9xMaöLo›
 ();

1368 
d⁄e
=
now
;

1371 i‡(
íãrMíu
)

1374 
íãrMíu
=0;

1376 i‡(
¢esMíuO±i⁄s
.
autoSøm
)

1378 
	`S9xSaveSRAM
();

1382 
	`£t_gamma
(100);

1384 #i‡
	`deföed
(
__GP2X__
)

1385 
	`I≈utClo£
();

1387 
	`gp_Re£t
();

1391 
i
=0;

1392 
j
=0;

1393 
j
<0x1000)

1395 
i
++;

1396 if(
i
>0xFFFF)

1398 
j
++;

1399 
i
=0;

1404 
	}
}

	@memmap.cpp

41 
	~<°rög.h
>

42 
	~<˘y≥.h
>

44 #ifde‡
__löux


48 
	~"¢es9x.h
"

49 
	~"memm≠.h
"

50 
	~"˝uexec.h
"

51 
	~"µu.h
"

52 
	~"di•œy.h
"

53 
	~"chóts.h
"

54 
	~"≠u.h
"

55 
	~"ß1.h
"

56 
	~"§tc.h
"

57 
	~"sdd1.h
"

59 #i‚de‡
ZSNES_FX


60 
	~"fxemu.h
"

61 
FxInô_s
 
Su≥rFX
;

63 
START_EXTERN_C


64 
uöt8
 *
SFXPlŸTabÀ
;

65 
	gEND_EXTERN_C


68 
uöt8
 
	gbyãs0x2000
 [0x2000];

70 *
rom_fûíame
;

71 
boﬁ8
 
LﬂdZù
(c⁄° * , 
öt32
 *, int32 *);

73 
boﬁ8_32
 
	gCMem‹y
::
	$AŒASCII
 (
uöt8
 *
b
, 
size
)

75 
i
 = 0; i < 
size
; i++)

77 i‡(
b
[
i
] < 32 || b[i] > 126)

78  (
FALSE
);

80  (
TRUE
);

81 
	}
}

83 
	gCMem‹y
::
	$Sc‹eHiROM
 (
boﬁ8_32
 
skù_hódî
)

85 
sc‹e
 = 0;

86 
o
 = 
skù_hódî
 ? 0xff00 + 0x200 : 0xff00;

88 i‡((
Mem‹y
.
ROM
 [
o
 + 0xdc] + (Memory.ROM [o + 0xdd] << 8) +

89 
Mem‹y
.
ROM
 [
o
 + 0xde] + (Memory.ROM [o + 0xdf] << 8)) == 0xffff)

90 
sc‹e
 += 2;

92 i‡(
Mem‹y
.
ROM
 [
o
 + 0xda] == 0x33)

93 
sc‹e
 += 2;

94 i‡((
Mem‹y
.
ROM
 [
o
 + 0xd5] & 0xf) < 4)

95 
sc‹e
 += 2;

96 i‡(!(
Mem‹y
.
ROM
 [
o
 + 0xfd] & 0x80))

97 
sc‹e
 -= 4;

98 i‡(
CÆcuœãdSize
 > 1024 * 1024 * 3)

99 
sc‹e
 += 4;

100 i‡((1 << (
Mem‹y
.
ROM
 [
o
 + 0xd7] - 7)) > 48)

101 
sc‹e
 -= 1;

102 i‡(!
	`AŒASCII
 (&
Mem‹y
.
ROM
 [
o
 + 0xb0], 6))

103 
sc‹e
 -= 1;

104 i‡(!
	`AŒASCII
 (&
Mem‹y
.
ROM
 [
o
 + 0xc0], 
ROM_NAME_LEN
 - 1))

105 
sc‹e
 -= 1;

107  (
sc‹e
);

108 
	}
}

110 
	gCMem‹y
::
	$Sc‹eLoROM
 (
boﬁ8_32
 
skù_hódî
)

112 
sc‹e
 = 0;

113 
o
 = 
skù_hódî
 ? 0x7f00 + 0x200 : 0x7f00;

115 i‡((
Mem‹y
.
ROM
 [
o
 + 0xdc] + (Memory.ROM [o + 0xdd] << 8) +

116 
Mem‹y
.
ROM
 [
o
 + 0xde] + (Memory.ROM [o + 0xdf] << 8)) == 0xffff)

117 
sc‹e
 += 2;

119 i‡(
Mem‹y
.
ROM
 [
o
 + 0xda] == 0x33)

120 
sc‹e
 += 2;

121 i‡((
Mem‹y
.
ROM
 [
o
 + 0xd5] & 0xf) < 4)

122 
sc‹e
 += 2;

123 i‡(
CÆcuœãdSize
 <= 1024 * 1024 * 16)

124 
sc‹e
 += 2;

125 i‡(!(
Mem‹y
.
ROM
 [
o
 + 0xfd] & 0x80))

126 
sc‹e
 -= 4;

127 i‡((1 << (
Mem‹y
.
ROM
 [
o
 + 0xd7] - 7)) > 48)

128 
sc‹e
 -= 1;

129 i‡(!
	`AŒASCII
 (&
Mem‹y
.
ROM
 [
o
 + 0xb0], 6))

130 
sc‹e
 -= 1;

131 i‡(!
	`AŒASCII
 (&
Mem‹y
.
ROM
 [
o
 + 0xc0], 
ROM_NAME_LEN
 - 1))

132 
sc‹e
 -= 1;

134  (
sc‹e
);

135 
	}
}

137 *
	gCMem‹y
::
	$Sa„
 (c⁄° *
s
)

139 *
ß„
 = 
NULL
;

140 
ß„_Àn
 = 0;

142 
Àn
 = 
	`°æí
 (
s
);

143 i‡(!
ß„
 || 
Àn
 + 1 > 
ß„_Àn
)

145 i‡(
ß„
)

146 
	`‰ì
 ((*Ë
ß„
);

147 
ß„
 = (*Ë
	`mÆloc
 (
ß„_Àn
 = 
Àn
 + 1);

150 
i
 = 0; i < 
Àn
; i++)

152 i‡(
s
 [
i
] >= 32 && s [i] < 127)

153 
ß„
 [
i
] = 
s
[i];

155 
ß„
 [
i
] = '?';

157 
ß„
 [
Àn
] = 0;

158  (
ß„
);

159 
	}
}

165 
boﬁ8_32
 
	gCMem‹y
::
	$Inô
 ()

167 
RAM
 = (
uöt8
 *Ë
	`mÆloc
 (0x20000);

168 
SRAM
 = (
uöt8
 *Ë
	`mÆloc
 (0x20000);

169 
VRAM
 = (
uöt8
 *Ë
	`mÆloc
 (0x10000);

170 
ROM
 = (
uöt8
 *Ë
	`mÆloc
 (
MAX_ROM_SIZE
 + 0x200 + 0x8000);

171 
FûlRAM
 = 
NULL
;

173 
IPPU
.
TûeCache
 [
TILE_2BIT
] = (
uöt8
 *Ë
	`mÆloc
 (
MAX_2BIT_TILES
 * 128);

174 
IPPU
.
TûeCache
 [
TILE_4BIT
] = (
uöt8
 *Ë
	`mÆloc
 (
MAX_4BIT_TILES
 * 128);

175 
IPPU
.
TûeCache
 [
TILE_8BIT
] = (
uöt8
 *Ë
	`mÆloc
 (
MAX_8BIT_TILES
 * 128);

177 
IPPU
.
TûeCached
 [
TILE_2BIT
] = (
uöt8
 *Ë
	`mÆloc
 (
MAX_2BIT_TILES
);

178 
IPPU
.
TûeCached
 [
TILE_4BIT
] = (
uöt8
 *Ë
	`mÆloc
 (
MAX_4BIT_TILES
);

179 
IPPU
.
TûeCached
 [
TILE_8BIT
] = (
uöt8
 *Ë
	`mÆloc
 (
MAX_8BIT_TILES
);

181 i‡(!
RAM
 || !
SRAM
 || !
VRAM
 || !
ROM
 ||

182 !
IPPU
.
TûeCache
 [
TILE_2BIT
] || !IPPU.TûeCachê[
TILE_4BIT
] ||

183 !
IPPU
.
TûeCache
 [
TILE_8BIT
] || !IPPU.
TûeCached
 [
TILE_2BIT
] ||

184 !
IPPU
.
TûeCached
 [
TILE_4BIT
] || !IPPU.TûeCached [
TILE_8BIT
])

186 
	`Deöô
 ();

187  (
FALSE
);

193 
FûlRAM
 = 
ROM
;

197 
ROM
 += 0x8000;

199 
C4RAM
 = 
ROM
 + 0x400000 + 8192 * 8;

200 ::
ROM
 = ROM;

201 ::
SRAM
 = SRAM;

202 ::
RegRAM
 = 
FûlRAM
;

204 #ifde‡
ZSNES_FX


205 
SFXPlŸTabÀ
 = 
ROM
 + 0x400000;

207 
Su≥rFX
.
pvRegi°îs
 = &
Mem‹y
.
FûlRAM
 [0x3000];

208 
Su≥rFX
.
nRamB™ks
 = 1;

209 
Su≥rFX
.
pvRam
 = ::
SRAM
;

210 
Su≥rFX
.
nRomB™ks
 = (2 * 1024 * 1024) / (32 * 1024);

211 
Su≥rFX
.
pvRom
 = (
uöt8
 *Ë
ROM
;

214 
	`ZîoMem‹y
 (
IPPU
.
TûeCached
 [
TILE_2BIT
], 
MAX_2BIT_TILES
);

215 
	`ZîoMem‹y
 (
IPPU
.
TûeCached
 [
TILE_4BIT
], 
MAX_4BIT_TILES
);

216 
	`ZîoMem‹y
 (
IPPU
.
TûeCached
 [
TILE_8BIT
], 
MAX_8BIT_TILES
);

218 
SDD1D©a
 = 
NULL
;

219 
SDD1Index
 = 
NULL
;

221  (
TRUE
);

222 
	}
}

224 
	gCMem‹y
::
	$Deöô
 ()

226 i‡(
RAM
)

228 
	`‰ì
 ((*Ë
RAM
);

229 
RAM
 = 
NULL
;

231 i‡(
SRAM
)

233 
	`‰ì
 ((*Ë
SRAM
);

234 
SRAM
 = 
NULL
;

236 i‡(
VRAM
)

238 
	`‰ì
 ((*Ë
VRAM
);

239 
VRAM
 = 
NULL
;

241 i‡(
ROM
)

243 
ROM
 -= 0x8000;

244 
	`‰ì
 ((*Ë
ROM
);

245 
ROM
 = 
NULL
;

248 i‡(
IPPU
.
TûeCache
 [
TILE_2BIT
])

250 
	`‰ì
 ((*Ë
IPPU
.
TûeCache
 [
TILE_2BIT
]);

251 
IPPU
.
TûeCache
 [
TILE_2BIT
] = 
NULL
;

253 i‡(
IPPU
.
TûeCache
 [
TILE_4BIT
])

255 
	`‰ì
 ((*Ë
IPPU
.
TûeCache
 [
TILE_4BIT
]);

256 
IPPU
.
TûeCache
 [
TILE_4BIT
] = 
NULL
;

258 i‡(
IPPU
.
TûeCache
 [
TILE_8BIT
])

260 
	`‰ì
 ((*Ë
IPPU
.
TûeCache
 [
TILE_8BIT
]);

261 
IPPU
.
TûeCache
 [
TILE_8BIT
] = 
NULL
;

264 i‡(
IPPU
.
TûeCached
 [
TILE_2BIT
])

266 
	`‰ì
 ((*Ë
IPPU
.
TûeCached
 [
TILE_2BIT
]);

267 
IPPU
.
TûeCached
 [
TILE_2BIT
] = 
NULL
;

269 i‡(
IPPU
.
TûeCached
 [
TILE_4BIT
])

271 
	`‰ì
 ((*Ë
IPPU
.
TûeCached
 [
TILE_4BIT
]);

272 
IPPU
.
TûeCached
 [
TILE_4BIT
] = 
NULL
;

274 i‡(
IPPU
.
TûeCached
 [
TILE_8BIT
])

276 
	`‰ì
 ((*Ë
IPPU
.
TûeCached
 [
TILE_8BIT
]);

277 
IPPU
.
TûeCached
 [
TILE_8BIT
] = 
NULL
;

280 
	`FªeSDD1D©a
 ();

281 
	}
}

283 
	gCMem‹y
::
	$FªeSDD1D©a
 ()

285 i‡(
SDD1Index
)

287 
	`‰ì
 ((*Ë
SDD1Index
);

288 
SDD1Index
 = 
NULL
;

290 i‡(
SDD1D©a
)

292 
	`‰ì
 ((*Ë
SDD1D©a
);

293 
SDD1D©a
 = 
NULL
;

295 
	}
}

300 
	$checkzù
–* 
‚
 )

302 
˙t
 = 
	`°æí
(
‚
);

303 if––(
‚
[
˙t
-1] == 'p') || (fn[cnt-1] == 'P') ) &&

304 –(
‚
[
˙t
-2] == 'i') || (fn[cnt-2] == 'I') ) &&

305 –(
‚
[
˙t
-3] == 'z') || (fn[cnt-3] == 'Z') ) ){

306  
åue
;

309  
Ál£
;

310 
	}
}

316 #ifde‡
_SNESPPC


317 #¥agm®
w¨nög
(
dißbÀ
 : 4101)

318 #¥agm®
w¨nög
(
dißbÀ
 : 4700)

320 
boﬁ8_32
 
	gCMem‹y
::
	$LﬂdROM
 (c⁄° *
fûíame
)

322 
FûeSize
 = 0;

323 
ªåy_cou¡
 = 0;

324 
STREAM
 
ROMFûe
;

325 
boﬁ8_32
 
I¡îÀaved
 = 
FALSE
;

326 
boﬁ8_32
 
TÆes
 = 
FALSE
;

327 
dú
 [
_MAX_DIR
 + 1];

328 
drive
 [
_MAX_DRIVE
 + 1];

329 
«me
 [
_MAX_FNAME
 + 1];

330 
ext
 [
_MAX_EXT
 + 1];

331 
‚ame
 [
_MAX_PATH
 + 1];

332 
i
;

334 
	`mem£t
 (&
SNESGameFixes
, 0, (SNESGameFixes));

335 
SNESGameFixes
.
SRAMInôülVÆue
 = 0x60;

337 
	`mem£t
 (
byãs0x2000
, 0, 0x2000);

338 
CPU
.
TrõdI¡îÀavedMode2
 = 
FALSE
;

340 
CÆcuœãdSize
 = 0;

341 
agaö
:

342 #i‚de‡
_SNESPPC


343 
	`_•lô∑th
 (
fûíame
, 
drive
, 
dú
, 
«me
, 
ext
);

344 
	`_makï©h
 (
‚ame
, 
drive
, 
dú
, 
«me
, 
ext
);

346 
	`°r˝y
(
‚ame
, 
fûíame
);

350 #ifde‡
__WIN32__


351 
	`memmove
 (&
ext
 [0], &ext[1], 4);

354 
öt32
 
TŸÆFûeSize
 = 0;

356 #ifde‡
UNZIP_SUPPORT


357 if–
	`checkzù
–
‚ame
 ) )

359 i‡(!
	`LﬂdZù
 (
‚ame
, &
TŸÆFûeSize
, &
HódîCou¡
))

360  (
FALSE
);

362 
	`°r˝y
 (
ROMFûíame
, 
‚ame
);

367 i‡((
ROMFûe
 = 
	`OPEN_STREAM
 (
‚ame
, "rb")Ë=
NULL
)

368  (
FALSE
);

370 
	`°r˝y
 (
ROMFûíame
, 
‚ame
);

372 
HódîCou¡
 = 0;

373 
uöt8
 *
±r
 = 
ROM
;

374 
boﬁ8_32
 
m‹e
 = 
FALSE
;

378 
FûeSize
 = 
	`READ_STREAM
 (
±r
, 
MAX_ROM_SIZE
 + 0x200 - (±∏- 
ROM
), 
ROMFûe
);

379 
	`CLOSE_STREAM
 (
ROMFûe
);

380 
ˇlc_size
 = (
FûeSize
 / 0x2000) * 0x2000;

382 i‡((
FûeSize
 - 
ˇlc_size
 =512 && !
Sëtögs
.
F‹˚NoHódî
) ||

383 
Sëtögs
.
F‹˚Hódî
)

385 
	`memmove
 (
±r
,Öå + 512, 
ˇlc_size
);

386 
HódîCou¡
++;

387 
FûeSize
 -= 512;

389 
±r
 +
FûeSize
;

390 
TŸÆFûeSize
 +
FûeSize
;

392 
Àn
;

393 i‡(
±r
 - 
ROM
 < 
MAX_ROM_SIZE
 + 0x200 &&

394 (
	`isdigô
 (
ext
 [0]) &&Éxt [1] == 0 &&Éxt [0] < '9'))

396 
m‹e
 = 
TRUE
;

397 
ext
 [0]++;

398 #ifde‡
__WIN32__


399 
	`memmove
 (&
ext
 [1], &ext [0], 4);

400 
ext
 [0] = '.';

402 #i‚de‡
_SNESPPC


403 
	`_makï©h
 (
‚ame
, 
drive
, 
dú
, 
«me
, 
ext
);

407 i‡(
±r
 - 
ROM
 < 
MAX_ROM_SIZE
 + 0x200 &&

408 (((
Àn
 = 
	`°æí
 (
«me
)) == 7 ||Üen == 8) &&

409 
	`°∫ˇ£cmp
 (
«me
, "sf", 2) == 0 &&

410 
	`isdigô
 (
«me
 [2]) && isdigit (name [3]) && isdigit (name [4]) &&

411 
	`isdigô
 (
«me
 [5]Ë&& 
	`ißÕha
 («mê[
Àn
 - 1])))

413 
m‹e
 = 
TRUE
;

414 
«me
 [
Àn
 - 1]++;

415 #ifde‡
__WIN32__


416 
	`memmove
 (&
ext
 [1], &ext [0], 4);

417 
ext
 [0] = '.';

419 #i‚de‡
_SNESPPC


420 
	`_makï©h
 (
‚ame
, 
drive
, 
dú
, 
«me
, 
ext
);

424 
m‹e
 = 
FALSE
;

425 } 
m‹e
 && (
ROMFûe
 = 
	`OPEN_STREAM
 (
‚ame
, "rb")Ë!
NULL
);

428 i‡(
HódîCou¡
 == 0)

429 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_HEADERS_INFO
, "No ROM file header found.");

432 i‡(
HódîCou¡
 == 1)

433 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_HEADERS_INFO
,

436 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_HEADERS_INFO
,

440 
	`CheckF‹IPSP©ch
 (
fûíame
, 
HódîCou¡
 !0, 
TŸÆFûeSize
);

441 
‹ig_hi_sc‹e
, 
‹ig_lo_sc‹e
;

442 
hi_sc‹e
, 
lo_sc‹e
;

444 
‹ig_hi_sc‹e
 = 
hi_sc‹e
 = 
	`Sc‹eHiROM
 (
FALSE
);

445 
‹ig_lo_sc‹e
 = 
lo_sc‹e
 = 
	`Sc‹eLoROM
 (
FALSE
);

447 i‡(
HódîCou¡
 =0 && !
Sëtögs
.
F‹˚NoHódî
 &&

448 ((
hi_sc‹e
 > 
lo_sc‹e
 && 
	`Sc‹eHiROM
 (
TRUE
) > hi_score) ||

449 (
hi_sc‹e
 <
lo_sc‹e
 && 
	`Sc‹eLoROM
 (
TRUE
) >Üo_score)))

451 
	`memmove
 (
Mem‹y
.
ROM
, Mem‹y.ROM + 512, 
TŸÆFûeSize
 - 512);

452 
TŸÆFûeSize
 -= 512;

453 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_HEADER_WARNING
,

457 
CÆcuœãdSize
 = (
TŸÆFûeSize
 / 0x2000) * 0x2000;

458 
	`ZîoMem‹y
 (
ROM
 + 
CÆcuœãdSize
, 
MAX_ROM_SIZE
 - CalculatedSize);

462 i‡(
CÆcuœãdSize
 == 0x500000 &&

463 
	`°∫cmp
 ((c⁄° *)&
ROM
 [0x40ffc0], "DAIKAIJYUMONOGATARI2", 20) == 0 &&

464 
	`°∫cmp
 ((c⁄° *)&
ROM
 [0x40ffb0], "18AE6J", 6) == 0 &&

465 
	`memcmp
 (&
ROM
[0x40ffb0], &ROM [0xffb0], 0x30))

467 
	`memmove
 (&
ROM
[0x100000], ROM, 0x500000);

468 
	`memmove
 (
ROM
, &ROM[0x500000], 0x100000);

471 
I¡îÀaved
 = 
Sëtögs
.
F‹˚I¡îÀaved
 || Sëtögs.
F‹˚I¡îÀaved2
;

472 i‡(
Sëtögs
.
F‹˚LoROM
 || (!Sëtögs.
F‹˚HiROM
 && 
lo_sc‹e
 >
hi_sc‹e
))

474 
LoROM
 = 
TRUE
;

475 
HiROM
 = 
FALSE
;

478 i‡((
ROM
 [0x7fd5] & 0xf0) == 0x20 || (ROM [0x7fd5] & 0xf0) == 0x30)

480 
ROM
 [0x7fd5] & 0xf)

483 i‡(
	`°∫cmp
 ((*Ë&
ROM
 [0x7fc0], "TREASURE HUNTER G", 17) != 0)

484 
I¡îÀaved
 = 
TRUE
;

488 i‡(!
Sëtögs
.
F‹˚LoROM
 &&

489 
	`°∫cmp
 ((*Ë&
ROM
 [0x7fc0], "SUPER FORMATION SOCCE", 21) != 0 &&

490 
	`°∫cmp
 ((*Ë&
ROM
 [0x7fc0], "Star Ocean", 10) != 0)

492 
LoROM
 = 
FALSE
;

493 
HiROM
 = 
TRUE
;

498 
I¡îÀaved
 = 
TRUE
;

499 
TÆes
 = 
TRUE
;

506 i‡((
ROM
 [0xffd5] & 0xf0) == 0x20 || (ROM [0xffd5] & 0xf0) == 0x30)

508 
ROM
 [0xffd5] & 0xf)

512 
I¡îÀaved
 = 
TRUE
;

516 
LoROM
 = 
FALSE
;

517 
HiROM
 = 
TRUE
;

521 i‡(!
Sëtögs
.
F‹˚HiROM
 && !Sëtögs.
F‹˚LoROM
 &&

522 !
Sëtögs
.
F‹˚I¡îÀaved
 && !Sëtögs.
F‹˚I¡îÀaved2
 &&

523 !
Sëtögs
.
F‹˚NŸI¡îÀaved
 && !Sëtögs.
F‹˚PAL
 &&

524 !
Sëtögs
.
F‹˚Su≥rFX
 && !Sëtögs.
F‹˚DSP1
 &&

525 !
Sëtögs
.
F‹˚SA1
 && !Sëtögs.
F‹˚C4
 &&

526 !
Sëtögs
.
F‹˚SDD1
)

528 i‡(
	`°∫cmp
 ((*Ë&
ROM
 [0x7fc0], "YUYU NO QUIZ DE GO!GO!", 22) == 0)

530 
LoROM
 = 
TRUE
;

531 
HiROM
 = 
FALSE
;

532 
I¡îÀaved
 = 
FALSE
;

535 i‡(
	`°∫cmp
 ((*Ë&
ROM
 [0x7fc0], "SP MOMOTAROU DENTETSU2", 22) == 0)

537 
LoROM
 = 
TRUE
;

538 
HiROM
 = 
FALSE
;

539 
I¡îÀaved
 = 
FALSE
;

542 i‡(
CÆcuœãdSize
 == 0x100000 &&

543 
	`°∫cmp
 ((*Ë&
ROM
 [0xffc0], "WWF SUPER WRESTLEMANIA", 22) == 0)

545 
cvcou¡
;

547 
	`memmove
 (&
ROM
[0x100000] , ROM, 0x100000);

548 
cvcou¡
 = 0; cvcount < 16; cvcount++)

550 
	`memmove
 (&
ROM
[0x8000 * 
cvcou¡
], &ROM[0x10000 * cvcount + 0x100000 + 0x8000], 0x8000);

551 
	`memmove
 (&
ROM
[0x8000 * 
cvcou¡
 + 0x80000], &ROM[0x10000 * cvcount + 0x100000], 0x8000);

553 
LoROM
 = 
TRUE
;

554 
HiROM
 = 
FALSE
;

555 
	`ZîoMem‹y
 (
ROM
 + 
CÆcuœãdSize
, 
MAX_ROM_SIZE
 - CalculatedSize);

559 i‡(!
Sëtögs
.
F‹˚NŸI¡îÀaved
 && 
I¡îÀaved
)

561 
CPU
.
TrõdI¡îÀavedMode2
 = 
TRUE
;

562 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_ROM_INTERLEAVED_INFO
,

565 
nblocks
 = 
CÆcuœãdSize
 >> 16;

567 
°ï
 = 64;

569 
nblocks
 <
°ï
)

570 
°ï
 >>= 1;

572 
nblocks
 = 
°ï
;

574 
uöt8
 
blocks
 [256];

576 i‡(
TÆes
)

578 
nblocks
 = 0x60;

579 
i
 = 0; i < 0x40; i += 2)

581 
blocks
 [
i
 + 0] = (i >> 1) + 0x20;

582 
blocks
 [
i
 + 1] = (i >> 1) + 0x00;

584 
i
 = 0; i < 0x80; i += 2)

586 
blocks
 [
i
 + 0x40] = (i >> 1) + 0x80;

587 
blocks
 [
i
 + 0x41] = (i >> 1) + 0x40;

589 
LoROM
 = 
FALSE
;

590 
HiROM
 = 
TRUE
;

593 i‡(
Sëtögs
.
F‹˚I¡îÀaved2
)

595 
i
 = 0; i < 
nblocks
 * 2; i++)

597 
blocks
 [
i
] = (i & ~0x1e) | ((i & 2) << 2) | ((i & 4) << 2) |

598 ((
i
 & 8) >> 2) | ((i & 16) >> 2);

603 
boﬁ8_32
 
t
 = 
LoROM
;

605 
LoROM
 = 
HiROM
;

606 
HiROM
 = 
t
;

608 
i
 = 0; i < 
nblocks
; i++)

610 
blocks
 [
i
 * 2] = i + 
nblocks
;

611 
blocks
 [
i
 * 2 + 1] = i;

615 
uöt8
 *
tmp
 = (uöt8 *Ë
	`mÆloc
 (0x8000);

616 i‡(
tmp
)

618 
i
 = 0; i < 
nblocks
 * 2; i++)

620 
j
 = 
i
; j < 
nblocks
 * 2; j++)

622 i‡(
blocks
 [
j
] =
i
)

624 
	`memmove
 (
tmp
, &
ROM
 [
blocks
 [
j
] * 0x8000], 0x8000);

625 
	`memmove
 (&
ROM
 [
blocks
 [
j
] * 0x8000],

626 &
ROM
 [
blocks
 [
i
] * 0x8000], 0x8000);

627 
	`memmove
 (&
ROM
 [
blocks
 [
i
] * 0x8000], 
tmp
, 0x8000);

628 
uöt8
 
b
 = 
blocks
 [
j
];

629 
blocks
 [
j
] = block†[
i
];

630 
blocks
 [
i
] = 
b
;

635 
	`‰ì
 ((*Ë
tmp
);

638 
hi_sc‹e
 = 
	`Sc‹eHiROM
 (
FALSE
);

639 
lo_sc‹e
 = 
	`Sc‹eLoROM
 (
FALSE
);

641 i‡((
HiROM
 &&

642 (
lo_sc‹e
 >
hi_sc‹e
 || hi_score < 0)) ||

643 (
LoROM
 &&

644 (
hi_sc‹e
 > 
lo_sc‹e
 ||Üo_score < 0)))

646 i‡(
ªåy_cou¡
 == 0)

648 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_ROM_CONFUSING_FORMAT_INFO
,

650 
Sëtögs
.
F‹˚NŸI¡îÀaved
 = 
TRUE
;

651 
Sëtögs
.
F‹˚I¡îÀaved
 = 
FALSE
;

652 
ªåy_cou¡
++;

653 
agaö
;

657 
	`FªeSDD1D©a
 ();

658 
	`InôROM
 (
TÆes
);

660 
	`S9xLﬂdChótFûe
 (
	`S9xGëFûíame
(".cht"));

661 
	`S9xInôChótD©a
 ();

662 
	`S9xAµlyChóts
 ();

664 
	`S9xRe£t
 ();

666  (
TRUE
);

667 
	}
}

669 
	$S9xDeöãæóveMode2
 ()

671 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_ROM_INTERLEAVED_INFO
,

674 
nblocks
 = 
Mem‹y
.
CÆcuœãdSize
 >> 15;

675 
°ï
 = 64;

677 
nblocks
 <
°ï
)

678 
°ï
 >>= 1;

680 
nblocks
 = 
°ï
;

681 
uöt8
 
blocks
 [256];

682 
i
;

684 
i
 = 0; i < 
nblocks
 * 2; i++)

686 
blocks
 [
i
] = (i & ~0x1e) | ((i & 2) << 2) | ((i & 4) << 2) |

687 ((
i
 & 8) >> 2) | ((i & 16) >> 2);

690 
uöt8
 *
tmp
 = (uöt8 *Ë
	`mÆloc
 (0x8000);

692 i‡(
tmp
)

694 
i
 = 0; i < 
nblocks
 * 2; i++)

696 
j
 = 
i
; j < 
nblocks
 * 2; j++)

698 i‡(
blocks
 [
j
] =
i
)

700 
	`memmove
 (
tmp
, &
Mem‹y
.
ROM
 [
blocks
 [
j
] * 0x8000], 0x8000);

701 
	`memmove
 (&
Mem‹y
.
ROM
 [
blocks
 [
j
] * 0x8000],

702 &
Mem‹y
.
ROM
 [
blocks
 [
i
] * 0x8000], 0x8000);

703 
	`memmove
 (&
Mem‹y
.
ROM
 [
blocks
 [
i
] * 0x8000], 
tmp
, 0x8000);

704 
uöt8
 
b
 = 
blocks
 [
j
];

705 
blocks
 [
j
] = block†[
i
];

706 
blocks
 [
i
] = 
b
;

711 
	`‰ì
 ((*Ë
tmp
);

713 
Mem‹y
.
	`InôROM
 (
FALSE
);

714 
	`S9xRe£t
 ();

715 
	}
}

717 
	gCMem‹y
::
	$InôROM
 (
boﬁ8_32
 
I¡îÀaved
)

719 #i‚de‡
ZSNES_FX


720 
Su≥rFX
.
nRomB™ks
 = 
CÆcuœãdSize
 >> 15;

722 
Sëtögs
.
Mu…iPœyî5Ma°î
 = Sëtögs.
Mu…iPœyî5
;

723 
Sëtögs
.
Mou£Ma°î
 = Sëtögs.
Mou£
;

724 
Sëtögs
.
Su≥rSc›eMa°î
 = Sëtögs.
Su≥rSc›e
;

725 
Sëtögs
.
DSP1Ma°î
 = Sëtögs.
F‹˚DSP1
;

726 
Sëtögs
.
Su≥rFX
 = 
FALSE
;

727 
Sëtögs
.
SA1
 = 
FALSE
;

728 
Sëtögs
.
C4
 = 
FALSE
;

729 
Sëtögs
.
SDD1
 = 
FALSE
;

730 
Sëtögs
.
SRTC
 = 
FALSE
;

732 
	`ZîoMem‹y
 (
BlockIsRAM
, 
MEMMAP_NUM_BLOCKS
);

733 
	`ZîoMem‹y
 (
BlockIsROM
, 
MEMMAP_NUM_BLOCKS
);

735 ::
SRAM
 = SRAM;

736 
	`mem£t
 (
ROMId
, 0, 5);

737 
	`mem£t
 (
Com∑nyId
, 0, 3);

739 i‡(
Mem‹y
.
HiROM
)

741 
Mem‹y
.
SRAMSize
 = 
ROM
 [0xffd8];

742 
	`°∫˝y
 (
ROMName
, (*Ë&
ROM
[0xffc0], 
ROM_NAME_LEN
 - 1);

743 
ROMS≥ed
 = 
ROM
 [0xffd5];

744 
ROMTy≥
 = 
ROM
 [0xffd6];

745 
ROMSize
 = 
ROM
 [0xffd7];

746 
ROMChecksum
 = 
ROM
 [0xffde] + (ROM [0xffdf] << 8);

747 
ROMCom∂emítChecksum
 = 
ROM
 [0xffdc] + (ROM [0xffdd] << 8);

749 
	`memmove
 (
ROMId
, &
ROM
 [0xffb2], 4);

750 
	`memmove
 (
Com∑nyId
, &
ROM
 [0xffb0], 2);

753 i‡(!
Sëtögs
.
F‹˚NoDSP1
 &&

754 (
ROMTy≥
 & 0xf) >= 3 && (ROMType & 0xf0) == 0)

755 
Sëtögs
.
DSP1Ma°î
 = 
TRUE
;

757 
Sëtögs
.
SDD1
 = Sëtögs.
F‹˚SDD1
;

758 i‡((
ROMTy≥
 & 0xf0) == 0x40)

759 
Sëtögs
.
SDD1
 = !Sëtögs.
F‹˚NoSDD1
;

761 i‡(
Sëtögs
.
BS
)

762 
	`BSHiROMM≠
 ();

764 i‡((
ROMS≥ed
 & ~0x10) == 0x25)

765 
	`TÆesROMM≠
 (
I¡îÀaved
);

767 i‡((
ROMS≥ed
 & ~0x10) == 0x22 &&

768 
	`°∫cmp
 (
ROMName
, "Super Street Fighter", 20) != 0)

770 
	`AÕhaROMM≠
 ();

773 
	`HiROMM≠
 ();

777 
Mem‹y
.
HiROM
 = 
FALSE
;

778 
Mem‹y
.
SRAMSize
 = 
ROM
 [0x7fd8];

779 
ROMS≥ed
 = 
ROM
 [0x7fd5];

780 
ROMTy≥
 = 
ROM
 [0x7fd6];

781 
ROMSize
 = 
ROM
 [0x7fd7];

782 
ROMChecksum
 = 
ROM
 [0x7fde] + (ROM [0x7fdf] << 8);

783 
ROMCom∂emítChecksum
 = 
ROM
 [0x7fdc] + (ROM [0x7fdd] << 8);

784 
	`memmove
 (
ROMId
, &
ROM
 [0x7fb2], 4);

785 
	`memmove
 (
Com∑nyId
, &
ROM
 [0x7fb0], 2);

787 
	`°∫˝y
 (
ROMName
, (*Ë&
ROM
[0x7fc0], 
ROM_NAME_LEN
 - 1);

788 
Sëtögs
.
Su≥rFX
 = Sëtögs.
F‹˚Su≥rFX
;

790 i‡((
ROMTy≥
 & 0xf0) == 0x10)

791 
Sëtögs
.
Su≥rFX
 = !Sëtögs.
F‹˚NoSu≥rFX
;

794 i‡(!
Sëtögs
.
F‹˚NoDSP1
 &&

795 (
ROMTy≥
 & 0xf) >= 3 && (ROMType & 0xf0) == 0)

796 
Sëtögs
.
DSP1Ma°î
 = 
TRUE
;

798 
Sëtögs
.
SDD1
 = Sëtögs.
F‹˚SDD1
;

799 i‡((
ROMTy≥
 & 0xf0) == 0x40)

800 
Sëtögs
.
SDD1
 = !Sëtögs.
F‹˚NoSDD1
;

802 i‡(
Sëtögs
.
SDD1
)

803 
	`S9xLﬂdSDD1D©a
 ();

805 
Sëtögs
.
C4
 = Sëtögs.
F‹˚C4
;

806 i‡((
ROMTy≥
 & 0xf0) == 0xf0 &&

807 (
	`°∫cmp
 (
ROMName
, "MEGAMAN X", 9) == 0 ||

808 
	`°∫cmp
 (
ROMName
, "ROCKMAN X", 9) == 0))

810 
Sëtögs
.
C4
 = !Sëtögs.
F‹˚NoC4
;

813 i‡(
Sëtögs
.
Su≥rFX
)

816 
	`Su≥rFXROMM≠
 ();

817 
Sëtögs
.
Mu…iPœyî5Ma°î
 = 
FALSE
;

820 
Sëtögs
.
DSP1Ma°î
 = 
FALSE
;

821 
Sëtögs
.
SA1
 = 
FALSE
;

822 
Sëtögs
.
C4
 = 
FALSE
;

823 
Sëtögs
.
SDD1
 = 
FALSE
;

826 i‡(
Sëtögs
.
F‹˚SA1
 ||

827 (!
Sëtögs
.
F‹˚NoSA1
 && (
ROMS≥ed
 & ~0x10) == 0x23 &&

828 (
ROMTy≥
 & 0xf) > 3 && (ROMType & 0xf0) == 0x30))

830 
Sëtögs
.
SA1
 = 
TRUE
;

831 
Sëtögs
.
Mu…iPœyî5Ma°î
 = 
FALSE
;

834 
Sëtögs
.
DSP1Ma°î
 = 
FALSE
;

835 
Sëtögs
.
C4
 = 
FALSE
;

836 
Sëtögs
.
SDD1
 = 
FALSE
;

837 
	`SA1ROMM≠
 ();

840 i‡((
ROMS≥ed
 & ~0x10) == 0x25)

841 
	`TÆesROMM≠
 (
I¡îÀaved
);

843 i‡(
	`°∫cmp
 ((*Ë&
Mem‹y
.
ROM
 [0x7fc0], "SOUND NOVEL-TCOOL", 17) == 0 ||

844 
	`°∫cmp
 ((*Ë&
Mem‹y
.
ROM
 [0x7fc0], "DERBY STALLION 96", 17) == 0)

846 
	`LoROM24MBSM≠
 ();

847 
Sëtögs
.
DSP1Ma°î
 = 
FALSE
;

850 i‡(
	`°∫cmp
 ((*Ë&
Mem‹y
.
ROM
 [0x7fc0], "THOROUGHBRED BREEDER3", 21) == 0 ||

851 
	`°∫cmp
 ((*Ë&
Mem‹y
.
ROM
 [0x7fc0], "RPG-TCOOL 2", 11) == 0)

853 
	`SRAM512KLoROMM≠
 ();

854 
Sëtögs
.
DSP1Ma°î
 = 
FALSE
;

857 i‡(
	`°∫cmp
 ((*Ë&
Mem‹y
.
ROM
 [0x7fc0], "DEZAEMON ", 10) == 0)

859 
Sëtögs
.
DSP1Ma°î
 = 
FALSE
;

860 
	`SRAM1024KLoROMM≠
 ();

863 i‡(
	`°∫cmp
 ((*Ë&
Mem‹y
.
ROM
 [0x7fc0], "ADD-ON BASE CASSETE", 19) == 0)

865 
Sëtögs
.
Mu…iPœyî5Ma°î
 = 
FALSE
;

866 
Sëtögs
.
Mou£Ma°î
 = 
FALSE
;

867 
Sëtögs
.
Su≥rSc›eMa°î
 = 
FALSE
;

868 
Sëtögs
.
DSP1Ma°î
 = 
FALSE
;

869 
	`SuÁmiTurboLoROMM≠
();

870 
Mem‹y
.
SRAMSize
 = 3;

873 i‡((
ROMS≥ed
 & ~0x10) == 0x22 &&

874 
	`°∫cmp
 (
ROMName
, "Super Street Fighter", 20) != 0)

876 
	`AÕhaROMM≠
 ();

879 
	`LoROMM≠
 ();

882 
powî2
 = 0;

883 
size
 = 
CÆcuœãdSize
;

885 
size
 >>= 1)

886 
powî2
++;

888 
size
 = 1 << 
powî2
;

889 
uöt32
 
ªmaödî
 = 
CÆcuœãdSize
 - 
size
;

891 
uöt32
 
sum1
 = 0;

892 
uöt32
 
sum2
 = 0;

894 
i
;

896 
i
 = 0; i < 
size
; i++)

897 
sum1
 +
ROM
 [
i
];

899 
i
 = 0; i < (Ë
ªmaödî
; i++)

900 
sum2
 +
ROM
 [
size
 + 
i
];

902 i‡(
ªmaödî
)

905 i‡(
CÆcuœãdSize
 =0x500000 && 
Mem‹y
.
HiROM
 &&

906 
	`°∫cmp
 ((c⁄° *)&
ROM
[0xffb0], "18AZ", 4) == 0 &&

907 !
	`memcmp
(&
ROM
[0xffd5], "\x3a\xf9\x0d\x03\x00\x33\x00", 7))

908 
sum1
 +
sum2
;

910 
sum1
 +
sum2
 * (
size
 / 
ªmaödî
);

913 
sum1
 &= 0xffff;

915 i‡(
Sëtögs
.
F‹˚NTSC
)

916 
Sëtögs
.
PAL
 = 
FALSE
;

918 i‡(
Sëtögs
.
F‹˚PAL
)

919 
Sëtögs
.
PAL
 = 
TRUE
;

921 i‡(
Mem‹y
.
HiROM
)

923 
Sëtögs
.
PAL
 = 
ROM
 [0xffd9] >= 2;

925 
Sëtögs
.
PAL
 = 
ROM
 [0x7fd9] >= 2;

927 i‡(
Sëtögs
.
PAL
)

929 
Sëtögs
.
FømeTime
 = Sëtögs.
FømeTimePAL
;

930 
Mem‹y
.
ROMFømesPîSec⁄d
 = 50;

934 
Sëtögs
.
FømeTime
 = Sëtögs.
FømeTimeNTSC
;

935 
Mem‹y
.
ROMFømesPîSec⁄d
 = 60;

938 
ROMName
[
ROM_NAME_LEN
 - 1] = 0;

939 i‡(
	`°æí
 (
ROMName
))

941 *
p
 = 
ROMName
 + 
	`°æí
 (ROMName) - 1;

943 
p
 > 
ROMName
 && *(p - 1) == ' ')

944 
p
--;

945 *
p
 = 0;

948 i‡(
Sëtögs
.
Su≥rFX
)

950 
CPU
.
Mem‹y_SRAMMask
 = 0xffff;

951 
Mem‹y
.
SRAMSize
 = 16;

955 
CPU
.
Mem‹y_SRAMMask
 = 
Mem‹y
.
SRAMSize
 ?

956 ((1 << (
Mem‹y
.
SRAMSize
 + 3)) * 128) - 1 : 0;

959 
IAPU
.
O√Cy˛e
 = 
ONE_APU_CYCLE
;

960 
Sëtögs
.
Shutdown
 = Sëtögs.
ShutdownMa°î
;

962 
SëDSP
 = &
DSP1SëByã
;

963 
GëDSP
 = &
DSP1GëByã
;

965 
	`AµlyROMFixes
 ();

966 
	`•rötf
 (
ROMName
, "%s", 
	`Sa„
 (ROMName));

967 
	`•rötf
 (
ROMId
, "%s", 
	`Sa„
 (ROMId));

968 
	`•rötf
 (
Com∑nyId
, "%s", 
	`Sa„
 (CompanyId));

970 
	`•rötf
 (
Såög
, "\"%s\" [%s] %s, %s, Type: %s, Mode: %s, TV: %s, S-RAM: %s, ROMId: %s Company: %2.2s",

971 
ROMName
,

972 (
ROMChecksum
 + 
ROMCom∂emítChecksum
 != 0xffff ||

973 
ROMChecksum
 !
sum1
) ? "bad checksum" : "checksum ok",

974 
	`M≠Ty≥
 (),

975 
	`Size
 (),

976 
	`K¨tC⁄ã¡s
 (),

977 
	`M≠Mode
 (),

978 
	`TVSènd¨d
 (),

979 
	`SèticRAMSize
 (),

980 
ROMId
,

981 
Com∑nyId
);

983 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_ROM_INFO
, 
Såög
);

984 
	}
}

986 
boﬁ8_32
 
	gCMem‹y
::
	$LﬂdSRAM
 (c⁄° *
fûíame
)

988 
size
 = 
Mem‹y
.
SRAMSize
 ?

989 (1 << (
Mem‹y
.
SRAMSize
 + 3)) * 128 : 0;

991 
	`mem£t
 (
SRAM
, 
SNESGameFixes
.
SRAMInôülVÆue
, 0x20000);

993 i‡(
size
 > 0x20000)

994 
size
 = 0x20000;

996 i‡(
size
)

998 
FILE
 *
fûe
;

999 i‡((
fûe
 = 
	`f›í
(
fûíame
, "rb")))

1001 
Àn
 = 
	`‰ód
 ((*Ë::
SRAM
, 1, 0x20000, 
fûe
);

1002 
	`f˛o£
 (
fûe
);

1003 i‡(
Àn
 - 
size
 == 512)

1006 
	`memmove
 (::
SRAM
, ::SRAM + 512, 
size
);

1008 i‡(
Àn
 =
size
 + 
SRTC_SRAM_PAD
)

1010 
	`S9xSRTCPo°LﬂdSèã
 ();

1011 
	`S9xRe£tSRTC
 ();

1012 
πc
.
ödex
 = -1;

1013 
πc
.
mode
 = 
MODE_READ
;

1016 
	`S9xH¨dRe£tSRTC
 ();

1018  (
TRUE
);

1020 
	`S9xH¨dRe£tSRTC
 ();

1021  (
FALSE
);

1023 i‡(
Sëtögs
.
SDD1
)

1024 
	`S9xSDD1LﬂdLoggedD©a
 ();

1026  (
TRUE
);

1027 
	}
}

1029 
boﬁ8_32
 
	gCMem‹y
::
	$SaveSRAM
 (c⁄° *
fûíame
)

1031 
size
 = 
Mem‹y
.
SRAMSize
 ?

1032 (1 << (
Mem‹y
.
SRAMSize
 + 3)) * 128 : 0;

1033 i‡(
Sëtögs
.
SRTC
)

1035 
size
 +
SRTC_SRAM_PAD
;

1036 
	`S9xSRTCPªSaveSèã
 ();

1039 i‡(
Sëtögs
.
SDD1
)

1040 
	`S9xSDD1SaveLoggedD©a
 ();

1042 i‡(
size
 > 0x20000)

1043 
size
 = 0x20000;

1045 i‡(
size
 && *
Mem‹y
.
ROMFûíame
)

1047 
FILE
 *
fûe
;

1048 i‡((
fûe
 = 
	`f›í
 (
fûíame
, "wb")))

1050 
	`fwrôe
 ((*Ë::
SRAM
, 
size
, 1, 
fûe
);

1051 
	`f˛o£
 (
fûe
);

1052 #i‡
	`deföed
(
__löux
)

1053 
	`chown
 (
fûíame
, 
	`gëuid
 (), 
	`gëgid
 ());

1055  (
TRUE
);

1058  (
FALSE
);

1059 
	}
}

1061 
	gCMem‹y
::
	$FixROMS≥ed
 ()

1063 
c
;

1065 
c
 = 0x800; c < 0x1000; c++)

1067 i‡(
BlockIsROM
 [
c
])

1068 
Mem‹yS≥ed
 [
c
] = (
uöt8
Ë
CPU
.
Fa°ROMS≥ed
;

1070 
	}
}

1072 
	gCMem‹y
::
	$WrôePrŸe˘ROM
 ()

1074 
	`memmove
 ((*Ë
WrôeM≠
, (*Ë
M≠
,  (Map));

1075 
c
 = 0; c < 0x1000; c++)

1077 i‡(
BlockIsROM
 [
c
])

1078 
WrôeM≠
 [
c
] = (
uöt8
 *Ë
MAP_NONE
;

1080 
	}
}

1082 
	gCMem‹y
::
	$M≠RAM
 ()

1084 
c
;

1087 
c
 = 0; c < 16; c++)

1089 
M≠
 [
c
 + 0x7e0] = 
RAM
;

1090 
M≠
 [
c
 + 0x7f0] = 
RAM
 + 0x10000;

1091 
BlockIsRAM
 [
c
 + 0x7e0] = 
TRUE
;

1092 
BlockIsRAM
 [
c
 + 0x7f0] = 
TRUE
;

1093 
BlockIsROM
 [
c
 + 0x7e0] = 
FALSE
;

1094 
BlockIsROM
 [
c
 + 0x7f0] = 
FALSE
;

1098 
c
 = 0; c < 0x80; c++)

1100 
M≠
 [
c
 + 0x700] = (
uöt8
 *Ë
MAP_LOROM_SRAM
;

1101 
BlockIsRAM
 [
c
 + 0x700] = 
TRUE
;

1102 
BlockIsROM
 [
c
 + 0x700] = 
FALSE
;

1104 
	}
}

1106 
	gCMem‹y
::
	$M≠ExåaRAM
 ()

1108 
c
;

1111 
c
 = 0; c < 16; c++)

1113 
M≠
 [
c
 + 0x7e0] = 
RAM
;

1114 
M≠
 [
c
 + 0x7f0] = 
RAM
 + 0x10000;

1115 
BlockIsRAM
 [
c
 + 0x7e0] = 
TRUE
;

1116 
BlockIsRAM
 [
c
 + 0x7f0] = 
TRUE
;

1117 
BlockIsROM
 [
c
 + 0x7e0] = 
FALSE
;

1118 
BlockIsROM
 [
c
 + 0x7f0] = 
FALSE
;

1122 
c
 = 0; c < 16; c++)

1124 
M≠
 [
c
 + 0x700] = ::
SRAM
;

1125 
M≠
 [
c
 + 0x710] = ::
SRAM
 + 0x8000;

1126 
M≠
 [
c
 + 0x720] = ::
SRAM
 + 0x10000;

1127 
M≠
 [
c
 + 0x730] = ::
SRAM
 + 0x18000;

1129 
BlockIsRAM
 [
c
 + 0x700] = 
TRUE
;

1130 
BlockIsROM
 [
c
 + 0x700] = 
FALSE
;

1131 
BlockIsRAM
 [
c
 + 0x710] = 
TRUE
;

1132 
BlockIsROM
 [
c
 + 0x710] = 
FALSE
;

1133 
BlockIsRAM
 [
c
 + 0x720] = 
TRUE
;

1134 
BlockIsROM
 [
c
 + 0x720] = 
FALSE
;

1135 
BlockIsRAM
 [
c
 + 0x730] = 
TRUE
;

1136 
BlockIsROM
 [
c
 + 0x730] = 
FALSE
;

1138 
	}
}

1140 
	gCMem‹y
::
	$LoROMM≠
 ()

1142 
c
;

1143 
i
;

1146 
c
 = 0; c < 0x400; c += 16)

1148 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1149 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1150 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1151 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1153 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1154 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1155 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1156 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1157 i‡(
Sëtögs
.
DSP1Ma°î
)

1159 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_DSP
;

1160 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_DSP
;

1163 i‡(
Sëtögs
.
C4
)

1165 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_C4
;

1166 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_C4
;

1170 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
byãs0x2000
 - 0x6000;

1171 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
byãs0x2000
 - 0x6000;

1174 
i
 = 
c
 + 8; i < c + 16; i++)

1176 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [(
c
 << 11Ë% 
CÆcuœãdSize
] - 0x8000;

1177 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1180 
i
 = 
c
; i < c + 16; i++)

1182 
µu
 = 
i
 & 15;

1184 
Mem‹yS≥ed
 [
i
] =

1185 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1189 i‡(
Sëtögs
.
DSP1Ma°î
)

1192 
c
 = 0x300; c < 0x400; c += 16)

1194 
i
 = 
c
 + 8; i < c + 16; i++)

1196 
M≠
 [
i
] = M≠ [ò+ 0x800] = (
uöt8
 *Ë
MAP_DSP
;

1197 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
FALSE
;

1203 
c
 = 0; c < 0x400; c += 16)

1205 
i
 = 
c
; i < c + 8; i++)

1206 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11Ë% 
CÆcuœãdSize
];

1208 
i
 = 
c
 + 8; i < c + 16; i++)

1209 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [((
c
 << 11Ë+ 0x200000Ë% 
CÆcuœãdSize
 - 0x8000];

1211 
i
 = 
c
; i < c + 16; i++)

1213 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1214 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1218 i‡(
Sëtögs
.
DSP1Ma°î
)

1220 
c
 = 0; c < 0x100; c++)

1222 
M≠
 [
c
 + 0xe00] = (
uöt8
 *Ë
MAP_DSP
;

1223 
Mem‹yS≥ed
 [
c
 + 0xe00] = 
SLOW_ONE_CYCLE
;

1224 
BlockIsROM
 [
c
 + 0xe00] = 
FALSE
;

1227 
	`M≠RAM
 ();

1228 
	`WrôePrŸe˘ROM
 ();

1229 
	}
}

1231 
	gCMem‹y
::
	$HiROMM≠
 ()

1233 
c
;

1234 
i
;

1237 
c
 = 0; c < 0x400; c += 16)

1239 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1240 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1241 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1242 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1244 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1245 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1246 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1247 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1248 i‡(
Sëtögs
.
DSP1Ma°î
)

1250 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_DSP
;

1251 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_DSP
;

1255 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1256 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1259 
i
 = 
c
 + 8; i < c + 16; i++)

1261 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1262 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1265 
i
 = 
c
; i < c + 16; i++)

1267 
µu
 = 
i
 & 15;

1269 
Mem‹yS≥ed
 [
i
] =

1270 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1275 
c
 = 0; c < 16; c++)

1277 
M≠
 [0x306 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1278 
M≠
 [0x307 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1279 
M≠
 [0xb06 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1280 
M≠
 [0xb07 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1281 
BlockIsRAM
 [0x306 + (
c
 << 4)] = 
TRUE
;

1282 
BlockIsRAM
 [0x307 + (
c
 << 4)] = 
TRUE
;

1283 
BlockIsRAM
 [0xb06 + (
c
 << 4)] = 
TRUE
;

1284 
BlockIsRAM
 [0xb07 + (
c
 << 4)] = 
TRUE
;

1288 
c
 = 0; c < 0x400; c += 16)

1290 
i
 = 
c
; i < c + 16; i++)

1292 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1293 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1294 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1298 
	`M≠RAM
 ();

1299 
	`WrôePrŸe˘ROM
 ();

1300 
	}
}

1302 
	gCMem‹y
::
	$TÆesROMM≠
 (
boﬁ8_32
 
I¡îÀaved
)

1304 
c
;

1305 
i
;

1307 
uöt32
 
OFFSET0
 = 0x400000;

1308 
uöt32
 
OFFSET1
 = 0x400000;

1309 
uöt32
 
OFFSET2
 = 0x000000;

1311 i‡(
I¡îÀaved
)

1313 
OFFSET0
 = 0x000000;

1314 
OFFSET1
 = 0x000000;

1315 
OFFSET2
 = 0x200000;

1319 
c
 = 0; c < 0x400; c += 16)

1321 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1322 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1323 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1324 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1326 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1327 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1328 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1329 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1330 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1331 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1332 
i
 = 
c
 + 8; i < c + 16; i++)

1334 
M≠
 [
i
] = &
ROM
 [((
c
 << 12Ë+ 
OFFSET0
Ë% 
CÆcuœãdSize
];

1335 
M≠
 [
i
 + 0x800] = &
ROM
 [((
c
 << 12Ë+ 
OFFSET0
Ë% 
CÆcuœãdSize
];

1336 
BlockIsROM
 [
i
] = 
TRUE
;

1337 
BlockIsROM
 [
i
 + 0x800] = 
TRUE
;

1340 
i
 = 
c
; i < c + 16; i++)

1342 
µu
 = 
i
 & 15;

1344 
Mem‹yS≥ed
 [
i
] =

1345 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1350 
c
 = 0; c < 16; c++)

1352 
M≠
 [0x306 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1353 
M≠
 [0x307 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1354 
M≠
 [0xb06 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1355 
M≠
 [0xb07 + (
c
 << 4)] = (
uöt8
 *Ë
MAP_HIROM_SRAM
;

1356 
BlockIsRAM
 [0x306 + (
c
 << 4)] = 
TRUE
;

1357 
BlockIsRAM
 [0x307 + (
c
 << 4)] = 
TRUE
;

1358 
BlockIsRAM
 [0xb06 + (
c
 << 4)] = 
TRUE
;

1359 
BlockIsRAM
 [0xb07 + (
c
 << 4)] = 
TRUE
;

1363 
c
 = 0; c < 0x400; c += 16)

1365 
i
 = 
c
; i < c + 8; i++)

1367 
M≠
 [
i
 + 0x400] = &
ROM
 [((
c
 << 12Ë+ 
OFFSET1
Ë% 
CÆcuœãdSize
];

1368 
M≠
 [
i
 + 0x408] = &
ROM
 [((
c
 << 12Ë+ 
OFFSET1
Ë% 
CÆcuœãdSize
];

1369 
M≠
 [
i
 + 0xc00] = &
ROM
 [((
c
 << 12Ë+ 
OFFSET2
Ë% 
CÆcuœãdSize
];

1370 
M≠
 [
i
 + 0xc08] = &
ROM
 [((
c
 << 12Ë+ 
OFFSET2
Ë% 
CÆcuœãdSize
];

1371 
BlockIsROM
 [
i
 + 0x400] = 
TRUE
;

1372 
BlockIsROM
 [
i
 + 0x408] = 
TRUE
;

1373 
BlockIsROM
 [
i
 + 0xc00] = 
TRUE
;

1374 
BlockIsROM
 [
i
 + 0xc08] = 
TRUE
;

1375 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1376 
Mem‹yS≥ed
 [
i
 + 0x408] = Mem‹yS≥ed [ò+ 0xc08] = 
SLOW_ONE_CYCLE
;

1379 
	`M≠RAM
 ();

1380 
	`WrôePrŸe˘ROM
 ();

1381 
	}
}

1383 
	gCMem‹y
::
	$AÕhaROMM≠
 ()

1385 
c
;

1386 
i
;

1389 
c
 = 0; c < 0x400; c += 16)

1391 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1392 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1393 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1394 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1396 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1397 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1398 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1399 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1400 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_DSP
;

1401 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_DSP
;

1403 
i
 = 
c
 + 8; i < c + 16; i++)

1405 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [
c
 << 11] - 0x8000;

1406 
BlockIsROM
 [
i
] = 
TRUE
;

1409 
i
 = 
c
; i < c + 16; i++)

1411 
µu
 = 
i
 & 15;

1413 
Mem‹yS≥ed
 [
i
] =

1414 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1420 
c
 = 0; c < 0x400; c += 16)

1422 
i
 = 
c
; i < c + 16; i++)

1424 
M≠
 [
i
 + 0x400] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1425 
M≠
 [
i
 + 0xc00] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1426 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1427 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1431 
	`M≠RAM
 ();

1432 
	`WrôePrŸe˘ROM
 ();

1433 
	}
}

1435 
	gCMem‹y
::
	$Su≥rFXROMM≠
 ()

1437 
c
;

1438 
i
;

1441 
c
 = 0; c < 0x400; c += 16)

1443 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1444 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1445 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1446 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1448 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1449 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1450 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1451 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1452 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_DSP
;

1453 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_DSP
;

1454 
i
 = 
c
 + 8; i < c + 16; i++)

1456 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [
c
 << 11] - 0x8000;

1457 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1460 
i
 = 
c
; i < c + 8; i++)

1462 
µu
 = 
i
 & 15;

1464 
Mem‹yS≥ed
 [
i
] =

1465 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1470 
c
 = 0; c < 0x400; c += 16)

1472 
i
 = 
c
; i < c + 16; i++)

1474 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1475 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1476 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1481 
c
 = 0; c < 16; c++)

1483 
M≠
 [
c
 + 0x7e0] = 
RAM
;

1484 
M≠
 [
c
 + 0x7f0] = 
RAM
 + 0x10000;

1485 
BlockIsRAM
 [
c
 + 0x7e0] = 
TRUE
;

1486 
BlockIsRAM
 [
c
 + 0x7f0] = 
TRUE
;

1487 
BlockIsROM
 [
c
 + 0x7e0] = 
FALSE
;

1488 
BlockIsROM
 [
c
 + 0x7f0] = 
FALSE
;

1492 
c
 = 0; c < 32; c++)

1494 
M≠
 [
c
 + 0x700] = ::
SRAM
 + (((c >> 4) & 1) << 16);

1495 
BlockIsRAM
 [
c
 + 0x700] = 
TRUE
;

1496 
BlockIsROM
 [
c
 + 0x700] = 
FALSE
;

1500 
c
 = 0; c < 0x40; c++)

1502 
M≠
 [0x006 + (
c
 << 4)] = (
uöt8
 *Ë::
SRAM
 - 0x6000;

1503 
M≠
 [0x007 + (
c
 << 4)] = (
uöt8
 *Ë::
SRAM
 - 0x6000;

1504 
M≠
 [0x806 + (
c
 << 4)] = (
uöt8
 *Ë::
SRAM
 - 0x6000;

1505 
M≠
 [0x807 + (
c
 << 4)] = (
uöt8
 *Ë::
SRAM
 - 0x6000;

1506 
BlockIsRAM
 [0x006 + (
c
 << 4)] = 
TRUE
;

1507 
BlockIsRAM
 [0x007 + (
c
 << 4)] = 
TRUE
;

1508 
BlockIsRAM
 [0x806 + (
c
 << 4)] = 
TRUE
;

1509 
BlockIsRAM
 [0x807 + (
c
 << 4)] = 
TRUE
;

1513 
c
 = 0; c < 64; c++)

1515 
	`memmove
 (&
ROM
 [0x200000 + 
c
 * 0x10000], &ROM [c * 0x8000], 0x8000);

1516 
	`memmove
 (&
ROM
 [0x208000 + 
c
 * 0x10000], &ROM [c * 0x8000], 0x8000);

1519 
	`WrôePrŸe˘ROM
 ();

1520 
	}
}

1522 
	gCMem‹y
::
	$SA1ROMM≠
 ()

1524 
c
;

1525 
i
;

1528 
c
 = 0; c < 0x400; c += 16)

1530 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1531 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1532 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1533 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1535 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1536 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë&
Mem‹y
.
FûlRAM
 [0x3000] - 0x3000;

1537 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1538 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1539 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_BWRAM
;

1540 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_BWRAM
;

1541 
i
 = 
c
 + 8; i < c + 16; i++)

1543 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [
c
 << 11] - 0x8000;

1544 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1547 
i
 = 
c
; i < c + 16; i++)

1549 
µu
 = 
i
 & 15;

1551 
Mem‹yS≥ed
 [
i
] =

1552 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1557 
c
 = 0; c < 0x400; c += 16)

1559 
i
 = 
c
; i < c + 16; i++)

1560 
M≠
 [
i
 + 0x400] = (
uöt8
 *Ë&
SRAM
 [(
c
 << 12) & 0x1ffff];

1562 
i
 = 
c
; i < c + 16; i++)

1564 
Mem‹yS≥ed
 [
i
 + 0x400] = 
SLOW_ONE_CYCLE
;

1565 
BlockIsROM
 [
i
 + 0x400] = 
FALSE
;

1570 
c
 = 0; c < 0x400; c += 16)

1572 
i
 = 
c
; i < c + 16; i++)

1574 
M≠
 [
i
 + 0xc00] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1575 
Mem‹yS≥ed
 [
i
 + 0xc00] = 
SLOW_ONE_CYCLE
;

1576 
BlockIsROM
 [
i
 + 0xc00] = 
TRUE
;

1580 
c
 = 0; c < 16; c++)

1582 
M≠
 [
c
 + 0x7e0] = 
RAM
;

1583 
M≠
 [
c
 + 0x7f0] = 
RAM
 + 0x10000;

1584 
BlockIsRAM
 [
c
 + 0x7e0] = 
TRUE
;

1585 
BlockIsRAM
 [
c
 + 0x7f0] = 
TRUE
;

1586 
BlockIsROM
 [
c
 + 0x7e0] = 
FALSE
;

1587 
BlockIsROM
 [
c
 + 0x7f0] = 
FALSE
;

1589 
	`WrôePrŸe˘ROM
 ();

1592 
	`memmove
 ((*Ë
SA1
.
WrôeM≠
, (*) WriteMap,  (WriteMap));

1593 
	`memmove
 ((*Ë
SA1
.
M≠
, (*) Map,  (Map));

1596 
c
 = 0; c < 0x400; c += 16)

1598 
SA1
.
M≠
 [
c
 + 0] = SA1.M≠ [¯+ 0x800] = &
Mem‹y
.
FûlRAM
 [0x3000];

1599 
SA1
.
M≠
 [
c
 + 1] = SA1.M≠ [¯+ 0x801] = (
uöt8
 *Ë
MAP_NONE
;

1600 
SA1
.
WrôeM≠
 [
c
 + 0] = SA1.WrôeM≠ [¯+ 0x800] = &
Mem‹y
.
FûlRAM
 [0x3000];

1601 
SA1
.
WrôeM≠
 [
c
 + 1] = SA1.WrôeM≠ [¯+ 0x801] = (
uöt8
 *Ë
MAP_NONE
;

1605 
c
 = 0; c < 0x100; c++)

1606 
SA1
.
M≠
 [
c
 + 0x600] = SA1.
WrôeM≠
 [¯+ 0x600] = (
uöt8
 *Ë
MAP_BWRAM_BITMAP
;

1608 
BWRAM
 = 
SRAM
;

1609 
	}
}

1611 
	gCMem‹y
::
	$LoROM24MBSM≠
 ()

1613 
c
;

1614 
i
;

1617 
c
 = 0; c < 0x400; c += 16)

1619 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1620 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1621 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1622 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1624 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1625 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1626 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1627 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1628 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1629 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1631 
i
 = 
c
 + 8; i < c + 16; i++)

1633 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [
c
 << 11] - 0x8000;

1634 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1637 
i
 = 
c
; i < c + 16; i++)

1639 
µu
 = 
i
 & 15;

1641 
Mem‹yS≥ed
 [
i
] =

1642 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1647 
c
 = 0; c < 0x200; c += 16)

1649 
M≠
 [
c
 + 0x800] = 
RAM
;

1650 
M≠
 [
c
 + 0x801] = 
RAM
;

1651 
BlockIsRAM
 [
c
 + 0x800] = 
TRUE
;

1652 
BlockIsRAM
 [
c
 + 0x801] = 
TRUE
;

1654 
M≠
 [
c
 + 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1655 
M≠
 [
c
 + 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1656 
M≠
 [
c
 + 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1657 
M≠
 [
c
 + 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1658 
M≠
 [
c
 + 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1659 
M≠
 [
c
 + 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1661 
i
 = 
c
 + 8; i < c + 16; i++)

1663 
M≠
 [
i
 + 0x800] = &
ROM
 [
c
 << 11] - 0x8000 + 0x200000;

1664 
BlockIsROM
 [
i
 + 0x800] = 
TRUE
;

1667 
i
 = 
c
; i < c + 16; i++)

1669 
µu
 = 
i
 & 15;

1671 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1676 
c
 = 0; c < 0x400; c += 16)

1678 
i
 = 
c
; i < c + 8; i++)

1679 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11) + 0x200000];

1681 
i
 = 
c
 + 8; i < c + 16; i++)

1682 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11) + 0x200000 - 0x8000];

1684 
i
 = 
c
; i < c + 16; i++)

1686 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1687 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1691 
	`M≠ExåaRAM
 ();

1692 
	`WrôePrŸe˘ROM
 ();

1693 
	}
}

1695 
	gCMem‹y
::
	$SuÁmiTurboLoROMM≠
 ()

1697 
c
;

1698 
i
;

1701 
c
 = 0; c < 0x400; c += 16)

1703 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1704 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1705 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1706 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1708 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1709 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1710 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1711 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1712 i‡(
Sëtögs
.
DSP1Ma°î
)

1714 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_DSP
;

1715 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_DSP
;

1719 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1720 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1722 
i
 = 
c
 + 8; i < c + 16; i++)

1724 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [
c
 << 11] - 0x8000;

1725 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1728 
i
 = 
c
; i < c + 16; i++)

1730 
µu
 = 
i
 & 15;

1732 
Mem‹yS≥ed
 [
i
] =

1733 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1737 i‡(
Sëtögs
.
DSP1Ma°î
)

1740 
c
 = 0x300; c < 0x400; c += 16)

1742 
i
 = 
c
 + 8; i < c + 16; i++)

1744 
M≠
 [
i
] = M≠ [ò+ 0x800] = (
uöt8
 *Ë
MAP_DSP
;

1745 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
FALSE
;

1751 
c
 = 0; c < 0x400; c += 16)

1753 
i
 = 
c
; i < c + 8; i++)

1754 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11) + 0x200000];

1756 
i
 = 
c
 + 8; i < c + 16; i++)

1757 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11) + 0x200000 - 0x8000];

1759 
i
 = 
c
; i < c + 16; i++)

1761 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1762 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1766 i‡(
Sëtögs
.
DSP1Ma°î
)

1768 
c
 = 0; c < 0x100; c++)

1770 
M≠
 [
c
 + 0xe00] = (
uöt8
 *Ë
MAP_DSP
;

1771 
Mem‹yS≥ed
 [
c
 + 0xe00] = 
SLOW_ONE_CYCLE
;

1772 
BlockIsROM
 [
c
 + 0xe00] = 
FALSE
;

1777 
c
 = 0; c < 16; c++)

1779 
M≠
 [
c
 + 0x7e0] = 
RAM
;

1780 
M≠
 [
c
 + 0x7f0] = 
RAM
 + 0x10000;

1781 
BlockIsRAM
 [
c
 + 0x7e0] = 
TRUE
;

1782 
BlockIsRAM
 [
c
 + 0x7f0] = 
TRUE
;

1783 
BlockIsROM
 [
c
 + 0x7e0] = 
FALSE
;

1784 
BlockIsROM
 [
c
 + 0x7f0] = 
FALSE
;

1788 
c
 = 0; c < 0x80; c++)

1790 
M≠
 [
c
 + 0x600] = (
uöt8
 *Ë
MAP_LOROM_SRAM
;

1791 
BlockIsRAM
 [
c
 + 0x600] = 
TRUE
;

1792 
BlockIsROM
 [
c
 + 0x600] = 
FALSE
;

1795 
	`WrôePrŸe˘ROM
 ();

1796 
	}
}

1798 
	gCMem‹y
::
	$SRAM512KLoROMM≠
 ()

1800 
c
;

1801 
i
;

1804 
c
 = 0; c < 0x400; c += 16)

1806 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1807 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1808 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1809 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1811 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1812 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1813 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1814 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
MAP_CPU
;

1815 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1816 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1818 
i
 = 
c
 + 8; i < c + 16; i++)

1820 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [
c
 << 11] - 0x8000;

1821 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1824 
i
 = 
c
; i < c + 16; i++)

1826 
µu
 = 
i
 & 15;

1828 
Mem‹yS≥ed
 [
i
] =

1829 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1834 
c
 = 0; c < 0x400; c += 16)

1836 
i
 = 
c
; i < c + 8; i++)

1837 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11) + 0x200000];

1839 
i
 = 
c
 + 8; i < c + 16; i++)

1840 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 11) + 0x200000 - 0x8000];

1842 
i
 = 
c
; i < c + 16; i++)

1844 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1845 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1849 
	`M≠ExåaRAM
 ();

1850 
	`WrôePrŸe˘ROM
 ();

1851 
	}
}

1853 
	gCMem‹y
::
	$SRAM1024KLoROMM≠
 ()

1855 
c
;

1856 
i
;

1859 
c
 = 0; c < 0x400; c += 16)

1861 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = M≠ [¯+ 0x400] = M≠ [¯+ 0xc00] = 
RAM
;

1862 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = M≠ [¯+ 0x401] = M≠ [¯+ 0xc01] = 
RAM
;

1863 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = BlockIsRAM [¯+ 0x400] = BlockIsRAM [¯+ 0xc00] = 
TRUE
;

1864 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = BlockIsRAM [¯+ 0x401] = BlockIsRAM [¯+ 0xc01] = 
TRUE
;

1866 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = M≠ [¯+ 0x402] = M≠ [¯+ 0xc02] = (
uöt8
 *Ë
MAP_PPU
;

1867 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = M≠ [¯+ 0x403] = M≠ [¯+ 0xc03] = (
uöt8
 *Ë
MAP_PPU
;

1868 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = M≠ [¯+ 0x404] = M≠ [¯+ 0xc04] = (
uöt8
 *Ë
MAP_CPU
;

1869 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = M≠ [¯+ 0x405] = M≠ [¯+ 0xc05] = (
uöt8
 *Ë
MAP_CPU
;

1870 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = M≠ [¯+ 0x406] = M≠ [¯+ 0xc06] = (
uöt8
 *Ë
MAP_NONE
;

1871 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = M≠ [¯+ 0x407] = M≠ [¯+ 0xc07] = (
uöt8
 *Ë
MAP_NONE
;

1872 
i
 = 
c
 + 8; i < c + 16; i++)

1874 
M≠
 [
i
] = M≠ [ò+ 0x800] = M≠ [ò+ 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [
c
 << 11] - 0x8000;

1875 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = BlockIsROM [ò+ 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1878 
i
 = 
c
; i < c + 16; i++)

1880 
µu
 = 
i
 & 15;

1882 
Mem‹yS≥ed
 [
i
] = MemorySpeed [i + 0x800] =

1883 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1887 
	`M≠ExåaRAM
 ();

1888 
	`WrôePrŸe˘ROM
 ();

1889 
	}
}

1891 
	gCMem‹y
::
	$BSHiROMM≠
 ()

1893 
c
;

1894 
i
;

1897 
c
 = 0; c < 0x400; c += 16)

1899 
M≠
 [
c
 + 0] = M≠ [¯+ 0x800] = 
RAM
;

1900 
BlockIsRAM
 [
c
 + 0] = BlockIsRAM [¯+ 0x800] = 
TRUE
;

1901 
M≠
 [
c
 + 1] = M≠ [¯+ 0x801] = 
RAM
;

1902 
BlockIsRAM
 [
c
 + 1] = BlockIsRAM [¯+ 0x801] = 
TRUE
;

1904 
M≠
 [
c
 + 2] = M≠ [¯+ 0x802] = (
uöt8
 *Ë
MAP_PPU
;

1905 
M≠
 [
c
 + 3] = M≠ [¯+ 0x803] = (
uöt8
 *Ë
MAP_PPU
;

1906 
M≠
 [
c
 + 4] = M≠ [¯+ 0x804] = (
uöt8
 *Ë
MAP_CPU
;

1908 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = (
uöt8
 *Ë
SRAM
;

1909 
BlockIsRAM
 [
c
 + 5] = BlockIsRAM [¯+ 0x805] = 
TRUE
;

1910 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = (
uöt8
 *Ë
MAP_NONE
;

1911 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = (
uöt8
 *Ë
MAP_NONE
;

1913 
i
 = 
c
 + 8; i < c + 16; i++)

1915 
M≠
 [
i
] = M≠ [ò+ 0x800] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1916 
BlockIsROM
 [
i
] = BlockIsROM [ò+ 0x800] = 
TRUE
;

1919 
i
 = 
c
; i < c + 16; i++)

1921 
µu
 = 
i
 & 15;

1923 
Mem‹yS≥ed
 [
i
] =

1924 
Mem‹yS≥ed
 [
i
 + 0x800] = 
µu
 >2 &&Öpu <3 ? 
ONE_CYCLE
 : 
SLOW_ONE_CYCLE
;

1930 
c
 = 0x600; c < 0x7e0; c += 16)

1932 
i
 = 
c
; i < c + 8; i++)

1934 
M≠
 [
i
] = &
ROM
 [0x400000 + (
c
 << 11)];

1935 
BlockIsRAM
 [
i
] = 
TRUE
;

1937 
i
 = 
c
 + 8; i < c + 16; i++)

1939 
M≠
 [
i
] = &
ROM
 [0x400000 + (
c
 << 11) - 0x8000];

1940 
BlockIsRAM
 [
i
] = 
TRUE
;

1945 
c
 = 0; c < 0x400; c += 16)

1947 
i
 = 
c
; i < c + 16; i++)

1949 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
 [(
c
 << 12Ë% 
CÆcuœãdSize
];

1950 
Mem‹yS≥ed
 [
i
 + 0x400] = Mem‹yS≥ed [ò+ 0xc00] = 
SLOW_ONE_CYCLE
;

1951 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
TRUE
;

1955 
	`M≠RAM
 ();

1956 
	`WrôePrŸe˘ROM
 ();

1957 
	}
}

1959 c⁄° *
	gCMem‹y
::
	$TVSènd¨d
 ()

1961  (
Sëtögs
.
PAL
 ? "PAL" : "NTSC");

1962 
	}
}

1964 c⁄° *
	gCMem‹y
::
	$S≥ed
 ()

1966  (
ROMS≥ed
 & 0x10 ? "120ns" : "200ns");

1967 
	}
}

1969 c⁄° *
	gCMem‹y
::
	$M≠Ty≥
 ()

1971  (
HiROM
 ? "HiROM" : "LoROM");

1972 
	}
}

1974 c⁄° *
	gCMem‹y
::
	$SèticRAMSize
 ()

1976 
tmp
 [20];

1978 i‡(
Mem‹y
.
SRAMSize
 > 16)

1980 
	`•rötf
 (
tmp
, "%dKb", (
CPU
.
Mem‹y_SRAMMask
 + 1) / 1024);

1981  (
tmp
);

1982 
	}
}

1984 c⁄° *
	gCMem‹y
::
	$Size
 ()

1986 
tmp
 [20];

1988 i‡(
ROMSize
 < 7 || ROMSize - 7 > 23)

1990 
	`•rötf
 (
tmp
, "%dMbôs", 1 << (
ROMSize
 - 7));

1991  (
tmp
);

1992 
	}
}

1994 c⁄° *
	gCMem‹y
::
	$K¨tC⁄ã¡s
 ()

1996 
tmp
 [30];

1997 c⁄° *
CoPro
 [16] = {

2002 c⁄° *
C⁄ã¡s
 [3] = {

2005 i‡(
ROMTy≥
 == 0)

2008 
	`•rötf
 (
tmp
, "%s", 
C⁄ã¡s
 [(
ROMTy≥
 & 0xf) % 3]);

2010 i‡((
ROMTy≥
 & 0xf) >= 3)

2011 
	`•rötf
 (
tmp
, "%s+%s",Åmp, 
CoPro
 [(
ROMTy≥
 & 0xf0) >> 4]);

2013  (
tmp
);

2014 
	}
}

2016 c⁄° *
	gCMem‹y
::
	$M≠Mode
 ()

2018 
tmp
 [4];

2019 
	`•rötf
 (
tmp
, "%02x", 
ROMS≥ed
 & ~0x10);

2020  (
tmp
);

2021 
	}
}

2023 c⁄° *
	gCMem‹y
::
	$ROMID
 ()

2025  (
ROMId
);

2026 
	}
}

2028 
	gCMem‹y
::
	$AµlyROMFixes
 ()

2030 
DSP1
.
vîsi⁄
 = 0;

2031 i‡(
	`°∫cmp
(
ROMName
, "DUNGEON MASTER", 14) == 0)

2033 
DSP1
.
vîsi⁄
 = 1;

2034 
SëDSP
=&
DSP2SëByã
;

2035 
GëDSP
=&
DSP2GëByã
;

2039 
Sëtögs
.
SRTC
 = ((
ROMTy≥
 & 0xf0) >> 4) == 5;

2041 
Sëtögs
.
SåikeGu¬îOff£tHack
 = 
	`°rcmp
 (
ROMName
, "STRIKE GUNNER") == 0 ? 7 : 0;

2043 
CPU
.
NMITriggîPoöt
 = 4;

2044 i‡(
	`°rcmp
 (
ROMName
, "CACOMA KNIGHT") == 0)

2045 
CPU
.
NMITriggîPoöt
 = 25;

2048 i‡(
	`°rcmp
 (
ROMName
, "TETRIS&Dr.MARIO") == 0 ||

2049 
	`°rcmp
 (
ROMName
, "JIGSAW PARTY") == 0 ||

2050 
	`°rcmp
 (
ROMName
, "SUPER PICROSS") == 0 ||

2051 
	`°rcmp
 (
ROMName
, "KIRBY NO KIRA KIZZU") == 0 ||

2052 
	`°rcmp
 (
ROMName
, "BLOCK") == 0 ||

2053 
	`°∫cmp
 (
ROMName
, "SUPER BOMBLISS", 14) == 0 ||

2054 
	`°rcmp
 (
ROMId
, "ABOJ") == 0)

2056 
Sëtögs
.
Mu…iPœyî5Ma°î
 = 
FALSE
;

2057 
Sëtögs
.
Mou£Ma°î
 = 
FALSE
;

2058 
Sëtögs
.
Su≥rSc›eMa°î
 = 
FALSE
;

2063 i‡(
	`°rcmp
 (
ROMName
, "EARTHWORM JIM 2") == 0 ||

2064 
	`°rcmp
 (
ROMName
, "PRIMAL RAGE") == 0 ||

2065 
	`°rcmp
 (
ROMName
, "CLAY FIGHTER") == 0 ||

2066 
	`°rcmp
 (
ROMName
, "ClayFighter 2") == 0 ||

2067 
	`°∫ˇ£cmp
 (
ROMName
, "MADDEN", 6) == 0 ||

2068 
	`°∫cmp
 (
ROMName
, "NHL", 3) == 0 ||

2069 
	`°rcmp
 (
ROMName
, "WeaponLord") == 0)

2071 
Sëtögs
.
Shutdown
 = 
FALSE
;

2076 i‡(
	`°rcmp
 (
ROMId
, "CQ ") == 0 ||

2078 
	`°∫cmp
 (
ROMId
, "JG", 2) == 0 ||

2079 
	`°rcmp
 (
ROMName
, "GAIA GENSOUKI 1 JPN") == 0)

2081 
IAPU
.
O√Cy˛e
 = 13;

2082 
Sëtögs
.
APUE«bÀd
 |= 2;

2083 
CPU
.
APU_APUExecutög
 |= 2;

2087 i‡(
	`°rcmp
 (
ROMId
, "AVCJ") == 0 ||

2089 
	`°∫cmp
 (
ROMId
, "ARF", 3) == 0 ||

2091 
	`°∫cmp
 (
ROMId
, "ATV", 3) == 0 ||

2093 
	`°∫ˇ£cmp
 (
ROMName
, "ActRaiser", 9) == 0 ||

2095 
	`°rcmp
 (
ROMName
, "SOULBLAZER - 1 USA") == 0 ||

2096 
	`°rcmp
 (
ROMName
, "SOULBLADER - 1") == 0 ||

2097 
	`°∫cmp
 (
ROMName
, "SOULBLAZER 1",12) == 0 ||

2099 
	`°∫cmp
 (
ROMId
, "AQT", 3) == 0 ||

2101 
	`°∫cmp
 (
ROMId
, "E9 ", 3) == 0 ||

2102 
	`°rcmp
 (
ROMName
, "SLAP STICK 1 JPN") == 0 ||

2104 
	`°∫cmp
 (
ROMId
, "APR", 3) == 0 ||

2106 
	`°∫cmp
 (
ROMId
, "A4B", 3) == 0 ||

2108 
	`°∫cmp
 (
ROMId
, "Y7 ", 3) == 0 ||

2109 
	`°∫cmp
 (
ROMId
, "Y9 ", 3) == 0 ||

2111 
	`°∫cmp
 (
ROMId
, "APB", 3) == 0 ||

2112 ((
	`°∫cmp
 (
ROMName
, "Parlor", 6) == 0 ||

2113 
	`°rcmp
 (
ROMName
, "HEIWA Parlor!Mini8") == 0 ||

2114 
	`°∫cmp
 (
ROMName
, "SANKYO Fever! Ã®∞ ﬁ∞!", 21) == 0) &&

2115 
	`°rcmp
 (
Com∑nyId
, "A0") == 0) ||

2116 
	`°rcmp
 (
ROMName
, "DARK KINGDOM") == 0 ||

2117 
	`°rcmp
 (
ROMName
, "ZAN3 SFC") == 0 ||

2118 
	`°rcmp
 (
ROMName
, "HIOUDEN") == 0 ||

2119 
	`°rcmp
 (
ROMName
, "√›º…≥¿") == 0 ||

2120 
	`°rcmp
 (
ROMName
, "FORTUNE QUEST") == 0 ||

2121 
	`°rcmp
 (
ROMName
, "FISHING TO BASSING") == 0 ||

2122 
	`°∫cmp
 (
ROMName
, "TokyoDome '95Battle 7", 21) == 0 ||

2123 
	`°rcmp
 (
ROMName
, "OHMONO BLACKBASS") == 0)

2125 
IAPU
.
O√Cy˛e
 = 15;

2127 
Sëtögs
.
APUE«bÀd
 |= 2;

2128 
CPU
.
APU_APUExecutög
 |= 2;

2131 i‡(
	`°rcmp
 (
ROMName
, "BATMAN--REVENGE JOKER") == 0)

2133 
Mem‹y
.
HiROM
 = 
FALSE
;

2134 
Mem‹y
.
LoROM
 = 
TRUE
;

2135 
	`LoROMM≠
 ();

2137 
Sëtögs
.
SèrfoxHack
 = 
	`°rcmp
 (
ROMName
, "STAR FOX") == 0 ||

2138 
	`°rcmp
 (
ROMName
, "STAR WING") == 0;

2139 
Sëtögs
.
WöãrGﬁd
 = 
	`°rcmp
 (
ROMName
, "FX SKIING NINTENDO 96") == 0 ||

2140 
	`°rcmp
 (
ROMName
, "DIRT RACER") == 0 ||

2141 
	`°rcmp
 (
ROMName
, "Stunt Race FX") == 0 ||

2142 
Sëtögs
.
SèrfoxHack
;

2143 
Sëtögs
.
ChuckRock
 = 
	`°rcmp
 (
ROMName
, "CHUCK ROCK") == 0;

2144 
Sëtögs
.
Dez´m⁄
 = 
	`°rcmp
 (
ROMName
, "DEZAEMON") == 0;

2146 i‡(
	`°rcmp
 (
ROMName
, "RADICAL DREAMERS") == 0 ||

2147 
	`°rcmp
 (
ROMName
, "TREASURE CONFLIX") == 0)

2149 
c
;

2151 
c
 = 0; c < 0x80; c++)

2153 
M≠
 [
c
 + 0x700] = 
ROM
 + 0x200000 + 0x1000 * (c & 0xf0);

2154 
BlockIsRAM
 [
c
 + 0x700] = 
TRUE
;

2155 
BlockIsROM
 [
c
 + 0x700] = 
FALSE
;

2157 
c
 = 0; c < 0x400; c += 16)

2159 
M≠
 [
c
 + 5] = M≠ [¯+ 0x805] = 
ROM
 + 0x300000;

2160 
BlockIsRAM
 [
c
 + 5] = BlockIsRAM [¯+ 0x805] = 
TRUE
;

2162 
	`WrôePrŸe˘ROM
 ();

2165 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 *

2166 
Sëtögs
.
Cy˛esPî˚¡age
) / 100;

2168 i‡(
	`°rcmp
 (
ROMId
, "ASRJ"Ë=0 && 
Sëtögs
.
Cy˛esPî˚¡age
 == 100)

2170 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 * 95) / 100;

2173 i‡(
	`°∫cmp
 (
ROMId
, "A3R", 3) == 0 ||

2175 
	`°∫cmp
 (
ROMId
, "AJE", 3) == 0)

2176 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 * 103) / 100;

2178 i‡(
	`°rcmp
 (
ROMId
, "AWVP") == 0 || strcmp (ROMId, "AWVE") == 0 ||

2179 
	`°rcmp
 (
ROMId
, "AWVJ") == 0)

2183 i‡(
Sëtögs
.
Cy˛esPî˚¡age
 == 100)

2184 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 * 140) / 100;

2186 
Sëtögs
.
Wª°Àm™üArˇde
 = 
TRUE
;

2189 i‡(
	`°rcmp
 (
ROMId
, "ATQP") == 0)

2190 
Sëtögs
.
Wª°Àm™üArˇde
 = 
TRUE
;

2192 i‡(
	`°∫cmp
 (
ROMId
, "A3M", 3Ë=0 && 
Sëtögs
.
Cy˛esPî˚¡age
 == 100)

2194 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 * 110) / 100;

2196 i‡(
	`°rcmp
 (
ROMName
, "\x0bd\x0da\x0b2\x0d4\x0b0\x0bd\x0de") == 0 &&

2197 
Sëtögs
.
Cy˛esPî˚¡age
 == 100)

2198 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 * 101) / 100;

2200 i‡(
	`°rcmp
 (
ROMName
, "WILD TRAX") == 0 ||

2201 
	`°rcmp
 (
ROMName
, "YOSSY'S ISLAND") == 0 ||

2202 
	`°rcmp
 (
ROMName
, "YOSHI'S ISLAND") == 0)

2203 
CPU
.
TrõdI¡îÀavedMode2
 = 
TRUE
;

2206 i‡(
	`°∫cmp
 (
ROMId
, "A9D", 3Ë=0 && 
Sëtögs
.
Cy˛esPî˚¡age
 == 100)

2207 
Sëtögs
.
H_Max
 = (
SNES_CYCLES_PER_SCANLINE
 * 110) / 100;

2209 
Sëtögs
.
APURAMInôülVÆue
 = 0xff;

2211 i‡(
	`°rcmp
 (
ROMName
, "∑≠≥‘∏•“∂ﬁ–√›æ≤") == 0 ||

2212 
	`°rcmp
 (
ROMName
, "KENTOUOU WORLDCHAMPIO") == 0 ||

2213 
	`°rcmp
 (
ROMName
, "TKO SUPERCHAMPIONSHIP") == 0 ||

2214 
	`°rcmp
 (
ROMName
, "TKO SUPER CHAMPIONSHI") == 0 ||

2215 
	`°rcmp
 (
ROMName
, "IHATOVO STORY") == 0 ||

2216 
	`°rcmp
 (
ROMName
, "WANDERERS FROM YS") == 0 ||

2217 
	`°rcmp
 (
ROMName
, "SUPER GENTYOUHISHI") == 0 ||

2219 
	`°∫cmp
 (
ROMId
, "APB", 3) == 0)

2221 
Sëtögs
.
APURAMInôülVÆue
 = 0;

2224 
Sëtögs
.
DaffyDuck
 = 
	`°rcmp
 (
ROMName
, "DAFFY DUCK: MARV MISS") == 0;

2225 
Sëtögs
.
HBœnkSèπ
 = (256 * Sëtögs.
H_Max
Ë/ 
SNES_HCOUNTER_MAX
;

2227 
SA1
.
WaôAddªss
 = 
NULL
;

2228 
SA1
.
WaôByãAddªss1
 = 
NULL
;

2229 
SA1
.
WaôByãAddªss2
 = 
NULL
;

2232 i‡(
	`°rcmp
 (
ROMId
, "ZBPJ") == 0)

2234 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0093f1 >> 
MEMMAP_SHIFT
] + 0x93f1;

2235 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x304a;

2238 i‡(
	`°rcmp
 (
ROMId
, "AEVJ") == 0)

2240 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0ed18d >> 
MEMMAP_SHIFT
] + 0xd18d;

2241 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3000;

2244 i‡(
	`°rcmp
 (
ROMId
, "A2DJ") == 0)

2246 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x008b62 >> 
MEMMAP_SHIFT
] + 0x8b62;

2249 i‡(
	`°rcmp
 (
ROMId
, "AZIJ") == 0)

2251 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x008083 >> 
MEMMAP_SHIFT
] + 0x8083;

2252 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3020;

2255 i‡(
	`°rcmp
 (
ROMId
, "ZX3J") == 0)

2257 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0087f2 >> 
MEMMAP_SHIFT
] + 0x87f2;

2258 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x30c4;

2261 i‡(
	`°rcmp
 (
ROMId
, "AARJ") == 0)

2263 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc1f85®>> 
MEMMAP_SHIFT
] + 0xf85a;

2264 
SA1
.
WaôByãAddªss1
 = 
SRAM
 + 0x0c64;

2265 
SA1
.
WaôByãAddªss2
 = 
SRAM
 + 0x0c66;

2268 i‡(
	`°rcmp
 (
ROMId
, "A23J") == 0)

2270 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc25037 >> 
MEMMAP_SHIFT
] + 0x5037;

2271 
SA1
.
WaôByãAddªss1
 = 
SRAM
 + 0x0c06;

2272 
SA1
.
WaôByãAddªss2
 = 
SRAM
 + 0x0c08;

2275 i‡(
	`°rcmp
 (
ROMId
, "AIIJ") == 0)

2277 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc100bê>> 
MEMMAP_SHIFT
] + 0x00be;

2278 
SA1
.
WaôByãAddªss1
 = 
SRAM
 + 0x1002;

2279 
SA1
.
WaôByãAddªss2
 = 
SRAM
 + 0x1004;

2282 i‡(
	`°rcmp
 (
ROMId
, "AITJ") == 0)

2284 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0080b7 >> 
MEMMAP_SHIFT
] + 0x80b7;

2287 i‡(
	`°rcmp
 (
ROMId
, "AJ6J") == 0)

2289 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc0f74®>> 
MEMMAP_SHIFT
] + 0xf74a;

2292 i‡(
	`°rcmp
 (
ROMId
, "AJUJ") == 0)

2294 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00d926 >> 
MEMMAP_SHIFT
] + 0xd926;

2297 i‡(
	`°rcmp
 (
ROMId
, "AKAJ") == 0)

2299 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00f070 >> 
MEMMAP_SHIFT
] + 0xf070;

2302 i‡(
	`°rcmp
 (
ROMId
, "AFJJ") == 0 || strcmp (ROMId, "AFJE") == 0)

2304 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0082d4 >> 
MEMMAP_SHIFT
] + 0x82d4;

2305 
SA1
.
WaôByãAddªss1
 = 
SRAM
 + 0x72a4;

2308 i‡(
	`°rcmp
 (
ROMId
, "AKFJ") == 0)

2310 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x008c93 >> 
MEMMAP_SHIFT
] + 0x8c93;

2311 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x300a;

2312 
SA1
.
WaôByãAddªss2
 = 
FûlRAM
 + 0x300e;

2315 i‡(
	`°rcmp
 (
ROMId
, "AKFE") == 0)

2317 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x008cb8 >> 
MEMMAP_SHIFT
] + 0x8cb8;

2318 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x300a;

2319 
SA1
.
WaôByãAddªss2
 = 
FûlRAM
 + 0x300e;

2322 i‡(
	`°rcmp
 (
ROMId
, "ARWJ") == 0 || strcmp (ROMId, "ARWE") == 0)

2324 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc0816‡>> 
MEMMAP_SHIFT
] + 0x816f;

2325 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3000;

2328 i‡(
	`°rcmp
 (
ROMId
, "AVRJ") == 0)

2330 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0085f2 >> 
MEMMAP_SHIFT
] + 0x85f2;

2331 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3024;

2334 i‡(
	`°rcmp
 (
ROMId
, "AO3J") == 0)

2336 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00dddb >> 
MEMMAP_SHIFT
] + 0xdddb;

2337 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x37b4;

2340 i‡(
	`°rcmp
 (
ROMId
, "AJOJ") == 0)

2342 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x8084e5 >> 
MEMMAP_SHIFT
] + 0x84e5;

2345 i‡(
	`°rcmp
 (
ROMId
, "APBJ") == 0)

2347 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00857®>> 
MEMMAP_SHIFT
] + 0x857a;

2350 i‡(
	`°rcmp
 (
ROMId
, "AONJ") == 0)

2352 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00df33 >> 
MEMMAP_SHIFT
] + 0xdf33;

2353 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x37b4;

2356 i‡(
	`°rcmp
 (
ROMId
, "AEPE") == 0)

2358 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x003700 >> 
MEMMAP_SHIFT
] + 0x3700;

2359 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3102;

2362 i‡(
	`°rcmp
 (
ROMId
, "A3GE") == 0)

2364 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x003700 >> 
MEMMAP_SHIFT
] + 0x3700;

2365 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3102;

2368 i‡(
	`°rcmp
 (
ROMId
, "A4RE") == 0)

2370 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x009899 >> 
MEMMAP_SHIFT
] + 0x9899;

2371 
SA1
.
WaôByãAddªss1
 = 
FûlRAM
 + 0x3000;

2374 i‡(
	`°rcmp
 (
ROMId
, "AGFJ") == 0)

2379 i‡(
	`°rcmp
 (
ROMId
, "AGFJ") == 0)

2381 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x0181b¯>> 
MEMMAP_SHIFT
] + 0x81bc;

2384 i‡(
	`°rcmp
 (
ROMId
, "ASYJ") == 0)

2386 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00f2c¯>> 
MEMMAP_SHIFT
] + 0xf2cc;

2387 
SA1
.
WaôByãAddªss1
 = 
SRAM
 + 0x7ffe;

2388 
SA1
.
WaôByãAddªss2
 = 
SRAM
 + 0x7ffc;

2391 i‡(
	`°rcmp
 (
ROMId
, "AX2J") == 0)

2393 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0x00d675 >> 
MEMMAP_SHIFT
] + 0xd675;

2397 i‡(
	`°rcmp
 (
ROMId
, "A4WJ") == 0)

2399 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc048bê>> 
MEMMAP_SHIFT
] + 0x48be;

2402 i‡(
	`°rcmp
 (
ROMId
, "AHJJ") == 0)

2404 
SA1
.
WaôAddªss
 = SA1.
M≠
 [0xc1002®>> 
MEMMAP_SHIFT
] + 0x002a;

2405 
SA1
.
WaôByãAddªss1
 = 
SRAM
 + 0x0806;

2406 
SA1
.
WaôByãAddªss2
 = 
SRAM
 + 0x0808;

2410 i‡(
	`°rcmp
 (
ROMName
, "SFX ≈≤ƒ∂ﬁ›¿ﬁ—”…∂ﬁ¿ÿ 1") == 0)

2412 
byãs0x2000
 [0xb18] = 0x4c;

2413 
byãs0x2000
 [0xb19] = 0x4b;

2414 
byãs0x2000
 [0xb1a] = 0xea;

2417 i‡(
	`°rcmp
 (
ROMName
, "GOGO ACKMAN3") == 0 ||

2418 
	`°rcmp
 (
ROMName
, "HOME ALONE") == 0)

2421 
c
 = 0; c < 0x400; c += 16)

2423 
M≠
 [
c
 + 6] = M≠ [¯+ 0x806] = 
SRAM
;

2424 
M≠
 [
c
 + 7] = M≠ [¯+ 0x807] = 
SRAM
;

2425 
BlockIsROM
 [
c
 + 6] = BlockIsROM [¯+ 0x806] = 
FALSE
;

2426 
BlockIsROM
 [
c
 + 7] = BlockIsROM [¯+ 0x807] = 
FALSE
;

2427 
BlockIsRAM
 [
c
 + 6] = BlockIsRAM [¯+ 0x806] = 
TRUE
;

2428 
BlockIsRAM
 [
c
 + 7] = BlockIsRAM [¯+ 0x807] = 
TRUE
;

2430 
	`WrôePrŸe˘ROM
 ();

2433 i‡(
	`°∫cmp
 (
ROMName
, "SWORD WORLD SFC", 15) == 0 ||

2434 
	`°rcmp
 (
ROMName
, "SFC ∂“›◊≤¿ﬁ∞") == 0)

2436 
IAPU
.
O√Cy˛e
 = 15;

2437 
SNESGameFixes
.
NìdInô0x2137
 = 
TRUE
;

2438 
Sëtögs
.
APUE«bÀd
 |= 2;

2439 
CPU
.
APU_APUExecutög
 |= 2;

2442 i‡(
	`°∫cmp
 (
ROMName
, "SHIEN THE BLADE CHASE", 21) == 0)

2443 
SNESGameFixes
.
Old_Ród0x4200
 = 
TRUE
;

2445 i‡(
	`°rcmp
 (
ROMName
, "∫ﬁºﬁ◊ ∂≤ºﬁ≠≥¿ﬁ≤πØæ›") == 0)

2446 
SNESGameFixes
.
NìdInô0x2137
 = 
TRUE
;

2448 i‡(
	`°rcmp
 (
ROMName
, "UMIHARAKAWASE") == 0)

2449 
SNESGameFixes
.
umih¨akawa£Fix
 = 
TRUE
;

2451 i‡(
	`°rcmp
 (
ROMName
, "ALIENS vs. PREDATOR") == 0)

2452 
SNESGameFixes
.
ÆõnVS¥edë‹Fix
 = 
TRUE
;

2454 i‡(
	`°rcmp
 (
ROMName
, "demon's blazon") == 0 ||

2455 
	`°rcmp
 (
ROMName
, "demon's crest") == 0 ||

2456 
	`°rcmp
 (
ROMName
, "ROCKMAN X") == 0 ||

2457 
	`°rcmp
 (
ROMName
, "MEGAMAN X") == 0)

2462 
c
 = 0; c < 8; c++)

2463 
M≠
 [0x408 + 
c
] = 
ROM
 - 0x8000;

2466 i‡(
	`°rcmp
 (
ROMName
, "Ω∞ ﬂ∞Ãß–Ω¿") == 0 ||

2467 
	`°rcmp
 (
ROMName
, "Ω∞ ﬂ∞Ãß–Ω¿ 2") == 0 ||

2468 
	`°rcmp
 (
ROMName
, "ZENKI TENCHIMEIDOU") == 0 ||

2469 
	`°rcmp
 (
ROMName
, "GANBA LEAGUE") == 0)

2471 
SNESGameFixes
.
APU_OutP‹ts_Rëu∫VÆueFix
 = 
TRUE
;

2475 i‡(
	`°rcmp
 (
ROMName
, "HITOMI3") == 0)

2477 
Mem‹y
.
SRAMSize
 = 1;

2478 
CPU
.
Mem‹y_SRAMMask
 = 
Mem‹y
.
SRAMSize
 ?

2479 ((1 << (
Mem‹y
.
SRAMSize
 + 3)) * 128) - 1 : 0;

2482 i‡(
	`°rcmp
 (
ROMName
, "goemon 4") == 0)

2483 
SNESGameFixes
.
SRAMInôülVÆue
 = 0x00;

2485 i‡(
	`°rcmp
 (
ROMName
, "PACHISLO π›∑≠≥") == 0)

2486 
SNESGameFixes
.
_0x213E_Rëu∫VÆue
 = 1;

2488 i‡(
	`°rcmp
 (
ROMName
, "ªﬁ œ∞ºﬁ¨› ƒ≥ ≤√ﬁ›") == 0)

2489 
SNESGameFixes
.
TouhaidíC⁄åﬁÀrFix
 = 
TRUE
;

2491 i‡(
	`°rcmp
 (
ROMName
, "DRAGON KNIGHT 4") == 0)

2494 
c
 = 0; c < 0xe0; c++)

2496 
M≠
 [
c
 + 0x700] = (
uöt8
 *Ë
MAP_LOROM_SRAM
;

2497 
BlockIsRAM
 [
c
 + 0x700] = 
TRUE
;

2498 
BlockIsROM
 [
c
 + 0x700] = 
FALSE
;

2500 
	`WrôePrŸe˘ROM
 ();

2503 i‡(
	`°∫cmp
 (
ROMName
, "LETs PACHINKO(", 14) == 0)

2505 
IAPU
.
O√Cy˛e
 = 15;

2506 
Sëtögs
.
APUE«bÀd
 |= 2;

2507 
CPU
.
APU_APUExecutög
 |= 2;

2508 i‡(!
Sëtögs
.
F‹˚NTSC
 && !Sëtögs.
F‹˚PAL
)

2510 
Sëtögs
.
PAL
 = 
FALSE
;

2511 
Sëtögs
.
FømeTime
 = Sëtögs.
FømeTimeNTSC
;

2512 
Mem‹y
.
ROMFømesPîSec⁄d
 = 60;

2516 i‡(
	`°rcmp
 (
ROMName
, "FURAI NO SIREN") == 0)

2517 
SNESGameFixes
.
SoundEnvñ›eHeightRódög2
 = 
TRUE
;

2519 if(
	`°rcmp
 (
ROMName
, "XBAND JAPANESE MODEM") == 0)

2521 
c
 = 0x200; c < 0x400; c += 16)

2523 
i
 = 
c
; i < c + 16; i++)

2525 
M≠
 [
i
 + 0x400] = M≠ [ò+ 0xc00] = &
ROM
[
c
 * 0x1000];

2526 
Mem‹yS≥ed
 [
i
 + 0x400] = MemorySpeed [i + 0xc00] = 8;

2527 
BlockIsRAM
 [
i
 + 0x400] = BlockIsRAM [ò+ 0xc00] = 
TRUE
;

2528 
BlockIsROM
 [
i
 + 0x400] = BlockIsROM [ò+ 0xc00] = 
FALSE
;

2531 
	`WrôePrŸe˘ROM
 ();

2535 
	#RomP©ch
(
adr
,
ov
,
nv
Ë\

	)

2536 i‡(
ROM
 [
adr
] =
ov
) \

2537 
ROM
 [
adr
] = 
nv


2540 i‡(
	`°rcmp
 (
ROMName
, "LOVE QUEST") == 0)

2542 
	`RomP©ch
 (0x1385ec, 0xd0, 0xea);

2543 
	`RomP©ch
 (0x1385ed, 0xb2, 0xea);

2547 i‡(
	`°rcmp
 (
ROMName
, "NANGOKUSYONEN PAPUWA") == 0)

2548 
	`RomP©ch
 (0x1f0d1, 0xa0, 0x6b);

2551 i‡(
	`°rcmp
 (
ROMName
, "Tetsuwan Atom") == 0)

2553 
	`RomP©ch
 (0xe24c5, 0x90, 0xea);

2554 
	`RomP©ch
 (0xe24c6, 0xf3, 0xea);

2558 i‡(
	`°rcmp
 (
ROMName
, "SFC ODA NOBUNAGA") == 0)

2560 
	`RomP©ch
 (0x7497, 0x80, 0xea);

2561 
	`RomP©ch
 (0x7498, 0xd5, 0xea);

2565 i‡(
	`°rcmp
 (
ROMName
, "Super Batter Up") == 0)

2567 
	`RomP©ch
 (0x27ae0, 0xd0, 0xea);

2568 
	`RomP©ch
 (0x27ae1, 0xfa, 0xea);

2572 i‡(
	`°rcmp
 (
ROMName
, "SUPER PRO. BASE BALL2") == 0)

2574 
	`RomP©ch
 (0x1e4, 0x50, 0xea);

2575 
	`RomP©ch
 (0x1e5, 0xfb, 0xea);

2577 
	}
}

2580 
	$RódI¡
 (
FILE
 *
f
, 
nbyãs
)

2582 
v
 = 0;

2583 
nbyãs
--)

2585 
c
 = 
	`fgëc
(
f
);

2586 i‡(
c
 =
EOF
)

2588 
v
 = (v << 8Ë| (
c
 & 0xFF);

2590  (
v
);

2591 
	}
}

2593 
	#IPS_EOF
 0x00454F46l

	)

2595 
	gCMem‹y
::
	$CheckF‹IPSP©ch
 (c⁄° *
rom_fûíame
, 
boﬁ8_32
 
hódî
,

2596 
öt32
 &
rom_size
)

2598 
dú
 [
_MAX_DIR
 + 1];

2599 
drive
 [
_MAX_DRIVE
 + 1];

2600 
«me
 [
_MAX_FNAME
 + 1];

2601 
ext
 [
_MAX_EXT
 + 1];

2602 
‚ame
 [
_MAX_PATH
 + 1];

2603 
FILE
 *
∑tch_fûe
 = 
NULL
;

2604 
off£t
 = 
hódî
 ? 512 : 0;

2606 i‡(!(
∑tch_fûe
 = 
	`f›í
(
	`S9xGëFûíame
 (".ips"), "rb"))) ;

2608 i‡(
	`‰ód
 (
‚ame
, 1, 5, 
∑tch_fûe
Ë!5 || 
	`°∫cmp
 (fname, "PATCH", 5) != 0)

2610 
	`f˛o£
 (
∑tch_fûe
);

2614 
öt32
 
ofs
;

2618 
Àn
;

2619 
æí
;

2620 
rch¨
;

2622 
ofs
 = 
	`RódI¡
 (
∑tch_fûe
, 3);

2623 i‡(
ofs
 == -1)

2624 
îr_eof
;

2626 i‡(
ofs
 =
IPS_EOF
)

2629 
ofs
 -
off£t
;

2631 
Àn
 = 
	`RódI¡
 (
∑tch_fûe
, 2);

2632 i‡(
Àn
 == -1)

2633 
îr_eof
;

2636 i‡(
Àn
)

2638 i‡(
ofs
 + 
Àn
 > 
MAX_ROM_SIZE
)

2639 
îr_eof
;

2641 
Àn
--)

2643 
rch¨
 = 
	`fgëc
 (
∑tch_fûe
);

2644 i‡(
rch¨
 =
EOF
)

2645 
îr_eof
;

2646 
ROM
 [
ofs
++] = (
uöt8
Ë
rch¨
;

2648 i‡(
ofs
 > 
rom_size
)

2649 
rom_size
 = 
ofs
;

2653 
æí
 = 
	`RódI¡
 (
∑tch_fûe
, 2);

2654 i‡(
æí
 == -1)

2655 
îr_eof
;

2657 
rch¨
 = 
	`fgëc
 (
∑tch_fûe
);

2658 i‡(
rch¨
 =
EOF
)

2659 
îr_eof
;

2661 i‡(
ofs
 + 
æí
 > 
MAX_ROM_SIZE
)

2662 
îr_eof
;

2664 
æí
--)

2665 
ROM
 [
ofs
++] = (
uöt8
Ë
rch¨
;

2667 i‡(
ofs
 > 
rom_size
)

2668 
rom_size
 = 
ofs
;

2673 
ofs
 = 
	`RódI¡
 (
∑tch_fûe
, 3);

2674 i‡(
ofs
 !-1 && of†- 
off£t
 < 
rom_size
)

2677 
rom_size
 = 
ofs
 - 
off£t
;

2679 
	`f˛o£
 (
∑tch_fûe
);

2682 
îr_eof
:

2683 i‡(
∑tch_fûe
)

2684 
	`f˛o£
 (
∑tch_fûe
);

2685 
	}
}

2687 #unde‡
INLINE


2688 
	#INLINE


	)

2689 
	~"gë£t.h
"

	@memmap.h

41 #i‚de‡
_memm≠_h_


42 
	#_memm≠_h_


	)

44 
	~"¢es9x.h
"

46 #ifde‡
FAST_LSB_WORD_ACCESS


47 
	#READ_WORD
(
s
Ë(*(
uöt16
 *Ë(s))

	)

48 
	#READ_DWORD
(
s
Ë(*(
uöt32
 *Ë(s))

	)

49 
	#WRITE_WORD
(
s
, 
d
Ë(*(
uöt16
 *Ë(sË(d)

	)

50 
	#WRITE_DWORD
(
s
, 
d
Ë(*(
uöt32
 *Ë(sË(d)

	)

52 
	#READ_WORD
(
s
Ë–*(
uöt8
 *) (s) |\

53 (*((
uöt8
 *Ë(
s
Ë+ 1Ë<< 8))

	)

54 
	#READ_DWORD
(
s
Ë–*(
uöt8
 *) (s) |\

55 (*((
uöt8
 *Ë(
s
) + 1) << 8) |\

56 (*((
uöt8
 *Ë(
s
) + 2) << 16) |\

57 (*((
uöt8
 *Ë(
s
Ë+ 3Ë<< 24))

	)

58 
	#WRITE_WORD
(
s
, 
d
Ë*(
uöt8
 *) (s) = (d), \

59 *((
uöt8
 *Ë(
s
Ë+ 1Ë(
d
Ë>> 8

	)

60 
	#WRITE_DWORD
(
s
, 
d
Ë*(
uöt8
 *) (s) = (uint8) (d), \

61 *((
uöt8
 *Ë(
s
Ë+ 1Ë(uöt8Ë((
d
) >> 8),\

62 *((
uöt8
 *Ë(
s
Ë+ 2Ë(uöt8Ë((
d
) >> 16),\

63 *((
uöt8
 *Ë(
s
Ë+ 3Ë(uöt8Ë((
d
Ë>> 24)

	)

64 
	#WRITE_3WORD
(
s
, 
d
Ë*(
uöt8
 *) (s) = (uint8) (d), \

65 *((
uöt8
 *Ë(
s
Ë+ 1Ë(uöt8Ë((
d
) >> 8),\

66 *((
uöt8
 *Ë(
s
Ë+ 2Ë(uöt8Ë((
d
Ë>> 16)

	)

67 
	#READ_3WORD
(
s
Ë–*(
uöt8
 *) (s) |\

68 (*((
uöt8
 *Ë(
s
) + 1) << 8) |\

69 (*((
uöt8
 *Ë(
s
Ë+ 2Ë<< 16))

	)

73 
	#MEMMAP_BLOCK_SIZE
 (0x1000)

	)

74 
	#MEMMAP_NUM_BLOCKS
 (0x1000000 / 
MEMMAP_BLOCK_SIZE
)

	)

75 
	#MEMMAP_BLOCKS_PER_BANK
 (0x10000 / 
MEMMAP_BLOCK_SIZE
)

	)

76 
	#MEMMAP_SHIFT
 12

	)

77 
	#MEMMAP_MASK
 (
MEMMAP_BLOCK_SIZE
 - 1)

	)

78 
	#MEMMAP_MAX_SDD1_LOGGED_ENTRIES
 (0x10000 / 8)

	)

80 ˛as†
	cCMem‹y
 {

81 
	mpublic
:

82 
boﬁ8_32
 
LﬂdROM
 (const *);

83 
InôROM
 (
boﬁ8_32
);

84 
boﬁ8_32
 
LﬂdSRAM
 (const *);

85 
boﬁ8_32
 
SaveSRAM
 (const *);

86 
boﬁ8_32
 
Inô
 ();

87 
Deöô
 ();

88 
FªeSDD1D©a
 ();

90 
WrôePrŸe˘ROM
 ();

91 
FixROMS≥ed
 ();

92 
M≠RAM
 ();

93 
M≠ExåaRAM
 ();

94 *
Sa„
 (const *);

96 
LoROMM≠
 ();

97 
LoROM24MBSM≠
 ();

98 
SRAM512KLoROMM≠
 ();

99 
SRAM1024KLoROMM≠
 ();

100 
SuÁmiTurboLoROMM≠
 ();

101 
HiROMM≠
 ();

102 
Su≥rFXROMM≠
 ();

103 
TÆesROMM≠
 (
boﬁ8_32
);

104 
AÕhaROMM≠
 ();

105 
SA1ROMM≠
 ();

106 
BSHiROMM≠
 ();

107 
boﬁ8_32
 
AŒASCII
 (
uöt8
 *
b
, 
size
);

108 
Sc‹eHiROM
 (
boﬁ8_32
 
skù_hódî
);

109 
Sc‹eLoROM
 (
boﬁ8_32
 
skù_hódî
);

110 
AµlyROMFixes
 ();

111 
CheckF‹IPSP©ch
 (c⁄° *
rom_fûíame
, 
boﬁ8_32
 
hódî
,

112 
öt32
 &
rom_size
);

114 c⁄° *
TVSènd¨d
 ();

115 c⁄° *
S≥ed
 ();

116 c⁄° *
SèticRAMSize
 ();

117 c⁄° *
M≠Ty≥
 ();

118 c⁄° *
M≠Mode
 ();

119 c⁄° *
K¨tC⁄ã¡s
 ();

120 c⁄° *
Size
 ();

121 c⁄° *
Hódîs
 ();

122 c⁄° *
ROMID
 ();

123 c⁄° *
Com∑nyID
 ();

126 
	mMAP_PPU
, 
	mMAP_CPU
, 
	mMAP_DSP
, 
	mMAP_LOROM_SRAM
, 
	mMAP_HIROM_SRAM
,

127 
	mMAP_NONE
, 
	mMAP_DEBUG
, 
	mMAP_C4
, 
	mMAP_BWRAM
, 
	mMAP_BWRAM_BITMAP
,

128 
	mMAP_BWRAM_BITMAP2
, 
	mMAP_SA1RAM
, 
	mMAP_LAST


130 íum { 
	gMAX_ROM_SIZE
 = 0x600000 };

132 
uöt8
 *
	gRAM
;

133 
uöt8
 *
	gROM
;

134 
uöt8
 *
	gVRAM
;

135 
uöt8
 *
	gSRAM
;

136 
uöt8
 *
	gBWRAM
;

137 
uöt8
 *
	gFûlRAM
;

138 
uöt8
 *
	gC4RAM
;

139 
boﬁ8_32
 
	gHiROM
;

140 
boﬁ8_32
 
	gLoROM
;

141 
uöt16
 
	gSRAMMask
;

142 
uöt8
 
	gSRAMSize
;

143 
uöt8
 *
	gM≠
 [
MEMMAP_NUM_BLOCKS
];

144 
uöt8
 *
	gWrôeM≠
 [
MEMMAP_NUM_BLOCKS
];

145 
uöt8
 
	gMem‹yS≥ed
 [
MEMMAP_NUM_BLOCKS
];

146 
uöt8
 
	gBlockIsRAM
 [
MEMMAP_NUM_BLOCKS
];

147 
uöt8
 
	gBlockIsROM
 [
MEMMAP_NUM_BLOCKS
];

148 
	gROMName
 [
ROM_NAME_LEN
];

149 
	gROMId
 [5];

150 
	gCom∑nyId
 [3];

151 
uöt8
 
	gROMS≥ed
;

152 
uöt8
 
	gROMTy≥
;

153 
uöt8
 
	gROMSize
;

154 
öt32
 
	gROMFømesPîSec⁄d
;

155 
öt32
 
	gHódîCou¡
;

156 
uöt32
 
	gCÆcuœãdSize
;

157 
uöt32
 
	gCÆcuœãdChecksum
;

158 
uöt32
 
	gROMChecksum
;

159 
uöt32
 
	gROMCom∂emítChecksum
;

160 
uöt8
 *
	gSDD1Index
;

161 
uöt8
 *
	gSDD1D©a
;

162 
uöt32
 
	gSDD1E¡rõs
;

163 
uöt32
 
	gSDD1LoggedD©aCou¡Pªv
;

164 
uöt32
 
	gSDD1LoggedD©aCou¡
;

165 
uöt8
 
	gSDD1LoggedD©a
 [
MEMMAP_MAX_SDD1_LOGGED_ENTRIES
];

166 #i‚de‡
_SNESPPC


167 
	gROMFûíame
 [
_MAX_PATH
];

169 
	gROMFûíame
 [1024];

173 
START_EXTERN_C


174 
CMem‹y
 
Mem‹y
;

175 
uöt8
 *
SRAM
;

176 
uöt8
 *
ROM
;

177 
uöt8
 *
RegRAM
;

178 
S9xDeöãæóveMode2
 ();

179 
S9xSaveSRAM
 ();

180 
END_EXTERN_C


182 
S9xAutoSaveSRAM
 ();

184 #ifde‡
NO_INLINE_SET_GET


185 
uöt8
 
S9xGëByã
 (
uöt32
 
Addªss
, 
SCPUSèã
 *);

186 
uöt16
 
S9xGëW‹d
 (
uöt32
 
Addªss
, 
SCPUSèã
 *);

187 
S9xSëByã
 (
uöt8
 
Byã
, 
uöt32
 
Addªss
, 
SCPUSèã
 * );

188 
S9xSëW‹d
 (
uöt16
 
Byã
, 
uöt32
 
Addªss
, 
SCPUSèã
 *);

189 
S9xSëPCBa£
 (
uöt32
 
Addªss
, 
SCPUSèã
 *);

190 
uöt8
 *
S9xGëMemPoöãr
 (
uöt32
 
Addªss
);

191 
uöt8
 *
GëBa£Poöãr
 (
uöt32
 
Addªss
);

193 #i‚de‡
INLINE


194 
	#INLINE
 
__ölöe


	)

196 
	~"gë£t.h
"

	@menu.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<dúít.h
>

6 
	~<î∫o.h
>

7 
	~"¢≠shŸ.h
"

8 
	~"memm≠.h
"

10 #ifde‡
__GIZ__


11 
	~<w32≠i/wödows.h
>

12 
	~<wch¨.h
>

13 
	~<sys/w˚fûe.h
>

14 
	~"giz_sdk.h
"

17 
	~"míu.h
"

19 
	#PPU_IGNORE_FIXEDCOLCHANGES
 (1<<0)

	)

20 
	#PPU_IGNORE_WINDOW
 (1<<1)

	)

21 
	#PPU_IGNORE_ADDSUB
 (1<<2)

	)

22 
	#PPU_IGNORE_PALWRITE
 (1<<3)

	)

23 
	#GFX_IGNORE_OBJ
 (1<<4)

	)

24 
	#GFX_IGNORE_BG0
 (1<<5)

	)

25 
	#GFX_IGNORE_BG1
 (1<<6)

	)

26 
	#GFX_IGNORE_BG2
 (1<<7)

	)

27 
	#GFX_IGNORE_BG3
 (1<<8)

	)

29 
	gromDú
[
MAX_PATH
+1];

30 
	g¢esRomDú
[
MAX_PATH
+1];

32 
	#ROM_SELECTOR_DEFAULT_FOCUS
 3

	)

34 
DIRDATA
 
	gdú
;

36 
	g˝uS≥edLookup
[40]={

46 vﬁ©ûê
timî
;

47 
	gmíutûeXs¸ﬁl
=0;

48 
	gmíutûeYs¸ﬁl
=0;

49 
	ghódîD⁄e
[4];

50 
	gquickSavePª£¡
=0;

51 
	sROM_LIST_RECORD


53 
	mfûíame
[
MAX_PATH
+1];

54 
	mty≥
;

57 
ROM_LIST_RECORD
 
	gromLi°
[
MAX_ROMS
];

58 
SNES_MENU_OPTIONS
 
	g¢esMíuO±i⁄s
;

60 
	gromCou¡
;

61 
	gcuºítRomFûíame
[
MAX_PATH
+1]="";

62 
	gcuºFB
=0;

63 
	g¥evFB
=0;

64 
	gcuºítEmuMode
=
EMU_MODE_SNES
;

66 
	gcuºítW‹kögDú
[
MAX_PATH
+1];

67 
	g¢esO±i⁄sDú
[
MAX_PATH
+1];

68 
	g¢esSømDú
[
MAX_PATH
+1];

69 
	g¢esSaveSèãDú
[
MAX_PATH
+1];

70 
	gsoundR©es
[5]={8250.0,11025.0,16500.0,22050.0,44100.0};

71 
	gmíuãxt
[256][50];

73 
SAVE_STATE
 
	gßveSèã
[10];

74 
	gßveSèãName
[
MAX_PATH
+MAX_PATH+2];

76 
	ggammaC⁄v
[32*29]={ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,

107 
	$Upd©eMíuGøphicsGamma
()

109 
cuºPix
=0;

110 
pixñ
=0;

111 
R
,
G
,
B
;

112 
cuºPix
=0;currPix<15360;currPix++)

116 
pixñ
=
míuHódîOrig
[
cuºPix
];

117 
R
=(
pixñ
>>11)&0x1F;

118 
G
=(
pixñ
>>6)&0x1F;

119 
B
=(
pixñ
>>1)&0x1F;

122 
R
=
gammaC⁄v
[R+(0<<5)];

123 
G
=
gammaC⁄v
[G+(0<<5)];

124 
B
=
gammaC⁄v
[B+(0<<5)];

126 
pixñ
=
	`MENU_RGB
(
R
,
G
,
B
);

127 
míuHódî
[
cuºPix
]=
pixñ
;

129 
cuºPix
=0;currPix<5120;currPix++)

133 
pixñ
=
highLightB¨Orig
[
cuºPix
];

134 
R
=(
pixñ
>>11)&0x1F;

135 
G
=(
pixñ
>>6)&0x1F;

136 
B
=(
pixñ
>>1)&0x1F;

139 
R
=
gammaC⁄v
[R+(0<<5)];

140 
G
=
gammaC⁄v
[G+(0<<5)];

141 
B
=
gammaC⁄v
[B+(0<<5)];

143 
pixñ
=
	`MENU_RGB
(
R
,
G
,
B
);

144 
highLightB¨
[
cuºPix
]=
pixñ
;

148 
cuºPix
=0;cuºPix<(
MENU_TILE_WIDTH
*
MENU_TILE_HEIGHT
);currPix++)

152 
pixñ
=
míuTûeOrig
[
cuºPix
];

153 
R
=(
pixñ
>>11)&0x1F;

154 
G
=(
pixñ
>>6)&0x1F;

155 
B
=(
pixñ
>>1)&0x1F;

158 
R
=
gammaC⁄v
[R+(0<<5)];

159 
G
=
gammaC⁄v
[G+(0<<5)];

160 
B
=
gammaC⁄v
[B+(0<<5)];

162 
pixñ
=
	`MENU_RGB
(
R
,
G
,
B
);

163 
míuTûe
[
cuºPix
]=
pixñ
;

166 
	}
}

168 
	$S√sDeÁu…MíuO±i⁄s
()

171 
¢esMíuO±i⁄s
.
míuVî
=
SNES_OPTIONS_VER
;

172 
¢esMíuO±i⁄s
.
‰ameSkù
=0;

173 
¢esMíuO±i⁄s
.
soundOn
 = 1;

174 
¢esMíuO±i⁄s
.
vﬁume
=100;

175 
	`mem£t
(
¢esMíuO±i⁄s
.
∑dC⁄fig
,0xFF,(snesMenuOptions.padConfig));

176 
¢esMíuO±i⁄s
.
showFps
=1;

177 
¢esMíuO±i⁄s
.
gamma
=0;

178 
¢esMíuO±i⁄s
.
soundR©e
=2;

179 
¢esMíuO±i⁄s
.
˝uS≥ed
=19;

180 
	}
}

182 
	$LﬂdMíuO±i⁄s
(*
∑th
, *
fûíame
, *
ext
, *
›ti⁄smem
, 
maxsize
, 
showMesßge
)

184 
fuŒFûíame
[
MAX_PATH
+MAX_PATH+1];

185 
_fûíame
[
MAX_PATH
+1];

186 
_ext
[
MAX_PATH
+1];

187 
FILE
 *
°ªam
;

188 
size
=0;

189 
ãxt
[50];

191 
	`•rötf
(
ãxt
,"Loading...");

193 i‡(
showMesßge
)

195 
	`PrötB¨
(
¥evFB
,240-16);

196 
	`gp_døwSåög
(40,228,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(0,0,0),
‰amebuf„r16
[
¥evFB
]);

199 
	`S∂ôFûíame
(
fûíame
, 
_fûíame
, 
_ext
);

200 
	`•rötf
(
fuŒFûíame
,"%s%s%s.%s",
∑th
,
DIR_SEP
,
_fûíame
,
ext
);

201 
°ªam
=
	`f›í
(
fuŒFûíame
,"rb");

202 if(
°ªam
)

205 
	`f£ek
(
°ªam
,0,
SEEK_END
);

206 
size
=
	`·ñl
(
°ªam
);

207 i‡(
size
>
maxsize
) size=maxsize;

208 
	`f£ek
(
°ªam
,0,
SEEK_SET
);

209 
	`‰ód
(
›ti⁄smem
, 1, 
size
, 
°ªam
);

210 
	`f˛o£
(
°ªam
);

217 
	}
}

219 
	$SaveMíuO±i⁄s
(*
∑th
, *
fûíame
, *
ext
, *
›ti⁄smem
, 
maxsize
, 
showMesßge
)

221 
fuŒFûíame
[
MAX_PATH
+MAX_PATH+1];

222 
_fûíame
[
MAX_PATH
+1];

223 
_ext
[
MAX_PATH
+1];

224 
FILE
 *
°ªam
;

225 
ãxt
[50];

227 
	`•rötf
(
ãxt
,"Saving...");

229 i‡(
showMesßge
)

231 
	`PrötB¨
(
¥evFB
,240-16);

232 
	`gp_døwSåög
(40,228,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(0,0,0),
‰amebuf„r16
[
¥evFB
]);

235 
	`S∂ôFûíame
(
fûíame
, 
_fûíame
, 
_ext
);

236 
	`•rötf
(
fuŒFûíame
,"%s%s%s.%s",
∑th
,
DIR_SEP
,
_fûíame
,
ext
);

237 
°ªam
=
	`f›í
(
fuŒFûíame
,"wb");

238 if(
°ªam
)

240 
	`fwrôe
(
›ti⁄smem
, 1, 
maxsize
, 
°ªam
);

241 
	`f˛o£
(
°ªam
);

242 
	`sync
();

249 
	}
}

251 
	$DñëeMíuO±i⁄s
(*
∑th
, *
fûíame
, *
ext
, 
showMesßge
)

253 
fuŒFûíame
[
MAX_PATH
+MAX_PATH+1];

254 
_fûíame
[
MAX_PATH
+1];

255 
_ext
[
MAX_PATH
+1];

256 
ãxt
[50];

258 
	`•rötf
(
ãxt
,"Deleting...");

260 i‡(
showMesßge
)

262 
	`PrötB¨
(
¥evFB
,240-16);

263 
	`gp_døwSåög
(40,228,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(0,0,0),
‰amebuf„r16
[
¥evFB
]);

266 
	`S∂ôFûíame
(
fûíame
, 
_fûíame
, 
_ext
);

267 
	`•rötf
(
fuŒFûíame
,"%s%s%s.%s",
∑th
,
DIR_SEP
,
_fûíame
,
ext
);

268 
	`ªmove
(
fuŒFûíame
);

269 
	`sync
();

271 
	}
}

273 #ifde‡
__GIZ__


274 
	$sync
()

276 
	}
}

279 
	$WaôF‹Buâ⁄sUp
()

281 
i
=0,
j
=0,
z
=0;

283 
i
=0;i<100;i++)

287 
	`I≈utUpd©e
(0);

288 
z
=0;

289 
j
=0;j<32;j++)

291 i‡(
I≈
.
hñd
[
j
]Ë
z
=1;

293 i‡(
z
==0) ;

296 
	}
}

298 
	$MíuPau£
()

300 
i
=0,
j
=0,
z
=0;

302 
i
=0;i<100;i++)

306 
	`I≈utUpd©e
(0);

307 
z
=0;

308 
j
=0;j<32;j++)

310 i‡(
I≈
.
hñd
[
j
]Ë
z
=1;

312 i‡(
z
==0) ;

316 
i
=0;i<100;i++)

320 
	`I≈utUpd©e
(0);

321 
z
=0;

322 
j
=0;j<32;j++)

324 i‡(
I≈
.
hñd
[
j
]Ë
z
=1;

326 i‡(
z
==1) ;

329 
	}
}

330 #i‡
deföed
 (
__GP2X__
)

331 
	$MíuFlù
()

333 
¥evFB
=
cuºFB
;

334 
	`gp_£tFømebuf„r
(
cuºFB
,1);

335 
cuºFB
++;

336 
cuºFB
&=3;

337 
	}
}

339 #i‡
deföed
 (
__GIZ__
)

340 
	$MíuFlù
()

342 
¥evFB
=
cuºFB
=0;

343 
	`gp_£tFømebuf„r
(
cuºFB
,0);

344 
	}
}

346 
	$S∂ôFûíame
(*
whﬁeFûíame
, *
fûíame
, *
ext
)

348 
Àn
=
	`°æí
(
whﬁeFûíame
);

349 
i
=0,
y
=-1;

351 
ext
[0]=0;

352 
fûíame
[0]=0;

354 i‡(
Àn
<=0)

358 
y
=-1;

359 
i
=
Àn
-2;i>0;i--)

361 i‡(
whﬁeFûíame
[
i
]=='.')

363 
y
=
i
;

368 i‡(
y
>=0)

370 
	`mem˝y
(
fûíame
,
whﬁeFûíame
,
y
);

371 
fûíame
[
y
]=0;

372 
	`mem˝y
(
ext
,
whﬁeFûíame
+
y
+1,
Àn
-(y+1));

374 
ext
[
Àn
-(
y
+1)]=0;

378 
	`°r˝y
(
fûíame
,
whﬁeFûíame
);

380 
	}
}

383 
	$CheckDúSï
(*
∑th
)

385 
i
=0;

386 
dúSïBad
[2]={
DIR_SEP_BAD
};

387 
dúSï
[2]={
DIR_SEP
};

388 
i
=0;i<
	`°æí
(
∑th
);i++)

390 if(
∑th
[
i
] =
dúSïBad
[0]Ë∑th[i]=
dúSï
[0];

392 
	}
}

395 
	$MíuMesßgeBox
(*
mesßge1
,*
mesßge2
,*
mesßge3
,
mode
)

397 
£À˘
=0;

398 
suba˘i⁄
=-1;

399 
Àn
=0;

400 
suba˘i⁄
==-1)

402 
	`I≈utUpd©e
(0);

403 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
])

405 
£À˘
^=1;

407 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
])

409 
£À˘
^=1;

411 i‡((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1Ë|| (I≈.hñd[
INP_BUTTON_MENU_CANCEL
]==1))

413 
suba˘i⁄
=
£À˘
;

415 
	`PrötTûe
(
cuºFB
);

416 
	`PrötTôÀ
(
cuºFB
);

417 
Àn
=
	`°æí
(
mesßge1
);

418 if(
Àn
>39)len=39;

419 
	`gp_døwSåög
(8,50,
Àn
,
mesßge1
,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

420 
Àn
=
	`°æí
(
mesßge2
);

421 if(
Àn
>39)len=39;

422 
	`gp_døwSåög
(8,60,
Àn
,
mesßge2
,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

423 
Àn
=
	`°æí
(
mesßge3
);

424 if(
Àn
>39)len=39;

425 
	`gp_døwSåög
(8,70,
Àn
,
mesßge3
,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

426 
mode
)

429 if(
£À˘
==0)

431 
	`PrötB¨
(
cuºFB
, 120-4);

432 
	`gp_døwSåög
(8,120,3,"YES",()
	`MENU_RGB
(0,0,0),
‰amebuf„r16
[
cuºFB
]);

433 
	`gp_døwSåög
(8,140,2,"NO",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

437 
	`PrötB¨
(
cuºFB
, 140-4);

438 
	`gp_døwSåög
(8,120,3,"YES",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

439 
	`gp_døwSåög
(8,140,2,"NO",()
	`MENU_RGB
(0,0,0),
‰amebuf„r16
[
cuºFB
]);

444 
	`MíuFlù
();

446 (
suba˘i⁄
);

447 
	}
}

450 
	$dñëîom
(
romödex
)

452 
ãxt
[
MAX_PATH
+1];

453 
fuŒfûíame
[
MAX_PATH
+MAX_PATH+1];

454 
x
;

455 
FILE
 *
°ªam
=
NULL
;

457 
	`PrötTûe
(
cuºFB
);

458 
	`PrötTôÀ
(
cuºFB
);

459 
	`MíuFlù
();

461 
	`•rötf
(
ãxt
,"Deleting Rom..");

462 
	`gp_døwSåög
(8,50,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
¥evFB
]);

464 
	`•rötf
(
ãxt
,"%s",
romLi°
[
romödex
].
fûíame
);

465 
x
=
	`°æí
(
ãxt
);

466 if(
x
>40) x=40;

467 
	`gp_døwSåög
(0,60,
x
,
ãxt
,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
¥evFB
]);

469 
	`•rötf
(
fuŒfûíame
,"%s%s%s",
romDú
,
DIR_SEP
,
romLi°
[
romödex
].
fûíame
);

470 
	`ªmove
(
fuŒfûíame
);

471 
	`sync
();

473 
	`•rötf
(
ãxt
,"Updating Rom List..");

474 
	`gp_døwSåög
(8,70,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
¥evFB
]);

475 
x
=
romödex
;x<
romCou¡
;x++)

477 
	`°r˝y
(
romLi°
[
x
].
fûíame
,ÑomList[x+1].filename);

478 
romLi°
[
x
].
ty≥
 =ÑomList[x+1].type;

480 
romCou¡
--;

483 
	}
}

485 
	gtûeCou¡î
=0;

486 
	$PrötTûe
(
Êù
)

488 
x
=0,
x2
=0;

489 
y
=0,
y2
=0;

490 *
‰amebuf„r1
 = 
‰amebuf„r16
[
Êù
]+(48*320);

491 *
gøphics1
 = 
NULL
;

493 
x2
=
míutûeXs¸ﬁl
;

494 
y2
=(
míutûeYs¸ﬁl
*
MENU_TILE_WIDTH
);

495 
gøphics1
 = 
míuTûe
+
y2
;

496 
y
=0; y<(240-48); y++)

498 
x
=0; x<320; x++)

500 *
‰amebuf„r1
++ = 
gøphics1
[
x2
];

501 
x2
++;

502 
x2
&=(
MENU_TILE_WIDTH
-1);

504 
y2
+=
MENU_TILE_WIDTH
;

505 
y2
&=((
MENU_TILE_HEIGHT
*
MENU_TILE_WIDTH
)-1);

506 
gøphics1
=
míuTûe
+
y2
;

509 
tûeCou¡î
++;

510 i‡(
tûeCou¡î
 > 5)

512 
tûeCou¡î
=0;

513 
míutûeXs¸ﬁl
++;

514 if(
míutûeXs¸ﬁl
>=
MENU_TILE_WIDTH
) menutileXscroll=0;

516 
míutûeYs¸ﬁl
++;

517 if(
míutûeYs¸ﬁl
>=
MENU_TILE_HEIGHT
) menutileYscroll=0;

520 
	}
}

522 
	$PrötTôÀ
(
Êù
)

524 *
‰amebuf„r
 = (*)
‰amebuf„r16
[
Êù
];

525 *
gøphics
 = (*)
míuHódî
;

526 
x
,
y
;

527 
ãxt
[256];

529 i‡(
hódîD⁄e
[
Êù
]) ;

531 
y
=0; y<48; y++)

533 
x
=0; x<320; x++)

535 *
‰amebuf„r
++ = *
gøphics
++;

539 
	`•rötf
(
ãxt
,"%s",
DRSNES_VERSION
);

540 
	`gp_døwSåög
(175,15,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(0,0,31),
‰amebuf„r16
[
Êù
]);

541 
hódîD⁄e
[
cuºFB
] = 1;

542 
	}
}

544 
	$PrötB¨
(
Êù
, 
givíY
)

546 *
‰amebuf„r1
 = 
NULL
;

547 *
gøphics1
 = (*)
highLightB¨
;

548 
x
,
y
;

550 
‰amebuf„r1
 = (*)
‰amebuf„r16
[
Êù
]+(
givíY
*160);

551 
y
=0; y<16; y++)

553 
x
=0; x<160; x++)

555 *
‰amebuf„r1
++ = *
gøphics1
++;

558 
	}
}

560 
	$SåögCom∑ª
(*
°rög1
, *
°rög2
)

562 
i
=0;

563 
c1
=0,
c2
=0;

566 
c1
=
°rög1
[
i
];

567 
c2
=
°rög2
[
i
];

570 i‡((
c1
 =0Ë&& (
c2
 == 0))  0;

571 i‡(
c1
 == 0)  1;

572 i‡(
c2
 == 0)  -1;

574 i‡((
c1
 >= 0x61)&&(c1<=0x7A)) c1-=0x20;

575 i‡((
c2
 >= 0x61)&&(c2<=0x7A)) c2-=0x20;

576 i‡(
c1
>
c2
)

578 i‡(
c1
<
c2
)

580 
i
++;

583 
	}
}

585 #ifde‡
__GIZ__


586 
BOOL
 
	$Ch¨ToWCh¨
(
wch¨_t
 *
wc
, *
c
)

588 
Àn
=
	`°æí
(
c
);

589 
x
=0;

590 
x
=0;x<
Àn
;x++)

592 
wc
[
x
] = 
	`btowc
(
c
[x]);

594 
wc
[
Àn
]=0;

595  
TRUE
;

596 
	}
}

599 
	$FûeSˇn
()

601 
i
=0,
j
=0;

602 
ãxt
[256];

603 
DIR
 *
d
;

604 
dúít
 *
de
;

605 
dúCheck
[
MAX_PATH
+1];

606 
dúCou¡
=0;

607 
_fûíame
[
MAX_PATH
+1];

608 
_ext
[
MAX_PATH
+1];

610 #ifde‡
__GIZ__


611 
wch¨_t
 
wc
[
MAX_PATH
+1];

612 
HANDLE
 
hTe°
;

613 
WIN32_FIND_DATAW
 
fûeInfo
;

616 
	`PrötTûe
(
cuºFB
);

617 
	`PrötTôÀ
(
cuºFB
);

618 
	`gp_døwSåög
(8,120,25,"Gëtög Dúe˘‹y Info...",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

619 
	`MíuFlù
();

621 
i
=0;i<
MAX_ROMS
;i++)

623 
romLi°
[
i
].
fûíame
[0] = 0;

627 
romCou¡
=0;

630 
	`•rötf
(
romLi°
[0].
fûíame
,"Save As Default Directory");

631 
	`•rötf
(
romLi°
[1].
fûíame
,"Back To Main Menu");

632 
	`•rötf
(
romLi°
[2].
fûíame
,"Parent Directory");

633 
romLi°
[3].
fûíame
[0] = 0;

634 
romCou¡
=4;

636 
d
 = 
	`›ídú
(
romDú
);

638 i‡(
d
)

640 (
de
 = 
	`ªaddú
(
d
)))

642 i‡(
de
->
d_«me
[0] != '.')

644 #ifde‡
__GP2X__


645 i‡(
de
->
d_ty≥
 == 4)

647 #ifde‡
__GIZ__


648 
	`•rötf
(
dúCheck
,"%s%s%s",
romDú
,
DIR_SEP
,
de
->
d_«me
);

649 
	`Ch¨ToWCh¨
(
wc
, 
dúCheck
);

650 
hTe°
=
	`FödFú°FûeW
(
wc
, &
fûeInfo
);

651 i‡(
fûeInfo
.
dwFûeAâribuãs
&
FILE_ATTRIBUTE_DIRECTORY
)

655 
i
=
ROM_SELECTOR_DEFAULT_FOCUS
+1;i<=(
romCou¡
+1);i++)

657 i‡(
romLi°
[
i
].
fûíame
[0] == 0)

659 
	`°r˝y
(
romLi°
[
i
].
fûíame
,
de
->
d_«me
);

660 
romLi°
[
i
].
ty≥
=
FILE_TYPE_DIRECTORY
;

665 i‡((
	`SåögCom∑ª
(
romLi°
[
i
].
fûíame
,
de
->
d_«me
) > 0) ||

666 (
romLi°
[
i
].
ty≥
 !
FILE_TYPE_DIRECTORY
))

670 
j
=
romCou¡
;j>=
i
;j--)

672 
	`°r˝y
(
romLi°
[
j
+1].
fûíame
,romList[j].filename);

673 
romLi°
[
j
+1].
ty≥
=romList[j].type;

675 
	`°r˝y
(
romLi°
[
i
].
fûíame
,
de
->
d_«me
);

676 
romLi°
[
i
].
ty≥
=
FILE_TYPE_DIRECTORY
;

681 
dúCou¡
++;

682 
romCou¡
++;

687 
	`S∂ôFûíame
(
de
->
d_«me
,
_fûíame
,
_ext
);

688 i‡((
	`SåögCom∑ª
(
_ext
,"zip") == 0) ||

689 (
	`SåögCom∑ª
(
_ext
,"smc") == 0) ||

690 (
	`SåögCom∑ª
(
_ext
,"sfc") == 0))

692 
i
=
ROM_SELECTOR_DEFAULT_FOCUS
+1+
dúCou¡
;i<=(
romCou¡
+1);i++)

694 i‡(
romLi°
[
i
].
fûíame
[0] == 0)

696 
	`°r˝y
(
romLi°
[
i
].
fûíame
,
de
->
d_«me
);

697 
romLi°
[
i
].
ty≥
=
FILE_TYPE_FILE
;

702 i‡(
	`SåögCom∑ª
(
romLi°
[
i
].
fûíame
,
de
->
d_«me
) > 0)

706 
j
=
romCou¡
;j>=
i
;j--)

708 
	`°r˝y
(
romLi°
[
j
+1].
fûíame
,romList[j].filename);

709 
romLi°
[
j
+1].
ty≥
=romList[j].type;

711 
	`°r˝y
(
romLi°
[
i
].
fûíame
,
de
->
d_«me
);

712 
romLi°
[
i
].
ty≥
=
FILE_TYPE_FILE
;

717 
romCou¡
++;

722 i‡(
romCou¡
 > 
MAX_ROMS
)

724 
	`PrötTûe
(
cuºFB
);

725 
	`PrötTôÀ
(
cuºFB
);

726 
	`•rötf
(
ãxt
,"MaxÑomÜimôÉx˚eded! %d max",
MAX_ROMS
);

727 
	`gp_døwSåög
(8,120,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

728 
	`•rötf
(
ãxt
,"PleaseÑeduceÇumber ofÑoms");

729 
	`gp_døwSåög
(8,130,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

730 
	`MíuFlù
();

731 
	`MíuPau£
();

736 
	`˛o£dú
(
d
);

740 
	`PrötTûe
(
cuºFB
);

741 
	`PrötTôÀ
(
cuºFB
);

742 
	`•rötf
(
ãxt
,"FailedÅo open directory!");

743 
	`gp_døwSåög
(8,120,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

744 
	`MíuFlù
();

745 
	`MíuPau£
();

748  
romCou¡
;

749 
	}
}

751 
	$FûeSñe˘
(
mode
)

753 
ãxt
[256];

754 
rom«me_Àngth
;

755 
a˘i⁄
=0;

756 
smoŸh
=0;

757 
cﬁ‹
=0;

758 
i
=0;

759 
focus
=
ROM_SELECTOR_DEFAULT_FOCUS
;

760 
míuExô
=0;

761 
sˇn°¨t
=0,
sˇ√nd
=0;

762 
dúSï
[2]={
DIR_SEP
};

763 
dúSïBad
[2]={
DIR_SEP_BAD
};

765 
	`FûeSˇn
();

767 
smoŸh
=
focus
<<8;

769 
míuExô
==0)

771 
	`I≈utUpd©e
(0);

774 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
])

776 
focus
--;

778 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
])

780 
focus
++;

783 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1 ) {
a˘i⁄
=0; 
míuExô
=1;}

785 i‡(
I≈
.
ª≥©
[
INP_BUTTON_LEFT
] || I≈.ª≥©[
INP_BUTTON_RIGHT
] )

787 i‡(
I≈
.
ª≥©
[
INP_BUTTON_LEFT
])

789 
focus
-=12;

790 
smoŸh
=(
focus
<<8)-1;

792 i‡(
I≈
.
ª≥©
[
INP_BUTTON_RIGHT
])

794 
focus
+=12;

795 
smoŸh
=(
focus
<<8)-1;

798 i‡(
focus
>
romCou¡
-1)

800 
focus
=
romCou¡
-1;

801 
smoŸh
=(
focus
<<8)-1;

803 i‡(
focus
<0)

805 
focus
=0;

806 
smoŸh
=(
focus
<<8)-1;

810 i‡(
focus
>
romCou¡
-1)

812 
focus
=0;

813 
smoŸh
=(
focus
<<8)-1;

815 i‡(
focus
<0)

817 
focus
=
romCou¡
-1;

818 
smoŸh
=(
focus
<<8)-1;

821 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)

823 
focus
)

826 
	`SaveMíuO±i⁄s
(
¢esO±i⁄sDú
, 
DEFAULT_ROM_DIR_FILENAME
, 
DEFAULT_ROM_DIR_EXT
, 
romDú
, 
	`°æí
(romDir),1);

827 
	`°r˝y
(
¢esRomDú
,
romDú
);

831 
a˘i⁄
=0;

832 
míuExô
=1;

840 
i
=
	`°æí
(
romDú
)-1;i>0;i--)

842 if((
romDú
[
i
] =
dúSï
[0]Ë|| (romDú[i] =
dúSïBad
[0]))

844 
romDú
[
i
] = 0;

848 
	`FûeSˇn
();

849 
focus
=
ROM_SELECTOR_DEFAULT_FOCUS
;

851 
smoŸh
=
focus
<<8;

852 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

855 
ROM_SELECTOR_DEFAULT_FOCUS
:

860 i‡(
romLi°
[
focus
].
ty≥
 =
FILE_TYPE_DIRECTORY
)

864 
	`•rötf
(
romDú
,"%s%s%s",romDú,
DIR_SEP
,
romLi°
[
focus
].
fûíame
);

865 
	`FûeSˇn
();

866 
focus
=
ROM_SELECTOR_DEFAULT_FOCUS
;

868 
smoŸh
=
focus
<<8;

873 
	`•rötf
(
cuºítRomFûíame
,
romLi°
[
focus
].
fûíame
);

874 
quickSavePª£¡
=0;

875 
a˘i⁄
=1;

876 
míuExô
=1;

882 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_DELETE
]==1)

884 if(
focus
>
ROM_SELECTOR_DEFAULT_FOCUS
)

887 i‡(
romLi°
[
focus
].
ty≥
 !
FILE_TYPE_DIRECTORY
)

889 
	`•rötf
(
ãxt
,"%s",
romLi°
[
focus
].
fûíame
);

891 if(
	`MíuMesßgeBox
("Aª you suª you w™àtÿdñëe",
ãxt
,"",0)==0)

893 
	`dñëîom
(
focus
);

900 
	`PrötTûe
(
cuºFB
);

901 
	`PrötTôÀ
(
cuºFB
);

902 
	`•rötf
(
ãxt
,"%s:%s",
mode
?"Sñe˘ Rom":"DñëêRom",
romDú
);

903 
	`gp_døwSåög
(6,35,
	`°æí
(
ãxt
)>=40?39:°æí—ext),ãxt,()
	`MENU_RGB
(31,0,0),
‰amebuf„r16
[
cuºFB
]);

905 
smoŸh
=smoŸh*7+(
focus
<<8); smooth>>=3;

907 
sˇn°¨t
=
focus
-15;

908 i‡(
sˇn°¨t
<0) scanstart=0;

909 
sˇ√nd
 = 
focus
+15;

910 i‡(
sˇ√nd
>
romCou¡
) scanend=romCount;

912 
i
=
sˇn°¨t
;i<
sˇ√nd
;i++)

914 
x
=0,
y
=0;

916 
y
=(
i
<<4)-(
smoŸh
>>4);

917 
x
=8;

918 
y
+=112;

919 i‡(
y
<=48 || y>=232) ;

921 i‡(
i
==
focus
)

923 
cﬁ‹
=()
	`MENU_RGB
(0,0,0);

924 
	`PrötB¨
(
cuºFB
,
y
-4);

928 
cﬁ‹
=()
	`MENU_RGB
(31,31,31);

932 if(
romLi°
[
i
].
ty≥
 =
FILE_TYPE_DIRECTORY
)

934 
	`gp_døwSåög
(
x
-8,
y
,1,"+",
cﬁ‹
,
‰amebuf„r16
[
cuºFB
]);

937 
rom«me_Àngth
=
	`°æí
(
romLi°
[
i
].
fûíame
);

938 if(
rom«me_Àngth
>39)Ñomname_length=39;

939 
	`gp_døwSåög
(
x
,
y
,
rom«me_Àngth
,
romLi°
[
i
].
fûíame
,
cﬁ‹
,
‰amebuf„r16
[
cuºFB
]);

942 
	`MíuFlù
();

945  
a˘i⁄
;

946 
	}
}

948 
	$SˇnSaveSèãs
(*
rom«me
)

950 
FILE
 *
°ªam
;

951 
i
=0;

952 
ßvíame
[
MAX_PATH
+1];

953 
fûíame
[
MAX_PATH
+1];

954 
ext
[
MAX_PATH
+1];

956 if(!
	`°rcmp
(
rom«me
,
ßveSèãName
)) ;

958 
	`S∂ôFûíame
(
rom«me
,
fûíame
,
ext
);

960 
	`•rötf
(
ßvíame
,"%s.%s",
fûíame
,
SAVESTATE_EXT
);

962 
i
=0;i<10;i++)

970 
	`•rötf
(
ßveSèã
[
i
].
fûíame
,"%s%d",
ßvíame
,i);

971 
	`•rötf
(
ßveSèã
[
i
].
fuŒFûíame
,"%s%s%s",
¢esSaveSèãDú
,
DIR_SEP
,ßveSèã[i].
fûíame
);

972 
°ªam
=(
FILE
*)
	`f›í
(
ßveSèã
[
i
].
fuŒFûíame
,"rb");

973 if(
°ªam
)

976 
ßveSèã
[
i
].
öU£
 = 1;

977 
	`f˛o£
(
°ªam
);

982 
ßveSèã
[
i
].
öU£
 = 0;

985 
	`°r˝y
(
ßveSèãName
,
rom«me
);

986 
	}
}

988 
	$LﬂdSèãFûe
(*
fûíame
)

990 
	`S9xUn‰ìzeGame
(
fûíame
);

991 
	}
}

993 
	$SaveSèãFûe
(*
fûíame
)

995 
	`S9xFªezeGame
(
fûíame
);

996 
	`sync
();

997 
	}
}

999 
	$SaveSèãSñe˘
(
mode
)

1001 
ãxt
[128];

1002 
a˘i⁄
=11;

1003 
ßvío
=0;

1005 if(
cuºítRomFûíame
[0]==0)

1012 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1013 
	`SˇnSaveSèãs
(
cuºítRomFûíame
);

1015 
a˘i⁄
!=0&&action!=100)

1017 
	`I≈utUpd©e
(0);

1018 if(
I≈
.
hñd
[
INP_BUTTON_UP
]==1Ë{
ßvío
--; 
a˘i⁄
=1;}

1019 if(
I≈
.
hñd
[
INP_BUTTON_DOWN
]==1Ë{
ßvío
++; 
a˘i⁄
=1;}

1020 if(
ßvío
<-1) saveno=9;

1021 if(
ßvío
>9) saveno=-1;

1023 if(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1Ë
a˘i⁄
=0;

1024 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
ßvío
==-1)Ë
a˘i⁄
=0;

1025 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
mode
==0)&&((
a˘i⁄
==2)||(action==5)))áction=6;

1026 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
mode
==1)&&(
a˘i⁄
==5))áction=8;

1027 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
mode
==2)&&(
a˘i⁄
==5))

1029 if(
	`MíuMesßgeBox
("Aª you suª you w™àtÿdñëe","thi†ßve?","",0)==0Ë
a˘i⁄
=13;

1032 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
mode
==1)&&(
a˘i⁄
==12))áction=8;

1033 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
mode
==0)&&(
a˘i⁄
==12))áction=6;

1034 if((
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)&&(
mode
==2)&&(
a˘i⁄
==12))

1036 if(
	`MíuMesßgeBox
("Aª you suª you w™àtÿdñëe","thi†ßve?","",0)==0Ë
a˘i⁄
=13;

1039 
	`PrötTûe
(
cuºFB
);

1040 
	`PrötTôÀ
(
cuºFB
);

1041 if(
mode
==
SAVESTATE_MODE_SAVE
Ë
	`gp_døwSåög
(6,35,10,"SavêSèã",()
	`MENU_RGB
(31,0,0),
‰amebuf„r16
[
cuºFB
]);

1042 if(
mode
==
SAVESTATE_MODE_LOAD
Ë
	`gp_døwSåög
(6,35,10,"Lﬂd Sèã",()
	`MENU_RGB
(31,0,0),
‰amebuf„r16
[
cuºFB
]);

1043 if(
mode
==
SAVESTATE_MODE_DELETE
Ë
	`gp_døwSåög
(6,35,12,"DñëêSèã",()
	`MENU_RGB
(31,0,0),
‰amebuf„r16
[
cuºFB
]);

1044 
	`•rötf
(
ãxt
,"Press UPánd DOWNÅo change save slot");

1045 
	`gp_døwSåög
(12,230,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,15,5),
‰amebuf„r16
[
cuºFB
]);

1047 if(
ßvío
==-1)

1049 if(
a˘i⁄
!=10&&action!=0)

1051 
a˘i⁄
=10;

1056 
	`PrötB¨
(
cuºFB
,60-4);

1057 
	`•rötf
(
ãxt
,"SLOT %d",
ßvío
);

1058 
	`gp_døwSåög
(136,60,
	`°æí
(
ãxt
),ãxt,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1061 
a˘i⁄
)

1067 
	`gp_døwSåög
(144,145,4,"FREE",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1070 
	`gp_døwSåög
(104,145,14,"Pªvõwög....",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1073 
	`gp_døwSåög
(88,145,18,"Pªvõwög....Áû",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1076 
	`gp_døwSåög
(112,145,17, "NŸ g⁄« h≠≥n!",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1077 if(
mode
==1Ë
	`gp_døwSåög
((320-(
	`°æí
(
MENU_TEXT_LOAD_SAVESTATE
)<<3))>>1,210,°æí(MENU_TEXT_LOAD_SAVESTATE), MENU_TEXT_LOAD_SAVESTATE,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1078 if(
mode
==0Ë
	`gp_døwSåög
((320-(
	`°æí
(
MENU_TEXT_OVERWRITE_SAVESTATE
)<<3))>>1,210,°æí(MENU_TEXT_OVERWRITE_SAVESTATE), MENU_TEXT_OVERWRITE_SAVESTATE,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1079 if(
mode
==2Ë
	`gp_døwSåög
((320-(
	`°æí
(
MENU_TEXT_DELETE_SAVESTATE
)<<3))>>1,210,°æí(MENU_TEXT_DELETE_SAVESTATE), MENU_TEXT_DELETE_SAVESTATE,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1082 
	`gp_døwSåög
(124,145,9,"Savög...",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1085 
	`gp_døwSåög
(124,145,14,"Savög...Faû!",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1088 
	`gp_døwSåög
(116,145,11,"lﬂdög....",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1091 
	`gp_døwSåög
(116,145,15,"lﬂdög....Faû",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1094 
	`PrötB¨
(
cuºFB
,145-4);

1095 
	`gp_døwSåög
(104,145,14,"Rëu∫ TÿMíu",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1098 
	`gp_døwSåög
(124,145,9,"SlŸ u£d",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1100 if(
mode
==1Ë
	`gp_døwSåög
((320-(
	`°æí
(
MENU_TEXT_LOAD_SAVESTATE
)<<3))>>1,175,°æí(MENU_TEXT_LOAD_SAVESTATE), MENU_TEXT_LOAD_SAVESTATE,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1101 if(
mode
==0Ë
	`gp_døwSåög
((320-(
	`°æí
(
MENU_TEXT_OVERWRITE_SAVESTATE
)<<3))>>1,175,°æí(MENU_TEXT_OVERWRITE_SAVESTATE), MENU_TEXT_OVERWRITE_SAVESTATE,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1102 if(
mode
==2Ë
	`gp_døwSåög
((320-(
	`°æí
(
MENU_TEXT_DELETE_SAVESTATE
)<<3))>>1,175,°æí(MENU_TEXT_DELETE_SAVESTATE), MENU_TEXT_DELETE_SAVESTATE,()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1105 
	`gp_døwSåög
(116,145,11,"Dñëög....",()
	`MENU_RGB
(31,31,31),
‰amebuf„r16
[
cuºFB
]);

1109 
	`MíuFlù
();

1111 
a˘i⁄
)

1114 if(
ßveSèã
[
ßvío
].
öU£
)

1116 
a˘i⁄
=12;

1120 
a˘i⁄
=2;

1124 
	`LﬂdSèãFûe
(
ßveSèã
[
ßvío
].
fuŒFûíame
);

1125 
a˘i⁄
=5;

1128 
	`SaveSèãFûe
(
ßveSèã
[
ßvío
].
fuŒFûíame
);

1129 
ßveSèã
[
ßvío
].
öU£
=1;

1130 
a˘i⁄
=1;

1133 
a˘i⁄
=1;

1136 
	`LﬂdSèãFûe
(
ßveSèã
[
ßvío
].
fuŒFûíame
);

1137 
a˘i⁄
=100;

1140 
a˘i⁄
=1;

1143 
a˘i⁄
=1;

1146 
	`ªmove
(
ßveSèã
[
ßvío
].
fuŒFûíame
);

1147 
	`sync
();

1148 
ßveSèã
[
ßvío
].
öU£
 = 0;

1149 
a˘i⁄
=1;

1153 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1154 (
a˘i⁄
);

1155 
	}
}

1158 
	$RídîMíu
(*
míuName
, 
míuCou¡
, 
míuSmoŸh
, 
míufocus
)

1161 
i
=0;

1162 
ãxt
[50];

1163 
cﬁ‹
=0;

1164 
	`PrötTûe
(
cuºFB
);

1165 
	`PrötTôÀ
(
cuºFB
);

1167 
	`gp_døwSåög
(6,35,
	`°æí
(
míuName
),míuName,()
	`MENU_RGB
(31,0,0),
‰amebuf„r16
[
cuºFB
]);

1170 
i
=0;i<
míuCou¡
;i++)

1172 
x
=0,
y
=0;

1174 
y
=(
i
<<4)-(
míuSmoŸh
>>4);

1175 
x
=8;

1176 
y
+=112;

1178 i‡(
y
<=48 || y>=232) ;

1180 i‡(
i
==
míufocus
)

1182 
cﬁ‹
=()
	`MENU_RGB
(0,0,0);

1183 
	`PrötB¨
(
cuºFB
,
y
-4);

1187 
cﬁ‹
=()
	`MENU_RGB
(31,31,31);

1190 
	`•rötf
(
ãxt
,"%s",
míuãxt
[
i
]);

1191 
	`gp_døwSåög
(
x
,
y
,
	`°æí
(
ãxt
),ãxt,
cﬁ‹
,
‰amebuf„r16
[
cuºFB
]);

1194 
	}
}

1197 
	$LﬂdRomMíu
()

1199 
míuExô
=0,
míuCou¡
=
LOAD_ROM_MENU_COUNT
,
míufocus
=0,
míuSmoŸh
=0;

1200 
a˘i⁄
=0;

1201 
suba˘i⁄
=0;

1203 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1204 
	`°r˝y
(
romDú
,
¢esRomDú
);

1205 
suba˘i⁄
=
	`FûeSñe˘
(0);

1206 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1207 if(
suba˘i⁄
)

1209 
a˘i⁄
=
EVENT_LOAD_SNES_ROM
;

1210 
míuExô
=1;

1213  
a˘i⁄
;

1214 
	}
}

1217 
	$SaveSèãMíu
()

1219 
míuExô
=0,
míuCou¡
=
SAVESTATE_MENU_COUNT
,
míufocus
=0,
míuSmoŸh
=0;

1220 
a˘i⁄
=0;

1221 
suba˘i⁄
=0;

1223 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1226 
	`•rötf
(
míuãxt
[
SAVESTATE_MENU_LOAD
],"Load State");

1227 
	`•rötf
(
míuãxt
[
SAVESTATE_MENU_SAVE
],"Save State");

1228 
	`•rötf
(
míuãxt
[
SAVESTATE_MENU_DELETE
],"Delete State");

1229 
	`•rötf
(
míuãxt
[
SAVESTATE_MENU_RETURN
],"Back");

1231 !
míuExô
)

1233 
	`I≈utUpd©e
(0);

1236 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
]Ë
míufocus
--;

1237 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
]Ë
míufocus
++;

1239 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1 ) 
míuExô
=1;

1241 i‡(
míufocus
>
míuCou¡
-1)

1243 
míufocus
=0;

1244 
míuSmoŸh
=(
míufocus
<<8)-1;

1246 i‡(
míufocus
<0)

1248 
míufocus
=
míuCou¡
-1;

1249 
míuSmoŸh
=(
míufocus
<<8)-1;

1252 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)

1254 
míufocus
)

1256 
SAVESTATE_MENU_LOAD
:

1257 
suba˘i⁄
=
	`SaveSèãSñe˘
(
SAVESTATE_MODE_LOAD
);

1258 if(
suba˘i⁄
==100)

1260 
míuExô
=1;

1261 
a˘i⁄
=100;

1264 
SAVESTATE_MENU_SAVE
:

1265 
	`SaveSèãSñe˘
(
SAVESTATE_MODE_SAVE
);

1267 
SAVESTATE_MENU_DELETE
:

1268 
	`SaveSèãSñe˘
(
SAVESTATE_MODE_DELETE
);

1270 
SAVESTATE_MENU_RETURN
:

1271 
míuExô
=1;

1276 
míuSmoŸh
=míuSmoŸh*7+(
míufocus
<<8); menuSmooth>>=3;

1277 
	`RídîMíu
("SavêSèãs", 
míuCou¡
,
míuSmoŸh
,
míufocus
);

1278 
	`MíuFlù
();

1282  
a˘i⁄
;

1283 
	}
}

1286 
	$SømMíu
()

1288 
míuExô
=0,
míuCou¡
=
SRAM_MENU_COUNT
,
míufocus
=0,
míuSmoŸh
=0;

1289 
a˘i⁄
=0;

1290 
suba˘i⁄
=0;

1291 *
§ammem
=
NULL
;

1294 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1297 
	`•rötf
(
míuãxt
[
SRAM_MENU_LOAD
],"Load SRAM");

1298 
	`•rötf
(
míuãxt
[
SRAM_MENU_SAVE
],"Save SRAM");

1299 
	`•rötf
(
míuãxt
[
SRAM_MENU_DELETE
],"Delete SRAM");

1300 
	`•rötf
(
míuãxt
[
SRAM_MENU_RETURN
],"Back");

1302 !
míuExô
)

1304 
	`I≈utUpd©e
(0);

1307 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
]Ë
míufocus
--;

1308 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
]Ë
míufocus
++;

1310 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1 ) 
míuExô
=1;

1312 i‡(
míufocus
>
míuCou¡
-1)

1314 
míufocus
=0;

1315 
míuSmoŸh
=(
míufocus
<<8)-1;

1317 i‡(
míufocus
<0)

1319 
míufocus
=
míuCou¡
-1;

1320 
míuSmoŸh
=(
míufocus
<<8)-1;

1323 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)

1325 
míufocus
)

1327 
SRAM_MENU_LOAD
:

1330 
SRAM_MENU_SAVE
:

1333 
SRAM_MENU_DELETE
:

1336 
SRAM_MENU_RETURN
:

1337 
míuExô
=1;

1342 
míuSmoŸh
=míuSmoŸh*7+(
míufocus
<<8); menuSmooth>>=3;

1343 
	`RídîMíu
("SRAM", 
míuCou¡
,
míuSmoŸh
,
míufocus
);

1344 
	`MíuFlù
();

1348  
a˘i⁄
;

1349 
	}
}

1352 
	$SNESO±i⁄sUpd©eText
(
míu_ödex
)

1354 
míu_ödex
)

1356 
SNES_MENU_SOUND
:

1357 
¢esMíuO±i⁄s
.
soundOn
)

1360 
	`•rötf
(
míuãxt
[
SNES_MENU_SOUND
],"Sound: OFF");

1363 
	`•rötf
(
míuãxt
[
SNES_MENU_SOUND
],"Sound: ON");

1368 
SNES_MENU_SOUND_RATE
:

1369 i‡(
¢esMíuO±i⁄s
.
°îeo
)

1370 
	`•rötf
(
míuãxt
[
SNES_MENU_SOUND_RATE
],"Sound R©e: %d sãªo",()
soundR©es
[
¢esMíuO±i⁄s
.
soundR©e
]);

1372 
	`•rötf
(
míuãxt
[
SNES_MENU_SOUND_RATE
],"Sound R©e: %d m⁄o",()
soundR©es
[
¢esMíuO±i⁄s
.
soundR©e
]);

1374 #i‡
	`deföed
(
__GP2X__
)

1375 
SNES_MENU_CPUSPEED
:

1376 
	`•rötf
(
míuãxt
[
SNES_MENU_CPUSPEED
],"Cpu S≥ed: %d",()
˝uS≥edLookup
[
¢esMíuO±i⁄s
.
˝uS≥ed
]);

1379 
SNES_MENU_SOUND_VOL
:

1380 
	`•rötf
(
míuãxt
[
SNES_MENU_SOUND_VOL
],"Vﬁume: %d",
¢esMíuO±i⁄s
.
vﬁume
);

1383 
SNES_MENU_FRAMESKIP
:

1384 
¢esMíuO±i⁄s
.
‰ameSkù
)

1387 
	`•rötf
(
míuãxt
[
SNES_MENU_FRAMESKIP
],"Frameskip: AUTO");

1390 
	`•rötf
(
míuãxt
[
SNES_MENU_FRAMESKIP
],"Fømeskù: %d",
¢esMíuO±i⁄s
.
‰ameSkù
-1);

1395 
SNES_MENU_REGION
:

1396 
¢esMíuO±i⁄s
.
ªgi⁄
)

1399 
	`•rötf
(
míuãxt
[
SNES_MENU_REGION
],"Region: AUTO");

1402 
	`•rötf
(
míuãxt
[
SNES_MENU_REGION
],"Region: NTSC");

1405 
	`•rötf
(
míuãxt
[
SNES_MENU_REGION
],"Region: PAL");

1410 
SNES_MENU_FPS
:

1411 
¢esMíuO±i⁄s
.
showFps
)

1414 
	`•rötf
(
míuãxt
[
SNES_MENU_FPS
],"Show FPS: OFF");

1417 
	`•rötf
(
míuãxt
[
SNES_MENU_FPS
],"Show FPS: ON");

1421 #i‡
	`deföed
(
__GP2X__
)

1422 
SNES_MENU_GAMMA
:

1423 
	`•rötf
(
míuãxt
[
SNES_MENU_GAMMA
],"Brighäess: %d",
¢esMíuO±i⁄s
.
gamma
+100);

1426 
SNES_MENU_TRANSPARENCY
:

1427 
¢esMíuO±i⁄s
.
å™•¨ícy
)

1430 
	`•rötf
(
míuãxt
[
SNES_MENU_TRANSPARENCY
],"Transparencies: OFF");

1433 
	`•rötf
(
míuãxt
[
SNES_MENU_TRANSPARENCY
],"Transparencies: ON");

1438 
SNES_MENU_LOAD_GLOBAL
:

1439 
	`•rötf
(
míuãxt
[
SNES_MENU_LOAD_GLOBAL
],"Load Global Settings");

1442 
SNES_MENU_SAVE_GLOBAL
:

1443 
	`•rötf
(
míuãxt
[
SNES_MENU_SAVE_GLOBAL
],"Save Global Settings");

1446 
SNES_MENU_DELETE_GLOBAL
:

1447 
	`•rötf
(
míuãxt
[
SNES_MENU_DELETE_GLOBAL
],"Delete Global Settings");

1450 
SNES_MENU_LOAD_CURRENT
:

1451 
	`•rötf
(
míuãxt
[
SNES_MENU_LOAD_CURRENT
],"Load Settings For Current Game");

1454 
SNES_MENU_SAVE_CURRENT
:

1455 
	`•rötf
(
míuãxt
[
SNES_MENU_SAVE_CURRENT
],"Save Settings For Current Game");

1458 
SNES_MENU_DELETE_CURRENT
:

1459 
	`•rötf
(
míuãxt
[
SNES_MENU_DELETE_CURRENT
],"Delete Settings For Current Game");

1462 
SNES_MENU_SET_ROMDIR
:

1463 
	`•rötf
(
míuãxt
[
SNES_MENU_SET_ROMDIR
],"Save Current Rom Directory");

1466 
SNES_MENU_CLEAR_ROMDIR
:

1467 
	`•rötf
(
míuãxt
[
SNES_MENU_CLEAR_ROMDIR
],"Reset Default Rom Directory");

1470 
SNES_MENU_RETURN
:

1471 
	`•rötf
(
míuãxt
[
SNES_MENU_RETURN
],"Back");

1473 #i‡
	`deföed
(
__GP2X__
)

1474 
SNES_MENU_RENDER_MODE
:

1475 
¢esMíuO±i⁄s
.
ªndîMode
)

1477 
RENDER_MODE_UNSCALED
:

1478 
	`•rötf
(
míuãxt
[
SNES_MENU_RENDER_MODE
],"Render Mode: Unscaled");

1480 
RENDER_MODE_SCALED
:

1481 
	`•rötf
(
míuãxt
[
SNES_MENU_RENDER_MODE
],"Render Mode: Scaled");

1484 
	`•rötf
(
míuãxt
[
SNES_MENU_RENDER_MODE
],"Render Mode: Unscaled");

1488 
SNES_MENU_ACTION_BUTTONS
:

1489 
¢esMíuO±i⁄s
.
a˘i⁄Buâ⁄s
)

1492 
	`•rötf
(
míuãxt
[
SNES_MENU_ACTION_BUTTONS
],"Action Buttons: Normal");

1495 
	`•rötf
(
míuãxt
[
SNES_MENU_ACTION_BUTTONS
],"Action Buttons: Swapped");

1500 
SNES_MENU_AUTO_SAVE_SRAM
:

1501 
¢esMíuO±i⁄s
.
autoSøm
)

1504 
	`•rötf
(
míuãxt
[
SNES_MENU_AUTO_SAVE_SRAM
],"Saving SRAM: Manual");

1507 
	`•rötf
(
míuãxt
[
SNES_MENU_AUTO_SAVE_SRAM
],"Saving SRAM: Automatic");

1511 #i‡
	`deföed
(
__GP2X__
)

1512 
SNES_MENU_RAM_SETTINGS
:

1513 
¢esMíuO±i⁄s
.
ømSëtögs
)

1516 
	`•rötf
(
míuãxt
[
SNES_MENU_RAM_SETTINGS
],"RAMÅiming (Restart Required): NORMAL");

1519 
	`•rötf
(
míuãxt
[
SNES_MENU_RAM_SETTINGS
],"RAMÅiming (Restart Required): CRAIG");

1523 
SNES_MENU_MMU_HACK
:

1524 
¢esMíuO±i⁄s
.
mmuHack
)

1527 
	`•rötf
(
míuãxt
[
SNES_MENU_MMU_HACK
],"MMU Hack (Restart Required): OFF");

1530 
	`•rötf
(
míuãxt
[
SNES_MENU_MMU_HACK
],"MMU Hack (Restart Required): ON");

1535 
SNES_MENU_ADVANCED_HACKS
:

1536 
	`•rötf
(
míuãxt
[
SNES_MENU_ADVANCED_HACKS
],"Advanced hacks");

1539 
	}
}

1542 
	$SNESHacksUpd©eText
(
míu_ödex
)

1544 
míu_ödex
)

1546 
HACKS_MENU_AUDIO
:

1547 if(
¢esMíuO±i⁄s
.
soundHack
)

1548 
	`•rötf
(
míuãxt
[
HACKS_MENU_AUDIO
],"Audio Performance hack: ON");

1550 
	`•rötf
(
míuãxt
[
HACKS_MENU_AUDIO
],"Audio Performance hack: OFF");

1552 
HACKS_MENU_PALETTE
:

1553 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_PALWRITE
)

1554 
	`•rötf
(
míuãxt
[
HACKS_MENU_PALETTE
],"Ignore Palette writes: ON");

1556 
	`•rötf
(
míuãxt
[
HACKS_MENU_PALETTE
],"Ignore Palette writes: OFF");

1558 
HACKS_MENU_FIXEDCOL
:

1559 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_FIXEDCOLCHANGES
)

1560 
	`•rötf
(
míuãxt
[
HACKS_MENU_FIXEDCOL
],"Ignore Fixed Colour: ON");

1562 
	`•rötf
(
míuãxt
[
HACKS_MENU_FIXEDCOL
],"Ignore Fixed Colour: OFF");

1564 
HACKS_MENU_WINDOW
:

1565 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_WINDOW
)

1566 
	`•rötf
(
míuãxt
[
HACKS_MENU_WINDOW
],"Ignore Windows clipping: ON");

1568 
	`•rötf
(
míuãxt
[
HACKS_MENU_WINDOW
],"Ignore Windows clipping: OFF");

1570 
HACKS_MENU_ADDSUB
:

1571 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_ADDSUB
)

1572 
	`•rötf
(
míuãxt
[
HACKS_MENU_ADDSUB
],"Ignore Add/Sub modes: ON");

1574 
	`•rötf
(
míuãxt
[
HACKS_MENU_ADDSUB
],"Ignore Add/Sub modes: OFF");

1576 
HACKS_MENU_OBJ
:

1577 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_OBJ
)

1578 
	`•rötf
(
míuãxt
[
HACKS_MENU_OBJ
],"Ignore objectsÜayer: ON");

1580 
	`•rötf
(
míuãxt
[
HACKS_MENU_OBJ
],"Ignore objectsÜayer: OFF");

1582 
HACKS_MENU_BG0
:

1583 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG0
)

1584 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG0
],"Ignore backgroundÜayer 0: ON");

1586 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG0
],"Ignore backgroundÜayer 0: OFF");

1588 
HACKS_MENU_BG1
:

1589 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG1
)

1590 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG1
],"Ignore backgroundÜayer 1: ON");

1592 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG1
],"Ignore backgroundÜayer 1: OFF");

1594 
HACKS_MENU_BG2
:

1595 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG2
)

1596 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG2
],"Ignore backgroundÜayer 2: ON");

1598 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG2
],"Ignore backgroundÜayer 2: OFF");

1600 
HACKS_MENU_BG3
:

1601 if(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG3
)

1602 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG3
],"Ignore backgroundÜayer 3: ON");

1604 
	`•rötf
(
míuãxt
[
HACKS_MENU_BG3
],"Ignore backgroundÜayer 3: OFF");

1606 
HACKS_MENU_RETURN
:

1607 
	`•rötf
(
míuãxt
[
HACKS_MENU_RETURN
],"Back");

1612 
	}
}

1615 
	$SNESHacksUpd©eText_AŒ
()

1617 
	`SNESHacksUpd©eText
(
HACKS_MENU_AUDIO
);

1618 
	`SNESHacksUpd©eText
(
HACKS_MENU_PALETTE
);

1619 
	`SNESHacksUpd©eText
(
HACKS_MENU_FIXEDCOL
);

1620 
	`SNESHacksUpd©eText
(
HACKS_MENU_WINDOW
);

1621 
	`SNESHacksUpd©eText
(
HACKS_MENU_ADDSUB
);

1622 
	`SNESHacksUpd©eText
(
HACKS_MENU_OBJ
);

1623 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG0
);

1624 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG1
);

1625 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG2
);

1626 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG3
);

1627 
	`SNESHacksUpd©eText
(
HACKS_MENU_RETURN
);

1628 
	}
}

1631 
	$SNESHacksMíu
()

1633 
míuExô
=0,
míuCou¡
=
HACKS_MENU_COUNT
,
míufocus
=0,
míuSmoŸh
=0;

1634 
a˘i⁄
=0;

1635 
suba˘i⁄
=0;

1637 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1640 
	`SNESHacksUpd©eText_AŒ
();

1642 !
míuExô
)

1644 
	`I≈utUpd©e
(0);

1647 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
]Ë
míufocus
--;

1648 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
]Ë
míufocus
++;

1650 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1 ) 
míuExô
=1;

1652 i‡(
míufocus
>
míuCou¡
-1)

1654 
míufocus
=0;

1655 
míuSmoŸh
=(
míufocus
<<8)-1;

1657 i‡(
míufocus
<0)

1659 
míufocus
=
míuCou¡
-1;

1660 
míuSmoŸh
=(
míufocus
<<8)-1;

1663 i‡(
I≈
.
hñd
[
INP_BUTTON_LEFT
]==1||

1664 
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||

1665 
I≈
.
ª≥©
[
INP_BUTTON_LEFT
]||

1666 
I≈
.
ª≥©
[
INP_BUTTON_RIGHT
])

1668 
míufocus
)

1670 
HACKS_MENU_AUDIO
:

1671 
¢esMíuO±i⁄s
.
soundHack
^=1;

1672 
	`SNESHacksUpd©eText
(
HACKS_MENU_AUDIO
);

1674 
HACKS_MENU_PALETTE
:

1675 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_PALWRITE
)

1676 
¢esMíuO±i⁄s
.
gøphHacks
 &~
PPU_IGNORE_PALWRITE
;

1678 
¢esMíuO±i⁄s
.
gøphHacks
 |
PPU_IGNORE_PALWRITE
;

1679 
	`SNESHacksUpd©eText
(
HACKS_MENU_PALETTE
);

1681 
HACKS_MENU_FIXEDCOL
:

1682 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_FIXEDCOLCHANGES
)

1683 
¢esMíuO±i⁄s
.
gøphHacks
 &~
PPU_IGNORE_FIXEDCOLCHANGES
;

1685 
¢esMíuO±i⁄s
.
gøphHacks
 |
PPU_IGNORE_FIXEDCOLCHANGES
;

1686 
	`SNESHacksUpd©eText
(
HACKS_MENU_FIXEDCOL
);

1688 
HACKS_MENU_WINDOW
:

1689 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_WINDOW
)

1690 
¢esMíuO±i⁄s
.
gøphHacks
 &~
PPU_IGNORE_WINDOW
;

1692 
¢esMíuO±i⁄s
.
gøphHacks
 |
PPU_IGNORE_WINDOW
;

1693 
	`SNESHacksUpd©eText
(
HACKS_MENU_WINDOW
);

1695 
HACKS_MENU_ADDSUB
:

1696 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
PPU_IGNORE_ADDSUB
)

1697 
¢esMíuO±i⁄s
.
gøphHacks
 &~
PPU_IGNORE_ADDSUB
;

1699 
¢esMíuO±i⁄s
.
gøphHacks
 |
PPU_IGNORE_ADDSUB
;

1700 
	`SNESHacksUpd©eText
(
HACKS_MENU_ADDSUB
);

1702 
HACKS_MENU_OBJ
:

1703 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_OBJ
)

1704 
¢esMíuO±i⁄s
.
gøphHacks
 &~
GFX_IGNORE_OBJ
;

1706 
¢esMíuO±i⁄s
.
gøphHacks
 |
GFX_IGNORE_OBJ
;

1707 
	`SNESHacksUpd©eText
(
HACKS_MENU_OBJ
);

1709 
HACKS_MENU_BG0
:

1710 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG0
)

1711 
¢esMíuO±i⁄s
.
gøphHacks
 &~
GFX_IGNORE_BG0
;

1713 
¢esMíuO±i⁄s
.
gøphHacks
 |
GFX_IGNORE_BG0
;

1714 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG0
);

1716 
HACKS_MENU_BG1
:

1717 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG1
)

1718 
¢esMíuO±i⁄s
.
gøphHacks
 &~
GFX_IGNORE_BG1
;

1720 
¢esMíuO±i⁄s
.
gøphHacks
 |
GFX_IGNORE_BG1
;

1721 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG1
);

1723 
HACKS_MENU_BG2
:

1724 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG2
)

1725 
¢esMíuO±i⁄s
.
gøphHacks
 &~
GFX_IGNORE_BG2
;

1727 
¢esMíuO±i⁄s
.
gøphHacks
 |
GFX_IGNORE_BG2
;

1728 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG2
);

1730 
HACKS_MENU_BG3
:

1731 i‡(
¢esMíuO±i⁄s
.
gøphHacks
 & 
GFX_IGNORE_BG3
)

1732 
¢esMíuO±i⁄s
.
gøphHacks
 &~
GFX_IGNORE_BG3
;

1734 
¢esMíuO±i⁄s
.
gøphHacks
 |
GFX_IGNORE_BG3
;

1735 
	`SNESHacksUpd©eText
(
HACKS_MENU_BG3
);

1739 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)

1741 
míufocus
)

1743 
HACKS_MENU_RETURN
:

1744 
míuExô
=1;

1749 
míuSmoŸh
=míuSmoŸh*7+(
míufocus
<<8); menuSmooth>>=3;

1750 
	`RídîMíu
("SNES Adv™˚d Hacks", 
míuCou¡
,
míuSmoŸh
,
míufocus
);

1751 
	`MíuFlù
();

1755  
a˘i⁄
;

1756 
	}
}

1759 
	$SNESO±i⁄sUpd©eText_AŒ
()

1761 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SOUND
);

1762 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SOUND_RATE
);

1763 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SOUND_VOL
);

1764 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_FRAMESKIP
);

1765 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_REGION
);

1766 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_FPS
);

1767 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_TRANSPARENCY
);

1768 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_LOAD_GLOBAL
);

1769 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SAVE_GLOBAL
);

1770 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_DELETE_GLOBAL
);

1771 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_LOAD_CURRENT
);

1772 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SAVE_CURRENT
);

1773 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_DELETE_CURRENT
);

1774 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SET_ROMDIR
);

1775 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_CLEAR_ROMDIR
);

1776 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_RETURN
);

1777 #i‡
	`deföed
(
__GP2X__
)

1778 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_RENDER_MODE
);

1779 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_GAMMA
);

1780 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_RAM_SETTINGS
);

1781 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_MMU_HACK
);

1782 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_CPUSPEED
);

1783 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_ACTION_BUTTONS
);

1785 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_AUTO_SAVE_SRAM
);

1786 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_ADVANCED_HACKS
);

1787 
	}
}

1790 
	$SNESO±i⁄sMíu
()

1792 
míuExô
=0,
míuCou¡
=
SNES_MENU_COUNT
,
míufocus
=0,
míuSmoŸh
=0;

1793 
a˘i⁄
=0;

1794 
suba˘i⁄
=0;

1796 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1799 
	`SNESO±i⁄sUpd©eText_AŒ
();

1801 !
míuExô
)

1803 
	`I≈utUpd©e
(0);

1806 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
]Ë
míufocus
--;

1807 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
]Ë
míufocus
++;

1809 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1 ) 
míuExô
=1;

1811 i‡(
míufocus
>
míuCou¡
-1)

1813 
míufocus
=0;

1814 
míuSmoŸh
=(
míufocus
<<8)-1;

1816 i‡(
míufocus
<0)

1818 
míufocus
=
míuCou¡
-1;

1819 
míuSmoŸh
=(
míufocus
<<8)-1;

1822 i‡(
I≈
.
hñd
[
INP_BUTTON_LEFT
]==1||

1823 
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||

1824 
I≈
.
ª≥©
[
INP_BUTTON_LEFT
]||

1825 
I≈
.
ª≥©
[
INP_BUTTON_RIGHT
])

1827 
míufocus
)

1829 
SNES_MENU_SOUND
:

1830 
¢esMíuO±i⁄s
.
soundOn
^=1;

1831 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SOUND
);

1833 
SNES_MENU_SOUND_RATE
:

1834 i‡(
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||I≈.
ª≥©
[INP_BUTTON_RIGHT])

1836 i‡(!
¢esMíuO±i⁄s
.
°îeo
)

1837 
¢esMíuO±i⁄s
.
°îeo
 = 1;

1840 
¢esMíuO±i⁄s
.
soundR©e
++;

1841 
¢esMíuO±i⁄s
.
°îeo
 = 0;

1843 if(
¢esMíuO±i⁄s
.
soundR©e
>4) snesMenuOptions.soundRate=0;

1847 i‡(
¢esMíuO±i⁄s
.
°îeo
)

1848 
¢esMíuO±i⁄s
.
°îeo
 = 0;

1851 
¢esMíuO±i⁄s
.
soundR©e
--;

1852 
¢esMíuO±i⁄s
.
°îeo
 = 1;

1854 if(
¢esMíuO±i⁄s
.
soundR©e
>4) snesMenuOptions.soundRate=4;

1856 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SOUND_RATE
);

1858 
SNES_MENU_SOUND_VOL
:

1859 i‡(
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||I≈.
ª≥©
[INP_BUTTON_RIGHT])

1861 
¢esMíuO±i⁄s
.
vﬁume
+=1;

1862 if(
¢esMíuO±i⁄s
.
vﬁume
>100) snesMenuOptions.volume=0;

1866 
¢esMíuO±i⁄s
.
vﬁume
-=1;

1867 if(
¢esMíuO±i⁄s
.
vﬁume
>100) snesMenuOptions.volume=100;

1869 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_SOUND_VOL
);

1871 #i‡
	`deföed
(
__GP2X__
)

1872 
SNES_MENU_CPUSPEED
:

1873 i‡(
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||I≈.
ª≥©
[INP_BUTTON_RIGHT])

1875 
¢esMíuO±i⁄s
.
˝uS≥ed
++;

1876 if(
¢esMíuO±i⁄s
.
˝uS≥ed
>40) snesMenuOptions.cpuSpeed=0;

1880 
¢esMíuO±i⁄s
.
˝uS≥ed
--;

1881 if(
¢esMíuO±i⁄s
.
˝uS≥ed
>40) snesMenuOptions.cpuSpeed=0;

1883 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_CPUSPEED
);

1886 
SNES_MENU_FRAMESKIP
:

1887 i‡(
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||I≈.
ª≥©
[INP_BUTTON_RIGHT])

1889 
¢esMíuO±i⁄s
.
‰ameSkù
++;

1890 if(
¢esMíuO±i⁄s
.
‰ameSkù
>6) snesMenuOptions.frameSkip=0;

1894 
¢esMíuO±i⁄s
.
‰ameSkù
--;

1895 if(
¢esMíuO±i⁄s
.
‰ameSkù
>6) snesMenuOptions.frameSkip=6;

1897 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_FRAMESKIP
);

1899 
SNES_MENU_REGION
:

1900 i‡(
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||I≈.
ª≥©
[INP_BUTTON_RIGHT])

1902 
¢esMíuO±i⁄s
.
ªgi⁄
++;

1903 if(
¢esMíuO±i⁄s
.
ªgi⁄
>2) snesMenuOptions.region=0;

1907 
¢esMíuO±i⁄s
.
ªgi⁄
--;

1908 if(
¢esMíuO±i⁄s
.
ªgi⁄
>2) snesMenuOptions.region=2;

1910 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_REGION
);

1912 
SNES_MENU_FPS
:

1913 
¢esMíuO±i⁄s
.
showFps
^=1;

1914 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_FPS
);

1916 #i‡
	`deföed
(
__GP2X__
)

1917 
SNES_MENU_GAMMA
:

1918 i‡(
I≈
.
hñd
[
INP_BUTTON_RIGHT
]==1||I≈.
ª≥©
[INP_BUTTON_RIGHT])

1920 
¢esMíuO±i⁄s
.
gamma
++;

1921 if(
¢esMíuO±i⁄s
.
gamma
>100) snesMenuOptions.gamma=100;

1925 
¢esMíuO±i⁄s
.
gamma
--;

1926 if(
¢esMíuO±i⁄s
.
gamma
<-100) snesMenuOptions.gamma=-100;

1928 
	`£t_gamma
(
¢esMíuO±i⁄s
.
gamma
+100);

1929 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_GAMMA
);

1931 
SNES_MENU_ACTION_BUTTONS
:

1932 
¢esMíuO±i⁄s
.
a˘i⁄Buâ⁄s
^=1;

1933 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_ACTION_BUTTONS
);

1936 
SNES_MENU_TRANSPARENCY
:

1937 
¢esMíuO±i⁄s
.
å™•¨ícy
^=1;

1938 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_TRANSPARENCY
);

1940 #i‡
	`deföed
(
__GP2X__
)

1941 
SNES_MENU_RENDER_MODE
:

1942 
¢esMíuO±i⁄s
.
ªndîMode
^=1;

1943 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_RENDER_MODE
);

1946 
SNES_MENU_AUTO_SAVE_SRAM
:

1947 
¢esMíuO±i⁄s
.
autoSøm
^=1;

1948 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_AUTO_SAVE_SRAM
);

1950 #i‡
	`deföed
(
__GP2X__
)

1951 
SNES_MENU_RAM_SETTINGS
:

1952 
¢esMíuO±i⁄s
.
ømSëtögs
^=1;

1953 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_RAM_SETTINGS
);

1955 
SNES_MENU_MMU_HACK
:

1956 
¢esMíuO±i⁄s
.
mmuHack
^=1;

1957 
	`SNESO±i⁄sUpd©eText
(
SNES_MENU_MMU_HACK
);

1962 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)

1964 
míufocus
)

1966 
SNES_MENU_ADVANCED_HACKS
:

1967 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1968 
suba˘i⁄
 = 
	`SNESHacksMíu
();

1969 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

1970 
	`SNESO±i⁄sUpd©eText_AŒ
();

1972 
SNES_MENU_LOAD_GLOBAL
:

1973 
	`LﬂdMíuO±i⁄s
(
¢esO±i⁄sDú
, 
MENU_OPTIONS_FILENAME
, 
MENU_OPTIONS_EXT
, (*)&
¢esMíuO±i⁄s
, (snesMenuOptions),1);

1974 
	`SNESO±i⁄sUpd©eText_AŒ
();

1976 
SNES_MENU_SAVE_GLOBAL
:

1977 
	`SaveMíuO±i⁄s
(
¢esO±i⁄sDú
, 
MENU_OPTIONS_FILENAME
, 
MENU_OPTIONS_EXT
, (*)&
¢esMíuO±i⁄s
, (snesMenuOptions),1);

1979 
SNES_MENU_DELETE_GLOBAL
:

1980 
	`DñëeMíuO±i⁄s
(
¢esO±i⁄sDú
,
MENU_OPTIONS_FILENAME
,
MENU_OPTIONS_EXT
,1);

1982 
SNES_MENU_LOAD_CURRENT
:

1983 if(
cuºítRomFûíame
[0]!=0)

1985 
	`LﬂdMíuO±i⁄s
(
¢esO±i⁄sDú
, 
cuºítRomFûíame
, 
MENU_OPTIONS_EXT
, (*)&
¢esMíuO±i⁄s
, (snesMenuOptions),1);

1986 
	`SNESO±i⁄sUpd©eText_AŒ
();

1989 
SNES_MENU_SAVE_CURRENT
:

1990 if(
cuºítRomFûíame
[0]!=0)

1992 
	`SaveMíuO±i⁄s
(
¢esO±i⁄sDú
, 
cuºítRomFûíame
, 
MENU_OPTIONS_EXT
, (*)&
¢esMíuO±i⁄s
, (snesMenuOptions),1);

1995 
SNES_MENU_DELETE_CURRENT
:

1996 if(
cuºítRomFûíame
[0]!=0)

1998 
	`DñëeMíuO±i⁄s
(
¢esO±i⁄sDú
, 
cuºítRomFûíame
, 
MENU_OPTIONS_EXT
,1);

2001 
SNES_MENU_SET_ROMDIR
:

2002 
	`SaveMíuO±i⁄s
(
¢esO±i⁄sDú
, 
DEFAULT_ROM_DIR_FILENAME
, 
DEFAULT_ROM_DIR_EXT
, 
romDú
, 
	`°æí
(romDir),1);

2003 
	`°r˝y
(
¢esRomDú
,
romDú
);

2005 
SNES_MENU_CLEAR_ROMDIR
:

2006 
	`DñëeMíuO±i⁄s
(
¢esO±i⁄sDú
, 
DEFAULT_ROM_DIR_FILENAME
, 
DEFAULT_ROM_DIR_EXT
,1);

2007 
	`°r˝y
(
¢esRomDú
,
cuºítW‹kögDú
);

2009 
SNES_MENU_RETURN
:

2010 
míuExô
=1;

2015 
míuSmoŸh
=míuSmoŸh*7+(
míufocus
<<8); menuSmooth>>=3;

2016 
	`RídîMíu
("SNES O±i⁄s", 
míuCou¡
,
míuSmoŸh
,
míufocus
);

2017 
	`MíuFlù
();

2021  
a˘i⁄
;

2022 
	}
}

2025 
	$MaöMíuUpd©eText
()

2027 
	`•rötf
(
míuãxt
[
MAIN_MENU_ROM_SELECT
],"Select Rom");

2028 
	`•rötf
(
míuãxt
[
MAIN_MENU_MANAGE_SAVE_STATE
],"Manage Save States");

2029 
	`•rötf
(
míuãxt
[
MAIN_MENU_SAVE_SRAM
],"Save SRAM");

2030 
	`•rötf
(
míuãxt
[
MAIN_MENU_SNES_OPTIONS
],"SNES Options");

2031 
	`•rötf
(
míuãxt
[
MAIN_MENU_RESET_GAME
 ],"Reset Game");

2032 
	`•rötf
(
míuãxt
[
MAIN_MENU_EXIT_APP
],"Exit Application");

2033 
	`•rötf
(
míuãxt
[
MAIN_MENU_RETURN
],"Return To Game");

2034 
	}
}

2037 
	$MaöMíu
(
¥eva˘i⁄
)

2039 
míuExô
=0,
míuCou¡
=
MAIN_MENU_COUNT
,
míufocus
=0,
míuSmoŸh
=0;

2040 
a˘i⁄
=
¥eva˘i⁄
;

2041 
suba˘i⁄
=0;

2043 
	`gp_£tCpu•ìd
(
MENU_CPU_SPEED
);

2045 
	`gp_öôGøphics
(16,
cuºFB
,
¢esMíuO±i⁄s
.
mmuHack
);

2046 
	`gp_˛órFømebuf„r16
((*)
‰amebuf„r16
[
cuºFB
],0x0);

2047 
	`MíuFlù
();

2048 
	`gp2x_video_RGB_£tsˇlög
(320,240);

2050 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2051 
	`MaöMíuUpd©eText
();

2053 !
míuExô
)

2055 
	`I≈utUpd©e
(0);

2058 i‡(
I≈
.
ª≥©
[
INP_BUTTON_UP
]Ë
míufocus
--;

2059 i‡(
I≈
.
ª≥©
[
INP_BUTTON_DOWN
]Ë
míufocus
++;

2061 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_CANCEL
]==1 )

2063 if(
cuºítRomFûíame
[0]!=0)

2065 
míuExô
=1;

2069 i‡(
míufocus
>
míuCou¡
-1)

2071 
míufocus
=0;

2072 
míuSmoŸh
=(
míufocus
<<8)-1;

2074 i‡(
míufocus
<0)

2076 
míufocus
=
míuCou¡
-1;

2077 
míuSmoŸh
=(
míufocus
<<8)-1;

2080 i‡(
I≈
.
hñd
[
INP_BUTTON_MENU_SELECT
]==1)

2082 
míufocus
)

2084 
MAIN_MENU_ROM_SELECT
:

2085 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2086 
suba˘i⁄
=
	`LﬂdRomMíu
();

2087 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2088 if(
suba˘i⁄
)

2090 
a˘i⁄
=
suba˘i⁄
;

2091 
míuExô
=1;

2093 
	`MaöMíuUpd©eText
();

2096 
MAIN_MENU_MANAGE_SAVE_STATE
:

2097 if(
cuºítRomFûíame
[0]!=0)

2099 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2100 
suba˘i⁄
=
	`SaveSèãMíu
();

2101 i‡(
suba˘i⁄
==100)

2103 
míuExô
=1;

2105 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2107 
	`MaöMíuUpd©eText
();

2109 
MAIN_MENU_SAVE_SRAM
:

2110 if(
cuºítRomFûíame
[0]!=0)

2112 
	`S9xSaveSRAM
();

2115 
MAIN_MENU_SNES_OPTIONS
:

2117 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2118 
suba˘i⁄
=
	`SNESO±i⁄sMíu
();

2119 
	`mem£t
(&
hódîD⁄e
,0,(headerDone));

2120 
	`MaöMíuUpd©eText
();

2122 
MAIN_MENU_RESET_GAME
 :

2123 if(
cuºítRomFûíame
[0]!=0)

2125 
cuºítEmuMode
)

2127 
EMU_MODE_SNES
:

2128 
a˘i⁄
=
EVENT_RESET_SNES_ROM
;

2129 
míuExô
=1;

2134 
MAIN_MENU_RETURN
:

2135 if(
cuºítRomFûíame
[0]!=0)

2137 
míuExô
=1;

2140 
MAIN_MENU_EXIT_APP
:

2141 
a˘i⁄
=
EVENT_EXIT_APP
;

2142 
míuExô
=1;

2147 
míuSmoŸh
=míuSmoŸh*7+(
míufocus
<<8); menuSmooth>>=3;

2148 
	`RídîMíu
("Maö Míu", 
míuCou¡
,
míuSmoŸh
,
míufocus
);

2149 
	`MíuFlù
();

2153 
	`WaôF‹Buâ⁄sUp
();

2155  
a˘i⁄
;

2156 
	}
}

	@menu.h

1 #i‚de‡
_MENU_H_


2 
	#_MENU_H_


	)

4 #ifde‡
__˝lu•lus


10 #ifde‡
__GIZ__


11 
	#DIR_SEP
 "\\"

	)

12 
	#DIR_SEP_BAD
 "/"

	)

13 
	#SYSTEM_DIR
 "\\SD C¨d\\DrPockëS√s"

	)

16 #ifde‡
__GP2X__


17 
	~"gp2x_sdk.h
"

19 
	#DIR_SEP
 "/"

	)

20 
	#DIR_SEP_BAD
 "\\"

	)

21 
	#SYSTEM_DIR
 "/m¡/sd/DrPockëS√s"

	)

27 
	#SNES_OPTIONS_DIR
 "›ti⁄s"

	)

28 
	#SNES_SRAM_DIR
 "§am"

	)

29 
	#SNES_SAVESTATE_DIR
 "ßve°©e"

	)

31 
	#ROM_LIST_FILENAME
 "romli°.bö"

	)

32 
	#SRAM_FILE_EXT
 "§m"

	)

33 
	#SAVESTATE_EXT
 "sv"

	)

34 
	#MENU_OPTIONS_FILENAME
 "míu"

	)

35 
	#MENU_OPTIONS_EXT
 "›t"

	)

36 
	#DEFAULT_ROM_DIR_FILENAME
 "romdú"

	)

37 
	#DEFAULT_ROM_DIR_EXT
 "›t"

	)

41 
	#EMU_MODE_NONE
 0

	)

42 
	#EMU_MODE_SNES
 1

	)

44 
	#SAVESTATE_MODE_SAVE
 0

	)

45 
	#SAVESTATE_MODE_LOAD
 1

	)

46 
	#SAVESTATE_MODE_DELETE
 2

	)

48 
	#SNES_OPTIONS_VER
 1

	)

49 
	#DRSNES_VERSION
 "vîsi⁄ 6.4.4"

	)

51 
	#ROM_SIZE
 0x500000

52 
	#MENU_RGB
(
r
,
g
,
b
Ë(‘Ë<< 11 | (gË<< 6 | (bË<< 0 )

	)

53 
	#MAX_ROMS
 3000

	)

54 
	#MAX_CPU
 39

	)

55 #i‚de‡
MAX_PATH


56 
	#MAX_PATH
 255

	)

59 
	#MENU_CPU_SPEED
 100

	)

60 
	#MENU_FAST_CPU_SPEED
 200

	)

62 
	eFILE_TYPE_ENUM


64 
FILE_TYPE_FILE
 = 0,

65 
FILE_TYPE_DIRECTORY


68 
	eMAIN_MENU_ENUM


70 
MAIN_MENU_RETURN
 = 0,

71 
MAIN_MENU_ROM_SELECT
,

72 
MAIN_MENU_MANAGE_SAVE_STATE
,

73 
MAIN_MENU_SAVE_SRAM
,

74 
MAIN_MENU_SNES_OPTIONS
,

75 
MAIN_MENU_RESET_GAME
,

76 
MAIN_MENU_EXIT_APP
,

77 
MAIN_MENU_COUNT


80 
	eLOAD_ROM_ENUM


82 
LOAD_ROM_MENU_SNES
 = 0,

83 
LOAD_ROM_MENU_RETURN
,

84 
LOAD_ROM_MENU_COUNT


87 
	eSNES_MENU_ENUM


89 
SNES_MENU_SOUND
 = 0,

90 
SNES_MENU_SOUND_RATE
,

91 
SNES_MENU_SOUND_VOL
,

92 
SNES_MENU_FRAMESKIP
,

93 
SNES_MENU_REGION
,

94 
SNES_MENU_FPS
,

95 
SNES_MENU_TRANSPARENCY
,

96 #i‡
deföed
(
__GP2X__
)

97 
SNES_MENU_CPUSPEED
,

98 
SNES_MENU_RENDER_MODE
,

99 
SNES_MENU_GAMMA
,

100 
SNES_MENU_RAM_SETTINGS
,

101 
SNES_MENU_MMU_HACK
,

102 
SNES_MENU_ACTION_BUTTONS
,

104 
SNES_MENU_ADVANCED_HACKS
,

105 
SNES_MENU_AUTO_SAVE_SRAM
,

106 
SNES_MENU_LOAD_GLOBAL
,

107 
SNES_MENU_SAVE_GLOBAL
,

108 
SNES_MENU_DELETE_GLOBAL
,

109 
SNES_MENU_LOAD_CURRENT
,

110 
SNES_MENU_SAVE_CURRENT
,

111 
SNES_MENU_DELETE_CURRENT
,

112 
SNES_MENU_SET_ROMDIR
,

113 
SNES_MENU_CLEAR_ROMDIR
,

114 
SNES_MENU_RETURN
,

115 
SNES_MENU_COUNT


118 
	eSAVESTATE_MENU_ENUM


120 
SAVESTATE_MENU_LOAD
 = 0,

121 
SAVESTATE_MENU_SAVE
,

122 
SAVESTATE_MENU_DELETE
,

123 
SAVESTATE_MENU_RETURN
,

124 
SAVESTATE_MENU_COUNT


127 
	eHACKS_MENU_ENUM


129 
HACKS_MENU_AUDIO
 = 0,

130 
HACKS_MENU_PALETTE
,

131 
HACKS_MENU_FIXEDCOL
,

132 
HACKS_MENU_WINDOW
,

133 
HACKS_MENU_ADDSUB
,

134 
HACKS_MENU_OBJ
,

135 
HACKS_MENU_BG0
,

136 
HACKS_MENU_BG1
,

137 
HACKS_MENU_BG2
,

138 
HACKS_MENU_BG3
,

139 
HACKS_MENU_RETURN
,

140 
HACKS_MENU_COUNT


143 
	eSRAM_MENU_ENUM


145 
SRAM_MENU_LOAD
 = 0,

146 
SRAM_MENU_SAVE
,

147 
SRAM_MENU_DELETE
,

148 
SRAM_MENU_RETURN
,

149 
SRAM_MENU_COUNT
,

152 
	eEVENT_TYPES


154 
EVENT_NONE
 = 0,

155 
EVENT_EXIT_APP
,

156 
EVENT_LOAD_SNES_ROM
,

157 
EVENT_RUN_SNES_ROM
,

158 
EVENT_RESET_SNES_ROM


161 
	eRENDER_MODE_ENUM


163 
RENDER_MODE_UNSCALED
 = 0,

164 
RENDER_MODE_SCALED


167 
	#MENU_TILE_WIDTH
 64

	)

168 
	#MENU_TILE_HEIGHT
 64

	)

170 
	#GP32_GCC


	)

172 #ifde‡
__GIZ__


173 
	#INP_BUTTON_MENU_SELECT
 
INP_BUTTON_PLAY


	)

174 
	#INP_BUTTON_MENU_CANCEL
 
INP_BUTTON_STOP


	)

175 
	#INP_BUTTON_MENU_ENTER
 
INP_BUTTON_BRIGHT


	)

176 
	#INP_BUTTON_MENU_DELETE
 
INP_BUTTON_REWIND


	)

177 
	#INP_BUTTON_MENU_QUICKSAVE1
 
INP_BUTTON_R


	)

178 
	#INP_BUTTON_MENU_QUICKSAVE2
 
INP_BUTTON_BRIGHT


	)

179 
	#INP_BUTTON_MENU_QUICKLOAD1
 
INP_BUTTON_L


	)

180 
	#INP_BUTTON_MENU_QUICKLOAD2
 
INP_BUTTON_BRIGHT


	)

183 
	#MENU_TEXT_LOAD_SAVESTATE
 "Pªs†PœyÅÿlﬂd"

	)

184 
	#MENU_TEXT_OVERWRITE_SAVESTATE
 "Pªs†PœyÅÿovîwrôe"

	)

185 
	#MENU_TEXT_DELETE_SAVESTATE
 "Pªs†PœyÅÿdñëe"

	)

186 
	#MENU_TEXT_PREVIEW_SAVESTATE
 "Pªs†RÅÿ¥evõw"

	)

189 #ifde‡
__GP2X__


190 
	#INP_BUTTON_MENU_SELECT
 
INP_BUTTON_B


	)

191 
	#INP_BUTTON_MENU_CANCEL
 
INP_BUTTON_X


	)

192 
	#INP_BUTTON_MENU_ENTER
 
INP_BUTTON_SELECT


	)

193 
	#INP_BUTTON_MENU_DELETE
 
INP_BUTTON_SELECT


	)

194 
	#INP_BUTTON_MENU_QUICKSAVE1
 
INP_BUTTON_R


	)

195 
	#INP_BUTTON_MENU_QUICKSAVE2
 
INP_BUTTON_SELECT


	)

196 
	#INP_BUTTON_MENU_QUICKLOAD1
 
INP_BUTTON_L


	)

197 
	#INP_BUTTON_MENU_QUICKLOAD2
 
INP_BUTTON_SELECT


	)

201 
	#MENU_TEXT_LOAD_SAVESTATE
 "Pªs†BÅÿlﬂd"

	)

202 
	#MENU_TEXT_OVERWRITE_SAVESTATE
 "Pªs†BÅÿovîwrôe"

	)

203 
	#MENU_TEXT_DELETE_SAVESTATE
 "Pªs†BÅÿdñëe"

	)

204 
	#MENU_TEXT_PREVIEW_SAVESTATE
 "Pªs†YÅÿ¥evõw"

	)

208 
«me
[
MAX_ROMS
][
MAX_PATH
];

209 
size
[
MAX_ROMS
];

210 } 
	tDIRDATA
;

213 
míuHódî
[];

214 
míuHódîOrig
[];

215 
highLightB¨
[];

216 
highLightB¨Orig
[];

217 
míuTûe
[];

218 
míuTûeOrig
[];

220 
∑dC⁄fig
[];

221 
soundR©es
[];

222 
cuºítW‹kögDú
[];

223 
¢esO±i⁄sDú
[];

224 
¢esSømDú
[];

225 
¢esSaveSèãDú
[];

226 
gammaC⁄v
[];

227 
œ°SaveName
[];

228 *
soundBuf„r
;

229 *
RomD©a
;

230 
cuºítEmuMode
;

231 
œ°Sège
;

232 
cuºFB
;

233 
¥evFB
;

234 
ßveSèãSize
;

235 
romLﬂded
;

236 
‰ames
,
èkí
;

237 
showFps
;

238 
soundR©e
;

239 
soundOn
;

241 
Upd©eMíuGøphicsGamma
();

242 
RoundDoubÀ
(
vÆ
);

243 
CÀ¨S¸ìn
(*
buf„r
,
d©a
);

244 
LﬂdSøm
(*
∑th
,*
rom«me
,*
ext
,*
§ammem
);

245 
SaveSøm
(*
∑th
,*
rom«me
,*
ext
,*
§ammem
);

246 
DñëeSøm
(*
∑th
,*
rom«me
,*
ext
);

247 
SaveMíuO±i⁄s
(*
∑th
, *
fûíame
, *
ext
, *
›ti⁄smem
, 
maxsize
, 
showMesßge
);

248 
LﬂdMíuO±i⁄s
(*
∑th
, *
fûíame
, *
ext
, *
›ti⁄smem
, 
maxsize
, 
showMesßge
);

249 
DñëeMíuO±i⁄s
(*
∑th
, *
fûíame
, *
ext
, 
showMesßge
);

250 
S√sDeÁu…MíuO±i⁄s
();

251 #ifde‡
__GIZ__


252 
sync
();

255 
MíuPau£
();

256 
MíuFlù
();

257 
S∂ôFûíame
(*
whﬁeFûíame
, *
fûíame
, *
ext
);

258 
CheckDúSï
(*
∑th
);

259 
FûeSñe˘
(
mode
);

260 
MaöMíu
(
¥evA˘i⁄
);

261 
PrötTôÀ
(
Êù
);

262 
PrötTûe
(
Êù
);

263 
PrötB¨
(
Êù
, 
givíY
);

265 
FûeSˇn
();

266 
lﬂdSèãFûe
(*
fûíame
);

267 
quickSavePª£¡
;

268 
˝uS≥edLookup
[];

269 
gammaLookup
[];

271 
cuºítRomFûíame
[];

272 
romDú
[];

273 
¢esRomDú
[];

275 
	sSNES_MENU_OPTIONS


277 
	gmíuVî
;

278 
	g‰ameSkù
;

279 
	gsoundOn
;

280 
	g˝uS≥ed
;

281 
	g∑dC⁄fig
[32];

282 
	gåùÀBuf„r
;

283 
	gf‹˚Regi⁄
;

284 
	gshowFps
;

285 sig√d 
	ggamma
;

286 
	glcdvî
;

287 
	g°îeo
;

288 
	gsoundR©e
;

289 
	gautoSøm
;

290 
	gªndîMode
;

291 
	gvﬁume
;

292 
	ga˘i⁄Buâ⁄s
;

293 
	gå™•¨ícy
;

294 
	gømSëtögs
;

295 
	gmmuHack
;

296 
	gªgi⁄
;

297 
	gsoundHack
;

298 
	ggøphHacks
;

299 
	g•¨e16
;

300 
	g•¨e17
;

301 
	g•¨e18
;

302 
	g•¨e19
;

303 
	g•¨e1A
;

304 
	g•¨e1B
;

305 
	g•¨e1C
;

306 
	g•¨e1D
;

307 
	g•¨e1E
;

310 
SNES_MENU_OPTIONS
 
¢esMíuO±i⁄s
;

312 
	sSAVE_STATE


314 
	gfûíame
[
MAX_PATH
+1];

315 
	gfuŒFûíame
[
MAX_PATH
+1];

316 
	göU£
;

320 
SAVE_STATE
 
ßveSèã
[];

321 
ßveSèãName
[];

324 
	sINPUT


326 
	ghñd
[32];

327 
	gª≥©
[32];

329 
INPUT
 
I≈
;

331 
I≈utInô
();

332 
I≈utUpd©e
(
E«bÀDüg«ls
);

334 #ifde‡
__˝lu•lus


	@messages.h

41 #i‚de‡
_mesßges_h_


42 
	#_mesßges_h_


	)

46 
	mS9X_TRACE
,

47 
	mS9X_DEBUG
,

48 
	mS9X_WARNING
,

49 
	mS9X_INFO
,

50 
	mS9X_ERROR
,

51 
	mS9X_FATAL_ERROR


56 
	mS9X_ROM_INFO
,

57 
	mS9X_HEADERS_INFO
,

58 
	mS9X_ROM_CONFUSING_FORMAT_INFO
,

59 
	mS9X_ROM_INTERLEAVED_INFO
,

60 
	mS9X_SOUND_DEVICE_OPEN_FAILED
,

61 
	mS9X_APU_STOPPED
,

62 
	mS9X_USAGE
,

63 
	mS9X_GAME_GENIE_CODE_ERROR
,

64 
	mS9X_ACTION_REPLY_CODE_ERROR
,

65 
	mS9X_GOLD_FINGER_CODE_ERROR
,

66 
	mS9X_DEBUG_OUTPUT
,

67 
	mS9X_DMA_TRACE
,

68 
	mS9X_HDMA_TRACE
,

69 
	mS9X_WRONG_FORMAT
,

70 
	mS9X_WRONG_VERSION
,

71 
	mS9X_ROM_NOT_FOUND
,

72 
	mS9X_FREEZE_FILE_NOT_FOUND
,

73 
	mS9X_PPU_TRACE
,

74 
	mS9X_TRACE_DSP1
,

75 
	mS9X_FREEZE_ROM_NAME
,

76 
	mS9X_HEADER_WARNING
,

77 
	mS9X_NETPLAY_NOT_SERVER
,

78 
	mS9X_FREEZE_FILE_INFO
,

79 
	mS9X_TURBO_MODE


	@missing.h

41 #i‚de‡
_MISSING_H_


42 
	#_MISSING_H_


	)

44 
	sHDMA


46 
uöt8
 
	mu£d
;

47 
uöt8
 
	mbbus_addªss
;

48 
uöt8
 
	mabus_b™k
;

49 
uöt16
 
	mabus_addªss
;

50 
uöt8
 
	mödúe˘_addªss
;

51 
uöt8
 
	mf‹˚_èbÀ_addªss_wrôe
;

52 
uöt8
 
	mf‹˚_èbÀ_addªss_ªad
;

53 
uöt8
 
	mlöe_cou¡_wrôe
;

54 
uöt8
 
	mlöe_cou¡_ªad
;

57 
	sMissög


59 
uöt8
 
	memuœã6502
;

60 
uöt8
 
	mdecimÆ_mode
;

61 
uöt8
 
	mmv_8bô_ödex
;

62 
uöt8
 
	mmv_8bô_acc
;

63 
uöt8
 
	möãæa˚
;

64 
uöt8
 
	mlöes_239
;

65 
uöt8
 
	mp£udo_512
;

66 
HDMA
 
	mhdma
 [8];

67 
uöt8
 
	mmodes
 [8];

68 
uöt8
 
	mmode7_fx
;

69 
uöt8
 
	mmode7_Êù
;

70 
uöt8
 
	mmode7_bgmode
;

71 
uöt8
 
	mdúe˘
;

72 
uöt8
 
	mm©rix_mu…ùly
;

73 
uöt8
 
	mﬂm_ªad
;

74 
uöt8
 
	mvøm_ªad
;

75 
uöt8
 
	mcgøm_ªad
;

76 
uöt8
 
	mwøm_ªad
;

77 
uöt8
 
	mdma_ªad
;

78 
uöt8
 
	mvøm_öc
;

79 
uöt8
 
	mvøm_fuŒ_gøphic_öc
;

80 
uöt8
 
	mvúq
;

81 
uöt8
 
	mhúq
;

82 
uöt16
 
	mvúq_pos
;

83 
uöt16
 
	mhúq_pos
;

84 
uöt8
 
	mh_v_œtch
;

85 
uöt8
 
	mh_cou¡î_ªad
;

86 
uöt8
 
	mv_cou¡î_ªad
;

87 
uöt8
 
	mÁ°_rom
;

88 
uöt8
 
	mwödow1
 [6];

89 
uöt8
 
	mwödow2
 [6];

90 
uöt8
 
	m•rôe_¥i‹ôy_rŸ©i⁄
;

91 
uöt8
 
	msubs¸ìn
;

92 
uöt8
 
	msubs¸ìn_add
;

93 
uöt8
 
	msubs¸ìn_sub
;

94 
uöt8
 
	mfixed_cﬁour_add
;

95 
uöt8
 
	mfixed_cﬁour_sub
;

96 
uöt8
 
	mmoßic
;

97 
uöt8
 
	m•rôe_doubÀ_height
;

98 
uöt8
 
	mdma_ch™√ls
;

99 
uöt8
 
	mdma_this_‰ame
;

100 
uöt8
 
	mﬂm_addªss_ªad
;

101 
uöt8
 
	mbg_off£t_ªad
;

102 
uöt8
 
	mm©rix_ªad
;

103 
uöt8
 
	mhdma_ch™√ls
;

104 
uöt8
 
	mhdma_this_‰ame
;

105 
uöt16
 
	munknow≈pu_ªad
;

106 
uöt16
 
	munknow≈pu_wrôe
;

107 
uöt16
 
	munknown˝u_ªad
;

108 
uöt16
 
	munknown˝u_wrôe
;

109 
uöt16
 
	munknownd•_ªad
;

110 
uöt16
 
	munknownd•_wrôe
;

113 
EXTERN_C
 
Missög
 
	gmissög
;

	@mmuhack.c

1 
	~<°dio.h
>

2 
	~<sig«l.h
>

3 
	~<£tjmp.h
>

4 
	~<°dlib.h
>

5 
	~<f˙é.h
>

6 
	~<sys/mm™.h
>

7 
	~<löux/fb.h
>

8 
	~<uni°d.h
>

9 
	~<°r›ts.h
>

10 
	~<°rög.h
>

12 
î∫o
;

14 
	gmemfd
;

16 *
	$åymm≠
 (*
°¨t
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

18 *
p
;

19 
Ø
;

22 
p
 = 
	`mm≠
 (
°¨t
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
);

23 i‡(
p
 == (*)0xFFFFFFFF)

25 
Ø
 = 
î∫o
;

26 
	`¥ötf
 ("Áûed mm≠(%X, %X, %X, %X, %X, %XËî∫ÿ%d\n", ()
°¨t
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, ()
off£t
, 
Ø
);

33  
p
;

34 
	}
}

36 
	$öôphys
 ()

38 
memfd
 = 
	`›í
("/dev/mem", 
O_RDWR
);

39 i‡(
memfd
 == -1)

41 
	`¥ötf
 ("Open failed\n");

45 
	`¥ötf
 ("/dev/mem o≥√d suc˚ssfuŒy - fd = %d\n", 
memfd
);

48 
	}
}

50 
	$˛o£phys
 ()

52 
	`˛o£
 (
memfd
);

53 
	}
}

55 
	$myu«me
(*
buf„r
)

57 
asm
 volatile ("swi #0x90007a");

58 
	}
}

60 
	$DecodeCﬂr£
 (
ödx
, 
ß
)

62 
˝t
[256];

63 
dom
 = (
ß
 >> 5) & 15;

64 
ãmp
;

65 
i
 = 0;

66 
wb
 = 0;

68 
ß
 &= 0xfffffc00;

69 
ödx
 *= 1048576;

73 
	`l£ek
 (
memfd
, 
ß
, 
SEEK_SET
);

74 
	`mem£t
 (
˝t
, 0, 256*4);

75 
ãmp
 = 
	`ªad
 (
memfd
, 
˝t
, 256*4);

77 i‡(
ãmp
 != 256*4)

79 
	`¥ötf
 (" # BadÑead\n");

85 
i
 = 0; i < 256; i ++)

87 i‡(
˝t
[
i
])

89 
˝t
[
i
] & 3)

95 
	`¥ötf
 (" VA: %08X PA: %08X - %08X A: %d %d %d %d D: %d C: %d B: %d\n", 
ödx
,

96 
˝t
[
i
] & 0xFFFF0000, (cpt[i] & 0xFFFF0000) | 0xFFFF,

97 (
˝t
[
i
] >> 10) & 3, (cpt[i] >> 8) & 3, (cpt[i] >> 6) & 3,

98 (
˝t
[
i
] >> 4Ë& 3, 
dom
, (cpt[i] >> 3) & 1, (cpt[i] >> 2) & 1);

101 
	`¥ötf
 (" VA: %08X PA: %08X - %08X A: %d %d %d %d D: %d C: %d B: %d\n", 
ödx
,

102 
˝t
[
i
] & 0xfffff000, (cpt[i] & 0xfffff000) | 0xFFF,

103 (
˝t
[
i
] >> 10) & 3, (cpt[i] >> 8) & 3, (cpt[i] >> 6) & 3,

104 (
˝t
[
i
] >> 4Ë& 3, 
dom
, (cpt[i] >> 3) & 1, (cpt[i] >> 2) & 1);

113 i‡(((
˝t
[
i
] & 0xff000000) == 0x02000000) )

116 if((
˝t
[
i
] & 12)==0) {

117 
˝t
[
i
] |= 0xFFC;

118 
wb
++;

122 i‡(((
˝t
[
i
] & 0xff000000) == 0x03000000) )

125 if((
˝t
[
i
] & 12)==0) {

126 
˝t
[
i
] |= 0xFFC;

127 
wb
++;

139 
ödx
 += 4096;

142 i‡(
wb
)

145 
	`l£ek
 (
memfd
, 
ß
, 
SEEK_SET
);

146 
ãmp
 = 
	`wrôe
 (
memfd
, 
˝t
, 256*4);

147 
	`¥ötf
("%d byã†wrôãn, %s\n", 
ãmp
,Åemp == 1024 ? "yay!" : "oh fooble :(!");

149 
	}
}

151 
	$dumµgèbÀ
 (
âb
)

153 
pgèbÀ
[4096];

154 *
des˘y≥s
[] = {"Invalid", "Coarse", "Section", "Fine"};

156 
	`mem£t
 (
pgèbÀ
, 0, 4096*4);

157 
	`l£ek
 (
memfd
, 
âb
, 
SEEK_SET
);

158 
	`ªad
 (
memfd
, 
pgèbÀ
, 4096*4);

160 
i
;

161 
i
 = 0; i < 4096; i ++)

163 
ãmp
;

165 i‡(
pgèbÀ
[
i
])

167 
	`¥ötf
 ("Indx: %d VA: %08X Ty≥: %d [%s] \n", 
i
, i * 1048576, 
pgèbÀ
[i] & 3, 
des˘y≥s
[pgtable[i]&3]);

168 
pgèbÀ
[
i
]&3)

174 
	`DecodeCﬂr£
(
i
, 
pgèbÀ
[i]);

177 
ãmp
 = 
pgèbÀ
[
i
] & 0xFFF00000;

184 
	`¥ötf
 (" -- Unsupported! --\n");

189 
	}
}

191 
	$bíchm¨k
 (*
mem±r
)

193 
°¨âime
 = 
	`time
 (
NULL
);

194 
a
,
b
,
c
,
d
;

195 vﬁ©ûê*
µ
 = (*Ë
mem±r
;

197 
°¨âime
 =
	`time
 (
NULL
));

199 
	`¥ötf
 ("\n\nmem‹y bíchm¨k o‡vﬁ©ûêVA: %08X\n\ƒódÅe°\n", 
mem±r
);

200 
d
 = 0; d < 3; d ++)

202 
°¨âime
 = 
	`time
 (
NULL
);

203 
b
 = 0;

204 
c
 = 0;

205 
°¨âime
 =
	`time
 (
NULL
))

207 
a
 = 0;á < 20000;á ++)

209 
b
 +
µ
[
a
];

211 
c
 ++;

213 
	`¥ötf
 ("Cou¡ i†%d. %dMB/£c\n", 
c
, (c * 20000)/1024/1024);

216 
	`¥ötf
 ("writeÅest\n");

217 
d
 = 0; d < 3; d ++)

219 
°¨âime
 = 
	`time
 (
NULL
);

220 
b
 = 0;

221 
c
 = 0;

222 
°¨âime
 =
	`time
 (
NULL
))

224 
a
 = 0;á < 20000;á ++)

226 
µ
[
a
] = 0x37014206;

228 
c
 ++;

230 
	`¥ötf
 ("Cou¡ i†%d. %dMB/£c\n", 
c
, (c * 20000)/1024/1024);

233 
	`¥ötf
 ("combinedÅest (read, write back)\n");

234 
d
 = 0; d < 3; d ++)

236 
°¨âime
 = 
	`time
 (
NULL
);

237 
b
 = 0;

238 
c
 = 0;

239 
°¨âime
 =
	`time
 (
NULL
))

241 
a
 = 0;á < 20000;á ++)

243 
µ
[
a
] += 0x55017601;

245 
c
 ++;

247 
	`¥ötf
 ("Cou¡ i†%d. %dMB/£c\n", 
c
, (c * 20000)/1024/1024);

250 
	`¥ötf
 ("test complete\n");

251 
	}
}

253 
	$hackpgèbÀ
 ()

255 
ﬁdc1
, 
ﬁdc2
, 
ﬁdc3
, 
ﬁdc4
;

256 
√wc1
 = 0xì120f10, 
√wc2
 = 0xe12fff1e;

257 
âb
, 
âx
;

258 
«me
[256];

264 
	`l£ek
 (
memfd
, 0x6ec00, 
SEEK_SET
);

265 
	`ªad
 (
memfd
, &
ﬁdc1
, 4);

266 
	`ªad
 (
memfd
, &
ﬁdc2
, 4);

267 
	`ªad
 (
memfd
, &
ﬁdc3
, 4);

268 
	`ªad
 (
memfd
, &
ﬁdc4
, 4);

270 
	`¥ötf
 ("0:%08X %08X\n", 
ﬁdc1
, 
ﬁdc2
);

272 
	`l£ek
 (
memfd
, 0x6ec00, 
SEEK_SET
);

273 
	`wrôe
 (
memfd
, &
√wc1
, 4);

274 
	`wrôe
 (
memfd
, &
√wc2
, 4);

276 
âb
 = 
	`myu«me
(
«me
);

278 
	`l£ek
 (
memfd
, 0x6ec00, 
SEEK_SET
);

279 
	`wrôe
 (
memfd
, &
ﬁdc1
, 4);

280 
	`wrôe
 (
memfd
, &
ﬁdc2
, 4);

282 
	`¥ötf
 ("1:%08X\n", 
âb
);

287 
	`dumµgèbÀ
(
âb
);

290 
ébc1
 = 0xe3a00000;

291 
ébc2
 = 0xee070f9a;

292 
ébc3
 = 0xee080f17;

293 
ébc4
 = 0xe1a0f00e;

295 
	`l£ek
 (
memfd
, 0x6ec00, 
SEEK_SET
);

296 
	`wrôe
 (
memfd
, &
ébc1
, 4);

297 
	`wrôe
 (
memfd
, &
ébc2
, 4);

298 
	`wrôe
 (
memfd
, &
ébc3
, 4);

299 
	`wrôe
 (
memfd
, &
ébc4
, 4);

301 
âx
 = 
	`myu«me
(
«me
);

305 
	`l£ek
 (
memfd
, 0x6ec00, 
SEEK_SET
);

306 
	`wrôe
 (
memfd
, &
ﬁdc1
, 4);

307 
	`wrôe
 (
memfd
, &
ﬁdc2
, 4);

308 
	`wrôe
 (
memfd
, &
ﬁdc3
, 4);

309 
	`wrôe
 (
memfd
, &
ﬁdc4
, 4);

316 
	}
}

	@movie.cpp

91 
	~"p‹t.h
"

92 
	~<°rög.h
>

93 #ifde‡
HAVE_STRINGS_H


94 
	~<°rögs.h
>

96 
	~<˘y≥.h
>

97 
	~<°dlib.h
>

99 #i‡
deföed
(
__unix
Ë|| deföed(
__löux
Ë|| deföed(
__sun
Ë|| deföed(
__DJGPP
)

100 
	~<uni°d.h
>

101 
	~<sys/ty≥s.h
>

102 
	~<sys/°©.h
>

104 
	~<time.h
>

106 #ifde‡
WIN32


107 
	~<io.h
>

108 #i‚de‡
W_OK


109 
	#W_OK
 2

	)

113 
	~"movõ.h
"

114 
	~"¢es9x.h
"

115 
	~"˝uexec.h
"

116 
	~"¢≠shŸ.h
"

118 
	#SMV_MAGIC
 0x1a564d53

119 
	#SMV_VERSION
 1

	)

120 
	#SMV_HEADER_SIZE
 32

	)

121 
	#CONTROLLER_DATA_SIZE
 2

	)

122 
	#BUFFER_GROWTH_SIZE
 4096

	)

124 
	eMovõSèã


126 
	mMOVIE_STATE_NONE
=0,

127 
	mMOVIE_STATE_PLAY
,

128 
	mMOVIE_STATE_RECORD


131 
	sSMovõ


133 
MovõSèã
 
	mSèã
;

134 
	mFûíame
 [
_MAX_PATH
];

135 
FILE
* 
	mFûe
;

136 
uöt32
 
	mSaveSèãOff£t
;

137 
uöt32
 
	mC⁄åﬁÀrD©aOff£t
;

138 
uöt32
 
	mMovõId
;

139 
uöt32
 
	mCuºítFøme
;

140 
uöt32
 
	mMaxFøme
;

141 
uöt32
 
	mRîec‹dCou¡
;

142 
uöt8
 
	mC⁄åﬁÀrsMask
;

143 
uöt8
 
	mO±s
;

144 
boﬁ8
 
	mRódO∆y
;

145 
uöt32
 
	mByãsPîFøme
;

146 
uöt8
* 
	mI≈utBuf„r
;

147 
uöt32
 
	mI≈utBuf„rSize
;

148 
uöt8
* 
	mI≈utBuf„rPå
;

149 
boﬁ8
 
	mFømeDi•œy
;

150 
	mFømeDi•œySåög
[256];

151 } 
	gMovõ
;

170 
	$byãs_≥r_‰ame
()

172 
i
;

173 
num_c⁄åﬁÀrs
;

175 
num_c⁄åﬁÀrs
=0;

176 
i
=0; i<5; ++i)

178 if(
Movõ
.
C⁄åﬁÀrsMask
 & (1<<
i
))

180 ++
num_c⁄åﬁÀrs
;

184  
CONTROLLER_DATA_SIZE
*
num_c⁄åﬁÀrs
;

185 
	}
}

187 
ölöe
 
uöt32
 
	$Ród32
(c⁄° 
uöt8
*& 
±r
)

189 
uöt32
 
v
=(
±r
[0] | (ptr[1]<<8) | (ptr[2]<<16) | (ptr[3]<<24));

190 
±r
 += 4;

191  
v
;

192 
	}
}

194 
ölöe
 
uöt16
 
	$Ród16
(c⁄° 
uöt8
*& 
±r
)

196 
uöt16
 
v
=(
±r
[0] | (ptr[1]<<8));

197 
±r
 += 2;

198  
v
;

199 
	}
}

201 
ölöe
 
uöt16
 
	$Ród16
(
uöt8
*& 
±r
)

203 
uöt16
 
v
=(
±r
[0] | (ptr[1]<<8));

204 
±r
 += 2;

205  
v
;

206 
	}
}

208 
	$Wrôe32
(
uöt32
 
v
, 
uöt8
*& 
±r
)

210 
±r
[0]=(
uöt8
)(
v
&0xff);

211 
±r
[1]=(
uöt8
)((
v
>>8)&0xff);

212 
±r
[2]=(
uöt8
)((
v
>>16)&0xff);

213 
±r
[3]=(
uöt8
)((
v
>>24)&0xff);

214 
±r
 += 4;

215 
	}
}

217 
	$Wrôe16
(
uöt16
 
v
, 
uöt8
*& 
±r
)

219 
±r
[0]=(
uöt8
)(
v
&0xff);

220 
±r
[1]=(
uöt8
)((
v
>>8)&0xff);

221 
±r
 += 2;

222 
	}
}

224 
	$ªad_movõ_hódî
(
FILE
* 
fd
, 
SMovõ
* 
movõ
)

226 
uöt8
 
hódî
[
SMV_HEADER_SIZE
];

227 if(
	`‰ód
(
hódî
, 1, 
SMV_HEADER_SIZE
, 
fd
) != SMV_HEADER_SIZE)

228  
WRONG_FORMAT
;

230 c⁄° 
uöt8
* 
±r
=
hódî
;

231 
uöt32
 
magic
=
	`Ród32
(
±r
);

232 if(
magic
!=
SMV_MAGIC
)

233  
WRONG_FORMAT
;

235 
uöt32
 
vîsi⁄
=
	`Ród32
(
±r
);

236 if(
vîsi⁄
!=
SMV_VERSION
)

237  
WRONG_VERSION
;

239 
movõ
->
MovõId
=
	`Ród32
(
±r
);

240 
movõ
->
Rîec‹dCou¡
=
	`Ród32
(
±r
);

241 
movõ
->
MaxFøme
=
	`Ród32
(
±r
);

243 
movõ
->
C⁄åﬁÀrsMask
=*
±r
++;

244 
movõ
->
O±s
=*
±r
++;

245 
±r
 += 2;

247 
movõ
->
SaveSèãOff£t
=
	`Ród32
(
±r
);

248 
movõ
->
C⁄åﬁÀrD©aOff£t
=
	`Ród32
(
±r
);

250  
SUCCESS
;

251 
	}
}

253 
	$wrôe_movõ_hódî
(
FILE
* 
fd
, c⁄° 
SMovõ
* 
movõ
)

255 
uöt8
 
hódî
[
SMV_HEADER_SIZE
];

256 
uöt8
* 
±r
=
hódî
;

258 
	`Wrôe32
(
SMV_MAGIC
, 
±r
);

259 
	`Wrôe32
(
SMV_VERSION
, 
±r
);

260 
	`Wrôe32
(
movõ
->
MovõId
, 
±r
);

261 
	`Wrôe32
(
movõ
->
Rîec‹dCou¡
, 
±r
);

262 
	`Wrôe32
(
movõ
->
MaxFøme
, 
±r
);

264 *
±r
++=
movõ
->
C⁄åﬁÀrsMask
;

265 *
±r
++=
movõ
->
O±s
;

266 *
±r
++=0;

267 *
±r
++=0;

269 
	`Wrôe32
(
movõ
->
SaveSèãOff£t
, 
±r
);

270 
	`Wrôe32
(
movõ
->
C⁄åﬁÀrD©aOff£t
, 
±r
);

272 
	`fwrôe
(
hódî
, 1, 
SMV_HEADER_SIZE
, 
fd
);

273 
	}
}

275 
	$Êush_movõ
()

277 
	`f£ek
(
Movõ
.
Fûe
, 0, 
SEEK_SET
);

278 
	`wrôe_movõ_hódî
(
Movõ
.
Fûe
, &Movie);

279 
	`f£ek
(
Movõ
.
Fûe
, Movõ.
C⁄åﬁÀrD©aOff£t
, 
SEEK_SET
);

280 
	`fwrôe
(
Movõ
.
I≈utBuf„r
, 1, Movõ.
ByãsPîFøme
*(Movõ.
MaxFøme
+1), Movõ.
Fûe
);

281 
	}
}

283 
	$ch™ge_°©e
(
MovõSèã
 
√w_°©e
)

285 if(
√w_°©e
==
Movõ
.
Sèã
)

288 if(
Movõ
.
Sèã
==
MOVIE_STATE_RECORD
)

290 
	`Êush_movõ
();

293 
Movõ
.
Sèã
=
√w_°©e
;

295 if(
√w_°©e
==
MOVIE_STATE_NONE
)

297 
	`f˛o£
(
Movõ
.
Fûe
);

298 
Movõ
.
Fûe
=
NULL
;

306 
	}
}

308 
	$ª£rve_buf„r_•a˚
(
uöt32
 
•a˚_√eded
)

310 if(
•a˚_√eded
 > 
Movõ
.
I≈utBuf„rSize
)

312 
uöt32
 
±r_off£t
 = 
Movõ
.
I≈utBuf„rPå
 - Movõ.
I≈utBuf„r
;

313 
uöt32
 
Æloc_chunks
 = 
•a˚_√eded
 / 
BUFFER_GROWTH_SIZE
;

314 
Movõ
.
I≈utBuf„rSize
 = 
BUFFER_GROWTH_SIZE
 * (
Æloc_chunks
+1);

315 
Movõ
.
I≈utBuf„r
 = (
uöt8
*)
	`ªÆloc
(Movõ.I≈utBuf„r, Movõ.
I≈utBuf„rSize
);

316 
Movõ
.
I≈utBuf„rPå
 = Movõ.
I≈utBuf„r
 + 
±r_off£t
;

318 
	}
}

320 
	$ªad_‰ame_c⁄åﬁÀr_d©a
()

322 
i
;

323 
i
=0; i<5; ++i)

325 if(
Movõ
.
C⁄åﬁÀrsMask
 & (1<<
i
))

327 
IPPU
.
Joy∑ds
[
i
]=(
uöt32
)(
	`Ród16
(
Movõ
.
I≈utBuf„rPå
)) | 0x80000000L;

331 
IPPU
.
Joy∑ds
[
i
]=0;

334 
	}
}

336 
	$wrôe_‰ame_c⁄åﬁÀr_d©a
()

338 
	`ª£rve_buf„r_•a˚
((
uöt32
)((
Movõ
.
I≈utBuf„rPå
+Movõ.
ByãsPîFøme
)-Movõ.
I≈utBuf„r
));

340 
i
;

341 
i
=0; i<5; ++i)

343 if(
Movõ
.
C⁄åﬁÀrsMask
 & (1<<
i
))

345 
	`Wrôe16
((
uöt16
)(
IPPU
.
Joy∑ds
[
i
] & 0xffff), 
Movõ
.
I≈utBuf„rPå
);

349 
IPPU
.
Joy∑ds
[
i
]=0;

352 
	}
}

354 
	$S9xMovõInô
 ()

356 
	`mem£t
(&
Movõ
, 0, (Movie));

357 
Movõ
.
Sèã
 = 
MOVIE_STATE_NONE
;

358 
	}
}

360 
	$S9xMovõO≥n
 (c⁄° * 
fûíame
, 
boﬁ8
 
ªad_⁄ly
)

362 
FILE
* 
fd
;

363 
STREAM
 
°ªam
;

364 
ªsu…
;

365 
‚
;

367  
FILE_NOT_FOUND
;

370 if(!(
fd
=
	`f›í
(
fûíame
, 
ªad_⁄ly
 ? "rb" : "rb+")))

371  
FILE_NOT_FOUND
;

374 
	`ch™ge_°©e
(
MOVIE_STATE_NONE
);

377 if((
ªsu…
=
	`ªad_movõ_hódî
(
fd
, &
Movõ
))!=
SUCCESS
)

379 
	`f˛o£
(
fd
);

380  
ªsu…
;

383 
‚
=
	`dup
(
	`fûío
(
fd
));

384 
	`f˛o£
(
fd
);

387 
	`l£ek
(
‚
, 
Movõ
.
SaveSèãOff£t
, 
SEEK_SET
);

388 if(!(
°ªam
=
	`REOPEN_STREAM
(
‚
, "rb")))

389  
FILE_NOT_FOUND
;

391 if(
Movõ
.
O±s
 & 
MOVIE_OPT_FROM_RESET
)

393 
	`S9xRe£t
();

395 
ªsu…
=(
	`READ_STREAM
(
SRAM
, 0x20000, 
°ªam
Ë=0x20000Ë? 
SUCCESS
 : 
WRONG_FORMAT
;

399 
ªsu…
=
	`S9xUn‰ìzeFromSåóm
(
°ªam
);

401 
	`CLOSE_STREAM
(
°ªam
);

403 if(
ªsu…
!=
SUCCESS
)

405  
ªsu…
;

408 if(!(
fd
=
	`f›í
(
fûíame
, 
ªad_⁄ly
 ? "rb" : "rb+")))

409  
FILE_NOT_FOUND
;

411 if(
	`f£ek
(
fd
, 
Movõ
.
C⁄åﬁÀrD©aOff£t
, 
SEEK_SET
))

412  
WRONG_FORMAT
;

415 
Movõ
.
Fûe
=
fd
;

416 
Movõ
.
ByãsPîFøme
=
	`byãs_≥r_‰ame
();

417 
Movõ
.
I≈utBuf„rPå
=Movõ.
I≈utBuf„r
;

418 
uöt32
 
to_ªad
=
Movõ
.
ByãsPîFøme
 * (Movõ.
MaxFøme
+1);

419 
	`ª£rve_buf„r_•a˚
(
to_ªad
);

420 
	`‰ód
(
Movõ
.
I≈utBuf„rPå
, 1, 
to_ªad
, 
fd
);

423 
	`ªad_‰ame_c⁄åﬁÀr_d©a
();

425 
	`°∫˝y
(
Movõ
.
Fûíame
, 
fûíame
, 
_MAX_PATH
);

426 
Movõ
.
Fûíame
[
_MAX_PATH
-1]='\0';

427 
Movõ
.
CuºítFøme
=0;

428 
Movõ
.
RódO∆y
=
ªad_⁄ly
;

429 
	`ch™ge_°©e
(
MOVIE_STATE_PLAY
);

431 
	`S9xMesßge
(
S9X_INFO
, 
S9X_MOVIE_INFO
, 
MOVIE_INFO_REPLAY
);

432  
SUCCESS
;

434 
	}
}

436 
	$S9xMovõCª©e
 (c⁄° * 
fûíame
, 
uöt8
 
c⁄åﬁÀrs_mask
, uöt8 
›ts
, c⁄° 
wch¨_t
* 
mëad©a
, 
mëad©a_Àngth
)

438 
FILE
* 
fd
;

439 
STREAM
 
°ªam
;

440 
‚
;

442  
FILE_NOT_FOUND
;

445 if(
c⁄åﬁÀrs_mask
==0)

446  
WRONG_FORMAT
;

448 if(!(
fd
=
	`f›í
(
fûíame
, "wb")))

449  
FILE_NOT_FOUND
;

452 
	`ch™ge_°©e
(
MOVIE_STATE_NONE
);

454 if(
mëad©a_Àngth
>
MOVIE_MAX_METADATA
)

456 
mëad©a_Àngth
=
MOVIE_MAX_METADATA
;

459 
Movõ
.
MovõId
=(
uöt32
)
	`time
(
NULL
);

460 
Movõ
.
Rîec‹dCou¡
=0;

461 
Movõ
.
MaxFøme
=0;

462 
Movõ
.
SaveSèãOff£t
=
SMV_HEADER_SIZE
+((
uöt16
)*
mëad©a_Àngth
);

463 
Movõ
.
C⁄åﬁÀrD©aOff£t
=0;

464 
Movõ
.
C⁄åﬁÀrsMask
=
c⁄åﬁÀrs_mask
;

465 
Movõ
.
O±s
=
›ts
;

466 if(
Sëtögs
.
PAL
)

468 
Movõ
.
O±s
 |
MOVIE_OPT_PAL
;

472 
Movõ
.
O±s
 &~
MOVIE_OPT_PAL
;

475 
	`wrôe_movõ_hódî
(
fd
, &
Movõ
);

478 if(
mëad©a_Àngth
>0)

480 
uöt8
 
mëa_buf
[
MOVIE_MAX_METADATA
 * (
uöt16
)];

481 
i
;

483 
i
=0; i<
mëad©a_Àngth
; ++i)

485 
uöt16
 
c
=(uöt16)
mëad©a
[
i
];

486 
mëa_buf
[
i
+i] =(
uöt8
)(
c
&0xff);

487 
mëa_buf
[
i
+i+1]=(
uöt8
)((
c
>>8)&0xff);

490 
	`fwrôe
(
mëa_buf
, (
uöt16
), 
mëad©a_Àngth
, 
fd
);

494 
‚
=
	`dup
(
	`fûío
(
fd
));

495 
	`f˛o£
(
fd
);

498 if(!(
°ªam
=
	`REOPEN_STREAM
(
‚
, "ab")))

499  
FILE_NOT_FOUND
;

501 if(
›ts
 & 
MOVIE_OPT_FROM_RESET
)

503 
	`S9xRe£t
();

505 
	`WRITE_STREAM
(
SRAM
, 0x20000, 
°ªam
);

509 
	`S9xFªezeToSåóm
(
°ªam
);

511 
	`CLOSE_STREAM
(
°ªam
);

513 if(!(
fd
=
	`f›í
(
fûíame
, "rb+")))

514  
FILE_NOT_FOUND
;

516 
	`f£ek
(
fd
, 0, 
SEEK_END
);

517 
Movõ
.
C⁄åﬁÀrD©aOff£t
=(
uöt32
)
	`·ñl
(
fd
);

520 
Movõ
.
Fûe
=
fd
;

521 
Movõ
.
ByãsPîFøme
=
	`byãs_≥r_‰ame
();

522 
Movõ
.
I≈utBuf„rPå
=Movõ.
I≈utBuf„r
;

523 
	`wrôe_‰ame_c⁄åﬁÀr_d©a
();

525 
	`°∫˝y
(
Movõ
.
Fûíame
, 
fûíame
, 
_MAX_PATH
);

526 
Movõ
.
Fûíame
[
_MAX_PATH
-1]='\0';

527 
Movõ
.
CuºítFøme
=0;

528 
Movõ
.
RódO∆y
=
Ál£
;

529 
	`ch™ge_°©e
(
MOVIE_STATE_RECORD
);

531 
	`S9xMesßge
(
S9X_INFO
, 
S9X_MOVIE_INFO
, 
MOVIE_INFO_RECORD
);

532  
SUCCESS
;

534 
	}
}

536 
	$S9xMovõUpd©e
 ()

538 
Movõ
.
Sèã
)

540 
MOVIE_STATE_PLAY
:

541 if(
Movõ
.
CuºítFøme
>=Movõ.
MaxFøme
)

543 
	`ch™ge_°©e
(
MOVIE_STATE_NONE
);

544 
	`S9xMesßge
(
S9X_INFO
, 
S9X_MOVIE_INFO
, 
MOVIE_INFO_END
);

549 if(
Movõ
.
FømeDi•œy
)

551 
	`•rötf
(
Movõ
.
FømeDi•œySåög
, "Pœyög føme: %d", Movõ.
CuºítFøme
);

552 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_MOVIE_INFO
, 
Movõ
.
FømeDi•œySåög
);

554 
	`ªad_‰ame_c⁄åﬁÀr_d©a
();

555 ++
Movõ
.
CuºítFøme
;

559 
MOVIE_STATE_RECORD
:

561 if(
Movõ
.
FømeDi•œy
)

563 
	`•rötf
(
Movõ
.
FømeDi•œySåög
, "Rec‹dög føme: %d", Movõ.
CuºítFøme
);

564 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_MOVIE_INFO
, 
Movõ
.
FømeDi•œySåög
);

566 
	`wrôe_‰ame_c⁄åﬁÀr_d©a
();

567 ++
Movõ
.
CuºítFøme
;

568 
Movõ
.
MaxFøme
=Movõ.
CuºítFøme
;

569 
	`fwrôe
((
Movõ
.
I≈utBuf„rPå
 - Movõ.
ByãsPîFøme
), 1, Movõ.ByãsPîFøme, Movõ.
Fûe
);

576 
	}
}

578 
	$S9xMovõSt›
 (
boﬁ8
 
suµªss_mesßge
)

580 if(
Movõ
.
Sèã
!=
MOVIE_STATE_NONE
)

582 
	`ch™ge_°©e
(
MOVIE_STATE_NONE
);

584 if(!
suµªss_mesßge
)

585 
	`S9xMesßge
(
S9X_INFO
, 
S9X_MOVIE_INFO
, 
MOVIE_INFO_STOP
);

587 
	}
}

589 
	$S9xMovõGëInfo
 (c⁄° * 
fûíame
, 
MovõInfo
* 
öfo
)

591 
FILE
* 
fd
;

592 
ªsu…
;

593 
SMovõ
 
loˇl_movõ
;

594 
mëad©a_Àngth
;

596  
FILE_NOT_FOUND
;

599 
	`mem£t
(
öfo
, 0, (*info));

600 if(!(
fd
=
	`f›í
(
fûíame
, "rb")))

601  
FILE_NOT_FOUND
;

603 if((
ªsu…
=(
	`ªad_movõ_hódî
(
fd
, &
loˇl_movõ
)))!=
SUCCESS
)

604  
ªsu…
;

606 
öfo
->
TimeCª©ed
=(
time_t
)
loˇl_movõ
.
MovõId
;

607 
öfo
->
LígthFømes
=
loˇl_movõ
.
MaxFøme
;

608 
öfo
->
Rîec‹dCou¡
=
loˇl_movõ
.RerecordCount;

609 
öfo
->
O±s
=
loˇl_movõ
.Opts;

610 
öfo
->
C⁄åﬁÀrsMask
=
loˇl_movõ
.ControllersMask;

612 if(
loˇl_movõ
.
SaveSèãOff£t
 > 
SMV_HEADER_SIZE
)

614 
uöt8
 
mëa_buf
[
MOVIE_MAX_METADATA
 * (
uöt16
)];

615 
i
;

617 
mëad©a_Àngth
=(()
loˇl_movõ
.
SaveSèãOff£t
-
SMV_HEADER_SIZE
)/(
uöt16
);

618 
mëad©a_Àngth
=(mëad©a_Àngth>=
MOVIE_MAX_METADATA
) ? MOVIE_MAX_METADATA-1 : metadata_length;

619 
mëad©a_Àngth
=()
	`‰ód
(
mëa_buf
, (
uöt16
), mëad©a_Àngth, 
fd
);

621 
i
=0; i<
mëad©a_Àngth
; ++i)

623 
uöt16
 
c
=
mëa_buf
[
i
+i] | (meta_buf[i+i+1] << 8);

624 
öfo
->
Mëad©a
[
i
]=(
wch¨_t
)
c
;

626 
öfo
->
Mëad©a
[
i
]='\0';

630 
öfo
->
Mëad©a
[0]='\0';

633 
	`f˛o£
(
fd
);

635 if(
	`ac˚ss
(
fûíame
, 
W_OK
))

636 
öfo
->
RódO∆y
=
åue
;

638  
SUCCESS
;

640 
	}
}

642 
boﬁ8
 
	$S9xMovõA˘ive
 ()

644  (
Movõ
.
Sèã
!=
MOVIE_STATE_NONE
);

645 
	}
}

647 
boﬁ8
 
	$S9xMovõRódO∆y
 ()

649 if(!
	`S9xMovõA˘ive
())

650  
Ál£
;

652  
Movõ
.
RódO∆y
;

653 
	}
}

655 
uöt32
 
	$S9xMovõGëId
 ()

657 if(!
	`S9xMovõA˘ive
())

660  
Movõ
.
MovõId
;

661 
	}
}

663 
uöt32
 
	$S9xMovõGëLígth
 ()

665 if(!
	`S9xMovõA˘ive
())

668  
Movõ
.
MaxFøme
;

669 
	}
}

671 
uöt32
 
	$S9xMovõGëFømeCou¡î
 ()

673 if(!
	`S9xMovõA˘ive
())

676  
Movõ
.
CuºítFøme
;

677 
	}
}

679 
	$S9xMovõToggÀFømeDi•œy
 ()

681 
Movõ
.
FømeDi•œy
 = !Movie.FrameDisplay;

682 if(!
Movõ
.
FømeDi•œy
)

684 
GFX
.
InfoSåögTimeout
 = 1;

686 
	}
}

688 
	$S9xMovõFªeze
 (
uöt8
** 
buf
, 
uöt32
* 
size
)

691 if(!
	`S9xMovõA˘ive
())

696 *
buf
 = 
NULL
;

697 *
size
 = 0;

700 
uöt32
 
size_√eded
 = 4*3;

701 
size_√eded
 +(
uöt32
)(
Movõ
.
ByãsPîFøme
 * (Movõ.
MaxFøme
+1));

702 *
buf
=
√w
 
uöt8
[
size_√eded
];

703 *
size
=
size_√eded
;

705 
uöt8
* 
±r
 = *
buf
;

706 if(!
±r
)

711 
	`Wrôe32
(
Movõ
.
MovõId
, 
±r
);

712 
	`Wrôe32
(
Movõ
.
CuºítFøme
, 
±r
);

713 
	`Wrôe32
(
Movõ
.
MaxFøme
, 
±r
);

715 
	`mem˝y
(
±r
, 
Movõ
.
I≈utBuf„r
, Movõ.
ByãsPîFøme
 * (Movõ.
MaxFøme
+1));

716 
	}
}

718 
boﬁ8
 
	$S9xMovõUn‰ìze
 (c⁄° 
uöt8
* 
buf
, 
uöt32
 
size
)

721 if(!
	`S9xMovõA˘ive
())

723  
Ál£
;

726 c⁄° 
uöt8
* 
±r
 = 
buf
;

727 if(
size
 < 4*3)

729  
Ál£
;

732 
uöt32
 
movõ_id
 = 
	`Ród32
(
±r
);

733 
uöt32
 
cuºít_‰ame
 = 
	`Ród32
(
±r
);

734 
uöt32
 
max_‰ame
 = 
	`Ród32
(
±r
);

735 
uöt32
 
•a˚_√eded
 = (
Movõ
.
ByãsPîFøme
 * (
max_‰ame
+1));

737 if(
movõ_id
 !
Movõ
.
MovõId
 ||

738 
cuºít_‰ame
 > 
max_‰ame
 ||

739 
•a˚_√eded
 > 
size
)

741  
Ál£
;

744 if(!
Movõ
.
RódO∆y
)

749 
	`ch™ge_°©e
(
MOVIE_STATE_RECORD
);

750 
	`S9xMesßge
(
S9X_INFO
, 
S9X_MOVIE_INFO
, 
MOVIE_INFO_RERECORD
);

752 
Movõ
.
CuºítFøme
 = 
cuºít_‰ame
;

753 
Movõ
.
MaxFøme
 = 
max_‰ame
;

754 ++
Movõ
.
Rîec‹dCou¡
;

756 
	`ª£rve_buf„r_•a˚
(
•a˚_√eded
);

757 
	`mem˝y
(
Movõ
.
I≈utBuf„r
, 
±r
, 
•a˚_√eded
);

758 
	`Êush_movõ
();

759 
	`f£ek
(
Movõ
.
Fûe
, Movõ.
C⁄åﬁÀrD©aOff£t
+(Movõ.
ByãsPîFøme
 * (Movõ.
CuºítFøme
+1)), 
SEEK_SET
);

771 if(
cuºít_‰ame
 > 
Movõ
.
MaxFøme
)

773  
Ál£
;

776 
	`ch™ge_°©e
(
MOVIE_STATE_PLAY
);

777 
	`S9xMesßge
(
S9X_INFO
, 
S9X_MOVIE_INFO
, 
MOVIE_INFO_REWIND
);

779 
Movõ
.
CuºítFøme
 = 
cuºít_‰ame
;

782 
Movõ
.
I≈utBuf„rPå
 = Movõ.
I≈utBuf„r
 + (Movõ.
ByãsPîFøme
 * Movõ.
CuºítFøme
);

783 
	`ªad_‰ame_c⁄åﬁÀr_d©a
();

785  
åue
;

786 
	}
}

	@movie.h

91 #i‚de‡
_MOVIE_H_


92 
	#_MOVIE_H_


	)

94 
	~<°dio.h
>

95 
	~<time.h
>

96 
	~"¢es9x.h
"

98 #i‚de‡
SUCCESS


99 
	#SUCCESS
 1

	)

100 
	#WRONG_FORMAT
 (-1)

	)

101 
	#WRONG_VERSION
 (-2)

	)

102 
	#FILE_NOT_FOUND
 (-3)

	)

105 
	#MOVIE_OPT_FROM_SNAPSHOT
 0

	)

106 
	#MOVIE_OPT_FROM_RESET
 (1<<0)

	)

107 
	#MOVIE_OPT_PAL
 (1<<1)

	)

108 
	#MOVIE_MAX_METADATA
 512

	)

110 
START_EXTERN_C


111 
	sMovõInfo


113 
time_t
 
	mTimeCª©ed
;

114 
uöt32
 
	mLígthFømes
;

115 
uöt32
 
	mRîec‹dCou¡
;

116 
wch¨_t
 
	mMëad©a
[
MOVIE_MAX_METADATA
];

117 
uöt8
 
	mO±s
;

118 
uöt8
 
	mC⁄åﬁÀrsMask
;

119 
boﬁ8
 
	mRódO∆y
;

123 
S9xMovõO≥n
 (c⁄° * 
fûíame
, 
boﬁ8
 
ªad_⁄ly
);

124 
S9xMovõCª©e
 (c⁄° * 
fûíame
, 
uöt8
 
c⁄åﬁÀrs_mask
, uöt8 
›ts
, c⁄° 
wch¨_t
* 
mëad©a
, 
mëad©a_Àngth
);

125 
S9xMovõGëInfo
 (c⁄° * 
fûíame
, 
MovõInfo
* 
öfo
);

126 
S9xMovõSt›
 (
boﬁ8
 
suµªss_mesßge
);

127 
S9xMovõToggÀFømeDi•œy
 ();

130 
S9xMovõInô
 ();

131 
S9xMovõUpd©e
 ();

133 
S9xMovõFªeze
 (
uöt8
** 
buf
, 
uöt32
* 
size
);

134 
boﬁ8
 
S9xMovõUn‰ìze
 (c⁄° 
uöt8
* 
buf
, 
uöt32
 
size
);

137 
boﬁ8
 
S9xMovõA˘ive
 ();

139 
boﬁ8
 
S9xMovõRódO∆y
 ();

140 
uöt32
 
S9xMovõGëId
 ();

141 
uöt32
 
S9xMovõGëLígth
 ();

142 
uöt32
 
S9xMovõGëFømeCou¡î
 ();

144 
	gEND_EXTERN_C


	@netplay.h

90 #i‚de‡
_NETPLAY_H_


91 
	#_NETPLAY_H_


	)

110 
	#NP_VERSION
 10

	)

111 
	#NP_JOYPAD_HIST_SIZE
 120

	)

112 
	#NP_DEFAULT_PORT
 6096

	)

114 
	#NP_MAX_CLIENTS
 5

	)

116 
	#NP_SERV_MAGIC
 'S'

	)

117 
	#NP_CLNT_MAGIC
 'C'

	)

119 
	#NP_CLNT_HELLO
 0

	)

120 
	#NP_CLNT_JOYPAD
 1

	)

121 
	#NP_CLNT_RESET
 2

	)

122 
	#NP_CLNT_PAUSE
 3

	)

123 
	#NP_CLNT_LOAD_ROM
 4

	)

124 
	#NP_CLNT_ROM_IMAGE
 5

	)

125 
	#NP_CLNT_FREEZE_FILE
 6

	)

126 
	#NP_CLNT_SRAM_DATA
 7

	)

127 
	#NP_CLNT_READY
 8

	)

128 
	#NP_CLNT_LOADED_ROM
 9

	)

129 
	#NP_CLNT_RECEIVED_ROM_IMAGE
 10

	)

130 
	#NP_CLNT_WAITING_FOR_ROM_IMAGE
 11

	)

132 
	#NP_SERV_HELLO
 0

	)

133 
	#NP_SERV_JOYPAD
 1

	)

134 
	#NP_SERV_RESET
 2

	)

135 
	#NP_SERV_PAUSE
 3

	)

136 
	#NP_SERV_LOAD_ROM
 4

	)

137 
	#NP_SERV_ROM_IMAGE
 5

	)

138 
	#NP_SERV_FREEZE_FILE
 6

	)

139 
	#NP_SERV_SRAM_DATA
 7

	)

140 
	#NP_SERV_READY
 8

	)

142 
	sSNPClõ¡


144 vﬁ©ûê
uöt8
 
	mSídSequí˚Num
;

145 vﬁ©ûê
uöt8
 
	mRe˚iveSequí˚Num
;

146 vﬁ©ûê
boﬁ8
 
	mC⁄√˘ed
;

147 vﬁ©ûê
boﬁ8
 
	mSaidHñlo
;

148 vﬁ©ûê
boﬁ8
 
	mPau£d
;

149 vﬁ©ûê
boﬁ8
 
	mRódy
;

150 
	mSockë
;

151 *
	mROMName
;

152 *
	mHo°Name
;

153 *
	mWho
;

157 
	mNP_SERVER_SEND_ROM_IMAGE
,

158 
	mNP_SERVER_SYNC_ALL
,

159 
	mNP_SERVER_SYNC_CLIENT
,

160 
	mNP_SERVER_SEND_FREEZE_FILE_ALL
,

161 
	mNP_SERVER_SEND_ROM_LOAD_REQUEST_ALL
,

162 
	mNP_SERVER_RESET_ALL
,

163 
	mNP_SERVER_SEND_SRAM_ALL
,

164 
	mNP_SERVER_SEND_SRAM


167 
	#NP_MAX_TASKS
 20

	)

169 
	sNPSîvîTask


171 
uöt32
 
	mTask
;

172 *
	mD©a
;

175 
	sSNPSîvî


177 
SNPClõ¡
 
	mClõ¡s
 [
NP_MAX_CLIENTS
];

178 
	mNumClõ¡s
;

179 vﬁ©ûê
NPSîvîTask
 
	mTaskQueue
 [
NP_MAX_TASKS
];

180 vﬁ©ûê
uöt32
 
	mTaskHód
;

181 vﬁ©ûê
uöt32
 
	mTaskTaû
;

182 
	mSockë
;

183 
uöt32
 
	mFømeTime
;

184 
uöt32
 
	mFømeCou¡
;

185 
	mROMName
 [30];

186 
uöt32
 
	mJoy∑ds
 [5];

187 
boﬁ8
 
	mClõ¡Pau£d
;

188 
uöt32
 
	mPau£d
;

189 
boﬁ8
 
	mSídROMImageOnC⁄√˘
;

190 
boﬁ8
 
	mSyncByRe£t
;

193 
	#NP_MAX_ACTION_LEN
 200

	)

195 
	sSNëPœy


197 vﬁ©ûê
uöt8
 
	mMySequí˚Num
;

198 vﬁ©ûê
uöt8
 
	mSîvîSequí˚Num
;

199 vﬁ©ûê
boﬁ8
 
	mC⁄√˘ed
;

200 vﬁ©ûê
boﬁ8
 
	mAb‹t
;

201 vﬁ©ûê
uöt8
 
	mPœyî
;

202 vﬁ©ûê
boﬁ8
 
	mClõ¡sRódy
 [
NP_MAX_CLIENTS
];

203 vﬁ©ûê
boﬁ8
 
	mClõ¡sPau£d
 [
NP_MAX_CLIENTS
];

204 vﬁ©ûê
boﬁ8
 
	mPau£d
;

205 vﬁ©ûê
boﬁ8
 
	mPídögWaô4Sync
;

206 vﬁ©ûê
uöt8
 
	mPî˚¡ageCom∂ëe
;

207 vﬁ©ûê
boﬁ8
 
	mWaôög4Emuœti⁄Thªad
;

208 vﬁ©ûê
boﬁ8
 
	mAnswî
;

209 vﬁ©ûê
	mSockë
;

210 *
	mSîvîHo°Name
;

211 *
	mROMName
;

212 
	mP‹t
;

213 vﬁ©ûê
uöt32
 
	mJoy∑dWrôeInd
;

214 vﬁ©ûê
uöt32
 
	mJoy∑dRódInd
;

215 
uöt32
 
	mJoy∑ds
 [
NP_JOYPAD_HIST_SIZE
][
NP_MAX_CLIENTS
];

216 
uöt32
 
	mFøme
 [
NP_JOYPAD_HIST_SIZE
];

217 
uöt32
 
	mFømeCou¡
;

218 
uöt32
 
	mMaxFømeSkù
;

219 
uöt32
 
	mMaxBehödFømeCou¡
;

220 
	mA˘i⁄Msg
 [
NP_MAX_ACTION_LEN
];

221 
	mEº‹Msg
 [
NP_MAX_ACTION_LEN
];

222 
	mW¨nögMsg
 [
NP_MAX_ACTION_LEN
];

225 "C" 
SNëPœy
 
NëPœy
;

233 
	#WRITE_LONG
(
p
, 
v
Ë{ \

	)

234 *((
	gp
Ë+ 0Ë(
uöt8
Ë((
v
) >> 24); \

235 *((
	gp
Ë+ 1Ë(
uöt8
Ë((
v
) >> 16); \

236 *((
	gp
Ë+ 2Ë(
uöt8
Ë((
v
) >> 8); \

237 *((
	gp
Ë+ 3Ë(
uöt8
Ë((
v
) >> 0); \

240 
	#READ_LONG
(
p
Ë\

	)

241 ((((
	guöt8
Ë*((
	gp
) + 0)) << 24) | \

242 (((
	guöt8
Ë*((
	gp
) + 1)) << 16) | \

243 (((
	guöt8
Ë*((
	gp
) + 2)) << 8) | \

244 (((
	guöt8
Ë*((
	gp
) + 3)) << 0))

246 
boﬁ8
 
S9xNPC⁄√˘ToSîvî
 (c⁄° *
£rvî_«me
, 
p‹t
,

247 c⁄° *
rom_«me
);

248 
boﬁ8
 
S9xNPWaôF‹HóπBót
 ();

249 
uöt32
 
S9xNPGëJoy∑d
 (
which1
);

250 
boﬁ8
 
S9xNPSídJoy∑dUpd©e
 (
uöt32
 
joy∑d
);

251 
S9xNPDisc⁄√˘
 ();

252 
boﬁ8
 
S9xNPInôüli£
 ();

253 
boﬁ8
 
S9xNPSídD©a
 (
fd
, c⁄° 
uöt8
 *
d©a
, 
Àn
);

254 
boﬁ8
 
S9xNPGëD©a
 (
fd
, 
uöt8
 *
d©a
, 
Àn
);

256 
S9xNPSyncClõ¡s
 ();

257 
S9xNPSãpJoy∑dHi°‹y
 ();

259 
S9xNPRe£tJoy∑dRódPos
 ();

260 
boﬁ8
 
S9xNPSídRódy
 (
uöt8
 
›
 = 
NP_CLNT_READY
);

261 
boﬁ8
 
S9xNPSídPau£
 (boﬁ8 
∑u£
);

262 
S9xNPRe£t
 ();

263 
S9xNPSëA˘i⁄
 (c⁄° *
a˘i⁄
, 
boﬁ8
 
f‹˚
 = 
FALSE
);

264 
S9xNPSëEº‹
 (c⁄° *
îr‹
);

265 
S9xNPSëW¨nög
 (c⁄° *
w¨nög
);

266 
S9xNPDisˇrdHóπbóts
 ();

267 
S9xNPSîvîQueueSídögFªezeFûe
 (c⁄° *
fûíame
);

268 
S9xNPSîvîQueueSyncAŒ
 ();

269 
S9xNPSîvîQueueSídögROMImage
 ();

270 
S9xNPSîvîQueueSídögLﬂdROMReque°
 (c⁄° *
fûíame
);

272 
S9xNPSîvîAddTask
 (
uöt32
 
èsk
, *
d©a
);

274 
boﬁ8
 
S9xNPSèπSîvî
 (
p‹t
);

275 
S9xNPSt›Sîvî
 ();

276 #ifde‡
__WIN32kk__


277 
	#S9xGëMûliTime
 
timeGëTime


	)

279 
uöt32
 
S9xGëMûliTime
 ();

	@newres.h

1 #i‚de‡
__NEWRES_H__


2 
	#__NEWRES_H__


	)

4 #i‡!
deföed
(
UNDER_CE
)

5 
	#UNDER_CE
 
_WIN32_WCE


	)

8 #i‡
deföed
(
_WIN32_WCE
)

9 #i‡!
deföed
(
WCEOLE_ENABLE_DIALOGEX
)

10 
	#DIALOGEX
 
DIALOG
 
DISCARDABLE


	)

12 
	~<comm˘æ.h
>

13 
	#SHMENUBAR
 
RCDATA


	)

14 #i‡
deföed
(
WIN32_PLATFORM_PSPC
Ë&& (
_WIN32_WCE
 >= 300)

15 
	~<aygshñl.h
>

16 
	#AFXCE_IDR_SCRATCH_SHMENU
 28700

	)

18 
	#I_IMAGENONE
 (-2)

	)

19 
	#NOMENU
 0xFFFF

	)

20 
	#IDS_SHNEW
 1

	)

22 
	#IDM_SHAREDNEW
 10

	)

23 
	#IDM_SHAREDNEWDEFAULT
 11

	)

25 
	#AFXCE_IDD_SAVEMODIFIEDDLG
 28701

	)

28 #ifde‡
RC_INVOKED


29 #i‚de‡
_INC_WINDOWS


30 
	#_INC_WINDOWS


	)

31 
	~"wöu£r.h
"

36 #ifde‡
IDC_STATIC


37 #unde‡
IDC_STATIC


39 
	#IDC_STATIC
 (-1)

	)

	@os9x_65c816_def.h

5 
	#MAP_LAST
 12

	)

7 
	#ªgA
 
R11


8 
	#r°©us
 
R4


9 
	#ªgDB™k
 
R4


10 
	#ªgX
 
R5


11 
	#ªgY
 
R6


12 

	)

13 
	#Ωc
 
R7


14 
	#ªgD
 
R8


15 
	#ªgPB™k
 
R8


16 
	#ªgCy˛es
 
R9


17 
	#ªgS
 
R10


18 

	)

19 
	#rs¸©ch
 
R0


20 
	#ªg›code
 
R0


21 
	#rs¸©ch2
 
R1


22 
	#rs¸©ch3
 
R2


23 
	#rs¸©ch4
 
R3


24 

	)

26 
	#rs¸©ch5
 
R5


27 
	#rs¸©ch6
 
R6


28 
	#rs¸©ch7
 
R8


29 
	#rs¸©ch8
 
R9


30 
	#rs¸©ch9
 
R10


31 

	)

32 
	#ªgpcba£
 
R12


33 

	)

34 
	#ªgCPUv¨
 
R14


	)

54 
	#STATUS_SHIFTER
 24

	)

55 
	#MASK_EMUL
 (1<<(
STATUS_SHIFTER
-1))

	)

56 
	#MASK_SHIFTER_CARRY
 (
STATUS_SHIFTER
+1)

	)

57 
	#MASK_CARRY
 (1<<(
STATUS_SHIFTER
))

58 
	#MASK_ZERO
 (2<<(
STATUS_SHIFTER
))

59 
	#MASK_IRQ
 (4<<(
STATUS_SHIFTER
))

60 
	#MASK_DECIMAL
 (8<<(
STATUS_SHIFTER
))

61 
	#MASK_INDEX
 (16<<(
STATUS_SHIFTER
))

62 
	#MASK_MEM
 (32<<(
STATUS_SHIFTER
))

63 
	#MASK_OVERFLOW
 (64<<(
STATUS_SHIFTER
))

64 
	#MASK_NEG
 (128<<(
STATUS_SHIFTER
))

65 

	)

66 
	#ONE_CYCLE
 6

	)

67 
	#SLOW_ONE_CYCLE
 8

	)

69 
	#NMI_FLAG
 (1 << 7)

	)

70 
	#IRQ_PENDING_FLAG
 (1 << 11)

	)

71 
	#SCAN_KEYS_FLAG
 (1 << 4)

	)

74 
	#MEMMAP_BLOCK_SIZE
 (0x1000)

	)

75 
	#MEMMAP_SHIFT
 12

	)

76 
	#MEMMAP_MASK
 (0xFFF)

	)

	@os9x_65c816_mac_gen.h

5 
	#Fœgs_ofs
 0

	)

6 
	#BønchSkù_ofs
 4

	)

7 
	#NMIA˘ive_ofs
 5

	)

8 
	#IRQA˘ive_ofs
 6

	)

9 
	#WaôögF‹I¡îru±_ofs
 7

	)

10 
	#InDMA_ofs
 8

	)

11 
	#WhichEvít
 9

	)

12 
	#SRAMModifõd_ofs
 10

	)

13 
	#BRKTriggîed_ofs
 11

	)

14 
	#PC_ofs
 12

	)

15 
	#PCBa£_ofs
 16

	)

17 
	#PCAtOpcodeSèπ_ofs
 20

	)

19 
	#WaôAddªss_ofs
 24

	)

21 
	#WaôCou¡î_ofs
 28

	)

22 
	#Cy˛es_ofs
 32

	)

23 
	#NextEvít_ofs
 36

	)

24 
	#V_Cou¡î_ofs
 40

	)

25 
	#MemS≥ed_ofs
 44

	)

26 
	#MemS≥edx2_ofs
 48

	)

27 
	#Fa°ROMS≥ed_ofs
 52

	)

28 
	#AutoSaveTimî_ofs
 56

	)

29 
	#NMITriggîPoöt_ofs
 60

	)

30 
	#NMICy˛eCou¡_ofs
 64

	)

31 
	#IRQCy˛eCou¡_ofs
 68

	)

33 
	#RPB_ofs
 72

	)

34 
	#RDB_ofs
 73

	)

35 
	#RP_ofs
 74

	)

36 
	#RA_ofs
 76

	)

37 
	#RAH_ofs
 
RA_ofs
+1

	)

38 
	#RD_ofs
 78

	)

39 
	#RS_ofs
 80

	)

40 
	#RX_ofs
 82

	)

41 
	#RY_ofs
 84

	)

42 
	#RPC_ofs
 86

	)

45 
	#asm_OPTABLE_ofs
 88

	)

46 
	#TrõdI¡îÀavedMode2_ofs
 92

	)

50 
	#M≠_ofs
 96

	)

51 
	#WrôeM≠_ofs
 100

	)

52 
	#Mem‹yS≥ed_ofs
 104

	)

53 
	#BlockIsRAM_ofs
 108

	)

54 
	#SRAM
 112

	)

55 
	#BWRAM
 116

	)

56 
	#SRAMMask
 120

	)

58 
	#APUExecutög_ofs
 122

	)

60 
	#PALMOS_R9_ofs
 124

	)

61 
	#PALMOS_R10_ofs
 128

	)

65 #ifde‡
__PALMOS__


67 .
ma¸o
 
PREPARE_C_CALL


68 
STMFD
 
	gR13
!,{
	gR9
,
	gR10
,
	gR12
,
	gR14
}

69 
LDR
 
	gR9
,[
ªgCPUv¨
,#PALMOS_R9_ofs]

70 
LDR
 
	gR10
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

71 .
	gídm


72 .
ma¸o
 
PREPARE_C_CALL_R0


73 
STMFD
 
	gR13
!,{
	gR0
,
	gR9
,
	gR10
,
	gR12
,
	gR14
}

74 
LDR
 
	gR9
,[
ªgCPUv¨
,#PALMOS_R9_ofs]

75 
LDR
 
	gR10
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

76 .
	gídm


77 .
ma¸o
 
PREPARE_C_CALL_R0R1


78 
STMFD
 
	gR13
!,{
	gR0
,
	gR1
,
	gR9
,
	gR10
,
	gR12
,
	gR14
}

79 
LDR
 
	gR9
,[
ªgCPUv¨
,#PALMOS_R9_ofs]

80 
LDR
 
	gR10
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

81 .
	gídm


82 .
ma¸o
 
PREPARE_C_CALL_LIGHT


83 
STMFD
 
	gR13
!,{
	gR14
}

84 
LDR
 
	gR9
,[
ªgCPUv¨
,#PALMOS_R9_ofs]

85 
LDR
 
	gR10
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

86 .
	gídm


87 .
ma¸o
 
PREPARE_C_CALL_LIGHTR12


88 
STMFD
 
	gR13
!,{
	gR9
,
	gR10
,
	gR12
,
	gR14
}

89 
LDR
 
	gR9
,[
ªgCPUv¨
,#PALMOS_R9_ofs]

90 
LDR
 
	gR10
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

91 .
	gídm


93 .
ma¸o
 
RESTORE_C_CALL


94 
LDMFD
 
	gR13
!,{
	gR9
,
	gR10
,
	gR12
,
	gR14
}

96 .
	gídm


97 .
ma¸o
 
RESTORE_C_CALL_R0


98 
LDMFD
 
	gR13
!,{
	gR0
,
	gR9
,
	gR10
,
	gR12
,
	gR14
}

99 .
	gídm


100 .
ma¸o
 
RESTORE_C_CALL_R1


101 
LDMFD
 
	gR13
!,{
	gR1
,
	gR9
,
	gR10
,
	gR12
,
	gR14
}

102 .
	gídm


103 .
ma¸o
 
RESTORE_C_CALL_LIGHT


104 
LDMFD
 
	gR13
!,{
	gR14
}

105 .
	gídm


106 .
ma¸o
 
RESTORE_C_CALL_LIGHTR12


107 
LDMFD
 
	gR13
!,{
	gR9
,
	gR10
,
	gR12
,
	gR14
}

108 .
	gídm


111 .
ma¸o
 
PREPARE_C_CALL


112 
STMFD
 
	gR13
!,{
	gR12
,
	gR14
}

113 .
	gídm


114 .
ma¸o
 
PREPARE_C_CALL_R0


115 
STMFD
 
	gR13
!,{
	gR0
,
	gR12
,
	gR14
}

116 .
	gídm


117 .
ma¸o
 
PREPARE_C_CALL_R0R1


118 
STMFD
 
	gR13
!,{
	gR0
,
	gR1
,
	gR12
,
	gR14
}

119 .
	gídm


120 .
ma¸o
 
PREPARE_C_CALL_LIGHT


121 
STMFD
 
	gR13
!,{
	gR14
}

122 .
	gídm


123 .
ma¸o
 
PREPARE_C_CALL_LIGHTR12


124 
STMFD
 
	gR13
!,{
	gR12
,
	gR14
}

125 .
	gídm


127 .
ma¸o
 
RESTORE_C_CALL


128 
LDMFD
 
	gR13
!,{
	gR12
,
	gR14
}

129 .
	gídm


130 .
ma¸o
 
RESTORE_C_CALL_R0


131 
LDMFD
 
	gR13
!,{
	gR0
,
	gR12
,
	gR14
}

132 .
	gídm


133 .
ma¸o
 
RESTORE_C_CALL_R1


134 
LDMFD
 
	gR13
!,{
	gR1
,
	gR12
,
	gR14
}

135 .
	gídm


136 .
ma¸o
 
RESTORE_C_CALL_LIGHT


137 
LDMFD
 
	gR13
!,{
	gR14
}

138 .
	gídm


139 .
ma¸o
 
RESTORE_C_CALL_LIGHTR12


140 
LDMFD
 
	gR13
!,{
	gR12
,
	gR14
}

141 .
	gídm


145 .
ma¸o
 
LOAD_REGS


147 
LDRB
 
	gªgPB™k
,[
ªgCPUv¨
,#RPB_ofs]

148 
LDRH
 
	grs¸©ch
,[
ªgCPUv¨
,#RD_ofs]

149 
ORR
 
	gªgD
,ªgD,
	grs¸©ch
, 
	gLSL
 #16

151 
LDRB
 
	gªgDB™k
,[
ªgCPUv¨
,#RDB_ofs]

152 
LDRH
 
	grs¸©ch
,[
ªgCPUv¨
,#RP_ofs]

153 
ORRS
 
	gr°©us
,Ñ°©us, 
	grs¸©ch
,
	gLSL
 #STATUS_SHIFTER

155 
ORRCS
 
	gr°©us
,rstatus,#MASK_EMUL

157 
LDRH
 
	gªgA
,[
ªgCPUv¨
,#RA_ofs]

158 
LDRH
 
	gªgX
,[
ªgCPUv¨
,#RX_ofs]

159 
LDRH
 
	gªgY
,[
ªgCPUv¨
,#RY_ofs]

160 
LDRH
 
	gªgS
,[
ªgCPUv¨
,#RS_ofs]

162 
TST
 
	gr°©us
,#MASK_INDEX

163 
MOVNE
 
	gªgX
,ªgX,
	gLSL
 #24

164 
MOVNE
 
	gªgY
,ªgY,
	gLSL
 #24

165 
MOVEQ
 
	gªgX
,ªgX,
	gLSL
 #16

166 
MOVEQ
 
	gªgY
,ªgY,
	gLSL
 #16

167 
TST
 
	gr°©us
,#MASK_MEM

168 
MOVNE
 
	gªgA
,ªgA,
	gLSL
 #24

169 
MOVEQ
 
	gªgA
,ªgA,
	gLSL
 #16

171 
LDR
 
	gªgpcba£
,[
ªgCPUv¨
,#PCBase_ofs]

172 
LDR
 
	gΩc
,[
ªgCPUv¨
,#PC_ofs]

173 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

174 .
	gídm


177 .
ma¸o
 
SAVE_REGS


179 
STRB
 
	gªgPB™k
,[
ªgCPUv¨
,#RPB_ofs]

180 
MOV
 
	grs¸©ch
,
	gªgD
, 
	gLSR
 #16

181 
STRH
 
	grs¸©ch
,[
ªgCPUv¨
,#RD_ofs]

183 
STRB
 
	gªgDB™k
,[
ªgCPUv¨
,#RDB_ofs]

184 
MOVS
 
	grs¸©ch
, 
	gr°©us
, 
	gLSR
 #STATUS_SHIFTER

185 
ORRCS
 
	grs¸©ch
,rs¸©ch,#0
x100


186 
STRH
 
	grs¸©ch
,[
ªgCPUv¨
,#RP_ofs]

189 
TST
 
	gr°©us
,#MASK_INDEX

190 
MOVNE
 
	grs¸©ch
,
	gªgX
,
	gLSR
 #24

191 
MOVNE
 
	grs¸©ch2
,
	gªgY
,
	gLSR
 #24

192 
MOVEQ
 
	grs¸©ch
,
	gªgX
,
	gLSR
 #16

193 
MOVEQ
 
	grs¸©ch2
,
	gªgY
,
	gLSR
 #16

194 
STRH
 
	grs¸©ch
,[
ªgCPUv¨
,#RX_ofs]

195 
STRH
 
	grs¸©ch2
,[
ªgCPUv¨
,#RY_ofs]

196 
TST
 
	gr°©us
,#MASK_MEM

197 
LDRNEH
 
	grs¸©ch
,[
ªgCPUv¨
,#RA_ofs]

198 
BICNE
 
	grs¸©ch
,rs¸©ch,#0
xFF


199 
ORRNE
 
	grs¸©ch
,rs¸©ch,
	gªgA
,
	gLSR
 #24

200 
MOVEQ
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #16

201 
STRH
 
	grs¸©ch
,[
ªgCPUv¨
,#RA_ofs]

203 
STRH
 
	gªgS
,[
ªgCPUv¨
,#RS_ofs]

204 
STR
 
	gªgpcba£
,[
ªgCPUv¨
,#PCBase_ofs]

205 
STR
 
	gΩc
,[
ªgCPUv¨
,#PC_ofs]

207 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

208 .
ídm


211 .
ma¸o
 
ADD1CYCLE


212 
add
 
	gªgCy˛es
,regCycles, #ONE_CYCLE

213 .
	gídm


214 .
ma¸o
 
ADD1CYCLENE


215 
add√
 
	gªgCy˛es
,regCycles, #ONE_CYCLE

216 .
	gídm


217 .
ma¸o
 
ADD1CYCLEEQ


218 
addeq
 
	gªgCy˛es
,regCycles, #ONE_CYCLE

219 .
	gídm


221 .
ma¸o
 
ADD2CYCLE


222 
add
 
	gªgCy˛es
,ªgCy˛es, #(
	gONE_CYCLE
*2)

223 .
	gídm


224 .
ma¸o
 
ADD2CYCLENE


225 
add√
 
	gªgCy˛es
,ªgCy˛es, #(
	gONE_CYCLE
*2)

226 .
	gídm


227 .
ma¸o
 
ADD2CYCLE2MEM


228 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

229 
add
 
	gªgCy˛es
,ªgCy˛es, #(
	gONE_CYCLE
*2)

230 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch
, 
	gLSL
 #1

231 .
	gídm


232 .
ma¸o
 
ADD2CYCLE1MEM


233 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

234 
add
 
	gªgCy˛es
,ªgCy˛es, #(
	gONE_CYCLE
*2)

235 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch


236 .
	gídm


238 .
ma¸o
 
ADD3CYCLE


239 
add
 
	gªgCy˛es
,ªgCy˛es, #(
	gONE_CYCLE
*3)

240 .
	gídm


242 .
ma¸o
 
ADD1CYCLE1MEM


243 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

244 
add
 
	gªgCy˛es
,regCycles, #ONE_CYCLE

245 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch


246 .
	gídm


248 .
ma¸o
 
ADD1CYCLE2MEM


249 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

250 
add
 
	gªgCy˛es
,regCycles, #ONE_CYCLE

251 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch
, 
	gl¶
 #1

252 .
	gídm


254 .
ma¸o
 
ADD1MEM


255 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

256 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch


257 .
	gídm


259 .
ma¸o
 
ADD2MEM


260 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

261 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch
, 
	gl¶
 #1

262 .
	gídm


264 .
ma¸o
 
ADD3MEM


265 
ldr
 
	grs¸©ch
,[
ªgCPUv¨
,#MemSpeed_ofs]

266 
add
 
	gªgCy˛es
, 
	grs¸©ch
, 
ªgCy˛es


267 
add
 
	gªgCy˛es
,ÑegCy˛es, 
	grs¸©ch
, 
	gl¶
 #1

268 .
ídm


271 .
ma¸o
 
CÀ¨DecimÆ


272 
BIC
 
	gr°©us
,rstatus,#MASK_DECIMAL

273 .
	gídm


274 .
ma¸o
 
SëDecimÆ


275 
ORR
 
	gr°©us
,rstatus,#MASK_DECIMAL

276 .
	gídm


277 .
ma¸o
 
SëIRQ


278 
ORR
 
	gr°©us
,rstatus,#MASK_IRQ

279 .
	gídm


280 .
ma¸o
 
CÀ¨IRQ


281 
BIC
 
	gr°©us
,rstatus,#MASK_IRQ

282 .
	gídm


284 .
ma¸o
 
CPUShutdown


286 
LDR
 
	grs¸©ch
,[
ªgCPUv¨
,#WaitAddress_ofs]

287 
CMP
 
	gΩc
,
rs¸©ch


288 
	gBNE
 5431f

290 
LDR
 
	grs¸©ch
,[
ªgCPUv¨
,#Flags_ofs]

291 
LDR
 
	grs¸©ch2
,[
ªgCPUv¨
,#WaitCounter_ofs]

292 
TST
 
	grs¸©ch
,#(
	gIRQ_PENDING_FLAG
|
	gNMI_FLAG
)

293 
	gBNE
 5432f

294 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


295 
	gBNE
 5432f

297 
MOV
 
	grs¸©ch
,#0

298 
STR
 
	grs¸©ch
,[
ªgCPUv¨
,#WaitAddress_ofs]

303 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#NextEvent_ofs]

304 
LDRB
 
	gr0
,[
ªgCPUv¨
,#APUExecuting_ofs]

305 
MOVS
 
	gr0
,
r0


306 
	gBEQ
 5431f

317 
asmAPU_EXECUTE2


318 
	gB
 5431f

319 .
	gpoﬁ


327 
CMP
 
rs¸©ch2
,#1

328 
MOVHI
 
	grs¸©ch2
,#1

330 
MOVLS
 
	grs¸©ch2
,#0

331 
STR
 
	grs¸©ch2
,[
ªgCPUv¨
,#WaitCounter_ofs]

334 .
ídm


335 .
ma¸o
 
BønchCheck0


338 
LDRB
 
rs¸©ch2
,[
ªgCPUv¨
,#BranchSkip_ofs]

339 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


340 
	gBEQ
 1110f

341 
MOV
 
	grs¸©ch2
,#0

342 
STRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#BranchSkip_ofs]

343 
SUB
 
	grs¸©ch2
,
	gΩc
,
ªgpcba£


345 
CMP
 
	grs¸©ch2
,
rs¸©ch


346 
	gBHI
 1111f

348 .
ídm


349 .
ma¸o
 
BønchCheck1


352 
LDRB
 
rs¸©ch2
,[
ªgCPUv¨
,#BranchSkip_ofs]

353 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


354 
	gBEQ
 1110f

355 
MOV
 
	grs¸©ch2
,#0

356 
STRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#BranchSkip_ofs]

357 
SUB
 
	grs¸©ch2
,
	gΩc
,
ªgpcba£


359 
CMP
 
	grs¸©ch2
,
rs¸©ch


360 
	gBHI
 1111f

362 .
ídm


363 .
ma¸o
 
BønchCheck2


366 
LDRB
 
rs¸©ch2
,[
ªgCPUv¨
,#BranchSkip_ofs]

367 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


368 
	gBEQ
 1110f

369 
MOV
 
	grs¸©ch2
,#0

370 
STRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#BranchSkip_ofs]

371 
SUB
 
	grs¸©ch2
,
	gΩc
,
ªgpcba£


373 
CMP
 
	grs¸©ch2
,
rs¸©ch


374 
	gBHI
 1111f

376 .
ídm


378 .
ma¸o
 
S9xSëPCBa£


380 
PREPARE_C_CALL


381 
BL
 
asm_S9xSëPCBa£


382 
RESTORE_C_CALL


383 
LDR
 
Ωc
,[
ªgCPUv¨
,#PC_ofs]

384 
LDR
 
	gªgpcba£
,[
ªgCPUv¨
,#PCBase_ofs]

385 .
	gídm


387 .
ma¸o
 
	gS9xFixCy˛es


388 #ifdef 
__PALMOS__


389 
LDR
 
	grs¸©ch2
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

391 
TST
 
	gr°©us
,#MASK_EMUL

392 
LDRNE
 
	grs¸©ch
, = 
jum±abÀ1


393 
BNE
 991111f

395 
TST
 
r°©us
,#MASK_MEM

396 
	gBEQ
 991112f

398 
TST
 
	gr°©us
,#MASK_INDEX

400 
LDRNE
 
	grs¸©ch
, = 
jum±abÀ1


402 
LDREQ
 
rs¸©ch
, = 
jum±abÀ2


403 
B
 991111f

405 
TST
 
r°©us
,#MASK_INDEX

407 
LDRNE
 
	grs¸©ch
, = 
jum±abÀ4


409 
LDREQ
 
rs¸©ch
, = 
jum±abÀ3


411 #ifdef 
__PALMOS__


412 
ADD
 
rs¸©ch
,
	grs¸©ch
,
	grs¸©ch2


414 
STR
 
	grs¸©ch
,[
ªgCPUv¨
,#asm_OPTABLE_ofs]

415 .
	gídm


416 .
ma¸o
 
S9xOpcode_NMI


417 
SAVE_REGS


418 
PREPARE_C_CALL_LIGHT


419 
BL
 
asm_S9xOpcode_NMI


420 
RESTORE_C_CALL_LIGHT


421 
	gLOAD_REGS


422 .
	gídm


423 .
ma¸o
 
S9xOpcode_IRQ


424 
SAVE_REGS


425 
PREPARE_C_CALL_LIGHT


426 
BL
 
asm_S9xOpcode_IRQ


427 
RESTORE_C_CALL_LIGHT


428 
	gLOAD_REGS


429 .
	gídm


430 .
ma¸o
 
S9xDoHBœnkPro˚ssög


431 
SAVE_REGS


432 
PREPARE_C_CALL_LIGHT


433 
BL
 
asm_S9xDoHBœnkPro˚ssög


434 
RESTORE_C_CALL_LIGHT


435 
	gLOAD_REGS


436 .
ídm


439 .
ma¸o
 
EXEC_OP


440 
LDR
 
	gR1
,[
ªgCPUv¨
,#asm_OPTABLE_ofs]

441 
STR
 
	gΩc
,[
ªgCPUv¨
,#PCAtOpcodeStart_ofs]

442 
ADD1MEM


443 
LDRB
 
	gR0
, [
Ωc
], #1

445 #ifdef 
__PALMOS__


446 
LDR
 
	gR2
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

447 
LDR
 
	gR3
,[
R1
,
R0
,
LSL
 #2]

448 
ADD
 
	gPC
,
	gR2
,
	gR3


450 
LDR
 
	gPC
, [
R1
,
R0
, 
LSL
 #2]

452 .
	gídm


453 .
ma¸o
 
	gNEXTOPCODE


454 #ifdef 
__TESTING__


455 
B
 
	gídmaöLo›


457 
LDR
 
	grs¸©ch
,[
ªgCPUv¨
,#NextEvent_ofs]

458 
CMP
 
	gªgCy˛es
,
rs¸©ch


459 
BLT
 
maöLo›


460 
S9xDoHBœnkPro˚ssög


461 
B
 
	gmaöLo›


462 .
	gídm


464 .
ma¸o
 
asmAPU_EXECUTE


465 
LDRB
 
	gR0
,[
ªgCPUv¨
,#APUExecuting_ofs]

466 
MOVS
 
	gR0
,
R0


467 
	gBEQ
 43210f

469 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

470 
PREPARE_C_CALL_LIGHTR12


471 
BL
 
asm_APU_EXECUTE


472 
RESTORE_C_CALL_LIGHTR12


473 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

477 .
ídm


479 .
ma¸o
 
asmAPU_EXECUTE2


481 
STR
 
ªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

482 
PREPARE_C_CALL_LIGHTR12


483 
BL
 
asm_APU_EXECUTE2


484 
RESTORE_C_CALL_LIGHTR12


485 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

487 .
ídm


491 
	gasmMaöLo›
:

493 
STMFD
 
R13
!,{
	gR4
-
	gR11
,
	gLR
}

495 
MOV
 
	gªgCPUv¨
,
R0


497 
LOAD_REGS


499 
S9xFixCy˛es


500 
	gmaöLo›
:

502 
asmAPU_EXECUTE


505 
LDR
 
rs¸©ch
,[
ªgCPUv¨
,#Flags_ofs]

506 
MOVS
 
	grs¸©ch
,
rs¸©ch


507 
BNE
 
CPUFœgs_£t


509 
EXEC_OP


511 
	gCPUFœgs_£t
:

512 
TST
 
rs¸©ch
,#NMI_FLAG

513 
BEQ
 
CPUFœgsNMI_FLAG_˛óªd


514 
LDR
 
	grs¸©ch2
,[
ªgCPUv¨
,#NMICycleCount_ofs]

515 
SUBS
 
	grs¸©ch2
,rscratch2,#1

516 
STR
 
	grs¸©ch2
,[
ªgCPUv¨
,#NMICycleCount_ofs]

517 
BNE
 
CPUFœgsNMI_FLAG_˛óªd


518 
BIC
 
	grs¸©ch
,rscratch,#NMI_FLAG

519 
STR
 
	grs¸©ch
,[
ªgCPUv¨
,#Flags_ofs]

520 
LDRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#WaitingForInterrupt_ofs]

521 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


522 
BEQ
 
NŸCPUaôögF‹I¡îru±NMI


523 
MOV
 
	grs¸©ch2
,#0

524 
ADD
 
	gΩc
,rpc,#1

525 
STRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#WaitingForInterrupt_ofs]

526 
	gNŸCPUaôögF‹I¡îru±NMI
:

527 
S9xOpcode_NMI


528 
LDR
 
rs¸©ch
,[
ªgCPUv¨
,#Flags_ofs]

529 
	gCPUFœgsNMI_FLAG_˛óªd
:

530 
TST
 
rs¸©ch
,#IRQ_PENDING_FLAG

531 
BEQ
 
CPUFœgsIRQ_PENDING_FLAG_˛óªd


532 
LDR
 
	grs¸©ch2
,[
ªgCPUv¨
,#IRQCycleCount_ofs]

533 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


534 
BNE
 
CPUIRQCy˛eCou¡_NŸZîo


535 
LDRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#WaitingForInterrupt_ofs]

536 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


537 
BEQ
 
NŸCPUaôögF‹I¡îru±IRQ


538 
MOV
 
	grs¸©ch2
,#0

539 
ADD
 
	gΩc
,rpc,#1

540 
STRB
 
	grs¸©ch2
,[
ªgCPUv¨
,#WaitingForInterrupt_ofs]

541 
	gNŸCPUaôögF‹I¡îru±IRQ
:

542 
LDRB
 
rs¸©ch2
,[
ªgCPUv¨
,#IRQActive_ofs]

543 
MOVS
 
	grs¸©ch2
,
rs¸©ch2


544 
BEQ
 
CPUIRQA˘ive_˛óªd


545 
TST
 
	gr°©us
,#MASK_IRQ

546 
BNE
 
CPUFœgsIRQ_PENDING_FLAG_˛óªd


547 
S9xOpcode_IRQ


548 
LDR
 
	grs¸©ch
,[
ªgCPUv¨
,#Flags_ofs]

549 
B
 
CPUFœgsIRQ_PENDING_FLAG_˛óªd


550 
	gCPUIRQA˘ive_˛óªd
:

551 
BIC
 
rs¸©ch
,
	grs¸©ch
,#IRQ_PENDING_FLAG

552 
STR
 
	grs¸©ch
,[
ªgCPUv¨
,#Flags_ofs]

553 
B
 
CPUFœgsIRQ_PENDING_FLAG_˛óªd


554 
	gCPUIRQCy˛eCou¡_NŸZîo
:

555 
SUB
 
rs¸©ch2
,
	grs¸©ch2
,#1

556 
STR
 
	grs¸©ch2
,[
ªgCPUv¨
,#IRQCycleCount_ofs]

557 
	gCPUFœgsIRQ_PENDING_FLAG_˛óªd
:

559 
TST
 
rs¸©ch
,#SCAN_KEYS_FLAG

560 
BNE
 
ídmaöLo›


562 
EXEC_OP


564 
	gídmaöLo›
:

576 
SAVE_REGS


577 
LDMFD
 
R13
!,{
	gR4
-
	gR11
,
	gLR
}

578 
MOV
 
	gPC
,
	gLR


581 .
poﬁ


584 
	gã°_›code
:

586 
STMFD
 
R13
!,{
	gR4
-
	gR11
,
	gLR
}

588 
MOV
 
	gªgCPUv¨
,
R0


590 
LOAD_REGS


592 
S9xFixCy˛es


594 
	gEXEC_OP


595 .
	gpoﬁ


	@os9x_65c816_mac_mem.h

10 .
ma¸o
 
	gS9xGëW‹d


13 #ifde‡ 
_C_GW_


14 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

15 
PREPARE_C_CALL


16 
BL
 
asm_S9xGëW‹d


17 
RESTORE_C_CALL


18 
MOV
 
	gR0
, R0, 
	gLSL
 #16

19 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

21 
STMFD
 
	gR13
!,{
	gPC
}

22 
B
 
asmS9xGëW‹d


23 
MOV
 
	gR0
, R0, 
	gLSL
 #16

25 .
	gídm


26 .
ma¸o
 
	gS9xGëW‹dLow


29 #ifde‡ 
_C_GW_


30 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

31 
PREPARE_C_CALL


32 
BL
 
asm_S9xGëW‹d


33 
RESTORE_C_CALL


34 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

36 
STMFD
 
	gR13
!,{
	gPC
}

37 
B
 
asmS9xGëW‹d


38 
MOV
 
	gR0
,R0

40 .
	gídm


41 .
ma¸o
 
S9xGëW‹dRegSètus
 
	gªg


45 #ifde‡ 
_C_GW_


46 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

47 
PREPARE_C_CALL


48 
BL
 
asm_S9xGëW‹d


49 
RESTORE_C_CALL


50 
	gMOVS
 \
	gªg
, 
	gR0
, 
	gLSL
 #16

51 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

53 
STMFD
 
	gR13
!,{
	gPC
}

54 
B
 
asmS9xGëW‹d


55 
MOV
 
	gR0
,
R0


56 
	gMOVS
 \
	gªg
, 
	gR0
, 
	gLSL
 #16

58 .
	gídm


59 .
ma¸o
 
S9xGëW‹dRegNS
 
	gªg


63 #ifde‡ 
_C_GW_


64 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

65 
PREPARE_C_CALL_R0


66 
BL
 
asm_S9xGëW‹d


67 
	gMOV
 \
	gªg
, 
	gR0
, 
	gLSL
 #16

68 
RESTORE_C_CALL_R0


69 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

71 
STMFD
 
	gR13
!,{
	gR0
}

72 
STMFD
 
	gR13
!,{
	gPC
}

73 
B
 
asmS9xGëW‹d


74 
MOV
 
	gR0
,
R0


75 
	gMOV
 \
	gªg
, 
	gR0
, 
	gLSL
 #16

76 
LDMFD
 
	gR13
!,{
	gR0
}

78 .
	gídm


79 .
ma¸o
 
S9xGëW‹dLowRegNS
 
	gªg


83 #ifde‡ 
_C_GW_


84 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

85 
PREPARE_C_CALL_R0


86 
BL
 
asm_S9xGëW‹d


87 
	gMOV
 \
	gªg
, 
R0


88 
RESTORE_C_CALL_R0


89 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

91 
STMFD
 
	gR13
!,{
	gR0
}

92 
STMFD
 
	gR13
!,{
	gPC
}

93 
B
 
asmS9xGëW‹d


94 
MOV
 
	gR0
,
R0


95 
	gMOV
 \
	gªg
, 
R0


96 
LDMFD
 
	gR13
!,{
	gR0
}

98 .
	gídm


100 .
ma¸o
 
	gS9xGëByã


103 #ifde‡ 
_C_GB_


104 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

105 
PREPARE_C_CALL


106 
BL
 
asm_S9xGëByã


107 
RESTORE_C_CALL


108 
MOV
 
	gR0
, R0, 
	gLSL
 #24

109 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

111 
STMFD
 
	gR13
!,{
	gPC
}

112 
B
 
asmS9xGëByã


113 
MOV
 
	gR0
,
R0


114 
MOV
 
	gR0
, R0, 
	gLSL
 #24

116 .
	gídm


117 .
ma¸o
 
	gS9xGëByãLow


120 #ifde‡ 
_C_GB_


121 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

122 
PREPARE_C_CALL


123 
BL
 
asm_S9xGëByã


124 
RESTORE_C_CALL


125 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

127 
STMFD
 
	gR13
!,{
	gPC
}

128 
B
 
asmS9xGëByã


129 
MOV
 
	gR0
,R0

131 .
	gídm


132 .
ma¸o
 
S9xGëByãRegSètus
 
	gªg


136 #ifde‡ 
_C_GB_


137 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

138 
PREPARE_C_CALL


139 
BL
 
asm_S9xGëByã


140 
RESTORE_C_CALL


141 
	gMOVS
 \
	gªg
, 
	gR0
, 
	gLSL
 #24

142 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

144 
STMFD
 
	gR13
!,{
	gPC
}

145 
B
 
asmS9xGëByã


146 
MOV
 
	gR0
,
R0


147 
	gMOVS
 \
	gªg
, 
	gR0
, 
	gLSL
 #24

149 .
	gídm


150 .
ma¸o
 
S9xGëByãRegNS
 
	gªg


154 #ifde‡ 
_C_GB_


155 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

156 
PREPARE_C_CALL_R0


157 
BL
 
asm_S9xGëByã


158 
	gMOV
 \
	gªg
, 
	gR0
, 
	gLSL
 #24

159 
RESTORE_C_CALL_R0


160 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

162 
STMFD
 
	gR13
!,{
	gR0
}

163 
STMFD
 
	gR13
!,{
	gPC
}

164 
B
 
asmS9xGëByã


165 
MOV
 
	gR0
,
R0


166 
	gMOVS
 \
	gªg
, 
	gR0
, 
	gLSL
 #24

167 
LDMFD
 
	gR13
!,{
	gR0
}

169 .
	gídm


170 .
ma¸o
 
S9xGëByãLowRegNS
 
	gªg


174 #ifde‡ 
_C_GB_


175 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

176 
PREPARE_C_CALL_R0


177 
BL
 
asm_S9xGëByã


178 
	gMOV
 \
	gªg
, 
	gR0
, 
	gLSL
 #24

179 
RESTORE_C_CALL_R0


180 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

182 
STMFD
 
	gR13
!,{
	gR0
}

183 
STMFD
 
	gR13
!,{
	gPC
}

184 
B
 
asmS9xGëByã


185 
MOV
 
	gR0
,
R0


186 
	gMOVS
 \
	gªg
, 
R0


187 
LDMFD
 
	gR13
!,{
	gR0
}

189 .
	gídm


191 .
ma¸o
 
S9xSëW‹d
 
	gªgVÆue


194 #ifde‡ 
_C_SW_


195 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

196 
MOV
 
	gR1
,\
	gªgVÆue
, 
	gLSR
 #16

197 
PREPARE_C_CALL


198 
BL
 
asm_S9xSëW‹d


199 
RESTORE_C_CALL


200 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

202 
STMFD
 
	gR13
!,{
	gPC
}

203 
MOV
 
	gR1
,\
	gªgVÆue
, 
	gLSR
 #16

204 
B
 
asmS9xSëW‹d


205 
MOV
 
	gR0
,R0

207 .
	gídm


208 .
ma¸o
 
	gS9xSëW‹dZîo


210 #ifde‡ 
_C_SW_


211 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

212 
MOV
 
	gR1
,#0

213 
PREPARE_C_CALL


214 
BL
 
asm_S9xSëW‹d


215 
RESTORE_C_CALL


216 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

218 
STMFD
 
	gR13
!,{
	gPC
}

219 
MOV
 
	gR1
,#0

220 
B
 
asmS9xSëW‹d


221 
MOV
 
	gR0
,R0

223 .
	gídm


224 .
ma¸o
 
S9xSëW‹dLow
 
	gªgVÆue


227 #ifde‡ 
_C_SW_


228 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

229 
MOV
 
	gR1
,\
ªgVÆue


230 
PREPARE_C_CALL


231 
BL
 
asm_S9xSëW‹d


232 
RESTORE_C_CALL


233 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

235 
STMFD
 
	gR13
!,{
	gPC
}

236 
MOV
 
	gR1
,\
ªgVÆue


237 
B
 
asmS9xSëW‹d


238 
MOV
 
	gR0
,R0

240 .
	gídm


241 .
ma¸o
 
S9xSëByã
 
	gªgVÆue


244 #ifde‡ 
_C_SB_


245 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

246 
MOV
 
	gR1
,\
	gªgVÆue
, 
	gLSR
 #24

247 
PREPARE_C_CALL


248 
BL
 
asm_S9xSëByã


249 
RESTORE_C_CALL


250 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

252 
STMFD
 
	gR13
!,{
	gPC
}

253 
MOV
 
	gR1
,\
	gªgVÆue
, 
	gLSR
 #24

254 
B
 
asmS9xSëByã


255 
MOV
 
	gR0
,R0

257 .
	gídm


258 .
ma¸o
 
	gS9xSëByãZîo


260 #ifde‡ 
_C_SB_


261 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

262 
MOV
 
	gR1
,#0

263 
PREPARE_C_CALL


264 
BL
 
asm_S9xSëByã


265 
RESTORE_C_CALL


266 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

268 
STMFD
 
	gR13
!,{
	gPC
}

269 
MOV
 
	gR1
,#0

270 
B
 
asmS9xSëByã


271 
MOV
 
	gR0
,R0

273 .
	gídm


274 .
ma¸o
 
S9xSëByãLow
 
	gªgVÆue


277 #ifde‡ 
_C_SB_


278 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

279 
MOV
 
	gR1
,\
ªgVÆue


280 
PREPARE_C_CALL


281 
BL
 
asm_S9xSëByã


282 
RESTORE_C_CALL


283 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

285 
STMFD
 
	gR13
!,{
	gPC
}

286 
MOV
 
	gR1
,\
ªgVÆue


287 
B
 
asmS9xSëByã


288 
MOV
 
	gR0
,R0

290 .
	gídm


300 .
ma¸o
 
Absﬁuã


301 
ADD2MEM


302 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

303 
LDRB
 
	grs¸©ch
 , [
Ωc
],#2

304 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

305 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

306 .
	gídm


307 .
ma¸o
 
AbsﬁuãIndexedIndúe˘X0


308 
ADD2MEM


309 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

310 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

311 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

312 
ADD
 
	grs¸©ch
 , 
	gªgX
,Ñs¸©ch, 
	gLSL
 #16

313 
MOV
 
	grs¸©ch
 ,Ñs¸©ch, 
	gLSR
 #16

314 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

315 
	gS9xGëW‹dLow


317 .
	gídm


318 .
ma¸o
 
AbsﬁuãIndexedIndúe˘X1


319 
ADD2MEM


320 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

321 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

322 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

323 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgX
, 
	gLSR
 #24

324 
BIC
 
	grs¸©ch
 ,Ñs¸©ch, #0
x00FF0000


325 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

326 
	gS9xGëW‹dLow


328 .
	gídm


329 .
ma¸o
 
AbsﬁuãIndúe˘L⁄g


330 
ADD2MEM


331 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

332 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

333 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

334 
S9xGëW‹dLowRegNS
 
rs¸©ch2


335 
ADD
 
	grs¸©ch
 ,Ñscratch, #2

336 
STMFD
 
	gr13
!,{
	grs¸©ch2
}

337 
S9xGëByãLow


338 
LDMFD
 
	gr13
!,{
	grs¸©ch2
}

339 
ORR
 
	grs¸©ch
 , 
	grs¸©ch2
,Ñs¸©ch, 
	gLSL
 #16

340 .
	gídm


341 .
ma¸o
 
AbsﬁuãIndúe˘


342 
ADD2MEM


343 
LDRB
 
	grs¸©ch2
 , [
Ωc
,#1]

344 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

345 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

346 
S9xGëW‹dLow


347 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

348 .
	gídm


349 .
ma¸o
 
AbsﬁuãIndexedX0


350 
ADD2MEM


351 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

352 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

353 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

354 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

355 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgX
, 
	gLSR
 #16

356 .
	gídm


357 .
ma¸o
 
AbsﬁuãIndexedX1


358 
ADD2MEM


359 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

360 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

361 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

362 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

363 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgX
, 
	gLSR
 #24

364 .
	gídm


367 .
ma¸o
 
AbsﬁuãIndexedY0


368 
ADD2MEM


369 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

370 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

371 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

372 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

373 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgY
, 
	gLSR
 #16

374 .
	gídm


375 .
ma¸o
 
AbsﬁuãIndexedY1


376 
ADD2MEM


377 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

378 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

379 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

380 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

381 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgY
, 
	gLSR
 #24

382 .
	gídm


383 .
ma¸o
 
AbsﬁuãL⁄g


384 
ADD3MEM


385 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

386 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

387 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

388 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

389 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

390 .
	gídm


393 .
ma¸o
 
AbsﬁuãL⁄gIndexedX0


394 
ADD3MEM


395 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

396 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

397 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

398 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

399 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

400 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgX
, 
	gLSR
 #16

401 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
	gxFF000000


402 .
	gídm


403 .
ma¸o
 
AbsﬁuãL⁄gIndexedX1


404 
ADD3MEM


405 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

406 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

407 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

408 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

409 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

410 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgX
, 
	gLSR
 #24

411 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
	gxFF000000


412 .
	gídm


413 .
ma¸o
 
Dúe˘


414 
ADD1MEM


415 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

416 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

417 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

418 .
	gídm


419 .
ma¸o
 
Dúe˘Indúe˘


420 
ADD1MEM


421 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

422 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

423 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

424 
S9xGëW‹dLow


425 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

426 .
	gídm


427 .
ma¸o
 
Dúe˘Indúe˘L⁄g


428 
ADD1MEM


429 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

430 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

431 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

432 
S9xGëW‹dLowRegNS
 
rs¸©ch2


433 
ADD
 
	grs¸©ch
 ,Ñscratch,#2

434 
STMFD
 
	gr13
!,{
	grs¸©ch2
}

435 
S9xGëByãLow


436 
LDMFD
 
	gr13
!,{
	grs¸©ch2
}

437 
ORR
 
	grs¸©ch
 , 
	grs¸©ch2
,Ñs¸©ch, 
	gLSL
 #16

438 .
	gídm


439 .
ma¸o
 
Dúe˘Indúe˘Indexed0


440 
ADD1MEM


441 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

442 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

443 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

444 
S9xGëW‹dLow


445 
ORR
 
	grs¸©ch
,Ñs¸©ch,
	gªgDB™k
, 
	gLSL
 #16

446 
ADD
 
	grs¸©ch
,Ñs¸©ch,
	gªgY
, 
	gLSR
 #16

447 .
	gídm


448 .
ma¸o
 
Dúe˘Indúe˘Indexed1


449 
ADD1MEM


450 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

451 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

452 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

453 
S9xGëW‹dLow


454 
ORR
 
	grs¸©ch
,Ñs¸©ch,
	gªgDB™k
, 
	gLSL
 #16

455 
ADD
 
	grs¸©ch
,Ñs¸©ch,
	gªgY
, 
	gLSR
 #24

456 .
	gídm


457 .
ma¸o
 
Dúe˘Indúe˘IndexedL⁄g0


458 
ADD1MEM


459 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

460 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

461 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

462 
S9xGëW‹dLowRegNS
 
rs¸©ch2


463 
ADD
 
	grs¸©ch
 ,Ñscratch,#2

464 
STMFD
 
	gr13
!,{
	grs¸©ch2
}

465 
S9xGëByãLow


466 
LDMFD
 
	gr13
!,{
	grs¸©ch2
}

467 
ORR
 
	grs¸©ch
 , 
	grs¸©ch2
,Ñs¸©ch, 
	gLSL
 #16

468 
ADD
 
	grs¸©ch
,Ñs¸©ch,
	gªgY
, 
	gLSR
 #16

469 .
	gídm


470 .
ma¸o
 
Dúe˘Indúe˘IndexedL⁄g1


471 
ADD1MEM


472 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

473 
ADD
 
	grs¸©ch
 , 
	gªgD
,Ñs¸©ch, 
	gLSL
 #16

474 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

475 
S9xGëW‹dLowRegNS
 
rs¸©ch2


476 
ADD
 
	grs¸©ch
 ,Ñscratch,#2

477 
STMFD
 
	gr13
!,{
	grs¸©ch2
}

478 
S9xGëByãLow


479 
LDMFD
 
	gr13
!,{
	grs¸©ch2
}

480 
ORR
 
	grs¸©ch
 , 
	grs¸©ch2
,Ñs¸©ch, 
	gLSL
 #16

481 
ADD
 
	grs¸©ch
,Ñs¸©ch,
	gªgY
, 
	gLSR
 #24

482 .
	gídm


483 .
ma¸o
 
Dúe˘IndexedIndúe˘0


484 
ADD1CYCLE1MEM


485 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

486 
ADD
 
	grs¸©ch2
 , 
	gªgD
 , 
ªgX


487 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
 ,Ñs¸©ch, 
	gLSL
 #16

488 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

489 
S9xGëW‹dLow


490 
ORR
 
	grs¸©ch
 ,Ñs¸©ch , 
	gªgDB™k
, 
	gLSL
 #16

491 .
	gídm


492 .
ma¸o
 
Dúe˘IndexedIndúe˘1


493 
ADD1CYCLE1MEM


494 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

495 
ADD
 
	grs¸©ch2
 , 
	gªgD
 , 
	gªgX
, 
	gLSR
 #8

496 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
 ,Ñs¸©ch, 
	gLSL
 #16

497 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

498 
S9xGëW‹dLow


499 
ORR
 
	grs¸©ch
 ,Ñs¸©ch , 
	gªgDB™k
, 
	gLSL
 #16

500 .
	gídm


501 .
ma¸o
 
Dúe˘IndexedX0


502 
ADD1CYCLE1MEM


503 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

504 
ADD
 
	grs¸©ch2
 , 
	gªgD
 , 
ªgX


505 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
 ,Ñs¸©ch, 
	gLSL
 #16

506 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

507 .
	gídm


508 .
ma¸o
 
Dúe˘IndexedX1


509 
ADD1CYCLE1MEM


510 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

511 
ADD
 
	grs¸©ch2
 , 
	gªgD
 , 
	gªgX
, 
	gLSR
 #8

512 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
 ,Ñs¸©ch, 
	gLSL
 #16

513 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

514 .
	gídm


515 .
ma¸o
 
Dúe˘IndexedY0


516 
ADD1CYCLE1MEM


517 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

518 
ADD
 
	grs¸©ch2
 , 
	gªgD
 , 
ªgY


519 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
 ,Ñs¸©ch, 
	gLSL
 #16

520 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

521 .
	gídm


522 .
ma¸o
 
Dúe˘IndexedY1


523 
ADD1CYCLE1MEM


524 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

525 
ADD
 
	grs¸©ch2
 , 
	gªgD
 , 
	gªgY
, 
	gLSR
 #8

526 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
 ,Ñs¸©ch, 
	gLSL
 #16

527 
MOV
 
	grs¸©ch
,Ñs¸©ch, 
	gLSR
 #16

528 .
	gídm


529 .
ma¸o
 
Immedüã8


530 
ADD
 
	grs¸©ch
, 
	gΩc
, 
	gªgPB™k
, 
	gLSL
 #16

531 
SUB
 
	grs¸©ch
,Ñs¸©ch, 
ªgpcba£


532 
ADD
 
	gΩc
,Ñpc, #1

533 .
	gídm


534 .
ma¸o
 
Immedüã16


535 
ADD
 
	grs¸©ch
, 
	gΩc
, 
	gªgPB™k
, 
	gLSL
 #16

536 
SUB
 
	grs¸©ch
,Ñs¸©ch, 
ªgpcba£


537 
ADD
 
	gΩc
,Ñpc, #2

538 .
	gídm


539 .
ma¸o
 
asmRñ©ive


540 
ADD1MEM


541 
LDRSB
 
	grs¸©ch
 , [
Ωc
],#1

542 
ADD
 
	grs¸©ch
 ,Ñs¸©ch , 
Ωc


543 
SUB
 
	grs¸©ch
 ,Ñs¸©ch, 
ªgpcba£


544 
BIC
 
	grs¸©ch
,rs¸©ch,#0
x00FF0000


545 
BIC
 
	grs¸©ch
,rs¸©ch,#0
	gxFF000000


546 .
	gídm


547 .
ma¸o
 
asmRñ©iveL⁄g


548 
ADD1CYCLE2MEM


549 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

550 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

551 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

552 
SUB
 
	grs¸©ch2
 , 
	gΩc
, 
ªgpcba£


553 
ADD
 
	grs¸©ch
 , 
	grs¸©ch2
, 
rs¸©ch


554 
BIC
 
	grs¸©ch
,rs¸©ch,#0
	gx00FF0000


555 .
	gídm


558 .
ma¸o
 
SèckasmRñ©ive


559 
ADD1CYCLE1MEM


560 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

561 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
ªgS


562 
BIC
 
	grs¸©ch
,rs¸©ch,#0
	gx00FF0000


563 .
	gídm


564 .
ma¸o
 
SèckasmRñ©iveIndúe˘Indexed0


565 
ADD2CYCLE1MEM


566 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

567 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
ªgS


568 
BIC
 
	grs¸©ch
,rs¸©ch,#0
x00FF0000


569 
S9xGëW‹dLow


570 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

571 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgY
, 
	gLSR
 #16

572 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
	gxFF000000


573 .
	gídm


574 .
ma¸o
 
SèckasmRñ©iveIndúe˘Indexed1


575 
ADD2CYCLE1MEM


576 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

577 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
ªgS


578 
BIC
 
	grs¸©ch
,rs¸©ch,#0
x00FF0000


579 
S9xGëW‹dLow


580 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

581 
ADD
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgY
, 
	gLSR
 #24

582 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
	gxFF000000


583 .
ídm


587 .
ma¸o
 
PushB
 
ªg


588 
MOV
 
	grs¸©ch
,
ªgS


589 
	gS9xSëByã
 \
ªg


590 
SUB
 
	gªgS
,regS,#1

591 .
	gídm


592 .
ma¸o
 
PushBLow
 
ªg


593 
MOV
 
	grs¸©ch
,
ªgS


594 
	gS9xSëByãLow
 \
ªg


595 
SUB
 
	gªgS
,regS,#1

596 .
	gídm


597 .
ma¸o
 
PushWLow
 
ªg


598 
SUB
 
	grs¸©ch
,
	gªgS
,#1

599 
	gS9xSëW‹dLow
 \
ªg


600 
SUB
 
	gªgS
,regS,#2

601 .
	gídm


602 .
ma¸o
 
PushWrLow


603 
MOV
 
	grs¸©ch2
,
rs¸©ch


604 
SUB
 
	grs¸©ch
,
	gªgS
,#1

605 
S9xSëW‹dLow
 
rs¸©ch2


606 
SUB
 
	gªgS
,regS,#2

607 .
	gídm


608 .
ma¸o
 
PushW
 
ªg


609 
SUB
 
	grs¸©ch
,
	gªgS
,#1

610 
	gS9xSëW‹d
 \
ªg


611 
SUB
 
	gªgS
,regS,#2

612 .
ídm


616 .
ma¸o
 
PuŒB
 
ªg


617 
ADD
 
	grs¸©ch
,
	gªgS
,#1

618 
S9xGëByãLow


619 
ADD
 
	gªgS
,regS,#1

620 
	gMOV
 \
	gªg
,
	grs¸©ch
,
	gLSL
 #24

621 .
	gídm


622 .
ma¸o
 
PuŒBr


623 
ADD
 
	grs¸©ch
,
	gªgS
,#1

624 
S9xGëByã


625 
ADD
 
	gªgS
,regS,#1

626 .
	gídm


627 .
ma¸o
 
PuŒBLow
 
ªg


628 
ADD
 
	grs¸©ch
,
	gªgS
,#1

629 
S9xGëByãLow


630 
ADD
 
	gªgS
,regS,#1

631 
	gMOV
 \
	gªg
,
	grs¸©ch


632 .
	gídm


633 .
ma¸o
 
PuŒBrLow


634 
ADD
 
	grs¸©ch
,
	gªgS
,#1

635 
S9xGëByãLow


636 
ADD
 
	gªgS
,regS,#1

637 .
	gídm


638 .
ma¸o
 
PuŒW
 
ªg


639 
ADD
 
	grs¸©ch
,
	gªgS
,#1

640 
S9xGëW‹dLow


641 
ADD
 
	gªgS
,regS,#2

642 
	gMOV
 \
	gªg
,
	grs¸©ch
,
	gLSL
 #16

643 .
	gídm


645 .
ma¸o
 
PuŒWLow
 
ªg


646 
ADD
 
	grs¸©ch
,
	gªgS
,#1

647 
S9xGëW‹dLow


648 
ADD
 
	gªgS
,regS,#2

649 
	gMOV
 \
	gªg
,
	grs¸©ch


650 .
ídm


654 .
ma¸o
 
PuŒBS
 
ªg


655 
ADD
 
	grs¸©ch
,
	gªgS
,#1

656 
S9xGëByãLow


657 
ADD
 
	gªgS
,regS,#1

658 
	gMOVS
 \
	gªg
,
	grs¸©ch
,
	gLSL
 #24

659 .
	gídm


660 .
ma¸o
 
PuŒBrS


661 
ADD
 
	grs¸©ch
,
	gªgS
,#1

662 
S9xGëByãLow


663 
ADD
 
	gªgS
,regS,#1

664 
MOVS
 
	grs¸©ch
,rs¸©ch,
	gLSL
 #24

665 .
	gídm


666 .
ma¸o
 
PuŒBLowS
 
ªg


667 
ADD
 
	grs¸©ch
,
	gªgS
,#1

668 
S9xGëByãLow


669 
ADD
 
	gªgS
,regS,#1

670 
	gMOVS
 \
	gªg
,
	grs¸©ch


671 .
	gídm


672 .
ma¸o
 
PuŒBrLowS


673 
ADD
 
	grs¸©ch
,
	gªgS
,#1

674 
S9xGëByãLow


675 
ADD
 
	gªgS
,regS,#1

676 
MOVS
 
	grs¸©ch
,rscratch

677 .
	gídm


678 .
ma¸o
 
PuŒWS
 
ªg


679 
ADD
 
	grs¸©ch
,
	gªgS
,#1

680 
S9xGëW‹dLow


681 
ADD
 
	gªgS
,regS,#2

682 
	gMOVS
 \
	gªg
,
	grs¸©ch
, 
	gLSL
 #16

683 .
	gídm


684 .
ma¸o
 
PuŒWrS


685 
ADD
 
	grs¸©ch
,
	gªgS
,#1

686 
S9xGëW‹dLow


687 
ADD
 
	gªgS
,regS,#2

688 
MOVS
 
	grs¸©ch
,rs¸©ch, 
	gLSL
 #16

689 .
	gídm


690 .
ma¸o
 
PuŒWLowS
 
ªg


691 
ADD
 
	grs¸©ch
,
	gªgS
,#1

692 
S9xGëW‹dLow


693 
ADD
 
	gªgS
,regS,#2

694 
	gMOVS
 \
	gªg
,
	grs¸©ch


695 .
	gídm


696 .
ma¸o
 
PuŒWrLowS


697 
ADD
 
	grs¸©ch
,
	gªgS
,#1

698 
S9xGëW‹dLow


699 
ADD
 
	gªgS
,regS,#2

700 
MOVS
 
	grs¸©ch
,rscratch

701 .
	gídm


704 .
globl
 
	gasmS9xGëByã


705 .
globl
 
	gasmS9xGëW‹d


706 .
globl
 
	gasmS9xSëByã


707 .
globl
 
asmS9xSëW‹d


710 
	gasmS9xGëByã
:

716 
MOV
 
R1
,
	gR0
,
	gLSR
 #MEMMAP_SHIFT

720 
BIC
 
	gR1
,R1,#0
xFF000


722 
LDR
 
	gR2
,[
ªgCPUv¨
,#Map_ofs]

723 
LDR
 
	gR2
,[
R2
,
R1
,
LSL
 #2]

724 
CMP
 
	gR2
,#MAP_LAST

725 
BLO
 
GBS≥cül


729 
LDR
 
	gR3
,[
ªgCPUv¨
,#MemorySpeed_ofs]

730 
MOV
 
	gR0
,R0,
	gLSL
 #16

731 
LDRB
 
	gR3
,[
R3
,
R1
]

732 
ADD
 
	gR2
,R2,
	gR0
,
	gLSR
 #16

734 
ADD
 
	gªgCy˛es
,ªgCy˛es,
R3


736 
LDR
 
	gR3
,[
ªgCPUv¨
,#BlockIsRAM_ofs]

738 
LDRB
 
	gR0
,[
R2
]

739 
LDRB
 
	gR3
,[
R3
,
R1
]

740 
MOVS
 
	gR3
,
R3


742 
LDRNE
 
	gR1
,[
ªgCPUv¨
,#PCAtOpcodeStart_ofs]

743 
STRNE
 
	gR1
,[
ªgCPUv¨
,#WaitAddress_ofs]

745 
LDMFD
 
	gR13
!,{
	gPC
}

746 
	gGBS≥cül
:

748 #ifde‡
__PALMOS__


749 
LDR
 
R3
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

750 
LDR
 
	gR2
,[
PC
,
R2
,
LSL
 #2]

751 
ADD
 
	gPC
,
	gR2
,
	gR3


753 
LDR
 
	gPC
,[
PC
,
R2
,
LSL
 #2]

754 
MOV
 
	gR0
,R0

756 .
	gGBPPU


757 .
	gGBCPU


758 .
	gGBDSP


759 .
	gGBLSRAM


760 .
	gGBHSRAM


761 .
	gGBNONE


762 .
	gGBDEBUG


763 .
	gGBC4


764 .
	gGBBWRAM


765 .
	gGBNONE


766 .
	gGBNONE


767 .
GBNONE


771 
	gGBPPU
:

773 
LDRB
 
R1
,[
ªgCPUv¨
,#InDMA_ofs]

774 
MOVS
 
	gR1
,
R1


775 
ADDEQ
 
	gªgCy˛es
,regCycles,#ONE_CYCLE

776 
MOV
 
	gR0
,R0,
	gLSL
 #16

777 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

778 
MOV
 
	gR0
,R0,
	gLSR
 #16

779 
PREPARE_C_CALL


780 
BL
 
S9xGëPPU


781 
RESTORE_C_CALL


782 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

783 
LDMFD
 
	gR13
!,{
	gPC
}

784 
	gGBCPU
:

785 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#ONE_CYCLE

786 
MOV
 
	gR0
,R0,
	gLSL
 #16

787 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

788 
MOV
 
	gR0
,R0,
	gLSR
 #16

789 
PREPARE_C_CALL


790 
BL
 
S9xGëCPU


791 
RESTORE_C_CALL


792 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

793 
LDMFD
 
	gR13
!,{
	gPC
}

794 
	gGBDSP
:

795 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

796 
MOV
 
	gR0
,R0,
	gLSL
 #16

797 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

798 
MOV
 
	gR0
,R0,
	gLSR
 #16

799 
PREPARE_C_CALL


800 
BL
 
S9xGëDSP


801 
RESTORE_C_CALL


802 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

803 
LDMFD
 
	gR13
!,{
	gPC
}

804 
	gGBLSRAM
:

805 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

806 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

807 
LDR
 
	gR1
,[
ªgCPUv¨
,#SRAM]

808 
AND
 
	gR0
,
	gR2
,
R0


809 
LDRB
 
	gR0
,[
R1
,
R0
]

810 
LDMFD
 
	gR13
!,{
	gPC
}

811 
	gGB7SRM
:

812 
GBHSRAM
:

813 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

815 
MOV
 
	gR1
,
	gR0
,
	gLSL
 #17

816 
AND
 
	gR2
,
	gR0
,#0
xF0000


817 
MOV
 
	gR1
,R1,
	gLSR
 #17

818 
MOV
 
	gR2
,R2,
	gLSR
 #3

819 
ADD
 
	gR0
,
	gR2
,
R1


820 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

821 
SUB
 
	gR0
,R0,#0
x6000


822 
LDR
 
	gR1
,[
ªgCPUv¨
,#SRAM]

823 
AND
 
	gR0
,
	gR2
,
R0


824 
LDRB
 
	gR0
,[
R1
,
R0
]

825 
LDMFD
 
	gR13
!,{
	gPC
}

826 
	gGB7ROM
:

827 
GB7RAM
:

828 
GBNONE
:

829 
MOV
 
R0
,
	gR0
,
	gLSR
 #8

830 
ADD
 
	gªgCy˛es
,regCycles,#SLOW_ONE_CYCLE

831 
AND
 
	gR0
,R0,#0
xFF


832 
LDMFD
 
	gR13
!,{
	gPC
}

837 
	gGBC4
:

838 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

839 
MOV
 
	gR0
,R0,
	gLSL
 #16

840 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

841 
MOV
 
	gR0
,R0,
	gLSR
 #16

842 
PREPARE_C_CALL


843 
BL
 
S9xGëC4


844 
RESTORE_C_CALL


845 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

846 
LDMFD
 
	gR13
!,{
	gPC
}

847 
	gGBDEBUG
:

848 
GBBWRAM
:

849 
MOV
 
R0
,
	gR0
,
	gLSL
 #17

850 
ADD
 
	gªgCy˛es
,regCycles,#SLOW_ONE_CYCLE

851 
MOV
 
	gR0
,R0,
	gLSR
 #17

852 
LDR
 
	gR1
,[
ªgCPUv¨
,#BWRAM]

853 
SUB
 
	gR0
,R0,#0
x6000


854 
LDRB
 
	gR0
,[
R0
,
R1
]

855 
LDMFD
 
	gR13
!,{
	gPC
}

859 
	gasmS9xGëW‹d
:

866 
MOV
 
R1
,
	gR0
,
	gLSL
 #19

867 
ADDS
 
	gR1
,R1,#0
x80000


869 
BNE
 
GW_NŸBound¨y


871 
STMFD
 
	gR13
!,{
	gR0
}

872 
STMFD
 
	gR13
!,{
	gPC
}

873 
B
 
asmS9xGëByã


874 
MOV
 
	gR0
,
R0


875 
LDMFD
 
	gR13
!,{
	gR1
}

876 
STMFD
 
	gR13
!,{
	gR0
}

877 
ADD
 
	gR0
,
	gR1
,#1

878 
STMFD
 
	gR13
!,{
	gPC
}

879 
B
 
asmS9xGëByã


880 
MOV
 
	gR0
,
R0


881 
LDMFD
 
	gR13
!,{
	gR1
}

882 
ORR
 
	gR0
,
	gR1
,R0,
	gLSL
 #8

883 
LDMFD
 
	gR13
!,{
	gPC
}

885 
	gGW_NŸBound¨y
:

888 
MOV
 
R1
,
	gR0
,
	gLSR
 #MEMMAP_SHIFT

892 
BIC
 
	gR1
,R1,#0
xFF000


894 
LDR
 
	gR2
,[
ªgCPUv¨
,#Map_ofs]

895 
LDR
 
	gR2
,[
R2
,
R1
,
LSL
 #2]

896 
CMP
 
	gR2
,#MAP_LAST

897 
BLO
 
GWS≥cül


900 
TST
 
	gR0
,#1

901 
BNE
 
GW_NŸ_Alig√d1


904 
LDR
 
	gR3
,[
ªgCPUv¨
,#MemorySpeed_ofs]

905 
MOV
 
	gR0
,R0,
	gLSL
 #16

906 
LDRB
 
	gR3
,[
R3
,
R1
]

907 
MOV
 
	gR0
,R0,
	gLSR
 #16

909 
ADD
 
	gªgCy˛es
,ªgCy˛es,
	gR3
, 
	gLSL
 #1

911 
LDR
 
	gR3
,[
ªgCPUv¨
,#BlockIsRAM_ofs]

913 
LDRH
 
	gR0
,[
R2
,
R0
]

914 
LDRB
 
	gR3
,[
R3
,
R1
]

915 
MOVS
 
	gR3
,
R3


917 
LDRNE
 
	gR1
,[
ªgCPUv¨
,#PCAtOpcodeStart_ofs]

918 
STRNE
 
	gR1
,[
ªgCPUv¨
,#WaitAddress_ofs]

920 
LDMFD
 
	gR13
!,{
	gPC
}

921 
	gGW_NŸ_Alig√d1
:

923 
MOV
 
R0
,
	gR0
,
	gLSL
 #16

924 
ADD
 
	gR3
,
	gR0
,#0
x10000


925 
LDRB
 
	gR3
,[
R2
,
R3
,
LSR
 #16]

926 
LDRB
 
	gR0
,[
R2
,
R0
,
LSR
 #16]

927 
ORR
 
	gR0
,R0,
	gR3
,
	gLSL
 #8

930 
LDR
 
	gR3
,[
ªgCPUv¨
,#BlockIsRAM_ofs]

931 
LDR
 
	gR2
,[
ªgCPUv¨
,#MemorySpeed_ofs]

932 
LDRB
 
	gR3
,[
R3
,
R1
]

933 
LDRB
 
	gR2
,[
R2
,
R1
]

934 
MOVS
 
	gR3
,
R3


935 
LDRNE
 
	gR1
,[
ªgCPUv¨
,#PCAtOpcodeStart_ofs]

936 
STRNE
 
	gR1
,[
ªgCPUv¨
,#WaitAddress_ofs]

937 
ADD
 
	gªgCy˛es
,ªgCy˛es,
	gR2
, 
	gLSL
 #1

938 
LDMFD
 
	gR13
!,{
	gPC
}

939 
	gGWS≥cül
:

940 #ifde‡
__PALMOS__


941 
LDR
 
R3
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

942 
LDR
 
	gR2
,[
PC
,
R2
,
LSL
 #2]

943 
ADD
 
	gPC
,
	gR2
,
	gR3


945 
LDR
 
	gPC
,[
PC
,
R2
,
LSL
 #2]

946 
MOV
 
	gR0
,R0

948 .
	gGWPPU


949 .
	gGWCPU


950 .
	gGWDSP


951 .
	gGWLSRAM


952 .
	gGWHSRAM


953 .
	gGWNONE


954 .
	gGWDEBUG


955 .
	gGWC4


956 .
	gGWBWRAM


957 .
	gGWNONE


958 .
	gGWNONE


959 .
GWNONE


967 
	gGWPPU
:

969 
LDRB
 
R1
,[
ªgCPUv¨
,#InDMA_ofs]

970 
MOVS
 
	gR1
,
R1


971 
ADDEQ
 
	gªgCy˛es
,ªgCy˛es,#(
	gONE_CYCLE
*2)

972 
MOV
 
	gR0
,R0,
	gLSL
 #16

973 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

974 
MOV
 
	gR0
,R0,
	gLSR
 #16

975 
PREPARE_C_CALL_R0


976 
BL
 
S9xGëPPU


977 
LDMFD
 
	gR13
!,{
	gR1
}

978 
STMFD
 
	gR13
!,{
	gR0
}

979 
ADD
 
	gR0
,
	gR1
,#1

981 
BL
 
S9xGëPPU


982 
RESTORE_C_CALL_R1


983 
ORR
 
	gR0
,
	gR1
,R0,
	gLSL
 #8

984 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

985 
LDMFD
 
	gR13
!,{
	gPC
}

986 
	gGWCPU
:

987 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gONE_CYCLE
*2)

988 
MOV
 
	gR0
,R0,
	gLSL
 #16

989 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

990 
MOV
 
	gR0
,R0,
	gLSR
 #16

991 
PREPARE_C_CALL_R0


992 
BL
 
S9xGëCPU


993 
LDMFD
 
	gR13
!,{
	gR1
}

994 
STMFD
 
	gR13
!,{
	gR0
}

995 
ADD
 
	gR0
,
	gR1
,#1

997 
BL
 
S9xGëCPU


998 
RESTORE_C_CALL_R1


999 
ORR
 
	gR0
,
	gR1
,R0,
	gLSL
 #8

1000 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1001 
LDMFD
 
	gR13
!,{
	gPC
}

1002 
	gGWDSP
:

1003 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1004 
MOV
 
	gR0
,R0,
	gLSL
 #16

1005 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1006 
MOV
 
	gR0
,R0,
	gLSR
 #16

1007 
PREPARE_C_CALL_R0


1008 
BL
 
S9xGëDSP


1009 
LDMFD
 
	gR13
!,{
	gR1
}

1010 
STMFD
 
	gR13
!,{
	gR0
}

1011 
ADD
 
	gR0
,
	gR1
,#1

1013 
BL
 
S9xGëDSP


1014 
RESTORE_C_CALL_R1


1015 
ORR
 
	gR0
,
	gR1
,R0,
	gLSL
 #8

1016 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1017 
LDMFD
 
	gR13
!,{
	gPC
}

1018 
	gGWLSRAM
:

1019 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1021 
TST
 
	gR0
,#1

1022 
BNE
 
GW_NŸ_Alig√d2


1023 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1024 
LDR
 
	gR1
,[
ªgCPUv¨
,#SRAM]

1025 
AND
 
	gR3
,
	gR2
,
R0


1026 
LDRH
 
	gR0
,[
R3
,
R1
]

1027 
LDMFD
 
	gR13
!,{
	gPC
}

1028 
	gGW_NŸ_Alig√d2
:

1029 
LDRH
 
R2
,[
ªgCPUv¨
,#SRAMMask]

1030 
LDR
 
	gR1
,[
ªgCPUv¨
,#SRAM]

1031 
AND
 
	gR3
,
	gR2
,
R0


1032 
ADD
 
	gR0
,R0,#1

1033 
AND
 
	gR2
,
	gR0
,
R2


1034 
LDRB
 
	gR3
,[
R1
,
R3
]

1035 
LDRB
 
	gR2
,[
R1
,
R2
]

1036 
ORR
 
	gR0
,
	gR3
,
	gR2
,
	gLSL
 #8

1037 
LDMFD
 
	gR13
!,{
	gPC
}

1038 
	gGW7SRM
:

1039 
GWHSRAM
:

1040 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1042 
TST
 
	gR0
,#1

1043 
BNE
 
GW_NŸ_Alig√d3


1045 
MOV
 
	gR1
,
	gR0
,
	gLSL
 #17

1046 
AND
 
	gR2
,
	gR0
,#0
xF0000


1047 
MOV
 
	gR1
,R1,
	gLSR
 #17

1048 
MOV
 
	gR2
,R2,
	gLSR
 #3

1049 
ADD
 
	gR0
,
	gR2
,
R1


1050 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1051 
SUB
 
	gR0
,R0,#0
x6000


1052 
LDR
 
	gR1
,[
ªgCPUv¨
,#SRAM]

1053 
AND
 
	gR0
,
	gR2
,
R0


1054 
LDRH
 
	gR0
,[
R1
,
R0
]

1055 
LDMFD
 
	gR13
!,{
	gPC
}

1057 
	gGW_NŸ_Alig√d3
:

1058 
MOV
 
R3
,
	gR0
,
	gLSL
 #17

1059 
AND
 
	gR2
,
	gR0
,#0
xF0000


1060 
MOV
 
	gR3
,R3,
	gLSR
 #17

1061 
MOV
 
	gR2
,R2,
	gLSR
 #3

1062 
ADD
 
	gR2
,R2,
R3


1063 
ADD
 
	gR0
,R0,#1

1064 
SUB
 
	gR2
,R2,#0
x6000


1065 
MOV
 
	gR3
,
	gR0
,
	gLSL
 #17

1066 
AND
 
	gR0
,R0,#0
xF0000


1067 
MOV
 
	gR3
,R3,
	gLSR
 #17

1068 
MOV
 
	gR0
,R0,
	gLSR
 #3

1069 
ADD
 
	gR0
,R0,
R3


1070 
LDRH
 
	gR3
,[
ªgCPUv¨
,#SRAMMask]

1071 
SUB
 
	gR0
,R0,#0
x6000


1072 
AND
 
	gR2
,
	gR3
,
R2


1073 
AND
 
	gR0
,
	gR3
,
R0


1075 
LDR
 
	gR3
,[
ªgCPUv¨
,#SRAM]

1076 
LDRB
 
	gR0
,[
R0
,
R3
]

1077 
LDRB
 
	gR2
,[
R2
,
R3
]

1078 
ORR
 
	gR0
,
	gR2
,R0,
	gLSL
 #8

1080 
LDMFD
 
	gR13
!,{
	gPC
}

1081 
	gGW7ROM
:

1082 
GW7RAM
:

1083 
GWNONE
:

1084 
MOV
 
R0
,
	gR0
,
	gLSL
 #16

1085 
ADD
 
	gªgCy˛es
,ªgCy˛es,#(
	gSLOW_ONE_CYCLE
*2)

1086 
MOV
 
	gR0
,R0,
	gLSR
 #24

1087 
ORR
 
	gR0
,R0,R0,
	gLSL
 #8

1088 
LDMFD
 
	gR13
!,{
	gPC
}

1089 
	gGWDEBUG
:

1090 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1091 
MOV
 
	gR0
,#0

1092 
LDMFD
 
	gR13
!,{
	gPC
}

1093 
	gGWC4
:

1094 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1095 
MOV
 
	gR0
,R0,
	gLSL
 #16

1096 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1097 
MOV
 
	gR0
,R0,
	gLSR
 #16

1098 
PREPARE_C_CALL_R0


1099 
BL
 
S9xGëC4


1100 
LDMFD
 
	gR13
!,{
	gR1
}

1101 
STMFD
 
	gR13
!,{
	gR0
}

1102 
ADD
 
	gR0
,
	gR1
,#1

1104 
BL
 
S9xGëC4


1105 
RESTORE_C_CALL_R1


1106 
ORR
 
	gR0
,
	gR1
,R0,
	gLSL
 #8

1107 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1108 
LDMFD
 
	gR13
!,{
	gPC
}

1109 
	gGWBWRAM
:

1110 
TST
 
R0
,#1

1111 
BNE
 
GW_NŸ_Alig√d4


1112 
MOV
 
	gR0
,R0,
	gLSL
 #17

1113 
ADD
 
	gªgCy˛es
,ªgCy˛es,#(
	gSLOW_ONE_CYCLE
*2)

1114 
MOV
 
	gR0
,R0,
	gLSR
 #17

1115 
LDR
 
	gR1
,[
ªgCPUv¨
,#BWRAM]

1116 
SUB
 
	gR0
,R0,#0
x6000


1117 
LDRH
 
	gR0
,[
R1
,
R0
]

1118 
LDMFD
 
	gR13
!,{
	gPC
}

1119 
	gGW_NŸ_Alig√d4
:

1120 
MOV
 
R0
,
	gR0
,
	gLSL
 #17

1121 
ADD
 
	gªgCy˛es
,ªgCy˛es,#(
	gSLOW_ONE_CYCLE
*2)

1122 
ADD
 
	gR3
,
	gR0
,#0
x20000


1123 
MOV
 
	gR0
,R0,
	gLSR
 #17

1124 
MOV
 
	gR3
,R3,
	gLSR
 #17

1125 
LDR
 
	gR1
,[
ªgCPUv¨
,#BWRAM]

1126 
SUB
 
	gR0
,R0,#0
x6000


1127 
SUB
 
	gR3
,R3,#0
x6000


1128 
LDRB
 
	gR0
,[
R1
,
R0
]

1129 
LDRB
 
	gR3
,[
R1
,
R3
]

1130 
ORR
 
	gR0
,R0,
	gR3
,
	gLSL
 #8

1131 
LDMFD
 
	gR13
!,{
	gPC
}

1133 .
poﬁ


1137 
	gasmS9xSëByã
:

1142 
MOV
 
R2
,#0

1143 
STR
 
	gR2
,[
ªgCPUv¨
,#WaitAddress_ofs]

1147 
MOV
 
	gR3
,
	gR0
,
	gLSR
 #MEMMAP_SHIFT

1151 
BIC
 
	gR3
,R3,#0
xFF000


1153 
LDR
 
	gR2
,[
ªgCPUv¨
,#WriteMap_ofs]

1154 
LDR
 
	gR2
,[
R2
,
R3
,
LSL
 #2]

1155 
CMP
 
	gR2
,#MAP_LAST

1156 
BLO
 
SBS≥cül


1160 
MOV
 
	gR0
,R0,
	gLSL
 #16

1161 
ADD
 
	gR2
,R2,
	gR0
,
	gLSR
 #16

1162 
LDR
 
	gR0
,[
ªgCPUv¨
,#MemorySpeed_ofs]

1164 
STRB
 
	gR1
,[
R2
]

1166 
LDRB
 
	gR0
,[
R0
,
R3
]

1168 
ADD
 
	gªgCy˛es
,ªgCy˛es,
R0


1172 
LDMFD
 
	gR13
!,{
	gPC
}

1173 
	gSBS≥cül
:

1174 #ifde‡
__PALMOS__


1175 
LDR
 
R3
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

1176 
LDR
 
	gR2
,[
PC
,
R2
,
LSL
 #2]

1177 
ADD
 
	gPC
,
	gR2
,
	gR3


1179 
LDR
 
	gPC
,[
PC
,
R2
,
LSL
 #2]

1180 
MOV
 
	gR0
,R0

1182 .
	gSBPPU


1183 .
	gSBCPU


1184 .
	gSBDSP


1185 .
	gSBLSRAM


1186 .
	gSBHSRAM


1187 .
	gSBNONE


1188 .
	gSBDEBUG


1189 .
	gSBC4


1190 .
	gSBBWRAM


1191 .
	gSBNONE


1192 .
	gSBNONE


1193 .
SBNONE


1197 
	gSBPPU
:

1199 
LDRB
 
R2
,[
ªgCPUv¨
,#InDMA_ofs]

1200 
MOVS
 
	gR2
,
R2


1201 
ADDEQ
 
	gªgCy˛es
,regCycles,#ONE_CYCLE

1202 
MOV
 
	gR0
,R0,
	gLSL
 #16

1203 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1204 
MOV
 
	gR0
,R0,
	gLSR
 #16

1205 
PREPARE_C_CALL


1206 
MOV
 
	gR12
,
R0


1207 
MOV
 
	gR0
,
R1


1208 
MOV
 
	gR1
,
R12


1209 
BL
 
S9xSëPPU


1210 
RESTORE_C_CALL


1211 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1212 
LDMFD
 
	gR13
!,{
	gPC
}

1213 
	gSBCPU
:

1214 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#ONE_CYCLE

1215 
MOV
 
	gR0
,R0,
	gLSL
 #16

1216 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1217 
MOV
 
	gR0
,R0,
	gLSR
 #16

1218 
PREPARE_C_CALL


1219 
MOV
 
	gR12
,
R0


1220 
MOV
 
	gR0
,
R1


1221 
MOV
 
	gR1
,
R12


1222 
BL
 
S9xSëCPU


1223 
RESTORE_C_CALL


1224 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1225 
LDMFD
 
	gR13
!,{
	gPC
}

1226 
	gSBDSP
:

1227 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

1228 
MOV
 
	gR0
,R0,
	gLSL
 #16

1229 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1230 
MOV
 
	gR0
,R0,
	gLSR
 #16

1231 
PREPARE_C_CALL


1232 
MOV
 
	gR12
,
R0


1233 
MOV
 
	gR0
,
R1


1234 
MOV
 
	gR1
,
R12


1235 
BL
 
S9xSëDSP


1236 
RESTORE_C_CALL


1237 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1238 
LDMFD
 
	gR13
!,{
	gPC
}

1239 
	gSBLSRAM
:

1240 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

1241 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1242 
MOVS
 
	gR2
,
R2


1243 
LDMEQFD
 
	gR13
!,{
	gPC
}

1244 
LDR
 
	gR3
,[
ªgCPUv¨
,#SRAM]

1245 
AND
 
	gR0
,
	gR2
,
R0


1246 
STRB
 
	gR1
,[
R0
,
R3
]

1248 
MOV
 
	gR0
,#1

1249 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1250 
LDMFD
 
	gR13
!,{
	gPC
}

1251 
	gSB7SRM
:

1252 
SBHSRAM
:

1253 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

1255 
MOV
 
	gR3
,
	gR0
,
	gLSL
 #17

1256 
AND
 
	gR2
,
	gR0
,#0
xF0000


1257 
MOV
 
	gR3
,R3,
	gLSR
 #17

1258 
MOV
 
	gR2
,R2,
	gLSR
 #3

1259 
ADD
 
	gR0
,
	gR2
,
R3


1261 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1262 
MOVS
 
	gR2
,
R2


1263 
LDMEQFD
 
	gR13
!,{
	gPC
}

1265 
SUB
 
	gR0
,R0,#0
x6000


1266 
LDR
 
	gR3
,[
ªgCPUv¨
,#SRAM]

1267 
AND
 
	gR0
,
	gR2
,
R0


1268 
STRB
 
	gR1
,[
R0
,
R3
]

1270 
MOV
 
	gR0
,#1

1271 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1272 
LDMFD
 
	gR13
!,{
	gPC
}

1273 
	gSB7ROM
:

1274 
SB7RAM
:

1275 
SBNONE
:

1276 
SBDEBUG
:

1277 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

1278 
LDMFD
 
	gR13
!,{
	gPC
}

1279 
	gSBC4
:

1280 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

1281 
MOV
 
	gR0
,R0,
	gLSL
 #16

1282 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1283 
MOV
 
	gR0
,R0,
	gLSR
 #16

1284 
PREPARE_C_CALL


1285 
MOV
 
	gR12
,
R0


1286 
MOV
 
	gR0
,
R1


1287 
MOV
 
	gR1
,
R12


1288 
BL
 
S9xSëC4


1289 
RESTORE_C_CALL


1290 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1291 
LDMFD
 
	gR13
!,{
	gPC
}

1292 
	gSBBWRAM
:

1293 
MOV
 
R0
,
	gR0
,
	gLSL
 #17

1294 
ADD
 
	gªgCy˛es
,regCycles,#SLOW_ONE_CYCLE

1295 
MOV
 
	gR0
,R0,
	gLSR
 #17

1296 
LDR
 
	gR2
,[
ªgCPUv¨
,#BWRAM]

1297 
SUB
 
	gR0
,R0,#0
x6000


1298 
STRB
 
	gR1
,[
R0
,
R2
]

1300 
MOV
 
	gR0
,#1

1301 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1303 
LDMFD
 
	gR13
!,{
	gPC
}

1308 
	gasmS9xSëW‹d
:

1314 
MOV
 
R2
,
	gR0
,
	gLSL
 #19

1315 
ADDS
 
	gR2
,R2,#0
x80000


1317 
BNE
 
SW_NŸBound¨y


1319 
STMFD
 
	gR13
!,{
	gR0
,
	gR1
}

1320 
STMFD
 
	gR13
!,{
	gPC
}

1321 
B
 
asmS9xSëByã


1322 
MOV
 
	gR0
,
R0


1323 
LDMFD
 
	gR13
!,{
	gR0
,
	gR1
}

1324 
ADD
 
	gR0
,R0,#1

1325 
MOV
 
	gR1
,R1,
	gLSR
 #8

1326 
STMFD
 
	gR13
!,{
	gPC
}

1327 
B
 
asmS9xSëByã


1328 
MOV
 
	gR0
,
R0


1330 
LDMFD
 
	gR13
!,{
	gPC
}

1332 
	gSW_NŸBound¨y
:

1334 
MOV
 
R2
,#0

1335 
STR
 
	gR2
,[
ªgCPUv¨
,#WaitAddress_ofs]

1338 
MOV
 
	gR3
,
	gR0
,
	gLSR
 #MEMMAP_SHIFT

1342 
BIC
 
	gR3
,R3,#0
xFF000


1344 
LDR
 
	gR2
,[
ªgCPUv¨
,#WriteMap_ofs]

1345 
LDR
 
	gR2
,[
R2
,
R3
,
LSL
 #2]

1346 
CMP
 
	gR2
,#MAP_LAST

1347 
BLO
 
SWS≥cül


1352 
TST
 
	gR0
,#1

1353 
BNE
 
SW_nŸ_Æig√d1


1355 
MOV
 
	gR0
,R0,
	gLSL
 #16

1356 
ADD
 
	gR2
,R2,
	gR0
,
	gLSR
 #16

1357 
LDR
 
	gR0
,[
ªgCPUv¨
,#MemorySpeed_ofs]

1359 
STRH
 
	gR1
,[
R2
]

1361 
LDRB
 
	gR0
,[
R0
,
R3
]

1363 
ADD
 
	gªgCy˛es
,ªgCy˛es,
	gR0
, 
	gLSL
 #1

1367 
LDMFD
 
	gR13
!,{
	gPC
}

1369 
	gSW_nŸ_Æig√d1
:

1371 
MOV
 
R0
,
	gR0
,
	gLSL
 #16

1373 
STRB
 
	gR1
,[
R2
,
R0
,
LSR
 #16]

1374 
ADD
 
	gR0
,R0,#0
x10000


1375 
MOV
 
	gR1
,R1,
	gLSR
 #8

1377 
STRB
 
	gR1
,[
R2
,
R0
,
LSR
 #16]

1379 
LDR
 
	gR0
,[
ªgCPUv¨
,#MemorySpeed_ofs]

1380 
LDRB
 
	gR0
,[
R0
,
R3
]

1382 
ADD
 
	gªgCy˛es
,ªgCy˛es,
	gR0
,
	gLSL
 #1

1386 
LDMFD
 
	gR13
!,{
	gPC
}

1387 
	gSWS≥cül
:

1388 #ifde‡
__PALMOS__


1389 
LDR
 
R3
,[
ªgCPUv¨
,#PALMOS_R10_ofs]

1390 
LDR
 
	gR2
,[
PC
,
R2
,
LSL
 #2]

1391 
ADD
 
	gPC
,
	gR2
,
	gR3


1393 
LDR
 
	gPC
,[
PC
,
R2
,
LSL
 #2]

1394 
MOV
 
	gR0
,R0

1396 .
	gSWPPU


1397 .
	gSWCPU


1398 .
	gSWDSP


1399 .
	gSWLSRAM


1400 .
	gSWHSRAM


1401 .
	gSWNONE


1402 .
	gSWDEBUG


1403 .
	gSWC4


1404 .
	gSWBWRAM


1405 .
	gSWNONE


1406 .
	gSWNONE


1407 .
SWNONE


1411 
	gSWPPU
:

1413 
LDRB
 
R2
,[
ªgCPUv¨
,#InDMA_ofs]

1414 
MOVS
 
	gR2
,
R2


1415 
ADDEQ
 
	gªgCy˛es
,ªgCy˛es,#(
	gONE_CYCLE
*2)

1416 
MOV
 
	gR0
,R0,
	gLSL
 #16

1417 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1418 
MOV
 
	gR0
,R0,
	gLSR
 #16

1419 
MOV
 
	gR2
,
R1


1420 
MOV
 
	gR1
,
R0


1421 
MOV
 
	gR0
,
R2


1422 
PREPARE_C_CALL_R0R1


1423 
BL
 
S9xSëPPU


1424 
LDMFD
 
	gR13
!,{
	gR0
,
	gR1
}

1425 
ADD
 
	gR1
,R1,#1

1426 
MOV
 
	gR0
,R0,
	gLSR
 #8

1427 
BIC
 
	gR1
,R1,#0
x10000


1428 
BL
 
S9xSëPPU


1429 
RESTORE_C_CALL


1430 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1431 
LDMFD
 
	gR13
!,{
	gPC
}

1432 
	gSWCPU
:

1433 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gONE_CYCLE
*2)

1434 
MOV
 
	gR0
,R0,
	gLSL
 #16

1435 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1436 
MOV
 
	gR0
,R0,
	gLSR
 #16

1437 
MOV
 
	gR2
,
R1


1438 
MOV
 
	gR1
,
R0


1439 
MOV
 
	gR0
,
R2


1440 
PREPARE_C_CALL_R0R1


1441 
BL
 
S9xSëCPU


1442 
LDMFD
 
	gR13
!,{
	gR0
,
	gR1
}

1443 
ADD
 
	gR1
,R1,#1

1444 
MOV
 
	gR0
,R0,
	gLSR
 #8

1445 
BIC
 
	gR1
,R1,#0
x10000


1446 
BL
 
S9xSëCPU


1447 
RESTORE_C_CALL


1448 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1449 
LDMFD
 
	gR13
!,{
	gPC
}

1450 
	gSWDSP
:

1451 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#SLOW_ONE_CYCLE

1452 
MOV
 
	gR0
,R0,
	gLSL
 #16

1453 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1454 
MOV
 
	gR0
,R0,
	gLSR
 #16

1455 
MOV
 
	gR2
,
R1


1456 
MOV
 
	gR1
,
R0


1457 
MOV
 
	gR0
,
R2


1458 
PREPARE_C_CALL_R0R1


1459 
BL
 
S9xSëDSP


1460 
LDMFD
 
	gR13
!,{
	gR0
,
	gR1
}

1461 
ADD
 
	gR1
,R1,#1

1462 
MOV
 
	gR0
,R0,
	gLSR
 #8

1463 
BIC
 
	gR1
,R1,#0
x10000


1464 
BL
 
S9xSëDSP


1465 
RESTORE_C_CALL


1466 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1467 
LDMFD
 
	gR13
!,{
	gPC
}

1468 
	gSWLSRAM
:

1469 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1470 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1471 
MOVS
 
	gR2
,
R2


1472 
LDMEQFD
 
	gR13
!,{
	gPC
}

1474 
AND
 
	gR3
,
	gR2
,
R0


1475 
TST
 
	gR0
,#1

1476 
BNE
 
SW_nŸ_Æig√d2


1478 
LDR
 
	gR0
,[
ªgCPUv¨
,#SRAM]

1479 
STRH
 
	gR1
,[
R0
,
R3
]

1480 
MOV
 
	gR0
,#1

1481 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1482 
LDMFD
 
	gR13
!,{
	gPC
}

1483 
	gSW_nŸ_Æig√d2
:

1485 
ADD
 
R0
,
	gR0
,#1

1486 
AND
 
	gR2
,R2,
R0


1487 
LDR
 
	gR0
,[
ªgCPUv¨
,#SRAM]

1488 
STRB
 
	gR1
,[
R0
,
R3
]

1489 
MOV
 
	gR1
,R1,
	gLSR
 #8

1490 
STRB
 
	gR1
,[
R0
,
R2
]

1491 
MOV
 
	gR0
,#1

1492 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1493 
LDMFD
 
	gR13
!,{
	gPC
}

1494 
	gSW7SRM
:

1495 
SWHSRAM
:

1496 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1498 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1499 
MOVS
 
	gR2
,
R2


1500 
LDMEQFD
 
	gR13
!,{
	gPC
}

1502 
TST
 
	gR0
,#1

1503 
BNE
 
SW_nŸ_Æig√d3


1505 
MOV
 
	gR3
,
	gR0
,
	gLSL
 #17

1506 
AND
 
	gR2
,
	gR0
,#0
xF0000


1507 
MOV
 
	gR3
,R3,
	gLSR
 #17

1508 
MOV
 
	gR2
,R2,
	gLSR
 #3

1509 
ADD
 
	gR0
,
	gR2
,
R3


1510 
SUB
 
	gR0
,R0,#0
x6000


1511 
LDRH
 
	gR2
,[
ªgCPUv¨
,#SRAMMask]

1512 
LDR
 
	gR3
,[
ªgCPUv¨
,#SRAM]

1513 
AND
 
	gR0
,
	gR2
,
R0


1514 
STRH
 
	gR1
,[
R0
,
R3
]

1515 
MOV
 
	gR0
,#1

1516 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1517 
LDMFD
 
	gR13
!,{
	gPC
}

1518 
	gSW_nŸ_Æig√d3
:

1519 
MOV
 
R3
,
	gR0
,
	gLSL
 #17

1520 
AND
 
	gR2
,
	gR0
,#0
xF0000


1521 
MOV
 
	gR3
,R3,
	gLSR
 #17

1522 
MOV
 
	gR2
,R2,
	gLSR
 #3

1523 
ADD
 
	gR2
,R2,
R3


1524 
SUB
 
	gR2
,R2,#0
x6000


1526 
ADD
 
	gR0
,R0,#1

1527 
MOV
 
	gR3
,
	gR0
,
	gLSL
 #17

1528 
AND
 
	gR0
,R0,#0
xF0000


1529 
MOV
 
	gR3
,R3,
	gLSR
 #17

1530 
MOV
 
	gR0
,R0,
	gLSR
 #3

1531 
ADD
 
	gR0
,R0,
R3


1532 
LDRH
 
	gR3
,[
ªgCPUv¨
,#SRAMMask]

1533 
SUB
 
	gR0
,R0,#0
x6000


1534 
AND
 
	gR2
,
	gR3
,
R2


1535 
AND
 
	gR0
,
	gR3
,
R0


1537 
LDR
 
	gR3
,[
ªgCPUv¨
,#SRAM]

1538 
STRB
 
	gR1
,[
R2
,
R3
]

1539 
MOV
 
	gR1
,R1,
	gLSR
 #8

1540 
STRB
 
	gR1
,[
R0
,
R3
]

1542 
MOV
 
	gR0
,#1

1543 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1544 
LDMFD
 
	gR13
!,{
	gPC
}

1545 
	gSW7ROM
:

1546 
SW7RAM
:

1547 
SWNONE
:

1548 
SWDEBUG
:

1549 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1550 
LDMFD
 
	gR13
!,{
	gPC
}

1551 
	gSWC4
:

1552 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1553 
MOV
 
	gR0
,R0,
	gLSL
 #16

1554 
STR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1555 
MOV
 
	gR0
,R0,
	gLSR
 #16

1556 
MOV
 
	gR2
,
R1


1557 
MOV
 
	gR1
,
R0


1558 
MOV
 
	gR0
,
R2


1559 
PREPARE_C_CALL_R0R1


1560 
BL
 
S9xSëC4


1561 
LDMFD
 
	gR13
!,{
	gR0
,
	gR1
}

1562 
ADD
 
	gR1
,R1,#1

1563 
MOV
 
	gR0
,R0,
	gLSR
 #8

1564 
BIC
 
	gR1
,R1,#0
x10000


1565 
BL
 
S9xSëC4


1566 
RESTORE_C_CALL


1567 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#Cycles_ofs]

1568 
LDMFD
 
	gR13
!,{
	gPC
}

1569 
	gSWBWRAM
:

1570 
ADD
 
ªgCy˛es
,
	gªgCy˛es
,#(
	gSLOW_ONE_CYCLE
*2)

1571 
TST
 
	gR0
,#1

1572 
BNE
 
SW_nŸ_Æig√d4


1574 
MOV
 
	gR0
,R0,
	gLSL
 #17

1575 
LDR
 
	gR2
,[
ªgCPUv¨
,#BWRAM]

1576 
MOV
 
	gR0
,R0,
	gLSR
 #17

1577 
SUB
 
	gR0
,R0,#0
x6000


1578 
MOV
 
	gR3
,#1

1579 
STRH
 
	gR1
,[
R0
,
R2
]

1580 
STRB
 
	gR3
,[
ªgCPUv¨
,#SRAMModified_ofs]

1581 
LDMFD
 
	gR13
!,{
	gPC
}

1582 
	gSW_nŸ_Æig√d4
:

1583 
MOV
 
R0
,
	gR0
,
	gLSL
 #17

1584 
ADD
 
	gR3
,
	gR0
,#0
x20000


1585 
MOV
 
	gR0
,R0,
	gLSR
 #17

1586 
MOV
 
	gR3
,R3,
	gLSR
 #17

1587 
LDR
 
	gR2
,[
ªgCPUv¨
,#BWRAM]

1588 
SUB
 
	gR0
,R0,#0
x6000


1589 
SUB
 
	gR3
,R3,#0
x6000


1590 
STRB
 
	gR1
,[
R2
,
R0
]

1591 
MOV
 
	gR1
,R1,
	gLSR
 #8

1592 
STRB
 
	gR1
,[
R2
,
R3
]

1593 
MOV
 
	gR0
,#1

1594 
STRB
 
	gR0
,[
ªgCPUv¨
,#SRAMModified_ofs]

1595 
LDMFD
 
	gR13
!,{
	gPC
}

1598 .
	gpoﬁ


	@os9x_65c816_mac_op.h

5 .
ma¸o
 
UPDATE_C


7 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

9 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

10 .
	gídm


11 .
ma¸o
 
UPDATE_Z


13 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

15 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

16 .
	gídm


17 .
ma¸o
 
UPDATE_ZN


19 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

21 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

23 
BICPL
 
	gr°©us
,Ñstatus, #MASK_NEG

25 
ORRMI
 
	gr°©us
,Ñstatus, #MASK_NEG

26 .
	gídm


35 .
ma¸o
 
ADC8


36 
TST
 
	gr°©us
, #MASK_DECIMAL

37 
	gBEQ
 1111f

38 
S9xGëByã


41 
STMFD
 
	gR13
!,{
	grs¸©ch
}

42 
MOV
 
	grs¸©ch4
,#0
x0F000000


44 
AND
 
	grs¸©ch2
, 
	grs¸©ch
, 
rs¸©ch4


46 
AND
 
	grs¸©ch
, 
	grs¸©ch4
,Ñs¸©ch, 
	gLSR
 #4

48 
AND
 
	grs¸©ch3
, 
	grs¸©ch4
, 
	gªgA
, 
	gLSR
 #4

50 
AND
 
	grs¸©ch4
,
	gªgA
,
rs¸©ch4


52 
TST
 
	gr°©us
, #MASK_CARRY

53 
ADDNE
 
	grs¸©ch2
,Ñs¸©ch2, #0
x01000000


54 
ADD
 
	grs¸©ch2
,rs¸©ch2,
rs¸©ch4


56 
CMP
 
	grs¸©ch2
, #0
x09000000


58 
SUBGT
 
	grs¸©ch2
,Ñs¸©ch2, #0
x0A000000


60 
ADDGT
 
	grs¸©ch3
,Ñs¸©ch3, #0
x01000000


62 
ADD
 
	grs¸©ch3
,Ñs¸©ch3, 
rs¸©ch


64 
CMP
 
	grs¸©ch3
, #0
x09000000


66 
SUBGT
 
	grs¸©ch3
,Ñs¸©ch3, #0
x0A000000


68 
ORRGT
 
	gr°©us
,Ñstatus, #MASK_CARRY

70 
BICLE
 
	gr°©us
,Ñstatus, #MASK_CARRY

75 
ORR
 
	grs¸©ch2
,Ñs¸©ch2, 
	grs¸©ch3
, 
	gLSL
 #4

76 
LDMFD
 
	gR13
!,{
	grs¸©ch
}

78 
AND
 
	grs¸©ch
,rs¸©ch,#0
x80000000


80 
EORS
 
	grs¸©ch3
, 
	gªgA
, 
rs¸©ch


81 
BICNE
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

82 
	gBNE
 1112f

84 
EORS
 
	grs¸©ch3
, 
	grs¸©ch2
, 
rs¸©ch


86 
TSTNE
 
	grs¸©ch3
,#0
x80000000


87 
BICEQ
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

88 
ORRNE
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

90 
MOVS
 
ªgA
, 
rs¸©ch2


91 
UPDATE_ZN


92 
	gB
 1113f

94 
S9xGëByãLow


95 
MOVS
 
rs¸©ch2
, 
	gr°©us
, 
	gLSR
 #MASK_SHIFTER_CARRY

96 
SUBCS
 
	grs¸©ch
,Ñs¸©ch, #0
x100


97 
ADCS
 
	gªgA
,ÑegA, 
	grs¸©ch
, 
	gROR
 #8

99 
ORRVS
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

100 
BICVC
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

102 
UPDATE_C


104 
ANDS
 
	gªgA
,ÑegA, #0
xFF000000


106 
	gUPDATE_ZN


108 .
ídm


110 .
ma¸o
 
ADC16


111 
TST
 
r°©us
, #MASK_DECIMAL

112 
	gBEQ
 1111f

113 
S9xGëW‹d


116 
LDR
 
	grs¸©ch4
, = 0x0F0F0000

119 
AND
 
rs¸©ch2
, 
	grs¸©ch4
, 
rs¸©ch


120 
AND
 
	grs¸©ch3
, 
	grs¸©ch4
, 
	grs¸©ch
, 
	gLSR
 #4

122 
ORR
 
	grs¸©ch2
, 
	grs¸©ch3
,Ñs¸©ch2, 
	gLSR
 #16

126 
AND
 
	grs¸©ch3
, 
	grs¸©ch4
, 
ªgA


127 
AND
 
	grs¸©ch4
,Ñs¸©ch4, 
	gªgA
, 
	gLSR
 #4

128 
ORR
 
	grs¸©ch3
, 
	grs¸©ch4
,Ñs¸©ch3, 
	gLSR
 #16

129 
ADD
 
	grs¸©ch2
, 
	grs¸©ch3
, 
rs¸©ch2


130 
LDR
 
	grs¸©ch4
, = 0x0F0F0000

132 
TST
 
r°©us
, #MASK_CARRY

133 
ADDNE
 
	grs¸©ch2
,Ñs¸©ch2, #0
x1


136 
AND
 
	grs¸©ch3
, 
	grs¸©ch2
, #0
x0000001F


137 
CMP
 
	grs¸©ch3
, #0
x00000009


138 
ADDHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00010000


139 
SUBHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x0000000A


141 
AND
 
	grs¸©ch3
, 
	grs¸©ch2
, #0
x001F0000


142 
CMP
 
	grs¸©ch3
, #0
x00090000


143 
ADDHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00000100


144 
SUBHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x000A0000


146 
AND
 
	grs¸©ch3
, 
	grs¸©ch2
, #0
x00001F00


147 
CMP
 
	grs¸©ch3
, #0
x00000900


148 
SUBHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00000A00


149 
ADDHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x01000000


151 
AND
 
	grs¸©ch3
, 
	grs¸©ch2
, #0
x1F000000


152 
CMP
 
	grs¸©ch3
, #0
x09000000


153 
SUBHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x0A000000


155 
ORRHI
 
	gr°©us
,Ñstatus, #MASK_CARRY

157 
BICLS
 
	gr°©us
,Ñstatus, #MASK_CARRY

161 
AND
 
	grs¸©ch3
, 
	grs¸©ch4
, 
rs¸©ch2


163 
AND
 
	grs¸©ch2
, 
	grs¸©ch4
,Ñs¸©ch2,
	gLSL
 #16

165 
ORR
 
	grs¸©ch2
,Ñs¸©ch2,
	grs¸©ch3
,
	gLSL
 #4

167 
AND
 
	grs¸©ch
,rs¸©ch,#0
x80000000


169 
EORS
 
	grs¸©ch3
, 
	gªgA
, 
rs¸©ch


170 
BICNE
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

171 
	gBNE
 1112f

173 
EORS
 
	grs¸©ch3
, 
	grs¸©ch2
, 
rs¸©ch


174 
TSTNE
 
	grs¸©ch3
,#0
x80000000


175 
BICEQ
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

176 
ORRNE
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

178 
MOVS
 
ªgA
, 
rs¸©ch2


179 
UPDATE_ZN


180 
	gB
 1113f

182 
S9xGëW‹dLow


183 
MOVS
 
rs¸©ch2
, 
	gr°©us
, 
	gLSR
 #MASK_SHIFTER_CARRY

184 
SUBCS
 
	grs¸©ch
,Ñs¸©ch, #0
x10000


185 
ADCS
 
	gªgA
,ÑegA,
	grs¸©ch
, 
	gROR
 #16

187 
ORRVS
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

188 
BICVC
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

189 
MOV
 
	gªgA
,ÑegA, 
	gLSR
 #16

191 
UPDATE_C


193 
MOVS
 
	gªgA
,ÑegA, 
	gLSL
 #16

195 
	gUPDATE_ZN


197 .
ídm


200 .
ma¸o
 
AND16


201 
S9xGëW‹d


202 
ANDS
 
ªgA
, 
	gªgA
, 
rs¸©ch


203 
	gUPDATE_ZN


204 .
	gídm


205 .
ma¸o
 
AND8


206 
S9xGëByã


207 
ANDS
 
	gªgA
,ÑegA, 
rs¸©ch


208 
	gUPDATE_ZN


209 .
	gídm


210 .
ma¸o
 
A_ASL8


212 
MOVS
 
	gªgA
,ÑegA, 
	gLSL
 #1

213 
UPDATE_C


214 
UPDATE_ZN


215 
	gADD1CYCLE


216 .
	gídm


217 .
ma¸o
 
A_ASL16


219 
MOVS
 
	gªgA
,ÑegA, 
	gLSL
 #1

220 
UPDATE_C


221 
UPDATE_ZN


222 
	gADD1CYCLE


223 .
	gídm


224 .
ma¸o
 
ASL16


225 
S9xGëW‹dRegNS
 
rs¸©ch2


226 
MOVS
 
	grs¸©ch2
,Ñs¸©ch2, 
	gLSL
 #1

227 
UPDATE_C


228 
UPDATE_ZN


229 
S9xSëW‹d
 
rs¸©ch2


230 
	gADD1CYCLE


231 .
	gídm


232 .
ma¸o
 
ASL8


233 
S9xGëByãRegNS
 
rs¸©ch2


234 
MOVS
 
	grs¸©ch2
,Ñs¸©ch2, 
	gLSL
 #1

235 
UPDATE_C


236 
UPDATE_ZN


237 
S9xSëByã
 
rs¸©ch2


238 
	gADD1CYCLE


239 .
	gídm


240 .
ma¸o
 
BIT8


241 
S9xGëByã


242 
MOVS
 
	grs¸©ch2
, 
	grs¸©ch
, 
	gLSL
 #1

246 
BICCC
 
	gr°©us
,Ñstatus, #MASK_NEG

247 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_NEG

249 
BICPL
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

250 
ORRMI
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

254 
ANDS
 
	grs¸©ch2
, 
	gªgA
, 
rs¸©ch


255 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

256 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

257 .
	gídm


259 .
ma¸o
 
BIT16


260 
S9xGëW‹d


261 
MOVS
 
	grs¸©ch2
, 
	grs¸©ch
, 
	gLSL
 #1

265 
BICCC
 
	gr°©us
,Ñstatus, #MASK_NEG

266 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_NEG

268 
BICPL
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

269 
ORRMI
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

272 
ANDS
 
	grs¸©ch2
, 
	gªgA
, 
rs¸©ch


274 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

276 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

277 .
	gídm


278 .
ma¸o
 
CMP8


279 
S9xGëByã


280 
SUBS
 
	grs¸©ch2
,
	gªgA
,
rs¸©ch


281 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

282 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

283 
	gUPDATE_ZN


285 .
	gídm


286 .
ma¸o
 
CMP16


287 
S9xGëW‹d


288 
SUBS
 
	grs¸©ch2
,
	gªgA
,
rs¸©ch


289 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

290 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

291 
	gUPDATE_ZN


293 .
	gídm


294 .
ma¸o
 
CMX16


295 
S9xGëW‹d


296 
SUBS
 
	grs¸©ch2
,
	gªgX
,
rs¸©ch


297 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

298 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

299 
	gUPDATE_ZN


300 .
	gídm


301 .
ma¸o
 
CMX8


302 
S9xGëByã


303 
SUBS
 
	grs¸©ch2
,
	gªgX
,
rs¸©ch


304 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

305 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

306 
	gUPDATE_ZN


307 .
	gídm


308 .
ma¸o
 
CMY16


309 
S9xGëW‹d


310 
SUBS
 
	grs¸©ch2
,
	gªgY
,
rs¸©ch


311 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

312 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

313 
	gUPDATE_ZN


314 .
	gídm


315 .
ma¸o
 
CMY8


316 
S9xGëByã


317 
SUBS
 
	grs¸©ch2
,
	gªgY
,
rs¸©ch


318 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

319 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

320 
	gUPDATE_ZN


321 .
	gídm


322 .
ma¸o
 
A_DEC8


323 
MOV
 
	grs¸©ch
,#0

324 
SUBS
 
	gªgA
,ÑegA, #0
x01000000


325 
STR
 
	grs¸©ch
,[
ªgCPUv¨
,#WaitAddress_ofs]

326 
UPDATE_ZN


327 
	gADD1CYCLE


328 .
	gídm


329 .
ma¸o
 
A_DEC16


330 
MOV
 
	grs¸©ch
,#0

331 
SUBS
 
	gªgA
,ÑegA, #0
x00010000


332 
STR
 
	grs¸©ch
,[
ªgCPUv¨
,#WaitAddress_ofs]

333 
UPDATE_ZN


334 
	gADD1CYCLE


335 .
	gídm


336 .
ma¸o
 
DEC16


337 
S9xGëW‹dRegNS
 
rs¸©ch2


338 
MOV
 
	grs¸©ch3
,#0

339 
SUBS
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00010000


340 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

341 
UPDATE_ZN


342 
S9xSëW‹d
 
rs¸©ch2


343 
	gADD1CYCLE


344 .
	gídm


345 .
ma¸o
 
DEC8


346 
S9xGëByãRegNS
 
rs¸©ch2


347 
MOV
 
	grs¸©ch3
,#0

348 
SUBS
 
	grs¸©ch2
,Ñs¸©ch2, #0
x01000000


349 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

350 
UPDATE_ZN


351 
S9xSëByã
 
rs¸©ch2


352 
	gADD1CYCLE


353 .
	gídm


354 .
ma¸o
 
EOR16


355 
S9xGëW‹d


356 
EORS
 
	gªgA
,ÑegA, 
rs¸©ch


357 
	gUPDATE_ZN


358 .
	gídm


359 .
ma¸o
 
EOR8


360 
S9xGëByã


361 
EORS
 
	gªgA
,ÑegA, 
rs¸©ch


362 
	gUPDATE_ZN


363 .
	gídm


364 .
ma¸o
 
A_INC8


365 
MOV
 
	grs¸©ch3
,#0

366 
ADDS
 
	gªgA
,ÑegA, #0
x01000000


367 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

368 
UPDATE_ZN


369 
	gADD1CYCLE


370 .
	gídm


371 .
ma¸o
 
A_INC16


372 
MOV
 
	grs¸©ch3
,#0

373 
ADDS
 
	gªgA
,ÑegA, #0
x00010000


374 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

375 
UPDATE_ZN


376 
	gADD1CYCLE


377 .
	gídm


378 .
ma¸o
 
INC16


379 
S9xGëW‹dRegNS
 
rs¸©ch2


380 
MOV
 
	grs¸©ch3
,#0

381 
ADDS
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00010000


382 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

383 
UPDATE_ZN


384 
S9xSëW‹d
 
rs¸©ch2


385 
	gADD1CYCLE


386 .
	gídm


387 .
ma¸o
 
INC8


388 
S9xGëByãRegNS
 
rs¸©ch2


389 
MOV
 
	grs¸©ch3
,#0

390 
ADDS
 
	grs¸©ch2
,Ñs¸©ch2, #0
x01000000


391 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

392 
UPDATE_ZN


393 
S9xSëByã
 
rs¸©ch2


394 
	gADD1CYCLE


395 .
	gídm


396 .
ma¸o
 
LDA16


397 
S9xGëW‹dRegSètus
 
ªgA


398 
	gUPDATE_ZN


399 .
	gídm


400 .
ma¸o
 
LDA8


401 
S9xGëByãRegSètus
 
ªgA


402 
	gUPDATE_ZN


403 .
	gídm


404 .
ma¸o
 
LDX16


405 
S9xGëW‹dRegSètus
 
ªgX


406 
	gUPDATE_ZN


407 .
	gídm


408 .
ma¸o
 
LDX8


409 
S9xGëByãRegSètus
 
ªgX


410 
	gUPDATE_ZN


411 .
	gídm


412 .
ma¸o
 
LDY16


413 
S9xGëW‹dRegSètus
 
ªgY


414 
	gUPDATE_ZN


415 .
	gídm


416 .
ma¸o
 
LDY8


417 
S9xGëByãRegSètus
 
ªgY


418 
	gUPDATE_ZN


419 .
	gídm


420 .
ma¸o
 
A_LSR16


421 
BIC
 
	gr°©us
,Ñstatus, #MASK_NEG

422 
MOVS
 
	gªgA
,ÑegA, 
	gLSR
 #17

424 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

425 
MOV
 
	gªgA
,ÑegA, 
	gLSL
 #16

426 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

429 
UPDATE_C


430 
	gADD1CYCLE


431 .
	gídm


432 .
ma¸o
 
A_LSR8


433 
BIC
 
	gr°©us
,Ñstatus, #MASK_NEG

434 
MOVS
 
	gªgA
,ÑegA, 
	gLSR
 #25

436 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

437 
MOV
 
	gªgA
,ÑegA, 
	gLSL
 #24

438 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

441 
UPDATE_C


442 
	gADD1CYCLE


443 .
	gídm


444 .
ma¸o
 
LSR16


445 
S9xGëW‹dRegNS
 
rs¸©ch2


447 
BIC
 
	gr°©us
,Ñstatus, #MASK_NEG

448 
MOVS
 
	grs¸©ch2
,Ñs¸©ch2, 
	gLSR
 #17

450 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

451 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

453 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

454 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

455 
S9xSëW‹dLow
 
rs¸©ch2


456 
	gADD1CYCLE


457 .
	gídm


458 .
ma¸o
 
LSR8


459 
S9xGëByãRegNS
 
rs¸©ch2


461 
BIC
 
	gr°©us
,Ñstatus, #MASK_NEG

462 
MOVS
 
	grs¸©ch2
,Ñs¸©ch2, 
	gLSR
 #25

464 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

465 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

467 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

468 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

469 
S9xSëByãLow
 
rs¸©ch2


470 
	gADD1CYCLE


471 .
	gídm


472 .
ma¸o
 
ORA8


473 
S9xGëByã


474 
ORRS
 
	gªgA
,ÑegA, 
rs¸©ch


475 
	gUPDATE_ZN


476 .
	gídm


477 .
ma¸o
 
ORA16


478 
S9xGëW‹d


479 
ORRS
 
	gªgA
,ÑegA, 
rs¸©ch


480 
	gUPDATE_ZN


481 .
	gídm


482 .
ma¸o
 
A_ROL16


483 
TST
 
	gr°©us
, #MASK_CARRY

484 
ORRNE
 
	gªgA
,ÑegA, #0
x00008000


485 
MOVS
 
	gªgA
,ÑegA, 
	gLSL
 #1

486 
UPDATE_ZN


487 
UPDATE_C


488 
	gADD1CYCLE


489 .
	gídm


490 .
ma¸o
 
A_ROL8


491 
TST
 
	gr°©us
, #MASK_CARRY

492 
ORRNE
 
	gªgA
,ÑegA, #0
x00800000


493 
MOVS
 
	gªgA
,ÑegA, 
	gLSL
 #1

494 
UPDATE_ZN


495 
UPDATE_C


496 
	gADD1CYCLE


497 .
	gídm


498 .
ma¸o
 
ROL16


499 
S9xGëW‹dRegNS
 
rs¸©ch2


500 
TST
 
	gr°©us
, #MASK_CARRY

501 
ORRNE
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00008000


502 
MOVS
 
	grs¸©ch2
,Ñs¸©ch2, 
	gLSL
 #1

503 
UPDATE_ZN


504 
UPDATE_C


505 
S9xSëW‹d
 
rs¸©ch2


506 
	gADD1CYCLE


507 .
	gídm


508 .
ma¸o
 
ROL8


509 
S9xGëByãRegNS
 
rs¸©ch2


510 
TST
 
	gr°©us
, #MASK_CARRY

511 
ORRNE
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00800000


512 
MOVS
 
	grs¸©ch2
,Ñs¸©ch2, 
	gLSL
 #1

513 
UPDATE_ZN


514 
UPDATE_C


515 
S9xSëByã
 
rs¸©ch2


516 
	gADD1CYCLE


517 .
	gídm


518 .
ma¸o
 
A_ROR16


519 
MOV
 
	gªgA
,ªgA, 
	gLSR
 #16

520 
TST
 
	gr°©us
, #MASK_CARRY

521 
ORRNE
 
	gªgA
,ÑegA, #0
x00010000


522 
ORRNE
 
	gr°©us
,rstatus,#MASK_NEG

523 
BICEQ
 
	gr°©us
,rstatus,#MASK_NEG

524 
MOVS
 
	gªgA
,ªgA,
	gLSR
 #1

525 
UPDATE_C


526 
UPDATE_Z


527 
MOV
 
	gªgA
,ªgA, 
	gLSL
 #16

528 
	gADD1CYCLE


529 .
	gídm


530 .
ma¸o
 
A_ROR8


531 
MOV
 
	gªgA
,ªgA, 
	gLSR
 #24

532 
TST
 
	gr°©us
, #MASK_CARRY

533 
ORRNE
 
	gªgA
,ÑegA, #0
x00000100


534 
ORRNE
 
	gr°©us
,rstatus,#MASK_NEG

535 
BICEQ
 
	gr°©us
,rstatus,#MASK_NEG

536 
MOVS
 
	gªgA
,ªgA,
	gLSR
 #1

537 
UPDATE_C


538 
UPDATE_Z


539 
MOV
 
	gªgA
,ªgA, 
	gLSL
 #24

540 
	gADD1CYCLE


541 .
	gídm


542 .
ma¸o
 
ROR16


543 
S9xGëW‹dLowRegNS
 
rs¸©ch2


544 
TST
 
	gr°©us
, #MASK_CARRY

545 
ORRNE
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00010000


546 
ORRNE
 
	gr°©us
,rstatus,#MASK_NEG

547 
BICEQ
 
	gr°©us
,rstatus,#MASK_NEG

548 
MOVS
 
	grs¸©ch2
,rs¸©ch2,
	gLSR
 #1

549 
UPDATE_C


550 
UPDATE_Z


551 
S9xSëW‹dLow
 
rs¸©ch2


552 
	gADD1CYCLE


554 .
	gídm


555 .
ma¸o
 
ROR8


556 
S9xGëByãLowRegNS
 
rs¸©ch2


557 
TST
 
	gr°©us
, #MASK_CARRY

558 
ORRNE
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00000100


559 
ORRNE
 
	gr°©us
,rstatus,#MASK_NEG

560 
BICEQ
 
	gr°©us
,rstatus,#MASK_NEG

561 
MOVS
 
	grs¸©ch2
,rs¸©ch2,
	gLSR
 #1

562 
UPDATE_C


563 
UPDATE_Z


564 
S9xSëByãLow
 
rs¸©ch2


565 
	gADD1CYCLE


566 .
	gídm


568 .
ma¸o
 
SBC16


569 
TST
 
	gr°©us
, #MASK_DECIMAL

570 
	gBEQ
 1111f

572 
S9xGëW‹d


574 
STMFD
 
	gR13
!,{
	grs¸©ch5
,
	grs¸©ch6
,
	grs¸©ch7
,
	grs¸©ch8
,
	grs¸©ch9
}

575 
MOV
 
	grs¸©ch9
,#0
x000F0000


580 
AND
 
	grs¸©ch2
, 
	grs¸©ch9
, 
rs¸©ch


581 
TST
 
	gr°©us
, #MASK_CARRY

582 
ADDEQ
 
	grs¸©ch2
,Ñs¸©ch2, #0
x00010000


583 
AND
 
	grs¸©ch3
, 
	grs¸©ch9
, 
	grs¸©ch
, 
	gLSR
 #4

584 
AND
 
	grs¸©ch4
, 
	grs¸©ch9
, 
	grs¸©ch
, 
	gLSR
 #8

585 
AND
 
	grs¸©ch5
, 
	grs¸©ch9
, 
	grs¸©ch
, 
	gLSR
 #12

591 
AND
 
	grs¸©ch6
, 
	grs¸©ch9
, 
ªgA


592 
AND
 
	grs¸©ch7
, 
	grs¸©ch9
, 
	gªgA
, 
	gLSR
 #4

593 
AND
 
	grs¸©ch8
, 
	grs¸©ch9
, 
	gªgA
, 
	gLSR
 #8

594 
AND
 
	grs¸©ch9
,Ñs¸©ch9, 
	gªgA
, 
	gLSR
 #12

596 
SUB
 
	grs¸©ch2
,
	grs¸©ch6
,
rs¸©ch2


597 
CMP
 
	grs¸©ch2
, #0
x00090000


598 
ADDHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x000A0000


599 
ADDHI
 
	grs¸©ch3
,Ñs¸©ch3, #0
x00010000


600 
SUB
 
	grs¸©ch3
,
	grs¸©ch7
,
rs¸©ch3


601 
CMP
 
	grs¸©ch3
, #0
x00090000


602 
ADDHI
 
	grs¸©ch3
,Ñs¸©ch3, #0
x000A0000


603 
ADDHI
 
	grs¸©ch4
,Ñs¸©ch4, #0
x00010000


604 
SUB
 
	grs¸©ch4
,
	grs¸©ch8
,
rs¸©ch4


605 
CMP
 
	grs¸©ch4
, #0
x00090000


606 
ADDHI
 
	grs¸©ch4
,Ñs¸©ch4, #0
x000A0000


607 
ADDHI
 
	grs¸©ch5
,Ñs¸©ch5, #0
x00010000


608 
SUB
 
	grs¸©ch5
,
	grs¸©ch9
,
rs¸©ch5


609 
CMP
 
	grs¸©ch5
, #0
x00090000


610 
ADDHI
 
	grs¸©ch5
,Ñs¸©ch5, #0
x000A0000


611 
BICHI
 
	gr°©us
,Ñstatus, #MASK_CARRY

612 
ORRLS
 
	gr°©us
,Ñstatus, #MASK_CARRY

614 
MOV
 
	grs¸©ch9
,#0
x000F0000


615 
AND
 
	grs¸©ch2
,
	grs¸©ch9
,
rs¸©ch2


616 
AND
 
	grs¸©ch3
,
	grs¸©ch9
,
rs¸©ch3


617 
AND
 
	grs¸©ch4
,
	grs¸©ch9
,
rs¸©ch4


618 
AND
 
	grs¸©ch5
,
	grs¸©ch9
,
rs¸©ch5


619 
ORR
 
	grs¸©ch2
,rs¸©ch2,
	grs¸©ch3
,
	gLSL
 #4

620 
ORR
 
	grs¸©ch2
,rs¸©ch2,
	grs¸©ch4
,
	gLSL
 #8

621 
ORR
 
	grs¸©ch2
,rs¸©ch2,
	grs¸©ch5
,
	gLSL
 #12

623 
LDMFD
 
	gR13
!,{
	grs¸©ch5
,
	grs¸©ch6
,
	grs¸©ch7
,
	grs¸©ch8
,
	grs¸©ch9
}

625 
AND
 
	gªgA
,ªgA,#0
x80000000


627 
EORS
 
	grs¸©ch3
, 
	gªgA
, 
rs¸©ch


628 
BICEQ
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

629 
	gBEQ
 1112f

631 
EORS
 
	grs¸©ch3
, 
	gªgA
, 
rs¸©ch2


633 
TSTNE
 
	grs¸©ch3
,#0
x80000000


634 
BICEQ
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

635 
ORRNE
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

637 
MOVS
 
ªgA
, 
rs¸©ch2


638 
UPDATE_ZN


639 
	gB
 1113f

641 
S9xGëW‹dLow


642 
MOVS
 
rs¸©ch2
,
	gr°©us
,
	gLSR
 #MASK_SHIFTER_CARRY

643 
SBCS
 
	gªgA
,ÑegA, 
	grs¸©ch
, 
	gLSL
 #16

645 
ORRVS
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

646 
BICVC
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

647 
MOV
 
	gªgA
,ÑegA, 
	gLSR
 #16

649 
UPDATE_C


650 
MOVS
 
	gªgA
,ÑegA, 
	gLSL
 #16

652 
	gUPDATE_ZN


654 .
ídm


656 .
ma¸o
 
SBC8


657 
TST
 
r°©us
, #MASK_DECIMAL

658 
	gBEQ
 1111f

659 
S9xGëByã


660 
STMFD
 
	gR13
!,{
	grs¸©ch
}

661 
MOV
 
	grs¸©ch4
,#0
x0F000000


663 
AND
 
	grs¸©ch2
, 
	grs¸©ch
, 
rs¸©ch4


665 
AND
 
	grs¸©ch
, 
	grs¸©ch4
,Ñs¸©ch, 
	gLSR
 #4

667 
AND
 
	grs¸©ch3
, 
	grs¸©ch4
, 
	gªgA
, 
	gLSR
 #4

669 
AND
 
	grs¸©ch4
,
	gªgA
,
rs¸©ch4


671 
TST
 
	gr°©us
, #MASK_CARRY

672 
ADDEQ
 
	grs¸©ch2
,Ñs¸©ch2, #0
x01000000


673 
SUB
 
	grs¸©ch2
,
	grs¸©ch4
,
rs¸©ch2


675 
CMP
 
	grs¸©ch2
, #0
x09000000


677 
ADDHI
 
	grs¸©ch2
,Ñs¸©ch2, #0
x0A000000


679 
ADDHI
 
	grs¸©ch
,Ñs¸©ch, #0
x01000000


681 
SUB
 
	grs¸©ch3
,Ñs¸©ch3, 
rs¸©ch


683 
CMP
 
	grs¸©ch3
, #0
x09000000


685 
ADDHI
 
	grs¸©ch3
,Ñs¸©ch3, #0
x0A000000


687 
BICHI
 
	gr°©us
,Ñstatus, #MASK_CARRY

689 
ORRLS
 
	gr°©us
,Ñstatus, #MASK_CARRY

691 
AND
 
	grs¸©ch3
,rs¸©ch3,#0
x0F000000


692 
AND
 
	grs¸©ch2
,rs¸©ch2,#0
x0F000000


696 
ORR
 
	grs¸©ch2
,Ñs¸©ch2, 
	grs¸©ch3
, 
	gLSL
 #4

697 
LDMFD
 
	gR13
!,{
	grs¸©ch
}

699 
AND
 
	gªgA
,ªgA,#0
x80000000


701 
EORS
 
	grs¸©ch3
, 
	gªgA
, 
rs¸©ch


702 
BICEQ
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

703 
	gBEQ
 1112f

705 
EORS
 
	grs¸©ch3
, 
	gªgA
, 
rs¸©ch2


707 
TSTNE
 
	grs¸©ch3
,#0
x80000000


708 
BICEQ
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

709 
ORRNE
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

711 
MOVS
 
ªgA
, 
rs¸©ch2


712 
UPDATE_ZN


713 
	gB
 1113f

715 
S9xGëByãLow


716 
MOVS
 
rs¸©ch2
,
	gr°©us
,
	gLSR
 #MASK_SHIFTER_CARRY

717 
SBCS
 
	gªgA
,ÑegA, 
	grs¸©ch
, 
	gLSL
 #24

719 
ORRVS
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

720 
BICVC
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

722 
UPDATE_C


724 
ANDS
 
	gªgA
,ÑegA, #0
xFF000000


725 
	gUPDATE_ZN


727 .
ídm


729 .
ma¸o
 
STA16


730 
S9xSëW‹d
 
ªgA


731 .
ídm


732 .
ma¸o
 
STA8


733 
S9xSëByã
 
ªgA


734 .
ídm


735 .
ma¸o
 
STX16


736 
S9xSëW‹d
 
ªgX


737 .
ídm


738 .
ma¸o
 
STX8


739 
S9xSëByã
 
ªgX


740 .
ídm


741 .
ma¸o
 
STY16


742 
S9xSëW‹d
 
ªgY


743 .
ídm


744 .
ma¸o
 
STY8


745 
S9xSëByã
 
ªgY


746 .
ídm


747 .
ma¸o
 
STZ16


748 
S9xSëW‹dZîo


749 .
ídm


750 .
ma¸o
 
STZ8


751 
S9xSëByãZîo


752 .
ídm


753 .
ma¸o
 
TSB16


754 
S9xGëW‹dRegNS
 
rs¸©ch2


755 
TST
 
ªgA
, 
rs¸©ch2


756 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

757 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

758 
ORR
 
	grs¸©ch2
, 
	gªgA
, 
rs¸©ch2


759 
S9xSëW‹d
 
rs¸©ch2


760 
	gADD1CYCLE


761 .
	gídm


762 .
ma¸o
 
TSB8


763 
S9xGëByãRegNS
 
rs¸©ch2


764 
TST
 
	gªgA
, 
rs¸©ch2


765 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

766 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

767 
ORR
 
	grs¸©ch2
, 
	gªgA
, 
rs¸©ch2


768 
S9xSëByã
 
rs¸©ch2


769 
	gADD1CYCLE


770 .
	gídm


771 .
ma¸o
 
TRB16


772 
S9xGëW‹dRegNS
 
rs¸©ch2


773 
TST
 
	gªgA
, 
rs¸©ch2


774 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

775 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

776 
MVN
 
	grs¸©ch3
, 
ªgA


777 
AND
 
	grs¸©ch2
, 
	grs¸©ch3
, 
rs¸©ch2


778 
S9xSëW‹d
 
rs¸©ch2


779 
	gADD1CYCLE


780 .
	gídm


781 .
ma¸o
 
TRB8


782 
S9xGëByãRegNS
 
rs¸©ch2


783 
TST
 
	gªgA
, 
rs¸©ch2


784 
BICNE
 
	gr°©us
,Ñstatus, #MASK_ZERO

785 
ORREQ
 
	gr°©us
,Ñstatus, #MASK_ZERO

786 
MVN
 
	grs¸©ch3
, 
ªgA


787 
AND
 
	grs¸©ch2
, 
	grs¸©ch3
, 
rs¸©ch2


788 
S9xSëByã
 
rs¸©ch2


789 
	gADD1CYCLE


790 .
ídm


796 .
ma¸o
 
Op09M0


797 
LDRB
 
	grs¸©ch2
, [
Ωc
,#1]

798 
LDRB
 
	grs¸©ch
, [
Ωc
], #2

799 
ORR
 
	grs¸©ch2
,
	grs¸©ch
,rs¸©ch2,
	gLSL
 #8

800 
ORRS
 
	gªgA
,ªgA,
	grs¸©ch2
,
	gLSL
 #16

801 
UPDATE_ZN


802 
	gADD2MEM


803 .
	gídm


804 .
ma¸o
 
Op09M1


805 
LDRB
 
	grs¸©ch
, [
Ωc
], #1

806 
ORRS
 
	gªgA
,ªgA,
	grs¸©ch
,
	gLSL
 #24

807 
UPDATE_ZN


808 
	gADD1MEM


809 .
ídm


811 .
ma¸o
 
Op90


812 
asmRñ©ive


813 
BønchCheck0


814 
TST
 
	gr°©us
, #MASK_CARRY

815 
	gBNE
 1111f

816 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


817 
ADD1CYCLE


818 
	gCPUShutdown


820 .
ídm


821 .
ma¸o
 
OpB0


822 
asmRñ©ive


823 
BønchCheck0


824 
TST
 
r°©us
, #MASK_CARRY

825 
	gBEQ
 1111f

826 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


827 
ADD1CYCLE


828 
	gCPUShutdown


830 .
ídm


831 .
ma¸o
 
OpF0


832 
asmRñ©ive


833 
BønchCheck2


834 
TST
 
r°©us
, #MASK_ZERO

835 
	gBEQ
 1111f

836 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


837 
ADD1CYCLE


838 
	gCPUShutdown


840 .
ídm


841 .
ma¸o
 
OpD0


842 
asmRñ©ive


843 
BønchCheck1


844 
TST
 
r°©us
, #MASK_ZERO

845 
	gBNE
 1111f

846 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


847 
ADD1CYCLE


848 
	gCPUShutdown


850 .
ídm


851 .
ma¸o
 
Op30


852 
asmRñ©ive


853 
BønchCheck0


854 
TST
 
r°©us
, #MASK_NEG

855 
	gBEQ
 1111f

856 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


857 
ADD1CYCLE


858 
	gCPUShutdown


860 .
ídm


861 .
ma¸o
 
Op10


862 
asmRñ©ive


863 
BønchCheck1


864 
TST
 
r°©us
, #MASK_NEG

865 
	gBNE
 1111f

866 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


867 
ADD1CYCLE


868 
	gCPUShutdown


870 .
ídm


871 .
ma¸o
 
Op50


872 
asmRñ©ive


873 
BønchCheck0


874 
TST
 
r°©us
, #MASK_OVERFLOW

875 
	gBNE
 1111f

876 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


877 
ADD1CYCLE


878 
	gCPUShutdown


880 .
ídm


881 .
ma¸o
 
Op70


882 
asmRñ©ive


883 
BønchCheck0


884 
TST
 
r°©us
, #MASK_OVERFLOW

885 
	gBEQ
 1111f

886 
ADD
 
	gΩc
, 
	grs¸©ch
, 
ªgpcba£


887 
ADD1CYCLE


888 
	gCPUShutdown


890 .
ídm


891 .
ma¸o
 
Op80


892 
asmRñ©ive


893 
ADD
 
Ωc
, 
	grs¸©ch
, 
ªgpcba£


894 
ADD1CYCLE


895 
	gCPUShutdown


897 .
ídm


901 .
ma¸o
 
Op38


902 
ORR
 
r°©us
, 
	gr°©us
, #MASK_CARRY

903 
	gADD1CYCLE


904 .
	gídm


905 .
ma¸o
 
OpF8


906 
SëDecimÆ


907 
	gADD1CYCLE


908 .
	gídm


909 .
ma¸o
 
Op78


910 
SëIRQ


911 
	gADD1CYCLE


912 .
	gídm


917 .
ma¸o
 
Op18


918 
BIC
 
	gr°©us
,Ñstatus, #MASK_CARRY

919 
	gADD1CYCLE


920 .
	gídm


921 .
ma¸o
 
OpD8


922 
CÀ¨DecimÆ


923 
	gADD1CYCLE


924 .
	gídm


925 .
ma¸o
 
Op58


926 
CÀ¨IRQ


927 
	gADD1CYCLE


929 .
	gídm


930 .
ma¸o
 
OpB8


931 
BIC
 
	gr°©us
,Ñstatus, #MASK_OVERFLOW

932 
	gADD1CYCLE


933 .
	gídm


938 .
ma¸o
 
OpCAX1


939 
MOV
 
	grs¸©ch3
,#0

940 
SUBS
 
	gªgX
,ÑegX, #0
x01000000


941 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

942 
UPDATE_ZN


943 
	gADD1CYCLE


944 .
	gídm


945 .
ma¸o
 
OpCAX0


946 
MOV
 
	grs¸©ch3
,#0

947 
SUBS
 
	gªgX
,ÑegX, #0
x00010000


948 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

949 
UPDATE_ZN


950 
	gADD1CYCLE


951 .
	gídm


952 .
ma¸o
 
Op88X1


953 
MOV
 
	grs¸©ch3
,#0

954 
SUBS
 
	gªgY
,ÑegY, #0
x01000000


955 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

956 
UPDATE_ZN


957 
	gADD1CYCLE


958 .
	gídm


959 .
ma¸o
 
Op88X0


960 
MOV
 
	grs¸©ch3
,#0

961 
SUBS
 
	gªgY
,ÑegY, #0
x00010000


962 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

963 
UPDATE_ZN


964 
	gADD1CYCLE


965 .
	gídm


969 .
ma¸o
 
OpE8X1


970 
MOV
 
	grs¸©ch3
,#0

971 
ADDS
 
	gªgX
,ÑegX, #0
x01000000


972 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

973 
UPDATE_ZN


974 
	gADD1CYCLE


975 .
	gídm


976 .
ma¸o
 
OpE8X0


977 
MOV
 
	grs¸©ch3
,#0

978 
ADDS
 
	gªgX
,ÑegX, #0
x00010000


979 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

980 
UPDATE_ZN


981 
	gADD1CYCLE


982 .
	gídm


983 .
ma¸o
 
OpC8X1


984 
MOV
 
	grs¸©ch3
,#0

985 
ADDS
 
	gªgY
,ÑegY, #0
x01000000


986 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

987 
UPDATE_ZN


988 
	gADD1CYCLE


989 .
	gídm


990 .
ma¸o
 
OpC8X0


991 
MOV
 
	grs¸©ch3
,#0

992 
ADDS
 
	gªgY
,ÑegY, #0
x00010000


993 
STR
 
	grs¸©ch3
,[
ªgCPUv¨
,#WaitAddress_ofs]

994 
UPDATE_ZN


995 
	gADD1CYCLE


996 .
	gídm


1001 .
ma¸o
 
OpEA


1002 
	gADD1CYCLE


1003 .
	gídm


1007 .
ma¸o
 
OpF4


1008 
Absﬁuã


1009 
	gPushWrLow


1010 .
	gídm


1011 .
ma¸o
 
OpD4


1012 
Dúe˘Indúe˘


1013 
	gPushWrLow


1014 .
	gídm


1015 .
ma¸o
 
Op62


1016 
asmRñ©iveL⁄g


1017 
	gPushWrLow


1018 .
	gídm


1019 .
ma¸o
 
Op48M0


1020 
PushW
 
ªgA


1021 
	gADD1CYCLE


1022 .
	gídm


1023 .
ma¸o
 
Op48M1


1024 
PushB
 
ªgA


1025 
	gADD1CYCLE


1026 .
	gídm


1027 .
ma¸o
 
Op8B


1028 
AND
 
	grs¸©ch2
, 
	gªgDB™k
, #0
xFF


1029 
PushBLow
 
rs¸©ch2


1030 
	gADD1CYCLE


1031 .
	gídm


1032 .
ma¸o
 
Op0B


1033 
PushW
 
ªgD


1034 
	gADD1CYCLE


1035 .
	gídm


1036 .
ma¸o
 
Op4B


1037 
PushBlow
 
ªgPB™k


1038 
	gADD1CYCLE


1039 .
	gídm


1040 .
ma¸o
 
Op08


1041 
PushB
 
r°©us


1042 
	gADD1CYCLE


1043 .
	gídm


1044 .
ma¸o
 
OpDAX1


1045 
PushB
 
ªgX


1046 
	gADD1CYCLE


1047 .
	gídm


1048 .
ma¸o
 
OpDAX0


1049 
PushW
 
ªgX


1050 
	gADD1CYCLE


1051 .
	gídm


1052 .
ma¸o
 
Op5AX1


1053 
PushB
 
ªgY


1054 
	gADD1CYCLE


1055 .
	gídm


1056 .
ma¸o
 
Op5AX0


1057 
PushW
 
ªgY


1058 
	gADD1CYCLE


1059 .
	gídm


1062 .
ma¸o
 
Op68M1


1063 
PuŒBS
 
ªgA


1064 
UPDATE_ZN


1065 
	gADD2CYCLE


1066 .
	gídm


1067 .
ma¸o
 
Op68M0


1068 
PuŒWS
 
ªgA


1069 
UPDATE_ZN


1070 
	gADD2CYCLE


1071 .
	gídm


1072 .
ma¸o
 
OpAB


1073 
BIC
 
	gªgDB™k
,ªgDB™k, #0
xFF


1074 
PuŒBrS


1075 
ORR
 
	gªgDB™k
,ªgDB™k,
	grs¸©ch
, 
	gLSR
 #24

1076 
UPDATE_ZN


1077 
	gADD2CYCLE


1078 .
	gídm


1079 .
ma¸o
 
Op2B


1080 
BIC
 
	gªgD
,ªgD, #0
xFF000000


1081 
BIC
 
	gªgD
,ªgD, #0
x00FF0000


1082 
PuŒWrS


1083 
ORR
 
	gªgD
,
	grs¸©ch
,
ªgD


1084 
UPDATE_ZN


1085 
	gADD2CYCLE


1086 .
	gídm


1087 .
ma¸o
 
Op28X1M1


1089 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


1090 
PuŒBr


1091 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


1092 
TST
 
	gr°©us
, #MASK_INDEX

1094 
MOVEQ
 
	gªgX
,ªgX,
	gLSR
 #8

1095 
MOVEQ
 
	gªgY
,ªgY,
	gLSR
 #8

1096 
TST
 
	gr°©us
, #MASK_MEM

1098 
LDREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1099 
MOVEQ
 
	gªgA
,ªgA,
	gLSR
 #8

1100 
ORREQ
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

1101 
S9xFixCy˛es


1102 
	gADD2CYCLE


1103 .
	gídm


1104 .
ma¸o
 
Op28X0M1


1106 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


1107 
PuŒBr


1108 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


1109 
TST
 
	gr°©us
, #MASK_INDEX

1111 
MOVNE
 
	gªgX
,ªgX,
	gLSL
 #8

1112 
MOVNE
 
	gªgY
,ªgY,
	gLSL
 #8

1113 
TST
 
	gr°©us
, #MASK_MEM

1115 
LDREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1116 
MOVEQ
 
	gªgA
,ªgA,
	gLSR
 #8

1117 
ORREQ
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

1118 
S9xFixCy˛es


1119 
	gADD2CYCLE


1120 .
	gídm


1121 .
ma¸o
 
Op28X1M0


1123 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


1124 
PuŒBr


1125 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


1126 
TST
 
	gr°©us
, #MASK_INDEX

1128 
MOVEQ
 
	gªgX
,ªgX,
	gLSR
 #8

1129 
MOVEQ
 
	gªgY
,ªgY,
	gLSR
 #8

1130 
TST
 
	gr°©us
, #MASK_MEM

1132 
MOVNE
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

1133 
MOVNE
 
	gªgA
,ªgA,
	gLSL
 #8

1134 
STRNEB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1135 
S9xFixCy˛es


1136 
	gADD2CYCLE


1137 .
	gídm


1138 .
ma¸o
 
Op28X0M0


1140 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


1141 
PuŒBr


1142 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


1143 
TST
 
	gr°©us
, #MASK_INDEX

1145 
MOVNE
 
	gªgX
,ªgX,
	gLSL
 #8

1146 
MOVNE
 
	gªgY
,ªgY,
	gLSL
 #8

1147 
TST
 
	gr°©us
, #MASK_MEM

1149 
MOVNE
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

1150 
MOVNE
 
	gªgA
,ªgA,
	gLSL
 #8

1151 
STRNEB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1152 
S9xFixCy˛es


1153 
	gADD2CYCLE


1154 .
	gídm


1155 .
ma¸o
 
OpFAX1


1156 
PuŒBS
 
ªgX


1157 
UPDATE_ZN


1158 
	gADD2CYCLE


1159 .
	gídm


1160 .
ma¸o
 
OpFAX0


1161 
PuŒWS
 
ªgX


1162 
UPDATE_ZN


1163 
	gADD2CYCLE


1164 .
	gídm


1165 .
ma¸o
 
Op7AX1


1166 
PuŒBS
 
ªgY


1167 
UPDATE_ZN


1168 
	gADD2CYCLE


1169 .
	gídm


1170 .
ma¸o
 
Op7AX0


1171 
PuŒWS
 
ªgY


1172 
UPDATE_ZN


1173 
	gADD2CYCLE


1174 .
	gídm


1178 .
ma¸o
 
OpAAX1M1


1179 
MOVS
 
	gªgX
, 
ªgA


1180 
UPDATE_ZN


1181 
	gADD1CYCLE


1182 .
	gídm


1183 .
ma¸o
 
OpAAX0M1


1184 
LDRB
 
	gªgX
, [
ªgCPUv¨
,#RAH_ofs]

1185 
MOV
 
	gªgX
,ÑegX,
	gLSL
 #24

1186 
ORRS
 
	gªgX
,ÑegX,
	gªgA
, 
	gLSR
 #8

1187 
UPDATE_ZN


1188 
	gADD1CYCLE


1189 .
	gídm


1190 .
ma¸o
 
OpAAX1M0


1191 
MOVS
 
	gªgX
, 
	gªgA
, 
	gLSL
 #8

1192 
UPDATE_ZN


1193 
	gADD1CYCLE


1194 .
	gídm


1195 .
ma¸o
 
OpAAX0M0


1196 
MOVS
 
	gªgX
, 
ªgA


1197 
UPDATE_ZN


1198 
	gADD1CYCLE


1199 .
	gídm


1200 .
ma¸o
 
OpA8X1M1


1201 
MOVS
 
	gªgY
, 
ªgA


1202 
UPDATE_ZN


1203 
	gADD1CYCLE


1204 .
	gídm


1205 .
ma¸o
 
OpA8X0M1


1206 
LDRB
 
	gªgY
, [
ªgCPUv¨
,#RAH_ofs]

1207 
MOV
 
	gªgY
,ÑegY,
	gLSL
 #24

1208 
ORRS
 
	gªgY
,ÑegY,
	gªgA
, 
	gLSR
 #8

1209 
UPDATE_ZN


1210 
	gADD1CYCLE


1211 .
	gídm


1212 .
ma¸o
 
OpA8X1M0


1213 
MOVS
 
	gªgY
, 
	gªgA
, 
	gLSL
 #8

1214 
UPDATE_ZN


1215 
	gADD1CYCLE


1216 .
	gídm


1217 .
ma¸o
 
OpA8X0M0


1218 
MOVS
 
	gªgY
, 
ªgA


1219 
UPDATE_ZN


1220 
	gADD1CYCLE


1221 .
	gídm


1222 .
ma¸o
 
Op5BM1


1223 
LDRB
 
	grs¸©ch
, [
ªgCPUv¨
,#RAH_ofs]

1224 
MOV
 
	gªgD
,ªgD,
	gLSL
 #16

1225 
MOV
 
	grs¸©ch
,rs¸©ch,
	gLSL
 #24

1226 
ORRS
 
	grs¸©ch
,rs¸©ch,
	gªgA
, 
	gLSR
 #8

1227 
UPDATE_ZN


1228 
ORR
 
	gªgD
,
	grs¸©ch
,ªgD,
	gLSR
 #16

1229 
	gADD1CYCLE


1230 .
	gídm


1231 .
ma¸o
 
Op5BM0


1232 
MOV
 
	gªgD
,ªgD,
	gLSL
 #16

1233 
MOVS
 
	gªgA
,
ªgA


1234 
UPDATE_ZN


1235 
ORR
 
	gªgD
,
	gªgA
,ªgD,
	gLSR
 #16

1236 
	gADD1CYCLE


1237 .
	gídm


1238 .
ma¸o
 
Op1BM1


1239 
TST
 
	gr°©us
, #MASK_EMUL

1240 
MOVNE
 
	gªgS
, 
	gªgA
, 
	gLSR
 #24

1241 
ORRNE
 
	gªgS
,ÑegS, #0
x100


1242 
LDREQB
 
	gªgS
, [
ªgCPUv¨
,#RAH_ofs]

1243 
ORREQ
 
	gªgS
,ÑegS, 
ªgA


1244 
MOVEQ
 
	gªgS
,ÑegS, 
	gROR
 #24

1245 
	gADD1CYCLE


1246 .
	gídm


1247 .
ma¸o
 
Op1BM0


1248 
MOV
 
	gªgS
, 
	gªgA
, 
	gLSR
 #16

1249 
	gADD1CYCLE


1250 .
	gídm


1251 .
ma¸o
 
Op7BM1


1252 
MOVS
 
	gªgA
, 
	gªgD
, 
	gASR
 #16

1253 
UPDATE_ZN


1254 
MOV
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #8

1255 
MOV
 
	gªgA
,ªgA, 
	gLSL
 #24

1256 
STRB
 
	grs¸©ch
, [
ªgCPUv¨
,#RAH_ofs]

1257 
	gADD1CYCLE


1258 .
	gídm


1259 .
ma¸o
 
Op7BM0


1260 
MOVS
 
	gªgA
, 
	gªgD
, 
	gASR
 #16

1261 
UPDATE_ZN


1262 
MOV
 
	gªgA
,ªgA, 
	gLSL
 #16

1263 
	gADD1CYCLE


1264 .
	gídm


1265 .
ma¸o
 
Op3BM1


1266 
MOV
 
	grs¸©ch
,
	gªgS
, 
	gLSR
 #8

1267 
MOVS
 
	gªgA
, 
	gªgS
, 
	gLSL
 #16

1268 
STRB
 
	grs¸©ch
, [
ªgCPUv¨
,#RAH_ofs]

1269 
UPDATE_ZN


1270 
MOV
 
	gªgA
,ªgA, 
	gLSL
 #8

1271 
	gADD1CYCLE


1272 .
	gídm


1273 .
ma¸o
 
Op3BM0


1274 
MOVS
 
	gªgA
, 
	gªgS
, 
	gLSL
 #16

1275 
UPDATE_ZN


1276 
	gADD1CYCLE


1277 .
	gídm


1278 .
ma¸o
 
OpBAX1


1279 
MOVS
 
	gªgX
, 
	gªgS
, 
	gLSL
 #24

1280 
UPDATE_ZN


1281 
	gADD1CYCLE


1282 .
	gídm


1283 .
ma¸o
 
OpBAX0


1284 
MOVS
 
	gªgX
, 
	gªgS
, 
	gLSL
 #16

1285 
UPDATE_ZN


1286 
	gADD1CYCLE


1287 .
	gídm


1288 .
ma¸o
 
Op8AM1X1


1289 
MOVS
 
	gªgA
, 
ªgX


1290 
UPDATE_ZN


1291 
	gADD1CYCLE


1292 .
	gídm


1293 .
ma¸o
 
Op8AM1X0


1294 
MOVS
 
	gªgA
, 
	gªgX
, 
	gLSL
 #8

1295 
UPDATE_ZN


1296 
	gADD1CYCLE


1297 .
	gídm


1298 .
ma¸o
 
Op8AM0X1


1299 
MOVS
 
	gªgA
, 
	gªgX
, 
	gLSR
 #8

1300 
UPDATE_ZN


1301 
	gADD1CYCLE


1302 .
	gídm


1303 .
ma¸o
 
Op8AM0X0


1304 
MOVS
 
	gªgA
, 
ªgX


1305 
UPDATE_ZN


1306 
	gADD1CYCLE


1307 .
	gídm


1308 .
ma¸o
 
Op9AX1


1309 
MOV
 
	gªgS
, 
	gªgX
, 
	gLSR
 #24

1310 
TST
 
	gr°©us
, #MASK_EMUL

1311 
ORRNE
 
	gªgS
,ÑegS, #0
x100


1312 
	gADD1CYCLE


1313 .
	gídm


1314 .
ma¸o
 
Op9AX0


1315 
MOV
 
	gªgS
, 
	gªgX
, 
	gLSR
 #16

1316 
	gADD1CYCLE


1317 .
	gídm


1318 .
ma¸o
 
Op9BX1


1319 
MOVS
 
	gªgY
, 
ªgX


1320 
UPDATE_ZN


1321 
	gADD1CYCLE


1322 .
	gídm


1323 .
ma¸o
 
Op9BX0


1324 
MOVS
 
	gªgY
, 
ªgX


1325 
UPDATE_ZN


1326 
	gADD1CYCLE


1327 .
	gídm


1328 .
ma¸o
 
Op98M1X1


1329 
MOVS
 
	gªgA
, 
ªgY


1330 
UPDATE_ZN


1331 
	gADD1CYCLE


1332 .
	gídm


1333 .
ma¸o
 
Op98M1X0


1334 
MOVS
 
	gªgA
, 
	gªgY
, 
	gLSL
 #8

1335 
UPDATE_ZN


1336 
	gADD1CYCLE


1337 .
	gídm


1338 .
ma¸o
 
Op98M0X1


1339 
MOVS
 
	gªgA
, 
	gªgY
, 
	gLSR
 #8

1340 
UPDATE_ZN


1341 
	gADD1CYCLE


1342 .
	gídm


1343 .
ma¸o
 
Op98M0X0


1344 
MOVS
 
	gªgA
, 
ªgY


1345 
UPDATE_ZN


1346 
	gADD1CYCLE


1347 .
	gídm


1348 .
ma¸o
 
OpBBX1


1349 
MOVS
 
	gªgX
, 
ªgY


1350 
UPDATE_ZN


1351 
	gADD1CYCLE


1352 .
	gídm


1353 .
ma¸o
 
OpBBX0


1354 
MOVS
 
	gªgX
, 
ªgY


1355 
UPDATE_ZN


1356 
	gADD1CYCLE


1357 .
	gídm


1362 .
ma¸o
 
OpFB


1363 
TST
 
	gr°©us
,#MASK_CARRY

1364 
	gBEQ
 1111f

1366 
TST
 
	gr°©us
,#MASK_EMUL

1367 
	gBNE
 1112f

1369 
BIC
 
	gr°©us
,r°©us,#(
	gMASK_CARRY
)

1370 
TST
 
	gr°©us
,#MASK_INDEX

1372 
MOVEQ
 
	gªgX
,ªgX,
	gLSL
 #8

1373 
MOVEQ
 
	gªgY
,ªgY,
	gLSL
 #8

1374 
TST
 
	gr°©us
,#MASK_MEM

1377 
MOVEQ
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

1378 
STREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1379 
MOVEQ
 
	gªgA
,ªgA,
	gLSL
 #8

1380 
ORR
 
	gr°©us
,r°©us,#(
	gMASK_EMUL
|
	gMASK_MEM
|
	gMASK_INDEX
)

1381 
AND
 
	gªgS
,ªgS,#0
xFF


1382 
ORR
 
	gªgS
,ªgS,#0
x100


1383 
	gB
 1113f

1386 
TST
 
r°©us
,#MASK_INDEX

1388 
MOVEQ
 
	gªgX
,ªgX,
	gLSL
 #8

1389 
MOVEQ
 
	gªgY
,ªgY,
	gLSL
 #8

1390 
TST
 
	gr°©us
,#MASK_MEM

1393 
MOVEQ
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

1394 
STREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1395 
MOVEQ
 
	gªgA
,ªgA,
	gLSL
 #8

1396 
ORR
 
	gr°©us
,r°©us,#(
	gMASK_CARRY
|
	gMASK_MEM
|
	gMASK_INDEX
)

1397 
AND
 
	gªgS
,ªgS,#0
xFF


1398 
ORR
 
	gªgS
,ªgS,#0
x100


1399 
	gB
 1113f

1402 
TST
 
r°©us
,#MASK_EMUL

1403 
	gBEQ
 1115f

1406 
TST
 
	gr°©us
,#MASK_INDEX

1408 
MOVEQ
 
	gªgX
,ªgX,
	gLSR
 #8

1409 
MOVEQ
 
	gªgY
,ªgY,
	gLSR
 #8

1410 
TST
 
	gr°©us
,#MASK_MEM

1412 
MOVEQ
 
	gªgA
,ªgA,
	gLSR
 #8

1414 
LDREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1415 
ORREQ
 
	gªgA
,ªgA,
	grs¸©ch
,
	gLSL
 #24

1417 
BIC
 
r°©us
,
	gr°©us
,#(
	gMASK_EMUL
)

1418 
ORR
 
	gr°©us
,r°©us,#(
	gMASK_CARRY
)

1420 
ADD1CYCLE


1421 
S9xFixCy˛es


1422 .
ídm


1426 .
ma¸o
 
Op00


1427 
MOV
 
rs¸©ch
,#1

1428 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#BRKTriggered_ofs]

1430 
TST
 
	gr°©us
, #MASK_EMUL

1432 
	gBNE
 2001f

1433 
PushBLow
 
ªgPB™k


1434 
SUB
 
	grs¸©ch
, 
	gΩc
, 
ªgpcba£


1435 
ADD
 
	grs¸©ch2
, 
	grs¸©ch
, #1

1436 
PushWLow
 
rs¸©ch2


1438 
PushB
 
r°©us


1439 
CÀ¨DecimÆ


1440 
SëIRQ


1441 
BIC
 
	gªgPB™k
,ÑegPB™k, #0
xFF


1442 
MOV
 
	grs¸©ch
, #0
xE6


1443 
ORR
 
	grs¸©ch
,Ñs¸©ch, #0
xFF00


1444 
S9xGëW‹dLow


1445 
S9xSëPCBa£


1446 
ADD2CYCLE


1447 
	gB
 2002f

1449 
SUB
 
rs¸©ch2
, 
	gΩc
, 
ªgpcba£


1450 
PushWLow
 
rs¸©ch2


1452 
PushB
 
r°©us


1453 
CÀ¨DecimÆ


1454 
SëIRQ


1455 
BIC
 
	gªgPB™k
,ªgPB™k, #0
xFF


1456 
MOV
 
	grs¸©ch
, #0
xFE


1457 
ORR
 
	grs¸©ch
,Ñs¸©ch, #0
xFF00


1458 
S9xGëW‹dLow


1459 
S9xSëPCBa£


1460 
	gADD1CYCLE


1462 .
ídm


1467 .
ma¸o
 
Op82


1468 
asmRñ©iveL⁄g


1469 
ORR
 
rs¸©ch
, 
	grs¸©ch
, 
	gªgPB™k
, 
	gLSL
 #16

1470 
	gS9xSëPCBa£


1471 .
	gídm


1558 .
ma¸o
 
Op02


1559 
TST
 
	gr°©us
, #MASK_EMUL

1561 
	gBNE
 2021f

1562 
PushBLow
 
ªgPB™k


1563 
SUB
 
	grs¸©ch
, 
	gΩc
, 
ªgpcba£


1564 
ADD
 
	grs¸©ch2
, 
	grs¸©ch
, #1

1565 
PushWLow
 
rs¸©ch2


1567 
PushB
 
r°©us


1568 
CÀ¨DecimÆ


1569 
SëIRQ


1570 
BIC
 
	gªgPB™k
,ÑegPB™k,#0
xFF


1571 
MOV
 
	grs¸©ch
, #0
xE4


1572 
ORR
 
	grs¸©ch
,Ñs¸©ch, #0
xFF00


1573 
S9xGëW‹dLow


1574 
S9xSëPCBa£


1575 
ADD2CYCLE


1576 
	gB
 2022f

1578 
SUB
 
rs¸©ch2
, 
	gΩc
, 
ªgpcba£


1579 
PushWLow
 
rs¸©ch2


1581 
PushB
 
r°©us


1582 
CÀ¨DecimÆ


1583 
SëIRQ


1584 
BIC
 
	gªgPB™k
,ªgPB™k, #0
xFF


1585 
MOV
 
	grs¸©ch
, #0
xF4


1586 
ORR
 
	grs¸©ch
,Ñs¸©ch, #0
xFF00


1587 
S9xGëW‹dLow


1588 
S9xSëPCBa£


1589 
	gADD1CYCLE


1591 .
ídm


1595 .
ma¸o
 
OpDC


1596 
AbsﬁuãIndúe˘L⁄g


1597 
BIC
 
ªgPB™k
,
	gªgPB™k
,#0
xFF


1598 
ORR
 
	gªgPB™k
,ªgPB™k, 
	grs¸©ch
, 
	gLSR
 #16

1599 
S9xSëPCBa£


1600 
	gADD2CYCLE


1601 .
	gídm


1602 .
ma¸o
 
Op5C


1603 
AbsﬁuãL⁄g


1604 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


1605 
ORR
 
	gªgPB™k
,ªgPB™k, 
	grs¸©ch
, 
	gLSR
 #16

1606 
	gS9xSëPCBa£


1607 .
	gídm


1611 .
ma¸o
 
Op4C


1612 
Absﬁuã


1613 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
xFF0000


1614 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1615 
S9xSëPCBa£


1616 
	gCPUShutdown


1617 .
	gídm


1618 .
ma¸o
 
Op6C


1619 
AbsﬁuãIndúe˘


1620 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
xFF0000


1621 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1622 
	gS9xSëPCBa£


1623 .
	gídm


1624 .
ma¸o
 
Op7C


1625 
ADD
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1626 
S9xSëPCBa£


1627 
	gADD1CYCLE


1628 .
	gídm


1632 .
ma¸o
 
Op22


1633 
PushBlow
 
ªgPB™k


1634 
SUB
 
	grs¸©ch
, 
	gΩc
, 
ªgpcba£


1636 
ADD
 
	grs¸©ch2
, 
	grs¸©ch
, #2

1637 
PushWlow
 
rs¸©ch2


1638 
AbsﬁuãL⁄g


1639 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


1640 
ORR
 
	gªgPB™k
,ÑegPB™k, 
	grs¸©ch
, 
	gLSR
 #16

1641 
	gS9xSëPCBa£


1642 .
	gídm


1643 .
ma¸o
 
Op6B


1644 
PuŒWLow
 
Ωc


1645 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


1646 
PuŒBrLow


1647 
ORR
 
	gªgPB™k
,ÑegPB™k, 
rs¸©ch


1648 
ADD
 
	grs¸©ch
, 
	gΩc
, #1

1649 
BIC
 
	grs¸©ch
,Ñs¸©ch,#0
xFF0000


1650 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1651 
S9xSëPCBa£


1652 
	gADD2CYCLE


1653 .
	gídm


1656 .
ma¸o
 
Op20


1657 
SUB
 
	grs¸©ch
, 
	gΩc
, 
ªgpcba£


1659 
ADD
 
	grs¸©ch2
, 
	grs¸©ch
, #1

1660 
PushWlow
 
rs¸©ch2


1661 
Absﬁuã


1662 
BIC
 
	grs¸©ch
,Ñs¸©ch, #0
xFF0000


1663 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1664 
S9xSëPCBa£


1665 
	gADD1CYCLE


1666 .
	gídm


1667 .
ma¸o
 
OpFCX0


1668 
SUB
 
	grs¸©ch
, 
	gΩc
, 
ªgpcba£


1670 
ADD
 
	grs¸©ch2
, 
	grs¸©ch
, #1

1671 
PushWlow
 
rs¸©ch2


1672 
AbsﬁuãIndexedIndúe˘X0


1673 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1674 
S9xSëPCBa£


1675 
	gADD1CYCLE


1676 .
	gídm


1677 .
ma¸o
 
OpFCX1


1678 
SUB
 
	grs¸©ch
, 
	gΩc
, 
ªgpcba£


1680 
ADD
 
	grs¸©ch2
, 
	grs¸©ch
, #1

1681 
PushWlow
 
rs¸©ch2


1682 
AbsﬁuãIndexedIndúe˘X1


1683 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1684 
S9xSëPCBa£


1685 
	gADD1CYCLE


1686 .
	gídm


1687 .
ma¸o
 
Op60


1688 
PuŒWLow
 
Ωc


1689 
ADD
 
	grs¸©ch
, 
	gΩc
, #1

1690 
BIC
 
	grs¸©ch
,Ñs¸©ch,#0
x10000


1691 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgPB™k
, 
	gLSL
 #16

1692 
S9xSëPCBa£


1693 
	gADD3CYCLE


1694 .
	gídm


1698 .
ma¸o
 
Op54X1M1


1700 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1701 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1702 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1704 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1705 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #24

1706 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1707 
S9xGëByãLow


1708 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1709 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #24

1710 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1711 
S9xSëByãLow
 
rs¸©ch2


1713 
LDRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1714 
MOV
 
	gªgA
,ªgA,
	gLSR
 #8

1715 
ORR
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

1716 
ADD
 
	gªgX
,ÑegX, #0
x01000000


1717 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1718 
ADD
 
	gªgY
,ÑegY, #0
x01000000


1719 
CMP
 
	gªgA
, #0
xFFFF0000


1720 
SUBNE
 
	gΩc
,Ñpc, #3

1722 
MOV
 
	grs¸©ch
, 
	gªgA
, 
	gLSR
 #24

1723 
MOV
 
	gªgA
,ªgA,
	gLSL
 #8

1724 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1725 
	gADD2CYCLE2MEM


1726 .
	gídm


1727 .
ma¸o
 
Op54X1M0


1729 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1730 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1731 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1733 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1734 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #24

1735 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1736 
S9xGëByãLow


1737 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1738 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #24

1739 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1740 
S9xSëByãLow
 
rs¸©ch2


1741 
ADD
 
	gªgX
,ÑegX, #0
x01000000


1742 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1743 
ADD
 
	gªgY
,ÑegY, #0
x01000000


1744 
CMP
 
	gªgA
, #0
xFFFF0000


1745 
SUBNE
 
	gΩc
,Ñpc, #3

1746 
	gADD2CYCLE2MEM


1747 .
	gídm


1748 .
ma¸o
 
Op54X0M1


1750 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1751 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1752 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1754 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1755 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #16

1756 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1757 
S9xGëByãLow


1758 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1759 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #16

1760 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1761 
S9xSëByãLow
 
rs¸©ch2


1763 
LDRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1764 
MOV
 
	gªgA
,ªgA,
	gLSR
 #8

1765 
ORR
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

1766 
ADD
 
	gªgX
,ÑegX, #0
x00010000


1767 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1768 
ADD
 
	gªgY
,ÑegY, #0
x00010000


1769 
CMP
 
	gªgA
, #0
xFFFF0000


1770 
SUBNE
 
	gΩc
,Ñpc, #3

1772 
MOV
 
	grs¸©ch
, 
	gªgA
, 
	gLSR
 #24

1773 
MOV
 
	gªgA
,ªgA,
	gLSL
 #8

1774 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1775 
	gADD2CYCLE2MEM


1776 .
	gídm


1777 .
ma¸o
 
Op54X0M0


1779 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1780 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1781 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1783 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1784 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #16

1785 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1786 
S9xGëByãLow


1787 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1788 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #16

1789 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1790 
S9xSëByãLow
 
rs¸©ch2


1791 
ADD
 
	gªgX
,ÑegX, #0
x00010000


1792 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1793 
ADD
 
	gªgY
,ÑegY, #0
x00010000


1794 
CMP
 
	gªgA
, #0
xFFFF0000


1795 
SUBNE
 
	gΩc
,Ñpc, #3

1796 
	gADD2CYCLE2MEM


1797 .
	gídm


1799 .
ma¸o
 
Op44X1M1


1801 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1802 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1803 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1805 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1806 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #24

1807 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1808 
S9xGëByãLow


1809 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1810 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #24

1811 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1812 
S9xSëByãLow
 
rs¸©ch2


1814 
LDRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1815 
MOV
 
	gªgA
,ªgA,
	gLSR
 #8

1816 
ORR
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

1817 
SUB
 
	gªgX
,ÑegX, #0
x01000000


1818 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1819 
SUB
 
	gªgY
,ÑegY, #0
x01000000


1820 
CMP
 
	gªgA
, #0
xFFFF0000


1821 
SUBNE
 
	gΩc
,Ñpc, #3

1823 
MOV
 
	grs¸©ch
, 
	gªgA
, 
	gLSR
 #24

1824 
MOV
 
	gªgA
,ªgA,
	gLSL
 #8

1825 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1826 
	gADD2CYCLE2MEM


1827 .
	gídm


1828 .
ma¸o
 
Op44X1M0


1830 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1831 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1832 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1834 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1835 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #24

1836 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1837 
S9xGëByãLow


1838 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1839 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #24

1840 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1841 
S9xSëByãLow
 
rs¸©ch2


1842 
SUB
 
	gªgX
,ÑegX, #0
x01000000


1843 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1844 
SUB
 
	gªgY
,ÑegY, #0
x01000000


1845 
CMP
 
	gªgA
, #0
xFFFF0000


1846 
SUBNE
 
	gΩc
,Ñpc, #3

1847 
	gADD2CYCLE2MEM


1848 .
	gídm


1849 .
ma¸o
 
Op44X0M1


1851 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1852 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1853 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1855 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1856 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #16

1857 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1858 
S9xGëByãLow


1859 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1860 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #16

1861 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1862 
S9xSëByãLow
 
rs¸©ch2


1864 
LDRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1865 
MOV
 
	gªgA
,ªgA,
	gLSR
 #8

1866 
ORR
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

1867 
SUB
 
	gªgX
,ÑegX, #0
x00010000


1868 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1869 
SUB
 
	gªgY
,ÑegY, #0
x00010000


1870 
CMP
 
	gªgA
, #0
xFFFF0000


1871 
SUBNE
 
	gΩc
,Ñpc, #3

1873 
MOV
 
	grs¸©ch
, 
	gªgA
, 
	gLSR
 #24

1874 
MOV
 
	gªgA
,ªgA,
	gLSL
 #8

1875 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1876 
	gADD2CYCLE2MEM


1877 .
	gídm


1878 .
ma¸o
 
Op44X0M0


1880 
MOV
 
	grs¸©ch
, 
	gªgDB™k
, 
	gLSR
 #16

1881 
LDRB
 
	gªgDB™k
 , [
Ωc
], #1

1882 
LDRB
 
	grs¸©ch2
 , [
Ωc
], #1

1884 
ORR
 
	gªgDB™k
,ÑegDB™k, 
	grs¸©ch
, 
	gLSL
 #16

1885 
MOV
 
	grs¸©ch
 , 
	gªgX
, 
	gLSR
 #16

1886 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #16

1887 
S9xGëByãLow


1888 
MOV
 
	grs¸©ch2
, 
rs¸©ch


1889 
MOV
 
	grs¸©ch
 , 
	gªgY
, 
	gLSR
 #16

1890 
ORR
 
	grs¸©ch
 ,Ñs¸©ch, 
	gªgDB™k
, 
	gLSL
 #16

1891 
S9xSëByãLow
 
rs¸©ch2


1892 
SUB
 
	gªgX
,ÑegX, #0
x00010000


1893 
SUB
 
	gªgA
,ÑegA, #0
x00010000


1894 
SUB
 
	gªgY
,ÑegY, #0
x00010000


1895 
CMP
 
	gªgA
, #0
xFFFF0000


1896 
SUBNE
 
	gΩc
,Ñpc, #3

1897 
	gADD2CYCLE2MEM


1898 .
	gídm


1902 .
ma¸o
 
OpC2


1908 
MOV
 
	grs¸©ch3
, 
r°©us


1909 
LDRB
 
	grs¸©ch
, [
Ωc
], #1

1910 
MVN
 
	grs¸©ch
, 
rs¸©ch


1911 
AND
 
	gr°©us
,r°©us,
	grs¸©ch
, 
	gROR
 #(32-
	gSTATUS_SHIFTER
)

1912 
TST
 
	gr°©us
,#MASK_EMUL

1913 
	gBEQ
 1111f

1916 
ORR
 
	gr°©us
,r°©us,#(
	gMASK_MEM
|
	gMASK_INDEX
)

1917 
	gB
 1112f

1921 
TST
 
rs¸©ch3
,#MASK_INDEX

1922 
	gBEQ
 1113f

1924 
TST
 
	gr°©us
,#MASK_INDEX

1925 
	gBNE
 1113f

1927 
MOV
 
	gªgX
,ªgX,
	gLSR
 #8

1928 
MOV
 
	gªgY
,ªgY,
	gLSR
 #8

1931 
TST
 
rs¸©ch3
,#MASK_MEM

1932 
	gBEQ
 1112f

1934 
TST
 
	gr°©us
,#MASK_MEM

1935 
	gBNE
 1112f

1937 
MOV
 
	gªgA
,ªgA,
	gLSR
 #8

1939 
LDREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1940 
ORREQ
 
	gªgA
,ªgA,
	grs¸©ch
,
	gLSL
 #24

1942 
S9xFixCy˛es


1943 
ADD1CYCLE1MEM


1944 .
ídm


1945 .
ma¸o
 
OpE2


1951 
MOV
 
rs¸©ch3
, 
r°©us


1952 
LDRB
 
	grs¸©ch
, [
Ωc
], #1

1953 
ORR
 
	gr°©us
,r°©us,
	grs¸©ch
, 
	gLSL
 #STATUS_SHIFTER

1954 
TST
 
	gr°©us
,#MASK_EMUL

1955 
	gBEQ
 10111f

1958 
ORR
 
	gr°©us
,r°©us,#(
	gMASK_MEM
|
	gMASK_INDEX
)

1959 
	gB
 10112f

1963 
TST
 
rs¸©ch3
,#MASK_INDEX

1964 
	gBNE
 10113f

1966 
TST
 
	gr°©us
,#MASK_INDEX

1967 
	gBEQ
 10113f

1969 
MOV
 
	gªgX
,ªgX,
	gLSL
 #8

1970 
MOV
 
	gªgY
,ªgY,
	gLSL
 #8

1973 
TST
 
rs¸©ch3
,#MASK_MEM

1974 
	gBNE
 10112f

1976 
TST
 
	gr°©us
,#MASK_MEM

1977 
	gBEQ
 10112f

1980 
MOV
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

1981 
MOV
 
	gªgA
,ªgA,
	gLSL
 #8

1982 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

1984 
S9xFixCy˛es


1985 
ADD1CYCLE1MEM


1986 .
ídm


1990 .
ma¸o
 
OpEBM1


1992 
ADD
 
rs¸©ch
,
	gªgCPUv¨
,#RAH_ofs

1993 
MOV
 
	gªgA
,ªgA, 
	gLSR
 #24

1994 
SWPB
 
	gªgA
,ªgA,[
rs¸©ch
]

1995 
MOVS
 
	gªgA
,ªgA, 
	gLSL
 #24

1996 
UPDATE_ZN


1997 
	gADD2CYCLE


1998 .
	gídm


1999 .
ma¸o
 
OpEBM0


2001 
MOV
 
	grs¸©ch
, 
	gªgA
, 
	gROR
 #24

2002 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	gªgA
, 
	gLSR
 #8

2003 
MOV
 
	gªgA
, 
	grs¸©ch
, 
	gLSL
 #16

2004 
MOVS
 
	grs¸©ch
,rs¸©ch,
	gLSL
 #24

2005 
UPDATE_ZN


2006 
	gADD2CYCLE


2007 .
	gídm


2012 .
ma¸o
 
Op40X1M1


2014 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


2015 
PuŒBr


2016 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


2017 
PuŒWlow
 
Ωc


2018 
TST
 
	gr°©us
, #MASK_EMUL

2019 
ORRNE
 
	gr°©us
,Ñ°©us, #(
	gMASK_MEM
|
	gMASK_INDEX
)

2020 
	gBNE
 2401f

2021 
PuŒBrLow


2022 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


2023 
ORR
 
	gªgPB™k
,ªgPB™k,
	grs¸©ch


2025 
ADD
 
rs¸©ch
, 
	gΩc
, 
	gªgPB™k
, 
	gLSL
 #16

2026 
S9xSëPCBa£


2027 
TST
 
	gr°©us
, #MASK_INDEX

2029 
MOVEQ
 
	gªgX
,ªgX,
	gLSR
 #8

2030 
MOVEQ
 
	gªgY
,ªgY,
	gLSR
 #8

2031 
TST
 
	gr°©us
, #MASK_MEM

2033 
LDREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

2034 
MOVEQ
 
	gªgA
,ªgA,
	gLSR
 #8

2035 
ORREQ
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

2036 
ADD2CYCLE


2037 
	gS9xFixCy˛es


2038 .
	gídm


2039 .
ma¸o
 
Op40X0M1


2041 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


2042 
PuŒBr


2043 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


2044 
PuŒWlow
 
Ωc


2045 
TST
 
	gr°©us
, #MASK_EMUL

2046 
ORRNE
 
	gr°©us
,Ñ°©us, #(
	gMASK_MEM
|
	gMASK_INDEX
)

2047 
	gBNE
 2401f

2048 
PuŒBrLow


2049 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


2050 
ORR
 
	gªgPB™k
,ªgPB™k,
	grs¸©ch


2052 
ADD
 
rs¸©ch
, 
	gΩc
, 
	gªgPB™k
, 
	gLSL
 #16

2053 
S9xSëPCBa£


2054 
TST
 
	gr°©us
, #MASK_INDEX

2056 
MOVNE
 
	gªgX
,ªgX,
	gLSL
 #8

2057 
MOVNE
 
	gªgY
,ªgY,
	gLSL
 #8

2058 
TST
 
	gr°©us
, #MASK_MEM

2060 
LDREQB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

2061 
MOVEQ
 
	gªgA
,ªgA,
	gLSR
 #8

2062 
ORREQ
 
	gªgA
,ªgA,
	grs¸©ch
, 
	gLSL
 #24

2063 
ADD2CYCLE


2064 
	gS9xFixCy˛es


2065 .
	gídm


2066 .
ma¸o
 
Op40X1M0


2068 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


2069 
PuŒBr


2070 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


2071 
PuŒWlow
 
Ωc


2072 
TST
 
	gr°©us
, #MASK_EMUL

2073 
ORRNE
 
	gr°©us
,Ñ°©us, #(
	gMASK_MEM
|
	gMASK_INDEX
)

2074 
	gBNE
 2401f

2075 
PuŒBrLow


2076 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


2077 
ORR
 
	gªgPB™k
,ªgPB™k,
	grs¸©ch


2079 
ADD
 
rs¸©ch
, 
	gΩc
, 
	gªgPB™k
, 
	gLSL
 #16

2080 
S9xSëPCBa£


2081 
TST
 
	gr°©us
, #MASK_INDEX

2083 
MOVEQ
 
	gªgX
,ªgX,
	gLSR
 #8

2084 
MOVEQ
 
	gªgY
,ªgY,
	gLSR
 #8

2085 
TST
 
	gr°©us
, #MASK_MEM

2087 
MOVNE
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

2088 
MOVNE
 
	gªgA
,ªgA,
	gLSL
 #8

2089 
STRNEB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

2090 
ADD2CYCLE


2091 
	gS9xFixCy˛es


2092 .
	gídm


2093 .
ma¸o
 
Op40X0M0


2095 
BIC
 
	gr°©us
,r°©us,#0
xFF000000


2096 
PuŒBr


2097 
ORR
 
	gr°©us
,
	grs¸©ch
,
r°©us


2098 
PuŒWlow
 
Ωc


2099 
TST
 
	gr°©us
, #MASK_EMUL

2100 
ORRNE
 
	gr°©us
,Ñ°©us, #(
	gMASK_MEM
|
	gMASK_INDEX
)

2101 
	gBNE
 2401f

2102 
PuŒBrLow


2103 
BIC
 
	gªgPB™k
,ªgPB™k,#0
xFF


2104 
ORR
 
	gªgPB™k
,ªgPB™k,
	grs¸©ch


2106 
ADD
 
rs¸©ch
, 
	gΩc
, 
	gªgPB™k
, 
	gLSL
 #16

2107 
S9xSëPCBa£


2108 
TST
 
	gr°©us
, #MASK_INDEX

2110 
MOVNE
 
	gªgX
,ªgX,
	gLSL
 #8

2111 
MOVNE
 
	gªgY
,ªgY,
	gLSL
 #8

2112 
TST
 
	gr°©us
, #MASK_MEM

2115 
MOVNE
 
	grs¸©ch
,
	gªgA
,
	gLSR
 #24

2116 
MOVNE
 
	gªgA
,ªgA,
	gLSL
 #8

2117 
STRNEB
 
	grs¸©ch
,[
ªgCPUv¨
,#RAH_ofs]

2118 
ADD2CYCLE


2119 
	gS9xFixCy˛es


2120 .
	gídm


2126 .
ma¸o
 
OpCB


2127 
LDRB
 
	grs¸©ch
,[
ªgCPUv¨
,#IRQActive_ofs]

2128 
MOVS
 
	grs¸©ch
,
rs¸©ch


2130 
ADD2CYCLENE


2131 
	gBNE
 1234f

2135 
MOV
 
	grs¸©ch
,#1

2136 
SUB
 
	gΩc
,rpc,#1

2140 
STRB
 
	grs¸©ch
,[
ªgCPUv¨
,#WaitingForInterrupt_ofs]

2141 
LDR
 
	gªgCy˛es
,[
ªgCPUv¨
,#NextEvent_ofs]

2153 
LDRB
 
	grs¸©ch
,[
ªgCPUv¨
,#APUExecuting_ofs]

2154 
MOVS
 
	grs¸©ch
,
rs¸©ch


2155 
	gBEQ
 1234f

2156 
	gasmAPU_EXECUTE2


2159 .
ídm


2160 .
ma¸o
 
OpDB


2161 
SUB
 
Ωc
,
	gΩc
,#1

2163 .
	gídm


2164 .
ma¸o
 
	gOp42


2165 .
	gídm


2169 .
ma¸o
 
Op29M1


2170 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2171 
ANDS
 
	gªgA
 ,ÑegA, 
	grs¸©ch
, 
	gLSL
 #24

2172 
UPDATE_ZN


2173 
	gADD1MEM


2174 .
	gídm


2175 .
ma¸o
 
Op29M0


2176 
LDRB
 
	grs¸©ch2
 , [
Ωc
,#1]

2177 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2178 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2179 
ANDS
 
	gªgA
 ,ÑegA, 
	grs¸©ch
, 
	gLSL
 #16

2180 
UPDATE_ZN


2181 
	gADD2MEM


2182 .
	gídm


2200 .
ma¸o
 
Op49M0


2201 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

2202 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2203 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
,
	gLSL
 #8

2204 
EORS
 
	gªgA
,ÑegA, 
	grs¸©ch
,
	gLSL
 #16

2205 
UPDATE_ZN


2206 
	gADD2MEM


2207 .
	gídm


2210 .
ma¸o
 
Op49M1


2211 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2212 
EORS
 
	gªgA
,ÑegA, 
	grs¸©ch
,
	gLSL
 #24

2213 
UPDATE_ZN


2214 
	gADD1MEM


2215 .
	gídm


2220 .
ma¸o
 
Op81M1


2221 
	gSTA8


2224 .
	gídm


2225 .
ma¸o
 
Op81M0


2226 
	gSTA16


2229 .
	gídm


2234 .
ma¸o
 
Op89M1


2235 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2236 
TST
 
	gªgA
, 
	grs¸©ch
, 
	gLSL
 #24

2237 
UPDATE_Z


2238 
	gADD1MEM


2239 .
	gídm


2240 .
ma¸o
 
Op89M0


2241 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

2242 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2243 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2244 
TST
 
	gªgA
, 
	grs¸©ch
, 
	gLSL
 #16

2245 
UPDATE_Z


2246 
	gADD2MEM


2247 .
	gídm


2256 .
ma¸o
 
OpA0X1


2257 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2258 
MOVS
 
	gªgY
, 
	grs¸©ch
, 
	gLSL
 #24

2259 
UPDATE_ZN


2260 
	gADD1MEM


2261 .
	gídm


2262 .
ma¸o
 
OpA0X0


2263 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

2264 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2265 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2266 
MOVS
 
	gªgY
, 
	grs¸©ch
, 
	gLSL
 #16

2267 
UPDATE_ZN


2268 
	gADD2MEM


2269 .
	gídm


2273 .
ma¸o
 
OpA2X1


2274 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2275 
MOVS
 
	gªgX
, 
	grs¸©ch
, 
	gLSL
 #24

2276 
UPDATE_ZN


2277 
	gADD1MEM


2278 .
	gídm


2279 .
ma¸o
 
OpA2X0


2280 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

2281 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2282 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2283 
MOVS
 
	gªgX
, 
	grs¸©ch
, 
	gLSL
 #16

2284 
UPDATE_ZN


2285 
	gADD2MEM


2286 .
	gídm


2290 .
ma¸o
 
OpA9M1


2291 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2292 
MOVS
 
	gªgA
, 
	grs¸©ch
, 
	gLSL
 #24

2293 
UPDATE_ZN


2294 
	gADD1MEM


2295 .
	gídm


2296 .
ma¸o
 
OpA9M0


2297 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

2298 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2299 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2300 
MOVS
 
	gªgA
, 
	grs¸©ch
, 
	gLSL
 #16

2301 
UPDATE_ZN


2302 
	gADD2MEM


2303 .
	gídm


2307 .
ma¸o
 
OpC0X1


2308 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2309 
SUBS
 
	grs¸©ch2
 , 
	gªgY
 , 
	grs¸©ch
, 
	gLSL
 #24

2310 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

2311 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

2312 
UPDATE_ZN


2313 
	gADD1MEM


2314 .
	gídm


2315 .
ma¸o
 
OpC0X0


2316 
LDRB
 
	grs¸©ch2
 , [
Ωc
, #1]

2317 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2318 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2319 
SUBS
 
	grs¸©ch2
 , 
	gªgY
, 
	grs¸©ch
, 
	gLSL
 #16

2320 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

2321 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

2322 
UPDATE_ZN


2323 
	gADD2MEM


2324 .
	gídm


2332 .
ma¸o
 
OpC9M1


2333 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2334 
SUBS
 
	grs¸©ch2
 , 
	gªgA
 , 
	grs¸©ch
, 
	gLSL
 #24

2335 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

2336 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

2337 
UPDATE_ZN


2338 
	gADD1MEM


2339 .
	gídm


2340 .
ma¸o
 
OpC9M0


2341 
LDRB
 
	grs¸©ch2
 , [
Ωc
,#1]

2342 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2343 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2344 
SUBS
 
	grs¸©ch2
 , 
	gªgA
, 
	grs¸©ch
, 
	gLSL
 #16

2345 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

2346 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

2347 
UPDATE_ZN


2348 
	gADD2MEM


2349 .
	gídm


2353 .
ma¸o
 
OpE0X1


2354 
LDRB
 
	grs¸©ch
 , [
Ωc
], #1

2355 
SUBS
 
	grs¸©ch2
 , 
	gªgX
 , 
	grs¸©ch
, 
	gLSL
 #24

2356 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

2357 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

2358 
UPDATE_ZN


2359 
	gADD1MEM


2360 .
	gídm


2361 .
ma¸o
 
OpE0X0


2362 
LDRB
 
	grs¸©ch2
 , [
Ωc
,#1]

2363 
LDRB
 
	grs¸©ch
 , [
Ωc
], #2

2364 
ORR
 
	grs¸©ch
,Ñs¸©ch, 
	grs¸©ch2
, 
	gLSL
 #8

2365 
SUBS
 
	grs¸©ch2
 , 
	gªgX
, 
	grs¸©ch
, 
	gLSL
 #16

2366 
BICCC
 
	gr°©us
,Ñstatus, #MASK_CARRY

2367 
ORRCS
 
	gr°©us
,Ñstatus, #MASK_CARRY

2368 
UPDATE_ZN


2369 
	gADD2MEM


2370 .
	gídm


	@os9x_asm_cpu.cpp

1 
	~"¢es9x.h
"

2 
	~"≠u.h
"

3 
	~"µu.h
"

4 
	~"˝uexec.h
"

7 
	~"os9x_asm_˝u.h
"

14 
START_EXTERN_C


16 
	$asm_S9xSëPCBa£
(
uöt32
 
Addªss
)

18 #ifde‡
__debug_c_£çc__


19 
	`¥ötf
("spcb\n");

21 
	`S9xSëPCBa£
(
Addªss
);

22 
	}
}

26 
	#PushW
(
w
Ë\

	)

27 
S9xSëW‹d
 (
w
, 
Regi°îs
.
S
.
W
 - 1);\

28 
	gRegi°îs
.
	gS
.
	gW
 -= 2;

29 
	#PushB
(
b
)\

	)

30 
S9xSëByã
 (
b
, 
Regi°îs
.
S
.
W
--);

33 
	$asm_S9xMaöLo›
()

37 
	`asmMaöLo›
(&
CPU
);

40 
	}
}

42 
	$asm_S9xDoHBœnkPro˚ssög
()

44 #ifde‡
__debug_c_hbœnk__


45 
	`¥ötf
("hblank\n");

48 
	`S9xDoHBœnkPro˚ssög
();

50 
	}
}

53 
uöt8
 
	$asm_S9xGëByã
(
uöt32
 
Addªss
)

55 #ifde‡
__debug_c_io__


56 
	`¥ötf
("gb\n");

58  
	`S9xGëByã
(
Addªss
);

59 
	}
}

61 
uöt16
 
	$asm_S9xGëW‹d
(
uöt32
 
Addªss
)

63 #ifde‡
__debug_c_io__


64 
	`¥ötf
("gw\n");

66  
	`S9xGëW‹d
(
Addªss
);

67 
	}
}

70 
	$asm_S9xSëByã
(
uöt32
 
Addªss
,
uöt8
 
vÆue
)

72 #ifde‡
__debug_c_io__


73 
	`¥ötf
("sb\n");

75 
	`S9xSëByã
(
vÆue
,
Addªss
);

76 
	}
}

78 
	$asm_S9xSëW‹d
(
uöt32
 
Addªss
,
uöt16
 
vÆue
)

80 #ifde‡
__debug_c_io__


81 
	`¥ötf
("sw\n");

83 
	`S9xSëW‹d
(
vÆue
,
Addªss
);

84 
	}
}

87 
	$asm_S9xOpcode_NMI
()

89 #ifde‡
__debug_c_nmi__


90 
	`¥ötf
("nmi\n");

94 i‡(!
	`CheckEmuœti⁄
())

96 
	`PushB
 (
Regi°îs
.
PB
);

97 
	`PushW
 (
CPU
.
PC
 - CPU.
PCBa£
);

99 
	`PushB
 (
Regi°îs
.
PL
);

100 
	`CÀ¨DecimÆ
 ();

101 
	`SëIRQ
 ();

103 
Regi°îs
.
PB
 = 0;

105 #ifde‡
USE_SA1


106 i‡(
Sëtögs
.
SA1
 && (
Mem‹y
.
FûlRAM
 [0x2209] & 0x20))

107 
	`S9xSëPCBa£
 (
Mem‹y
.
FûlRAM
 [0x220c] |

108 (
Mem‹y
.
FûlRAM
 [0x220d] << 8));

111 
	`S9xSëPCBa£
 (
	`S9xGëW‹d
 (0xFFEA));

112 #ifde‡
VAR_CYCLES


113 
CPU
.
Cy˛es
 +
TWO_CYCLES
;

115 
CPU
.
Cy˛es
 += 8;

120 
	`PushW
 (
CPU
.
PC
 - CPU.
PCBa£
);

122 
	`PushB
 (
Regi°îs
.
PL
);

123 
	`CÀ¨DecimÆ
 ();

124 
	`SëIRQ
 ();

126 
Regi°îs
.
PB
 = 0;

128 #ifde‡
USE_SA1


129 i‡(
Sëtögs
.
SA1
 && (
Mem‹y
.
FûlRAM
 [0x2209] & 0x20))

130 
	`S9xSëPCBa£
 (
Mem‹y
.
FûlRAM
 [0x220c] |

131 (
Mem‹y
.
FûlRAM
 [0x220d] << 8));

134 
	`S9xSëPCBa£
 (
	`S9xGëW‹d
 (0xFFFA));

135 #ifde‡
VAR_CYCLES


136 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

138 
CPU
.
Cy˛es
 += 6;

143 
	}
}

145 
	$asm_S9xOpcode_IRQ
()

147 #ifde‡
__debug_c_úq__


148 
	`¥ötf
("irq\n");

152 i‡(!
	`CheckEmuœti⁄
())

154 
	`PushB
 (
Regi°îs
.
PB
);

155 
	`PushW
 (
CPU
.
PC
 - CPU.
PCBa£
);

157 
	`PushB
 (
Regi°îs
.
PL
);

158 
	`CÀ¨DecimÆ
 ();

159 
	`SëIRQ
 ();

161 
Regi°îs
.
PB
 = 0;

164 #ifde‡
USE_SA1


165 i‡(
Sëtögs
.
SA1
 && (
Mem‹y
.
FûlRAM
 [0x2209] & 0x40))

166 
	`S9xSëPCBa£
 (
Mem‹y
.
FûlRAM
 [0x220e] |

167 (
Mem‹y
.
FûlRAM
 [0x220f] << 8));

170 
	`S9xSëPCBa£
 (
	`S9xGëW‹d
 (0xFFEE));

171 #ifde‡
VAR_CYCLES


172 
CPU
.
Cy˛es
 +
TWO_CYCLES
;

174 
CPU
.
Cy˛es
 += 8;

179 
	`PushW
 (
CPU
.
PC
 - CPU.
PCBa£
);

181 
	`PushB
 (
Regi°îs
.
PL
);

182 
	`CÀ¨DecimÆ
 ();

183 
	`SëIRQ
 ();

185 
Regi°îs
.
PB
 = 0;

188 #ifde‡
USE_SA1


189 i‡(
Sëtögs
.
SA1
 && (
Mem‹y
.
FûlRAM
 [0x2209] & 0x40))

190 
	`S9xSëPCBa£
 (
Mem‹y
.
FûlRAM
 [0x220e] |

191 (
Mem‹y
.
FûlRAM
 [0x220f] << 8));

194 
	`S9xSëPCBa£
 (
	`S9xGëW‹d
 (0xFFFE));

195 #ifde‡
VAR_CYCLES


196 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

198 
CPU
.
Cy˛es
 += 6;

203 
	}
}

207 #i‚de‡
ASM_SPC700


209 
	$asm_APU_EXECUTE
()

211 #ifde‡
__debug_c_≠uex__


212 
	`¥ötf
("apuexec\n");

214 if(
CPU
.
APU_APUExecutög
 != 1) ;

216 
CPU
.
APU_Cy˛es
 <CPU.
Cy˛es
)

218 
	`APU_EXECUTE1
();

220 
	}
}

222 
	$asm_APU_EXECUTE2
()

224 if(
CPU
.
APU_APUExecutög
 != 1) ;

226 
ICPU
.
CPUExecutög
 = 
FALSE
;

229 
	`APU_EXECUTE1
();

230 } 
CPU
.
APU_Cy˛es
 < CPU.
NextEvít
);

231 
ICPU
.
CPUExecutög
 = 
TRUE
;

232 
	}
}

236 
	gEND_EXTERN_C


	@os9x_asm_cpu.h

1 #i‚de‡
__os9x_asm_˝u__


2 
	#__os9x_asm_˝u__


	)

4 "C" 
ã°_›code
(
SCPUSèã
 *
˝u±r
);

6 "C" 
asmMaöLo›
(
SCPUSèã
 *
˝u±r
);

8 "C" 
asm_S9xMaöLo›
();

	@pixform.h

41 #i‚de‡
_PIXFORM_H_


42 
	#_PIXFORM_H_


	)

44 #ifde‡
GFX_MULTI_FORMAT


46 íum { 
	mRGB565
, 
	mRGB555
, 
	mBGR565
, 
	mBGR555
, 
	mGBR565
, 
	mGBR555
, 
	mRGB5551
 };

48 
	#BUILD_PIXEL
(
R
,
G
,
B
Ë((*
GFX
.
BuûdPixñ
Ë(R, G, B))

	)

49 
	#BUILD_PIXEL2
(
R
,
G
,
B
Ë((*
GFX
.
BuûdPixñ2
Ë(R, G, B))

	)

50 
	#DECOMPOSE_PIXEL
(
Pixñ
,
R
,
G
,
B
Ë((*
GFX
.
Decompo£Pixñ
Ë(Pixñ, R,G,B))

	)

52 
uöt32
 
RED_LOW_BIT_MASK
;

53 
uöt32
 
GREEN_LOW_BIT_MASK
;

54 
uöt32
 
BLUE_LOW_BIT_MASK
;

55 
uöt32
 
RED_HI_BIT_MASK
;

56 
uöt32
 
GREEN_HI_BIT_MASK
;

57 
uöt32
 
BLUE_HI_BIT_MASK
;

58 
uöt32
 
MAX_RED
;

59 
uöt32
 
MAX_GREEN
;

60 
uöt32
 
MAX_BLUE
;

61 
uöt32
 
SPARE_RGB_BIT_MASK
;

62 
uöt32
 
GREEN_HI_BIT
;

63 
uöt32
 
RGB_LOW_BITS_MASK
;

64 
uöt32
 
RGB_HI_BITS_MASK
;

65 
uöt32
 
RGB_HI_BITS_MASKx2
;

66 
uöt32
 
RGB_REMOVE_LOW_BITS_MASK
;

67 
uöt32
 
FIRST_COLOR_MASK
;

68 
uöt32
 
SECOND_COLOR_MASK
;

69 
uöt32
 
THIRD_COLOR_MASK
;

70 
uöt32
 
ALPHA_BITS_MASK
;

71 
uöt32
 
FIRST_THIRD_COLOR_MASK
;

72 
uöt32
 
TWO_LOW_BITS_MASK
;

73 
uöt32
 
HIGH_BITS_SHIFTED_TWO_MASK
;

78 
	#BUILD_PIXEL_RGB565
(
R
,
G
,
B
Ë(((Ë(RË<< 11Ë| ((Ë(GË<< 6Ë| (Ë(B))

	)

79 
	#BUILD_PIXEL2_RGB565
(
R
,
G
,
B
Ë(((Ë(RË<< 11Ë| ((Ë(GË<< 5Ë| (Ë(B))

	)

80 
	#DECOMPOSE_PIXEL_RGB565
(
PIX
,
R
,
G
,
B
Ë{(RË(PIXË>> 11; (GË((PIXË>> 6Ë& 0x1f; (BË(PIXË& 0x1f; }

	)

81 
	#SPARE_RGB_BIT_MASK_RGB565
 (1 << 5)

	)

83 
	#MAX_RED_RGB565
 31

	)

84 
	#MAX_GREEN_RGB565
 63

	)

85 
	#MAX_BLUE_RGB565
 31

	)

86 
	#RED_LOW_BIT_MASK_RGB565
 0x0800

	)

87 
	#GREEN_LOW_BIT_MASK_RGB565
 0x0020

	)

88 
	#BLUE_LOW_BIT_MASK_RGB565
 0x0001

	)

89 
	#RED_HI_BIT_MASK_RGB565
 0x8000

	)

90 
	#GREEN_HI_BIT_MASK_RGB565
 0x0400

	)

91 
	#BLUE_HI_BIT_MASK_RGB565
 0x0010

	)

92 
	#FIRST_COLOR_MASK_RGB565
 0xF800

	)

93 
	#SECOND_COLOR_MASK_RGB565
 0x07E0

	)

94 
	#THIRD_COLOR_MASK_RGB565
 0x001F

	)

95 
	#ALPHA_BITS_MASK_RGB565
 0x0000

	)

98 
	#BUILD_PIXEL_RGB555
(
R
,
G
,
B
Ë(((Ë(RË<< 10Ë| ((Ë(GË<< 5Ë| (Ë(B))

	)

99 
	#BUILD_PIXEL2_RGB555
(
R
,
G
,
B
Ë(((Ë(RË<< 10Ë| ((Ë(GË<< 5Ë| (Ë(B))

	)

100 
	#DECOMPOSE_PIXEL_RGB555
(
PIX
,
R
,
G
,
B
Ë{(RË(PIXË>> 10; (GË((PIXË>> 5Ë& 0x1f; (BË(PIXË& 0x1f; }

	)

101 
	#SPARE_RGB_BIT_MASK_RGB555
 (1 << 15)

	)

103 
	#MAX_RED_RGB555
 31

	)

104 
	#MAX_GREEN_RGB555
 31

	)

105 
	#MAX_BLUE_RGB555
 31

	)

106 
	#RED_LOW_BIT_MASK_RGB555
 0x0400

	)

107 
	#GREEN_LOW_BIT_MASK_RGB555
 0x0020

	)

108 
	#BLUE_LOW_BIT_MASK_RGB555
 0x0001

	)

109 
	#RED_HI_BIT_MASK_RGB555
 0x4000

	)

110 
	#GREEN_HI_BIT_MASK_RGB555
 0x0200

	)

111 
	#BLUE_HI_BIT_MASK_RGB555
 0x0010

	)

112 
	#FIRST_COLOR_MASK_RGB555
 0x7C00

	)

113 
	#SECOND_COLOR_MASK_RGB555
 0x03E0

	)

114 
	#THIRD_COLOR_MASK_RGB555
 0x001F

	)

115 
	#ALPHA_BITS_MASK_RGB555
 0x0000

	)

118 
	#BUILD_PIXEL_BGR565
(
R
,
G
,
B
Ë(((Ë(BË<< 11Ë| ((Ë(GË<< 6Ë| (Ë(R))

	)

119 
	#BUILD_PIXEL2_BGR565
(
R
,
G
,
B
Ë(((Ë(BË<< 11Ë| ((Ë(GË<< 5Ë| (Ë(R))

	)

120 
	#DECOMPOSE_PIXEL_BGR565
(
PIX
,
R
,
G
,
B
Ë{(BË(PIXË>> 11; (GË((PIXË>> 6Ë& 0x1f; (RË(PIXË& 0x1f; }

	)

121 
	#SPARE_RGB_BIT_MASK_BGR565
 (1 << 5)

	)

123 
	#MAX_RED_BGR565
 31

	)

124 
	#MAX_GREEN_BGR565
 63

	)

125 
	#MAX_BLUE_BGR565
 31

	)

126 
	#RED_LOW_BIT_MASK_BGR565
 0x0001

	)

127 
	#GREEN_LOW_BIT_MASK_BGR565
 0x0040

	)

128 
	#BLUE_LOW_BIT_MASK_BGR565
 0x0800

	)

129 
	#RED_HI_BIT_MASK_BGR565
 0x0010

	)

130 
	#GREEN_HI_BIT_MASK_BGR565
 0x0400

	)

131 
	#BLUE_HI_BIT_MASK_BGR565
 0x8000

	)

132 
	#FIRST_COLOR_MASK_BGR565
 0xF800

	)

133 
	#SECOND_COLOR_MASK_BGR565
 0x07E0

	)

134 
	#THIRD_COLOR_MASK_BGR565
 0x001F

	)

135 
	#ALPHA_BITS_MASK_BGR565
 0x0000

	)

138 
	#BUILD_PIXEL_BGR555
(
R
,
G
,
B
Ë(((Ë(BË<< 10Ë| ((Ë(GË<< 5Ë| (Ë(R))

	)

139 
	#BUILD_PIXEL2_BGR555
(
R
,
G
,
B
Ë(((Ë(BË<< 10Ë| ((Ë(GË<< 5Ë| (Ë(R))

	)

140 
	#DECOMPOSE_PIXEL_BGR555
(
PIX
,
R
,
G
,
B
Ë{(BË(PIXË>> 10; (GË((PIXË>> 5Ë& 0x1f; (RË(PIXË& 0x1f; }

	)

141 
	#SPARE_RGB_BIT_MASK_BGR555
 (1 << 15)

	)

143 
	#MAX_RED_BGR555
 31

	)

144 
	#MAX_GREEN_BGR555
 31

	)

145 
	#MAX_BLUE_BGR555
 31

	)

146 
	#RED_LOW_BIT_MASK_BGR555
 0x0001

	)

147 
	#GREEN_LOW_BIT_MASK_BGR555
 0x0020

	)

148 
	#BLUE_LOW_BIT_MASK_BGR555
 0x0400

	)

149 
	#RED_HI_BIT_MASK_BGR555
 0x0010

	)

150 
	#GREEN_HI_BIT_MASK_BGR555
 0x0200

	)

151 
	#BLUE_HI_BIT_MASK_BGR555
 0x4000

	)

152 
	#FIRST_COLOR_MASK_BGR555
 0x7C00

	)

153 
	#SECOND_COLOR_MASK_BGR555
 0x03E0

	)

154 
	#THIRD_COLOR_MASK_BGR555
 0x001F

	)

155 
	#ALPHA_BITS_MASK_BGR555
 0x0000

	)

158 
	#BUILD_PIXEL_GBR565
(
R
,
G
,
B
Ë(((Ë(GË<< 11Ë| ((Ë(BË<< 6Ë| (Ë(R))

	)

159 
	#BUILD_PIXEL2_GBR565
(
R
,
G
,
B
Ë(((Ë(GË<< 11Ë| ((Ë(BË<< 5Ë| (Ë(R))

	)

160 
	#DECOMPOSE_PIXEL_GBR565
(
PIX
,
R
,
G
,
B
Ë{(GË(PIXË>> 11; (BË((PIXË>> 6Ë& 0x1f; (RË(PIXË& 0x1f; }

	)

161 
	#SPARE_RGB_BIT_MASK_GBR565
 (1 << 5)

	)

163 
	#MAX_RED_GBR565
 31

	)

164 
	#MAX_BLUE_GBR565
 63

	)

165 
	#MAX_GREEN_GBR565
 31

	)

166 
	#RED_LOW_BIT_MASK_GBR565
 0x0001

	)

167 
	#BLUE_LOW_BIT_MASK_GBR565
 0x0040

	)

168 
	#GREEN_LOW_BIT_MASK_GBR565
 0x0800

	)

169 
	#RED_HI_BIT_MASK_GBR565
 0x0010

	)

170 
	#BLUE_HI_BIT_MASK_GBR565
 0x0400

	)

171 
	#GREEN_HI_BIT_MASK_GBR565
 0x8000

	)

172 
	#FIRST_COLOR_MASK_GBR565
 0xF800

	)

173 
	#SECOND_COLOR_MASK_GBR565
 0x07E0

	)

174 
	#THIRD_COLOR_MASK_GBR565
 0x001F

	)

175 
	#ALPHA_BITS_MASK_GBR565
 0x0000

	)

178 
	#BUILD_PIXEL_GBR555
(
R
,
G
,
B
Ë(((Ë(GË<< 10Ë| ((Ë(BË<< 5Ë| (Ë(R))

	)

179 
	#BUILD_PIXEL2_GBR555
(
R
,
G
,
B
Ë(((Ë(GË<< 10Ë| ((Ë(BË<< 5Ë| (Ë(R))

	)

180 
	#DECOMPOSE_PIXEL_GBR555
(
PIX
,
R
,
G
,
B
Ë{(GË(PIXË>> 10; (BË((PIXË>> 5Ë& 0x1f; (RË(PIXË& 0x1f; }

	)

181 
	#SPARE_RGB_BIT_MASK_GBR555
 (1 << 15)

	)

183 
	#MAX_RED_GBR555
 31

	)

184 
	#MAX_BLUE_GBR555
 31

	)

185 
	#MAX_GREEN_GBR555
 31

	)

186 
	#RED_LOW_BIT_MASK_GBR555
 0x0001

	)

187 
	#BLUE_LOW_BIT_MASK_GBR555
 0x0020

	)

188 
	#GREEN_LOW_BIT_MASK_GBR555
 0x0400

	)

189 
	#RED_HI_BIT_MASK_GBR555
 0x0010

	)

190 
	#BLUE_HI_BIT_MASK_GBR555
 0x0200

	)

191 
	#GREEN_HI_BIT_MASK_GBR555
 0x4000

	)

192 
	#FIRST_COLOR_MASK_GBR555
 0x7C00

	)

193 
	#SECOND_COLOR_MASK_GBR555
 0x03E0

	)

194 
	#THIRD_COLOR_MASK_GBR555
 0x001F

	)

195 
	#ALPHA_BITS_MASK_GBR555
 0x0000

	)

198 
	#BUILD_PIXEL_RGB5551
(
R
,
G
,
B
Ë(((Ë(RË<< 11Ë| ((Ë(GË<< 6Ë| (Ë((BË<< 1Ë| 1)

	)

199 
	#BUILD_PIXEL2_RGB5551
(
R
,
G
,
B
Ë(((Ë(RË<< 11Ë| ((Ë(GË<< 6Ë| (Ë((BË<< 1Ë| 1)

	)

200 
	#DECOMPOSE_PIXEL_RGB5551
(
PIX
,
R
,
G
,
B
Ë{(RË(PIXË>> 11; (GË((PIXË>> 6Ë& 0x1f; (BË((PIXË>> 1Ë& 0x1f; }

	)

201 
	#SPARE_RGB_BIT_MASK_RGB5551
 (1)

	)

203 
	#MAX_RED_RGB5551
 31

	)

204 
	#MAX_GREEN_RGB5551
 31

	)

205 
	#MAX_BLUE_RGB5551
 31

	)

206 
	#RED_LOW_BIT_MASK_RGB5551
 0x0800

	)

207 
	#GREEN_LOW_BIT_MASK_RGB5551
 0x0040

	)

208 
	#BLUE_LOW_BIT_MASK_RGB5551
 0x0002

	)

209 
	#RED_HI_BIT_MASK_RGB5551
 0x8000

	)

210 
	#GREEN_HI_BIT_MASK_RGB5551
 0x0400

	)

211 
	#BLUE_HI_BIT_MASK_RGB5551
 0x0020

	)

212 
	#FIRST_COLOR_MASK_RGB5551
 0xf800

	)

213 
	#SECOND_COLOR_MASK_RGB5551
 0x07c0

	)

214 
	#THIRD_COLOR_MASK_RGB5551
 0x003e

	)

215 
	#ALPHA_BITS_MASK_RGB5551
 0x0001

	)

217 #i‚de‡
GFX_MULTI_FORMAT


218 
	#CONCAT
(
X
,
Y
ËX##
	)
Y

222 
	#BUILD_PIXEL_D
(
F
,
R
,
G
,
B
Ë
	`CONCAT
(
BUILD_PIXEL_
,FË(R,G,B)

	)

223 
	#BUILD_PIXEL2_D
(
F
,
R
,
G
,
B
Ë
	`CONCAT
(
BUILD_PIXEL2_
,FË(R,G,B)

	)

224 
	#DECOMPOSE_PIXEL_D
(
F
,
PIX
,
R
,
G
,
B
Ë
	`CONCAT
(
DECOMPOSE_PIXEL_
,FË(PIX,R,G,B)

	)

226 
	#BUILD_PIXEL
(
R
,
G
,
B
Ë
	`BUILD_PIXEL_D
(
PIXEL_FORMAT
,R,G,B)

	)

227 
	#BUILD_PIXEL2
(
R
,
G
,
B
Ë
	`BUILD_PIXEL2_D
(
PIXEL_FORMAT
,R,G,B)

	)

228 
	#DECOMPOSE_PIXEL
(
PIX
,
R
,
G
,
B
Ë
	`DECOMPOSE_PIXEL_D
(
PIXEL_FORMAT
,PIX,R,G,B)

	)

230 
	#MAX_RED_D
(
F
Ë
	`CONCAT
(
MAX_RED_
,F)

	)

231 
	#MAX_BLUE_D
(
F
Ë
	`CONCAT
(
MAX_BLUE_
,F)

	)

232 
	#MAX_GREEN_D
(
F
Ë
	`CONCAT
(
MAX_GREEN_
,F)

	)

233 
	#RED_LOW_BIT_MASK_D
(
F
Ë
	`CONCAT
(
RED_LOW_BIT_MASK_
,F)

	)

234 
	#BLUE_LOW_BIT_MASK_D
(
F
Ë
	`CONCAT
(
BLUE_LOW_BIT_MASK_
,F)

	)

235 
	#GREEN_LOW_BIT_MASK_D
(
F
Ë
	`CONCAT
(
GREEN_LOW_BIT_MASK_
,F)

	)

236 
	#RED_HI_BIT_MASK_D
(
F
Ë
	`CONCAT
(
RED_HI_BIT_MASK_
,F)

	)

237 
	#BLUE_HI_BIT_MASK_D
(
F
Ë
	`CONCAT
(
BLUE_HI_BIT_MASK_
,F)

	)

238 
	#GREEN_HI_BIT_MASK_D
(
F
Ë
	`CONCAT
(
GREEN_HI_BIT_MASK_
,F)

	)

239 
	#FIRST_COLOR_MASK_D
(
F
Ë
	`CONCAT
(
FIRST_COLOR_MASK_
,F)

	)

240 
	#SECOND_COLOR_MASK_D
(
F
Ë
	`CONCAT
(
SECOND_COLOR_MASK_
,F)

	)

241 
	#THIRD_COLOR_MASK_D
(
F
Ë
	`CONCAT
(
THIRD_COLOR_MASK_
,F)

	)

242 
	#ALPHA_BITS_MASK_D
(
F
Ë
	`CONCAT
(
ALPHA_BITS_MASK_
,F)

	)

244 
	#MAX_RED
 
	`MAX_RED_D
(
PIXEL_FORMAT
)

	)

245 
	#MAX_BLUE
 
	`MAX_BLUE_D
(
PIXEL_FORMAT
)

	)

246 
	#MAX_GREEN
 
	`MAX_GREEN_D
(
PIXEL_FORMAT
)

	)

247 
	#RED_LOW_BIT_MASK
 
	`RED_LOW_BIT_MASK_D
(
PIXEL_FORMAT
)

	)

248 
	#BLUE_LOW_BIT_MASK
 
	`BLUE_LOW_BIT_MASK_D
(
PIXEL_FORMAT
)

	)

249 
	#GREEN_LOW_BIT_MASK
 
	`GREEN_LOW_BIT_MASK_D
(
PIXEL_FORMAT
)

	)

250 
	#RED_HI_BIT_MASK
 
	`RED_HI_BIT_MASK_D
(
PIXEL_FORMAT
)

	)

251 
	#BLUE_HI_BIT_MASK
 
	`BLUE_HI_BIT_MASK_D
(
PIXEL_FORMAT
)

	)

252 
	#GREEN_HI_BIT_MASK
 
	`GREEN_HI_BIT_MASK_D
(
PIXEL_FORMAT
)

	)

253 
	#FIRST_COLOR_MASK
 
	`FIRST_COLOR_MASK_D
(
PIXEL_FORMAT
)

	)

254 
	#SECOND_COLOR_MASK
 
	`SECOND_COLOR_MASK_D
(
PIXEL_FORMAT
)

	)

255 
	#THIRD_COLOR_MASK
 
	`THIRD_COLOR_MASK_D
(
PIXEL_FORMAT
)

	)

256 
	#ALPHA_BITS_MASK
 
	`ALPHA_BITS_MASK_D
(
PIXEL_FORMAT
)

	)

258 
	#GREEN_HI_BIT
 ((
MAX_GREEN
 + 1Ë>> 1)

	)

259 
	#RGB_LOW_BITS_MASK
 (
RED_LOW_BIT_MASK
 | 
GREEN_LOW_BIT_MASK
 | \

260 
BLUE_LOW_BIT_MASK
)

	)

261 
	#RGB_HI_BITS_MASK
 (
RED_HI_BIT_MASK
 | 
GREEN_HI_BIT_MASK
 | \

262 
BLUE_HI_BIT_MASK
)

	)

263 
	#RGB_HI_BITS_MASKx2
 ((
RED_HI_BIT_MASK
 | 
GREEN_HI_BIT_MASK
 | \

264 
BLUE_HI_BIT_MASK
Ë<< 1)

	)

265 
	#RGB_REMOVE_LOW_BITS_MASK
 (~
RGB_LOW_BITS_MASK
)

	)

266 
	#FIRST_THIRD_COLOR_MASK
 (
FIRST_COLOR_MASK
 | 
THIRD_COLOR_MASK
)

	)

267 
	#TWO_LOW_BITS_MASK
 (
RGB_LOW_BITS_MASK
 | (RGB_LOW_BITS_MASK << 1))

	)

268 
	#HIGH_BITS_SHIFTED_TWO_MASK
 (–(
FIRST_COLOR_MASK
 | 
SECOND_COLOR_MASK
 | 
THIRD_COLOR_MASK
) & \

269 ~
TWO_LOW_BITS_MASK
 ) >> 2)

	)

	@port.h

41 #i‚de‡
_PORT_H_


42 
	#_PORT_H_


	)

60 #ifde‡
__GIZ__


63 
	#TITLE
 "S√s9x"

	)

66 
	~"pixf‹m.h
"

67 
	~<zlib.h
>

69 
	~<limôs.h
>

70 
	~<°rög.h
>

72 
	tboﬁ8
;

73 
	tuöt8
;

74 
	tuöt16
;

75 
	tuöt32
;

76 sig√d 
	töt8
;

77 
	töt16
;

78 
	töt32
;

79 
	töt64
;

90 
	tboﬁ8_32
;

91 
	tuöt8_32
;

92 
	tuöt16_32
;

93 sig√d 
	töt8_32
;

94 
	töt16_32
;

98 
	#EXTERN_C
 

	)

99 
	#START_EXTERN_C
 "C" {

	)

100 
	#END_EXTERN_C
 }

	)

103 #unde‡
_MAX_PATH


104 
	#_MAX_DIR
 
PATH_MAX


	)

105 
	#_MAX_DRIVE
 1

	)

106 
	#_MAX_FNAME
 
PATH_MAX


	)

107 
	#_MAX_EXT
 
PATH_MAX


	)

108 
	#PATH_MAX
 1024

	)

109 
	#_MAX_PATH
 (1024)

	)

112 
	#TRUE
 1

	)

113 
	#FALSE
 0

	)

116 
	#SLASH_STR
 "\\"

	)

117 
	#SLASH_CHAR
 '\\'

	)

120 
	#VAR_CYCLES


	)

122 
	#LSB_FIRST


	)

123 
	#STATIC
 

	)

124 
	#FASTCALL


	)

125 
	#PIXEL_FORMAT
 
RGB565


	)

126 
	#CHECK_SOUND
()

	)

127 
	#VOID
 

	)

128 
	#CPU_SHUTDOWN


	)

129 
	#UNZIP_SUPPORT


	)

130 
	#ZîoMem‹y
(
a
,
b
Ë
	`mem£t
(◊),0,(b))

	)

131 
	#PACKING
 
	`__©åibuã__
 ((
∑cked
))

	)

132 
	#ALIGN_BY_ONE
 
	`__©åibuã__
 ((
	`Æig√d
 (1), 
∑cked
))

	)

133 
	#LSB_FIRST


	)

134 #unde‡
FAST_LSB_WORD_ACCESS


135 
	#ASM_SPC700


	)

137 
EXTERN_C
 
S9xGíî©eSound
 ();

140 
_makï©h
 (*
∑th
, c⁄° *
drive
, c⁄° *
dú
,

141 c⁄° *
‚ame
, c⁄° *
ext
);

142 
_•lô∑th
 (c⁄° *
∑th
, *
drive
, *
dú
, *
‚ame
,

143 *
ext
);

144 
	#°rˇ£cmp
 
°rcmp


	)

145 
	#°∫ˇ£cmp
 
°∫cmp


	)

146 
	#time
(
a
Ë(0)

	)

148 #ifde‡
INLINE


149 #unde‡
INLINE


150 
	#INLINE
 
__ölöe


	)

153 #ifde‡
ölöe


154 #unde‡
ölöe


155 
	#ölöe
 
__ölöe


	)

160 #ifde‡
__GP2X__


163 
	#TITLE
 "S√s9x"

	)

166 
	~"pixf‹m.h
"

167 
	~<zlib.h
>

169 
	~<limôs.h
>

170 
	~<°rög.h
>

172 
	tboﬁ8
;

173 
	tuöt8
;

174 
	tuöt16
;

175 
	tuöt32
;

176 sig√d 
	töt8
;

177 
	töt16
;

178 
	töt32
;

179 
	töt64
;

190 
	tboﬁ8_32
;

191 
	tuöt8_32
;

192 
	tuöt16_32
;

193 sig√d 
	töt8_32
;

194 
	töt16_32
;

198 
	#EXTERN_C
 

	)

199 
	#START_EXTERN_C
 "C" {

	)

200 
	#END_EXTERN_C
 }

	)

203 #unde‡
_MAX_PATH


204 
	#_MAX_DIR
 
PATH_MAX


	)

205 
	#_MAX_DRIVE
 1

	)

206 
	#_MAX_FNAME
 
PATH_MAX


	)

207 
	#_MAX_EXT
 
PATH_MAX


	)

208 
	#_MAX_PATH
 (1024)

	)

211 
	#TRUE
 1

	)

212 
	#FALSE
 0

	)

215 
	#SLASH_STR
 "/"

	)

216 
	#SLASH_CHAR
 '/'

	)

219 
	#VAR_CYCLES


	)

221 
	#LSB_FIRST


	)

222 
	#STATIC
 

	)

223 
	#FASTCALL


	)

224 
	#PIXEL_FORMAT
 
RGB565


	)

225 
	#CHECK_SOUND
()

	)

226 
	#VOID
 

	)

227 
	#CPU_SHUTDOWN


	)

228 
	#UNZIP_SUPPORT


	)

229 
	#ZîoMem‹y
(
a
,
b
Ë
	`mem£t
(◊),0,(b))

	)

230 
	#PACKING
 
	`__©åibuã__
 ((
∑cked
))

	)

231 
	#ALIGN_BY_ONE
 
	`__©åibuã__
 ((
	`Æig√d
 (1), 
∑cked
))

	)

232 
	#LSB_FIRST


	)

233 #unde‡
FAST_LSB_WORD_ACCESS


234 
	#ASM_SPC700


	)

235 
	#SUPER_FX


	)

237 
EXTERN_C
 
S9xGíî©eSound
 ();

240 
_makï©h
 (*
∑th
, c⁄° *
drive
, c⁄° *
dú
,

241 c⁄° *
‚ame
, c⁄° *
ext
);

242 
_•lô∑th
 (c⁄° *
∑th
, *
drive
, *
dú
, *
‚ame
,

243 *
ext
);

244 
	#°rˇ£cmp
 
°rcmp


	)

245 
	#°∫ˇ£cmp
 
°∫cmp


	)

246 
	#time
(
a
Ë(0)

	)

248 #ifde‡
INLINE


249 #unde‡
INLINE


250 
	#INLINE
 
ölöe


	)

253 #ifde‡
ölöe


254 #unde‡
ölöe


255 
	#ölöe
 
ölöe


	)

	@ppu.cpp

41 
	~"¢es9x.h
"

42 
	~"memm≠.h
"

43 
	~"µu.h
"

44 
	~"˝uexec.h
"

45 
	~"missög.h
"

46 
	~"≠u.h
"

47 
	~"dma.h
"

48 
	~"gfx.h
"

49 
	~"di•œy.h
"

50 
	~"ß1.h
"

51 #i‚de‡
_SNESPPC


54 
	~"sdd1.h
"

55 
	~"§tc.h
"

57 
	~"p‹t.h
"

59 #i‚de‡
ZSNES_FX


60 
	~"fxemu.h
"

61 
	~"fxö°.h
"

62 
FxInô_s
 
Su≥rFX
;

63 
FxRegs_s
 
GSU
;

65 
EXTERN_C
 
S9xSu≥rFXWrôeReg
 (
uöt8
, 
uöt32
);

66 
EXTERN_C
 
uöt8
 
S9xSu≥rFXRódReg
 (
uöt32
);

69 
	$S9xUpd©eHTimî
 ()

71 i‡(
PPU
.
HTimîE«bÀd
)

73 #ifde‡
DEBUGGER


74 
missög
.
húq_pos
 = 
PPU
.
IRQHBómPos
;

76 
PPU
.
HTimîPosôi⁄
 = PPU.
IRQHBómPos
 * 
Sëtögs
.
H_Max
 / 
SNES_HCOUNTER_MAX
;

77 i‡(
PPU
.
HTimîPosôi⁄
 =
Sëtögs
.
H_Max
 ||

78 
PPU
.
HTimîPosôi⁄
 =
Sëtögs
.
HBœnkSèπ
)

80 
PPU
.
HTimîPosôi⁄
--;

83 i‡(!
PPU
.
VTimîE«bÀd
 || 
CPU
.
V_Cou¡î
 =PPU.
IRQVBómPos
)

85 i‡(
PPU
.
HTimîPosôi⁄
 < 
CPU
.
Cy˛es
)

88 i‡(
CPU
.
WhichEvít
 =
HBLANK_END_EVENT
 ||

89 
CPU
.
WhichEvít
 =
HTIMER_AFTER_EVENT
)

91 
CPU
.
WhichEvít
 = 
HBLANK_END_EVENT
;

92 
CPU
.
NextEvít
 = 
Sëtögs
.
H_Max
;

96 
CPU
.
WhichEvít
 = 
HBLANK_START_EVENT
;

97 
CPU
.
NextEvít
 = 
Sëtögs
.
HBœnkSèπ
;

102 i‡(
CPU
.
WhichEvít
 =
HTIMER_BEFORE_EVENT
 ||

103 
CPU
.
WhichEvít
 =
HBLANK_START_EVENT
)

105 i‡(
PPU
.
HTimîPosôi⁄
 > 
Sëtögs
.
HBœnkSèπ
)

109 
CPU
.
NextEvít
 = 
Sëtögs
.
HBœnkSèπ
;

110 
CPU
.
WhichEvít
 = 
HBLANK_START_EVENT
;

114 
CPU
.
NextEvít
 = 
PPU
.
HTimîPosôi⁄
;

115 
CPU
.
WhichEvít
 = 
HTIMER_BEFORE_EVENT
;

120 
CPU
.
WhichEvít
 = 
HTIMER_AFTER_EVENT
;

121 
CPU
.
NextEvít
 = 
PPU
.
HTimîPosôi⁄
;

126 
	}
}

128 
	$S9xFixCﬁourBrighäess
 ()

130 
IPPU
.
XB
 = 
mul_brighäess
 [
PPU
.
Brighäess
];

131 #i‚de‡
_SNESPPC


132 i‡(
Sëtögs
.
SixãíBô
)

135 
i
 = 0; i < 256; i++)

137 
IPPU
.
Red
 [
i
] = IPPU.
XB
 [
PPU
.
CGDATA
 [i] & 0x1f];

138 
IPPU
.
Gªí
 [
i
] = IPPU.
XB
 [(
PPU
.
CGDATA
 [i] >> 5) & 0x1f];

139 
IPPU
.
Blue
 [
i
] = IPPU.
XB
 [(
PPU
.
CGDATA
 [i] >> 10) & 0x1f];

140 
IPPU
.
S¸ìnCﬁ‹s
 [
i
] = 
	`BUILD_PIXEL
 (IPPU.
Red
 [i], IPPU.
Gªí
 [i],

141 
IPPU
.
Blue
 [
i
]);

144 
	}
}

150 
	$S9xSëPPU
(
uöt8
 
Byã
, 
uöt16
 
Addªss
)

152 i‡(
Addªss
 <= 0x2183)

154 
Addªss
)

158 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2100])

160 
	`FLUSH_REDRAW
();

161 i‡(
PPU
.
Brighäess
 !(
Byã
 & 0xF))

163 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

164 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
TRUE
;

165 
PPU
.
Brighäess
 = 
Byã
 & 0xF;

166 
	`S9xFixCﬁourBrighäess
();

167 i‡(
PPU
.
Brighäess
 > 
IPPU
.
MaxBrighäess
)

168 
IPPU
.
MaxBrighäess
 = 
PPU
.
Brighäess
;

170 i‡((
Mem‹y
.
FûlRAM
[0x2100] & 0x80Ë!(
Byã
 & 0x80))

172 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

173 
PPU
.
F‹˚dBœnkög
 = (
Byã
 >> 7) & 1;

180 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2101])

182 
	`FLUSH_REDRAW
();

183 
PPU
.
OBJNameBa£
 = (
Byã
 & 3) << 14;

184 
PPU
.
OBJNameSñe˘
 = ((
Byã
 >> 3) & 3) << 13;

185 
PPU
.
OBJSizeSñe˘
 = (
Byã
 >> 5) & 7;

186 
IPPU
.
OBJCh™ged
 = 
TRUE
;

192 
PPU
.
OAMAddr
 = 
Byã
;

193 
PPU
.
OAMFlù
 = 2;

194 
PPU
.
OAMRódFlù
 = 0;

195 
PPU
.
SavedOAMAddr
 = PPU.
OAMAddr
;

196 i‡(
PPU
.
OAMPri‹ôyRŸ©i⁄
)

198 
PPU
.
Fú°S¥ôe
 = PPU.
OAMAddr
 & 0x7f;

199 #ifde‡
DEBUGGER


200 
missög
.
•rôe_¥i‹ôy_rŸ©i⁄
 = 1;

208 i‡((
PPU
.
OAMPri‹ôyRŸ©i⁄
 = (
Byã
 & 0x80) == 0 ? 0 : 1))

210 
PPU
.
Fú°S¥ôe
 = PPU.
OAMAddr
 & 0x7f;

211 #ifde‡
DEBUGGER


212 
missög
.
•rôe_¥i‹ôy_rŸ©i⁄
 = 1;

217 i‡(
PPU
.
OAMFlù
 & 2)

219 
PPU
.
OAMAddr
 &= 0x00FF;

220 
PPU
.
OAMAddr
 |(
Byã
 & 1) << 8;

222 
PPU
.
OAMFlù
 = 0;

223 
PPU
.
OAMRódFlù
 = 0;

224 
PPU
.
SavedOAMAddr
 = PPU.
OAMAddr
;

229 
	`REGISTER_2104
(
Byã
);

236 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2105])

238 
	`FLUSH_REDRAW
();

239 
PPU
.
BG
[0].
BGSize
 = (
Byã
 >> 4) & 1;

240 
PPU
.
BG
[1].
BGSize
 = (
Byã
 >> 5) & 1;

241 
PPU
.
BG
[2].
BGSize
 = (
Byã
 >> 6) & 1;

242 
PPU
.
BG
[3].
BGSize
 = (
Byã
 >> 7) & 1;

243 
PPU
.
BGMode
 = 
Byã
 & 7;

245 
PPU
.
BG3Pri‹ôy
 = ((
Byã
 & 0x0f) == 0x09);

246 #ifde‡
DEBUGGER


247 
missög
.
modes
[
PPU
.
BGMode
] = 1;

254 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2106])

256 
	`FLUSH_REDRAW
();

257 #ifde‡
DEBUGGER


258 i‡((
Byã
 & 0xf0) && (Byte & 0x0f))

259 
missög
.
moßic
 = 1;

261 
PPU
.
Moßic
 = (
Byã
 >> 4) + 1;

262 
PPU
.
BGMoßic
[0] = (
Byã
 & 1Ë&& PPU.
Moßic
 > 1;

263 
PPU
.
BGMoßic
[1] = (
Byã
 & 2Ë&& PPU.
Moßic
 > 1;

264 
PPU
.
BGMoßic
[2] = (
Byã
 & 4Ë&& PPU.
Moßic
 > 1;

265 
PPU
.
BGMoßic
[3] = (
Byã
 & 8Ë&& PPU.
Moßic
 > 1;

269 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2107])

271 
	`FLUSH_REDRAW
();

272 
PPU
.
BG
[0].
SCSize
 = 
Byã
 & 3;

273 
PPU
.
BG
[0].
SCBa£
 = (
Byã
 & 0x7c) << 8;

278 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2108])

280 
	`FLUSH_REDRAW
();

281 
PPU
.
BG
[1].
SCSize
 = 
Byã
 & 3;

282 
PPU
.
BG
[1].
SCBa£
 = (
Byã
 & 0x7c) << 8;

287 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2109])

289 
	`FLUSH_REDRAW
();

290 
PPU
.
BG
[2].
SCSize
 = 
Byã
 & 3;

291 
PPU
.
BG
[2].
SCBa£
 = (
Byã
 & 0x7c) << 8;

296 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x210a])

298 
	`FLUSH_REDRAW
();

299 
PPU
.
BG
[3].
SCSize
 = 
Byã
 & 3;

300 
PPU
.
BG
[3].
SCBa£
 = (
Byã
 & 0x7c) << 8;

305 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x210b])

307 
	`FLUSH_REDRAW
();

308 
PPU
.
BG
[0].
NameBa£
 = (
Byã
 & 7) << 12;

309 
PPU
.
BG
[1].
NameBa£
 = ((
Byã
 >> 4) & 7) << 12;

314 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x210c])

316 
	`FLUSH_REDRAW
();

317 
PPU
.
BG
[2].
NameBa£
 = (
Byã
 & 7) << 12;

318 
PPU
.
BG
[3].
NameBa£
 = ((
Byã
 >> 4) & 7) << 12;

323 
PPU
.
BG
[0].
HOff£t
 =

324 ((
PPU
.
BG
[0].
HOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

328 
PPU
.
BG
[0].
VOff£t
 =

329 ((
PPU
.
BG
[0].
VOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

332 
PPU
.
BG
[1].
HOff£t
 =

333 ((
PPU
.
BG
[1].
HOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

337 
PPU
.
BG
[1].
VOff£t
 =

338 ((
PPU
.
BG
[1].
VOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

342 
PPU
.
BG
[2].
HOff£t
 =

343 ((
PPU
.
BG
[2].
HOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

347 
PPU
.
BG
[2].
VOff£t
 =

348 ((
PPU
.
BG
[2].
VOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

352 
PPU
.
BG
[3].
HOff£t
 =

353 ((
PPU
.
BG
[3].
HOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

357 
PPU
.
BG
[3].
VOff£t
 =

358 ((
PPU
.
BG
[3].
VOff£t
 >> 8Ë& 0xffË| ((
uöt16
Ë
Byã
 << 8);

363 
PPU
.
VMA
.
High
 = (
Byã
 & 0x80Ë=0 ? 
FALSE
 : 
TRUE
;

364 
Byã
 & 3)

367 
PPU
.
VMA
.
In¸emít
 = 1;

370 
PPU
.
VMA
.
In¸emít
 = 32;

373 
PPU
.
VMA
.
In¸emít
 = 128;

376 
PPU
.
VMA
.
In¸emít
 = 128;

379 #ifde‡
DEBUGGER


380 i‡((
Byã
 & 3) != 0)

381 
missög
.
vøm_öc
 = 
Byã
 & 3;

383 i‡(
Byã
 & 0x0c)

385 
uöt16
 
IncCou¡
[4] = { 0, 32, 64, 128 };

386 
uöt16
 
Shi·
[4] = { 0, 5, 6, 7 };

387 #ifde‡
DEBUGGER


388 
missög
.
vøm_fuŒ_gøphic_öc
 =

389 (
Byã
 & 0x0c) >> 2;

391 
PPU
.
VMA
.
In¸emít
 = 1;

392 
uöt8
 
i
 = (
Byã
 & 0x0c) >> 2;

393 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 
IncCou¡
[
i
];

394 
PPU
.
VMA
.
Mask1
 = 
IncCou¡
[
i
] * 8 - 1;

395 
PPU
.
VMA
.
Shi·
 = Shi·[
i
];

398 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 0;

403 
PPU
.
VMA
.
Addªss
 &= 0xFF00;

404 
PPU
.
VMA
.
Addªss
 |
Byã
;

405 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

410 
PPU
.
VMA
.
Addªss
 &= 0x00FF;

411 
PPU
.
VMA
.
Addªss
 |
Byã
 << 8;

412 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

417 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

418 
	`REGISTER_2118
(
Byã
);

423 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

424 
	`REGISTER_2119
(
Byã
);

429 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x211a])

431 
	`FLUSH_REDRAW
();

432 
PPU
.
Mode7Rïót
 = 
Byã
 >> 6;

433 
PPU
.
Mode7VFlù
 = (
Byã
 & 2) >> 1;

434 
PPU
.
Mode7HFlù
 = 
Byã
 & 1;

439 
PPU
.
M©rixA
 = ((PPU.M©rixA >> 8Ë& 0xffË| (
Byã
 << 8);

440 
PPU
.
Nìd16x8Mulô∂y
 = 
TRUE
;

444 
PPU
.
M©rixB
 = ((PPU.M©rixB >> 8Ë& 0xffË| (
Byã
 << 8);

445 
PPU
.
Nìd16x8Mulô∂y
 = 
TRUE
;

449 
PPU
.
M©rixC
 = ((PPU.M©rixC >> 8Ë& 0xffË| (
Byã
 << 8);

453 
PPU
.
M©rixD
 = ((PPU.M©rixD >> 8Ë& 0xffË| (
Byã
 << 8);

457 
PPU
.
CíåeX
 = ((PPU.CíåeX >> 8Ë& 0xffË| (
Byã
 << 8);

461 
PPU
.
CíåeY
 = ((PPU.CíåeY >> 8Ë& 0xffË| (
Byã
 << 8);

466 
PPU
.
CGFLIP
 = 0;

467 
PPU
.
CGFLIPRód
 = 0;

468 
PPU
.
CGADD
 = 
Byã
;

472 
	`REGISTER_2122
(
Byã
);

477 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2123])

479 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

480 
	`FLUSH_REDRAW
();

482 
PPU
.
ClùWödow1E«bÀ
[0] = !!(
Byã
 & 0x02);

483 
PPU
.
ClùWödow1E«bÀ
[1] = !!(
Byã
 & 0x20);

484 
PPU
.
ClùWödow2E«bÀ
[0] = !!(
Byã
 & 0x08);

485 
PPU
.
ClùWödow2E«bÀ
[1] = !!(
Byã
 & 0x80);

486 
PPU
.
ClùWödow1Inside
[0] = !(
Byã
 & 0x01);

487 
PPU
.
ClùWödow1Inside
[1] = !(
Byã
 & 0x10);

488 
PPU
.
ClùWödow2Inside
[0] = !(
Byã
 & 0x04);

489 
PPU
.
ClùWödow2Inside
[1] = !(
Byã
 & 0x40);

490 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

491 #ifde‡
DEBUGGER


492 i‡(
Byã
 & 0x80)

493 
missög
.
wödow2
[1] = 1;

494 i‡(
Byã
 & 0x20)

495 
missög
.
wödow1
[1] = 1;

496 i‡(
Byã
 & 0x08)

497 
missög
.
wödow2
[0] = 1;

498 i‡(
Byã
 & 0x02)

499 
missög
.
wödow1
[0] = 1;

505 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2124])

507 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

508 
	`FLUSH_REDRAW
();

510 
PPU
.
ClùWödow1E«bÀ
[2] = !!(
Byã
 & 0x02);

511 
PPU
.
ClùWödow1E«bÀ
[3] = !!(
Byã
 & 0x20);

512 
PPU
.
ClùWödow2E«bÀ
[2] = !!(
Byã
 & 0x08);

513 
PPU
.
ClùWödow2E«bÀ
[3] = !!(
Byã
 & 0x80);

514 
PPU
.
ClùWödow1Inside
[2] = !(
Byã
 & 0x01);

515 
PPU
.
ClùWödow1Inside
[3] = !(
Byã
 & 0x10);

516 
PPU
.
ClùWödow2Inside
[2] = !(
Byã
 & 0x04);

517 
PPU
.
ClùWödow2Inside
[3] = !(
Byã
 & 0x40);

518 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

519 #ifde‡
DEBUGGER


520 i‡(
Byã
 & 0x80)

521 
missög
.
wödow2
[3] = 1;

522 i‡(
Byã
 & 0x20)

523 
missög
.
wödow1
[3] = 1;

524 i‡(
Byã
 & 0x08)

525 
missög
.
wödow2
[2] = 1;

526 i‡(
Byã
 & 0x02)

527 
missög
.
wödow1
[2] = 1;

533 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2125])

535 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

536 
	`FLUSH_REDRAW
();

538 
PPU
.
ClùWödow1E«bÀ
[4] = !!(
Byã
 & 0x02);

539 
PPU
.
ClùWödow1E«bÀ
[5] = !!(
Byã
 & 0x20);

540 
PPU
.
ClùWödow2E«bÀ
[4] = !!(
Byã
 & 0x08);

541 
PPU
.
ClùWödow2E«bÀ
[5] = !!(
Byã
 & 0x80);

542 
PPU
.
ClùWödow1Inside
[4] = !(
Byã
 & 0x01);

543 
PPU
.
ClùWödow1Inside
[5] = !(
Byã
 & 0x10);

544 
PPU
.
ClùWödow2Inside
[4] = !(
Byã
 & 0x04);

545 
PPU
.
ClùWödow2Inside
[5] = !(
Byã
 & 0x40);

546 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

547 #ifde‡
DEBUGGER


548 i‡(
Byã
 & 0x80)

549 
missög
.
wödow2
[5] = 1;

550 i‡(
Byã
 & 0x20)

551 
missög
.
wödow1
[5] = 1;

552 i‡(
Byã
 & 0x08)

553 
missög
.
wödow2
[4] = 1;

554 i‡(
Byã
 & 0x02)

555 
missög
.
wödow1
[4] = 1;

561 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2126])

563 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

564 
	`FLUSH_REDRAW
();

566 
PPU
.
Wödow1Le·
 = 
Byã
;

567 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

572 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2127])

574 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

575 
	`FLUSH_REDRAW
();

577 
PPU
.
Wödow1Right
 = 
Byã
;

578 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

583 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2128])

585 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

586 
	`FLUSH_REDRAW
();

588 
PPU
.
Wödow2Le·
 = 
Byã
;

589 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

594 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2129])

596 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

597 
	`FLUSH_REDRAW
();

599 
PPU
.
Wödow2Right
 = 
Byã
;

600 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

605 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x212a])

607 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

608 
	`FLUSH_REDRAW
();

610 
PPU
.
ClùWödowOvîœpLogic
[0] = (
Byã
 & 0x03);

611 
PPU
.
ClùWödowOvîœpLogic
[1] = (
Byã
 & 0x0c) >> 2;

612 
PPU
.
ClùWödowOvîœpLogic
[2] = (
Byã
 & 0x30) >> 4;

613 
PPU
.
ClùWödowOvîœpLogic
[3] = (
Byã
 & 0xc0) >> 6;

614 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

619 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x212b])

621 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_WINDOW
) ;

622 
	`FLUSH_REDRAW
();

624 
PPU
.
ClùWödowOvîœpLogic
[4] = 
Byã
 & 0x03;

625 
PPU
.
ClùWödowOvîœpLogic
[5] = (
Byã
 & 0x0c) >> 2;

626 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

631 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x212c])

633 
	`FLUSH_REDRAW
();

635 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

636 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

642 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x212d])

644 
	`FLUSH_REDRAW
();

646 #ifde‡
DEBUGGER


647 i‡(
Byã
 & 0x1f)

648 
missög
.
subs¸ìn
 = 1;

650 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

651 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

657 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x212e])

659 
	`FLUSH_REDRAW
();

661 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

666 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x212f])

668 
	`FLUSH_REDRAW
();

670 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

675 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2130])

677 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_ADDSUB
) ;

678 
	`FLUSH_REDRAW
();

680 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

681 #ifde‡
DEBUGGER


682 i‡((
Byã
 & 1Ë&& (
PPU
.
BGMode
 == 3 || PPU.BGMode == 4

683 || 
PPU
.
BGMode
 == 7))

684 
missög
.
dúe˘
 = 1;

690 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2131])

692 i‡(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_ADDSUB
) ;

693 
	`FLUSH_REDRAW
();

696 #ifde‡
DEBUGGER


697 i‡(
Byã
 & 0x80)

700 i‡(
Mem‹y
.
FûlRAM
[0x2130] & 0x02)

701 
missög
.
subs¸ìn_sub
 = 1;

703 
missög
.
fixed_cﬁour_sub
 = 1;

708 i‡(
Mem‹y
.
FûlRAM
[0x2130] & 0x02)

709 
missög
.
subs¸ìn_add
 = 1;

711 
missög
.
fixed_cﬁour_add
 = 1;

714 
Mem‹y
.
FûlRAM
[0x2131] = 
Byã
;

718 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2132])

720 
ªdøw_√eded
=0;

721 
√w_fixedcﬁ
;

724 i‡(
Byã
 & 0x80) {

726 
√w_fixedcﬁ
=(
Byã
 & 0x1f);

727 i‡(
√w_fixedcﬁ
!=
PPU
.
FixedCﬁourBlue
Ë{i‡(!(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_FIXEDCOLCHANGES
)Ë
	`FLUSH_REDRAW
();PPU.FixedColourBlue=new_fixedcol;}

729 i‡(
Byã
 & 0x40) {

731 
√w_fixedcﬁ
=(
Byã
 & 0x1f);

732 i‡(
√w_fixedcﬁ
!=
PPU
.
FixedCﬁourGªí
Ë{i‡(!(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_FIXEDCOLCHANGES
)Ë
	`FLUSH_REDRAW
();PPU.FixedColourGreen=new_fixedcol;}

734 i‡(
Byã
 & 0x20) {

736 
√w_fixedcﬁ
=(
Byã
 & 0x1f);

737 i‡(
√w_fixedcﬁ
!=
PPU
.
FixedCﬁourRed
Ë{i‡(!(
Sëtögs
.
os9x_hack
&
PPU_IGNORE_FIXEDCOLCHANGES
)Ë
	`FLUSH_REDRAW
();PPU.FixedColourRed=new_fixedcol;}

753 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2133])

755 #ifde‡
DEBUGGER


756 i‡(
Byã
 & 0x40)

757 
missög
.
mode7_bgmode
 = 1;

758 i‡(
Byã
 & 0x08)

759 
missög
.
p£udo_512
 = 1;

761 i‡(
Byã
 & 0x04)

763 
PPU
.
S¸ìnHeight
 = 
SNES_HEIGHT_EXTENDED
;

764 #ifde‡
DEBUGGER


765 
missög
.
löes_239
 = 1;

769 
PPU
.
S¸ìnHeight
 = 
SNES_HEIGHT
;

770 #ifde‡
DEBUGGER


771 i‡(
Byã
 & 0x02)

772 
missög
.
•rôe_doubÀ_height
 = 1;

774 i‡(
Byã
 & 1)

775 
missög
.
öãæa˚
 = 1;

872 #ifde‡
SPCTOOL


873 
	`_SPCInPB
(
Addªss
 & 3, 
Byã
);

876 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

877 
IAPU
.
RAM
[(
Addªss
 & 3Ë+ 0xf4] = 
Byã
;

878 #ifde‡
SPC700_SHUTDOWN


879 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
;

880 
IAPU
.
WaôCou¡î
++;

885 
	`REGISTER_2180
(
Byã
);

888 
PPU
.
WRAM
 &= 0x1FF00;

889 
PPU
.
WRAM
 |
Byã
;

892 
PPU
.
WRAM
 &= 0x100FF;

893 
PPU
.
WRAM
 |
Byã
 << 8;

896 
PPU
.
WRAM
 &= 0x0FFFF;

897 
PPU
.
WRAM
 |
Byã
 << 16;

898 
PPU
.
WRAM
 &= 0x1FFFF;

904 #ifde‡
USE_SA1


905 i‡(
Sëtögs
.
SA1
)

907 i‡(
Addªss
 >= 0x2200 && Address < 0x23ff)

908 
	`S9xSëSA1
(
Byã
, 
Addªss
);

910 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

916 i‡(
Addªss
 =0x2801 && 
Sëtögs
.
SRTC
)

917 
	`S9xSëSRTC
(
Byã
, 
Addªss
);

918 i‡(
Addªss
 < 0x3000 || Address >= 0x3000 + 768)

920 #ifde‡
DEBUGGER


921 
missög
.
unknow≈pu_wrôe
 = 
Addªss
;

922 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

924 
	`•rötf
(

925 
Såög
,

927 
Byã
,

928 
Addªss
);

929 
	`S9xMesßge
(
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

935 i‡(!
Sëtögs
.
Su≥rFX
)

938 
Addªss
)

941 i‡((
Mem‹y
.
FûlRAM
[0x3030] ^ 
Byã
Ë& 
FLG_G
)

943 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

945 i‡(
Byã
 & 
FLG_G
)

946 
	`S9xSu≥rFXExec
();

948 
	`FxFlushCache
();

951 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

955 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

958 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

961 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
 & 0x7f;

964 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
 & 0x7f;

967 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

970 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

973 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

976 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

981 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

984 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

985 
Mem‹y
.
FûlRAM
[0x3000 + 
GSU_SFR
] |
FLG_G
;

986 
	`S9xSu≥rFXExec
();

990 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

991 i‡(
Addªss
 >= 0x3100)

993 
	`FxCacheWrôeAc˚ss
(
Addªss
);

1000 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

1001 
	}
}

1007 
uöt8
 
	$S9xGëPPU
(
uöt16
 
Addªss
)

1009 
uöt8
 
byã
 = 0;

1011 i‡(
Addªss
 <= 0x2190)

1013 
Addªss
)

1017  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1019 #ifde‡
DEBUGGER


1020 
missög
.
ﬂm_addªss_ªad
 = 1;

1022  (
uöt8
Ë(
PPU
.
OAMAddr
);

1024  (((
PPU
.
OAMAddr
 >> 8Ë& 1Ë| (PPU.
OAMPri‹ôyRŸ©i⁄
 << 7));

1034  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1043 #ifde‡
DEBUGGER


1044 
missög
.
bg_off£t_ªad
 = 1;

1046  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1048  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1050  (
uöt8
Ë(
PPU
.
VMA
.
Addªss
);

1052  (
PPU
.
VMA
.
Addªss
 >> 8);

1056  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1063 #ifde‡
DEBUGGER


1064 
missög
.
m©rix_ªad
 = 1;

1066  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1068  (
PPU
.
CGADD
);

1087  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1093 i‡(
PPU
.
Nìd16x8Mulô∂y
)

1095 
öt32
 
r
 = (öt32Ë
PPU
.
M©rixA
 * (öt32Ë(PPU.
M©rixB
 >> 8);

1097 
Mem‹y
.
FûlRAM
[0x2134] = (
uöt8
Ë
r
;

1098 
Mem‹y
.
FûlRAM
[0x2135] = (
uöt8
Ë(
r
 >> 8);

1099 
Mem‹y
.
FûlRAM
[0x2136] = (
uöt8
Ë(
r
 >> 16);

1100 
PPU
.
Nìd16x8Mulô∂y
 = 
FALSE
;

1102 #ifde‡
DEBUGGER


1103 
missög
.
m©rix_mu…ùly
 = 1;

1105  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1108 #ifde‡
DEBUGGER


1109 
missög
.
h_v_œtch
 = 1;

1112 #ifde‡
CPU_SHUTDOWN


1113 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1116 
PPU
.
HVBómCou¡îL©ched
 = 1;

1117 
PPU
.
VBómPosL©ched
 = (
uöt16
)

1118 
CPU
.
V_Cou¡î
;

1119 
PPU
.
HBómPosL©ched
 = (
uöt16
Ë((
CPU
.
Cy˛es
 * 
SNES_HCOUNTER_MAX
Ë/ 
Sëtögs
.
H_Max
);

1124 i‡(
SNESGameFixes
.
NìdInô0x2137
)

1125 
PPU
.
VBómFlù
 = 0;

1129 i‡(!
PPU
.
OAMRódFlù
)

1131 
byã
 = 
PPU
.
OAMD©a
[PPU.
OAMAddr
 << 1];

1135 
byã
 = 
PPU
.
OAMD©a
[(PPU.
OAMAddr
 << 1) + 1];

1136 i‡(++
PPU
.
OAMAddr
 >= 0x110)

1137 
PPU
.
OAMAddr
 = 0;

1139 
PPU
.
OAMRódFlù
 ^= 1;

1140 #ifde‡
DEBUGGER


1141 
missög
.
ﬂm_ªad
 = 1;

1143  (
byã
);

1147 #ifde‡
DEBUGGER


1148 
missög
.
vøm_ªad
 = 1;

1150 i‡(
IPPU
.
Fú°VRAMRód
)

1151 
byã
 = 
Mem‹y
.
VRAM
[
PPU
.
VMA
.
Addªss
 << 1];

1152 i‡(
PPU
.
VMA
.
FuŒGøphicCou¡
)

1154 
uöt32
 
addr
 = 
PPU
.
VMA
.
Addªss
 - 1;

1155 
uöt32
 
ªm
 = 
addr
 & 
PPU
.
VMA
.
Mask1
;

1156 
uöt32
 
addªss
 =

1157 (
addr
 & ~
PPU
.
VMA
.
Mask1
)

1158 + (
ªm
 >> 
PPU
.
VMA
.
Shi·
)

1159 + ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3);

1160 
byã
 = 
Mem‹y
.
VRAM
[((
addªss
 << 1) - 2) & 0xFFFF];

1163 
byã
 = 
Mem‹y
.
VRAM
[((
PPU
.
VMA
.
Addªss
 << 1) - 2) & 0xffff];

1165 i‡(!
PPU
.
VMA
.
High
)

1167 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

1168 
IPPU
.
Fú°VRAMRód
 = 
FALSE
;

1173 #ifde‡
DEBUGGER


1174 
missög
.
vøm_ªad
 = 1;

1176 i‡(
IPPU
.
Fú°VRAMRód
)

1177 
byã
 = 
Mem‹y
.
VRAM
[((
PPU
.
VMA
.
Addªss
 << 1) + 1) & 0xffff];

1178 i‡(
PPU
.
VMA
.
FuŒGøphicCou¡
)

1180 
uöt32
 
addr
 = 
PPU
.
VMA
.
Addªss
 - 1;

1181 
uöt32
 
ªm
 = 
addr
 & 
PPU
.
VMA
.
Mask1
;

1182 
uöt32
 
addªss
 =

1183 (
addr
 & ~
PPU
.
VMA
.
Mask1
)

1184 + (
ªm
 >> 
PPU
.
VMA
.
Shi·
)

1185 + ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3);

1186 
byã
 = 
Mem‹y
.
VRAM
[((
addªss
 << 1) - 1) & 0xFFFF];

1189 
byã
 = 
Mem‹y
.
VRAM
[((
PPU
.
VMA
.
Addªss
 << 1) - 1) & 0xFFFF];

1190 i‡(
PPU
.
VMA
.
High
)

1192 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

1193 
IPPU
.
Fú°VRAMRód
 = 
FALSE
;

1199 #ifde‡
DEBUGGER


1200 
missög
.
cgøm_ªad
 = 1;

1202 i‡(
PPU
.
CGFLIPRód
)

1203 
byã
 = 
PPU
.
CGDATA
[PPU.
CGADD
++] >> 8;

1205 
byã
 = 
PPU
.
CGDATA
[PPU.
CGADD
] & 0xff;

1207 
PPU
.
CGFLIPRód
 ^= 1;

1208  (
byã
);

1212 #ifde‡
DEBUGGER


1213 
missög
.
h_cou¡î_ªad
 = 1;

1215 i‡(
PPU
.
HBómFlù
)

1216 
byã
 = 
PPU
.
HBómPosL©ched
 >> 8;

1218 
byã
 = (
uöt8
Ë
PPU
.
HBómPosL©ched
;

1219 
PPU
.
HBómFlù
 ^= 1;

1223 #ifde‡
DEBUGGER


1224 
missög
.
v_cou¡î_ªad
 = 1;

1226 i‡(
PPU
.
VBómFlù
)

1227 
byã
 = 
PPU
.
VBómPosL©ched
 >> 8;

1229 
byã
 = (
uöt8
Ë
PPU
.
VBómPosL©ched
;

1230 
PPU
.
VBómFlù
 ^= 1;

1234  (
SNESGameFixes
.
_0x213E_Rëu∫VÆue
);

1238 
PPU
.
VBómFlù
 = PPU.
HBómFlù
 = 0;

1239  ((
Sëtögs
.
PAL
 ? 0x10 : 0Ë| (
Mem‹y
.
FûlRAM
[0x213f] & 0xc0));

1305 #ifde‡
SPCTOOL


1306  ((
uöt8
Ë
_SPCOutP
[
Addªss
 & 3]);

1309 #ifde‡
SPC700_SHUTDOWN


1310 
CPU
.
APU_APUExecutög
 = 
Sëtögs
.
APUE«bÀd
;

1311 
IAPU
.
WaôCou¡î
++;

1313 if(
Sëtögs
.
APUE«bÀd
)

1315 #ifde‡
CPU_SHUTDOWN


1318 if(
SNESGameFixes
.
APU_OutP‹ts_Rëu∫VÆueFix


1319 && 
Addªss
 >= 0x2140

1320 && 
Addªss
 <= 0x2143

1321 && !
CPU
.
V_Cou¡î
)

1323  (
uöt8
Ë((
Addªss
 & 1) ?

1324 ((
	`ønd
() & 0xff00) >> 8) : (rand() & 0xff));

1327  (
APU
.
OutP‹ts
[
Addªss
 & 3]);

1330 
Sëtögs
.
SoundSkùMëhod
)

1334 
CPU
.
BønchSkù
 = 
TRUE
;

1339 
CPU
.
BønchSkù
 = 
TRUE
;

1342 i‡(
Addªss
 & 3 < 2)

1344 
r
 = 
	`ønd
();

1345 i‡(
r
 & 2)

1347 i‡(
r
 & 4)

1348  (
Addªss
 & 3 == 1 ? 0xaa : 0xbb);

1350  ((
r
 >> 3) & 0xff);

1355 
r
 = 
	`ønd
();

1356 i‡(
r
 & 2)

1357  ((
r
 >> 3) & 0xff);

1359  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1364 #ifde‡
DEBUGGER


1365 
missög
.
wøm_ªad
 = 1;

1367 
byã
 = 
Mem‹y
.
RAM
[
PPU
.
WRAM
++];

1368 
PPU
.
WRAM
 &= 0x1FFFF;

1373  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1380 #ifde‡
USE_SA1


1381 i‡(
Sëtögs
.
SA1
)

1382  (
	`S9xGëSA1
(
Addªss
));

1384 i‡(
Addªss
 <= 0x2fff || Address >= 0x3000 + 768)

1386 
Addªss
)

1394 i‡(
Sëtögs
.
SRTC
)

1395  (
	`S9xGëSRTC
(
Addªss
));

1399 #ifde‡
DEBUGGER


1400 
missög
.
unknow≈pu_ªad
 = 
Addªss
;

1401 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1403 
	`•rötf
(
Såög
, "Unknow¿ªgi°îÑód: $%04X\n", 
Addªss
);

1404 
	`S9xMesßge
(
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1412 i‡(!
Sëtögs
.
Su≥rFX
)

1414 
byã
 = 
Mem‹y
.
FûlRAM
[
Addªss
];

1418 #ifde‡
CPU_SHUTDOWN


1419 i‡(
Addªss
 == 0x3030)

1421 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1425 i‡(
Addªss
 == 0x3031)

1427 
	`CLEAR_IRQ_SOURCE
(
GSU_IRQ_SOURCE
);

1428 
Mem‹y
.
FûlRAM
[0x3031] = 
byã
 & 0x7f;

1430  (
byã
);

1433  (
byã
);

1434 
	}
}

1440 
	$S9xSëCPU
(
uöt8
 
byã
, 
uöt16
 
Addªss
)

1442 
d
;

1444 i‡(
Addªss
 < 0x4200)

1446 #ifde‡
VAR_CYCLES


1447 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

1449 
Addªss
)

1453 i‡((
byã
 & 1Ë&& !(
Mem‹y
.
FûlRAM
[
Addªss
] & 1))

1455 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 0;

1456 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 0;

1457 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 0;

1463 #ifde‡
DEBUGGER


1464 
missög
.
unknown˝u_wrôe
 = 
Addªss
;

1465 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1467 
	`•rötf
(
Såög
, "Unknow¿ªgi°îÑegi°î wrôe: $%02X->$%04X\n", 
byã
, 
Addªss
);

1468 
	`S9xMesßge
(
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1475 
Addªss
)

1479 i‡((
byã
 & 0x20)

1480 && (!
SNESGameFixes
.
umih¨akawa£Fix
 || 
PPU
.
IRQVBómPos
 < 209))

1482 i‡(!
PPU
.
VTimîE«bÀd
)

1484 #ifde‡
DEBUGGER


1485 
missög
.
vúq
 = 1;

1486 
missög
.
vúq_pos
 = 
PPU
.
IRQVBómPos
;

1488 
PPU
.
VTimîE«bÀd
 = 
TRUE
;

1489 i‡(
PPU
.
HTimîE«bÀd
)

1490 
	`S9xUpd©eHTimî
();

1491 i‡(
PPU
.
IRQVBómPos
 =
CPU
.
V_Cou¡î
)

1492 
	`S9xSëIRQ
(
PPU_V_BEAM_IRQ_SOURCE
);

1497 
PPU
.
VTimîE«bÀd
 = 
FALSE
;

1498 #i‚de‡
RC_OPTIMIZED


1499 i‡(
SNESGameFixes
.
umih¨akawa£Fix
)

1500 
byã
 &= ~0x20;

1504 i‡(
byã
 & 0x10)

1506 i‡(!
PPU
.
HTimîE«bÀd
)

1508 #ifde‡
DEBUGGER


1509 
missög
.
húq
 = 1;

1510 
missög
.
húq_pos
 = 
PPU
.
IRQHBómPos
;

1512 
PPU
.
HTimîE«bÀd
 = 
TRUE
;

1513 
	`S9xUpd©eHTimî
();

1520 
PPU
.
HTimîE«bÀd
 = 
FALSE
;

1521 
PPU
.
HTimîPosôi⁄
 = 
Sëtögs
.
H_Max
 + 1;

1524 #i‚de‡
RC_OPTIMIZED


1525 i‡(!
Sëtögs
.
DaffyDuck
)

1526 
	`CLEAR_IRQ_SOURCE
(
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
);

1528 i‡((
byã
 & 0x80)

1529 && !(
Mem‹y
.
FûlRAM
[0x4200] & 0x80)

1530 && 
CPU
.
V_Cou¡î
 >
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE


1531 && 
CPU
.
V_Cou¡î
 <
PPU
.
S¸ìnHeight
 + (
SNESGameFixes
.
ÆõnVS¥edë‹Fix
 ? 25 : 15)

1536 (
Mem‹y
.
FûlRAM
[0x4210] & 0x80Ë&& !
CPU
.
NMIA˘ive
)

1538 
CPU
.
Fœgs
 |
NMI_FLAG
;

1539 
CPU
.
NMIA˘ive
 = 
TRUE
;

1540 
CPU
.
NMICy˛eCou¡
 = CPU.
NMITriggîPoöt
;

1552 
uöt32
 
ªs
 = 
Mem‹y
.
FûlRAM
[0x4202] * 
byã
;

1554 
Mem‹y
.
FûlRAM
[0x4216] = (
uöt8
Ë
ªs
;

1555 
Mem‹y
.
FûlRAM
[0x4217] = (
uöt8
Ë(
ªs
 >> 8);

1565 
uöt16
 
a
 =

1566 
Mem‹y
.
FûlRAM
[0x4204] + (Memory.FillRAM[0x4205] << 8);

1567 
uöt16
 
div
 = 
byã
 ? 
a
 / byte : 0xffff;

1568 
uöt16
 
ªm
 = 
byã
 ? 
a
 % byte :á;

1570 
Mem‹y
.
FûlRAM
[0x4214] = (
uöt8
Ë
div
;

1571 
Mem‹y
.
FûlRAM
[0x4215] = 
div
 >> 8;

1572 
Mem‹y
.
FûlRAM
[0x4216] = (
uöt8
Ë
ªm
;

1573 
Mem‹y
.
FûlRAM
[0x4217] = 
ªm
 >> 8;

1577 
d
 = 
PPU
.
IRQHBómPos
;

1578 
PPU
.
IRQHBómPos
 = (PPU.IRQHBómPo†& 0xFF00Ë| 
byã
;

1580 i‡(
PPU
.
HTimîE«bÀd
 && PPU.
IRQHBómPos
 !
d
)

1581 
	`S9xUpd©eHTimî
();

1585 
d
 = 
PPU
.
IRQHBómPos
;

1586 
PPU
.
IRQHBómPos
 = (PPU.IRQHBómPo†& 0xFFË| ((
byã
 & 1) << 8);

1588 i‡(
PPU
.
HTimîE«bÀd
 && PPU.
IRQHBómPos
 !
d
)

1589 
	`S9xUpd©eHTimî
();

1594 
d
 = 
PPU
.
IRQVBómPos
;

1595 
PPU
.
IRQVBómPos
 = (PPU.IRQVBómPo†& 0xFF00Ë| 
byã
;

1596 #ifde‡
DEBUGGER


1597 
missög
.
vúq_pos
 = 
PPU
.
IRQVBómPos
;

1599 i‡(
PPU
.
VTimîE«bÀd
 && PPU.
IRQVBómPos
 !
d
)

1601 i‡(
PPU
.
HTimîE«bÀd
)

1602 
	`S9xUpd©eHTimî
();

1605 i‡(
PPU
.
IRQVBómPos
 =
CPU
.
V_Cou¡î
)

1606 
	`S9xSëIRQ
(
PPU_V_BEAM_IRQ_SOURCE
);

1612 
d
 = 
PPU
.
IRQVBómPos
;

1613 
PPU
.
IRQVBómPos
 = (PPU.IRQVBómPo†& 0xFFË| ((
byã
 & 1) << 8);

1614 #ifde‡
DEBUGGER


1615 
missög
.
vúq_pos
 = 
PPU
.
IRQVBómPos
;

1617 i‡(
PPU
.
VTimîE«bÀd
 && PPU.
IRQVBómPos
 !
d
)

1619 i‡(
PPU
.
HTimîE«bÀd
)

1620 
	`S9xUpd©eHTimî
();

1623 i‡(
PPU
.
IRQVBómPos
 =
CPU
.
V_Cou¡î
)

1624 
	`S9xSëIRQ
(
PPU_V_BEAM_IRQ_SOURCE
);

1630 #ifde‡
DEBUGGER


1631 
missög
.
dma_this_‰ame
 = 
byã
;

1632 
missög
.
dma_ch™√ls
 = 
byã
;

1634 i‡((
byã
 & 0x01) != 0)

1635 
	`S9xDoDMA
(0);

1636 i‡((
byã
 & 0x02) != 0)

1637 
	`S9xDoDMA
(1);

1638 i‡((
byã
 & 0x04) != 0)

1639 
	`S9xDoDMA
(2);

1640 i‡((
byã
 & 0x08) != 0)

1641 
	`S9xDoDMA
(3);

1642 i‡((
byã
 & 0x10) != 0)

1643 
	`S9xDoDMA
(4);

1644 i‡((
byã
 & 0x20) != 0)

1645 
	`S9xDoDMA
(5);

1646 i‡((
byã
 & 0x40) != 0)

1647 
	`S9xDoDMA
(6);

1648 i‡((
byã
 & 0x80) != 0)

1649 
	`S9xDoDMA
(7);

1652 #ifde‡
DEBUGGER


1653 
missög
.
hdma_this_‰ame
 |
byã
;

1654 
missög
.
hdma_ch™√ls
 |
byã
;

1656 i‡(
Sëtögs
.
DißbÀHDMA
)

1657 
byã
 = 0;

1658 
Mem‹y
.
FûlRAM
[0x420c] = 
byã
;

1659 
IPPU
.
HDMA
 = 
byã
;

1664 i‡((
byã
 & 1Ë!(
Mem‹y
.
FûlRAM
[0x420d] & 1))

1666 i‡(
byã
 & 1)

1668 
CPU
.
Fa°ROMS≥ed
 = 
ONE_CYCLE
;

1669 #ifde‡
DEBUGGER


1670 
missög
.
Á°_rom
 = 1;

1674 
CPU
.
Fa°ROMS≥ed
 = 
SLOW_ONE_CYCLE
;

1676 
Mem‹y
.
	`FixROMS≥ed
();

1685 
Mem‹y
.
FûlRAM
[0x4210] = 0;

1689 
	`CLEAR_IRQ_SOURCE
(
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
);

1721 
d
 = (
Addªss
 >> 4) & 0x7;

1722 
DMA
[
d
].
Tøns„rDúe˘i⁄
 = (
byã
 & 128) != 0 ? 1 : 0;

1723 
DMA
[
d
].
HDMAIndúe˘Addªssög
 = (
byã
 & 64) != 0 ? 1 : 0;

1724 
DMA
[
d
].
AAddªssDe¸emít
 = (
byã
 & 16) != 0 ? 1 : 0;

1725 
DMA
[
d
].
AAddªssFixed
 = (
byã
 & 8) != 0 ? 1 : 0;

1726 
DMA
[
d
].
Tøns„rMode
 = (
byã
 & 7);

1737 
DMA
[((
Addªss
 >> 4Ë& 0x7)].
BAddªss
 = 
byã
;

1748 
d
 = (
Addªss
 >> 4) & 0x7;

1749 
DMA
[
d
].
AAddªss
 &= 0xFF00;

1750 
DMA
[
d
].
AAddªss
 |
byã
;

1761 
d
 = (
Addªss
 >> 4) & 0x7;

1762 
DMA
[
d
].
AAddªss
 &= 0xFF;

1763 
DMA
[
d
].
AAddªss
 |
byã
 << 8;

1774 
DMA
[((
Addªss
 >> 4Ë& 0x7)].
AB™k
 = 
byã
;

1785 
d
 = (
Addªss
 >> 4) & 0x7;

1786 
DMA
[
d
].
Tøns„rByãs
 &= 0xFF00;

1787 
DMA
[
d
].
Tøns„rByãs
 |
byã
;

1788 
DMA
[
d
].
Indúe˘Addªss
 &= 0xff00;

1789 
DMA
[
d
].
Indúe˘Addªss
 |
byã
;

1800 
d
 = (
Addªss
 >> 4) & 0x7;

1801 
DMA
[
d
].
Tøns„rByãs
 &= 0xFF;

1802 
DMA
[
d
].
Tøns„rByãs
 |
byã
 << 8;

1803 
DMA
[
d
].
Indúe˘Addªss
 &= 0xff;

1804 
DMA
[
d
].
Indúe˘Addªss
 |
byã
 << 8;

1815 
DMA
[
d
 = ((
Addªss
 >> 4Ë& 0x7)].
Indúe˘B™k
 = 
byã
;

1826 
d
 = (
Addªss
 >> 4) & 7;

1827 
DMA
[
d
].
Addªss
 &= 0xff00;

1828 
DMA
[
d
].
Addªss
 |
byã
;

1839 
d
 = (
Addªss
 >> 4) & 0x7;

1840 
DMA
[
d
].
Addªss
 &= 0xff;

1841 
DMA
[
d
].
Addªss
 |
byã
 << 8;

1852 
d
 = (
Addªss
 >> 4) & 0x7;

1853 
DMA
[
d
].
LöeCou¡
 = 
byã
 & 0x7f;

1854 
DMA
[
d
].
Rïót
 = !(
byã
 & 0x80);

1870 
	`S9xSëSDD1Mem‹yM≠
(
Addªss
 - 0x4804, 
byã
 & 7);

1873 #ifde‡
DEBUGGER


1874 
missög
.
unknown˝u_wrôe
 = 
Addªss
;

1875 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1877 
	`•rötf
(

1878 
Såög
,

1880 
byã
,

1881 
Addªss
);

1882 
	`S9xMesßge
(
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1887 
Mem‹y
.
FûlRAM
[
Addªss
] = 
byã
;

1888 
	}
}

1894 
uöt8
 
	$S9xGëCPU
(
uöt16
 
Addªss
)

1896 
uöt8
 
byã
;

1898 i‡(
Addªss
 < 0x4200)

1900 #ifde‡
VAR_CYCLES


1901 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

1903 
Addªss
)

1912 i‡(
Mem‹y
.
FûlRAM
[0x4016] & 1)

1914 i‡((!
Sëtögs
.
Sw≠Joy∑ds


1915 && 
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE_SWAPPED
)

1916 || (
Sëtögs
.
Sw≠Joy∑ds


1917 && 
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE
))

1919 i‡(++
PPU
.
Mou£S≥ed
[0] > 2)

1920 
PPU
.
Mou£S≥ed
[0] = 0;

1925 
öd
 = 
Sëtögs
.
Sw≠Joy∑ds
 ? 1 : 0;

1926 
byã
 = 
IPPU
.
Joy∑ds
[
öd
] >> (
PPU
.
Joy∑d1Buâ⁄RódPos
 ^ 15);

1927 
PPU
.
Joy∑d1Buâ⁄RódPos
++;

1928  (
byã
 & 1);

1932 i‡(
Mem‹y
.
FûlRAM
[0x4016] & 1)

1935 
IPPU
.
C⁄åﬁÀr
)

1937 
SNES_MULTIPLAYER5
 :

1939 
SNES_MOUSE_SWAPPED
 :

1940 i‡(
Sëtögs
.
Sw≠Joy∑ds


1941 && ++
PPU
.
Mou£S≥ed
[0] > 2)

1942 
PPU
.
Mou£S≥ed
[0] = 0;

1945 
SNES_MOUSE
 :

1946 i‡(!
Sëtögs
.
Sw≠Joy∑ds


1947 && ++
PPU
.
Mou£S≥ed
[0] > 2)

1948 
PPU
.
Mou£S≥ed
[0] = 0;

1954 
öd
 = 
Sëtögs
.
Sw≠Joy∑ds
 ? 0 : 1;

1956 i‡(
IPPU
.
C⁄åﬁÀr
 =
SNES_MULTIPLAYER5
)

1958 i‡(
Mem‹y
.
FûlRAM
[0x4201] & 0x80)

1960 
byã
 =

1961 ((
IPPU
.
Joy∑ds
[
öd
]

1962 >> (
PPU
.
Joy∑d2Buâ⁄RódPos
 ^ 15))

1964 | (((
IPPU
.
Joy∑ds
[2]

1965 >> (
PPU
.
Joy∑d2Buâ⁄RódPos
 ^ 15))

1968 
PPU
.
Joy∑d2Buâ⁄RódPos
++;

1969  (
byã
);

1973 
byã
 =

1974 ((
IPPU
.
Joy∑ds
[3]

1975 >> (
PPU
.
Joy∑d3Buâ⁄RódPos
 ^ 15))

1977 | (((
IPPU
.
Joy∑ds
[4]

1978 >> (
PPU
.
Joy∑d3Buâ⁄RódPos
 ^ 15))

1981 
PPU
.
Joy∑d3Buâ⁄RódPos
++;

1982  (
byã
);

1986 (
IPPU
.
Joy∑ds
[
öd
]

1987 >> (
PPU
.
Joy∑d2Buâ⁄RódPos
++ ^ 15))

1991 #ifde‡
DEBUGGER


1992 
missög
.
unknown˝u_ªad
 = 
Addªss
;

1993 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1995 
	`•rötf
(
Såög
, "Unknow¿ªgi°îÑód: $%04X\n", 
Addªss
);

1996 
	`S9xMesßge
(
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

2001  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2004 
Addªss
)

2010 i‡(
SNESGameFixes
.
Old_Ród0x4200
)

2012 #ifde‡
CPU_SHUTDOWN


2013 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

2015  (
	`REGISTER_4212
());

2026  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2028  (
uöt8
Ë(
PPU
.
IRQHBómPos
);

2030  (
PPU
.
IRQHBómPos
 >> 8);

2032  (
uöt8
Ë(
PPU
.
IRQVBómPos
);

2034  (
PPU
.
IRQVBómPos
 >> 8);

2042 
Mem‹y
.
FûlRAM
[0x420b] = !Memory.FillRAM[0x420b];

2043  (
Mem‹y
.
FûlRAM
[0x420b]);

2046  (
IPPU
.
HDMA
);

2049  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2053  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2055 #ifde‡
CPU_SHUTDOWN


2056 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

2058 
byã
 = 
Mem‹y
.
FûlRAM
[0x4210];

2059 
Mem‹y
.
FûlRAM
[0x4210] = 0;

2060  (
byã
);

2062 
byã
 =

2063 (
CPU
.
IRQA˘ive


2064 & (
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
))

2068 
byã
 |
CPU
.
Cy˛es
 >
Sëtögs
.
HBœnkSèπ
 ? 0x40 : 0;

2069 
	`CLEAR_IRQ_SOURCE
(
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
);

2070  (
byã
);

2073 #ifde‡
CPU_SHUTDOWN


2074 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

2076  (
	`REGISTER_4212
());

2086  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2096  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2107  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2117  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2127  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2137  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2147  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2157  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2167  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2177  (
DMA
[(
Addªss
 >> 4Ë& 7].
Indúe˘B™k
);

2187  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2197  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2208 
d
 = (
Addªss
 & 0x70) >> 4;

2209 i‡(
IPPU
.
HDMA
 & (1 << 
d
))

2211  (
DMA
[
d
].
LöeCou¡
);

2213  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2216 #ifde‡
DEBUGGER


2217 
missög
.
unknown˝u_ªad
 = 
Addªss
;

2218 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

2220 
	`•rötf
(
Såög
, "Unknow¿ªgi°îÑód: $%04X\n", 
Addªss
);

2221 
	`S9xMesßge
(
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

2227  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2228 
	}
}

2230 
	$S9xRe£tPPU
()

2232 
PPU
.
BGMode
 = 0;

2233 
PPU
.
BG3Pri‹ôy
 = 0;

2234 
PPU
.
Brighäess
 = 0;

2235 
PPU
.
VMA
.
High
 = 0;

2236 
PPU
.
VMA
.
In¸emít
 = 1;

2237 
PPU
.
VMA
.
Addªss
 = 0;

2238 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 0;

2239 
PPU
.
VMA
.
Shi·
 = 0;

2241 
uöt8
 
B
 = 0; B != 4; B++)

2243 
PPU
.
BG
[
B
].
SCBa£
 = 0;

2244 
PPU
.
BG
[
B
].
VOff£t
 = 0;

2245 
PPU
.
BG
[
B
].
HOff£t
 = 0;

2246 
PPU
.
BG
[
B
].
BGSize
 = 0;

2247 
PPU
.
BG
[
B
].
NameBa£
 = 0;

2248 
PPU
.
BG
[
B
].
SCSize
 = 0;

2250 
PPU
.
ClùCou¡s
[
B
] = 0;

2251 
PPU
.
ClùWödowOvîœpLogic
[
B
] = 
CLIP_OR
;

2252 
PPU
.
ClùWödow1E«bÀ
[
B
] = 
FALSE
;

2253 
PPU
.
ClùWödow2E«bÀ
[
B
] = 
FALSE
;

2254 
PPU
.
ClùWödow1Inside
[
B
] = 
TRUE
;

2255 
PPU
.
ClùWödow2Inside
[
B
] = 
TRUE
;

2258 
PPU
.
ClùCou¡s
[4] = 0;

2259 
PPU
.
ClùCou¡s
[5] = 0;

2260 
PPU
.
ClùWödowOvîœpLogic
[4] = PPU.ClùWödowOvîœpLogic[5] = 
CLIP_OR
;

2261 
PPU
.
ClùWödow1E«bÀ
[4] = PPU.ClùWödow1E«bÀ[5] = 
FALSE
;

2262 
PPU
.
ClùWödow2E«bÀ
[4] = PPU.ClùWödow2E«bÀ[5] = 
FALSE
;

2263 
PPU
.
ClùWödow1Inside
[4] = PPU.ClùWödow1Inside[5] = 
TRUE
;

2264 
PPU
.
ClùWödow2Inside
[4] = PPU.ClùWödow2Inside[5] = 
TRUE
;

2266 
PPU
.
CGFLIP
 = 0;

2267 
c
;

2268 
c
 = 0; c < 256; c++)

2270 
IPPU
.
Red
[
c
] = (c & 7) << 2;

2271 
IPPU
.
Gªí
[
c
] = ((c >> 3) & 7) << 2;

2272 
IPPU
.
Blue
[
c
] = ((c >> 6) & 2) << 3;

2273 
PPU
.
CGDATA
[
c
] =

2274 
IPPU
.
Red
[
c
] | (IPPU.
Gªí
[c] << 5Ë| (IPPU.
Blue
[c] << 10);

2277 
PPU
.
Fú°S¥ôe
 = 0;

2278 
PPU
.
La°S¥ôe
 = 127;

2279 
S¥ôe
 = 0; Sprite < 128; Sprite++)

2281 
PPU
.
OBJ
[
S¥ôe
].
HPos
 = 0;

2282 
PPU
.
OBJ
[
S¥ôe
].
VPos
 = 0;

2283 
PPU
.
OBJ
[
S¥ôe
].
VFlù
 = 0;

2284 
PPU
.
OBJ
[
S¥ôe
].
HFlù
 = 0;

2285 
PPU
.
OBJ
[
S¥ôe
].
Pri‹ôy
 = 0;

2286 
PPU
.
OBJ
[
S¥ôe
].
PÆëã
 = 0;

2287 
PPU
.
OBJ
[
S¥ôe
].
Name
 = 0;

2288 
PPU
.
OBJ
[
S¥ôe
].
Size
 = 0;

2290 
PPU
.
OAMPri‹ôyRŸ©i⁄
 = 0;

2292 
PPU
.
OAMFlù
 = 0;

2293 
PPU
.
OAMTûeAddªss
 = 0;

2294 
PPU
.
OAMAddr
 = 0;

2295 
PPU
.
IRQVBómPos
 = 0;

2296 
PPU
.
IRQHBómPos
 = 0;

2297 
PPU
.
VBómPosL©ched
 = 0;

2298 
PPU
.
HBómPosL©ched
 = 0;

2300 
PPU
.
HBómFlù
 = 0;

2301 
PPU
.
VBómFlù
 = 0;

2302 
PPU
.
HVBómCou¡îL©ched
 = 0;

2304 
PPU
.
M©rixA
 = PPU.
M©rixB
 = PPU.
M©rixC
 = PPU.
M©rixD
 = 0;

2305 
PPU
.
CíåeX
 = PPU.
CíåeY
 = 0;

2306 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 0;

2307 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 0;

2308 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 0;

2310 
PPU
.
CGADD
 = 0;

2311 
PPU
.
FixedCﬁourRed
 = PPU.
FixedCﬁourGªí
 = PPU.
FixedCﬁourBlue
 = 0;

2312 
PPU
.
SavedOAMAddr
 = 0;

2313 
PPU
.
S¸ìnHeight
 = 
SNES_HEIGHT
;

2314 
PPU
.
WRAM
 = 0;

2315 
PPU
.
BG_F‹˚d
 = 0;

2316 
PPU
.
F‹˚dBœnkög
 = 
TRUE
;

2317 
PPU
.
OBJThroughMaö
 = 
FALSE
;

2318 
PPU
.
OBJThroughSub
 = 
FALSE
;

2319 
PPU
.
OBJSizeSñe˘
 = 0;

2320 
PPU
.
OBJNameSñe˘
 = 0;

2321 
PPU
.
OBJNameBa£
 = 0;

2322 
PPU
.
OBJAddôi⁄
 = 
FALSE
;

2323 
PPU
.
OAMRódFlù
 = 0;

2324 
	`ZîoMem‹y
(
PPU
.
OAMD©a
, 512 + 32);

2326 
PPU
.
VTimîE«bÀd
 = 
FALSE
;

2327 
PPU
.
HTimîE«bÀd
 = 
FALSE
;

2328 
PPU
.
HTimîPosôi⁄
 = 
Sëtögs
.
H_Max
 + 1;

2329 
PPU
.
Moßic
 = 0;

2330 
PPU
.
BGMoßic
[0] = PPU.BGMoßic[1] = 
FALSE
;

2331 
PPU
.
BGMoßic
[2] = PPU.BGMoßic[3] = 
FALSE
;

2332 
PPU
.
Mode7HFlù
 = 
FALSE
;

2333 
PPU
.
Mode7VFlù
 = 
FALSE
;

2334 
PPU
.
Mode7Rïót
 = 0;

2335 
PPU
.
Wödow1Le·
 = 1;

2336 
PPU
.
Wödow1Right
 = 0;

2337 
PPU
.
Wödow2Le·
 = 1;

2338 
PPU
.
Wödow2Right
 = 0;

2339 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

2340 
PPU
.
CGFLIPRód
 = 0;

2341 
PPU
.
Nìd16x8Mulô∂y
 = 
FALSE
;

2342 
PPU
.
Mou£S≥ed
[0] = PPU.MouseSpeed[1] = 0;

2344 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

2345 
IPPU
.
HDMA
 = 0;

2346 
IPPU
.
HDMASèπed
 = 
FALSE
;

2347 
IPPU
.
MaxBrighäess
 = 0;

2348 
IPPU
.
L©chedBœnkög
 = 0;

2349 
IPPU
.
OBJCh™ged
 = 
TRUE
;

2350 
IPPU
.
RídîThisFøme
 = 
TRUE
;

2351 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
TRUE
;

2352 
IPPU
.
FømeCou¡
 = 0;

2353 
IPPU
.
RídîedFømesCou¡
 = 0;

2354 
IPPU
.
Di•œyedRídîedFømeCou¡
 = 0;

2355 
IPPU
.
Skù≥dFømes
 = 0;

2356 
IPPU
.
FømeSkù
 = 0;

2357 
	`ZîoMem‹y
(
IPPU
.
TûeCached
[
TILE_2BIT
], 
MAX_2BIT_TILES
);

2358 
	`ZîoMem‹y
(
IPPU
.
TûeCached
[
TILE_4BIT
], 
MAX_4BIT_TILES
);

2359 
	`ZîoMem‹y
(
IPPU
.
TûeCached
[
TILE_8BIT
], 
MAX_8BIT_TILES
);

2360 
IPPU
.
Fú°VRAMRód
 = 
FALSE
;

2361 
IPPU
.
L©chedI¡îœ˚
 = 
FALSE
;

2362 
IPPU
.
DoubÀWidthPixñs
 = 
FALSE
;

2363 
IPPU
.
RídîedS¸ìnWidth
 = 
SNES_WIDTH
;

2364 
IPPU
.
RídîedS¸ìnHeight
 = 
SNES_HEIGHT
;

2365 
IPPU
.
XB
 = 
NULL
;

2366 
c
 = 0; c < 256; c++)

2367 
IPPU
.
S¸ìnCﬁ‹s
[
c
] = c;

2368 
	`S9xFixCﬁourBrighäess
();

2369 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
 = 0;

2370 
IPPU
.
Joy∑ds
[0] = IPPU.Joypads[1] = IPPU.Joypads[2] = 0;

2371 
IPPU
.
Joy∑ds
[3] = IPPU.Joypads[4] = 0;

2372 
IPPU
.
Su≥rSc›e
 = 0;

2373 
IPPU
.
Mou£
[0] = IPPU.Mouse[1] = 0;

2374 
IPPU
.
PªvMou£X
[0] = IPPU.PrevMouseX[1] = 256 / 2;

2375 
IPPU
.
PªvMou£Y
[0] = IPPU.PrevMouseY[1] = 224 / 2;

2377 i‡(
Sëtögs
.
C⁄åﬁÀrO±i⁄
 == 0)

2378 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MAX_CONTROLLER_OPTIONS
 - 1;

2380 
IPPU
.
C⁄åﬁÀr
 = 
Sëtögs
.
C⁄åﬁÀrO±i⁄
 - 1;

2381 
	`S9xNextC⁄åﬁÀr
();

2383 
c
 = 0; c < 2; c++)

2384 
	`mem£t
(& 
IPPU
.
Clù
[
c
], 0, (
ClùD©a
));

2386 i‡(
Sëtögs
.
Mou£Ma°î
)

2388 
	`S9xPro˚ssMou£
(0);

2389 
	`S9xPro˚ssMou£
(1);

2391 
c
 = 0; c < 0x8000; c += 0x100)

2392 
	`mem£t
(& 
Mem‹y
.
FûlRAM
[
c
], c >> 8, 0x100);

2394 
	`ZîoMem‹y
(& 
Mem‹y
.
FûlRAM
[0x2100], 0x100);

2395 
	`ZîoMem‹y
(& 
Mem‹y
.
FûlRAM
[0x4200], 0x100);

2396 
	`ZîoMem‹y
(& 
Mem‹y
.
FûlRAM
[0x4000], 0x100);

2398 
	`ZîoMem‹y
(& 
Mem‹y
.
FûlRAM
[0x1000], 0x1000);

2399 
	}
}

2401 
	$S9xPro˚ssMou£
(
which1
)

2403 
x
, 
y
;

2404 
uöt32
 
buâ⁄s
;

2406 i‡((
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE


2407 || 
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE_SWAPPED
)

2408 && 
	`S9xRódMou£Posôi⁄
(
which1
, 
x
, 
y
, 
buâ⁄s
))

2410 
dñè_x
, 
dñè_y
;

2411 
	#MOUSE_SIGNATURE
 0x1

	)

2412 
IPPU
.
Mou£
[
which1
] =

2413 
MOUSE_SIGNATURE


2414 | (
PPU
.
Mou£S≥ed
[
which1
] << 4)

2415 | ((
buâ⁄s
 & 1) << 6)

2416 | ((
buâ⁄s
 & 2) << 6);

2418 
dñè_x
 = 
x
 - 
IPPU
.
PªvMou£X
[
which1
];

2419 
dñè_y
 = 
y
 - 
IPPU
.
PªvMou£Y
[
which1
];

2421 i‡(
dñè_x
 > 63)

2423 
dñè_x
 = 63;

2424 
IPPU
.
PªvMou£X
[
which1
] += 63;

2426 i‡(
dñè_x
 < -63)

2428 
dñè_x
 = -63;

2429 
IPPU
.
PªvMou£X
[
which1
] -= 63;

2432 
IPPU
.
PªvMou£X
[
which1
] = 
x
;

2434 i‡(
dñè_y
 > 63)

2436 
dñè_y
 = 63;

2437 
IPPU
.
PªvMou£Y
[
which1
] += 63;

2439 i‡(
dñè_y
 < -63)

2441 
dñè_y
 = -63;

2442 
IPPU
.
PªvMou£Y
[
which1
] -= 63;

2445 
IPPU
.
PªvMou£Y
[
which1
] = 
y
;

2447 i‡(
dñè_x
 < 0)

2449 
dñè_x
 = -delta_x;

2450 
IPPU
.
Mou£
[
which1
] |(
dñè_x
 | 0x80) << 16;

2453 
IPPU
.
Mou£
[
which1
] |
dñè_x
 << 16;

2455 i‡(
dñè_y
 < 0)

2457 
dñè_y
 = -delta_y;

2458 
IPPU
.
Mou£
[
which1
] |(
dñè_y
 | 0x80) << 24;

2461 
IPPU
.
Mou£
[
which1
] |
dñè_y
 << 24;

2463 i‡(
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE_SWAPPED
)

2464 
IPPU
.
Joy∑ds
[0] = IPPU.
Mou£
[
which1
];

2466 
IPPU
.
Joy∑ds
[1] = IPPU.
Mou£
[
which1
];

2468 
	}
}

2470 
	$Pro˚ssSu≥rSc›e
()

2472 
x
, 
y
;

2473 
uöt32
 
buâ⁄s
;

2475 i‡(
IPPU
.
C⁄åﬁÀr
 =
SNES_SUPERSCOPE


2476 && 
	`S9xRódSu≥rSc›ePosôi⁄
(
x
, 
y
, 
buâ⁄s
))

2478 
	#SUPERSCOPE_SIGNATURE
 0x00ff

	)

2479 
uöt32
 
sc›e
;

2481 
sc›e
 =

2482 
SUPERSCOPE_SIGNATURE


2483 | ((
buâ⁄s
 & 1) << (7 + 8))

2484 | ((
buâ⁄s
 & 2) << (5 + 8))

2485 | ((
buâ⁄s
 & 4) << (3 + 8))

2486 | ((
buâ⁄s
 & 8) << (1 + 8));

2487 i‡(
x
 > 255)

2488 
x
 = 255;

2489 i‡(
x
 < 0)

2490 
x
 = 0;

2491 i‡(
y
 > 
PPU
.
S¸ìnHeight
 - 1)

2492 
y
 = 
PPU
.
S¸ìnHeight
 - 1;

2493 i‡(
y
 < 0)

2494 
y
 = 0;

2496 
PPU
.
VBómPosL©ched
 = (
uöt16
Ë(
y
 + 1);

2497 
PPU
.
HBómPosL©ched
 = (
uöt16
Ë
x
;

2498 
PPU
.
HVBómCou¡îL©ched
 = 
TRUE
;

2499 
Mem‹y
.
FûlRAM
[0x213F] |= 0x40;

2500 
IPPU
.
Joy∑ds
[1] = 
sc›e
;

2502 
	}
}

2504 
	$S9xNextC⁄åﬁÀr
()

2506 
IPPU
.
C⁄åﬁÀr
)

2508 
SNES_MULTIPLAYER5
 :

2509 
IPPU
.
C⁄åﬁÀr
 = 
SNES_JOYPAD
;

2511 
SNES_JOYPAD
 :

2512 i‡(
Sëtögs
.
Mou£Ma°î
)

2514 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MOUSE_SWAPPED
;

2517 
SNES_MOUSE_SWAPPED
 :

2518 i‡(
Sëtögs
.
Mou£Ma°î
)

2520 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MOUSE
;

2523 
SNES_MOUSE
 :

2524 i‡(
Sëtögs
.
Su≥rSc›eMa°î
)

2526 
IPPU
.
C⁄åﬁÀr
 = 
SNES_SUPERSCOPE
;

2529 
SNES_SUPERSCOPE
 :

2530 i‡(
Sëtögs
.
Mu…iPœyî5Ma°î
)

2532 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MULTIPLAYER5
;

2536 
IPPU
.
C⁄åﬁÀr
 = 
SNES_JOYPAD
;

2539 
	}
}

2541 
	$S9xUpd©eJoy∑ds
()

2543 #ifde‡
_SNESPPC


2544 
i
 = 0;

2546 
i
;

2548 
i
 = 0; i < 5; i++)

2551 
IPPU
.
Joy∑ds
[
i
] = 
	`S9xRódJoy∑d
(i);

2552 i‡(
IPPU
.
Joy∑ds
[
i
] & 
SNES_LEFT_MASK
)

2553 
IPPU
.
Joy∑ds
[
i
] &~
SNES_RIGHT_MASK
;

2554 i‡(
IPPU
.
Joy∑ds
[
i
] & 
SNES_UP_MASK
)

2555 
IPPU
.
Joy∑ds
[
i
] &~
SNES_DOWN_MASK
;

2559 i‡(
SNESGameFixes
.
TouhaidíC⁄åﬁÀrFix


2560 && (
IPPU
.
C⁄åﬁÀr
 =
SNES_JOYPAD


2561 || 
IPPU
.
C⁄åﬁÀr
 =
SNES_MULTIPLAYER5
))

2563 
i
 = 0; i < 5; i++)

2565 i‡(
IPPU
.
Joy∑ds
[
i
])

2566 
IPPU
.
Joy∑ds
[
i
] |= 0xffff0000;

2571 i‡(
Sëtögs
.
Mou£Ma°î
)

2573 
i
 = 0; i < 2; i++)

2574 
	`S9xPro˚ssMou£
(
i
);

2578 i‡(
Sëtögs
.
Su≥rSc›eMa°î
)

2579 
	`Pro˚ssSu≥rSc›e
();

2581 i‡(
Mem‹y
.
FûlRAM
[0x4200] & 1)

2583 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 16;

2584 i‡(
Mem‹y
.
FûlRAM
[0x4201] & 0x80)

2586 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 16;

2587 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 0;

2591 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 0;

2592 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 16;

2594 
öd
 = 
Sëtögs
.
Sw≠Joy∑ds
 ? 1 : 0;

2596 
Mem‹y
.
FûlRAM
[0x4218] = (
uöt8
Ë
IPPU
.
Joy∑ds
[
öd
];

2597 
Mem‹y
.
FûlRAM
[0x4219] = (
uöt8
Ë(
IPPU
.
Joy∑ds
[
öd
] >> 8);

2598 
Mem‹y
.
FûlRAM
[0x421a] = (
uöt8
Ë
IPPU
.
Joy∑ds
[
öd
 ^ 1];

2599 
Mem‹y
.
FûlRAM
[0x421b] = (
uöt8
Ë(
IPPU
.
Joy∑ds
[
öd
 ^ 1] >> 8);

2600 i‡(
Mem‹y
.
FûlRAM
[0x4201] & 0x80)

2602 
Mem‹y
.
FûlRAM
[0x421c] = (
uöt8
Ë
IPPU
.
Joy∑ds
[
öd
];

2603 
Mem‹y
.
FûlRAM
[0x421d] = (
uöt8
Ë(
IPPU
.
Joy∑ds
[
öd
] >> 8);

2604 
Mem‹y
.
FûlRAM
[0x421e] = (
uöt8
Ë
IPPU
.
Joy∑ds
[2];

2605 
Mem‹y
.
FûlRAM
[0x421f] = (
uöt8
Ë(
IPPU
.
Joy∑ds
[2] >> 8);

2609 
Mem‹y
.
FûlRAM
[0x421c] = (
uöt8
Ë
IPPU
.
Joy∑ds
[3];

2610 
Mem‹y
.
FûlRAM
[0x421d] = (
uöt8
Ë(
IPPU
.
Joy∑ds
[3] >> 8);

2611 
Mem‹y
.
FûlRAM
[0x421e] = (
uöt8
Ë
IPPU
.
Joy∑ds
[4];

2612 
Mem‹y
.
FûlRAM
[0x421f] = (
uöt8
Ë(
IPPU
.
Joy∑ds
[4] >> 8);

2615 
	}
}

2617 #i‚de‡
ZSNES_FX


2618 
	$S9xSu≥rFXExec
()

2621 i‡(
Sëtögs
.
Su≥rFX
)

2623 i‡((
Mem‹y
.
FûlRAM
[0x3000 + 
GSU_SFR
] & 
FLG_G
)

2624 && (
Mem‹y
.
FûlRAM
[0x3000 + 
GSU_SCMR
] & 0x18) == 0x18)

2626 i‡(!
Sëtögs
.
WöãrGﬁd
)

2627 
	`FxEmuœã
(~0);

2628 
	`FxEmuœã
((
Mem‹y
.
FûlRAM
[0x3000 + 
GSU_CLSR
] & 1) ? 700 : 350);

2629 
GSUSètus
 = 
Mem‹y
.
FûlRAM
[0x3000

2630 + 
GSU_SFR
] | (
Mem‹y
.
FûlRAM
[0x3000 + GSU_SFR + 1] << 8);

2631 i‡((
GSUSètus
 & (
FLG_G
 | 
FLG_IRQ
)) == FLG_IRQ)

2634 
	`S9xSëIRQ
(
GSU_IRQ_SOURCE
);

2639 
uöt32
 
tmp
 = (
Mem‹y
.
FûlRAM
[0x3034] << 16)

2640 + * (
uöt16
 *Ë& 
Mem‹y
.
FûlRAM
[0x301e];

2642 i‡(
tmp
 == 0x018428)

2644 * (
uöt16
 *)

2645 & 
SRAM
[0x0064] = 0xbc00;

2646 * (
uöt16
 *Ë& 
SRAM
[0x002c] = 0x8000;

2649 i‡(
tmp
 == -1)

2651 
Mem‹y
.
FûlRAM
[0x3030] & 0x20)

2653 
i
;

2654 
öt32
 
vEº‹
;

2655 
uöt8
 
avReg
[0x40];

2656 
tmp
[128];

2657 
uöt8
 
vPùe
;

2658 
uöt8
 
vCﬁr
;

2659 
uöt8
 
vP‹
;

2661 
	`FxPùeSåög
(
tmp
);

2663 i‡(
	`°æí
(
tmp
) < 32)

2665 
	`mem£t
(& 
tmp
[
	`°æí
(tmp)], ' ', 32 - strlen(tmp));

2666 
tmp
[32] = 0;

2670 
vCﬁr
 = 
	`FxGëCﬁ‹Regi°î
();

2671 
vP‹
 = 
	`FxGëPlŸO±i⁄Regi°î
();

2672 
	`mem˝y
(
avReg
, 
Su≥rFX
.
pvRegi°îs
, 0x40);

2675 
	`¥ötf
(
tmp
);

2678 
vPùe
 = 
	`FxPùe
();

2679 
vEº‹
 = 
	`FxEmuœã
(1);

2682 
i
 = 0; i < 16; i++)

2684 
uöt32
 
a
 = 0;

2685 
uöt32
 
r1
 =

2686 ((
uöt32
Ë
avReg
[
i
 * 2])

2687 | (((
uöt32
Ë
avReg
[(
i
 * 2) + 1]) << 8);

2688 
uöt32
 
r2
 =

2689 (
uöt32
Ë(
Su≥rFX
.
pvRegi°îs
[
i
 * 2])

2690 | (((
uöt32
Ë
Su≥rFX
.
pvRegi°îs
[(
i
 * 2) + 1]) << 8);

2691 i‡(
i
 == 15)

2692 
a
 = 
	`OPCODE_BYTES
(
vPùe
);

2693 i‡(((
r1
 + 
a
Ë& 0xffffË!
r2
)

2694 
	`¥ötf
("Ñ%d=$%04x", 
i
, 
r2
);

2698 
uöt32
 
r1
 =

2699 ((
uöt32
Ë
avReg
[0x30]) | (((uint32)ávReg[0x31]) << 8);

2700 
uöt32
 
r2
 =

2701 (
uöt32
Ë(
Su≥rFX
.
pvRegi°îs
[0x30])

2702 | (((
uöt32
Ë
Su≥rFX
.
pvRegi°îs
[0x31]) << 8);

2703 i‡((
r1
 & (1 << 1)Ë!(
r2
 & (1 << 1)))

2704 
	`¥ötf
(" Z=%d", (
uöt32
Ë(!!(
r2
 & (1 << 1))));

2705 i‡((
r1
 & (1 << 2)Ë!(
r2
 & (1 << 2)))

2706 
	`¥ötf
(" CY=%d", (
uöt32
Ë(!!(
r2
 & (1 << 2))));

2707 i‡((
r1
 & (1 << 3)Ë!(
r2
 & (1 << 3)))

2708 
	`¥ötf
(" S=%d", (
uöt32
Ë(!!(
r2
 & (1 << 3))));

2709 i‡((
r1
 & (1 << 4)Ë!(
r2
 & (1 << 4)))

2710 
	`¥ötf
(" OV=%d", (
uöt32
Ë(!!(
r2
 & (1 << 4))));

2711 i‡((
r1
 & (1 << 5)Ë!(
r2
 & (1 << 5)))

2712 
	`¥ötf
(" G=%d", (
uöt32
Ë(!!(
r2
 & (1 << 5))));

2713 i‡((
r1
 & (1 << 6)Ë!(
r2
 & (1 << 6)))

2714 
	`¥ötf
(" R=%d", (
uöt32
Ë(!!(
r2
 & (1 << 6))));

2715 i‡((
r1
 & (1 << 8)Ë!(
r2
 & (1 << 8)))

2716 
	`¥ötf
(" ALT1=%d", (
uöt32
Ë(!!(
r2
 & (1 << 8))));

2717 i‡((
r1
 & (1 << 9)Ë!(
r2
 & (1 << 9)))

2718 
	`¥ötf
(" ALT2=%d", (
uöt32
Ë(!!(
r2
 & (1 << 9))));

2719 i‡((
r1
 & (1 << 10)Ë!(
r2
 & (1 << 10)))

2720 
	`¥ötf
(" IL=%d", (
uöt32
Ë(!!(
r2
 & (1 << 10))));

2721 i‡((
r1
 & (1 << 11)Ë!(
r2
 & (1 << 11)))

2722 
	`¥ötf
(" IH=%d", (
uöt32
Ë(!!(
r2
 & (1 << 11))));

2723 i‡((
r1
 & (1 << 12)Ë!(
r2
 & (1 << 12)))

2724 
	`¥ötf
(" B=%d", (
uöt32
Ë(!!(
r2
 & (1 << 12))));

2725 i‡((
r1
 & (1 << 15)Ë!(
r2
 & (1 << 15)))

2726 
	`¥ötf
(" IRQ=%d", (
uöt32
Ë(!!(
r2
 & (1 << 15))));

2730 
uöt32
 
r1
 = ((uöt32Ë
avReg
[0x34]);

2731 
uöt32
 
r2
 = (uöt32Ë(
Su≥rFX
.
pvRegi°îs
[0x34]);

2732 i‡(
r1
 !
r2
)

2733 
	`¥ötf
(" PBR=$%02x", 
r2
);

2737 
uöt32
 
r1
 = ((uöt32Ë
avReg
[0x36]);

2738 
uöt32
 
r2
 = (uöt32Ë(
Su≥rFX
.
pvRegi°îs
[0x36]);

2739 i‡(
r1
 !
r2
)

2740 
	`¥ötf
(" ROMBR=$%02x", 
r2
);

2744 
uöt32
 
r1
 = ((uöt32Ë
avReg
[0x3c]);

2745 
uöt32
 
r2
 = (uöt32Ë(
Su≥rFX
.
pvRegi°îs
[0x3c]);

2746 i‡(
r1
 !
r2
)

2747 
	`¥ötf
(" RAMBR=$%02x", 
r2
);

2751 
uöt32
 
r1
 =

2752 ((
uöt32
Ë
avReg
[0x3e]) | (((uint32)ávReg[0x3f]) << 8);

2753 
uöt32
 
r2
 =

2754 (
uöt32
Ë(
Su≥rFX
.
pvRegi°îs
[0x3e])

2755 | (((
uöt32
Ë
Su≥rFX
.
pvRegi°îs
[0x3f]) << 8);

2756 i‡(
r1
 !
r2
)

2757 
	`¥ötf
(" CBR=$%04x", 
r2
);

2761 i‡(
vCﬁr
 !
	`FxGëCﬁ‹Regi°î
())

2762 
	`¥ötf
(" COLR=$%02x", 
	`FxGëCﬁ‹Regi°î
());

2766 i‡(
vP‹
 !
	`FxGëPlŸO±i⁄Regi°î
())

2767 
	`¥ötf
(" POR=$%02x", 
	`FxGëPlŸO±i⁄Regi°î
());

2769 
	`¥ötf
("\n");

2771 
	`S9xExô
();

2775 
uöt32
 
t
 =

2776 (
Mem‹y
.
FûlRAM
[0x3034] << 16)

2777 + (
Mem‹y
.
FûlRAM
[0x301f] << 8)

2778 + (
Mem‹y
.
FûlRAM
[0x301e] << 0);

2780 
	`¥ötf
("%06x: %d\n", 
t
, 
	`FxEmuœã
(2000000));

2784 i‡(!(
CPU
.
Fœgs
 & 
TRACE_FLAG
))

2786 
z
 = 1; if (z == 0)

2788 
FILE
 * 
åa˚
;

2789 
CPU
.
Fœgs
 |
TRACE_FLAG
;

2790 
åa˚
 = 
	`f›í
("trace.log", "wb");

2793 
z
--;

2796 
Mem‹y
.
FûlRAM
[0x3030] &= ~0x20;

2797 i‡(
Mem‹y
.
FûlRAM
[0x3031] & 0x80)

2799 
	`S9xSëIRQ
(
GSU_IRQ_SOURCE
);

2802 
	}
}

	@ppu.h

41 #i‚de‡
_PPU_H_


42 
	#_PPU_H_


	)

44 
	#FIRST_VISIBLE_LINE
 1

	)

46 
uöt8
 
GëB™k
;

47 
uöt16
 
SignExãnd
 [2];

49 
	#TILE_2BIT
 0

	)

50 
	#TILE_4BIT
 1

	)

51 
	#TILE_8BIT
 2

	)

53 
	#MAX_2BIT_TILES
 4096

	)

54 
	#MAX_4BIT_TILES
 2048

	)

55 
	#MAX_8BIT_TILES
 1024

	)

57 
	#PPU_H_BEAM_IRQ_SOURCE
 (1 << 0)

	)

58 
	#PPU_V_BEAM_IRQ_SOURCE
 (1 << 1)

	)

59 
	#GSU_IRQ_SOURCE
 (1 << 2)

	)

60 
	#SA1_IRQ_SOURCE
 (1 << 7)

	)

61 
	#SA1_DMA_IRQ_SOURCE
 (1 << 5)

	)

63 
	sClùD©a
 {

64 
uöt32
 
	mCou¡
 [6];

65 
uöt32
 
	mLe·
 [6][6];

66 
uöt32
 
	mRight
 [6][6];

69 
	sI¡î«lPPU
 {

70 
boﬁ8_32
 
	mCﬁ‹sCh™ged
;

71 
uöt8
 
	mHDMA
;

72 
boﬁ8_32
 
	mHDMASèπed
;

73 
uöt8
 
	mMaxBrighäess
;

74 
boﬁ8_32
 
	mL©chedBœnkög
;

75 
boﬁ8_32
 
	mOBJCh™ged
;

76 
boﬁ8_32
 
	mRídîThisFøme
;

77 
boﬁ8_32
 
	mDúe˘CﬁourM≠sNìdRebuûd
;

78 
uöt32
 
	mFømeCou¡
;

79 
uöt32
 
	mRídîedFømesCou¡
;

80 
uöt32
 
	mDi•œyedRídîedFømeCou¡
;

81 
uöt32
 
	mSkù≥dFømes
;

82 
uöt32
 
	mFømeSkù
;

83 
uöt8
 *
	mTûeCache
 [3];

84 
uöt8
 *
	mTûeCached
 [3];

85 
boﬁ8_32
 
	mFú°VRAMRód
;

86 
boﬁ8_32
 
	mL©chedI¡îœ˚
;

87 
boﬁ8_32
 
	mDoubÀWidthPixñs
;

88 
	mRídîedS¸ìnHeight
;

89 
	mRídîedS¸ìnWidth
;

90 
uöt32
 
	mRed
 [256];

91 
uöt32
 
	mGªí
 [256];

92 
uöt32
 
	mBlue
 [256];

93 
uöt8
 *
	mXB
;

94 
uöt16
 
	mS¸ìnCﬁ‹s
 [256];

95 
	mPªviousLöe
;

96 
	mCuºítLöe
;

97 
	mC⁄åﬁÀr
;

98 
uöt32
 
	mJoy∑ds
[5];

99 
uöt32
 
	mSu≥rSc›e
;

100 
uöt32
 
	mMou£
[2];

101 
	mPªvMou£X
[2];

102 
	mPªvMou£Y
[2];

103 
ClùD©a
 
	mClù
 [2];

106 
	sSOBJ


108 
	mHPos
;

109 
uöt16
 
	mVPos
;

110 
uöt16
 
	mName
;

111 
uöt8
 
	mVFlù
;

112 
uöt8
 
	mHFlù
;

113 
uöt8
 
	mPri‹ôy
;

114 
uöt8
 
	mPÆëã
;

115 
uöt8
 
	mSize
;

118 
	sSPPU
 {

119 
uöt8
 
	mBGMode
;

120 
uöt8
 
	mBG3Pri‹ôy
;

121 
uöt8
 
	mBrighäess
;

124 
boﬁ8_32
 
	mHigh
;

125 
uöt8
 
	mIn¸emít
;

126 
uöt16
 
	mAddªss
;

127 
uöt16
 
	mMask1
;

128 
uöt16
 
	mFuŒGøphicCou¡
;

129 
uöt16
 
	mShi·
;

130 } 
	mVMA
;

133 
uöt16
 
	mSCBa£
;

134 
uöt16
 
	mVOff£t
;

135 
uöt16
 
	mHOff£t
;

136 
uöt8
 
	mBGSize
;

137 
uöt16
 
	mNameBa£
;

138 
uöt16
 
	mSCSize
;

139 } 
	mBG
 [4];

141 
boﬁ8_32
 
	mCGFLIP
;

142 
uöt16
 
	mCGDATA
 [256];

143 
uöt8
 
	mFú°S¥ôe
;

144 
uöt8
 
	mLa°S¥ôe
;

145 
SOBJ
 
	mOBJ
 [128];

146 
uöt8
 
	mOAMPri‹ôyRŸ©i⁄
;

147 
uöt16
 
	mOAMAddr
;

149 
uöt8
 
	mOAMFlù
;

150 
uöt16
 
	mOAMTûeAddªss
;

151 
uöt16
 
	mIRQVBómPos
;

152 
uöt16
 
	mIRQHBómPos
;

153 
uöt16
 
	mVBómPosL©ched
;

154 
uöt16
 
	mHBómPosL©ched
;

156 
uöt8
 
	mHBómFlù
;

157 
uöt8
 
	mVBómFlù
;

158 
uöt8
 
	mHVBómCou¡îL©ched
;

160 
	mM©rixA
;

161 
	mM©rixB
;

162 
	mM©rixC
;

163 
	mM©rixD
;

164 
	mCíåeX
;

165 
	mCíåeY
;

166 
uöt8
 
	mJoy∑d1Buâ⁄RódPos
;

167 
uöt8
 
	mJoy∑d2Buâ⁄RódPos
;

169 
uöt8
 
	mCGADD
;

170 
uöt8
 
	mFixedCﬁourRed
;

171 
uöt8
 
	mFixedCﬁourGªí
;

172 
uöt8
 
	mFixedCﬁourBlue
;

173 
uöt16
 
	mSavedOAMAddr
;

174 
uöt16
 
	mS¸ìnHeight
;

175 
uöt32
 
	mWRAM
;

176 
uöt8
 
	mBG_F‹˚d
;

177 
boﬁ8_32
 
	mF‹˚dBœnkög
;

178 
boﬁ8_32
 
	mOBJThroughMaö
;

179 
boﬁ8_32
 
	mOBJThroughSub
;

180 
uöt8
 
	mOBJSizeSñe˘
;

181 
uöt16
 
	mOBJNameBa£
;

182 
boﬁ8_32
 
	mOBJAddôi⁄
;

183 
uöt8
 
	mOAMRódFlù
;

184 
uöt8
 
	mOAMD©a
 [512 + 32];

185 
boﬁ8_32
 
	mVTimîE«bÀd
;

186 
boﬁ8_32
 
	mHTimîE«bÀd
;

187 
	mHTimîPosôi⁄
;

188 
uöt8
 
	mMoßic
;

189 
boﬁ8_32
 
	mBGMoßic
 [4];

190 
boﬁ8_32
 
	mMode7HFlù
;

191 
boﬁ8_32
 
	mMode7VFlù
;

192 
uöt8
 
	mMode7Rïót
;

193 
uöt8
 
	mWödow1Le·
;

194 
uöt8
 
	mWödow1Right
;

195 
uöt8
 
	mWödow2Le·
;

196 
uöt8
 
	mWödow2Right
;

197 
uöt8
 
	mClùCou¡s
 [6];

198 
uöt8
 
	mClùWödowOvîœpLogic
 [6];

199 
uöt8
 
	mClùWödow1E«bÀ
 [6];

200 
uöt8
 
	mClùWödow2E«bÀ
 [6];

201 
boﬁ8_32
 
	mClùWödow1Inside
 [6];

202 
boﬁ8_32
 
	mClùWödow2Inside
 [6];

203 
boﬁ8_32
 
	mRecompuãClùWödows
;

204 
uöt8
 
	mCGFLIPRód
;

205 
uöt16
 
	mOBJNameSñe˘
;

206 
boﬁ8_32
 
	mNìd16x8Mulô∂y
;

207 
uöt8
 
	mJoy∑d3Buâ⁄RódPos
;

208 
uöt8
 
	mMou£S≥ed
[2];

211 
	#CLIP_OR
 0

	)

212 
	#CLIP_AND
 1

	)

213 
	#CLIP_XOR
 2

	)

214 
	#CLIP_XNOR
 3

	)

216 
	sSDMA
 {

217 
boﬁ8_32
 
	mTøns„rDúe˘i⁄
;

218 
boﬁ8_32
 
	mAAddªssFixed
;

219 
boﬁ8_32
 
	mAAddªssDe¸emít
;

220 
uöt8
 
	mTøns„rMode
;

222 
uöt8
 
	mAB™k
;

223 
uöt16
 
	mAAddªss
;

224 
uöt16
 
	mAddªss
;

225 
uöt8
 
	mBAddªss
;

228 
uöt16
 
	mTøns„rByãs
;

231 
boﬁ8_32
 
	mHDMAIndúe˘Addªssög
;

232 
uöt16
 
	mIndúe˘Addªss
;

233 
uöt8
 
	mIndúe˘B™k
;

234 
uöt8
 
	mRïót
;

235 
uöt8
 
	mLöeCou¡
;

236 
uöt8
 
	mFú°Löe
;

239 
START_EXTERN_C


240 
S9xUpd©eS¸ìn
 ();

241 
S9xRe£tPPU
 ();

242 
S9xFixCﬁourBrighäess
 ();

243 
S9xUpd©eJoy∑ds
 ();

244 
S9xPro˚ssMou£
(
which1
);

245 
S9xSu≥rFXExec
 ();

247 
S9xSëPPU
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
);

248 
uöt8
 
S9xGëPPU
 (
uöt16
 
Addªss
);

249 
S9xSëCPU
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
);

250 
uöt8
 
S9xGëCPU
 (
uöt16
 
Addªss
);

252 
S9xInôC4
 ();

253 
S9xSëC4
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
);

254 
uöt8
 
S9xGëC4
 (
uöt16
 
Addªss
);

255 
S9xSëC4RAM
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
);

256 
uöt8
 
S9xGëC4RAM
 (
uöt16
 
Addªss
);

258 
SPPU
 
PPU
;

259 
SDMA
 
DMA
 [8];

260 
I¡î«lPPU
 
IPPU
;

261 
	gEND_EXTERN_C


263 
	~"gfx.h
"

264 
	~"memm≠.h
"

266 
STATIC
 
INLINE
 
uöt8
 
	$REGISTER_4212
()

268 
GëB™k
 = 0;

269 i‡(
CPU
.
V_Cou¡î
 >
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE
 &&

270 
CPU
.
V_Cou¡î
 < 
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE
 + 3)

271 
GëB™k
 = 1;

273 
GëB™k
 |
CPU
.
Cy˛es
 >
Sëtögs
.
HBœnkSèπ
 ? 0x40 : 0;

274 i‡(
CPU
.
V_Cou¡î
 >
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE
)

275 
GëB™k
 |= 0x80;

277  (
GëB™k
);

278 
	}
}

280 
STATIC
 
INLINE
 
	$FLUSH_REDRAW
 ()

282 i‡(
IPPU
.
PªviousLöe
 !IPPU.
CuºítLöe
)

283 
	`S9xUpd©eS¸ìn
 ();

284 
	}
}

286 
STATIC
 
INLINE
 
	$REGISTER_2104
 (
uöt8
 
byã
)

288 i‡(
PPU
.
OAMAddr
 >= 0x110)

291 
addr
 = (
PPU
.
OAMAddr
 << 1Ë+ (PPU.
OAMFlù
 & 1);

293 i‡(
byã
 !
PPU
.
OAMD©a
 [
addr
])

295 
	`FLUSH_REDRAW
 ();

296 
PPU
.
OAMD©a
 [
addr
] = 
byã
;

297 
IPPU
.
OBJCh™ged
 = 
TRUE
;

298 i‡(
addr
 & 0x200)

301 
SOBJ
 *
pObj
 = &
PPU
.
OBJ
 [(
addr
 & 0x1f) * 4];

303 
pObj
->
HPos
 = (pObj->HPo†& 0xFFË| 
SignExãnd
[(
byã
 >> 0) & 1];

304 
pObj
++->
Size
 = 
byã
 & 2;

305 
pObj
->
HPos
 = (pObj->HPo†& 0xFFË| 
SignExãnd
[(
byã
 >> 2) & 1];

306 
pObj
++->
Size
 = 
byã
 & 8;

307 
pObj
->
HPos
 = (pObj->HPo†& 0xFFË| 
SignExãnd
[(
byã
 >> 4) & 1];

308 
pObj
++->
Size
 = 
byã
 & 32;

309 
pObj
->
HPos
 = (pObj->HPo†& 0xFFË| 
SignExãnd
[(
byã
 >> 6) & 1];

310 
pObj
->
Size
 = 
byã
 & 128;

314 i‡(
addr
 & 1)

316 i‡(
addr
 & 2)

318 
addr
 = 
PPU
.
OAMAddr
 >> 1;

320 
PPU
.
OBJ
[
addr
].
Name
 &= 0xFF;

321 
PPU
.
OBJ
[
addr
].
Name
 |((
uöt16
Ë(
byã
 & 1)) << 8;

322 
PPU
.
OBJ
[
addr
].
PÆëã
 = (
byã
 >> 1) & 7;

323 
PPU
.
OBJ
[
addr
].
Pri‹ôy
 = (
byã
 >> 4) & 3;

324 
PPU
.
OBJ
[
addr
].
HFlù
 = (
byã
 >> 6) & 1;

325 
PPU
.
OBJ
[
addr
].
VFlù
 = (
byã
 >> 7) & 1;

330 
PPU
.
OBJ
[PPU.
OAMAddr
 >> 1].
VPos
 = 
byã
;

335 i‡(
addr
 & 2)

339 
PPU
.
OBJ
[
addr
 = PPU.
OAMAddr
 >> 1].
Name
 &= 0x100;

340 
PPU
.
OBJ
[
addr
].
Name
 |
byã
;

345 
PPU
.
OBJ
[
addr
 = PPU.
OAMAddr
 >> 1].
HPos
 &= 0xFF00;

346 
PPU
.
OBJ
[
addr
].
HPos
 |
byã
;

351 
PPU
.
OAMFlù
 ^= 1;

352 i‡(!(
PPU
.
OAMFlù
 & 1))

353 
PPU
.
OAMAddr
++;

355 
Mem‹y
.
FûlRAM
 [0x2104] = 
byã
;

356 
	}
}

358 
STATIC
 
INLINE
 
	$REGISTER_2118
 (
uöt8
 
Byã
)

360 
uöt32
 
addªss
;

361 i‡(
PPU
.
VMA
.
FuŒGøphicCou¡
)

363 
uöt32
 
ªm
 = 
PPU
.
VMA
.
Addªss
 & PPU.VMA.
Mask1
;

364 
addªss
 = (((
PPU
.
VMA
.
Addªss
 & ~PPU.VMA.
Mask1
) +

365 (
ªm
 >> 
PPU
.
VMA
.
Shi·
) +

366 ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3)) << 1) & 0xffff;

367 
Mem‹y
.
VRAM
 [
addªss
] = 
Byã
;

371 
Mem‹y
.
VRAM
[
addªss
 = (
PPU
.
VMA
.
Addªss
 << 1Ë& 0xFFFF] = 
Byã
;

373 
IPPU
.
TûeCached
 [
TILE_2BIT
][
addªss
 >> 4] = 
FALSE
;

374 
IPPU
.
TûeCached
 [
TILE_4BIT
][
addªss
 >> 5] = 
FALSE
;

375 
IPPU
.
TûeCached
 [
TILE_8BIT
][
addªss
 >> 6] = 
FALSE
;

376 i‡(!
PPU
.
VMA
.
High
)

378 #ifde‡
DEBUGGER


379 i‡(
Sëtögs
.
Tø˚VRAM
 && !
CPU
.
InDMA
)

381 
	`¥ötf
 ("VRAM wrôêbyã: $%04X (%d,%d)\n", 
PPU
.
VMA
.
Addªss
,

382 
Mem‹y
.
FûlRAM
[0x2115] & 3,

383 (
Mem‹y
.
FûlRAM
 [0x2115] & 0x0c) >> 2);

386 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

389 
	}
}

391 
STATIC
 
INLINE
 
	$REGISTER_2118_tûe
 (
uöt8
 
Byã
)

393 
uöt32
 
addªss
;

394 
uöt32
 
ªm
 = 
PPU
.
VMA
.
Addªss
 & PPU.VMA.
Mask1
;

395 
addªss
 = (((
PPU
.
VMA
.
Addªss
 & ~PPU.VMA.
Mask1
) +

396 (
ªm
 >> 
PPU
.
VMA
.
Shi·
) +

397 ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3)) << 1) & 0xffff;

398 
Mem‹y
.
VRAM
 [
addªss
] = 
Byã
;

399 
IPPU
.
TûeCached
 [
TILE_2BIT
][
addªss
 >> 4] = 
FALSE
;

400 
IPPU
.
TûeCached
 [
TILE_4BIT
][
addªss
 >> 5] = 
FALSE
;

401 
IPPU
.
TûeCached
 [
TILE_8BIT
][
addªss
 >> 6] = 
FALSE
;

402 i‡(!
PPU
.
VMA
.
High
)

403 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

405 
	}
}

407 
STATIC
 
INLINE
 
	$REGISTER_2118_löór
 (
uöt8
 
Byã
)

409 
uöt32
 
addªss
;

410 
Mem‹y
.
VRAM
[
addªss
 = (
PPU
.
VMA
.
Addªss
 << 1Ë& 0xFFFF] = 
Byã
;

411 
IPPU
.
TûeCached
 [
TILE_2BIT
][
addªss
 >> 4] = 
FALSE
;

412 
IPPU
.
TûeCached
 [
TILE_4BIT
][
addªss
 >> 5] = 
FALSE
;

413 
IPPU
.
TûeCached
 [
TILE_8BIT
][
addªss
 >> 6] = 
FALSE
;

414 i‡(!
PPU
.
VMA
.
High
)

415 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

417 
	}
}

419 
STATIC
 
INLINE
 
	$REGISTER_2119
 (
uöt8
 
Byã
)

421 
uöt32
 
addªss
;

422 i‡(
PPU
.
VMA
.
FuŒGøphicCou¡
)

424 
uöt32
 
ªm
 = 
PPU
.
VMA
.
Addªss
 & PPU.VMA.
Mask1
;

425 
addªss
 = ((((
PPU
.
VMA
.
Addªss
 & ~PPU.VMA.
Mask1
) +

426 (
ªm
 >> 
PPU
.
VMA
.
Shi·
) +

427 ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3)) << 1) + 1) & 0xFFFF;

428 
Mem‹y
.
VRAM
 [
addªss
] = 
Byã
;

432 
Mem‹y
.
VRAM
[
addªss
 = ((
PPU
.
VMA
.
Addªss
 << 1Ë+ 1Ë& 0xFFFF] = 
Byã
;

434 
IPPU
.
TûeCached
 [
TILE_2BIT
][
addªss
 >> 4] = 
FALSE
;

435 
IPPU
.
TûeCached
 [
TILE_4BIT
][
addªss
 >> 5] = 
FALSE
;

436 
IPPU
.
TûeCached
 [
TILE_8BIT
][
addªss
 >> 6] = 
FALSE
;

437 i‡(
PPU
.
VMA
.
High
)

439 #ifde‡
DEBUGGER


440 i‡(
Sëtögs
.
Tø˚VRAM
 && !
CPU
.
InDMA
)

442 
	`¥ötf
 ("VRAM wrôêw‹d: $%04X (%d,%d)\n", 
PPU
.
VMA
.
Addªss
,

443 
Mem‹y
.
FûlRAM
[0x2115] & 3,

444 (
Mem‹y
.
FûlRAM
 [0x2115] & 0x0c) >> 2);

447 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

450 
	}
}

452 
STATIC
 
INLINE
 
	$REGISTER_2119_tûe
 (
uöt8
 
Byã
)

454 
uöt32
 
ªm
 = 
PPU
.
VMA
.
Addªss
 & PPU.VMA.
Mask1
;

455 
uöt32
 
addªss
 = ((((
PPU
.
VMA
.
Addªss
 & ~PPU.VMA.
Mask1
) +

456 (
ªm
 >> 
PPU
.
VMA
.
Shi·
) +

457 ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3)) << 1) + 1) & 0xFFFF;

458 
Mem‹y
.
VRAM
 [
addªss
] = 
Byã
;

459 
IPPU
.
TûeCached
 [
TILE_2BIT
][
addªss
 >> 4] = 
FALSE
;

460 
IPPU
.
TûeCached
 [
TILE_4BIT
][
addªss
 >> 5] = 
FALSE
;

461 
IPPU
.
TûeCached
 [
TILE_8BIT
][
addªss
 >> 6] = 
FALSE
;

462 i‡(
PPU
.
VMA
.
High
)

463 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

465 
	}
}

467 
STATIC
 
INLINE
 
	$REGISTER_2119_löór
 (
uöt8
 
Byã
)

469 
uöt32
 
addªss
;

470 
Mem‹y
.
VRAM
[
addªss
 = ((
PPU
.
VMA
.
Addªss
 << 1Ë+ 1Ë& 0xFFFF] = 
Byã
;

471 
IPPU
.
TûeCached
 [
TILE_2BIT
][
addªss
 >> 4] = 
FALSE
;

472 
IPPU
.
TûeCached
 [
TILE_4BIT
][
addªss
 >> 5] = 
FALSE
;

473 
IPPU
.
TûeCached
 [
TILE_8BIT
][
addªss
 >> 6] = 
FALSE
;

474 i‡(
PPU
.
VMA
.
High
)

475 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

477 
	}
}

479 
STATIC
 
INLINE
 
	$REGISTER_2122
(
uöt8
 
Byã
)

483 i‡(
PPU
.
CGFLIP
)

485 i‡((
Byã
 & 0x7fË!(
PPU
.
CGDATA
[PPU.
CGADD
] >> 8))

487 i‡(
Sëtögs
.
SixãíBô
&& !(Sëtögs.
os9x_hack
&
PPU_IGNORE_PALWRITE
)){

488 
	`FLUSH_REDRAW
 ();

490 
PPU
.
CGDATA
[PPU.
CGADD
] &= 0x00FF;

491 
PPU
.
CGDATA
[PPU.
CGADD
] |(
Byã
 & 0x7f) << 8;

492 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

493 #i‚de‡
_SNESPPC


494 i‡(
Sëtögs
.
SixãíBô
)

497 
IPPU
.
Blue
 [
PPU
.
CGADD
] = IPPU.
XB
 [(
Byã
 >> 2) & 0x1f];

498 
IPPU
.
Gªí
 [
PPU
.
CGADD
] = IPPU.
XB
 [(PPU.
CGDATA
[PPU.CGADD] >> 5) & 0x1f];

499 
IPPU
.
S¸ìnCﬁ‹s
 [
PPU
.
CGADD
] = (
uöt16
Ë
	`BUILD_PIXEL
 (IPPU.
Red
 [PPU.CGADD],

500 
IPPU
.
Gªí
 [
PPU
.
CGADD
],

501 
IPPU
.
Blue
 [
PPU
.
CGADD
]);

504 
PPU
.
CGADD
++;

508 i‡(
Byã
 !(
uöt8
Ë(
PPU
.
CGDATA
[PPU.
CGADD
] & 0xff))

510 i‡(
Sëtögs
.
SixãíBô
&& !(Sëtögs.
os9x_hack
&
PPU_IGNORE_PALWRITE
)){

511 
	`FLUSH_REDRAW
 ();

513 
PPU
.
CGDATA
[PPU.
CGADD
] &= 0x7F00;

514 
PPU
.
CGDATA
[PPU.
CGADD
] |
Byã
;

515 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

516 #i‚de‡
_SNESPPC


517 i‡(
Sëtögs
.
SixãíBô
)

520 
IPPU
.
Red
 [
PPU
.
CGADD
] = IPPU.
XB
 [
Byã
 & 0x1f];

521 
IPPU
.
Gªí
 [
PPU
.
CGADD
] = IPPU.
XB
 [(PPU.
CGDATA
[PPU.CGADD] >> 5) & 0x1f];

522 
IPPU
.
S¸ìnCﬁ‹s
 [
PPU
.
CGADD
] = (
uöt16
Ë
	`BUILD_PIXEL
 (IPPU.
Red
 [PPU.CGADD],

523 
IPPU
.
Gªí
 [
PPU
.
CGADD
],

524 
IPPU
.
Blue
 [
PPU
.
CGADD
]);

528 
PPU
.
CGFLIP
 ^= 1;

530 
	}
}

532 
STATIC
 
INLINE
 
	$REGISTER_2180
(
uöt8
 
Byã
)

534 
Mem‹y
.
RAM
[
PPU
.
WRAM
++] = 
Byã
;

535 
PPU
.
WRAM
 &= 0x1FFFF;

536 
Mem‹y
.
FûlRAM
 [0x2180] = 
Byã
;

537 
	}
}

	@ppu_.cpp

41 
	~"¢es9x.h
"

42 
	~"memm≠.h
"

43 
	~"µu.h
"

44 
	~"˝uexec.h
"

45 
	~"missög.h
"

46 
	~"≠u.h
"

47 
	~"dma.h
"

48 
	~"gfx.h
"

49 
	~"di•œy.h
"

50 
	~"ß1.h
"

51 #i‚de‡
_SNESPPC


54 
	~"sdd1.h
"

55 
	~"§tc.h
"

58 #i‚de‡
ZSNES_FX


59 
	~"fxemu.h
"

60 
	~"fxö°.h
"

61 
FxInô_s
 
Su≥rFX
;

62 
FxRegs_s
 
GSU
;

64 
EXTERN_C
 
S9xSu≥rFXWrôeReg
 (
uöt8
, 
uöt32
);

65 
EXTERN_C
 
uöt8
 
S9xSu≥rFXRódReg
 (
uöt32
);

68 
	$S9xUpd©eHTimî
 ()

70 i‡(
PPU
.
HTimîE«bÀd
)

72 #ifde‡
DEBUGGER


73 
missög
.
húq_pos
 = 
PPU
.
IRQHBómPos
;

75 
PPU
.
HTimîPosôi⁄
 = PPU.
IRQHBómPos
 * 
Sëtögs
.
H_Max
 / 
SNES_HCOUNTER_MAX
;

76 i‡(
PPU
.
HTimîPosôi⁄
 =
Sëtögs
.
H_Max
 ||

77 
PPU
.
HTimîPosôi⁄
 =
Sëtögs
.
HBœnkSèπ
)

79 
PPU
.
HTimîPosôi⁄
--;

82 i‡(!
PPU
.
VTimîE«bÀd
 || 
CPU
.
V_Cou¡î
 =PPU.
IRQVBómPos
)

84 i‡(
PPU
.
HTimîPosôi⁄
 < 
CPU
.
Cy˛es
)

87 i‡(
CPU
.
WhichEvít
 =
HBLANK_END_EVENT
 ||

88 
CPU
.
WhichEvít
 =
HTIMER_AFTER_EVENT
)

90 
CPU
.
WhichEvít
 = 
HBLANK_END_EVENT
;

91 
CPU
.
NextEvít
 = 
Sëtögs
.
H_Max
;

95 
CPU
.
WhichEvít
 = 
HBLANK_START_EVENT
;

96 
CPU
.
NextEvít
 = 
Sëtögs
.
HBœnkSèπ
;

101 i‡(
CPU
.
WhichEvít
 =
HTIMER_BEFORE_EVENT
 ||

102 
CPU
.
WhichEvít
 =
HBLANK_START_EVENT
)

104 i‡(
PPU
.
HTimîPosôi⁄
 > 
Sëtögs
.
HBœnkSèπ
)

108 
CPU
.
NextEvít
 = 
Sëtögs
.
HBœnkSèπ
;

109 
CPU
.
WhichEvít
 = 
HBLANK_START_EVENT
;

113 
CPU
.
NextEvít
 = 
PPU
.
HTimîPosôi⁄
;

114 
CPU
.
WhichEvít
 = 
HTIMER_BEFORE_EVENT
;

119 
CPU
.
WhichEvít
 = 
HTIMER_AFTER_EVENT
;

120 
CPU
.
NextEvít
 = 
PPU
.
HTimîPosôi⁄
;

125 
	}
}

127 
	$S9xFixCﬁourBrighäess
 ()

129 
IPPU
.
XB
 = 
mul_brighäess
 [
PPU
.
Brighäess
];

130 #i‚de‡
_SNESPPC


131 i‡(
Sëtögs
.
SixãíBô
)

134 
i
 = 0; i < 256; i++)

136 
IPPU
.
Red
 [
i
] = IPPU.
XB
 [
PPU
.
CGDATA
 [i] & 0x1f];

137 
IPPU
.
Gªí
 [
i
] = IPPU.
XB
 [(
PPU
.
CGDATA
 [i] >> 5) & 0x1f];

138 
IPPU
.
Blue
 [
i
] = IPPU.
XB
 [(
PPU
.
CGDATA
 [i] >> 10) & 0x1f];

139 
IPPU
.
S¸ìnCﬁ‹s
 [
i
] = 
	`BUILD_PIXEL
 (IPPU.
Red
 [i], IPPU.
Gªí
 [i],

140 
IPPU
.
Blue
 [
i
]);

143 
	}
}

149 
	$S9xSëPPU
 (
uöt8
 
Byã
, 
uöt16
 
Addªss
)

151 i‡(
Addªss
 <= 0x2183)

153 
Addªss
)

157 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2100])

159 
	`FLUSH_REDRAW
 ();

160 i‡(
PPU
.
Brighäess
 !(
Byã
 & 0xF))

162 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

163 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
TRUE
;

164 
PPU
.
Brighäess
 = 
Byã
 & 0xF;

165 
	`S9xFixCﬁourBrighäess
 ();

166 i‡(
PPU
.
Brighäess
 > 
IPPU
.
MaxBrighäess
)

167 
IPPU
.
MaxBrighäess
 = 
PPU
.
Brighäess
;

169 i‡((
Mem‹y
.
FûlRAM
[0x2100] & 0x80Ë!(
Byã
 & 0x80))

171 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

172 
PPU
.
F‹˚dBœnkög
 = (
Byã
 >> 7) & 1;

179 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2101])

181 
	`FLUSH_REDRAW
 ();

182 
PPU
.
OBJNameBa£
 = (
Byã
 & 3) << 14;

183 
PPU
.
OBJNameSñe˘
 = ((
Byã
 >> 3) & 3) << 13;

184 
PPU
.
OBJSizeSñe˘
 = (
Byã
 >> 5) & 7;

185 
IPPU
.
OBJCh™ged
 = 
TRUE
;

191 
PPU
.
OAMAddr
 = 
Byã
;

192 
PPU
.
OAMFlù
 = 2;

193 
PPU
.
OAMRódFlù
 = 0;

194 
PPU
.
SavedOAMAddr
 = PPU.
OAMAddr
;

195 i‡(
PPU
.
OAMPri‹ôyRŸ©i⁄
)

197 
PPU
.
Fú°S¥ôe
 = PPU.
OAMAddr
 & 0x7f;

198 #ifde‡
DEBUGGER


199 
missög
.
•rôe_¥i‹ôy_rŸ©i⁄
 = 1;

207 i‡((
PPU
.
OAMPri‹ôyRŸ©i⁄
 = (
Byã
 & 0x80) == 0 ? 0 : 1))

209 
PPU
.
Fú°S¥ôe
 = PPU.
OAMAddr
 & 0x7f;

210 #ifde‡
DEBUGGER


211 
missög
.
•rôe_¥i‹ôy_rŸ©i⁄
 = 1;

216 i‡(
PPU
.
OAMFlù
 & 2)

218 
PPU
.
OAMAddr
 &= 0x00FF;

219 
PPU
.
OAMAddr
 |(
Byã
 & 1) << 8;

221 
PPU
.
OAMFlù
 = 0;

222 
PPU
.
OAMRódFlù
 = 0;

223 
PPU
.
SavedOAMAddr
 = PPU.
OAMAddr
;

228 
	`REGISTER_2104
(
Byã
, &
Mem‹y
, &
IPPU
, &
PPU
);

235 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2105])

237 
	`FLUSH_REDRAW
 ();

238 
PPU
.
BG3Pri‹ôy
 = (
Byã
 >> 3) & 1;

239 
PPU
.
BG
[0].
BGSize
 = (
Byã
 >> 4) & 1;

240 
PPU
.
BG
[1].
BGSize
 = (
Byã
 >> 5) & 1;

241 
PPU
.
BG
[2].
BGSize
 = (
Byã
 >> 6) & 1;

242 
PPU
.
BG
[3].
BGSize
 = (
Byã
 >> 7) & 1;

243 
PPU
.
BGMode
 = 
Byã
 & 7;

244 #ifde‡
DEBUGGER


245 
missög
.
modes
[
PPU
.
BGMode
] = 1;

252 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2106])

254 
	`FLUSH_REDRAW
 ();

255 #ifde‡
DEBUGGER


256 i‡((
Byã
 & 0xf0) && (Byte & 0x0f))

257 
missög
.
moßic
 = 1;

259 
PPU
.
Moßic
 = (
Byã
 >> 4) + 1;

260 
PPU
.
BGMoßic
 [0] = (
Byã
 & 1Ë&& PPU.
Moßic
 > 1;

261 
PPU
.
BGMoßic
 [1] = (
Byã
 & 2Ë&& PPU.
Moßic
 > 1;

262 
PPU
.
BGMoßic
 [2] = (
Byã
 & 4Ë&& PPU.
Moßic
 > 1;

263 
PPU
.
BGMoßic
 [3] = (
Byã
 & 8Ë&& PPU.
Moßic
 > 1;

267 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2107])

269 
	`FLUSH_REDRAW
 ();

270 
PPU
.
BG
[0].
SCSize
 = 
Byã
 & 3;

271 
PPU
.
BG
[0].
SCBa£
 = (
Byã
 & 0x7c) << 8;

276 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2108])

278 
	`FLUSH_REDRAW
 ();

279 
PPU
.
BG
[1].
SCSize
 = 
Byã
 & 3;

280 
PPU
.
BG
[1].
SCBa£
 = (
Byã
 & 0x7c) << 8;

285 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2109])

287 
	`FLUSH_REDRAW
 ();

288 
PPU
.
BG
[2].
SCSize
 = 
Byã
 & 3;

289 
PPU
.
BG
[2].
SCBa£
 = (
Byã
 & 0x7c) << 8;

294 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x210a])

296 
	`FLUSH_REDRAW
 ();

297 
PPU
.
BG
[3].
SCSize
 = 
Byã
 & 3;

298 
PPU
.
BG
[3].
SCBa£
 = (
Byã
 & 0x7c) << 8;

303 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x210b])

305 
	`FLUSH_REDRAW
 ();

306 
PPU
.
BG
[0].
NameBa£
 = (
Byã
 & 7) << 12;

307 
PPU
.
BG
[1].
NameBa£
 = ((
Byã
 >> 4) & 7) << 12;

312 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x210c])

314 
	`FLUSH_REDRAW
 ();

315 
PPU
.
BG
[2].
NameBa£
 = (
Byã
 & 7) << 12;

316 
PPU
.
BG
[3].
NameBa£
 = ((
Byã
 >> 4) & 7) << 12;

321 
PPU
.
BG
[0].
HOff£t
 = ((PPU.BG[0].HOffset >> 8) & 0xff) |

322 ((
uöt16
Ë
Byã
 << 8);

326 
PPU
.
BG
[0].
VOff£t
 = ((PPU.BG[0].VOffset >> 8) & 0xff) |

327 ((
uöt16
Ë
Byã
 << 8);

330 
PPU
.
BG
[1].
HOff£t
 = ((PPU.BG[1].HOffset >> 8) & 0xff) |

331 ((
uöt16
Ë
Byã
 << 8);

335 
PPU
.
BG
[1].
VOff£t
 = ((PPU.BG[1].VOffset >> 8) & 0xff) |

336 ((
uöt16
Ë
Byã
 << 8);

340 
PPU
.
BG
[2].
HOff£t
 = ((PPU.BG[2].HOffset >> 8) & 0xff) |

341 ((
uöt16
Ë
Byã
 << 8);

345 
PPU
.
BG
[2].
VOff£t
 = ((PPU.BG[2].VOffset >> 8) & 0xff) |

346 ((
uöt16
Ë
Byã
 << 8);

350 
PPU
.
BG
[3].
HOff£t
 = ((PPU.BG[3].HOffset >> 8) & 0xff) |

351 ((
uöt16
Ë
Byã
 << 8);

355 
PPU
.
BG
[3].
VOff£t
 = ((PPU.BG[3].VOffset >> 8) & 0xff) |

356 ((
uöt16
Ë
Byã
 << 8);

361 
PPU
.
VMA
.
High
 = (
Byã
 & 0x80Ë=0 ? 
FALSE
 : 
TRUE
;

362 
Byã
 & 3)

365 
PPU
.
VMA
.
In¸emít
 = 1;

368 
PPU
.
VMA
.
In¸emít
 = 32;

371 
PPU
.
VMA
.
In¸emít
 = 128;

374 
PPU
.
VMA
.
In¸emít
 = 128;

377 #ifde‡
DEBUGGER


378 i‡((
Byã
 & 3) != 0)

379 
missög
.
vøm_öc
 = 
Byã
 & 3;

381 i‡(
Byã
 & 0x0c)

383 
uöt16
 
IncCou¡
 [4] = { 0, 32, 64, 128 };

384 
uöt16
 
Shi·
 [4] = { 0, 5, 6, 7 };

385 #ifde‡
DEBUGGER


386 
missög
.
vøm_fuŒ_gøphic_öc
 = (
Byã
 & 0x0c) >> 2;

388 
PPU
.
VMA
.
In¸emít
 = 1;

389 
uöt8
 
i
 = (
Byã
 & 0x0c) >> 2;

390 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 
IncCou¡
 [
i
];

391 
PPU
.
VMA
.
Mask1
 = 
IncCou¡
 [
i
] * 8 - 1;

392 
PPU
.
VMA
.
Shi·
 = Shi· [
i
];

395 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 0;

400 
PPU
.
VMA
.
Addªss
 &= 0xFF00;

401 
PPU
.
VMA
.
Addªss
 |
Byã
;

402 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

407 
PPU
.
VMA
.
Addªss
 &= 0x00FF;

408 
PPU
.
VMA
.
Addªss
 |
Byã
 << 8;

409 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

414 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

415 
	`REGISTER_2118
(
Byã
, &
Mem‹y
, &
IPPU
, &
PPU
);

420 
IPPU
.
Fú°VRAMRód
 = 
TRUE
;

421 
	`REGISTER_2119
(
Byã
, &
Mem‹y
, &
IPPU
, &
PPU
);

426 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x211a])

428 
	`FLUSH_REDRAW
 ();

429 
PPU
.
Mode7Rïót
 = 
Byã
 >> 6;

430 
PPU
.
Mode7VFlù
 = (
Byã
 & 2) >> 1;

431 
PPU
.
Mode7HFlù
 = 
Byã
 & 1;

436 
PPU
.
M©rixA
 = ((PPU.M©rixA >> 8Ë& 0xffË| (
Byã
 << 8);

437 
PPU
.
Nìd16x8Mulô∂y
 = 
TRUE
;

441 
PPU
.
M©rixB
 = ((PPU.M©rixB >> 8Ë& 0xffË| (
Byã
 << 8);

442 
PPU
.
Nìd16x8Mulô∂y
 = 
TRUE
;

446 
PPU
.
M©rixC
 = ((PPU.M©rixC >> 8Ë& 0xffË| (
Byã
 << 8);

450 
PPU
.
M©rixD
 = ((PPU.M©rixD >> 8Ë& 0xffË| (
Byã
 << 8);

454 
PPU
.
CíåeX
 = ((PPU.CíåeX >> 8Ë& 0xffË| (
Byã
 << 8);

458 
PPU
.
CíåeY
 = ((PPU.CíåeY >> 8Ë& 0xffË| (
Byã
 << 8);

463 
PPU
.
CGFLIP
 = 0;

464 
PPU
.
CGFLIPRód
 = 0;

465 
PPU
.
CGADD
 = 
Byã
;

469 
	`REGISTER_2122
(
Byã
, &
Mem‹y
, &
IPPU
, &
PPU
);

474 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2123])

476 
	`FLUSH_REDRAW
 ();

478 
PPU
.
ClùWödow1E«bÀ
 [0] = !!(
Byã
 & 0x02);

479 
PPU
.
ClùWödow1E«bÀ
 [1] = !!(
Byã
 & 0x20);

480 
PPU
.
ClùWödow2E«bÀ
 [0] = !!(
Byã
 & 0x08);

481 
PPU
.
ClùWödow2E«bÀ
 [1] = !!(
Byã
 & 0x80);

482 
PPU
.
ClùWödow1Inside
 [0] = !(
Byã
 & 0x01);

483 
PPU
.
ClùWödow1Inside
 [1] = !(
Byã
 & 0x10);

484 
PPU
.
ClùWödow2Inside
 [0] = !(
Byã
 & 0x04);

485 
PPU
.
ClùWödow2Inside
 [1] = !(
Byã
 & 0x40);

486 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

487 #ifde‡
DEBUGGER


488 i‡(
Byã
 & 0x80)

489 
missög
.
wödow2
[1] = 1;

490 i‡(
Byã
 & 0x20)

491 
missög
.
wödow1
[1] = 1;

492 i‡(
Byã
 & 0x08)

493 
missög
.
wödow2
[0] = 1;

494 i‡(
Byã
 & 0x02)

495 
missög
.
wödow1
[0] = 1;

501 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2124])

503 
	`FLUSH_REDRAW
 ();

505 
PPU
.
ClùWödow1E«bÀ
 [2] = !!(
Byã
 & 0x02);

506 
PPU
.
ClùWödow1E«bÀ
 [3] = !!(
Byã
 & 0x20);

507 
PPU
.
ClùWödow2E«bÀ
 [2] = !!(
Byã
 & 0x08);

508 
PPU
.
ClùWödow2E«bÀ
 [3] = !!(
Byã
 & 0x80);

509 
PPU
.
ClùWödow1Inside
 [2] = !(
Byã
 & 0x01);

510 
PPU
.
ClùWödow1Inside
 [3] = !(
Byã
 & 0x10);

511 
PPU
.
ClùWödow2Inside
 [2] = !(
Byã
 & 0x04);

512 
PPU
.
ClùWödow2Inside
 [3] = !(
Byã
 & 0x40);

513 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

514 #ifde‡
DEBUGGER


515 i‡(
Byã
 & 0x80)

516 
missög
.
wödow2
[3] = 1;

517 i‡(
Byã
 & 0x20)

518 
missög
.
wödow1
[3] = 1;

519 i‡(
Byã
 & 0x08)

520 
missög
.
wödow2
[2] = 1;

521 i‡(
Byã
 & 0x02)

522 
missög
.
wödow1
[2] = 1;

528 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2125])

530 
	`FLUSH_REDRAW
 ();

532 
PPU
.
ClùWödow1E«bÀ
 [4] = !!(
Byã
 & 0x02);

533 
PPU
.
ClùWödow1E«bÀ
 [5] = !!(
Byã
 & 0x20);

534 
PPU
.
ClùWödow2E«bÀ
 [4] = !!(
Byã
 & 0x08);

535 
PPU
.
ClùWödow2E«bÀ
 [5] = !!(
Byã
 & 0x80);

536 
PPU
.
ClùWödow1Inside
 [4] = !(
Byã
 & 0x01);

537 
PPU
.
ClùWödow1Inside
 [5] = !(
Byã
 & 0x10);

538 
PPU
.
ClùWödow2Inside
 [4] = !(
Byã
 & 0x04);

539 
PPU
.
ClùWödow2Inside
 [5] = !(
Byã
 & 0x40);

540 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

541 #ifde‡
DEBUGGER


542 i‡(
Byã
 & 0x80)

543 
missög
.
wödow2
[5] = 1;

544 i‡(
Byã
 & 0x20)

545 
missög
.
wödow1
[5] = 1;

546 i‡(
Byã
 & 0x08)

547 
missög
.
wödow2
[4] = 1;

548 i‡(
Byã
 & 0x02)

549 
missög
.
wödow1
[4] = 1;

555 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2126])

557 
	`FLUSH_REDRAW
 ();

559 
PPU
.
Wödow1Le·
 = 
Byã
;

560 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

565 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2127])

567 
	`FLUSH_REDRAW
 ();

569 
PPU
.
Wödow1Right
 = 
Byã
;

570 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

575 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2128])

577 
	`FLUSH_REDRAW
 ();

579 
PPU
.
Wödow2Le·
 = 
Byã
;

580 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

585 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2129])

587 
	`FLUSH_REDRAW
 ();

589 
PPU
.
Wödow2Right
 = 
Byã
;

590 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

595 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x212a])

597 
	`FLUSH_REDRAW
 ();

599 
PPU
.
ClùWödowOvîœpLogic
 [0] = (
Byã
 & 0x03);

600 
PPU
.
ClùWödowOvîœpLogic
 [1] = (
Byã
 & 0x0c) >> 2;

601 
PPU
.
ClùWödowOvîœpLogic
 [2] = (
Byã
 & 0x30) >> 4;

602 
PPU
.
ClùWödowOvîœpLogic
 [3] = (
Byã
 & 0xc0) >> 6;

603 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

608 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x212b])

610 
	`FLUSH_REDRAW
 ();

612 
PPU
.
ClùWödowOvîœpLogic
 [4] = 
Byã
 & 0x03;

613 
PPU
.
ClùWödowOvîœpLogic
 [5] = (
Byã
 & 0x0c) >> 2;

614 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

619 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x212c])

621 
	`FLUSH_REDRAW
 ();

623 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

624 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

630 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x212d])

632 
	`FLUSH_REDRAW
 ();

634 #ifde‡
DEBUGGER


635 i‡(
Byã
 & 0x1f)

636 
missög
.
subs¸ìn
 = 1;

638 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

639 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

645 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x212e])

647 
	`FLUSH_REDRAW
 ();

649 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

654 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x212f])

656 
	`FLUSH_REDRAW
 ();

658 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

663 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2130])

665 
	`FLUSH_REDRAW
 ();

667 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

668 #ifde‡
DEBUGGER


669 i‡((
Byã
 & 1Ë&& (
PPU
.
BGMode
 == 3 || PPU.BGMode == 4 || PPU.BGMode == 7))

670 
missög
.
dúe˘
 = 1;

676 i‡(
Byã
 !
Mem‹y
.
FûlRAM
[0x2131])

678 
	`FLUSH_REDRAW
 ();

681 #ifde‡
DEBUGGER


682 i‡(
Byã
 & 0x80)

685 i‡(
Mem‹y
.
FûlRAM
[0x2130] & 0x02)

686 
missög
.
subs¸ìn_sub
 = 1;

688 
missög
.
fixed_cﬁour_sub
 = 1;

693 i‡(
Mem‹y
.
FûlRAM
[0x2130] & 0x02)

694 
missög
.
subs¸ìn_add
 = 1;

696 
missög
.
fixed_cﬁour_add
 = 1;

699 
Mem‹y
.
FûlRAM
[0x2131] = 
Byã
;

703 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2132])

705 
	`FLUSH_REDRAW
 ();

708 i‡(
Byã
 & 0x80)

709 
PPU
.
FixedCﬁourBlue
 = 
Byã
 & 0x1f;

710 i‡(
Byã
 & 0x40)

711 
PPU
.
FixedCﬁourGªí
 = 
Byã
 & 0x1f;

712 i‡(
Byã
 & 0x20)

713 
PPU
.
FixedCﬁourRed
 = 
Byã
 & 0x1f;

718 i‡(
Byã
 !
Mem‹y
.
FûlRAM
 [0x2133])

720 #ifde‡
DEBUGGER


721 i‡(
Byã
 & 0x40)

722 
missög
.
mode7_bgmode
 = 1;

723 i‡(
Byã
 & 0x08)

724 
missög
.
p£udo_512
 = 1;

726 i‡(
Byã
 & 0x04)

728 
PPU
.
S¸ìnHeight
 = 
SNES_HEIGHT_EXTENDED
;

729 #ifde‡
DEBUGGER


730 
missög
.
löes_239
 = 1;

734 
PPU
.
S¸ìnHeight
 = 
SNES_HEIGHT
;

735 #ifde‡
DEBUGGER


736 i‡(
Byã
 & 0x02)

737 
missög
.
•rôe_doubÀ_height
 = 1;

739 i‡(
Byã
 & 1)

740 
missög
.
öãæa˚
 = 1;

789 #ifde‡
SPCTOOL


790 
	`_SPCInPB
 (
Addªss
 & 3, 
Byã
);

793 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

794 
IAPU
.
RAM
 [(
Addªss
 & 3Ë+ 0xf4] = 
Byã
;

795 #ifde‡
SPC700_SHUTDOWN


796 
IAPU
.
APUExecutög
 = 
Sëtögs
.
APUE«bÀd
;

797 
IAPU
.
WaôCou¡î
++;

802 
	`REGISTER_2180
(
Byã
, &
Mem‹y
, &
IPPU
, &
PPU
);

805 
PPU
.
WRAM
 &= 0x1FF00;

806 
PPU
.
WRAM
 |
Byã
;

809 
PPU
.
WRAM
 &= 0x100FF;

810 
PPU
.
WRAM
 |
Byã
 << 8;

813 
PPU
.
WRAM
 &= 0x0FFFF;

814 
PPU
.
WRAM
 |
Byã
 << 16;

815 
PPU
.
WRAM
 &= 0x1FFFF;

821 i‡(
Sëtögs
.
SA1
)

823 i‡(
Addªss
 >= 0x2200 && Address <0x23ff)

824 
	`S9xSëSA1
 (
Byã
, 
Addªss
);

826 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

831 i‡(
Addªss
 =0x2801 && 
Sëtögs
.
SRTC
)

832 
	`S9xSëSRTC
 (
Byã
, 
Addªss
);

834 i‡(
Addªss
 < 0x3000 || Address >= 0x3000 + 768)

836 #ifde‡
DEBUGGER


837 
missög
.
unknow≈pu_wrôe
 = 
Addªss
;

838 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

840 
	`•rötf
 (
Såög
, "UnknownÑegister write: $%02X->$%04X\n",

841 
Byã
, 
Addªss
);

842 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

848 i‡(!
Sëtögs
.
Su≥rFX
)

851 #ifde‡
ZSNES_FX


852 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

853 i‡(
Addªss
 < 0x3040)

854 
	`S9xSu≥rFXWrôeReg
 (
Byã
, 
Addªss
);

856 
Addªss
)

859 i‡((
Mem‹y
.
FûlRAM
 [0x3030] ^ 
Byã
Ë& 
FLG_G
)

861 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

863 i‡(
Byã
 & 
FLG_G
)

864 
	`S9xSu≥rFXExec
 ();

866 
	`FxFlushCache
 (&
GSU
);

869 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

873 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

876 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

879 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
 & 0x7f;

882 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
 & 0x7f;

885 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

888 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

891 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

894 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

899 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

902 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
Byã
;

903 
Mem‹y
.
FûlRAM
 [0x3000 + 
GSU_SFR
] |
FLG_G
;

904 
	`S9xSu≥rFXExec
 ();

908 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

909 i‡(
Addªss
 >= 0x3100)

911 
	`FxCacheWrôeAc˚ss
 (
Addªss
, &
GSU
);

919 
Mem‹y
.
FûlRAM
[
Addªss
] = 
Byã
;

920 
	}
}

926 
uöt8
 
	$S9xGëPPU
 (
uöt16
 
Addªss
)

928 
uöt8
 
byã
 = 0;

930 i‡(
Addªss
 <= 0x2190)

932 
Addªss
)

936  (
Mem‹y
.
FûlRAM
[
Addªss
]);

938 #ifde‡
DEBUGGER


939 
missög
.
ﬂm_addªss_ªad
 = 1;

941  (
uöt8
)(
PPU
.
OAMAddr
);

943  (((
PPU
.
OAMAddr
 >> 8Ë& 1Ë| (PPU.
OAMPri‹ôyRŸ©i⁄
 << 7));

953  (
Mem‹y
.
FûlRAM
[
Addªss
]);

962 #ifde‡
DEBUGGER


963 
missög
.
bg_off£t_ªad
 = 1;

965  (
Mem‹y
.
FûlRAM
[
Addªss
]);

967  (
Mem‹y
.
FûlRAM
[
Addªss
]);

969  (
uöt8
)(
PPU
.
VMA
.
Addªss
);

971  (
PPU
.
VMA
.
Addªss
 >> 8);

975  (
Mem‹y
.
FûlRAM
[
Addªss
]);

982 #ifde‡
DEBUGGER


983 
missög
.
m©rix_ªad
 = 1;

985  (
Mem‹y
.
FûlRAM
[
Addªss
]);

987  (
PPU
.
CGADD
);

1006  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1012 i‡(
PPU
.
Nìd16x8Mulô∂y
)

1014 
öt32
 
r
 = (öt32Ë
PPU
.
M©rixA
 * (öt32Ë(PPU.
M©rixB
 >> 8);

1016 
Mem‹y
.
FûlRAM
[0x2134] = (
uöt8
Ë
r
;

1017 
Mem‹y
.
FûlRAM
[0x2135] = (
uöt8
)(
r
 >> 8);

1018 
Mem‹y
.
FûlRAM
[0x2136] = (
uöt8
)(
r
 >> 16);

1019 
PPU
.
Nìd16x8Mulô∂y
 = 
FALSE
;

1021 #ifde‡
DEBUGGER


1022 
missög
.
m©rix_mu…ùly
 = 1;

1024  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1027 #ifde‡
DEBUGGER


1028 
missög
.
h_v_œtch
 = 1;

1031 #ifde‡
CPU_SHUTDOWN


1032 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1035 
PPU
.
HVBómCou¡îL©ched
 = 1;

1036 
PPU
.
VBómPosL©ched
 = (
uöt16
Ë
CPU
.
V_Cou¡î
;

1037 
PPU
.
HBómPosL©ched
 = (
uöt16
Ë((
CPU
.
Cy˛es
 * 
SNES_HCOUNTER_MAX
Ë/ 
Sëtögs
.
H_Max
);

1042 i‡(
SNESGameFixes
.
NìdInô0x2137
)

1043 
PPU
.
VBómFlù
 = 0;

1047 i‡(!
PPU
.
OAMRódFlù
)

1049 
byã
 = 
PPU
.
OAMD©a
 [PPU.
OAMAddr
 << 1];

1053 
byã
 = 
PPU
.
OAMD©a
 [(PPU.
OAMAddr
 << 1) + 1];

1054 i‡(++
PPU
.
OAMAddr
 >= 0x110)

1055 
PPU
.
OAMAddr
 = 0;

1058 
PPU
.
OAMRódFlù
 ^= 1;

1059 #ifde‡
DEBUGGER


1060 
missög
.
ﬂm_ªad
 = 1;

1062  (
byã
);

1066 #ifde‡
DEBUGGER


1067 
missög
.
vøm_ªad
 = 1;

1069 i‡(
IPPU
.
Fú°VRAMRód
)

1070 
byã
 = 
Mem‹y
.
VRAM
[
PPU
.
VMA
.
Addªss
 << 1];

1072 i‡(
PPU
.
VMA
.
FuŒGøphicCou¡
)

1074 
uöt32
 
addr
 = 
PPU
.
VMA
.
Addªss
 - 1;

1075 
uöt32
 
ªm
 = 
addr
 & 
PPU
.
VMA
.
Mask1
;

1076 
uöt32
 
addªss
 = (
addr
 & ~
PPU
.
VMA
.
Mask1
) +

1077 (
ªm
 >> 
PPU
.
VMA
.
Shi·
) +

1078 ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3);

1079 
byã
 = 
Mem‹y
.
VRAM
 [((
addªss
 << 1) - 2) & 0xFFFF];

1082 
byã
 = 
Mem‹y
.
VRAM
[((
PPU
.
VMA
.
Addªss
 << 1) - 2) & 0xffff];

1084 i‡(!
PPU
.
VMA
.
High
)

1086 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

1087 
IPPU
.
Fú°VRAMRód
 = 
FALSE
;

1092 #ifde‡
DEBUGGER


1093 
missög
.
vøm_ªad
 = 1;

1095 i‡(
IPPU
.
Fú°VRAMRód
)

1096 
byã
 = 
Mem‹y
.
VRAM
[((
PPU
.
VMA
.
Addªss
 << 1) + 1) & 0xffff];

1098 i‡(
PPU
.
VMA
.
FuŒGøphicCou¡
)

1100 
uöt32
 
addr
 = 
PPU
.
VMA
.
Addªss
 - 1;

1101 
uöt32
 
ªm
 = 
addr
 & 
PPU
.
VMA
.
Mask1
;

1102 
uöt32
 
addªss
 = (
addr
 & ~
PPU
.
VMA
.
Mask1
) +

1103 (
ªm
 >> 
PPU
.
VMA
.
Shi·
) +

1104 ((
ªm
 & (
PPU
.
VMA
.
FuŒGøphicCou¡
 - 1)) << 3);

1105 
byã
 = 
Mem‹y
.
VRAM
 [((
addªss
 << 1) - 1) & 0xFFFF];

1108 
byã
 = 
Mem‹y
.
VRAM
[((
PPU
.
VMA
.
Addªss
 << 1) - 1) & 0xFFFF];

1109 i‡(
PPU
.
VMA
.
High
)

1111 
PPU
.
VMA
.
Addªss
 +PPU.VMA.
In¸emít
;

1112 
IPPU
.
Fú°VRAMRód
 = 
FALSE
;

1118 #ifde‡
DEBUGGER


1119 
missög
.
cgøm_ªad
 = 1;

1121 i‡(
PPU
.
CGFLIPRód
)

1122 
byã
 = 
PPU
.
CGDATA
 [PPU.
CGADD
++] >> 8;

1124 
byã
 = 
PPU
.
CGDATA
 [PPU.
CGADD
] & 0xff;

1126 
PPU
.
CGFLIPRód
 ^= 1;

1127  (
byã
);

1131 #ifde‡
DEBUGGER


1132 
missög
.
h_cou¡î_ªad
 = 1;

1134 i‡(
PPU
.
HBómFlù
)

1135 
byã
 = 
PPU
.
HBómPosL©ched
 >> 8;

1137 
byã
 = (
uöt8
)
PPU
.
HBómPosL©ched
;

1138 
PPU
.
HBómFlù
 ^= 1;

1142 #ifde‡
DEBUGGER


1143 
missög
.
v_cou¡î_ªad
 = 1;

1145 i‡(
PPU
.
VBómFlù
)

1146 
byã
 = 
PPU
.
VBómPosL©ched
 >> 8;

1148 
byã
 = (
uöt8
)
PPU
.
VBómPosL©ched
;

1149 
PPU
.
VBómFlù
 ^= 1;

1153  (
SNESGameFixes
.
_0x213E_Rëu∫VÆue
);

1157 
PPU
.
VBómFlù
 = PPU.
HBómFlù
 = 0;

1158  ((
Sëtögs
.
PAL
 ? 0x10 : 0Ë| (
Mem‹y
.
FûlRAM
[0x213f] & 0xc0));

1176 #ifde‡
SPCTOOL


1177  ((
uöt8
Ë
_SPCOutP
 [
Addªss
 & 3]);

1180 #ifde‡
SPC700_SHUTDOWN


1181 
IAPU
.
APUExecutög
 = 
Sëtögs
.
APUE«bÀd
;

1182 
IAPU
.
WaôCou¡î
++;

1184 i‡(
Sëtögs
.
APUE«bÀd
)

1186 #ifde‡
CPU_SHUTDOWN


1189 i‡(
SNESGameFixes
.
APU_OutP‹ts_Rëu∫VÆueFix
 &&

1190 
Addªss
 >0x2140 && Addªs†<0x2143 && !
CPU
.
V_Cou¡î
)

1192  (
uöt8
)((
Addªss
 & 1Ë? ((
	`ønd
() & 0xff00) >> 8) :

1193 (
	`ønd
() & 0xff));

1196  (
APU
.
OutP‹ts
 [
Addªss
 & 3]);

1199 
Sëtögs
.
SoundSkùMëhod
)

1203 
CPU
.
BønchSkù
 = 
TRUE
;

1208 
CPU
.
BønchSkù
 = 
TRUE
;

1211 i‡(
Addªss
 & 3 < 2)

1213 
r
 = 
	`ønd
 ();

1214 i‡(
r
 & 2)

1216 i‡(
r
 & 4)

1217  (
Addªss
 & 3 == 1 ? 0xaa : 0xbb);

1219  ((
r
 >> 3) & 0xff);

1224 
r
 = 
	`ønd
 ();

1225 i‡(
r
 & 2)

1226  ((
r
 >> 3) & 0xff);

1228  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1233 #ifde‡
DEBUGGER


1234 
missög
.
wøm_ªad
 = 1;

1236 
byã
 = 
Mem‹y
.
RAM
 [
PPU
.
WRAM
++];

1237 
PPU
.
WRAM
 &= 0x1FFFF;

1242  (
Mem‹y
.
FûlRAM
 [
Addªss
]);

1249 i‡(
Sëtögs
.
SA1
)

1250  (
	`S9xGëSA1
 (
Addªss
));

1252 i‡(
Addªss
 <= 0x2fff || Address >= 0x3000 + 768)

1254 
Addªss
)

1262 i‡(
Sëtögs
.
SRTC
)

1263  (
	`S9xGëSRTC
 (
Addªss
));

1267 #ifde‡
DEBUGGER


1268 
missög
.
unknow≈pu_ªad
 = 
Addªss
;

1269 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1271 
	`•rötf
 (
Såög
, "Unknow¿ªgi°îÑód: $%04X\n", 
Addªss
);

1272 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1280 i‡(!
Sëtögs
.
Su≥rFX
)

1282 #ifde‡
ZSNES_FX


1283 i‡(
Addªss
 < 0x3040)

1284 
byã
 = 
	`S9xSu≥rFXRódReg
 (
Addªss
);

1286 
byã
 = 
Mem‹y
.
FûlRAM
 [
Addªss
];

1288 #ifde‡
CPU_SHUTDOWN


1289 i‡(
Addªss
 == 0x3030)

1290 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1292 i‡(
Addªss
 == 0x3031)

1293 
	`CLEAR_IRQ_SOURCE
 (
GSU_IRQ_SOURCE
);

1295 
byã
 = 
Mem‹y
.
FûlRAM
 [
Addªss
];

1299 #ifde‡
CPU_SHUTDOWN


1300 i‡(
Addªss
 == 0x3030)

1302 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1306 i‡(
Addªss
 == 0x3031)

1308 
	`CLEAR_IRQ_SOURCE
 (
GSU_IRQ_SOURCE
);

1309 
Mem‹y
.
FûlRAM
 [0x3031] = 
byã
 & 0x7f;

1311  (
byã
);

1315  (
byã
);

1316 
	}
}

1322 
	$S9xSëCPU
 (
uöt8
 
byã
, 
uöt16
 
Addªss
)

1324 
d
;

1326 i‡(
Addªss
 < 0x4200)

1328 #ifde‡
VAR_CYCLES


1329 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

1331 
Addªss
)

1335 i‡((
byã
 & 1Ë&& !(
Mem‹y
.
FûlRAM
 [
Addªss
] & 1))

1337 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 0;

1338 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 0;

1339 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 0;

1345 #ifde‡
DEBUGGER


1346 
missög
.
unknown˝u_wrôe
 = 
Addªss
;

1347 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1349 
	`•rötf
 (
Såög
, "UnknownÑegisterÑegister write: $%02X->$%04X\n",

1350 
byã
, 
Addªss
);

1351 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1358 
Addªss
)

1362 i‡((
byã
 & 0x20) &&

1363 (!
SNESGameFixes
.
umih¨akawa£Fix
 || 
PPU
.
IRQVBómPos
 < 209))

1365 i‡(!
PPU
.
VTimîE«bÀd
)

1367 #ifde‡
DEBUGGER


1368 
missög
.
vúq
 = 1;

1369 
missög
.
vúq_pos
 = 
PPU
.
IRQVBómPos
;

1371 
PPU
.
VTimîE«bÀd
 = 
TRUE
;

1372 i‡(
PPU
.
HTimîE«bÀd
)

1373 
	`S9xUpd©eHTimî
 ();

1375 i‡(
PPU
.
IRQVBómPos
 =
CPU
.
V_Cou¡î
)

1376 
	`S9xSëIRQ
 (
PPU_V_BEAM_IRQ_SOURCE
);

1381 
PPU
.
VTimîE«bÀd
 = 
FALSE
;

1382 #i‚de‡
RC_OPTIMIZED


1383 i‡(
SNESGameFixes
.
umih¨akawa£Fix
)

1384 
byã
 &= ~0x20;

1388 i‡(
byã
 & 0x10)

1390 i‡(!
PPU
.
HTimîE«bÀd
)

1392 #ifde‡
DEBUGGER


1393 
missög
.
húq
 = 1;

1394 
missög
.
húq_pos
 = 
PPU
.
IRQHBómPos
;

1396 
PPU
.
HTimîE«bÀd
 = 
TRUE
;

1397 
	`S9xUpd©eHTimî
 ();

1404 
PPU
.
HTimîE«bÀd
 = 
FALSE
;

1405 
PPU
.
HTimîPosôi⁄
 = 
Sëtögs
.
H_Max
 + 1;

1408 #i‚de‡
RC_OPTIMIZED


1409 i‡(!
Sëtögs
.
DaffyDuck
)

1410 
	`CLEAR_IRQ_SOURCE
 (
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
);

1412 i‡((
byã
 & 0x80) &&

1413 !(
Mem‹y
.
FûlRAM
 [0x4200] & 0x80) &&

1414 
CPU
.
V_Cou¡î
 >
PPU
.
S¸ìnHeight
 + 
FIRST_VISIBLE_LINE
 &&

1415 
CPU
.
V_Cou¡î
 <
PPU
.
S¸ìnHeight
 +

1416 (
SNESGameFixes
.
ÆõnVS¥edë‹Fix
 ? 25 : 15) &&

1420 (
Mem‹y
.
FûlRAM
 [0x4210] & 0x80) &&

1421 !
CPU
.
NMIA˘ive
)

1423 
CPU
.
Fœgs
 |
NMI_FLAG
;

1424 
CPU
.
NMIA˘ive
 = 
TRUE
;

1425 
CPU
.
NMICy˛eCou¡
 = CPU.
NMITriggîPoöt
;

1437 
uöt32
 
ªs
 = 
Mem‹y
.
FûlRAM
[0x4202] * 
byã
;

1439 
Mem‹y
.
FûlRAM
[0x4216] = (
uöt8
Ë
ªs
;

1440 
Mem‹y
.
FûlRAM
[0x4217] = (
uöt8
Ë(
ªs
 >> 8);

1450 
uöt16
 
a
 = 
Mem‹y
.
FûlRAM
[0x4204] + (Memory.FillRAM[0x4205] << 8);

1451 
uöt16
 
div
 = 
byã
 ? 
a
 / byte : 0xffff;

1452 
uöt16
 
ªm
 = 
byã
 ? 
a
 % byte :á;

1454 
Mem‹y
.
FûlRAM
[0x4214] = (
uöt8
)
div
;

1455 
Mem‹y
.
FûlRAM
[0x4215] = 
div
 >> 8;

1456 
Mem‹y
.
FûlRAM
[0x4216] = (
uöt8
)
ªm
;

1457 
Mem‹y
.
FûlRAM
[0x4217] = 
ªm
 >> 8;

1461 
d
 = 
PPU
.
IRQHBómPos
;

1462 
PPU
.
IRQHBómPos
 = (PPU.IRQHBómPo†& 0xFF00Ë| 
byã
;

1464 i‡(
PPU
.
HTimîE«bÀd
 && PPU.
IRQHBómPos
 !
d
)

1465 
	`S9xUpd©eHTimî
 ();

1469 
d
 = 
PPU
.
IRQHBómPos
;

1470 
PPU
.
IRQHBómPos
 = (PPU.IRQHBómPo†& 0xFFË| ((
byã
 & 1) << 8);

1472 i‡(
PPU
.
HTimîE«bÀd
 && PPU.
IRQHBómPos
 !
d
)

1473 
	`S9xUpd©eHTimî
 ();

1478 
d
 = 
PPU
.
IRQVBómPos
;

1479 
PPU
.
IRQVBómPos
 = (PPU.IRQVBómPo†& 0xFF00Ë| 
byã
;

1480 #ifde‡
DEBUGGER


1481 
missög
.
vúq_pos
 = 
PPU
.
IRQVBómPos
;

1483 i‡(
PPU
.
VTimîE«bÀd
 && PPU.
IRQVBómPos
 !
d
)

1485 i‡(
PPU
.
HTimîE«bÀd
)

1486 
	`S9xUpd©eHTimî
 ();

1489 i‡(
PPU
.
IRQVBómPos
 =
CPU
.
V_Cou¡î
)

1490 
	`S9xSëIRQ
 (
PPU_V_BEAM_IRQ_SOURCE
);

1496 
d
 = 
PPU
.
IRQVBómPos
;

1497 
PPU
.
IRQVBómPos
 = (PPU.IRQVBómPo†& 0xFFË| ((
byã
 & 1) << 8);

1498 #ifde‡
DEBUGGER


1499 
missög
.
vúq_pos
 = 
PPU
.
IRQVBómPos
;

1501 i‡(
PPU
.
VTimîE«bÀd
 && PPU.
IRQVBómPos
 !
d
)

1503 i‡(
PPU
.
HTimîE«bÀd
)

1504 
	`S9xUpd©eHTimî
 ();

1507 i‡(
PPU
.
IRQVBómPos
 =
CPU
.
V_Cou¡î
)

1508 
	`S9xSëIRQ
 (
PPU_V_BEAM_IRQ_SOURCE
);

1514 #ifde‡
DEBUGGER


1515 
missög
.
dma_this_‰ame
 = 
byã
;

1516 
missög
.
dma_ch™√ls
 = 
byã
;

1518 i‡((
byã
 & 0x01) != 0)

1519 
	`S9xDoDMA
 (0);

1520 i‡((
byã
 & 0x02) != 0)

1521 
	`S9xDoDMA
 (1);

1522 i‡((
byã
 & 0x04) != 0)

1523 
	`S9xDoDMA
 (2);

1524 i‡((
byã
 & 0x08) != 0)

1525 
	`S9xDoDMA
 (3);

1526 i‡((
byã
 & 0x10) != 0)

1527 
	`S9xDoDMA
 (4);

1528 i‡((
byã
 & 0x20) != 0)

1529 
	`S9xDoDMA
 (5);

1530 i‡((
byã
 & 0x40) != 0)

1531 
	`S9xDoDMA
 (6);

1532 i‡((
byã
 & 0x80) != 0)

1533 
	`S9xDoDMA
 (7);

1536 #ifde‡
DEBUGGER


1537 
missög
.
hdma_this_‰ame
 |
byã
;

1538 
missög
.
hdma_ch™√ls
 |
byã
;

1540 i‡(
Sëtögs
.
DißbÀHDMA
)

1541 
byã
 = 0;

1542 
Mem‹y
.
FûlRAM
[0x420c] = 
byã
;

1543 
IPPU
.
HDMA
 = 
byã
;

1548 i‡((
byã
 & 1Ë!(
Mem‹y
.
FûlRAM
 [0x420d] & 1))

1550 i‡(
byã
 & 1)

1552 
CPU
.
Fa°ROMS≥ed
 = 
ONE_CYCLE
;

1553 #ifde‡
DEBUGGER


1554 
missög
.
Á°_rom
 = 1;

1558 
CPU
.
Fa°ROMS≥ed
 = 
SLOW_ONE_CYCLE
;

1560 
Mem‹y
.
	`FixROMS≥ed
 ();

1569 
Mem‹y
.
FûlRAM
[0x4210] = 0;

1573 
	`CLEAR_IRQ_SOURCE
 (
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
);

1605 
d
 = (
Addªss
 >> 4) & 0x7;

1606 
DMA
[
d
].
Tøns„rDúe˘i⁄
 = (
byã
 & 128) != 0 ? 1 : 0;

1607 
DMA
[
d
].
HDMAIndúe˘Addªssög
 = (
byã
 & 64) != 0 ? 1 : 0;

1608 
DMA
[
d
].
AAddªssDe¸emít
 = (
byã
 & 16) != 0 ? 1 : 0;

1609 
DMA
[
d
].
AAddªssFixed
 = (
byã
 & 8) != 0 ? 1 : 0;

1610 
DMA
[
d
].
Tøns„rMode
 = (
byã
 & 7);

1621 
DMA
[((
Addªss
 >> 4Ë& 0x7)].
BAddªss
 = 
byã
;

1632 
d
 = (
Addªss
 >> 4) & 0x7;

1633 
DMA
[
d
].
AAddªss
 &= 0xFF00;

1634 
DMA
[
d
].
AAddªss
 |
byã
;

1645 
d
 = (
Addªss
 >> 4) & 0x7;

1646 
DMA
[
d
].
AAddªss
 &= 0xFF;

1647 
DMA
[
d
].
AAddªss
 |
byã
 << 8;

1658 
DMA
[((
Addªss
 >> 4Ë& 0x7)].
AB™k
 = 
byã
;

1669 
d
 = (
Addªss
 >> 4) & 0x7;

1670 
DMA
[
d
].
Tøns„rByãs
 &= 0xFF00;

1671 
DMA
[
d
].
Tøns„rByãs
 |
byã
;

1672 
DMA
[
d
].
Indúe˘Addªss
 &= 0xff00;

1673 
DMA
[
d
].
Indúe˘Addªss
 |
byã
;

1684 
d
 = (
Addªss
 >> 4) & 0x7;

1685 
DMA
[
d
].
Tøns„rByãs
 &= 0xFF;

1686 
DMA
[
d
].
Tøns„rByãs
 |
byã
 << 8;

1687 
DMA
[
d
].
Indúe˘Addªss
 &= 0xff;

1688 
DMA
[
d
].
Indúe˘Addªss
 |
byã
 << 8;

1699 
DMA
[
d
 = ((
Addªss
 >> 4Ë& 0x7)].
Indúe˘B™k
 = 
byã
;

1710 
d
 = (
Addªss
 >> 4) & 7;

1711 
DMA
[
d
].
Addªss
 &= 0xff00;

1712 
DMA
[
d
].
Addªss
 |
byã
;

1723 
d
 = (
Addªss
 >> 4) & 0x7;

1724 
DMA
[
d
].
Addªss
 &= 0xff;

1725 
DMA
[
d
].
Addªss
 |
byã
 << 8;

1736 
d
 = (
Addªss
 >> 4) & 0x7;

1737 
DMA
[
d
].
LöeCou¡
 = 
byã
 & 0x7f;

1738 
DMA
[
d
].
Rïót
 = !(
byã
 & 0x80);

1754 
	`S9xSëSDD1Mem‹yM≠
 (
Addªss
 - 0x4804, 
byã
 & 7);

1757 #ifde‡
DEBUGGER


1758 
missög
.
unknown˝u_wrôe
 = 
Addªss
;

1759 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1761 
	`•rötf
 (
Såög
, "UnknownÑegister write: $%02X->$%04X\n",

1762 
byã
, 
Addªss
);

1763 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1768 
Mem‹y
.
FûlRAM
 [
Addªss
] = 
byã
;

1769 
	}
}

1775 
uöt8
 
	$S9xGëCPU
 (
uöt16
 
Addªss
)

1777 
uöt8
 
byã
;

1779 i‡(
Addªss
 < 0x4200)

1781 #ifde‡
VAR_CYCLES


1782 
CPU
.
Cy˛es
 +
ONE_CYCLE
;

1784 
Addªss
)

1793 i‡(
Mem‹y
.
FûlRAM
 [0x4016] & 1)

1795 i‡((!
Sëtögs
.
Sw≠Joy∑ds
 &&

1796 
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE_SWAPPED
) ||

1797 (
Sëtögs
.
Sw≠Joy∑ds
 &&

1798 
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE
))

1800 i‡(++
PPU
.
Mou£S≥ed
 [0] > 2)

1801 
PPU
.
Mou£S≥ed
 [0] = 0;

1806 
öd
 = 
Sëtögs
.
Sw≠Joy∑ds
 ? 1 : 0;

1807 
byã
 = 
IPPU
.
Joy∑ds
[
öd
] >> (
PPU
.
Joy∑d1Buâ⁄RódPos
 ^ 15);

1808 
PPU
.
Joy∑d1Buâ⁄RódPos
++;

1809  (
byã
 & 1);

1813 i‡(
Mem‹y
.
FûlRAM
 [0x4016] & 1)

1816 
IPPU
.
C⁄åﬁÀr
)

1818 
SNES_MULTIPLAYER5
:

1820 
SNES_MOUSE_SWAPPED
:

1821 i‡(
Sëtögs
.
Sw≠Joy∑ds
 && ++
PPU
.
Mou£S≥ed
 [0] > 2)

1822 
PPU
.
Mou£S≥ed
 [0] = 0;

1825 
SNES_MOUSE
:

1826 i‡(!
Sëtögs
.
Sw≠Joy∑ds
 && ++
PPU
.
Mou£S≥ed
 [0] > 2)

1827 
PPU
.
Mou£S≥ed
 [0] = 0;

1833 
öd
 = 
Sëtögs
.
Sw≠Joy∑ds
 ? 0 : 1;

1835 i‡(
IPPU
.
C⁄åﬁÀr
 =
SNES_MULTIPLAYER5
)

1837 i‡(
Mem‹y
.
FûlRAM
 [0x4201] & 0x80)

1839 
byã
 = ((
IPPU
.
Joy∑ds
[
öd
] >> (
PPU
.
Joy∑d2Buâ⁄RódPos
 ^ 15)) & 1) |

1840 (((
IPPU
.
Joy∑ds
[2] >> (
PPU
.
Joy∑d2Buâ⁄RódPos
 ^ 15)) & 1) << 1);

1841 
PPU
.
Joy∑d2Buâ⁄RódPos
++;

1842  (
byã
);

1846 
byã
 = ((
IPPU
.
Joy∑ds
[3] >> (
PPU
.
Joy∑d3Buâ⁄RódPos
 ^ 15)) & 1) |

1847 (((
IPPU
.
Joy∑ds
[4] >> (
PPU
.
Joy∑d3Buâ⁄RódPos
 ^ 15)) & 1) << 1);

1848 
PPU
.
Joy∑d3Buâ⁄RódPos
++;

1849  (
byã
);

1852  ((
IPPU
.
Joy∑ds
[
öd
] >> (
PPU
.
Joy∑d2Buâ⁄RódPos
++ ^ 15)) & 1);

1855 #ifde‡
DEBUGGER


1856 
missög
.
unknown˝u_ªad
 = 
Addªss
;

1857 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

1859 
	`•rötf
 (
Såög
, "Unknow¿ªgi°îÑód: $%04X\n", 
Addªss
);

1860 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

1865  (
Mem‹y
.
FûlRAM
 [
Addªss
]);

1868 
Addªss
)

1874 i‡(
SNESGameFixes
.
Old_Ród0x4200
)

1876 #ifde‡
CPU_SHUTDOWN


1877 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1879  (
	`REGISTER_4212
());

1890  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1892  (
uöt8
)(
PPU
.
IRQHBómPos
);

1894  (
PPU
.
IRQHBómPos
 >> 8);

1896  (
uöt8
)(
PPU
.
IRQVBómPos
);

1898  (
PPU
.
IRQVBómPos
 >> 8);

1906 
Mem‹y
.
FûlRAM
 [0x420b] = !Memory.FillRAM [0x420b];

1907  (
Mem‹y
.
FûlRAM
 [0x420b]);

1910  (
IPPU
.
HDMA
);

1913  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1917  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1919 #ifde‡
CPU_SHUTDOWN


1920 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1922 
byã
 = 
Mem‹y
.
FûlRAM
[0x4210];

1923 
Mem‹y
.
FûlRAM
[0x4210] = 0;

1924  (
byã
);

1926 
byã
 = (
CPU
.
IRQA˘ive
 & (
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
)) ? 0x80 : 0;

1928 
byã
 |
CPU
.
Cy˛es
 >
Sëtögs
.
HBœnkSèπ
 ? 0x40 : 0;

1929 
	`CLEAR_IRQ_SOURCE
 (
PPU_V_BEAM_IRQ_SOURCE
 | 
PPU_H_BEAM_IRQ_SOURCE
);

1930  (
byã
);

1933 #ifde‡
CPU_SHUTDOWN


1934 
CPU
.
WaôAddªss
 = CPU.
PCAtOpcodeSèπ
;

1936  (
	`REGISTER_4212
());

1946  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1956  (
Mem‹y
.
FûlRAM
 [
Addªss
]);

1967  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1977  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1987  (
Mem‹y
.
FûlRAM
[
Addªss
]);

1997  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2007  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2017  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2027  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2037  (
DMA
[(
Addªss
 >> 4Ë& 7].
Indúe˘B™k
);

2047  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2057  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2068 
d
 = (
Addªss
 & 0x70) >> 4;

2069 i‡(
IPPU
.
HDMA
 & (1 << 
d
))

2071  (
DMA
[
d
].
LöeCou¡
);

2073  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2076 #ifde‡
DEBUGGER


2077 
missög
.
unknown˝u_ªad
 = 
Addªss
;

2078 i‡(
Sëtögs
.
Tø˚UnknownRegi°îs
)

2080 
	`•rötf
 (
Såög
, "Unknow¿ªgi°îÑód: $%04X\n", 
Addªss
);

2081 
	`S9xMesßge
 (
S9X_TRACE
, 
S9X_PPU_TRACE
, 
Såög
);

2087  (
Mem‹y
.
FûlRAM
[
Addªss
]);

2088 
	}
}

2090 
	$S9xRe£tPPU
 ()

2092 
PPU
.
BGMode
 = 0;

2093 
PPU
.
BG3Pri‹ôy
 = 0;

2094 
PPU
.
Brighäess
 = 0;

2095 
PPU
.
VMA
.
High
 = 0;

2096 
PPU
.
VMA
.
In¸emít
 = 1;

2097 
PPU
.
VMA
.
Addªss
 = 0;

2098 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 0;

2099 
PPU
.
VMA
.
Shi·
 = 0;

2101 
uöt8
 
B
 = 0; B != 4; B++)

2103 
PPU
.
BG
[
B
].
SCBa£
 = 0;

2104 
PPU
.
BG
[
B
].
VOff£t
 = 0;

2105 
PPU
.
BG
[
B
].
HOff£t
 = 0;

2106 
PPU
.
BG
[
B
].
BGSize
 = 0;

2107 
PPU
.
BG
[
B
].
NameBa£
 = 0;

2108 
PPU
.
BG
[
B
].
SCSize
 = 0;

2110 
PPU
.
ClùCou¡s
[
B
] = 0;

2111 
PPU
.
ClùWödowOvîœpLogic
 [
B
] = 
CLIP_OR
;

2112 
PPU
.
ClùWödow1E«bÀ
[
B
] = 
FALSE
;

2113 
PPU
.
ClùWödow2E«bÀ
[
B
] = 
FALSE
;

2114 
PPU
.
ClùWödow1Inside
[
B
] = 
TRUE
;

2115 
PPU
.
ClùWödow2Inside
[
B
] = 
TRUE
;

2118 
PPU
.
ClùCou¡s
[4] = 0;

2119 
PPU
.
ClùCou¡s
[5] = 0;

2120 
PPU
.
ClùWödowOvîœpLogic
[4] = PPU.ClùWödowOvîœpLogic[5] = 
CLIP_OR
;

2121 
PPU
.
ClùWödow1E«bÀ
[4] = PPU.ClùWödow1E«bÀ[5] = 
FALSE
;

2122 
PPU
.
ClùWödow2E«bÀ
[4] = PPU.ClùWödow2E«bÀ[5] = 
FALSE
;

2123 
PPU
.
ClùWödow1Inside
[4] = PPU.ClùWödow1Inside[5] = 
TRUE
;

2124 
PPU
.
ClùWödow2Inside
[4] = PPU.ClùWödow2Inside[5] = 
TRUE
;

2126 
PPU
.
CGFLIP
 = 0;

2127 
c
;

2128 
c
 = 0; c < 256; c++)

2130 
IPPU
.
Red
 [
c
] = (c & 7) << 2;

2131 
IPPU
.
Gªí
 [
c
] = ((c >> 3) & 7) << 2;

2132 
IPPU
.
Blue
 [
c
] = ((c >> 6) & 2) << 3;

2133 
PPU
.
CGDATA
 [
c
] = 
IPPU
.
Red
 [c] | (IPPU.
Gªí
 [c] << 5) |

2134 (
IPPU
.
Blue
 [
c
] << 10);

2137 
PPU
.
Fú°S¥ôe
 = 0;

2138 
PPU
.
La°S¥ôe
 = 127;

2139 
S¥ôe
 = 0; Sprite < 128; Sprite++)

2141 
PPU
.
OBJ
[
S¥ôe
].
HPos
 = 0;

2142 
PPU
.
OBJ
[
S¥ôe
].
VPos
 = 0;

2143 
PPU
.
OBJ
[
S¥ôe
].
VFlù
 = 0;

2144 
PPU
.
OBJ
[
S¥ôe
].
HFlù
 = 0;

2145 
PPU
.
OBJ
[
S¥ôe
].
Pri‹ôy
 = 0;

2146 
PPU
.
OBJ
[
S¥ôe
].
PÆëã
 = 0;

2147 
PPU
.
OBJ
[
S¥ôe
].
Name
 = 0;

2148 
PPU
.
OBJ
[
S¥ôe
].
Size
 = 0;

2150 
PPU
.
OAMPri‹ôyRŸ©i⁄
 = 0;

2152 
PPU
.
OAMFlù
 = 0;

2153 
PPU
.
OAMTûeAddªss
 = 0;

2154 
PPU
.
OAMAddr
 = 0;

2155 
PPU
.
IRQVBómPos
 = 0;

2156 
PPU
.
IRQHBómPos
 = 0;

2157 
PPU
.
VBómPosL©ched
 = 0;

2158 
PPU
.
HBómPosL©ched
 = 0;

2160 
PPU
.
HBómFlù
 = 0;

2161 
PPU
.
VBómFlù
 = 0;

2162 
PPU
.
HVBómCou¡îL©ched
 = 0;

2164 
PPU
.
M©rixA
 = PPU.
M©rixB
 = PPU.
M©rixC
 = PPU.
M©rixD
 = 0;

2165 
PPU
.
CíåeX
 = PPU.
CíåeY
 = 0;

2166 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 0;

2167 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 0;

2168 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 0;

2170 
PPU
.
CGADD
 = 0;

2171 
PPU
.
FixedCﬁourRed
 = PPU.
FixedCﬁourGªí
 = PPU.
FixedCﬁourBlue
 = 0;

2172 
PPU
.
SavedOAMAddr
 = 0;

2173 
PPU
.
S¸ìnHeight
 = 
SNES_HEIGHT
;

2174 
PPU
.
WRAM
 = 0;

2175 
PPU
.
BG_F‹˚d
 = 0;

2176 
PPU
.
F‹˚dBœnkög
 = 
TRUE
;

2177 
PPU
.
OBJThroughMaö
 = 
FALSE
;

2178 
PPU
.
OBJThroughSub
 = 
FALSE
;

2179 
PPU
.
OBJSizeSñe˘
 = 0;

2180 
PPU
.
OBJNameSñe˘
 = 0;

2181 
PPU
.
OBJNameBa£
 = 0;

2182 
PPU
.
OBJAddôi⁄
 = 
FALSE
;

2183 
PPU
.
OAMRódFlù
 = 0;

2184 
	`ZîoMem‹y
 (
PPU
.
OAMD©a
, 512 + 32);

2186 
PPU
.
VTimîE«bÀd
 = 
FALSE
;

2187 
PPU
.
HTimîE«bÀd
 = 
FALSE
;

2188 
PPU
.
HTimîPosôi⁄
 = 
Sëtögs
.
H_Max
 + 1;

2189 
PPU
.
Moßic
 = 0;

2190 
PPU
.
BGMoßic
 [0] = PPU.BGMoßi¯[1] = 
FALSE
;

2191 
PPU
.
BGMoßic
 [2] = PPU.BGMoßi¯[3] = 
FALSE
;

2192 
PPU
.
Mode7HFlù
 = 
FALSE
;

2193 
PPU
.
Mode7VFlù
 = 
FALSE
;

2194 
PPU
.
Mode7Rïót
 = 0;

2195 
PPU
.
Wödow1Le·
 = 1;

2196 
PPU
.
Wödow1Right
 = 0;

2197 
PPU
.
Wödow2Le·
 = 1;

2198 
PPU
.
Wödow2Right
 = 0;

2199 
PPU
.
RecompuãClùWödows
 = 
TRUE
;

2200 
PPU
.
CGFLIPRód
 = 0;

2201 
PPU
.
Nìd16x8Mulô∂y
 = 
FALSE
;

2202 
PPU
.
Mou£S≥ed
[0] = PPU.MouseSpeed[1] = 0;

2204 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

2205 
IPPU
.
HDMA
 = 0;

2206 
IPPU
.
HDMASèπed
 = 
FALSE
;

2207 
IPPU
.
MaxBrighäess
 = 0;

2208 
IPPU
.
L©chedBœnkög
 = 0;

2209 
IPPU
.
OBJCh™ged
 = 
TRUE
;

2210 
IPPU
.
RídîThisFøme
 = 
TRUE
;

2211 
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
 = 
TRUE
;

2212 
IPPU
.
FømeCou¡
 = 0;

2213 
IPPU
.
RídîedFømesCou¡
 = 0;

2214 
IPPU
.
Di•œyedRídîedFømeCou¡
 = 0;

2215 
IPPU
.
Skù≥dFømes
 = 0;

2216 
IPPU
.
FømeSkù
 = 0;

2217 
	`ZîoMem‹y
 (
IPPU
.
TûeCached
 [
TILE_2BIT
], 
MAX_2BIT_TILES
);

2218 
	`ZîoMem‹y
 (
IPPU
.
TûeCached
 [
TILE_4BIT
], 
MAX_4BIT_TILES
);

2219 
	`ZîoMem‹y
 (
IPPU
.
TûeCached
 [
TILE_8BIT
], 
MAX_8BIT_TILES
);

2220 
IPPU
.
Fú°VRAMRód
 = 
FALSE
;

2221 
IPPU
.
L©chedI¡îœ˚
 = 
FALSE
;

2222 
IPPU
.
DoubÀWidthPixñs
 = 
FALSE
;

2223 
IPPU
.
RídîedS¸ìnWidth
 = 
SNES_WIDTH
;

2224 
IPPU
.
RídîedS¸ìnHeight
 = 
SNES_HEIGHT
;

2225 
IPPU
.
XB
 = 
NULL
;

2226 
c
 = 0; c < 256; c++)

2227 
IPPU
.
S¸ìnCﬁ‹s
 [
c
] = c;

2228 
	`S9xFixCﬁourBrighäess
 ();

2229 
IPPU
.
PªviousLöe
 = IPPU.
CuºítLöe
 = 0;

2230 
IPPU
.
Joy∑ds
[0] = IPPU.Joypads[1] = IPPU.Joypads[2] = 0;

2231 
IPPU
.
Joy∑ds
[3] = IPPU.Joypads[4] = 0;

2232 
IPPU
.
Su≥rSc›e
 = 0;

2233 
IPPU
.
Mou£
[0] = IPPU.Mouse[1] = 0;

2234 
IPPU
.
PªvMou£X
[0] = IPPU.PrevMouseX[1] = 256 / 2;

2235 
IPPU
.
PªvMou£Y
[0] = IPPU.PrevMouseY[1] = 224 / 2;

2237 i‡(
Sëtögs
.
C⁄åﬁÀrO±i⁄
 == 0)

2238 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MAX_CONTROLLER_OPTIONS
 - 1;

2240 
IPPU
.
C⁄åﬁÀr
 = 
Sëtögs
.
C⁄åﬁÀrO±i⁄
 - 1;

2241 
	`S9xNextC⁄åﬁÀr
 ();

2243 
c
 = 0; c < 2; c++)

2244 
	`mem£t
 (&
IPPU
.
Clù
 [
c
], 0,  (
ClùD©a
));

2246 i‡(
Sëtögs
.
Mou£Ma°î
)

2248 
	`S9xPro˚ssMou£
 (0);

2249 
	`S9xPro˚ssMou£
 (1);

2251 
c
 = 0; c < 0x8000; c += 0x100)

2252 
	`mem£t
 (&
Mem‹y
.
FûlRAM
 [
c
], c >> 8, 0x100);

2254 
	`ZîoMem‹y
 (&
Mem‹y
.
FûlRAM
 [0x2100], 0x100);

2255 
	`ZîoMem‹y
 (&
Mem‹y
.
FûlRAM
 [0x4200], 0x100);

2256 
	`ZîoMem‹y
 (&
Mem‹y
.
FûlRAM
 [0x4000], 0x100);

2258 
	`ZîoMem‹y
 (&
Mem‹y
.
FûlRAM
 [0x1000], 0x1000);

2259 
	}
}

2261 
	$S9xPro˚ssMou£
 (
which1
)

2263 
x
, 
y
;

2264 
uöt32
 
buâ⁄s
;

2266 i‡((
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE
 || IPPU.C⁄åﬁÀ∏=
SNES_MOUSE_SWAPPED
) &&

2267 
	`S9xRódMou£Posôi⁄
 (
which1
, 
x
, 
y
, 
buâ⁄s
))

2269 
dñè_x
, 
dñè_y
;

2270 
	#MOUSE_SIGNATURE
 0x1

	)

2271 
IPPU
.
Mou£
 [
which1
] = 
MOUSE_SIGNATURE
 |

2272 (
PPU
.
Mou£S≥ed
 [
which1
] << 4) |

2273 ((
buâ⁄s
 & 1) << 6) | ((buttons & 2) << 6);

2275 
dñè_x
 = 
x
 - 
IPPU
.
PªvMou£X
[
which1
];

2276 
dñè_y
 = 
y
 - 
IPPU
.
PªvMou£Y
[
which1
];

2278 i‡(
dñè_x
 > 63)

2280 
dñè_x
 = 63;

2281 
IPPU
.
PªvMou£X
[
which1
] += 63;

2284 i‡(
dñè_x
 < -63)

2286 
dñè_x
 = -63;

2287 
IPPU
.
PªvMou£X
[
which1
] -= 63;

2290 
IPPU
.
PªvMou£X
[
which1
] = 
x
;

2292 i‡(
dñè_y
 > 63)

2294 
dñè_y
 = 63;

2295 
IPPU
.
PªvMou£Y
[
which1
] += 63;

2298 i‡(
dñè_y
 < -63)

2300 
dñè_y
 = -63;

2301 
IPPU
.
PªvMou£Y
[
which1
] -= 63;

2304 
IPPU
.
PªvMou£Y
[
which1
] = 
y
;

2306 i‡(
dñè_x
 < 0)

2308 
dñè_x
 = -delta_x;

2309 
IPPU
.
Mou£
 [
which1
] |(
dñè_x
 | 0x80) << 16;

2312 
IPPU
.
Mou£
 [
which1
] |
dñè_x
 << 16;

2314 i‡(
dñè_y
 < 0)

2316 
dñè_y
 = -delta_y;

2317 
IPPU
.
Mou£
 [
which1
] |(
dñè_y
 | 0x80) << 24;

2320 
IPPU
.
Mou£
 [
which1
] |
dñè_y
 << 24;

2322 i‡(
IPPU
.
C⁄åﬁÀr
 =
SNES_MOUSE_SWAPPED
)

2323 
IPPU
.
Joy∑ds
 [0] = IPPU.
Mou£
 [
which1
];

2325 
IPPU
.
Joy∑ds
 [1] = IPPU.
Mou£
 [
which1
];

2327 
	}
}

2329 
	$Pro˚ssSu≥rSc›e
 ()

2331 
x
, 
y
;

2332 
uöt32
 
buâ⁄s
;

2334 i‡(
IPPU
.
C⁄åﬁÀr
 =
SNES_SUPERSCOPE
 &&

2335 
	`S9xRódSu≥rSc›ePosôi⁄
 (
x
, 
y
, 
buâ⁄s
))

2337 
	#SUPERSCOPE_SIGNATURE
 0x00ff

	)

2338 
uöt32
 
sc›e
;

2340 
sc›e
 = 
SUPERSCOPE_SIGNATURE
 | ((
buâ⁄s
 & 1) << (7 + 8)) |

2341 ((
buâ⁄s
 & 2) << (5 + 8)) | ((buttons & 4) << (3 + 8)) |

2342 ((
buâ⁄s
 & 8) << (1 + 8));

2343 i‡(
x
 > 255)

2344 
x
 = 255;

2345 i‡(
x
 < 0)

2346 
x
 = 0;

2347 i‡(
y
 > 
PPU
.
S¸ìnHeight
 - 1)

2348 
y
 = 
PPU
.
S¸ìnHeight
 - 1;

2349 i‡(
y
 < 0)

2350 
y
 = 0;

2352 
PPU
.
VBómPosL©ched
 = (
uöt16
Ë(
y
 + 1);

2353 
PPU
.
HBómPosL©ched
 = (
uöt16
Ë
x
;

2354 
PPU
.
HVBómCou¡îL©ched
 = 
TRUE
;

2355 
Mem‹y
.
FûlRAM
 [0x213F] |= 0x40;

2356 
IPPU
.
Joy∑ds
 [1] = 
sc›e
;

2358 
	}
}

2360 
	$S9xNextC⁄åﬁÀr
 ()

2362 
IPPU
.
C⁄åﬁÀr
)

2364 
SNES_MULTIPLAYER5
:

2365 
IPPU
.
C⁄åﬁÀr
 = 
SNES_JOYPAD
;

2367 
SNES_JOYPAD
:

2368 i‡(
Sëtögs
.
Mou£Ma°î
)

2370 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MOUSE_SWAPPED
;

2373 
SNES_MOUSE_SWAPPED
:

2374 i‡(
Sëtögs
.
Mou£Ma°î
)

2376 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MOUSE
;

2379 
SNES_MOUSE
:

2380 i‡(
Sëtögs
.
Su≥rSc›eMa°î
)

2382 
IPPU
.
C⁄åﬁÀr
 = 
SNES_SUPERSCOPE
;

2385 
SNES_SUPERSCOPE
:

2386 i‡(
Sëtögs
.
Mu…iPœyî5Ma°î
)

2388 
IPPU
.
C⁄åﬁÀr
 = 
SNES_MULTIPLAYER5
;

2392 
IPPU
.
C⁄åﬁÀr
 = 
SNES_JOYPAD
;

2395 
	}
}

2397 
	$S9xUpd©eJoy∑ds
 ()

2399 #ifde‡
_SNESPPC


2400 
i
 = 0;

2402 
i
;

2404 
i
 = 0; i < 5; i++)

2407 
IPPU
.
Joy∑ds
 [
i
] = 
	`S9xRódJoy∑d
 (i);

2408 i‡(
IPPU
.
Joy∑ds
 [
i
] & 
SNES_LEFT_MASK
)

2409 
IPPU
.
Joy∑ds
 [
i
] &~
SNES_RIGHT_MASK
;

2410 i‡(
IPPU
.
Joy∑ds
 [
i
] & 
SNES_UP_MASK
)

2411 
IPPU
.
Joy∑ds
 [
i
] &~
SNES_DOWN_MASK
;

2415 i‡(
SNESGameFixes
.
TouhaidíC⁄åﬁÀrFix
 &&

2416 (
IPPU
.
C⁄åﬁÀr
 =
SNES_JOYPAD
 || IPPU.C⁄åﬁÀ∏=
SNES_MULTIPLAYER5
))

2418 
i
 = 0; i < 5; i++)

2420 i‡(
IPPU
.
Joy∑ds
 [
i
])

2421 
IPPU
.
Joy∑ds
 [
i
] |= 0xffff0000;

2426 i‡(
Sëtögs
.
Mou£Ma°î
)

2428 
i
 = 0; i < 2; i++)

2429 
	`S9xPro˚ssMou£
 (
i
);

2433 i‡(
Sëtögs
.
Su≥rSc›eMa°î
)

2434 
	`Pro˚ssSu≥rSc›e
 ();

2436 i‡(
Mem‹y
.
FûlRAM
 [0x4200] & 1)

2438 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 16;

2439 i‡(
Mem‹y
.
FûlRAM
 [0x4201] & 0x80)

2441 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 16;

2442 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 0;

2446 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 0;

2447 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 16;

2449 
öd
 = 
Sëtögs
.
Sw≠Joy∑ds
 ? 1 : 0;

2451 
Mem‹y
.
FûlRAM
 [0x4218] = (
uöt8
Ë
IPPU
.
Joy∑ds
 [
öd
];

2452 
Mem‹y
.
FûlRAM
 [0x4219] = (
uöt8
Ë(
IPPU
.
Joy∑ds
 [
öd
] >> 8);

2453 
Mem‹y
.
FûlRAM
 [0x421a] = (
uöt8
Ë
IPPU
.
Joy∑ds
 [
öd
 ^ 1];

2454 
Mem‹y
.
FûlRAM
 [0x421b] = (
uöt8
Ë(
IPPU
.
Joy∑ds
 [
öd
 ^ 1] >> 8);

2455 i‡(
Mem‹y
.
FûlRAM
 [0x4201] & 0x80)

2457 
Mem‹y
.
FûlRAM
 [0x421c] = (
uöt8
Ë
IPPU
.
Joy∑ds
 [
öd
];

2458 
Mem‹y
.
FûlRAM
 [0x421d] = (
uöt8
Ë(
IPPU
.
Joy∑ds
 [
öd
] >> 8);

2459 
Mem‹y
.
FûlRAM
 [0x421e] = (
uöt8
Ë
IPPU
.
Joy∑ds
 [2];

2460 
Mem‹y
.
FûlRAM
 [0x421f] = (
uöt8
Ë(
IPPU
.
Joy∑ds
 [2] >> 8);

2464 
Mem‹y
.
FûlRAM
 [0x421c] = (
uöt8
Ë
IPPU
.
Joy∑ds
 [3];

2465 
Mem‹y
.
FûlRAM
 [0x421d] = (
uöt8
Ë(
IPPU
.
Joy∑ds
 [3] >> 8);

2466 
Mem‹y
.
FûlRAM
 [0x421e] = (
uöt8
Ë
IPPU
.
Joy∑ds
 [4];

2467 
Mem‹y
.
FûlRAM
 [0x421f] = (
uöt8
Ë(
IPPU
.
Joy∑ds
 [4] >> 8);

2470 
	}
}

2472 #i‚de‡
ZSNES_FX


2473 
	$S9xSu≥rFXExec
 ()

2476 i‡(
Sëtögs
.
Su≥rFX
)

2478 i‡((
Mem‹y
.
FûlRAM
 [0x3000 + 
GSU_SFR
] & 
FLG_G
) &&

2479 (
Mem‹y
.
FûlRAM
 [0x3000 + 
GSU_SCMR
] & 0x18) == 0x18)

2481 i‡(!
Sëtögs
.
WöãrGﬁd
)

2482 
	`FxEmuœã
 (~0);

2484 
	`FxEmuœã
 ((
Mem‹y
.
FûlRAM
 [0x3000 + 
GSU_CLSR
] & 1) ? 700 : 350);

2485 
GSUSètus
 = 
Mem‹y
.
FûlRAM
 [0x3000 + 
GSU_SFR
] |

2486 (
Mem‹y
.
FûlRAM
 [0x3000 + 
GSU_SFR
 + 1] << 8);

2487 i‡((
GSUSètus
 & (
FLG_G
 | 
FLG_IRQ
)) == FLG_IRQ)

2490 
	`S9xSëIRQ
 (
GSU_IRQ_SOURCE
);

2495 
uöt32
 
tmp
 = (
Mem‹y
.
FûlRAM
[0x3034] << 16Ë+ *(
uöt16
 *) &Memory.FillRAM [0x301e];

2498 i‡(
tmp
 == 0x018428)

2500 *(
uöt16
 *Ë&
SRAM
 [0x0064] = 0xbc00;

2501 *(
uöt16
 *Ë&
SRAM
 [0x002c] = 0x8000;

2504 i‡(
tmp
 == -1)

2506 
Mem‹y
.
FûlRAM
 [0x3030] & 0x20)

2508 
i
;

2509 
öt32
 
vEº‹
;

2510 
uöt8
 
avReg
[0x40];

2511 
tmp
[128];

2512 
uöt8
 
vPùe
;

2513 
uöt8
 
vCﬁr
;

2514 
uöt8
 
vP‹
;

2516 
	`FxPùeSåög
 (
tmp
);

2518 if(
	`°æí
(
tmp
Ë< 32Ë{ 
	`mem£t
(&tmp[strlen(tmp)],' ',32-strlen(tmp));Åmp[32] = 0; }

2521 
vCﬁr
 = 
	`FxGëCﬁ‹Regi°î
();

2522 
vP‹
 = 
	`FxGëPlŸO±i⁄Regi°î
();

2523 
	`mem˝y
(
avReg
,
Su≥rFX
.
pvRegi°îs
,0x40);

2526 
	`¥ötf
(
tmp
);

2529 
vPùe
 = 
	`FxPùe
();

2530 
vEº‹
 = 
	`FxEmuœã
(1);

2533 
i
=0; i<16; i++)

2535 
uöt32
 
a
 = 0;

2536 
uöt32
 
r1
 = ((uöt32)
avReg
[
i
*2]) | (((uint32)avReg[(i*2)+1])<<8);

2537 
uöt32
 
r2
 = (uöt32)(
Su≥rFX
.
pvRegi°îs
[
i
*2]) | (((uint32)SuperFX.pvRegisters[(i*2)+1])<<8);

2538 if(
i
==15)

2539 
a
 = 
	`OPCODE_BYTES
(
vPùe
);

2540 if(((
r1
+
a
)&0xffffË!
r2
)

2541 
	`¥ötf
("Ñ%d=$%04x",
i
,
r2
);

2545 
uöt32
 
r1
 = ((uöt32)
avReg
[0x30]) | (((uint32)avReg[0x31])<<8);

2546 
uöt32
 
r2
 = (uöt32)(
Su≥rFX
.
pvRegi°îs
[0x30]) | (((uint32)SuperFX.pvRegisters[0x31])<<8);

2547 if((
r1
&(1<<1)Ë!(
r2
&(1<<1)))

2548 
	`¥ötf
(" Z=%d",(
uöt32
)(!!(
r2
&(1<<1))));

2549 if((
r1
&(1<<2)Ë!(
r2
&(1<<2)))

2550 
	`¥ötf
(" CY=%d",(
uöt32
)(!!(
r2
&(1<<2))));

2551 if((
r1
&(1<<3)Ë!(
r2
&(1<<3)))

2552 
	`¥ötf
(" S=%d",(
uöt32
)(!!(
r2
&(1<<3))));

2553 if((
r1
&(1<<4)Ë!(
r2
&(1<<4)))

2554 
	`¥ötf
(" OV=%d",(
uöt32
)(!!(
r2
&(1<<4))));

2555 if((
r1
&(1<<5)Ë!(
r2
&(1<<5)))

2556 
	`¥ötf
(" G=%d",(
uöt32
)(!!(
r2
&(1<<5))));

2557 if((
r1
&(1<<6)Ë!(
r2
&(1<<6)))

2558 
	`¥ötf
(" R=%d",(
uöt32
)(!!(
r2
&(1<<6))));

2559 if((
r1
&(1<<8)Ë!(
r2
&(1<<8)))

2560 
	`¥ötf
(" ALT1=%d",(
uöt32
)(!!(
r2
&(1<<8))));

2561 if((
r1
&(1<<9)Ë!(
r2
&(1<<9)))

2562 
	`¥ötf
(" ALT2=%d",(
uöt32
)(!!(
r2
&(1<<9))));

2563 if((
r1
&(1<<10)Ë!(
r2
&(1<<10)))

2564 
	`¥ötf
(" IL=%d",(
uöt32
)(!!(
r2
&(1<<10))));

2565 if((
r1
&(1<<11)Ë!(
r2
&(1<<11)))

2566 
	`¥ötf
(" IH=%d",(
uöt32
)(!!(
r2
&(1<<11))));

2567 if((
r1
&(1<<12)Ë!(
r2
&(1<<12)))

2568 
	`¥ötf
(" B=%d",(
uöt32
)(!!(
r2
&(1<<12))));

2569 if((
r1
&(1<<15)Ë!(
r2
&(1<<15)))

2570 
	`¥ötf
(" IRQ=%d",(
uöt32
)(!!(
r2
&(1<<15))));

2574 
uöt32
 
r1
 = ((uöt32)
avReg
[0x34]);

2575 
uöt32
 
r2
 = (uöt32)(
Su≥rFX
.
pvRegi°îs
[0x34]);

2576 if(
r1
 !
r2
)

2577 
	`¥ötf
(" PBR=$%02x",
r2
);

2581 
uöt32
 
r1
 = ((uöt32)
avReg
[0x36]);

2582 
uöt32
 
r2
 = (uöt32)(
Su≥rFX
.
pvRegi°îs
[0x36]);

2583 if(
r1
 !
r2
)

2584 
	`¥ötf
(" ROMBR=$%02x",
r2
);

2588 
uöt32
 
r1
 = ((uöt32)
avReg
[0x3c]);

2589 
uöt32
 
r2
 = (uöt32)(
Su≥rFX
.
pvRegi°îs
[0x3c]);

2590 if(
r1
 !
r2
)

2591 
	`¥ötf
(" RAMBR=$%02x",
r2
);

2595 
uöt32
 
r1
 = ((uöt32)
avReg
[0x3e]) | (((uint32)avReg[0x3f])<<8);

2596 
uöt32
 
r2
 = (uöt32)(
Su≥rFX
.
pvRegi°îs
[0x3e]) | (((uint32)SuperFX.pvRegisters[0x3f])<<8);

2597 if(
r1
 !
r2
)

2598 
	`¥ötf
(" CBR=$%04x",
r2
);

2602 if(
vCﬁr
 !
	`FxGëCﬁ‹Regi°î
())

2603 
	`¥ötf
(" COLR=$%02x",
	`FxGëCﬁ‹Regi°î
());

2607 if(
vP‹
 !
	`FxGëPlŸO±i⁄Regi°î
())

2608 
	`¥ötf
(" POR=$%02x",
	`FxGëPlŸO±i⁄Regi°î
());

2610 
	`¥ötf
 ("\n");

2612 
	`S9xExô
 ();

2616 
uöt32
 
t
 = (
Mem‹y
.
FûlRAM
 [0x3034] << 16) +

2617 (
Mem‹y
.
FûlRAM
 [0x301f] << 8) +

2618 (
Mem‹y
.
FûlRAM
 [0x301e] << 0);

2620 
	`¥ötf
 ("%06x: %d\n", 
t
, 
	`FxEmuœã
 (2000000));

2624 i‡(!(
CPU
.
Fœgs
 & 
TRACE_FLAG
))

2626 
z
 = 1;

2627 i‡(
z
 == 0)

2629 
FILE
 *
åa˚
;

2630 
CPU
.
Fœgs
 |
TRACE_FLAG
;

2631 
åa˚
 = 
	`f›í
 ("trace.log", "wb");

2634 
z
--;

2637 
Mem‹y
.
FûlRAM
 [0x3030] &= ~0x20;

2638 i‡(
Mem‹y
.
FûlRAM
 [0x3031] & 0x80)

2640 
	`S9xSëIRQ
 (
GSU_IRQ_SOURCE
);

2643 
	}
}

	@resource.h

5 
	#IDS_APP_TITLE
 1

	)

6 
	#IDS_HELLO
 2

	)

7 
	#IDC_POCKETSNES
 3

	)

8 
	#IDS_HELLO2
 4

	)

9 
	#IDS_PAUSED
 5

	)

10 
	#IDS_LINK
 6

	)

11 
	#IDS_CREDITS1
 7

	)

12 
	#IDS_CREDITS2
 8

	)

13 
	#IDS_CREDITS0
 9

	)

14 
	#IDI_POCKETSNES
 101

	)

15 
	#IDM_MENU
 102

	)

16 
	#IDS_HELP
 104

	)

17 
	#IDD_OPTIONS
 104

	)

18 
	#IDB_KEYPAD
 105

	)

19 
	#IDD_SKINS
 106

	)

20 
	#IDD_KEYS
 107

	)

21 
	#IDD_KEYS1
 108

	)

22 
	#IDD_CREDITS
 108

	)

23 
	#IDD_KEYS_NEW
 109

	)

24 
	#IDD_DISPLAY
 109

	)

25 
	#IDD_SOUND
 110

	)

26 
	#IDD_SETTINGS
 111

	)

27 
	#IDD_SYSTEM
 111

	)

28 
	#IDB_POCKETSNES
 114

	)

29 
	#IDB_6BUTTON
 115

	)

30 
	#IDB_4BUTTON
 118

	)

31 
	#IDI_LEFT_ARROW
 119

	)

32 
	#IDI_RIGHT_ARROW
 120

	)

33 
	#IDS_COMMAND1
 301

	)

34 
	#IDC_STATIC_TITLE
 444

	)

35 
	#IDC_STATIC_TITLE2
 445

	)

36 
	#IDC_TRANSPARENCY
 1001

	)

37 
	#IDC_SOUND
 1002

	)

38 
	#IDC_ECHO
 1003

	)

39 
	#IDC_SYNC
 1004

	)

40 
	#IDC_SYNCSOUND
 1004

	)

41 
	#IDC_CUSTOM1
 1005

	)

42 
	#IDC_REVERSE
 1005

	)

43 
	#IDC_REVERSESTEREO
 1005

	)

44 
	#IDC_STEREO
 1006

	)

45 
	#IDC_BUTTON_PREVIOUS
 1007

	)

46 
	#IDC_INTERPOLATE
 1007

	)

47 
	#IDC_INTERPOLATESOUND
 1007

	)

48 
	#IDC_BUTTON_SET
 1008

	)

49 
	#IDC_ALTDECODE
 1008

	)

50 
	#IDC_BUTTON_NEXT
 1009

	)

51 
	#IDC_ENVELOPEHEIGHT
 1009

	)

52 
	#IDC_SMOOTHSTRETCH
 1010

	)

53 
	#IDC_FIXFREQUENCY
 1010

	)

54 
	#IDC_LANDSCAPE
 1011

	)

55 
	#IDC_BUTTON_UP
 1028

	)

56 
	#IDC_BUTTON_DOWN
 1029

	)

57 
	#IDC_BUTTON_LEFT
 1030

	)

58 
	#IDC_BUTTON_RIGHT
 1031

	)

59 
	#IDC_BUTTON_B
 1032

	)

60 
	#IDC_BUTTON_A
 1033

	)

61 
	#IDC_BUTTON_Y
 1034

	)

62 
	#IDC_BUTTON_X
 1035

	)

63 
	#IDC_BUTTON_START
 1036

	)

64 
	#IDC_BUTTON_SELECT
 1037

	)

65 
	#IDC_BUTTON_L
 1038

	)

66 
	#IDC_BUTTON_R
 1039

	)

67 
	#IDC_STATIC_UP
 1040

	)

68 
	#IDC_STATIC_LEFT
 1041

	)

69 
	#IDC_STATIC_B
 1042

	)

70 
	#IDC_STATIC_Y
 1043

	)

71 
	#IDC_STATIC_START
 1044

	)

72 
	#IDC_STATIC_L
 1045

	)

73 
	#IDC_STATIC_DOWN
 1046

	)

74 
	#IDC_STATIC_RIGHT
 1047

	)

75 
	#IDC_STATIC_A
 1048

	)

76 
	#IDC_STATIC_X
 1049

	)

77 
	#IDC_STATIC_SELECT
 1050

	)

78 
	#IDC_STATIC_R
 1051

	)

79 
	#IDC_STATIC_INFO
 1052

	)

80 
	#IDC_FRAMESKIP
 1053

	)

81 
	#IDC_SPIN_FRAMESKIP
 1055

	)

82 
	#IDC_CREDITS
 1056

	)

83 
	#IDC_SIXTEENBIT
 1059

	)

84 
	#IDC_EIGHTBIT
 1060

	)

85 
	#IDC_SOUNDQUALITY
 1061

	)

86 
	#IDC_LEFT
 1063

	)

87 
	#IDC_AUTO
 1065

	)

88 
	#IDC_COMPAT
 1066

	)

89 
	#IDC_CYCLES
 1067

	)

90 
	#IDC_CYCLES_SPIN
 1068

	)

91 
	#IDC_PORTRAIT
 1069

	)

92 
	#IDC_LANDLEFT
 1070

	)

93 
	#IDC_LANDLEFTSTRETCH
 1071

	)

94 
	#IDC_LANDRIGHTSTRETCH
 1072

	)

95 
	#IDC_LANDRIGHT
 1073

	)

96 
	#IDC_SLIDER1
 1074

	)

97 
	#IDC_FRAMESKIP_SLIDER
 1074

	)

98 
	#IDC_SKIP
 1075

	)

99 
	#IDC_EDIT1
 1076

	)

100 
	#IDC_BROWSE
 1077

	)

101 
	#IDC_STARTLOADSTATE
 1078

	)

102 
	#IDC_RESUMEAFTERLOADSTATE
 1078

	)

103 
	#IDC_STARTSAVESTATE
 1079

	)

104 
	#IDC_RESUMEAFTERSAVESTATE
 1079

	)

105 
	#IDC_DISPLAYFRAMERATE
 1080

	)

106 
	#IDC_SOUNDQUALITYTEXTBOX
 1081

	)

107 
	#IDC_USEFOLDER
 1081

	)

108 
	#IDM_MAIN_COMMAND1
 40001

	)

109 
	#IDM_HELP_ABOUT
 40003

	)

110 
	#IDM_FILE_LOAD
 40004

	)

111 
	#IDM_TOOLS_LOAD
 40004

	)

112 
	#ID_HELP
 40005

	)

113 
	#IDS_CAP_HELP
 40007

	)

114 
	#IDM_TOOLS_EXIT
 40008

	)

115 
	#IDS_CAP_OPTIONS
 40008

	)

116 
	#IDM_TOOLS_OPTIONS
 40009

	)

117 
	#IDM_OPTIONS_SETTINGS
 40009

	)

118 
	#IDM_TOOLS_SKINS
 40010

	)

119 
	#ID_OPTIONS
 40011

	)

120 
	#IDM_OPTIONS_KEYS
 40013

	)

121 
	#IDM_TOOLS_CREDITS
 40014

	)

122 
	#IDM_TOOLS_LOADSTATE
 40015

	)

123 
	#IDM_TOOLS_SAVESTATE
 40016

	)

124 
	#IDM_OPTIONS_DISPLAY
 40017

	)

125 
	#IDM_OPTIONS_SOUND
 40018

	)

126 
	#IDM_BLANK
 40020

	)

127 
	#IDM_OPTIONS_RESET
 40022

	)

128 
	#IDM_TOOLS_RESET
 40022

	)

129 
	#IDM_LOAD1
 40023

	)

130 
	#IDM_TOOLS_LOAD1
 40023

	)

131 
	#IDM_LOAD2
 40024

	)

132 
	#IDM_TOOLS_LOAD2
 40024

	)

133 
	#IDM_LOAD3
 40025

	)

134 
	#IDM_TOOLS_LOAD3
 40025

	)

135 
	#IDM_LOAD4
 40026

	)

136 
	#IDM_TOOLS_LOAD4
 40026

	)

137 
	#IDM_LOAD5
 40027

	)

138 
	#IDM_TOOLS_LOAD5
 40027

	)

139 
	#IDM_HELP
 40029

	)

140 
	#IDM_SAVE1
 40031

	)

141 
	#IDM_TOOLS_SAVE1
 40031

	)

142 
	#IDM_SAVE2
 40032

	)

143 
	#IDM_TOOLS_SAVE2
 40032

	)

144 
	#IDM_SAVE3
 40033

	)

145 
	#IDM_TOOLS_SAVE3
 40033

	)

146 
	#IDM_SAVE4
 40034

	)

147 
	#IDM_LOAD6
 40035

	)

148 
	#IDM_TOOLS_LOAD6
 40035

	)

149 
	#IDM_LOAD7
 40036

	)

150 
	#IDM_TOOLS_LOAD7
 40036

	)

151 
	#IDM_LOAD8
 40037

	)

152 
	#IDM_SAVE6
 40038

	)

153 
	#IDM_TOOLS_SAVE6
 40038

	)

154 
	#IDM_SAVE7
 40039

	)

155 
	#IDM_TOOLS_SAVE7
 40039

	)

156 
	#IDM_SAVE8
 40040

	)

157 
	#IDM_TOOLS_SAVE8
 40040

	)

158 
	#IDM_SAVE9
 40041

	)

159 
	#IDM_TOOLS_SAVE9
 40041

	)

160 
	#IDM_TOOLS_SAVE4
 40042

	)

161 
	#IDM_TOOLS_SAVE5
 40043

	)

162 
	#IDM_TOOLS_RECENT1
 40044

	)

163 
	#IDM_TOOLS_LOAD8
 40045

	)

164 
	#IDM_TOOLS_LOAD9
 40046

	)

165 
	#ID_OPTIONS_SYSTEM
 40049

	)

166 
	#IDM_OPTIONS_SYSTEM
 40049

	)

167 
	#IDM_CHEAT
 40050

	)

168 
	#IDS_CAP_CHEAT
 40052

	)

169 
	#IDM_NETPLAY
 40053

	)

170 
	#IDS_CAP_NETPLAY
 40055

	)

174 #ifde‡
APSTUDIO_INVOKED


175 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


176 
	#_APS_NEXT_RESOURCE_VALUE
 143

	)

177 
	#_APS_NEXT_COMMAND_VALUE
 40056

	)

178 
	#_APS_NEXT_CONTROL_VALUE
 1082

	)

179 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@sa1.cpp

41 
	~"¢es9x.h
"

42 
	~"µu.h
"

43 
	~"˝uexec.h
"

45 
	~"ß1.h
"

47 
S9xSA1Ch¨C⁄v2
 ();

48 
S9xSA1DMA
 ();

49 
S9xSA1RódV¨übÀLígthD©a
 (
boﬁ8
 
öc
, boﬁ8 
no_shi·
);

51 
	$S9xSA1Inô
 ()

53 
SA1
.
NMIA˘ive
 = 
FALSE
;

54 
SA1
.
IRQA˘ive
 = 
FALSE
;

55 
SA1
.
WaôögF‹I¡îru±
 = 
FALSE
;

56 
SA1
.
Waôög
 = 
FALSE
;

57 
SA1
.
Fœgs
 = 0;

58 
SA1
.
Executög
 = 
FALSE
;

59 
	`mem£t
 (&
Mem‹y
.
FûlRAM
 [0x2200], 0, 0x200);

60 
Mem‹y
.
FûlRAM
 [0x2200] = 0x20;

61 
Mem‹y
.
FûlRAM
 [0x2220] = 0x00;

62 
Mem‹y
.
FûlRAM
 [0x2221] = 0x01;

63 
Mem‹y
.
FûlRAM
 [0x2222] = 0x02;

64 
Mem‹y
.
FûlRAM
 [0x2223] = 0x03;

65 
Mem‹y
.
FûlRAM
 [0x2228] = 0xff;

66 
SA1
.
›1
 = 0;

67 
SA1
.
›2
 = 0;

68 
SA1
.
¨ôhmëic_›
 = 0;

69 
SA1
.
sum
 = 0;

70 
SA1
.
ovîÊow
 = 
FALSE
;

71 
	}
}

73 
	$S9xSA1Re£t
 ()

75 
SA1Regi°îs
.
PB
 = 0;

76 
SA1Regi°îs
.
PC
 = 
Mem‹y
.
FûlRAM
 [0x2203] |

77 (
Mem‹y
.
FûlRAM
 [0x2204] << 8);

78 
SA1Regi°îs
.
D
.
W
 = 0;

79 
SA1Regi°îs
.
DB
 = 0;

80 
SA1Regi°îs
.
SH
 = 1;

81 
SA1Regi°îs
.
SL
 = 0xFF;

82 
SA1Regi°îs
.
XH
 = 0;

83 
SA1Regi°îs
.
YH
 = 0;

84 
SA1Regi°îs
.
P
.
W
 = 0;

86 
SA1
.
Shi·edPB
 = 0;

87 
SA1
.
Shi·edDB
 = 0;

88 
	`SA1SëFœgs
 (
Mem‹yFœg
 | 
IndexFœg
 | 
IRQ
 | 
Emuœti⁄
);

89 
	`SA1CÀ¨Fœgs
 (
DecimÆ
);

91 
SA1
.
WaôögF‹I¡îru±
 = 
FALSE
;

92 
SA1
.
PC
 = 
NULL
;

93 
SA1
.
PCBa£
 = 
NULL
;

94 
	`S9xSA1SëPCBa£
 (
SA1Regi°îs
.
PC
);

97 
	`S9xSA1U≈ackSètus
();

99 
SA1
.
Executög
 = 
TRUE
;

100 
SA1
.
BWRAM
 = 
Mem‹y
.
SRAM
;

101 
Mem‹y
.
FûlRAM
 [0x2225] = 0;

102 
	}
}

104 
	$S9xSA1SëBWRAMMemM≠
 (
uöt8
 
vÆ
)

106 
c
;

108 i‡(
vÆ
 & 0x80)

110 
c
 = 0; c < 0x400; c += 16)

112 
SA1
.
M≠
 [
c
 + 6] = SA1.M≠ [¯+ 0x806] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM_BITMAP2
;

113 
SA1
.
M≠
 [
c
 + 7] = SA1.M≠ [¯+ 0x807] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM_BITMAP2
;

114 
SA1
.
WrôeM≠
 [
c
 + 6] = SA1.WrôeM≠ [¯+ 0x806] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM_BITMAP2
;

115 
SA1
.
WrôeM≠
 [
c
 + 7] = SA1.WrôeM≠ [¯+ 0x807] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM_BITMAP2
;

117 
SA1
.
BWRAM
 = 
Mem‹y
.
SRAM
 + (
vÆ
 & 0x7f) * 0x2000 / 4;

121 
c
 = 0; c < 0x400; c += 16)

123 
SA1
.
M≠
 [
c
 + 6] = SA1.M≠ [¯+ 0x806] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM
;

124 
SA1
.
M≠
 [
c
 + 7] = SA1.M≠ [¯+ 0x807] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM
;

125 
SA1
.
WrôeM≠
 [
c
 + 6] = SA1.WrôeM≠ [¯+ 0x806] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM
;

126 
SA1
.
WrôeM≠
 [
c
 + 7] = SA1.WrôeM≠ [¯+ 0x807] = (
uöt8
 *Ë
CMem‹y
::
MAP_BWRAM
;

128 
SA1
.
BWRAM
 = 
Mem‹y
.
SRAM
 + (
vÆ
 & 7) * 0x2000;

130 
	}
}

132 
	$S9xFixSA1A·îS«pshŸLﬂd
 ()

134 
SA1
.
Shi·edPB
 = (
uöt32
Ë
SA1Regi°îs
.
PB
 << 16;

135 
SA1
.
Shi·edDB
 = (
uöt32
Ë
SA1Regi°îs
.
DB
 << 16;

137 
	`S9xSA1SëPCBa£
 (
SA1
.
Shi·edPB
 + 
SA1Regi°îs
.
PC
);

138 
	`S9xSA1U≈ackSètus
 ();

140 
SA1
.
VútuÆBôm≠F‹m©
 = (
Mem‹y
.
FûlRAM
 [0x223f] & 0x80) ? 2 : 4;

141 
Mem‹y
.
BWRAM
 = Mem‹y.
SRAM
 + (Mem‹y.
FûlRAM
 [0x2224] & 7) * 0x2000;

142 
	`S9xSA1SëBWRAMMemM≠
 (
Mem‹y
.
FûlRAM
 [0x2225]);

144 
SA1
.
Waôög
 = (
Mem‹y
.
FûlRAM
 [0x2200] & 0x60) != 0;

145 
SA1
.
Executög
 = !SA1.
Waôög
;

146 
	}
}

148 
uöt8
 
	$S9xSA1GëByã
 (
uöt32
 
addªss
)

150 
uöt8
 *
GëAddªss
 = 
SA1
.
M≠
 [(
addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

151 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

152  (*(
GëAddªss
 + (
addªss
 & 0xffff)));

154 (Ë
GëAddªss
)

156 
CMem‹y
::
MAP_PPU
:

157  (
	`S9xGëSA1
 (
addªss
 & 0xffff));

158 
CMem‹y
::
MAP_LOROM_SRAM
:

159 
CMem‹y
::
MAP_SA1RAM
:

160  (*(
Mem‹y
.
SRAM
 + (
addªss
 & 0xffff)));

161 
CMem‹y
::
MAP_BWRAM
:

162  (*(
SA1
.
BWRAM
 + ((
addªss
 & 0x7fff) - 0x6000)));

163 
CMem‹y
::
MAP_BWRAM_BITMAP
:

164 
addªss
 -= 0x600000;

165 i‡(
SA1
.
VútuÆBôm≠F‹m©
 == 2)

166  ((
Mem‹y
.
SRAM
 [(
addªss
 >> 2) & 0xffff] >> ((address & 3) << 1)) & 3);

168  ((
Mem‹y
.
SRAM
 [(
addªss
 >> 1) & 0xffff] >> ((address & 1) << 2)) & 15);

169 
CMem‹y
::
MAP_BWRAM_BITMAP2
:

170 
addªss
 = (address & 0xffff) - 0x6000;

171 i‡(
SA1
.
VútuÆBôm≠F‹m©
 == 2)

172  ((
SA1
.
BWRAM
 [(
addªss
 >> 2) & 0xffff] >> ((address & 3) << 1)) & 3);

174  ((
SA1
.
BWRAM
 [(
addªss
 >> 1) & 0xffff] >> ((address & 1) << 2)) & 15);

176 
CMem‹y
::
MAP_DEBUG
:

178 #ifde‡
DEBUGGER


184 
	}
}

186 
uöt16
 
	$S9xSA1GëW‹d
 (
uöt32
 
addªss
)

188  (
	`S9xSA1GëByã
 (
addªss
) | (S9xSA1GetByte (address + 1) << 8));

189 
	}
}

191 
	$S9xSA1SëByã
 (
uöt8
 
byã
, 
uöt32
 
addªss
)

193 
uöt8
 *
Sëaddªss
 = 
SA1
.
WrôeM≠
 [(
addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

195 i‡(
Sëaddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

197 *(
Sëaddªss
 + (
addªss
 & 0xffff)Ë
byã
;

201 (Ë
Sëaddªss
)

203 
CMem‹y
::
MAP_PPU
:

204 
	`S9xSëSA1
 (
byã
, 
addªss
 & 0xffff);

206 
CMem‹y
::
MAP_SA1RAM
:

207 
CMem‹y
::
MAP_LOROM_SRAM
:

208 *(
Mem‹y
.
SRAM
 + (
addªss
 & 0xffff)Ë
byã
;

210 
CMem‹y
::
MAP_BWRAM
:

211 *(
SA1
.
BWRAM
 + ((
addªss
 & 0x7fffË- 0x6000)Ë
byã
;

213 
CMem‹y
::
MAP_BWRAM_BITMAP
:

214 
addªss
 -= 0x600000;

215 i‡(
SA1
.
VútuÆBôm≠F‹m©
 == 2)

217 
uöt8
 *
±r
 = &
Mem‹y
.
SRAM
 [(
addªss
 >> 2) & 0xffff];

218 *
±r
 &~(3 << ((
addªss
 & 3) << 1));

219 *
±r
 |(
byã
 & 3Ë<< ((
addªss
 & 3) << 1);

223 
uöt8
 *
±r
 = &
Mem‹y
.
SRAM
 [(
addªss
 >> 1) & 0xffff];

224 *
±r
 &~(15 << ((
addªss
 & 1) << 2));

225 *
±r
 |(
byã
 & 15Ë<< ((
addªss
 & 1) << 2);

228 
CMem‹y
::
MAP_BWRAM_BITMAP2
:

229 
addªss
 = (address & 0xffff) - 0x6000;

230 i‡(
SA1
.
VútuÆBôm≠F‹m©
 == 2)

232 
uöt8
 *
±r
 = &
SA1
.
BWRAM
 [(
addªss
 >> 2) & 0xffff];

233 *
±r
 &~(3 << ((
addªss
 & 3) << 1));

234 *
±r
 |(
byã
 & 3Ë<< ((
addªss
 & 3) << 1);

238 
uöt8
 *
±r
 = &
SA1
.
BWRAM
 [(
addªss
 >> 1) & 0xffff];

239 *
±r
 &~(15 << ((
addªss
 & 1) << 2));

240 *
±r
 |(
byã
 & 15Ë<< ((
addªss
 & 1) << 2);

245 
	}
}

247 
	$S9xSA1SëW‹d
 (
uöt16
 
W‹d
, 
uöt32
 
addªss
)

249 
	`S9xSA1SëByã
 ((
uöt8
Ë
W‹d
, 
addªss
);

250 
	`S9xSA1SëByã
 ((
uöt8
Ë(
W‹d
 >> 8), 
addªss
 + 1);

251 
	}
}

253 
	$S9xSA1SëPCBa£
 (
uöt32
 
addªss
)

255 
uöt8
 *
GëAddªss
 = 
SA1
.
M≠
 [(
addªss
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

256 i‡(
GëAddªss
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

258 
SA1
.
PCBa£
 = 
GëAddªss
;

259 
SA1
.
PC
 = 
GëAddªss
 + (
addªss
 & 0xffff);

263 (Ë
GëAddªss
)

265 
CMem‹y
::
MAP_PPU
:

266 
SA1
.
PCBa£
 = 
Mem‹y
.
FûlRAM
 - 0x2000;

267 
SA1
.
PC
 = SA1.
PCBa£
 + (
addªss
 & 0xffff);

270 
CMem‹y
::
MAP_CPU
:

271 
SA1
.
PCBa£
 = 
Mem‹y
.
FûlRAM
 - 0x4000;

272 
SA1
.
PC
 = SA1.
PCBa£
 + (
addªss
 & 0xffff);

275 
CMem‹y
::
MAP_DSP
:

276 
SA1
.
PCBa£
 = 
Mem‹y
.
FûlRAM
 - 0x6000;

277 
SA1
.
PC
 = SA1.
PCBa£
 + (
addªss
 & 0xffff);

280 
CMem‹y
::
MAP_SA1RAM
:

281 
CMem‹y
::
MAP_LOROM_SRAM
:

282 
SA1
.
PCBa£
 = 
Mem‹y
.
SRAM
;

283 
SA1
.
PC
 = SA1.
PCBa£
 + (
addªss
 & 0xffff);

286 
CMem‹y
::
MAP_BWRAM
:

287 
SA1
.
PCBa£
 = SA1.
BWRAM
 - 0x6000;

288 
SA1
.
PC
 = SA1.
PCBa£
 + (
addªss
 & 0xffff);

290 
CMem‹y
::
MAP_HIROM_SRAM
:

291 
SA1
.
PCBa£
 = 
Mem‹y
.
SRAM
 - 0x6000;

292 
SA1
.
PC
 = SA1.
PCBa£
 + (
addªss
 & 0xffff);

295 
CMem‹y
::
MAP_DEBUG
:

296 #ifde‡
DEBUGGER


297 
	`¥ötf
 ("SBP %06x\n", 
addªss
);

301 
CMem‹y
::
MAP_NONE
:

302 
SA1
.
PCBa£
 = 
Mem‹y
.
RAM
;

303 
SA1
.
PC
 = 
Mem‹y
.
RAM
 + (
addªss
 & 0xffff);

306 
	}
}

308 
	$S9xSA1ExecuãDurögSÀï
 ()

311 i‡(
SA1
.
Executög
)

313 
CPU
.
Cy˛es
 < CPU.
NextEvít
)

315 
	`S9xSA1MaöLo›
 ();

316 
CPU
.
Cy˛es
 +
TWO_CYCLES
 * 2;

320 
	}
}

322 
	$S9xSëSA1MemM≠
 (
uöt32
 
which1
, 
uöt8
 
m≠
)

324 
c
;

325 
°¨t
 = 
which1
 * 0x100 + 0xc00;

326 
°¨t2
 = 
which1
 * 0x200;

328 i‡(
which1
 >= 2)

329 
°¨t2
 += 0x400;

331 
c
 = 0; c < 0x100; c += 16)

333 
uöt8
 *
block
 = &
Mem‹y
.
ROM
 [(
m≠
 & 7Ë* 0x100000 + (
c
 << 12)];

334 
i
;

336 
i
 = 
c
; i < c + 16; i++)

337 
Mem‹y
.
M≠
 [
°¨t
 + 
i
] = 
SA1
.M≠ [°¨à+ i] = 
block
;

340 
c
 = 0; c < 0x200; c += 16)

342 
uöt8
 *
block
 = &
Mem‹y
.
ROM
 [(
m≠
 & 7Ë* 0x100000 + (
c
 << 11) - 0x8000];

343 
i
;

345 
i
 = 
c
 + 8; i < c + 16; i++)

346 
Mem‹y
.
M≠
 [
°¨t2
 + 
i
] = 
SA1
.M≠ [°¨t2 + i] = 
block
;

348 
	}
}

350 
uöt8
 
	$S9xGëSA1
 (
uöt32
 
addªss
)

353 
addªss
)

356  ((
uöt8
Ë((
Mem‹y
.
FûlRAM
 [0x2209] & 0x5f) |

357 (
CPU
.
IRQA˘ive
 & (
SA1_IRQ_SOURCE
 | 
SA1_DMA_IRQ_SOURCE
))));

359  ((
Mem‹y
.
FûlRAM
 [0x2200] & 0xf) |

360 (
Mem‹y
.
FûlRAM
 [0x2301] & 0xf0));

362  ((
uöt8
Ë
SA1
.
sum
);

364  ((
uöt8
Ë(
SA1
.
sum
 >> 8));

366  ((
uöt8
Ë(
SA1
.
sum
 >> 16));

368  ((
uöt8
Ë(
SA1
.
sum
 >> 24));

370  ((
uöt8
Ë(
SA1
.
sum
 >> 32));

372  (
Mem‹y
.
FûlRAM
 [0x230c]);

375 
uöt8
 
byã
 = 
Mem‹y
.
FûlRAM
 [0x230d];

377 i‡(
Mem‹y
.
FûlRAM
 [0x2258] & 0x80)

379 
	`S9xSA1RódV¨übÀLígthD©a
 (
TRUE
, 
FALSE
);

381  (
byã
);

384 #i‚de‡
__GP32__


385 
	`¥ötf
 ("R: %04x\n", 
addªss
);

389  (
Mem‹y
.
FûlRAM
 [
addªss
]);

390 
	}
}

392 
	$S9xSëSA1
 (
uöt8
 
byã
, 
uöt32
 
addªss
)

395 
addªss
)

398 
SA1
.
Waôög
 = (
byã
 & 0x60) != 0;

401 i‡(!(
byã
 & 0x20Ë&& (
Mem‹y
.
FûlRAM
 [0x2200] & 0x20))

403 
	`S9xSA1Re£t
 ();

405 i‡(
byã
 & 0x80)

407 
Mem‹y
.
FûlRAM
 [0x2301] |= 0x80;

408 i‡(
Mem‹y
.
FûlRAM
 [0x220a] & 0x80)

410 
SA1
.
Fœgs
 |
IRQ_PENDING_FLAG
;

411 
SA1
.
IRQA˘ive
 |
SNES_IRQ_SOURCE
;

412 
SA1
.
Executög
 = !SA1.
Waôög
;

415 i‡(
byã
 & 0x10)

417 
Mem‹y
.
FûlRAM
 [0x2301] |= 0x10;

418 #ifde‡
DEBUGGER


419 
	`¥ötf
 ("###SA1 NMI\n");

421 i‡(
Mem‹y
.
FûlRAM
 [0x220a] & 0x10)

428 i‡(((
byã
 ^ 
Mem‹y
.
FûlRAM
 [0x2201]) & 0x80) &&

429 (
Mem‹y
.
FûlRAM
 [0x2300] & 
byã
 & 0x80))

431 
	`S9xSëIRQ
 (
SA1_IRQ_SOURCE
);

433 i‡(((
byã
 ^ 
Mem‹y
.
FûlRAM
 [0x2201]) & 0x20) &&

434 (
Mem‹y
.
FûlRAM
 [0x2300] & 
byã
 & 0x20))

436 
	`S9xSëIRQ
 (
SA1_DMA_IRQ_SOURCE
);

440 i‡(
byã
 & 0x80)

442 
Mem‹y
.
FûlRAM
 [0x2300] &= ~0x80;

443 
	`S9xCÀ¨IRQ
 (
SA1_IRQ_SOURCE
);

445 i‡(
byã
 & 0x20)

447 
Mem‹y
.
FûlRAM
 [0x2300] &= ~0x20;

448 
	`S9xCÀ¨IRQ
 (
SA1_DMA_IRQ_SOURCE
);

473 
Mem‹y
.
FûlRAM
 [0x2209] = 
byã
;

474 i‡(
byã
 & 0x80)

475 
Mem‹y
.
FûlRAM
 [0x2300] |= 0x80;

477 i‡(
byã
 & 
Mem‹y
.
FûlRAM
 [0x2201] & 0x80)

479 
	`S9xSëIRQ
 (
SA1_IRQ_SOURCE
);

483 i‡(((
byã
 ^ 
Mem‹y
.
FûlRAM
 [0x220a]) & 0x80) &&

484 (
Mem‹y
.
FûlRAM
 [0x2301] & 
byã
 & 0x80))

486 
SA1
.
Fœgs
 |
IRQ_PENDING_FLAG
;

487 
SA1
.
IRQA˘ive
 |
SNES_IRQ_SOURCE
;

490 i‡(((
byã
 ^ 
Mem‹y
.
FûlRAM
 [0x220a]) & 0x40) &&

491 (
Mem‹y
.
FûlRAM
 [0x2301] & 
byã
 & 0x40))

493 
SA1
.
Fœgs
 |
IRQ_PENDING_FLAG
;

494 
SA1
.
IRQA˘ive
 |
TIMER_IRQ_SOURCE
;

497 i‡(((
byã
 ^ 
Mem‹y
.
FûlRAM
 [0x220a]) & 0x20) &&

498 (
Mem‹y
.
FûlRAM
 [0x2301] & 
byã
 & 0x20))

500 
SA1
.
Fœgs
 |
IRQ_PENDING_FLAG
;

501 
SA1
.
IRQA˘ive
 |
DMA_IRQ_SOURCE
;

504 i‡(((
byã
 ^ 
Mem‹y
.
FûlRAM
 [0x220a]) & 0x10) &&

505 (
Mem‹y
.
FûlRAM
 [0x2301] & 
byã
 & 0x10))

507 #ifde‡
DEBUGGER


508 
	`¥ötf
 ("###SA1 NMI\n");

513 i‡(
byã
 & 0x80)

515 
SA1
.
IRQA˘ive
 &~
SNES_IRQ_SOURCE
;

516 
Mem‹y
.
FûlRAM
 [0x2301] &= ~0x80;

518 i‡(
byã
 & 0x40)

520 
SA1
.
IRQA˘ive
 &~
TIMER_IRQ_SOURCE
;

521 
Mem‹y
.
FûlRAM
 [0x2301] &= ~0x40;

523 i‡(
byã
 & 0x20)

525 
SA1
.
IRQA˘ive
 &~
DMA_IRQ_SOURCE
;

526 
Mem‹y
.
FûlRAM
 [0x2301] &= ~0x20;

528 i‡(
byã
 & 0x10)

531 
Mem‹y
.
FûlRAM
 [0x2301] &= ~0x10;

533 i‡(!
SA1
.
IRQA˘ive
)

534 
SA1
.
Fœgs
 &~
IRQ_PENDING_FLAG
;

552 
	`¥ötf
 ("Timî %s\n", (
byã
 & 0x80) ? "linear" : "HV");

553 
	`¥ötf
 ("Timî H-IRQ %s\n", (
byã
 & 1) ? "enabled" : "disabled");

554 
	`¥ötf
 ("Timî V-IRQ %s\n", (
byã
 & 2) ? "enabled" : "disabled");

558 
	`¥ötf
 ("TimerÑeset\n");

561 #i‚de‡
__GP32__


562 
	`¥ötf
 ("H-Timî %04x\n", 
byã
 | (
Mem‹y
.
FûlRAM
 [0x2213] << 8));

566 #i‚de‡
__GP32__


567 
	`¥ötf
 ("H-Timî %04x\n", (
byã
 << 8Ë| 
Mem‹y
.
FûlRAM
 [0x2212]);

571 #i‚de‡
__GP32__


572 
	`¥ötf
 ("V-Timî %04x\n", 
byã
 | (
Mem‹y
.
FûlRAM
 [0x2215] << 8));

576 #i‚de‡
__GP32__


577 
	`¥ötf
 ("V-Timî %04x\n", (
byã
 << 8Ë| 
Mem‹y
.
FûlRAM
 [0x2214]);

584 
	`S9xSëSA1MemM≠
 (
addªss
 - 0x2220, 
byã
);

589 
Mem‹y
.
BWRAM
 = Mem‹y.
SRAM
 + (
byã
 & 7) * 0x2000;

593 i‡(
byã
 !
Mem‹y
.
FûlRAM
 [
addªss
])

594 
	`S9xSA1SëBWRAMMemM≠
 (
byã
);

614 
	`¥ötf
 ("SA1 DMA %s\n", (
byã
 & 0x80) ? "enabled" : "disabled");

615 
	`¥ötf
 ("DMAÖri‹ôy %s\n", (
byã
 & 0x40) ? "DMA" : "SA1");

616 
	`¥ötf
 ("DMA %s\n", (
byã
 & 0x20) ? "char conv" : "normal");

617 
	`¥ötf
 ("DMAÅy≥ %s\n", (
byã
 & 0x10) ? "BW-RAM -> I-RAM" : "SA1 -> I-RAM");

618 
	`¥ötf
 ("DMA di°ö©i⁄ %s\n", (
byã
 & 4) ? "BW-RAM" : "I-RAM");

619 
	`¥ötf
 ("DMA sour˚ %s\n", 
DMAsour˚
 [
byã
 & 3]);

623 i‡(
byã
 & 0x80)

624 
SA1
.
ö_ch¨_dma
 = 
FALSE
;

626 
	`¥ötf
 ("CHDEND %s\n", (
byã
 & 0x80) ? "complete" : "incomplete");

627 
	`¥ötf
 ("DMA cﬁou∏modê%d\n", 
byã
 & 3);

628 
	`¥ötf
 ("vútuÆ VRAM width %d\n", (
byã
 >> 2) & 7);

634 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

636 
	`¥ötf
 ("DMA source start %06x\n",

637 
Mem‹y
.
FûlRAM
 [0x2232] | (Memory.FillRAM [0x2233] << 8) |

638 (
Mem‹y
.
FûlRAM
 [0x2234] << 16));

642 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

645 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

646 i‡((
Mem‹y
.
FûlRAM
 [0x2230] & 0xa4) == 0x80)

649 
	`S9xSA1DMA
 ();

652 i‡((
Mem‹y
.
FûlRAM
 [0x2230] & 0xb0) == 0xb0)

654 
Mem‹y
.
FûlRAM
 [0x2300] |= 0x20;

655 i‡(
Mem‹y
.
FûlRAM
 [0x2201] & 0x20)

656 
	`S9xSëIRQ
 (
SA1_DMA_IRQ_SOURCE
);

657 
SA1
.
ö_ch¨_dma
 = 
TRUE
;

661 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

662 i‡((
Mem‹y
.
FûlRAM
 [0x2230] & 0xa4) == 0x84)

665 
	`S9xSA1DMA
 ();

668 
	`¥ötf
 ("DMA destáddress %06x\n",

669 
Mem‹y
.
FûlRAM
 [0x2235] | (Memory.FillRAM [0x2236] << 8) |

670 (
Mem‹y
.
FûlRAM
 [0x2237] << 16));

675 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

677 
	`¥ötf
 ("DMAÜength %04x\n",

678 
Mem‹y
.
FûlRAM
 [0x2238] | (Memory.FillRAM [0x2239] << 8));

682 
SA1
.
VútuÆBôm≠F‹m©
 = (
byã
 & 0x80) ? 2 : 4;

691 i‡(!(
SA1
.
Fœgs
 & 
TRACE_FLAG
))

693 
	`Tø˚SA1
 ();

694 
	`Tø˚
 ();

697 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

701 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

702 i‡((
Mem‹y
.
FûlRAM
 [0x2230] & 0xb0) == 0xa0)

705 
	`memmove
 (&
Mem‹y
.
ROM
 [
CMem‹y
::
MAX_ROM_SIZE
 - 0x10000] + 
SA1
.
ö_ch¨_dma
 * 16,

706 &
Mem‹y
.
FûlRAM
 [0x2240], 16);

707 
SA1
.
ö_ch¨_dma
 = (SA1.in_char_dma + 1) & 7;

708 i‡((
SA1
.
ö_ch¨_dma
 & 3) == 0)

710 
	`S9xSA1Ch¨C⁄v2
 ();

715 i‡(
byã
 & 2)

716 
SA1
.
sum
 = 0;

717 
SA1
.
¨ôhmëic_›
 = 
byã
 & 3;

721 
SA1
.
›1
 = (SA1.›1 & 0xff00Ë| 
byã
;

724 
SA1
.
›1
 = (SA1.›1 & 0xffË| (
byã
 << 8);

727 
SA1
.
›2
 = (SA1.›2 & 0xff00Ë| 
byã
;

730 
SA1
.
›2
 = (SA1.›2 & 0xffË| (
byã
 << 8);

731 
SA1
.
¨ôhmëic_›
)

734 
SA1
.
sum
 = SA1.
›1
 * SA1.
›2
;

737 i‡(
SA1
.
›2
 == 0)

738 
SA1
.
sum
 = SA1.
›1
 << 16;

741 
SA1
.
sum
 = (SA1.
›1
 / (Ë((
uöt16
ËSA1.
›2
)) |

742 ((
SA1
.
›1
 % (Ë((
uöt16
ËSA1.
›2
)) << 16);

747 
SA1
.
sum
 +SA1.
›1
 * SA1.
›2
;

748 i‡(
SA1
.
sum
 & ((
öt64
) 0xffffff << 32))

749 
SA1
.
ovîÊow
 = 
TRUE
;

754 
Mem‹y
.
FûlRAM
 [0x2258] = 
byã
;

755 
	`S9xSA1RódV¨übÀLígthD©a
 (
TRUE
, 
FALSE
);

760 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

762 
SA1
.
v¨übÀ_bô_pos
 = 0;

763 
	`S9xSA1RódV¨übÀLígthD©a
 (
FALSE
, 
TRUE
);

769 i‡(
addªss
 >= 0x2200 &&áddress <= 0x22ff)

770 
Mem‹y
.
FûlRAM
 [
addªss
] = 
byã
;

771 
	}
}

773 
	$S9xSA1Ch¨C⁄v2
 ()

775 
uöt32
 
de°
 = 
Mem‹y
.
FûlRAM
 [0x2235] | (Memory.FillRAM [0x2236] << 8);

776 
uöt32
 
off£t
 = (
SA1
.
ö_ch¨_dma
 & 7) ? 0 : 1;

777 
dïth
 = (
Mem‹y
.
FûlRAM
 [0x2231] & 3) == 0 ? 8 :

778 (
Mem‹y
.
FûlRAM
 [0x2231] & 3) == 1 ? 4 : 2;

779 
byãs_≥r_ch¨
 = 8 * 
dïth
;

780 
uöt8
 *
p
 = &
Mem‹y
.
FûlRAM
 [0x3000] + 
de°
 + 
off£t
 * 
byãs_≥r_ch¨
;

781 
uöt8
 *
q
 = &
Mem‹y
.
ROM
 [
CMem‹y
::
MAX_ROM_SIZE
 - 0x10000] + 
off£t
 * 64;

783 
dïth
)

790 
l
 = 0;Ü < 8;Ü++, 
q
 += 8)

792 
b
 = 0; b < 8; b++)

794 
uöt8
 
r
 = *(
q
 + 
b
);

795 *(
p
 + 0Ë(*’ + 0Ë<< 1Ë| ((
r
 >> 0) & 1);

796 *(
p
 + 1Ë(*’ + 1Ë<< 1Ë| ((
r
 >> 1) & 1);

797 *(
p
 + 16Ë(*’ + 16Ë<< 1Ë| ((
r
 >> 2) & 1);

798 *(
p
 + 17Ë(*’ + 17Ë<< 1Ë| ((
r
 >> 3) & 1);

799 *(
p
 + 32Ë(*’ + 32Ë<< 1Ë| ((
r
 >> 4) & 1);

800 *(
p
 + 33Ë(*’ + 33Ë<< 1Ë| ((
r
 >> 5) & 1);

801 *(
p
 + 48Ë(*’ + 48Ë<< 1Ë| ((
r
 >> 6) & 1);

802 *(
p
 + 49Ë(*’ + 49Ë<< 1Ë| ((
r
 >> 7) & 1);

804 
p
 += 2;

808 
	}
}

810 
	$S9xSA1DMA
 ()

812 
uöt32
 
§c
 = 
Mem‹y
.
FûlRAM
 [0x2232] |

813 (
Mem‹y
.
FûlRAM
 [0x2233] << 8) |

814 (
Mem‹y
.
FûlRAM
 [0x2234] << 16);

815 
uöt32
 
d°
 = 
Mem‹y
.
FûlRAM
 [0x2235] |

816 (
Mem‹y
.
FûlRAM
 [0x2236] << 8) |

817 (
Mem‹y
.
FûlRAM
 [0x2237] << 16);

818 
uöt32
 
Àn
 = 
Mem‹y
.
FûlRAM
 [0x2238] |

819 (
Mem‹y
.
FûlRAM
 [0x2239] << 8);

821 
uöt8
 *
s
;

822 
uöt8
 *
d
;

824 
Mem‹y
.
FûlRAM
 [0x2230] & 3)

827 
s
 = 
SA1
.
M≠
 [(
§c
 >> 
MEMMAP_SHIFT
Ë& 
MEMMAP_MASK
];

828 i‡(
s
 >(
uöt8
 *Ë
CMem‹y
::
MAP_LAST
)

829 
s
 +(
§c
 & 0xffff);

831 
s
 = 
Mem‹y
.
ROM
 + (
§c
 & 0xffff);

834 
§c
 &
CPU
.
Mem‹y_SRAMMask
;

835 
Àn
 &
CPU
.
Mem‹y_SRAMMask
;

836 
s
 = 
Mem‹y
.
SRAM
 + 
§c
;

840 
§c
 &= 0x3ff;

841 
Àn
 &= 0x3ff;

842 
s
 = &
Mem‹y
.
FûlRAM
 [0x3000] + 
§c
;

846 i‡(
Mem‹y
.
FûlRAM
 [0x2230] & 4)

848 
d°
 &
CPU
.
Mem‹y_SRAMMask
;

849 
Àn
 &
CPU
.
Mem‹y_SRAMMask
;

850 
d
 = 
Mem‹y
.
SRAM
 + 
d°
;

854 
d°
 &= 0x3ff;

855 
Àn
 &= 0x3ff;

856 
d
 = &
Mem‹y
.
FûlRAM
 [0x3000] + 
d°
;

858 
	`memmove
 (
d
, 
s
, 
Àn
);

859 
Mem‹y
.
FûlRAM
 [0x2301] |= 0x20;

861 i‡(
Mem‹y
.
FûlRAM
 [0x220a] & 0x20)

863 
SA1
.
Fœgs
 |
IRQ_PENDING_FLAG
;

864 
SA1
.
IRQA˘ive
 |
DMA_IRQ_SOURCE
;

867 
	}
}

869 
	$S9xSA1RódV¨übÀLígthD©a
 (
boﬁ8
 
öc
, boﬁ8 
no_shi·
)

871 
uöt32
 
addr
 = 
Mem‹y
.
FûlRAM
 [0x2259] |

872 (
Mem‹y
.
FûlRAM
 [0x225a] << 8) |

873 (
Mem‹y
.
FûlRAM
 [0x225b] << 16);

874 
uöt8
 
shi·
 = 
Mem‹y
.
FûlRAM
 [0x2258] & 15;

876 i‡(
no_shi·
)

877 
shi·
 = 0;

879 i‡(
shi·
 == 0)

880 
shi·
 = 16;

882 
uöt8
 
s
 = 
shi·
 + 
SA1
.
v¨übÀ_bô_pos
;

884 i‡(
s
 >= 16)

886 
addr
 +(
s
 >> 4) << 1;

887 
s
 &= 15;

889 
uöt32
 
d©a
 = 
	`S9xSA1GëW‹d
 (
addr
) |

890 (
	`S9xSA1GëW‹d
 (
addr
 + 2) << 16);

892 
d©a
 >>
s
;

893 
Mem‹y
.
FûlRAM
 [0x230c] = (
uöt8
Ë
d©a
;

894 
Mem‹y
.
FûlRAM
 [0x230d] = (
uöt8
Ë(
d©a
 >> 8);

895 i‡(
öc
)

897 
SA1
.
v¨übÀ_bô_pos
 = (SA1.v¨übÀ_bô_po†+ 
shi·
) & 15;

898 
Mem‹y
.
FûlRAM
 [0x2259] = (
uöt8
Ë
addr
;

899 
Mem‹y
.
FûlRAM
 [0x225a] = (
uöt8
Ë(
addr
 >> 8);

900 
Mem‹y
.
FûlRAM
 [0x225b] = (
uöt8
Ë(
addr
 >> 16);

902 
	}
}

	@sa1.h

41 #i‚de‡
_ß1_h_


42 
	#_ß1_h_


	)

44 
	~"memm≠.h
"

46 
	sSSA1Regi°îs
 {

47 
uöt8
 
	mPB
;

48 
uöt8
 
	mDB
;

49 
∑ú
 
	mP
;

50 
∑ú
 
	mA
;

51 
∑ú
 
	mD
;

52 
∑ú
 
	mS
;

53 
∑ú
 
	mX
;

54 
∑ú
 
	mY
;

55 
uöt16
 
	mPC
;

58 
	sSSA1
 {

59 
SOpcodes
 *
	mS9xOpcodes
;

60 
uöt8
 
	m_C¨ry
;

61 
uöt8
 
	m_Zîo
;

62 
uöt8
 
	m_Neg©ive
;

63 
uöt8
 
	m_OvîÊow
;

64 
boﬁ8
 
	mCPUExecutög
;

65 
uöt32
 
	mShi·edPB
;

66 
uöt32
 
	mShi·edDB
;

67 
uöt32
 
	mFœgs
;

68 
boﬁ8
 
	mExecutög
;

69 
boﬁ8
 
	mNMIA˘ive
;

70 
boﬁ8
 
	mIRQA˘ive
;

71 
boﬁ8
 
	mWaôögF‹I¡îru±
;

72 
boﬁ8
 
	mWaôög
;

74 
uöt8
 *
	mPC
;

75 
uöt8
 *
	mPCBa£
;

76 
uöt8
 *
	mBWRAM
;

77 
uöt8
 *
	mPCAtOpcodeSèπ
;

78 
uöt8
 *
	mWaôAddªss
;

79 
uöt32
 
	mWaôCou¡î
;

80 
uöt8
 *
	mWaôByãAddªss1
;

81 
uöt8
 *
	mWaôByãAddªss2
;

85 
uöt8
 *
	mM≠
 [
MEMMAP_NUM_BLOCKS
];

86 
uöt8
 *
	mWrôeM≠
 [
MEMMAP_NUM_BLOCKS
];

87 
öt16
 
	m›1
;

88 
öt16
 
	m›2
;

89 
	m¨ôhmëic_›
;

90 
öt64
 
	msum
;

91 
boﬁ8
 
	movîÊow
;

92 
uöt8
 
	mVútuÆBôm≠F‹m©
;

93 
boﬁ8
 
	mö_ch¨_dma
;

94 
uöt8
 
	mv¨übÀ_bô_pos
;

97 
SSA1Regi°îs
 
SA1Regi°îs
;

98 
SSA1
 
SA1
;

100 #ifde‡
USE_SA1


102 
	#SA1CheckZîo
(Ë(
SA1
.
_Zîo
 =0)

	)

103 
	#SA1CheckC¨ry
(Ë(
SA1
.
_C¨ry
)

	)

104 
	#SA1CheckIRQ
(Ë(
SA1Regi°îs
.
PL
 & 
IRQ
)

	)

105 
	#SA1CheckDecimÆ
(Ë(
SA1Regi°îs
.
PL
 & 
DecimÆ
)

	)

106 
	#SA1CheckIndex
(Ë(
SA1Regi°îs
.
PL
 & 
IndexFœg
)

	)

107 
	#SA1CheckMem‹y
(Ë(
SA1Regi°îs
.
PL
 & 
Mem‹yFœg
)

	)

108 
	#SA1CheckOvîÊow
(Ë(
SA1
.
_OvîÊow
)

	)

109 
	#SA1CheckNeg©ive
(Ë(
SA1
.
_Neg©ive
 & 0x80)

	)

110 
	#SA1CheckEmuœti⁄
(Ë(
SA1Regi°îs
.
P
.
W
 & 
Emuœti⁄
)

	)

112 
	#SA1CÀ¨Fœgs
(
f
Ë(
SA1Regi°îs
.
P
.
W
 &~(f))

	)

113 
	#SA1SëFœgs
(
f
Ë(
SA1Regi°îs
.
P
.
W
 |(f))

	)

114 
	#SA1CheckFœg
(
f
Ë(
SA1Regi°îs
.
PL
 & (f))

	)

117 
START_EXTERN_C


118 
uöt8
 
S9xSA1GëByã
 (
uöt32
);

119 
uöt16
 
S9xSA1GëW‹d
 (
uöt32
);

120 
S9xSA1SëByã
 (
uöt8
, 
uöt32
);

121 
S9xSA1SëW‹d
 (
uöt16
, 
uöt32
);

122 
S9xSA1SëPCBa£
 (
uöt32
);

123 
uöt8
 
S9xGëSA1
 (
uöt32
);

124 
S9xSëSA1
 (
uöt8
, 
uöt32
);

126 
SOpcodes
 
S9xSA1OpcodesM1X1
 [256];

127 
SOpcodes
 
S9xSA1OpcodesM1X0
 [256];

128 
SOpcodes
 
S9xSA1OpcodesM0X1
 [256];

129 
SOpcodes
 
S9xSA1OpcodesM0X0
 [256];

131 
S9xSA1MaöLo›
 ();

132 
S9xSA1Inô
 ();

133 
S9xFixSA1A·îS«pshŸLﬂd
 ();

134 
S9xSA1ExecuãDurögSÀï
 ();

135 
	gEND_EXTERN_C


137 
	#SNES_IRQ_SOURCE
 (1 << 7)

	)

138 
	#TIMER_IRQ_SOURCE
 (1 << 6)

	)

139 
	#DMA_IRQ_SOURCE
 (1 << 5)

	)

141 
STATIC
 
ölöe
 
	$S9xSA1U≈ackSètus
()

143 
SA1
.
_Zîo
 = (
SA1Regi°îs
.
PL
 & 
Zîo
) == 0;

144 
SA1
.
_Neg©ive
 = (
SA1Regi°îs
.
PL
 & 
Neg©ive
);

145 
SA1
.
_C¨ry
 = (
SA1Regi°îs
.
PL
 & 
C¨ry
);

146 
SA1
.
_OvîÊow
 = (
SA1Regi°îs
.
PL
 & 
OvîÊow
) >> 6;

147 
	}
}

149 
STATIC
 
ölöe
 
	$S9xSA1PackSètus
()

151 
SA1Regi°îs
.
PL
 &~(
Zîo
 | 
Neg©ive
 | 
C¨ry
 | 
OvîÊow
);

152 
SA1Regi°îs
.
PL
 |
SA1
.
_C¨ry
 | ((SA1.
_Zîo
 == 0) << 1) |

153 (
SA1
.
_Neg©ive
 & 0x80Ë| (SA1.
_OvîÊow
 << 6);

154 
	}
}

156 
STATIC
 
ölöe
 
	$S9xSA1FixCy˛es
 ()

158 i‡(
	`SA1CheckEmuœti⁄
 ())

159 
SA1
.
S9xOpcodes
 = 
S9xSA1OpcodesM1X1
;

161 i‡(
	`SA1CheckMem‹y
 ())

163 i‡(
	`SA1CheckIndex
 ())

164 
SA1
.
S9xOpcodes
 = 
S9xSA1OpcodesM1X1
;

166 
SA1
.
S9xOpcodes
 = 
S9xSA1OpcodesM1X0
;

170 i‡(
	`SA1CheckIndex
 ())

171 
SA1
.
S9xOpcodes
 = 
S9xSA1OpcodesM0X1
;

173 
SA1
.
S9xOpcodes
 = 
S9xSA1OpcodesM0X0
;

175 
	}
}

	@sar.h

76 #i‚de‡
_SAR_H_


77 
	#_SAR_H_


	)

79 #ifde‡
HAVE_CONFIG_H


80 
	~<c⁄fig.h
>

83 
	~"p‹t.h
"

85 #i‚de‡
¢es9x_ty≥s_deföed


86 
	#¢es9x_ty≥s_deföed


	)

88 
	tuöt8
;

89 
	tuöt16
;

90 
	tuöt32
;

91 
	tboﬁ8
;

92 sig√d 
	töt8
;

93 
	töt16
;

94 
	töt32
;

97 #ifde‡
RIGHTSHIFT_IS_SAR


98 
	#SAR
(
b
, 
n
Ë((b)>>“))

	)

101 
ölöe
 
öt8
 
	$SAR
(c⁄° 
öt8
 
b
, c⁄° 
n
){

102 #i‚de‡
RIGHTSHIFT_INT8_IS_SAR


103 if(
b
<0Ë (b>>
n
)|(-1<<(8-n));

105  
b
>>
n
;

106 
	}
}

108 
ölöe
 
öt16
 
	$SAR
(c⁄° 
öt16
 
b
, c⁄° 
n
){

109 #i‚de‡
RIGHTSHIFT_INT16_IS_SAR


110 if(
b
<0Ë (b>>
n
)|(-1<<(16-n));

112  
b
>>
n
;

113 
	}
}

115 
ölöe
 
öt32
 
	$SAR
(c⁄° 
öt32
 
b
, c⁄° 
n
){

116 #i‚de‡
RIGHTSHIFT_INT32_IS_SAR


117 if(
b
<0Ë (b>>
n
)|(-1<<(32-n));

119  
b
>>
n
;

120 
	}
}

122 
ölöe
 
öt64
 
	$SAR
(c⁄° 
öt64
 
b
, c⁄° 
n
){

123 #i‚de‡
RIGHTSHIFT_INT64_IS_SAR


124 if(
b
<0Ë (b>>
n
)|(-1<<(64-n));

126  
b
>>
n
;

127 
	}
}

	@screenshot.cpp

91 #ifde‡
HAVE_CONFIG_H


92 
	~<c⁄fig.h
>

94 
	~<°dio.h
>

96 #i‚de‡
__WIN32__


97 
	~<uni°d.h
>

99 
	~<dúe˘.h
>

101 
	~<°rög.h
>

102 
	~<f˙é.h
>

104 #ifde‡
HAVE_LIBPNG


105 
	~<≤g.h
>

108 
	~"¢es9x.h
"

109 
	~"memm≠.h
"

110 
	~"di•œy.h
"

111 
	~"gfx.h
"

112 
	~"µu.h
"

113 
	~"s¸ìnshŸ.h
"

115 
boﬁ8
 
	$S9xDoS¸ìnshŸ
(
width
, 
height
){

116 #ifde‡
HAVE_LIBPNG


117 
FILE
 *
Â
;

118 
≤g_°ru˘p
 
≤g_±r
;

119 
≤g_öf›
 
öfo_±r
;

120 
≤g_cﬁ‹_8
 
sig_bô
;

121 
≤g_cﬁ‹
 
≤g∑l
[256];

122 
imgwidth
;

123 
imgheight
;

124 c⁄° *
‚ame
=
	`S9xGëFûíameInc
(".png");

126 
Sëtögs
.
TakeS¸ìnshŸ
=
FALSE
;

128 if((
Â
=
	`f›í
(
‚ame
, "wb"))==
NULL
){

129 
	`≥º‹
("Screenshot failed");

130  
FALSE
;

133 
≤g_±r
=
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

134 if(!
≤g_±r
){

135 
	`f˛o£
(
Â
);

136 
	`u∆ök
(
‚ame
);

137  
FALSE
;

139 
öfo_±r
=
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

140 if(!
öfo_±r
){

141 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, (
≤g_öf›p
)
NULL
);

142 
	`f˛o£
(
Â
);

143 
	`u∆ök
(
‚ame
);

144  
FALSE
;

147 if(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
))){

148 
	`≥º‹
("Screenshot: setjmp");

149 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

150 
	`f˛o£
(
Â
);

151 
	`u∆ök
(
‚ame
);

152  
FALSE
;

155 
imgwidth
=
width
;

156 
imgheight
=
height
;

157 if(
Sëtögs
.
SåëchS¸ìnshŸs
==1){

158 if(
width
<=256 && 
height
>
SNES_HEIGHT_EXTENDED
Ë
imgwidth
=width<<1;

159 if(
width
>256 && 
height
<=
SNES_HEIGHT_EXTENDED
Ë
imgheight
=height<<1;

160 } if(
Sëtögs
.
SåëchS¸ìnshŸs
==2){

161 if(
width
<=256Ë
imgwidth
=width<<1;

162 if(
height
<=
SNES_HEIGHT_EXTENDED
Ë
imgheight
=height<<1;

165 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

166 if(!
Sëtögs
.
SixãíBô
){

169 
b
=
IPPU
.
MaxBrighäess
*140;

170 
i
=0; i<256; i++){

171 
≤g∑l
[
i
].
ªd
 = (
PPU
.
CGDATA
[i] & 0x1f)*
b
>>8;

172 
≤g∑l
[
i
].
gªí
 = ((
PPU
.
CGDATA
[i] >> 5Ë& 0x1f)*
b
>>8;

173 
≤g∑l
[
i
].
blue
 = ((
PPU
.
CGDATA
[i] >> 10Ë& 0x1f)*
b
>>8;

175 
	`≤g_£t_PLTE
(
≤g_±r
, 
öfo_±r
, 
≤g∑l
, 256);

177 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
imgwidth
, 
imgheight
, 8,

178 (
Sëtögs
.
SixãíBô
?
PNG_COLOR_TYPE_RGB
:
PNG_COLOR_TYPE_PALETTE
),

179 
PNG_INTERLACE_NONE
, 
PNG_COMPRESSION_TYPE_DEFAULT
,

180 
PNG_FILTER_TYPE_DEFAULT
);

182 if(
Sëtögs
.
SixãíBô
){

184 
sig_bô
.
ªd
=5;

185 
sig_bô
.
gªí
=5;

186 
sig_bô
.
blue
=5;

187 
	`≤g_£t_sBIT
(
≤g_±r
, 
öfo_±r
, &
sig_bô
);

188 
	`≤g_£t_shi·
(
≤g_±r
, &
sig_bô
);

191 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

193 
	`≤g_£t_∑ckög
(
≤g_±r
);

195 
≤g_byã
 *
row_poöãr
=
√w
Öng_byã [
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
)];

196 
uöt8
 *
s¸ìn
=
GFX
.
S¸ìn
;

197 
y
=0; y<
height
; y++, 
s¸ìn
+=
GFX
.
Pôch
){

198 
≤g_byã
 *
rowpix
 = 
row_poöãr
;

199 
x
=0; x<
width
; x++){

200 if(
Sëtögs
.
SixãíBô
){

201 
uöt32
 
r
, 
g
, 
b
;

202 
	`DECOMPOSE_PIXEL
((*(
uöt16
 *)(
s¸ìn
+2*
x
)), 
r
, 
g
, 
b
);

203 *(
rowpix
++Ë
r
;

204 *(
rowpix
++Ë
g
;

205 *(
rowpix
++Ë
b
;

206 if(
imgwidth
!=
width
){

207 *(
rowpix
++Ë
r
;

208 *(
rowpix
++Ë
g
;

209 *(
rowpix
++Ë
b
;

212 *(
rowpix
++)=*(
uöt8
 *)(
s¸ìn
+
x
);

213 if(
imgwidth
!=
width
)

214 *(
rowpix
++)=*(
uöt8
 *)(
s¸ìn
+
x
);

217 
	`≤g_wrôe_row
(
≤g_±r
, 
row_poöãr
);

218 if(
imgheight
!=
height
)

219 
	`≤g_wrôe_row
(
≤g_±r
, 
row_poöãr
);

222 
dñëe
 [] 
row_poöãr
;

224 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

225 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

227 
	`f˛o£
(
Â
);

228 
	`Ârötf
(
°dîr
, "%†ßved.\n", 
‚ame
);

229  
TRUE
;

231 
	`≥º‹
("Screenshot supportÇotávailable (libpng wasÇot foundát buildÅime)");

232  
FALSE
;

234 
	}
}

	@screenshot.h

90 #i‚de‡
SCREENSHOT_H


91 
	#SCREENSHOT_H


	)

93 
boﬁ8
 
S9xDoS¸ìnshŸ
(
width
, 
height
);

	@sdd1.cpp

41 
	~"¢es9x.h
"

42 
	~"memm≠.h
"

43 
	~"µu.h
"

44 
	~"sdd1.h
"

45 
	~"di•œy.h
"

47 #ifde‡
__löux


51 
	$S9xSëSDD1Mem‹yM≠
 (
uöt32
 
b™k
, uöt32 
vÆue
)

53 
b™k
 = 0xc00 + bank * 0x100;

54 
vÆue
 = value * 1024 * 1024;

56 
c
;

58 
c
 = 0; c < 0x100; c += 16)

60 
uöt8
 *
block
 = &
Mem‹y
.
ROM
 [
vÆue
 + (
c
 << 12)];

61 
i
;

63 
i
 = 
c
; i < c + 16; i++)

64 
Mem‹y
.
M≠
 [
i
 + 
b™k
] = 
block
;

66 
	}
}

68 
	$S9xRe£tSDD1
 ()

70 
	`mem£t
 (&
Mem‹y
.
FûlRAM
 [0x4800], 0, 4);

71 
i
 = 0; i < 4; i++)

73 
Mem‹y
.
FûlRAM
 [0x4804 + 
i
] = i;

74 
	`S9xSëSDD1Mem‹yM≠
 (
i
, i);

76 
	}
}

78 
	$S9xSDD1Po°LﬂdSèã
 ()

80 
i
 = 0; i < 4; i++)

81 
	`S9xSëSDD1Mem‹yM≠
 (
i
, 
Mem‹y
.
FûlRAM
 [0x4804 + i]);

82 
	}
}

84 #i‚de‡
_SNESPPC


85 
	$S9xCom∑ªSDD1LoggedD©aE¡rõs
 (c⁄° *
p1
, c⁄° *
p2
)

87 
_cde˛
 
	$S9xCom∑ªSDD1LoggedD©aE¡rõs
 (c⁄° *
p1
, c⁄° *
p2
)

90 
uöt8
 *
b1
 = (uöt8 *Ë
p1
;

91 
uöt8
 *
b2
 = (uöt8 *Ë
p2
;

92 
uöt32
 
a1
 = (*
b1
 << 16) + (*(b1 + 1) << 8) + *(b1 + 2);

93 
uöt32
 
a2
 = (*
b2
 << 16) + (*(b2 + 1) << 8) + *(b2 + 2);

95  (
a1
 - 
a2
);

96 
	}
}

98 
	$S9xSDD1SaveLoggedD©a
 ()

100 i‡(
Mem‹y
.
SDD1LoggedD©aCou¡
 !Mem‹y.
SDD1LoggedD©aCou¡Pªv
)

102 
	`qs‹t
 (
Mem‹y
.
SDD1LoggedD©a
, Mem‹y.
SDD1LoggedD©aCou¡
, 8,

103 
S9xCom∑ªSDD1LoggedD©aE¡rõs
);

105 
FILE
 *
fs
 = 
	`f›í
 (
	`S9xGëFûíame
 (".dat"), "wb");

107 i‡(
fs
)

109 
	`fwrôe
 (
Mem‹y
.
SDD1LoggedD©a
, 8,

110 
Mem‹y
.
SDD1LoggedD©aCou¡
, 
fs
);

111 
	`f˛o£
 (
fs
);

112 #i‡
	`deföed
(
__löux
)

113 
	`chown
 (
	`S9xGëFûíame
 (".d©"), 
	`gëuid
 (), 
	`gëgid
 ());

116 
Mem‹y
.
SDD1LoggedD©aCou¡Pªv
 = Mem‹y.
SDD1LoggedD©aCou¡
;

118 
	}
}

120 
	$S9xSDD1LﬂdLoggedD©a
 ()

122 
FILE
 *
fs
 = 
	`f›í
 (
	`S9xGëFûíame
 (".dat"), "rb");

124 
Mem‹y
.
SDD1LoggedD©aCou¡
 = Mem‹y.
SDD1LoggedD©aCou¡Pªv
 = 0;

126 i‡(
fs
)

128 
c
 = 
	`‰ód
 (
Mem‹y
.
SDD1LoggedD©a
, 8,

129 
MEMMAP_MAX_SDD1_LOGGED_ENTRIES
, 
fs
);

131 i‡(
c
 !
EOF
)

132 
Mem‹y
.
SDD1LoggedD©aCou¡
 = Mem‹y.
SDD1LoggedD©aCou¡Pªv
 = 
c
;

133 
	`f˛o£
 (
fs
);

135 
	}
}

	@sdd1emu.cpp

103 
	~<°rög.h
>

104 
	~"p‹t.h
"

105 
	~"sdd1emu.h
"

107 
	gvÆid_bôs
;

108 
uöt16
 
	gö_°ªam
;

109 
uöt8
 *
	gö_buf
;

110 
uöt8
 
	gbô_˘r
[8];

111 
uöt8
 
	gc⁄ãxt_°©es
[32];

112 
	gc⁄ãxt_MPS
[32];

113 
	gbô∂™e_ty≥
;

114 
	ghigh_c⁄ãxt_bôs
;

115 
	glow_c⁄ãxt_bôs
;

116 
	g¥ev_bôs
[8];

119 
uöt8
 
	mcode_size
;

120 
uöt8
 
	mMPS_√xt
;

121 
uöt8
 
	mLPS_√xt
;

122 } 
	gevﬁuti⁄_èbÀ
[] = {

158 
uöt8
 
	grun_èbÀ
[128] = {

170 
ölöe
 
uöt8
 
	$GëCodew‹d
(
bôs
){

171 
uöt8
 
tmp
;

173 if(!
vÆid_bôs
){

174 
ö_°ªam
|=*(
ö_buf
++);

175 
vÆid_bôs
=8;

177 
ö_°ªam
<<=1;

178 
vÆid_bôs
--;

179 
ö_°ªam
^=0x8000;

180 if(
ö_°ªam
&0x8000Ë 0x80+(1<<
bôs
);

181 
tmp
=(
ö_°ªam
>>8Ë| (0x7f>>
bôs
);

182 
ö_°ªam
<<=
bôs
;

183 
vÆid_bôs
-=
bôs
;

184 if(
vÆid_bôs
<0){

185 
ö_°ªam
 |(*(
ö_buf
++))<<(-
vÆid_bôs
);

186 
vÆid_bôs
+=8;

188  
run_èbÀ
[
tmp
];

189 
	}
}

191 
ölöe
 
uöt8
 
	$GﬁombGëBô
(
code_size
){

192 if(!
bô_˘r
[
code_size
]Ëbô_˘r[code_size]=
	`GëCodew‹d
(code_size);

193 
bô_˘r
[
code_size
]--;

194 if(
bô_˘r
[
code_size
]==0x80){

195 
bô_˘r
[
code_size
]=0;

198  (
bô_˘r
[
code_size
]==0)?1:0;

199 
	}
}

201 
ölöe
 
uöt8
 
	$ProbGëBô
(
uöt8
 
c⁄ãxt
){

202 
uöt8
 
°©e
=
c⁄ãxt_°©es
[
c⁄ãxt
];

203 
uöt8
 
bô
=
	`GﬁombGëBô
(
evﬁuti⁄_èbÀ
[
°©e
].
code_size
);

205 if(
bô
&1){

206 
c⁄ãxt_°©es
[
c⁄ãxt
]=
evﬁuti⁄_èbÀ
[
°©e
].
LPS_√xt
;

207 if(
°©e
<2){

208 
c⁄ãxt_MPS
[
c⁄ãxt
]^=1;

209  
c⁄ãxt_MPS
[
c⁄ãxt
];

211  
c⁄ãxt_MPS
[
c⁄ãxt
]^1;

213 } if(
bô
){

214 
c⁄ãxt_°©es
[
c⁄ãxt
]=
evﬁuti⁄_èbÀ
[
°©e
].
MPS_√xt
;

217  
c⁄ãxt_MPS
[
c⁄ãxt
];

218 
	}
}

220 
ölöe
 
uöt8
 
	$GëBô
(
uöt8
 
cur_bô∂™e
){

221 
uöt8
 
bô
;

223 
bô
=
	`ProbGëBô
(((
cur_bô∂™e
&1)<<4)

224 | ((
¥ev_bôs
[
cur_bô∂™e
]&
high_c⁄ãxt_bôs
)>>5)

225 | (
¥ev_bôs
[
cur_bô∂™e
]&
low_c⁄ãxt_bôs
));

227 
¥ev_bôs
[
cur_bô∂™e
] <<= 1;

228 
¥ev_bôs
[
cur_bô∂™e
] |
bô
;

229  
bô
;

230 
	}
}

232 
	$SDD1_decom¥ess
(
uöt8
 *
out
, uöt8 *
ö
, 
Àn
){

233 
uöt8
 
bô
, 
i
, 
∂™e
;

234 
uöt8
 
byã1
, 
byã2
;

236 if(
Àn
==0)Üen=0x10000;

238 
bô∂™e_ty≥
=
ö
[0]>>6;

240 
ö
[0]&0x30){

242 
high_c⁄ãxt_bôs
=0x01c0;

243 
low_c⁄ãxt_bôs
 =0x0001;

246 
high_c⁄ãxt_bôs
=0x0180;

247 
low_c⁄ãxt_bôs
 =0x0001;

250 
high_c⁄ãxt_bôs
=0x00c0;

251 
low_c⁄ãxt_bôs
 =0x0001;

254 
high_c⁄ãxt_bôs
=0x0180;

255 
low_c⁄ãxt_bôs
 =0x0003;

259 
ö_°ªam
=(
ö
[0]<<11) | (in[1]<<3);

260 
vÆid_bôs
=5;

261 
ö_buf
=
ö
+2;

262 
	`mem£t
(
bô_˘r
, 0, (bit_ctr));

263 
	`mem£t
(
c⁄ãxt_°©es
, 0, (context_states));

264 
	`mem£t
(
c⁄ãxt_MPS
, 0, (context_MPS));

265 
	`mem£t
(
¥ev_bôs
, 0, (prev_bits));

267 
bô∂™e_ty≥
){

270 
byã1
=
byã2
=0, 
bô
=0x80; bit; bit>>=1){

271 if(
	`GëBô
(0)Ë
byã1
 |
bô
;

272 if(
	`GëBô
(1)Ë
byã2
 |
bô
;

274 *(
out
++)=
byã1
;

275 if(!--
Àn
) ;

276 *(
out
++)=
byã2
;

277 if(!--
Àn
) ;

281 
i
=
∂™e
=0;

283 
byã1
=
byã2
=0, 
bô
=0x80; bit; bit>>=1){

284 if(
	`GëBô
(
∂™e
)Ë
byã1
 |
bô
;

285 if(
	`GëBô
(
∂™e
+1)Ë
byã2
 |
bô
;

287 *(
out
++)=
byã1
;

288 if(!--
Àn
) ;

289 *(
out
++)=
byã2
;

290 if(!--
Àn
) ;

291 if(!(
i
+=32)Ë
∂™e
 = (plane+2)&7;

295 
i
=
∂™e
=0;

297 
byã1
=
byã2
=0, 
bô
=0x80; bit; bit>>=1){

298 if(
	`GëBô
(
∂™e
)Ë
byã1
 |
bô
;

299 if(
	`GëBô
(
∂™e
+1)Ë
byã2
 |
bô
;

301 *(
out
++)=
byã1
;

302 if(!--
Àn
) ;

303 *(
out
++)=
byã2
;

304 if(!--
Àn
) ;

305 if(!(
i
+=32)Ë
∂™e
 ^= 2;

310 
byã1
=
∂™e
=0, 
bô
=1; bit; bit<<=1,Ölane++){

311 if(
	`GëBô
(
∂™e
)Ë
byã1
 |
bô
;

313 *(
out
++)=
byã1
;

314 } --
Àn
);

317 
	}
}

319 
uöt8
 
	gcur_∂™e
;

320 
uöt8
 
	gnum_bôs
;

321 
uöt8
 
	g√xt_byã
;

323 
	$SDD1_öô
(
uöt8
 *
ö
){

324 
bô∂™e_ty≥
=
ö
[0]>>6;

326 
ö
[0]&0x30){

328 
high_c⁄ãxt_bôs
=0x01c0;

329 
low_c⁄ãxt_bôs
 =0x0001;

332 
high_c⁄ãxt_bôs
=0x0180;

333 
low_c⁄ãxt_bôs
 =0x0001;

336 
high_c⁄ãxt_bôs
=0x00c0;

337 
low_c⁄ãxt_bôs
 =0x0001;

340 
high_c⁄ãxt_bôs
=0x0180;

341 
low_c⁄ãxt_bôs
 =0x0003;

345 
ö_°ªam
=(
ö
[0]<<11) | (in[1]<<3);

346 
vÆid_bôs
=5;

347 
ö_buf
=
ö
+2;

348 
	`mem£t
(
bô_˘r
, 0, (bit_ctr));

349 
	`mem£t
(
c⁄ãxt_°©es
, 0, (context_states));

350 
	`mem£t
(
c⁄ãxt_MPS
, 0, (context_MPS));

351 
	`mem£t
(
¥ev_bôs
, 0, (prev_bits));

353 
cur_∂™e
=0;

354 
num_bôs
=0;

355 
	}
}

357 
uöt8
 
	$SDD1_gë_byã
(){

358 
uöt8
 
bô
;

359 
uöt8
 
byã
=0;

361 
bô∂™e_ty≥
){

363 
num_bôs
+=16;

364 if(
num_bôs
&16){

365 
√xt_byã
=0;

366 
bô
=0x80; bit; bit>>=1){

367 if(
	`GëBô
(0)Ë
byã
 |
bô
;

368 if(
	`GëBô
(1)Ë
√xt_byã
 |
bô
;

370  
byã
;

372  
√xt_byã
;

376 
num_bôs
+=16;

377 if(
num_bôs
&16){

378 
√xt_byã
=0;

379 
bô
=0x80; bit; bit>>=1){

380 if(
	`GëBô
(
cur_∂™e
)Ë
byã
 |
bô
;

381 if(
	`GëBô
(
cur_∂™e
+1)Ë
√xt_byã
 |
bô
;

383  
byã
;

385 if(!
num_bôs
Ë
cur_∂™e
 = (cur_plane+2)&7;

386  
√xt_byã
;

390 
num_bôs
+=16;

391 if(
num_bôs
&16){

392 
√xt_byã
=0;

393 
bô
=0x80; bit; bit>>=1){

394 if(
	`GëBô
(
cur_∂™e
)Ë
byã
 |
bô
;

395 if(
	`GëBô
(
cur_∂™e
+1)Ë
√xt_byã
 |
bô
;

397  
byã
;

399 if(!
num_bôs
Ë
cur_∂™e
 ^= 2;

400  
√xt_byã
;

404 
cur_∂™e
=0, 
bô
=1; bit; bit<<=1, cur_plane++){

405 if(
	`GëBô
(
cur_∂™e
)Ë
byã
 |
bô
;

407  
byã
;

413 
	}
}

	@sdd1emu.h

89 #i‚de‡
SDD1EMU_H


90 
	#SDD1EMU_H


	)

93 
	~"p‹t.h
"

97 
SDD1_decom¥ess
(
uöt8
 *
out
, uöt8 *
ö
, 
ouçut_Àngth
);

99 
SDD1_öô
(
uöt8
 *
ö
);

100 
uöt8
 
SDD1_gë_byã
();

	@seta.cpp

89 
	~"p‹t.h
"

90 
	~"£è.h
"

93 (*
SëSETA
)(
uöt32
, 
uöt8
)=&
S9xSëST010
;

94 
	$uöt8
 (*
GëSETA
)(
uöt32
)=&
S9xGëST010
;

97 
uöt8
 
	`S9xGëSëaDSP
(
uöt32
 
Addªss
)

99  
	`GëSETA
(
Addªss
);

102 
	`S9xSëSëaDSP
(
uöt8
 
Byã
, 
uöt32
 
Addªss
)

104 
	`SëSETA
(
Addªss
, 
Byã
);

106 
	}
}

	@seta.h

90 #i‚de‡
NO_SETA


91 #i‚de‡
_£è_h


92 
	#_£è_h


	)

94 
	~"p‹t.h
"

96 
	#ST_010
 0x01

	)

97 
	#ST_011
 0x02

	)

98 
	#ST_018
 0x03

	)

103 
uöt8
 
S9xGëSëaDSP
(
uöt32
 
Addªss
);

104 
S9xSëSëaDSP
(
uöt8
 
byã
,
uöt32
 
Addªss
);

105 
uöt8
 
S9xGëST018
(
uöt32
 
Addªss
);

106 
S9xSëST018
(
uöt8
 
Byã
, 
uöt32
 
Addªss
);

108 
uöt8
 
S9xGëST010
(
uöt32
 
Addªss
);

109 
S9xSëST010
(
uöt32
 
Addªss
, 
uöt8
 
Byã
);

110 
uöt8
 
S9xGëST011
(
uöt32
 
Addªss
);

111 
S9xSëST011
(
uöt32
 
Addªss
, 
uöt8
 
Byã
);

114 (*
SëSETA
)(
uöt32
, 
uöt8
);

115 
	$uöt8
 (*
GëSETA
)(
uöt32
);

117 
	sSETA_ST010_STRUCT


119 
uöt8
 
öput_∑øms
[16];

120 
uöt8
 
ouçut_∑øms
[16];

121 
uöt8
 
›_ªg
;

122 
uöt8
 
execuã
;

123 
boﬁ8
 
c⁄åﬁ_íabÀ
;

124 } 
	tST010_Regs
;

126 
	sSETA_ST011_STRUCT


128 
boﬁ8
 
waôög4comm™d
;

129 
uöt8
 
°©us
;

130 
uöt8
 
comm™d
;

131 
uöt32
 
ö_cou¡
;

132 
uöt32
 
ö_ödex
;

133 
uöt32
 
out_cou¡
;

134 
uöt32
 
out_ödex
;

135 
uöt8
 
∑ømëîs
 [512];

136 
uöt8
 
ouçut
 [512];

137 } 
	tST011_Regs
;

139 
	sSETA_ST018_STRUCT


141 
boﬁ8
 
waôög4comm™d
;

142 
uöt8
 
°©us
;

143 
uöt8
 
∑π_comm™d
;

144 
uöt8
 
∑ss
;

145 
uöt32
 
comm™d
;

146 
uöt32
 
ö_cou¡
;

147 
uöt32
 
ö_ödex
;

148 
uöt32
 
out_cou¡
;

149 
uöt32
 
out_ödex
;

150 
uöt8
 
∑ømëîs
 [512];

151 
uöt8
 
ouçut
 [512];

152 } 
	tST018_Regs
;

	@seta010.cpp

90 
	~"memm≠.h
"

91 
	~"£è.h
"

94 c⁄° 
öt16
 
	gST010_M7SˇÀ
[176] = {

120 
boﬁ
 
	g£è_hack
;

123 
	~<m©h.h
>

125 #i‚de‡
PI


126 
	#PI
 3.1415926535897932384626433832795

	)

129 
ST010_Regs
 
	gST010
;

131 
uöt8
 
	$S9xGëST010
(
uöt32
 
Addªss
)

133 if(!(
Addªss
&0x80000))

136 if((
Addªss
&0xFFF)==0x20)

137  
ST010
.
›_ªg
;

138 i‡((
Addªss
&0xFFF)==0x21)

139  
ST010
.
execuã
;

140  
Mem‹y
.
SRAM
[
Addªss
&
CPU
.
Mem‹y_SRAMMask
];

141 
	}
}

143 c⁄° 
öt16
 
	gST010_SöTabÀ
[256] = {

177 c⁄° 
	gST010_ArcT™
[32][32] = {

243 
	$ST010_Sö
(
Thëa
)

245  
ST010_SöTabÀ
[(
Thëa
 >> 8) & 0xff];

246 
	}
}

248 
	$ST010_Cos
(
Thëa
)

250  
ST010_SöTabÀ
[((
Thëa
 + 0x4000) >> 8) & 0xff];

251 
	}
}

253 
	$ST010_OP01
(
x0
, 
y0
, &
x1
, &
y1
, &
Quadø¡
, &
Thëa
)

255 i‡((
x0
 < 0Ë&& (
y0
 < 0))

257 
x1
 = -
x0
;

258 
y1
 = -
y0
;

259 
Quadø¡
 = -0x8000;

261 i‡(
x0
 < 0)

263 
x1
 = 
y0
;

264 
y1
 = -
x0
;

265 
Quadø¡
 = -0x4000;

267 i‡(
y0
 < 0)

269 
x1
 = -
y0
;

270 
y1
 = 
x0
;

271 
Quadø¡
 = 0x4000;

275 
x1
 = 
x0
;

276 
y1
 = 
y0
;

277 
Quadø¡
 = 0x0000;

280 (
x1
 > 0x1fË|| (
y1
 > 0x1f))

282 i‡(
x1
 > 1) x1 >>= 1;

283 i‡(
y1
 > 1) y1 >>= 1;

286 i‡(
y1
 =0Ë
Quadø¡
 += 0x4000;

288 
Thëa
 = (
ST010_ArcT™
[
y1
][
x1
] << 8Ë^ 
Quadø¡
;

289 
	}
}

291 
	$ST010_SˇÀ
(
Mu…ùlõr
, 
X0
, 
Y0
, &
X1
, &
Y1
)

293 
X1
 = 
X0
 * 
Mu…ùlõr
 << 1;

294 
Y1
 = 
Y0
 * 
Mu…ùlõr
 << 1;

295 
	}
}

297 
	$ST010_Mu…ùly
(
Mu…ùliˇnd
, 
Mu…ùlõr
, &
Produ˘
)

299 
Produ˘
 = 
Mu…ùliˇnd
 * 
Mu…ùlõr
 << 1;

300 
	}
}

302 
	$ST010_RŸ©e
(
Thëa
, 
X0
, 
Y0
, &
X1
, &
Y1
)

304 
X1
 = (
Y0
 * 
	`ST010_Sö
(
Thëa
Ë>> 15Ë+ (
X0
 * 
	`ST010_Cos
(Theta) >> 15);

305 
Y1
 = (
Y0
 * 
	`ST010_Cos
(
Thëa
Ë>> 15Ë- (
X0
 * 
	`ST010_Sö
(Theta) >> 15);

306 
	}
}

308 
	$SETA_Di°™˚
(
Y0
, 
X0
, &
Di°™˚
)

310 i‡(
X0
 < 0) X0 = -X0;

311 i‡(
Y0
 < 0) Y0 = -Y0;

312 
Di°™˚
 = ((
X0
 * 0x7af0) + 0x4000) >> 15;

313 
	}
}

315 
	$ST010_S‹tDrivîs
(
uöt16
 
Posôi⁄s
, uöt16 
Pœ˚s
[32], uöt16 
Drivîs
[32])

317 
boﬁ
 
S‹ãd
;

318 
uöt16
 
Temp
;

320 i‡(
Posôi⁄s
 > 1)

322 
S‹ãd
 = 
åue
;

323 
i
 = 0; i < 
Posôi⁄s
 - 1; i++)

324 i‡(
Pœ˚s
[
i
] < Places[i + 1])

326 
Temp
 = 
Pœ˚s
[
i
 + 1];

327 
Pœ˚s
[
i
 + 1] = Places[i];

328 
Pœ˚s
[
i
] = 
Temp
;

330 
Temp
 = 
Drivîs
[
i
 + 1];

331 
Drivîs
[
i
 + 1] = Drivers[i];

332 
Drivîs
[
i
] = 
Temp
;

334 
S‹ãd
 = 
Ál£
;

336 
Posôi⁄s
--;

337 } !
S‹ãd
);

338 
	}
}

340 
	#ST010_WORD
(
off£t
Ë(
Mem‹y
.
SRAM
[off£à+ 1] << 8Ë| Mem‹y.SRAM[off£t]

	)

342 
	$S9xSëST010
(
uöt32
 
Addªss
, 
uöt8
 
Byã
)

344 if(!(
Addªss
&0x80000))

346 
ST010
.
c⁄åﬁ_íabÀ
=
TRUE
;

351 if((
Addªss
 &0xFFFË==0x20 && 
ST010
.
c⁄åﬁ_íabÀ
)

352 
ST010
.
›_ªg
=
Byã
;

353 if((
Addªss
 &0xFFFË==0x21 && 
ST010
.
c⁄åﬁ_íabÀ
)

354 
ST010
.
execuã
=
Byã
;

355 
Mem‹y
.
SRAM
[
Addªss
&
CPU
.
Mem‹y_SRAMMask
]=
Byã
;

357 if(
ST010
.
execuã
&0x80)

359 
ST010
.
›_ªg
)

373 #ifde‡
FAST_LSB_WORD_ACCESS


374 
	`ST010_S‹tDrivîs
(*(*)&
SRAM
[0x0024], (
uöt16
*) (SRAM + 0x0040), (uint16*) (SRAM + 0x0080));

376 
uöt16
 
Pœ˚s
[32];

377 
uöt16
 
Posôi⁄s
 = 
	`ST010_WORD
(0x0024);

378 
Pos
, 
Off£t
;

380 
Off£t
 = 0;

382 
Pos
 = 0; Po†< 
Posôi⁄s
; Pos++)

384 
Pœ˚s
[
Pos
] = 
	`ST010_WORD
(0x0040 + 
Off£t
);

385 
Off£t
 += 2;

388 
	`ST010_S‹tDrivîs
(
Posôi⁄s
, 
Pœ˚s
, (
uöt16
*Ë(
SRAM
 + 0x0080));

390 
Off£t
 = 0;

392 
Pos
 = 0; Po†< 
Posôi⁄s
; Pos++)

394 
SRAM
[0x0040 + 
Off£t
]=(
uöt8
)(
Pœ˚s
[
Pos
]);

395 
SRAM
[0x0041 + 
Off£t
]=(
uöt8
)(
Pœ˚s
[
Pos
] >> 8);

396 
Off£t
 += 2;

415 #ifde‡
FAST_LSB_WORD_ACCESS


416 
	`ST010_SˇÀ
(*(*)&
Mem‹y
.
SRAM
[0x0004], *(*)&Memory.SRAM[0x0000], *(*)&Memory.SRAM[0x0002],

417 (&Ë
Mem‹y
.
SRAM
[0x0010], (&) Memory.SRAM[0x0014]);

419 
x1
, 
y1
;

421 
	`ST010_SˇÀ
(
	`ST010_WORD
(0x0004), ST010_WORD(0x0000), ST010_WORD(0x0002), 
x1
, 
y1
);

423 
Mem‹y
.
SRAM
[0x0010]=(
uöt8
)(
x1
);

424 
Mem‹y
.
SRAM
[0x0011]=(
uöt8
)(
x1
 >> 8);

425 
Mem‹y
.
SRAM
[0x0012]=(
uöt8
)(
x1
 >> 16);

426 
Mem‹y
.
SRAM
[0x0013]=(
uöt8
)(
x1
 >> 24);

427 
Mem‹y
.
SRAM
[0x0014]=(
uöt8
)(
y1
);

428 
Mem‹y
.
SRAM
[0x0015]=(
uöt8
)(
y1
 >> 8);

429 
Mem‹y
.
SRAM
[0x0016]=(
uöt8
)(
y1
 >> 16);

430 
Mem‹y
.
SRAM
[0x0017]=(
uöt8
)(
y1
 >> 24);

445 #ifde‡
FAST_LSB_WORD_ACCESS


446 
	`ST010_Mu…ùly
(*(*)&
Mem‹y
.
SRAM
[0x0000], *(*)&Memory.SRAM[0x0002], (&) Memory.SRAM[0x0010]);

448 
Produ˘
;

450 
	`ST010_Mu…ùly
(
	`ST010_WORD
(0x0000), ST010_WORD(0x0002), 
Produ˘
);

452 
Mem‹y
.
SRAM
[0x0010]=(
uöt8
)(
Produ˘
);

453 
Mem‹y
.
SRAM
[0x0011]=(
uöt8
)(
Produ˘
 >> 8);

454 
Mem‹y
.
SRAM
[0x0012]=(
uöt8
)(
Produ˘
 >> 16);

455 
Mem‹y
.
SRAM
[0x0013]=(
uöt8
)(
Produ˘
 >> 24);

472 
öt16
 
d©a
;

473 
öt32
 
off£t
 = 0;

474 
öt16
 
Thëa
 = 
	`ST010_WORD
(0x0000);

476 
öt32
 
löe
 = 0;Üine < 176;Üine++)

479 
d©a
 = 
ST010_M7SˇÀ
[
löe
] * 
	`ST010_Cos
(
Thëa
) >> 15;

481 
Mem‹y
.
SRAM
[0x00f0 + 
off£t
]=(
uöt8
)(
d©a
);

482 
Mem‹y
.
SRAM
[0x00f1 + 
off£t
]=(
uöt8
)(
d©a
 >> 8);

483 
Mem‹y
.
SRAM
[0x0510 + 
off£t
]=(
uöt8
)(
d©a
);

484 
Mem‹y
.
SRAM
[0x0511 + 
off£t
]=(
uöt8
)(
d©a
 >> 8);

487 
d©a
 = 
ST010_M7SˇÀ
[
löe
] * 
	`ST010_Sö
(
Thëa
) >> 15;

489 
Mem‹y
.
SRAM
[0x0250 + 
off£t
]=(
uöt8
)(
d©a
);

490 
Mem‹y
.
SRAM
[0x0251 + 
off£t
]=(
uöt8
)(
d©a
 >> 8);

492 i‡(
d©a
) data = ~data;

494 
Mem‹y
.
SRAM
[0x03b0 + 
off£t
]=(
uöt8
)(
d©a
);

495 
Mem‹y
.
SRAM
[0x03b1 + 
off£t
]=(
uöt8
)(
d©a
 >> 8);

497 
off£t
 += 2;

501 
Mem‹y
.
SRAM
[0x00] = Memory.SRAM[0x01];

502 
Mem‹y
.
SRAM
[0x01] = 0x00;

519 #ifde‡
FAST_LSB_WORD_ACCESS


520 
	`ST010_RŸ©e
(*(*)&
Mem‹y
.
SRAM
[0x0004], *(*)&Memory.SRAM[0x0000], *(*)&Memory.SRAM[0x0002],

521 (&Ë
Mem‹y
.
SRAM
[0x0010], (&) Memory.SRAM[0x0012]);

523 
x1
, 
y1
;

525 
	`ST010_RŸ©e
(
	`ST010_WORD
(0x0004), ST010_WORD(0x0000), ST010_WORD(0x0002), 
x1
, 
y1
);

527 
Mem‹y
.
SRAM
[0x0010]=(
uöt8
)(
x1
);

528 
Mem‹y
.
SRAM
[0x0011]=(
uöt8
)(
x1
 >> 8);

529 
Mem‹y
.
SRAM
[0x0012]=(
uöt8
)(
y1
);

530 
Mem‹y
.
SRAM
[0x0013]=(
uöt8
)(
y1
 >> 8);

543 
Mem‹y
.
SRAM
[0x0006] = Memory.SRAM[0x0002];

544 
Mem‹y
.
SRAM
[0x0007] = Memory.SRAM[0x0003];

546 #ifde‡
FAST_LSB_WORD_ACCESS


547 
	`ST010_OP01
(*(*)&
Mem‹y
.
SRAM
[0x0000], *(*)&Memory.SRAM[0x0002],

548 (&Ë
Mem‹y
.
SRAM
[0x0000], (&) Memory.SRAM[0x0002],

549 (&Ë
Mem‹y
.
SRAM
[0x0004], (&) Memory.SRAM[0x0010]);

551 
x1
, 
y1
, 
Quadø¡
, 
Thëa
;

553 
	`ST010_OP01
(
	`ST010_WORD
(0x0000), ST010_WORD(0x0002), 
x1
, 
y1
, 
Quadø¡
, 
Thëa
);

555 
Mem‹y
.
SRAM
[0x0000]=(
uöt8
)(
x1
);

556 
Mem‹y
.
SRAM
[0x0001]=(
uöt8
)(
x1
 >> 8);

557 
Mem‹y
.
SRAM
[0x0002]=(
uöt8
)(
y1
);

558 
Mem‹y
.
SRAM
[0x0003]=(
uöt8
)(
y1
 >> 8);

559 
Mem‹y
.
SRAM
[0x0004]=(
uöt8
)(
Quadø¡
);

560 
Mem‹y
.
SRAM
[0x0005]=(
uöt8
)(
Quadø¡
 >> 8);

561 
Mem‹y
.
SRAM
[0x0010]=(
uöt8
)(
Thëa
);

562 
Mem‹y
.
SRAM
[0x0011]=(
uöt8
)(
Thëa
 >> 8);

570 
öt16
 
squ¨e
, 
x
,
y
;

571 #ifde‡
FAST_LSB_WORD_ACCESS


572 
x
=*((
öt16
*)
Mem‹y
.
SRAM
);

573 
y
=*((
öt16
*)&
Mem‹y
.
SRAM
[2]);

575 
x
=
Mem‹y
.
SRAM
[0]|(Memory.SRAM[1]<<8);

576 
y
=
Mem‹y
.
SRAM
[2]|(Memory.SRAM[3]<<8);

578 
squ¨e
=(
öt16
)
	`sqπ
(()(
y
*y+
x
*x));

581 #ifde‡
FAST_LSB_WORD_ACCESS


582 *((
öt16
*)&
Mem‹y
.
SRAM
[0x10])=
squ¨e
;

584 
Mem‹y
.
SRAM
[0x10]=(
uöt8
)(
squ¨e
);

585 
Mem‹y
.
SRAM
[0x11]=(
uöt8
)(
squ¨e
>>8);

593 
dx
,
dy
;

594 
öt16
 
a1
,
b1
,
c1
;

595 
uöt16
 
o1
;

597 
boﬁ
 
wøp
=
Ál£
;

600 
öt16
 
ypos_max
 = 
	`ST010_WORD
(0x00C0);

601 
öt16
 
xpos_max
 = 
	`ST010_WORD
(0x00C2);

604 
öt32
 
ypos
 = 
SRAM
[0xC4]|(SRAM[0xC5]<<8)|(SRAM[0xC6]<<16)|(SRAM[0xC7]<<24);

605 
öt32
 
xpos
 = 
SRAM
[0xC8]|(SRAM[0xC9]<<8)|(SRAM[0xCA]<<16)|(SRAM[0xCB]<<24);

606 
uöt16
 
rŸ
 = 
SRAM
[0xCC]|(SRAM[0xCD]<<8);

609 
uöt16
 
•ìd
 = 
	`ST010_WORD
(0x00D4);

610 
uöt16
 
ac˚l
 = 
	`ST010_WORD
(0x00D6);

611 
uöt16
 
•ìd_max
 = 
	`ST010_WORD
(0x00D8);

614 
öt16
 
sy°em
 = 
	`ST010_WORD
(0x00DA);

615 
öt16
 
Êags
 = 
	`ST010_WORD
(0x00DC);

618 
öt16
 
ypos_√w
 = 
	`ST010_WORD
(0x00DE);

619 
öt16
 
xpos_√w
 = 
	`ST010_WORD
(0x00E0);

622 
xpos_√w
 &= 0x7FFF;

625 
dx
 = 
xpos_max
-(
xpos
>>16);

626 
dy
 = 
ypos_max
-(
ypos
>>16);

629 
SRAM
[0xD2]=0xFF;

630 
SRAM
[0xD3]=0xFF;

631 
SRAM
[0xDA]=0;

632 
SRAM
[0xDB]=0;

635 
	`ST010_OP01
(
dy
,
dx
,
a1
,
b1
,
c1
,(
öt16
 &)
o1
);

641 if(
	`abs
(
o1
-
rŸ
)>0x8000)

643 
o1
+=0x8000;

644 
rŸ
+=0x8000;

645 
wøp
=
åue
;

650 
uöt16
 
ﬁd_•ìd
;

652 
ﬁd_•ìd
 = 
•ìd
;

655 if(
	`abs
(
o1
-
rŸ
)==0x8000)

657 
•ìd
 = 0x100;

660 if(
	`abs
(
o1
-
rŸ
)>=0x1000)

662 
uöt32
 
¶ow
 = 
	`abs
(
o1
-
rŸ
);

663 
¶ow
 >>= 4;

664 
•ìd
 -
¶ow
;

669 
•ìd
 +
ac˚l
;

670 if(
•ìd
 > 
•ìd_max
)

673 
•ìd
 = 
•ìd_max
;

678 if(
	`abs
(
ﬁd_•ìd
-
•ìd
)>0x8000) {

679 if(
ﬁd_•ìd
<
•ìd
) speed=0;

680 
•ìd
=0xff00;

685 if–(
o1
>
rŸ
 && (o1-rot)>0x80) ||

686 (
o1
<
rŸ
 && (rot-o1)>=0x80) )

688 if(
o1
<
rŸ
)Ñot-=0x280;

689 if(
o1
>
rŸ
)Ñot+=0x280;

693 if(
wøp
Ë
rŸ
-=0x8000;

696 
dx
 = (
xpos_max
<<16)-
xpos
;

697 
dy
 = (
ypos_max
<<16)-
ypos
;

698 
dx
>>=16;

699 
dy
>>=16;

702 if––
sy°em
 && (
dy
<=6 && dy>=-8Ë&& (
dx
<=126 && dx>=-128)) ||

703 (!
sy°em
 && (
dx
<=6 && dx>=-8Ë&& (
dy
<=126 && dy>=-128)) )

706 
xpos_max
 = 
xpos_√w
&0x7FFF;

707 
ypos_max
 = 
ypos_√w
;

708 
Êags
 |= 0x08;

712 
xpos
 -(
	`ST010_Cos
(
rŸ
Ë* 0x400 >> 15Ë* (
•ìd
 >> 8) << 1;

713 
ypos
 -(
	`ST010_Sö
(
rŸ
Ë* 0x400 >> 15Ë* (
•ìd
 >> 8) << 1;

716 
xpos
 &= 0x1FFFFFFF;

717 
ypos
 &= 0x1FFFFFFF;

719 
SRAM
[0x00C0]=(
uöt8
)(
ypos_max
);

720 
SRAM
[0x00C1]=(
uöt8
)(
ypos_max
 >> 8);

721 
SRAM
[0x00C2]=(
uöt8
)(
xpos_max
);

722 
SRAM
[0x00C3]=(
uöt8
)(
xpos_max
 >> 8);

723 
SRAM
[0x00C4]=(
uöt8
)(
ypos
);

724 
SRAM
[0x00C5]=(
uöt8
)(
ypos
 >> 8);

725 
SRAM
[0x00C6]=(
uöt8
)(
ypos
 >> 16);

726 
SRAM
[0x00C7]=(
uöt8
)(
ypos
 >> 24);

727 
SRAM
[0x00C8]=(
uöt8
)(
xpos
);

728 
SRAM
[0x00C9]=(
uöt8
)(
xpos
 >> 8);

729 
SRAM
[0x00CA]=(
uöt8
)(
xpos
 >> 16);

730 
SRAM
[0x00CB]=(
uöt8
)(
xpos
 >> 24);

731 
SRAM
[0x00CC]=(
uöt8
)(
rŸ
);

732 
SRAM
[0x00CD]=(
uöt8
)(
rŸ
 >> 8);

733 
SRAM
[0x00D4]=(
uöt8
)(
•ìd
);

734 
SRAM
[0x00D5]=(
uöt8
)(
•ìd
 >> 8);

735 
SRAM
[0x00DC]=(
uöt8
)(
Êags
);

736 
SRAM
[0x00DD]=(
uöt8
)(
Êags
 >> 8);

742 
	`¥ötf
("Unknown Op\n");

747 
ST010
.
›_ªg
=0;

748 
ST010
.
execuã
=0;

750 
	}
}

	@seta011.cpp

89 
	~<°dio.h
>

90 
	~"p‹t.h
"

91 
	~"£è.h
"

92 
	~"memm≠.h
"

94 
ST011_Regs
 
	gST011
;

97 
uöt8
 
	gbﬂrd
[9][9];

100 
	glöe
 = 0;

102 
uöt8
 
	$S9xGëST011
(
uöt32
 
Addªss
)

104 
uöt8
 
t
;

105 
uöt16
 
addªss
 = (uöt16Ë
Addªss
 & 0xFFFF;

108 
löe
++;

111 i‡(
addªss
 == 0x01)

113 
t
 = 0xFF;

118 
t
 = 
Mem‹y
.
SRAM
[
addªss
];

125  
t
;

126 
	}
}

128 
	$S9xSëST011
(
uöt32
 
Addªss
, 
uöt8
 
Byã
)

130 
uöt16
 
addªss
 = (uöt16Ë
Addªss
 & 0xFFFF;

131 
boﬁ
 
ª£t
 = 
Ál£
;

134 
löe
++;

136 if(!
ª£t
)

139 
ST011
.
waôög4comm™d
 = 
åue
;

140 
ª£t
 = 
åue
;

147 
Mem‹y
.
SRAM
[
addªss
]=
Byã
;

150 if(
addªss
==0x00)

153 i‡(
ST011
.
waôög4comm™d
)

155 
ST011
.
waôög4comm™d
 = 
Ál£
;

156 
ST011
.
comm™d
 = 
Byã
;

157 
ST011
.
ö_ödex
 = 0;

158 
ST011
.
out_ödex
 = 0;

159 
ST011
.
comm™d
)

161 0x01: 
ST011
.
ö_cou¡
 = 12*10+8; ;

162 0x02: 
ST011
.
ö_cou¡
 = 4; ;

163 0x04: 
ST011
.
ö_cou¡
 = 0; ;

164 0x05: 
ST011
.
ö_cou¡
 = 0; ;

165 0x06: 
ST011
.
ö_cou¡
 = 0; ;

166 0x07: 
ST011
.
ö_cou¡
 = 0; ;

167 0x0E: 
ST011
.
ö_cou¡
 = 0; ;

168 : 
ST011
.
waôög4comm™d
=
åue
; ;

173 
ST011
.
∑ømëîs
 [ST011.
ö_ödex
] = 
Byã
;

174 
ST011
.
ö_ödex
++;

178 i‡(
ST011
.
ö_cou¡
==ST011.
ö_ödex
)

181 
ST011
.
waôög4comm™d
 = 
åue
;

182 
ST011
.
out_ödex
 = 0;

183 
ST011
.
comm™d
)

190  
lcv
=0;Ücv<9;Ücv++ )

191 
	`mem˝y
–
bﬂrd
[
lcv
], 
ST011
.
∑ømëîs
+lcv*10, 9*1 );

202 
Mem‹y
.
SRAM
[0x12C] = 0x00;

204 
Mem‹y
.
SRAM
[0x12E] = 0x00;

212 
Mem‹y
.
SRAM
[0x12C] = 0x00;

214 
Mem‹y
.
SRAM
[0x12E] = 0x00;

226 
Mem‹y
.
SRAM
[0x12C] = 0x00;

227 
Mem‹y
.
SRAM
[0x12D] = 0x00;

232 
	}
}

	@seta018.cpp

89 
	~"memm≠.h
"

90 
	~"£è.h
"

93 
ST018_Regs
 
	gST018
;

95 
	glöe
;

98 
uöt8
 
S9xGëST018
(
uöt32
 
Addªss
)

100 
uöt8
 
t
 = 0;

101 
uöt16
 
addªss
 = (uöt16Ë
Addªss
 & 0xFFFF;

103 
löe
++;

107 i‡(
addªss
 == 0x3804)

109 i‡(
ST018
.
out_cou¡
)

111 
t
 = (
uöt8
Ë
ST018
.
ouçut
 [ST018.
out_ödex
];

112 
ST018
.
out_ödex
++;

113 i‡(
ST018
.
out_cou¡
==ST018.
out_ödex
)

114 
ST018
.
out_cou¡
=0;

117 
t
 = 0x81;

120 i‡(
addªss
 == 0x3800)

121 
t
 = 
ST018
.
°©us
;

123 
¥ötf
–"ST018 R: %06X %02X\n", 
Addªss
, 
t
);

125  
t
;

128 
S9xSëST018
(
uöt8
 
Byã
, 
uöt32
 
Addªss
)

130 
uöt16
 
addªss
 = (uöt16Ë
Addªss
&0xFFFF;

131 
boﬁ
 
ª£t
 = 
Ál£
;

133 
¥ötf
–"ST018 W: %06X %02X\n", 
Addªss
, 
Byã
 );

135 
löe
++;

137 i‡(!
ª£t
)

140 
ST018
.
waôög4comm™d
 = 
åue
;

141 
ST018
.
∑π_comm™d
 = 0;

142 
ª£t
 = 
åue
;

145 
Mem‹y
.
SRAM
[
addªss
]=
Byã
;

148 
ST018
.
°©us
 = 0x00;

151 i‡(
addªss
==0x3804)

154 if(
ST018
.
waôög4comm™d
 && ST018.
∑π_comm™d
==2)

156 
ST018
.
waôög4comm™d
 = 
Ál£
;

157 
ST018
.
comm™d
 <<= 8;

158 
ST018
.
comm™d
 |
Byã
;

159 
ST018
.
ö_ödex
 = 0;

160 
ST018
.
out_ödex
 = 0;

161 
ST018
.
∑π_comm™d
 = 0;

162 
ST018
.
∑ss
 = 0;

163 
ST018
.
comm™d
 & 0xFFFFFF)

165 0x0100: 
ST018
.
ö_cou¡
 = 0; ;

166 0xFF00: 
ST018
.
ö_cou¡
 = 0; ;

167 : 
ST018
.
waôög4comm™d
 = 
åue
; ;

170 if(
ST018
.
waôög4comm™d
)

173 
ST018
.
∑π_comm™d
++;

174 
ST018
.
comm™d
 <<= 8;

175 
ST018
.
comm™d
 |
Byã
;

179 i‡(
addªss
==0x3802)

181 
ST018
.
∑ømëîs
[ST018.
ö_ödex
] = 
Byã
;

182 
ST018
.
ö_ödex
++;

185 i‡(
ST018
.
ö_cou¡
==ST018.
ö_ödex
)

188 
ST018
.
waôög4comm™d
 = 
åue
;

189 
ST018
.
ö_ödex
 = 0;

190 
ST018
.
out_ödex
 = 0;

191 
ST018
.
comm™d
)

195 
ST018
.
waôög4comm™d
 = 
Ál£
;

196 
ST018
.
∑ss
++;

197 i‡(
ST018
.
∑ss
==1)

199 
ST018
.
ö_cou¡
 = 1;

200 
ST018
.
out_cou¡
 = 2;

203 
ST018
.
ouçut
[0x00] = 0x81;

204 
ST018
.
ouçut
[0x01] = 0x81;

209 
ST018
.
out_cou¡
 = 3;

214 
ST018
.
ouçut
[0x02] = 0x81;

217 i‡(
ST018
.
∑ss
==3)

218 
ST018
.
waôög4comm™d
 = 
åue
;

225 
ST018
.
waôög4comm™d
 = 
Ál£
;

226 
ST018
.
∑ss
++;

227 i‡(
ST018
.
∑ss
==1)

229 
ST018
.
ö_cou¡
 = 1;

230 
ST018
.
out_cou¡
 = 2;

233 
ST018
.
ouçut
[0x00] = 0x81;

234 
ST018
.
ouçut
[0x01] = 0x81;

239 
ST018
.
out_cou¡
 = 3;

244 
ST018
.
ouçut
[0x02] = 0x81;

247 i‡(
ST018
.
∑ss
==3)

248 
ST018
.
waôög4comm™d
 = 
åue
;

	@snaporig.cpp

41 
	~<°rög.h
>

42 
	~<˘y≥.h
>

43 
	~<°dlib.h
>

45 #i‡
deföed
(
__unix
Ë|| deföed(
__löux
Ë|| deföed(
__sun
Ë|| deföed(
__DJGPP
)

47 
	~<sys/ty≥s.h
>

48 
	~<sys/°©.h
>

51 
	~"¢≠shŸ.h
"

52 
	~"¢≠‹ig.h
"

53 
	~"memm≠.h
"

54 
	~"¢es9x.h
"

55 
	~"65c816.h
"

56 
	~"µu.h
"

57 
	~"˝uexec.h
"

58 
	~"di•œy.h
"

59 
	~"≠u.h
"

60 
	~"soundux.h
"

62 
SOrigPPU
 
	gOrigPPU
;

63 
SOrigDMA
 
	gOrigDMA
 [8];

64 
SOrigRegi°îs
 
	gOrigRegi°îs
;

65 
SOrigCPUSèã
 
	gOrigCPU
;

66 
SOrigAPU
 
	gOrigAPU
;

67 
SOrigSoundD©a
 
	gOrigSoundD©a
;

68 
SOrigAPURegi°îs
 
	gOrigAPURegi°îs
;

69 
	gROMFûíame
 [1025];

71 
RódOrigS«pshŸ
 (
STREAM
);

73 
boﬁ8_32
 
	$S9xLﬂdOrigS«pshŸ
 (c⁄° *
fûíame
)

75 
STREAM
 
¢≠shŸ
 = 
NULL
;

76 i‡(
	`S9xO≥nS«pshŸFûe
 (
fûíame
, 
TRUE
, &
¢≠shŸ
))

78 
ªsu…
;

79 i‡((
ªsu…
 = 
	`RódOrigS«pshŸ
 (
¢≠shŸ
)Ë!
SUCCESS
)

81 
	`S9xClo£S«pshŸFûe
 (
¢≠shŸ
);

82  (
FALSE
);

84 
	`S9xClo£S«pshŸFûe
 (
¢≠shŸ
);

85  (
TRUE
);

87  (
FALSE
);

88 
	}
}

90 #ifde‡
_SNESPPC


91 #¥agm®
w¨nög
(
dißbÀ
 : 4018)

93 
	$RódBlock
 (c⁄° *
key
, *
block
, 
max_Àn
, 
STREAM
 
¢≠
)

95 
buf„r
 [20];

96 
Àn
 = 0;

97 
ªm
 = 0;

99 i‡(
	`READ_STREAM
 (
buf„r
, 11, 
¢≠
) != 11 ||

100 
	`°∫cmp
 (
buf„r
, 
key
, 4) != 0 ||

101 (
Àn
 = 
	`©oi
 (&
buf„r
 [4])) == 0)

102  (
WRONG_FORMAT
);

104 i‡(
Àn
 > 
max_Àn
)

106 
ªm
 = 
Àn
 - 
max_Àn
;

107 
Àn
 = 
max_Àn
;

109 i‡(
	`READ_STREAM
 (
block
, 
Àn
, 
¢≠
) !=Üen)

110  (
WRONG_FORMAT
);

112 i‡(
ªm
)

114 *
junk
 = 
√w
 [
ªm
];

115 
	`READ_STREAM
 (
junk
, 
ªm
, 
¢≠
);

116 
dñëe
 
junk
;

119  (
SUCCESS
);

120 
	}
}

122 
	$RódOrigS«pshŸ
 (
STREAM
 
¢≠
)

124 
buf„r
 [
_MAX_PATH
];

125 
rom_fûíame
 [
_MAX_PATH
];

126 
ªsu…
;

127 
i
;

128 
j
;

130 
vîsi⁄
;

131 
Àn
 = 
	`°æí
 (
ORIG_SNAPSHOT_MAGIC
) + 1 + 4 + 1;

132 i‡(
	`READ_STREAM
 (
buf„r
, 
Àn
, 
¢≠
) !=Üen)

133  (
WRONG_FORMAT
);

134 i‡(
	`°∫cmp
 (
buf„r
, 
ORIG_SNAPSHOT_MAGIC
, 
	`°æí
 (ORIG_SNAPSHOT_MAGIC)) != 0)

135  (
WRONG_FORMAT
);

136 i‡((
vîsi⁄
 = 
	`©oi
 (&
buf„r
 [
	`°æí
 (
SNAPSHOT_MAGIC
Ë+ 1])Ë> 
ORIG_SNAPSHOT_VERSION
)

137  (
WRONG_VERSION
);

139 i‡((
ªsu…
 = 
	`RódBlock
 ("NAM:", 
rom_fûíame
, 
_MAX_PATH
, 
¢≠
)Ë!
SUCCESS
)

140  (
ªsu…
);

142 i‡((
ªsu…
 = 
	`RódBlock
 ("HiR:", 
buf„r
, 0x41, 
¢≠
)Ë!
SUCCESS
)

143  (
ªsu…
);

145 i‡(
	`°rˇ£cmp
 (
rom_fûíame
, 
Mem‹y
.
ROMFûíame
) != 0 &&

146 
	`°rˇ£cmp
 (
	`S9xBa£«me
 (
rom_fûíame
), S9xBa£«mê(
Mem‹y
.
ROMFûíame
)) != 0)

148 
	`S9xMesßge
 (
S9X_WARNING
, 
S9X_FREEZE_ROM_NAME
,

152 
	`S9xRe£t
 ();

153 
	`S9xSëSoundMuã
 (
TRUE
);

154 i‡((
ªsu…
 = 
	`RódBlock
 ("CPU:", &
OrigCPU
,  (OrigCPU), 
¢≠
)Ë!
SUCCESS
)

155  (
ªsu…
);

156 
OrigCPU
.
Fa°ROMS≥ed
 = OrigCPU.
Fa°ROMS≥ed_ﬁd
;

157 
Mem‹y
.
	`FixROMS≥ed
 ();

158 i‡(
vîsi⁄
 == 3)

160 
OrigCPU
.
Cy˛es
 = OrigCPU.
Cy˛es_ﬁd
;

161 
OrigCPU
.
NextEvít
 = OrigCPU.
NextEvít_ﬁd
;

162 
OrigCPU
.
V_Cou¡î
 = OrigCPU.
V_Cou¡î_ﬁd
;

163 
OrigCPU
.
MemS≥ed
 = OrigCPU.
MemS≥ed_ﬁd
;

164 
OrigCPU
.
MemS≥edx2
 = OrigCPU.
MemS≥edx2_ﬁd
;

165 
OrigCPU
.
Fa°ROMS≥ed
 = OrigCPU.
Fa°ROMS≥ed_ﬁd
;

167 
CPU
.
Fœgs
 = 
OrigCPU
.Flags;

168 
CPU
.
BønchSkù
 = 
OrigCPU
.BranchSkip;

169 
CPU
.
NMIA˘ive
 = 
OrigCPU
.NMIActive;

170 
CPU
.
IRQA˘ive
 = 
OrigCPU
.IRQActive;

171 
CPU
.
WaôögF‹I¡îru±
 = 
OrigCPU
.WaitingForInterrupt;

172 
CPU
.
WhichEvít
 = 
OrigCPU
.WhichEvent;

173 
CPU
.
Cy˛es
 = 
OrigCPU
.Cycles;

174 
CPU
.
NextEvít
 = 
OrigCPU
.NextEvent;

175 
CPU
.
V_Cou¡î
 = 
OrigCPU
.V_Counter;

176 
CPU
.
MemS≥ed
 = 
OrigCPU
.MemSpeed;

177 
CPU
.
MemS≥edx2
 = 
OrigCPU
.MemSpeedx2;

178 
CPU
.
Fa°ROMS≥ed
 = 
OrigCPU
.FastROMSpeed;

180 i‡((
ªsu…
 = 
	`RódBlock
 ("REG:", &
OrigRegi°îs
,  (OrigRegi°îs), 
¢≠
)Ë!
SUCCESS
)

181  (
ªsu…
);

183 
Regi°îs
 = *(
SRegi°îs
 *Ë&
OrigRegi°îs
;

185 i‡((
ªsu…
 = 
	`RódBlock
 ("PPU:", &
OrigPPU
,  (OrigPPU), 
¢≠
)Ë!
SUCCESS
)

186  (
ªsu…
);

188 i‡(
vîsi⁄
 == 2)

190 
OrigPPU
.
OBJNameSñe˘
 = OrigPPU.
OBJNameSñe˘_ﬁd
 << 13;

191 
OrigPPU
.
OBJNameBa£
 <<= 1;

192 
OrigPPU
.
OBJNameSñe˘
 <<= 13;

194 
PPU
.
BGMode
 = 
OrigPPU
.BGMode;

195 
PPU
.
BG3Pri‹ôy
 = 
OrigPPU
.BG3Priority;

196 
PPU
.
Brighäess
 = 
OrigPPU
.Brightness;

198 
PPU
.
VMA
.
High
 = 
OrigPPU
.VMA.High;

199 
PPU
.
VMA
.
In¸emít
 = 
OrigPPU
.VMA.Increment;

200 
PPU
.
VMA
.
Addªss
 = 
OrigPPU
.VMA.Address;

201 
PPU
.
VMA
.
Mask1
 = 
OrigPPU
.VMA.Mask1;

202 
PPU
.
VMA
.
FuŒGøphicCou¡
 = 
OrigPPU
.VMA.FullGraphicCount;

203 
PPU
.
VMA
.
Shi·
 = 
OrigPPU
.VMA.Shift;

205 
i
 = 0; i < 4; i++)

207 
PPU
.
BG
[
i
].
SCBa£
 = 
OrigPPU
.BG[i].SCBase;

208 
PPU
.
BG
[
i
].
VOff£t
 = 
OrigPPU
.BG[i].VOffset;

209 
PPU
.
BG
[
i
].
HOff£t
 = 
OrigPPU
.BG[i].HOffset;

210 
PPU
.
BG
[
i
].
BGSize
 = 
OrigPPU
.BG[i].BGSize;

211 
PPU
.
BG
[
i
].
NameBa£
 = 
OrigPPU
.BG[i].NameBase;

212 
PPU
.
BG
[
i
].
SCSize
 = 
OrigPPU
.BG[i].SCSize;

215 
PPU
.
CGFLIP
 = 
OrigPPU
.CGFLIP;

216 
i
 = 0; i < 256; i++)

217 
PPU
.
CGDATA
 [
i
] = 
OrigPPU
.CGDATA [i];

218 
PPU
.
Fú°S¥ôe
 = 
OrigPPU
.FirstSprite;

219 
i
 = 0; i < 128; i++)

221 
PPU
.
OBJ
[
i
].
HPos
 = 
OrigPPU
.OBJ [i].HPos;

222 
PPU
.
OBJ
[
i
].
VPos
 = 
OrigPPU
.OBJ [i].VPos;

223 
PPU
.
OBJ
[
i
].
Name
 = 
OrigPPU
.OBJ [i].Name;

224 
PPU
.
OBJ
[
i
].
VFlù
 = 
OrigPPU
.OBJ [i].VFlip;

225 
PPU
.
OBJ
[
i
].
HFlù
 = 
OrigPPU
.OBJ [i].HFlip;

226 
PPU
.
OBJ
[
i
].
Pri‹ôy
 = 
OrigPPU
.OBJ [i].Priority;

227 
PPU
.
OBJ
[
i
].
PÆëã
 = 
OrigPPU
.OBJ [i].Palette;

228 
PPU
.
OBJ
[
i
].
Size
 = 
OrigPPU
.OBJ [i].Size;

230 
PPU
.
OAMPri‹ôyRŸ©i⁄
 = 
OrigPPU
.OAMPriorityRotation;

231 
PPU
.
OAMAddr
 = 
OrigPPU
.OAMAddr;

233 
PPU
.
OAMFlù
 = 
OrigPPU
.OAMFlip;

234 
PPU
.
OAMTûeAddªss
 = 
OrigPPU
.OAMTileAddress;

235 
PPU
.
IRQVBómPos
 = 
OrigPPU
.IRQVBeamPos;

236 
PPU
.
IRQHBómPos
 = 
OrigPPU
.IRQHBeamPos;

237 
PPU
.
VBómPosL©ched
 = 
OrigPPU
.VBeamPosLatched;

238 
PPU
.
HBómPosL©ched
 = 
OrigPPU
.HBeamPosLatched;

240 
PPU
.
HBómFlù
 = 
OrigPPU
.HBeamFlip;

241 
PPU
.
VBómFlù
 = 
OrigPPU
.VBeamFlip;

242 
PPU
.
HVBómCou¡îL©ched
 = 
OrigPPU
.HVBeamCounterLatched;

244 
PPU
.
M©rixA
 = 
OrigPPU
.MatrixA;

245 
PPU
.
M©rixB
 = 
OrigPPU
.MatrixB;

246 
PPU
.
M©rixC
 = 
OrigPPU
.MatrixC;

247 
PPU
.
M©rixD
 = 
OrigPPU
.MatrixD;

248 
PPU
.
CíåeX
 = 
OrigPPU
.CentreX;

249 
PPU
.
CíåeY
 = 
OrigPPU
.CentreY;

250 
PPU
.
Joy∑d1Buâ⁄RódPos
 = 
OrigPPU
.Joypad1ButtonReadPos;

251 
PPU
.
Joy∑d2Buâ⁄RódPos
 = 
OrigPPU
.Joypad2ButtonReadPos;

252 
PPU
.
Joy∑d3Buâ⁄RódPos
 = 
OrigPPU
.Joypad3ButtonReadPos;

254 
PPU
.
CGADD
 = 
OrigPPU
.CGADD;

255 
PPU
.
FixedCﬁourRed
 = 
OrigPPU
.FixedColourRed;

256 
PPU
.
FixedCﬁourGªí
 = 
OrigPPU
.FixedColourGreen;

257 
PPU
.
FixedCﬁourBlue
 = 
OrigPPU
.FixedColourBlue;

258 
PPU
.
SavedOAMAddr
 = 
OrigPPU
.SavedOAMAddr;

259 
PPU
.
S¸ìnHeight
 = 
OrigPPU
.ScreenHeight;

260 
PPU
.
WRAM
 = 
OrigPPU
.WRAM;

261 
PPU
.
F‹˚dBœnkög
 = 
OrigPPU
.ForcedBlanking;

262 
PPU
.
OBJNameSñe˘
 = 
OrigPPU
.OBJNameSelect;

263 
PPU
.
OBJSizeSñe˘
 = 
OrigPPU
.OBJSizeSelect;

264 
PPU
.
OBJNameBa£
 = 
OrigPPU
.OBJNameBase;

265 
PPU
.
OAMRódFlù
 = 
OrigPPU
.OAMReadFlip;

266 
	`memmove
 (
PPU
.
OAMD©a
, 
OrigPPU
.OAMData,  (PPU.OAMData));

267 
PPU
.
VTimîE«bÀd
 = 
OrigPPU
.VTimerEnabled;

268 
PPU
.
HTimîE«bÀd
 = 
OrigPPU
.HTimerEnabled;

269 
PPU
.
HTimîPosôi⁄
 = 
OrigPPU
.HTimerPosition;

270 
PPU
.
Moßic
 = 
OrigPPU
.Mosaic;

271 
	`memmove
 (
PPU
.
BGMoßic
, 
OrigPPU
.BGMosaic,  (PPU.BGMosaic));

272 
PPU
.
Mode7HFlù
 = 
OrigPPU
.Mode7HFlip;

273 
PPU
.
Mode7VFlù
 = 
OrigPPU
.Mode7VFlip;

274 
PPU
.
Mode7Rïót
 = 
OrigPPU
.Mode7Repeat;

275 
PPU
.
Wödow1Le·
 = 
OrigPPU
.Window1Left;

276 
PPU
.
Wödow1Right
 = 
OrigPPU
.Window1Right;

277 
PPU
.
Wödow2Le·
 = 
OrigPPU
.Window2Left;

278 
PPU
.
Wödow2Right
 = 
OrigPPU
.Window2Right;

279 
i
 = 0; i < 6; i++)

281 
PPU
.
ClùWödowOvîœpLogic
 [
i
] = 
OrigPPU
.ClipWindowOverlapLogic [i];

282 
PPU
.
ClùWödow1E«bÀ
 [
i
] = 
OrigPPU
.ClipWindow1Enable [i];

283 
PPU
.
ClùWödow2E«bÀ
 [
i
] = 
OrigPPU
.ClipWindow2Enable [i];

284 
PPU
.
ClùWödow1Inside
 [
i
] = 
OrigPPU
.ClipWindow1Inside [i];

285 
PPU
.
ClùWödow2Inside
 [
i
] = 
OrigPPU
.ClipWindow2Inside [i];

287 
PPU
.
CGFLIPRód
 = 
OrigPPU
.CGFLIPRead;

288 
PPU
.
Nìd16x8Mulô∂y
 = 
OrigPPU
.Need16x8Mulitply;

290 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

291 
IPPU
.
OBJCh™ged
 = 
TRUE
;

292 
	`S9xFixCﬁourBrighäess
 ();

293 
IPPU
.
RídîThisFøme
 = 
FALSE
;

295 i‡((
ªsu…
 = 
	`RódBlock
 ("DMA:", 
OrigDMA
,  (OrigDMA), 
¢≠
)Ë!
SUCCESS
)

296  (
ªsu…
);

298 
i
 = 0; i < 8; i++)

300 
DMA
[
i
].
Tøns„rDúe˘i⁄
 = 
OrigDMA
[i].TransferDirection;

301 
DMA
[
i
].
AAddªssFixed
 = 
OrigDMA
[i].AAddressFixed;

302 
DMA
[
i
].
AAddªssDe¸emít
 = 
OrigDMA
[i].AAddressDecrement;

303 
DMA
[
i
].
Tøns„rMode
 = 
OrigDMA
[i].TransferMode;

304 
DMA
[
i
].
AB™k
 = 
OrigDMA
[i].ABank;

305 
DMA
[
i
].
AAddªss
 = 
OrigDMA
[i].AAddress;

306 
DMA
[
i
].
Addªss
 = 
OrigDMA
[i].Address;

307 
DMA
[
i
].
BAddªss
 = 
OrigDMA
[i].BAddress;

308 
DMA
[
i
].
Tøns„rByãs
 = 
OrigDMA
[i].TransferBytes;

309 
DMA
[
i
].
HDMAIndúe˘Addªssög
 = 
OrigDMA
[i].HDMAIndirectAddressing;

310 
DMA
[
i
].
Indúe˘Addªss
 = 
OrigDMA
[i].IndirectAddress;

311 
DMA
[
i
].
Indúe˘B™k
 = 
OrigDMA
[i].IndirectBank;

312 
DMA
[
i
].
Rïót
 = 
OrigDMA
[i].Repeat;

313 
DMA
[
i
].
LöeCou¡
 = 
OrigDMA
[i].LineCount;

314 
DMA
[
i
].
Fú°Löe
 = 
OrigDMA
[i].FirstLine;

317 i‡((
ªsu…
 = 
	`RódBlock
 ("VRA:", 
Mem‹y
.
VRAM
, 0x10000, 
¢≠
)Ë!
SUCCESS
)

318  (
ªsu…
);

319 i‡((
ªsu…
 = 
	`RódBlock
 ("RAM:", 
Mem‹y
.
RAM
, 0x20000, 
¢≠
)Ë!
SUCCESS
)

320  (
ªsu…
);

321 i‡((
ªsu…
 = 
	`RódBlock
 ("SRA:", ::
SRAM
, 0x10000, 
¢≠
)Ë!
SUCCESS
)

322  (
ªsu…
);

323 i‡((
ªsu…
 = 
	`RódBlock
 ("FIL:", 
Mem‹y
.
FûlRAM
, 0x8000, 
¢≠
)Ë!
SUCCESS
)

324  (
ªsu…
);

325 i‡(
	`RódBlock
 ("APU:", &
OrigAPU
,  (OrigAPU), 
¢≠
Ë=
SUCCESS
)

327 
APU
 = *(
SAPU
 *Ë&
OrigAPU
;

329 i‡((
ªsu…
 = 
	`RódBlock
 ("ARE:", &
OrigAPURegi°îs
,

330  (
OrigAPURegi°îs
), 
¢≠
)Ë!
SUCCESS
)

331  (
ªsu…
);

332 
APURegi°îs
 = *(
SAPURegi°îs
 *Ë&
OrigAPURegi°îs
;

333 i‡((
ªsu…
 = 
	`RódBlock
 ("ARA:", 
IAPU
.
RAM
, 0x10000, 
¢≠
)Ë!
SUCCESS
)

334  (
ªsu…
);

335 i‡((
ªsu…
 = 
	`RódBlock
 ("SOU:", &
OrigSoundD©a
,

336  (
SOrigSoundD©a
), 
¢≠
)Ë!
SUCCESS
)

337  (
ªsu…
);

339 
SoundD©a
.
ma°î_vﬁume_À·
 = 
OrigSoundD©a
.master_volume_left;

340 
SoundD©a
.
ma°î_vﬁume_right
 = 
OrigSoundD©a
.master_volume_right;

341 
SoundD©a
.
echo_vﬁume_À·
 = 
OrigSoundD©a
.echo_volume_left;

342 
SoundD©a
.
echo_vﬁume_right
 = 
OrigSoundD©a
.echo_volume_right;

343 
SoundD©a
.
echo_íabÀ
 = 
OrigSoundD©a
.echo_enable;

344 
SoundD©a
.
echo_„edback
 = 
OrigSoundD©a
.echo_feedback;

345 
SoundD©a
.
echo_±r
 = 
OrigSoundD©a
.echo_ptr;

346 
SoundD©a
.
echo_buf„r_size
 = 
OrigSoundD©a
.echo_buffer_size;

347 
SoundD©a
.
echo_wrôe_íabÀd
 = 
OrigSoundD©a
.echo_write_enabled;

348 
SoundD©a
.
echo_ch™√l_íabÀ
 = 
OrigSoundD©a
.echo_channel_enable;

349 
SoundD©a
.
pôch_mod
 = 
OrigSoundD©a
.pitch_mod;

351 
i
 = 0; i < 3; i++)

352 
SoundD©a
.
dummy
 [
i
] = 
OrigSoundD©a
.dummy [i];

353 
i
 = 0; i < 
NUM_CHANNELS
; i++)

355 
SoundD©a
.
ch™√ls
 [
i
].
°©e
 = 
OrigSoundD©a
.channels [i].state;

356 
SoundD©a
.
ch™√ls
 [
i
].
ty≥
 = 
OrigSoundD©a
.channels [i].type;

357 
SoundD©a
.
ch™√ls
 [
i
].
vﬁume_À·
 = 
OrigSoundD©a
.channels [i].volume_left;

358 
SoundD©a
.
ch™√ls
 [
i
].
vﬁume_right
 = 
OrigSoundD©a
.channels [i].volume_right;

359 
SoundD©a
.
ch™√ls
 [
i
].
hîtz
 = 
OrigSoundD©a
.ch™√l†[i].
‰equícy
;

360 
SoundD©a
.
ch™√ls
 [
i
].
cou¡
 = 
OrigSoundD©a
.channels [i].count;

361 
SoundD©a
.
ch™√ls
 [
i
].
lo›
 = 
OrigSoundD©a
.channels [i].loop;

362 
SoundD©a
.
ch™√ls
 [
i
].
ívx
 = 
OrigSoundD©a
.channels [i].envx;

363 
SoundD©a
.
ch™√ls
 [
i
].
À·_vﬁ_Àvñ
 = 
OrigSoundD©a
.channels [i].left_vol_level;

364 
SoundD©a
.
ch™√ls
 [
i
].
right_vﬁ_Àvñ
 = 
OrigSoundD©a
.channels [i].right_vol_level;

365 
SoundD©a
.
ch™√ls
 [
i
].
ívx_èrgë
 = 
OrigSoundD©a
.channels [i].envx_target;

366 
SoundD©a
.
ch™√ls
 [
i
].
ív_îr‹
 = 
OrigSoundD©a
.channels [i].env_error;

367 
SoundD©a
.
ch™√ls
 [
i
].
î©e
 = 
OrigSoundD©a
.channels [i].erate;

368 
SoundD©a
.
ch™√ls
 [
i
].
dúe˘i⁄
 = 
OrigSoundD©a
.channels [i].direction;

369 
SoundD©a
.
ch™√ls
 [
i
].
©èck_øã
 = 
OrigSoundD©a
.channels [i].attack_rate;

370 
SoundD©a
.
ch™√ls
 [
i
].
deˇy_øã
 = 
OrigSoundD©a
.channels [i].decay_rate;

371 
SoundD©a
.
ch™√ls
 [
i
].
su°aö_øã
 = 
OrigSoundD©a
.channels [i].sustain_rate;

372 
SoundD©a
.
ch™√ls
 [
i
].
ªÀa£_øã
 = 
OrigSoundD©a
.channels [i].release_rate;

373 
SoundD©a
.
ch™√ls
 [
i
].
su°aö_Àvñ
 = 
OrigSoundD©a
.channels [i].sustain_level;

374 
SoundD©a
.
ch™√ls
 [
i
].
ßm∂e
 = 
OrigSoundD©a
.channels [i].sample;

375 
j
 = 0; j < 16; j++)

376 
SoundD©a
.
ch™√ls
 [
i
].
decoded
 [
j
] = 
OrigSoundD©a
.channels [i].decoded [j];

378 
j
 = 0; j < 2; j++)

379 
SoundD©a
.
ch™√ls
 [
i
].
¥evious
 [
j
] = 
OrigSoundD©a
.channels [i].previous [j];

381 
SoundD©a
.
ch™√ls
 [
i
].
ßm∂e_numbî
 = 
OrigSoundD©a
.channels [i].sample_number;

382 
SoundD©a
.
ch™√ls
 [
i
].
œ°_block
 = 
OrigSoundD©a
.channels [i].last_block;

383 
SoundD©a
.
ch™√ls
 [
i
].
√eds_decode
 = 
OrigSoundD©a
.channels [i].needs_decode;

384 
SoundD©a
.
ch™√ls
 [
i
].
block_poöãr
 = 
OrigSoundD©a
.channels [i].block_pointer;

385 
SoundD©a
.
ch™√ls
 [
i
].
ßm∂e_poöãr
 = 
OrigSoundD©a
.channels [i].sample_pointer;

386 
SoundD©a
.
ch™√ls
 [
i
].
mode
 = 
OrigSoundD©a
.channels [i].mode;

389 
	`S9xSëSoundMuã
 (
FALSE
);

390 
IAPU
.
PC
 = IAPU.
RAM
 + IAPU.PC;

391 
	`S9xAPUU≈ackSètus
 ();

392 i‡(
	`APUCheckDúe˘Page
 ())

393 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
 + 0x100;

395 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
;

396 
Sëtögs
.
APUE«bÀd
 = 
TRUE
;

397 
CPU
.
APU_APUExecutög
 = 
TRUE
;

401 
Sëtögs
.
APUE«bÀd
 = 
FALSE
;

402 
CPU
.
APU_APUExecutög
 = 
FALSE
;

403 
	`S9xSëSoundMuã
 (
TRUE
);

405 
	`S9xFixSoundA·îS«pshŸLﬂd
 ();

406 
ICPU
.
Shi·edPB
 = 
Regi°îs
.
PB
 << 16;

407 
ICPU
.
Shi·edDB
 = 
Regi°îs
.
DB
 << 16;

408 
	`S9xSëPCBa£
 (
ICPU
.
Shi·edPB
 + 
Regi°îs
.
PC
, &
CPU
);

409 
	`S9xU≈ackSètus
 ();

410 
	`S9xFixCy˛es
 (&
Regi°îs
, &
ICPU
);

411 
	`S9xRescheduÀ
 ();

413  (
SUCCESS
);

414 
	}
}

	@snaporig.h

41 #i‚de‡
_SNAPORIG_H_


42 
	#_SNAPORIG_H_


	)

44 
	#ORIG_SNAPSHOT_MAGIC
 "#!¢es96"

	)

45 
	#ORIG_SNAPSHOT_VERSION
 4

	)

47 
EXTERN_C
 
boﬁ8_32
 
S9xLﬂdOrigS«pshŸ
 (c⁄° *
fûíame
);

49 
	sSOrigCPUSèã
{

50 
uöt32
 
	mFœgs
;

51 
	mCy˛es_ﬁd
;

52 
	mNextEvít_ﬁd
;

53 
uöt8
 
	mCuºítFøme
;

54 
uöt8
 
	mFa°ROMS≥ed_ﬁd_ﬁd
;

55 
uöt16
 
	mV_Cou¡î_ﬁd
;

56 
boﬁ8_32
 
	mBønchSkù
;

57 
boﬁ8_32
 
	mNMIA˘ive
;

58 
boﬁ8_32
 
	mIRQA˘ive
;

59 
boﬁ8_32
 
	mWaôögF‹I¡îru±
;

60 
boﬁ8_32
 
	mInDMA
;

61 
uöt8
 
	mWhichEvít
;

62 
uöt8
 *
	mPC
;

63 
uöt8
 *
	mPCBa£
;

64 
uöt16
 
	mMemS≥ed_ﬁd
;

65 
uöt16
 
	mMemS≥edx2_ﬁd
;

66 
uöt16
 
	mFa°ROMS≥ed_ﬁd
;

67 
boﬁ8_32
 
	mFa°DP
;

68 
uöt8
 *
	mPCAtOpcodeSèπ
;

69 
uöt8
 *
	mWaôAddªss
;

70 
uöt32
 
	mWaôCou¡î
;

71 
	mCy˛es
;

72 
	mNextEvít
;

73 
	mV_Cou¡î
;

74 
	mMemS≥ed
;

75 
	mMemS≥edx2
;

76 
	mFa°ROMS≥ed
;

79 
	sSOrigAPU


81 
uöt32
 
	mCy˛es
;

82 
boﬁ8_32
 
	mShowROM
;

83 
uöt8
 
	mFœgs
;

84 
uöt8
 
	mKeyedCh™√ls
;

85 
uöt8
 
	mOutP‹ts
 [4];

86 
uöt8
 
	mDSP
 [0x80];

87 
uöt8
 
	mExåaRAM
 [64];

88 
uöt16
 
	mTimî
 [3];

89 
uöt16
 
	mTimîT¨gë
 [3];

90 
boﬁ8_32
 
	mTimîE«bÀd
 [3];

91 
boﬁ8_32
 
	mTimîVÆueWrôãn
 [3];

96 #ifde‡
LSB_FIRST


97 °ru˘ { 
uöt8
 
	mA
, 
	mY
; } 
	mB
;

99 °ru˘ { 
uöt8
 
	mY
, 
	mA
; } 
	mB
;

101 
uöt16
 
	mW
;

102 } 
	tOrigYAndA
;

104 
	sSOrigAPURegi°îs
{

105 
uöt8
 
	mP
;

106 
OrigYAndA
 
	mYA
;

107 
uöt8
 
	mX
;

108 
uöt8
 
	mS
;

109 
uöt16
 
	mPC
;

112 
	#ORIG_MAX_BUFFER_SIZE
 (1024 * 4)

	)

113 
	#NUM_CHANNELS
 8

	)

116 
	m°©e
;

117 
	mty≥
;

118 
	mvﬁume_À·
;

119 
	mvﬁume_right
;

120 
	m‰equícy
;

121 
	mcou¡
;

122 sig√d 
	mwave
 [
ORIG_MAX_BUFFER_SIZE
];

123 
boﬁ8_32
 
	mlo›
;

124 
	mívx
;

125 
	mÀ·_vﬁ_Àvñ
;

126 
	mright_vﬁ_Àvñ
;

127 
	mívx_èrgë
;

128 
	mív_îr‹
;

129 
	mî©e
;

130 
	mdúe˘i⁄
;

131 
	m©èck_øã
;

132 
	mdeˇy_øã
;

133 
	msu°aö_øã
;

134 
	mªÀa£_øã
;

135 
	msu°aö_Àvñ
;

136 sig√d 
	mßm∂e
;

137 sig√d 
	mdecoded
 [16];

138 sig√d 
	m¥evious
 [2];

139 
uöt16
 
	mßm∂e_numbî
;

140 
boﬁ8_32
 
	mœ°_block
;

141 
boﬁ8_32
 
	m√eds_decode
;

142 
uöt32
 
	mblock_poöãr
;

143 
uöt32
 
	mßm∂e_poöãr
;

144 *
	mecho_buf_±r
;

145 
	mmode
;

146 
uöt32
 
	mdummy
 [8];

147 } 
	tOrigCh™√l
;

151 
	mma°î_vﬁume_À·
;

152 
	mma°î_vﬁume_right
;

153 
	mecho_vﬁume_À·
;

154 
	mecho_vﬁume_right
;

155 
	mecho_íabÀ
;

156 
	mecho_„edback
;

157 
	mecho_±r
;

158 
	mecho_buf„r_size
;

159 
	mecho_wrôe_íabÀd
;

160 
	mecho_ch™√l_íabÀ
;

161 
	mpôch_mod
;

163 
uöt32
 
	mdummy
 [3];

164 
OrigCh™√l
 
	mch™√ls
 [
NUM_CHANNELS
];

165 } 
	tSOrigSoundD©a
;

167 
	sSOrigOBJ


169 
	mHPos
;

170 
uöt16
 
	mVPos
;

171 
uöt16
 
	mName
;

172 
uöt8
 
	mVFlù
;

173 
uöt8
 
	mHFlù
;

174 
uöt8
 
	mPri‹ôy
;

175 
uöt8
 
	mPÆëã
;

176 
uöt8
 
	mSize
;

177 
uöt8
 
	mPªv
;

178 
uöt8
 
	mNext
;

181 
	sSOrigPPU
 {

182 
uöt8
 
	mBGMode
;

183 
uöt8
 
	mBG3Pri‹ôy
;

184 
uöt8
 
	mBrighäess
;

187 
boﬁ8_32
 
	mHigh
;

188 
uöt8
 
	mIn¸emít
;

189 
uöt16
 
	mAddªss
;

190 
uöt16
 
	mMask1
;

191 
uöt16
 
	mFuŒGøphicCou¡
;

192 
uöt16
 
	mShi·
;

193 } 
	mVMA
;

196 
uöt8
 
	mTûeSize
;

197 
uöt16
 
	mTûeAddªss
;

198 
uöt8
 
	mWidth
;

199 
uöt8
 
	mHeight
;

200 
uöt16
 
	mSCBa£
;

201 
uöt16
 
	mVOff£t
;

202 
uöt16
 
	mHOff£t
;

203 
boﬁ8_32
 
	mThroughMaö
;

204 
boﬁ8_32
 
	mThroughSub
;

205 
uöt8
 
	mBGSize
;

206 
uöt16
 
	mNameBa£
;

207 
uöt16
 
	mSCSize
;

208 
boﬁ8_32
 
	mAddôi⁄
;

209 } 
	mBG
 [4];

211 
boﬁ8_32
 
	mCGFLIP
;

212 
uöt16
 
	mCGDATA
 [256];

213 
uöt8
 
	mFú°S¥ôe
;

214 
uöt8
 
	mLa°S¥ôe
;

215 
SOrigOBJ
 
	mOBJ
 [129];

216 
uöt8
 
	mOAMPri‹ôyRŸ©i⁄
;

217 
uöt16
 
	mOAMAddr
;

219 
uöt8
 
	mOAMFlù
;

220 
uöt16
 
	mOAMTûeAddªss
;

221 
uöt16
 
	mIRQVBómPos
;

222 
uöt16
 
	mIRQHBómPos
;

223 
uöt16
 
	mVBómPosL©ched
;

224 
uöt16
 
	mHBómPosL©ched
;

226 
uöt8
 
	mHBómFlù
;

227 
uöt8
 
	mVBómFlù
;

228 
uöt8
 
	mHVBómCou¡îL©ched
;

230 
	mM©rixA
;

231 
	mM©rixB
;

232 
	mM©rixC
;

233 
	mM©rixD
;

234 
	mCíåeX
;

235 
	mCíåeY
;

236 
uöt8
 
	mJoy∑d1Buâ⁄RódPos
;

237 
uöt8
 
	mJoy∑d2Buâ⁄RódPos
;

239 
uöt8
 
	mCGADD
;

240 
uöt8
 
	mFixedCﬁourRed
;

241 
uöt8
 
	mFixedCﬁourGªí
;

242 
uöt8
 
	mFixedCﬁourBlue
;

243 
uöt16
 
	mSavedOAMAddr
;

244 
uöt16
 
	mS¸ìnHeight
;

245 
uöt32
 
	mWRAM
;

246 
uöt8
 
	mBG_F‹˚d
;

247 
boﬁ8_32
 
	mF‹˚dBœnkög
;

248 
boﬁ8_32
 
	mOBJThroughMaö
;

249 
boﬁ8_32
 
	mOBJThroughSub
;

250 
uöt8
 
	mOBJSizeSñe˘
;

251 
uöt8
 
	mOBJNameSñe˘_ﬁd
;

252 
uöt16
 
	mOBJNameBa£
;

253 
boﬁ8_32
 
	mOBJAddôi⁄
;

254 
uöt8
 
	mOAMRódFlù
;

255 
uöt8
 
	mOAMD©a
 [512 + 32];

256 
boﬁ8_32
 
	mVTimîE«bÀd
;

257 
boﬁ8_32
 
	mHTimîE«bÀd
;

258 
	mHTimîPosôi⁄
;

259 
uöt8
 
	mMoßic
;

260 
boﬁ8_32
 
	mBGMoßic
 [4];

261 
boﬁ8_32
 
	mMode7HFlù
;

262 
boﬁ8_32
 
	mMode7VFlù
;

263 
uöt8
 
	mMode7Rïót
;

264 
uöt8
 
	mWödow1Le·
;

265 
uöt8
 
	mWödow1Right
;

266 
uöt8
 
	mWödow2Le·
;

267 
uöt8
 
	mWödow2Right
;

268 
uöt8
 
	mClùCou¡s
 [6];

269 
uöt8
 
	mClùLe·Edges
 [3][6];

270 
uöt8
 
	mClùRightEdges
 [3][6];

271 
uöt8
 
	mClùWödowOvîœpLogic
 [6];

272 
uöt8
 
	mClùWödow1E«bÀ
 [6];

273 
uöt8
 
	mClùWödow2E«bÀ
 [6];

274 
boﬁ8_32
 
	mClùWödow1Inside
 [6];

275 
boﬁ8_32
 
	mClùWödow2Inside
 [6];

276 
boﬁ8_32
 
	mRecompuãClùWödows
;

277 
uöt8
 
	mCGFLIPRód
;

278 
uöt16
 
	mOBJNameSñe˘
;

279 
boﬁ8_32
 
	mNìd16x8Mulô∂y
;

280 
uöt8
 
	mJoy∑d3Buâ⁄RódPos
;

281 
uöt8
 
	mMou£S≥ed
[2];

284 
	sSOrigDMA
 {

285 
boﬁ8_32
 
	mTøns„rDúe˘i⁄
;

286 
boﬁ8_32
 
	mAAddªssFixed
;

287 
boﬁ8_32
 
	mAAddªssDe¸emít
;

288 
uöt8
 
	mTøns„rMode
;

290 
uöt8
 
	mAB™k
;

291 
uöt16
 
	mAAddªss
;

292 
uöt16
 
	mAddªss
;

293 
uöt8
 
	mBAddªss
;

296 
uöt16
 
	mTøns„rByãs
;

299 
boﬁ8_32
 
	mHDMAIndúe˘Addªssög
;

300 
uöt16
 
	mIndúe˘Addªss
;

301 
uöt8
 
	mIndúe˘B™k
;

302 
uöt8
 
	mRïót
;

303 
uöt8
 
	mLöeCou¡
;

304 
uöt8
 
	mFú°Löe
;

305 
boﬁ8_32
 
	mJu°Sèπed
;

310 #ifde‡
LSB_FIRST


311 °ru˘ { 
uöt8
 
	ml
,
	mh
; } 
	mB
;

313 °ru˘ { 
uöt8
 
	mh
,
	ml
; } 
	mB
;

315 
uöt16
 
	mW
;

316 } 
	tOrigPaú
;

318 
	sSOrigRegi°îs
{

319 
uöt8
 
	mPB
;

320 
uöt8
 
	mDB
;

321 
OrigPaú
 
	mP
;

322 
OrigPaú
 
	mA
;

323 
OrigPaú
 
	mD
;

324 
OrigPaú
 
	mS
;

325 
OrigPaú
 
	mX
;

326 
OrigPaú
 
	mY
;

327 
uöt16
 
	mPC
;

	@snapshot.cpp

42 #i‚de‡
__GP32__


43 
	~<°rög.h
>

44 
	~<˘y≥.h
>

45 
	~<°dlib.h
>

47 #i‡
deföed
(
__unix
Ë|| deföed(
__löux
Ë|| deföed(
__sun
Ë|| deföed(
__DJGPP
)

48 
	~<uni°d.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

53 
	~"¢≠shŸ.h
"

55 
	~"memm≠.h
"

56 
	~"¢es9x.h
"

57 
	~"65c816.h
"

58 
	~"µu.h
"

59 
	~"˝uexec.h
"

60 
	~"di•œy.h
"

61 
	~"≠u.h
"

62 
	~"soundux.h
"

63 #ifde‡
USE_SA1


64 
	~"ß1.h
"

66 
	~"§tc.h
"

67 
	~"sdd1.h
"

72 (*
°©ef_›í
)(c⁄° *
‚ame
, c⁄° *
mode
);

73 (*
°©ef_ªad
)(*
p
, 
l
);

74 (*
°©ef_wrôe
)(*
p
, 
l
);

75 (*
°©ef_˛o£
)();

77 
uöt8
 *
SRAM
;

79 #ifde‡
ZSNES_FX


80 
START_EXTERN_C


81 
	`S9xSu≥rFXPªSaveSèã
 ();

82 
	`S9xSu≥rFXPo°SaveSèã
 ();

83 
	`S9xSu≥rFXPo°LﬂdSèã
 ();

84 
END_EXTERN_C


90 
off£t
;

91 
size
;

92 
ty≥
;

93 } 
	tFªezeD©a
;

96 
INT_V
, 
uöt8_ARRAY_V
, 
uöt16_ARRAY_V
, 
uöt32_ARRAY_V


99 
	#Off£t
(
fõld
,
°ru˘uª
Ë\

	)

100 ((Ë(((*Ë(&(((
°ru˘uª
)
NULL
)->
fõld
))) - ((*) NULL)))

102 
	#COUNT
(
ARRAY
Ë( (ARRAYË/  (ARRAY[0]))

	)

104 #unde‡
OFFSET


105 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SCPUSèã
 *)

	)

107 
FªezeD©a
 
S«pCPU
 [] = {

108 {
	`OFFSET
 (
Fœgs
), 4, 
INT_V
},

109 {
	`OFFSET
 (
BønchSkù
), 1, 
INT_V
},

110 {
	`OFFSET
 (
NMIA˘ive
), 1, 
INT_V
},

111 {
	`OFFSET
 (
IRQA˘ive
), 1, 
INT_V
},

112 {
	`OFFSET
 (
WaôögF‹I¡îru±
), 1, 
INT_V
},

113 {
	`OFFSET
 (
WhichEvít
), 1, 
INT_V
},

114 {
	`OFFSET
 (
Cy˛es
), 4, 
INT_V
},

115 {
	`OFFSET
 (
NextEvít
), 4, 
INT_V
},

116 {
	`OFFSET
 (
V_Cou¡î
), 4, 
INT_V
},

117 {
	`OFFSET
 (
MemS≥ed
), 4, 
INT_V
},

118 {
	`OFFSET
 (
MemS≥edx2
), 4, 
INT_V
},

119 {
	`OFFSET
 (
Fa°ROMS≥ed
), 4, 
INT_V
}

120 
	}
};

122 #unde‡
OFFSET


123 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SRegi°îs
 *)

	)

125 
FªezeD©a
 
	gS«pRegi°îs
 [] = {

126 {
OFFSET
 (
PB
), 1, 
INT_V
},

127 {
OFFSET
 (
DB
), 1, 
INT_V
},

128 {
OFFSET
 (
P
.
W
), 2, 
INT_V
},

129 {
OFFSET
 (
A
.
W
), 2, 
INT_V
},

130 {
OFFSET
 (
D
.
W
), 2, 
INT_V
},

131 {
OFFSET
 (
S
.
W
), 2, 
INT_V
},

132 {
OFFSET
 (
X
.
W
), 2, 
INT_V
},

133 {
OFFSET
 (
Y
.
W
), 2, 
INT_V
},

134 {
OFFSET
 (
PC
), 2, 
INT_V
}

137 #unde‡
OFFSET


138 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SPPU
 *)

	)

140 
FªezeD©a
 
	gS«pPPU
 [] = {

141 {
OFFSET
 (
BGMode
), 1, 
INT_V
},

142 {
OFFSET
 (
BG3Pri‹ôy
), 1, 
INT_V
},

143 {
OFFSET
 (
Brighäess
), 1, 
INT_V
},

144 {
OFFSET
 (
VMA
.
High
), 1, 
INT_V
},

145 {
OFFSET
 (
VMA
.
In¸emít
), 1, 
INT_V
},

146 {
OFFSET
 (
VMA
.
Addªss
), 2, 
INT_V
},

147 {
OFFSET
 (
VMA
.
Mask1
), 2, 
INT_V
},

148 {
OFFSET
 (
VMA
.
FuŒGøphicCou¡
), 2, 
INT_V
},

149 {
OFFSET
 (
VMA
.
Shi·
), 2, 
INT_V
},

150 {
OFFSET
 (
BG
[0].
SCBa£
), 2, 
INT_V
},

151 {
OFFSET
 (
BG
[0].
VOff£t
), 2, 
INT_V
},

152 {
OFFSET
 (
BG
[0].
HOff£t
), 2, 
INT_V
},

153 {
OFFSET
 (
BG
[0].
BGSize
), 1, 
INT_V
},

154 {
OFFSET
 (
BG
[0].
NameBa£
), 2, 
INT_V
},

155 {
OFFSET
 (
BG
[0].
SCSize
), 2, 
INT_V
},

157 {
OFFSET
 (
BG
[1].
SCBa£
), 2, 
INT_V
},

158 {
OFFSET
 (
BG
[1].
VOff£t
), 2, 
INT_V
},

159 {
OFFSET
 (
BG
[1].
HOff£t
), 2, 
INT_V
},

160 {
OFFSET
 (
BG
[1].
BGSize
), 1, 
INT_V
},

161 {
OFFSET
 (
BG
[1].
NameBa£
), 2, 
INT_V
},

162 {
OFFSET
 (
BG
[1].
SCSize
), 2, 
INT_V
},

164 {
OFFSET
 (
BG
[2].
SCBa£
), 2, 
INT_V
},

165 {
OFFSET
 (
BG
[2].
VOff£t
), 2, 
INT_V
},

166 {
OFFSET
 (
BG
[2].
HOff£t
), 2, 
INT_V
},

167 {
OFFSET
 (
BG
[2].
BGSize
), 1, 
INT_V
},

168 {
OFFSET
 (
BG
[2].
NameBa£
), 2, 
INT_V
},

169 {
OFFSET
 (
BG
[2].
SCSize
), 2, 
INT_V
},

171 {
OFFSET
 (
BG
[3].
SCBa£
), 2, 
INT_V
},

172 {
OFFSET
 (
BG
[3].
VOff£t
), 2, 
INT_V
},

173 {
OFFSET
 (
BG
[3].
HOff£t
), 2, 
INT_V
},

174 {
OFFSET
 (
BG
[3].
BGSize
), 1, 
INT_V
},

175 {
OFFSET
 (
BG
[3].
NameBa£
), 2, 
INT_V
},

176 {
OFFSET
 (
BG
[3].
SCSize
), 2, 
INT_V
},

178 {
OFFSET
 (
CGFLIP
), 1, 
INT_V
},

179 {
OFFSET
 (
CGDATA
), 256, 
uöt16_ARRAY_V
},

180 {
OFFSET
 (
Fú°S¥ôe
), 1, 
INT_V
},

181 
	#O
(
N
Ë\

	)

182 {
OFFSET
 (
OBJ
[
N
].
HPos
), 2, 
INT_V
}, \

183 {
OFFSET
 (
OBJ
[
N
].
VPos
), 2, 
INT_V
}, \

184 {
OFFSET
 (
OBJ
[
N
].
Name
), 2, 
INT_V
}, \

185 {
OFFSET
 (
OBJ
[
N
].
VFlù
), 1, 
INT_V
}, \

186 {
OFFSET
 (
OBJ
[
N
].
HFlù
), 1, 
INT_V
}, \

187 {
OFFSET
 (
OBJ
[
N
].
Pri‹ôy
), 1, 
INT_V
}, \

188 {
OFFSET
 (
OBJ
[
N
].
PÆëã
), 1, 
INT_V
}, \

189 {
OFFSET
 (
OBJ
[
N
].
Size
), 1, 
INT_V
}

191 
O
( 0), O( 1), O( 2), O( 3), O( 4), O( 5), O( 6), O( 7),

192 
O
( 8), O( 9), O( 10), O( 11), O( 12), O( 13), O( 14), O( 15),

193 
O
( 16), O( 17), O( 18), O( 19), O( 20), O( 21), O( 22), O( 23),

194 
O
( 24), O( 25), O( 26), O( 27), O( 28), O( 29), O( 30), O( 31),

195 
O
( 32), O( 33), O( 34), O( 35), O( 36), O( 37), O( 38), O( 39),

196 
O
( 40), O( 41), O( 42), O( 43), O( 44), O( 45), O( 46), O( 47),

197 
O
( 48), O( 49), O( 50), O( 51), O( 52), O( 53), O( 54), O( 55),

198 
O
( 56), O( 57), O( 58), O( 59), O( 60), O( 61), O( 62), O( 63),

199 
O
( 64), O( 65), O( 66), O( 67), O( 68), O( 69), O( 70), O( 71),

200 
O
( 72), O( 73), O( 74), O( 75), O( 76), O( 77), O( 78), O( 79),

201 
O
( 80), O( 81), O( 82), O( 83), O( 84), O( 85), O( 86), O( 87),

202 
O
( 88), O( 89), O( 90), O( 91), O( 92), O( 93), O( 94), O( 95),

203 
O
( 96), O( 97), O( 98), O( 99), O(100), O(101), O(102), O(103),

204 
O
(104), O(105), O(106), O(107), O(108), O(109), O(110), O(111),

205 
O
(112), O(113), O(114), O(115), O(116), O(117), O(118), O(119),

206 
O
(120), O(121), O(122), O(123), O(124), O(125), O(126), O(127),

207 #unde‡
O


208 {
OFFSET
 (
OAMPri‹ôyRŸ©i⁄
), 1, 
INT_V
},

209 {
OFFSET
 (
OAMAddr
), 2, 
INT_V
},

210 {
OFFSET
 (
OAMFlù
), 1, 
INT_V
},

211 {
OFFSET
 (
OAMTûeAddªss
), 2, 
INT_V
},

212 {
OFFSET
 (
IRQVBómPos
), 2, 
INT_V
},

213 {
OFFSET
 (
IRQHBómPos
), 2, 
INT_V
},

214 {
OFFSET
 (
VBómPosL©ched
), 2, 
INT_V
},

215 {
OFFSET
 (
HBómPosL©ched
), 2, 
INT_V
},

216 {
OFFSET
 (
HBómFlù
), 1, 
INT_V
},

217 {
OFFSET
 (
VBómFlù
), 1, 
INT_V
},

218 {
OFFSET
 (
HVBómCou¡îL©ched
), 1, 
INT_V
},

219 {
OFFSET
 (
M©rixA
), 2, 
INT_V
},

220 {
OFFSET
 (
M©rixB
), 2, 
INT_V
},

221 {
OFFSET
 (
M©rixC
), 2, 
INT_V
},

222 {
OFFSET
 (
M©rixD
), 2, 
INT_V
},

223 {
OFFSET
 (
CíåeX
), 2, 
INT_V
},

224 {
OFFSET
 (
CíåeY
), 2, 
INT_V
},

225 {
OFFSET
 (
Joy∑d1Buâ⁄RódPos
), 1, 
INT_V
},

226 {
OFFSET
 (
Joy∑d2Buâ⁄RódPos
), 1, 
INT_V
},

227 {
OFFSET
 (
Joy∑d3Buâ⁄RódPos
), 1, 
INT_V
},

228 {
OFFSET
 (
CGADD
), 1, 
INT_V
},

229 {
OFFSET
 (
FixedCﬁourRed
), 1, 
INT_V
},

230 {
OFFSET
 (
FixedCﬁourGªí
), 1, 
INT_V
},

231 {
OFFSET
 (
FixedCﬁourBlue
), 1, 
INT_V
},

232 {
OFFSET
 (
SavedOAMAddr
), 2, 
INT_V
},

233 {
OFFSET
 (
S¸ìnHeight
), 2, 
INT_V
},

234 {
OFFSET
 (
WRAM
), 4, 
INT_V
},

235 {
OFFSET
 (
F‹˚dBœnkög
), 1, 
INT_V
},

236 {
OFFSET
 (
OBJNameSñe˘
), 2, 
INT_V
},

237 {
OFFSET
 (
OBJSizeSñe˘
), 1, 
INT_V
},

238 {
OFFSET
 (
OBJNameBa£
), 2, 
INT_V
},

239 {
OFFSET
 (
OAMRódFlù
), 1, 
INT_V
},

240 {
OFFSET
 (
VTimîE«bÀd
), 1, 
INT_V
},

241 {
OFFSET
 (
HTimîE«bÀd
), 1, 
INT_V
},

242 {
OFFSET
 (
HTimîPosôi⁄
), 2, 
INT_V
},

243 {
OFFSET
 (
Moßic
), 1, 
INT_V
},

244 {
OFFSET
 (
Mode7HFlù
), 1, 
INT_V
},

245 {
OFFSET
 (
Mode7VFlù
), 1, 
INT_V
},

246 {
OFFSET
 (
Mode7Rïót
), 1, 
INT_V
},

247 {
OFFSET
 (
Wödow1Le·
), 1, 
INT_V
},

248 {
OFFSET
 (
Wödow1Right
), 1, 
INT_V
},

249 {
OFFSET
 (
Wödow2Le·
), 1, 
INT_V
},

250 {
OFFSET
 (
Wödow2Right
), 1, 
INT_V
},

251 
	#O
(
N
Ë\

	)

252 {
OFFSET
 (
ClùWödowOvîœpLogic
[
N
]), 1, 
INT_V
}, \

253 {
OFFSET
 (
ClùWödow1E«bÀ
[
N
]), 1, 
INT_V
}, \

254 {
OFFSET
 (
ClùWödow2E«bÀ
[
N
]), 1, 
INT_V
}, \

255 {
OFFSET
 (
ClùWödow1Inside
[
N
]), 1, 
INT_V
}, \

256 {
OFFSET
 (
ClùWödow2Inside
[
N
]), 1, 
INT_V
}

258 
O
(0), O(1), O(2), O(3), O(4), O(5),

260 #unde‡
O


262 {
OFFSET
 (
CGFLIPRód
), 1, 
INT_V
},

263 {
OFFSET
 (
Nìd16x8Mulô∂y
), 1, 
INT_V
},

264 {
OFFSET
 (
BGMoßic
), 4, 
uöt8_ARRAY_V
},

265 {
OFFSET
 (
OAMD©a
), 512 + 32, 
uöt8_ARRAY_V
},

266 {
OFFSET
 (
Nìd16x8Mulô∂y
), 1, 
INT_V
},

267 {
OFFSET
 (
Mou£S≥ed
), 2, 
uöt8_ARRAY_V
}

270 #unde‡
OFFSET


271 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SDMA
 *)

	)

273 
FªezeD©a
 
	gS«pDMA
 [] = {

274 
	#O
(
N
Ë\

	)

275 {
OFFSET
 (
Tøns„rDúe˘i⁄
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

276 {
OFFSET
 (
AAddªssFixed
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

277 {
OFFSET
 (
AAddªssDe¸emít
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

278 {
OFFSET
 (
Tøns„rMode
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

279 {
OFFSET
 (
AB™k
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

280 {
OFFSET
 (
AAddªss
Ë+ 
N
 *  (
SDMA
), 2, 
INT_V
}, \

281 {
OFFSET
 (
Addªss
Ë+ 
N
 *  (
SDMA
), 2, 
INT_V
}, \

282 {
OFFSET
 (
BAddªss
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

283 {
OFFSET
 (
Tøns„rByãs
Ë+ 
N
 *  (
SDMA
), 2, 
INT_V
}, \

284 {
OFFSET
 (
HDMAIndúe˘Addªssög
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

285 {
OFFSET
 (
Indúe˘Addªss
Ë+ 
N
 *  (
SDMA
), 2, 
INT_V
}, \

286 {
OFFSET
 (
Indúe˘B™k
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

287 {
OFFSET
 (
Rïót
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

288 {
OFFSET
 (
LöeCou¡
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}, \

289 {
OFFSET
 (
Fú°Löe
Ë+ 
N
 *  (
SDMA
), 1, 
INT_V
}

291 
O
(0), O(1), O(2), O(3), O(4), O(5), O(6), O(7)

292 #unde‡
O


295 #unde‡
OFFSET


296 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SAPU
 *)

	)

298 
FªezeD©a
 
	gS«pAPU
 [] = {

299 {
OFFSET
 (
Cy˛es
), 4, 
INT_V
},

300 {
OFFSET
 (
ShowROM
), 1, 
INT_V
},

301 {
OFFSET
 (
Fœgs
), 1, 
INT_V
},

302 {
OFFSET
 (
KeyedCh™√ls
), 1, 
INT_V
},

303 {
OFFSET
 (
OutP‹ts
), 4, 
uöt8_ARRAY_V
},

304 {
OFFSET
 (
DSP
), 0x80, 
uöt8_ARRAY_V
},

305 {
OFFSET
 (
ExåaRAM
), 64, 
uöt8_ARRAY_V
},

306 {
OFFSET
 (
Timî
), 3, 
uöt16_ARRAY_V
},

307 {
OFFSET
 (
TimîT¨gë
), 3, 
uöt16_ARRAY_V
},

308 {
OFFSET
 (
TimîE«bÀd
), 3, 
uöt8_ARRAY_V
},

309 {
OFFSET
 (
TimîVÆueWrôãn
), 3, 
uöt8_ARRAY_V
}

312 #unde‡
OFFSET


313 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SAPURegi°îs
 *)

	)

315 
FªezeD©a
 
	gS«pAPURegi°îs
 [] = {

316 {
OFFSET
 (
P
Ë, 1, 
INT_V
},

317 {
OFFSET
 (
YA
.
W
), 2, 
INT_V
},

318 {
OFFSET
 (
X
Ë, 1, 
INT_V
},

319 {
OFFSET
 (
S
Ë, 1, 
INT_V
},

320 {
OFFSET
 (
PC
Ë, 2, 
INT_V
}

323 #unde‡
OFFSET


324 #unde‡
OFFSET1


325 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SSoundD©a
 *)

	)

327 
FªezeD©a
 
	gS«pSoundD©a
 [] = {

328 {
OFFSET
 (
ma°î_vﬁume_À·
), 2, 
INT_V
},

329 {
OFFSET
 (
ma°î_vﬁume_right
), 2, 
INT_V
},

330 {
OFFSET
 (
echo_vﬁume_À·
), 2, 
INT_V
},

331 {
OFFSET
 (
echo_vﬁume_right
), 2, 
INT_V
},

332 {
OFFSET
 (
echo_íabÀ
), 4, 
INT_V
},

333 {
OFFSET
 (
echo_„edback
), 4, 
INT_V
},

334 {
OFFSET
 (
echo_±r
), 4, 
INT_V
},

335 {
OFFSET
 (
echo_buf„r_size
), 4, 
INT_V
},

336 {
OFFSET
 (
echo_wrôe_íabÀd
), 4, 
INT_V
},

337 {
OFFSET
 (
echo_ch™√l_íabÀ
), 4, 
INT_V
},

338 {
OFFSET
 (
pôch_mod
), 4, 
INT_V
},

339 {
OFFSET
 (
dummy
), 3, 
uöt32_ARRAY_V
},

340 
	#O
(
N
Ë\

	)

341 {
OFFSET
 (
ch™√ls
 [
N
].
°©e
), 4, 
INT_V
}, \

342 {
OFFSET
 (
ch™√ls
 [
N
].
ty≥
), 4, 
INT_V
}, \

343 {
OFFSET
 (
ch™√ls
 [
N
].
vﬁume_À·
), 2, 
INT_V
}, \

344 {
OFFSET
 (
ch™√ls
 [
N
].
vﬁume_right
), 2, 
INT_V
}, \

345 {
OFFSET
 (
ch™√ls
 [
N
].
hîtz
), 4, 
INT_V
}, \

346 {
OFFSET
 (
ch™√ls
 [
N
].
cou¡
), 4, 
INT_V
}, \

347 {
OFFSET
 (
ch™√ls
 [
N
].
lo›
), 1, 
INT_V
}, \

348 {
OFFSET
 (
ch™√ls
 [
N
].
ívx
), 4, 
INT_V
}, \

349 {
OFFSET
 (
ch™√ls
 [
N
].
À·_vﬁ_Àvñ
), 2, 
INT_V
}, \

350 {
OFFSET
 (
ch™√ls
 [
N
].
right_vﬁ_Àvñ
), 2, 
INT_V
}, \

351 {
OFFSET
 (
ch™√ls
 [
N
].
ívx_èrgë
), 2, 
INT_V
}, \

352 {
OFFSET
 (
ch™√ls
 [
N
].
ív_îr‹
), 4, 
INT_V
}, \

353 {
OFFSET
 (
ch™√ls
 [
N
].
î©e
), 4, 
INT_V
}, \

354 {
OFFSET
 (
ch™√ls
 [
N
].
dúe˘i⁄
), 4, 
INT_V
}, \

355 {
OFFSET
 (
ch™√ls
 [
N
].
©èck_øã
), 4, 
INT_V
}, \

356 {
OFFSET
 (
ch™√ls
 [
N
].
deˇy_øã
), 4, 
INT_V
}, \

357 {
OFFSET
 (
ch™√ls
 [
N
].
su°aö_øã
), 4, 
INT_V
}, \

358 {
OFFSET
 (
ch™√ls
 [
N
].
ªÀa£_øã
), 4, 
INT_V
}, \

359 {
OFFSET
 (
ch™√ls
 [
N
].
su°aö_Àvñ
), 4, 
INT_V
}, \

360 {
OFFSET
 (
ch™√ls
 [
N
].
ßm∂e
), 2, 
INT_V
}, \

361 {
OFFSET
 (
ch™√ls
 [
N
].
decoded
), 16, 
uöt16_ARRAY_V
}, \

362 {
OFFSET
 (
ch™√ls
 [
N
].
¥evious16
), 2, 
uöt16_ARRAY_V
}, \

363 {
OFFSET
 (
ch™√ls
 [
N
].
ßm∂e_numbî
), 2, 
INT_V
}, \

364 {
OFFSET
 (
ch™√ls
 [
N
].
œ°_block
), 1, 
INT_V
}, \

365 {
OFFSET
 (
ch™√ls
 [
N
].
√eds_decode
), 1, 
INT_V
}, \

366 {
OFFSET
 (
ch™√ls
 [
N
].
block_poöãr
), 4, 
INT_V
}, \

367 {
OFFSET
 (
ch™√ls
 [
N
].
ßm∂e_poöãr
), 4, 
INT_V
}, \

368 {
OFFSET
 (
ch™√ls
 [
N
].
mode
), 4, 
INT_V
}

370 
O
(0), O(1), O(2), O(3), O(4), O(5), O(6), O(7)

371 #unde‡
O


374 #ifde‡
USE_SA1


376 #unde‡
OFFSET


377 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SSA1Regi°îs
 *)

	)

379 
FªezeD©a
 
	gS«pSA1Regi°îs
 [] = {

380 {
OFFSET
 (
PB
), 1, 
INT_V
},

381 {
OFFSET
 (
DB
), 1, 
INT_V
},

382 {
OFFSET
 (
P
.
W
), 2, 
INT_V
},

383 {
OFFSET
 (
A
.
W
), 2, 
INT_V
},

384 {
OFFSET
 (
D
.
W
), 2, 
INT_V
},

385 {
OFFSET
 (
S
.
W
), 2, 
INT_V
},

386 {
OFFSET
 (
X
.
W
), 2, 
INT_V
},

387 {
OFFSET
 (
Y
.
W
), 2, 
INT_V
},

388 {
OFFSET
 (
PC
), 2, 
INT_V
}

391 #unde‡
OFFSET


392 
	#OFFSET
(
f
Ë
	`Off£t
(f,
SSA1
 *)

	)

394 
FªezeD©a
 
	gS«pSA1
 [] = {

395 {
OFFSET
 (
Fœgs
), 4, 
INT_V
},

396 {
OFFSET
 (
NMIA˘ive
), 1, 
INT_V
},

397 {
OFFSET
 (
IRQA˘ive
), 1, 
INT_V
},

398 {
OFFSET
 (
WaôögF‹I¡îru±
), 1, 
INT_V
},

399 {
OFFSET
 (
›1
), 2, 
INT_V
},

400 {
OFFSET
 (
›2
), 2, 
INT_V
},

401 {
OFFSET
 (
¨ôhmëic_›
), 4, 
INT_V
},

402 {
OFFSET
 (
sum
), 8, 
INT_V
},

403 {
OFFSET
 (
ovîÊow
), 1, 
INT_V
}

410 
Fªeze
 ();

411 
Un‰ìze
 ();

412 
FªezeSåu˘
 (*
«me
, *
ba£
, 
FªezeD©a
 *
fõlds
,

413 
num_fõlds
);

414 
FªezeBlock
 (*
«me
, 
uöt8
 *
block
, 
size
);

416 
Un‰ìzeSåu˘
 (*
«me
, *
ba£
, 
FªezeD©a
 *
fõlds
,

417 
num_fõlds
);

418 
Un‰ìzeBlock
 (*
«me
, 
uöt8
 *
block
, 
size
);

420 
boﬁ8
 
	$S«pshŸ
 (c⁄° *
fûíame
)

422  (
	`S9xFªezeGame
 (
fûíame
));

423 
	}
}

425 
boﬁ8
 
	$S9xFªezeGame
 (c⁄° *
fûíame
)

427 if(
	`°©ef_›í
(
fûíame
, "wb"))

429 
	`Fªeze
();

430 
	`°©ef_˛o£
();

431  (
TRUE
);

433  (
FALSE
);

434 
	}
}

437 
boﬁ8
 
	$S9xUn‰ìzeGame
 (c⁄° *
fûíame
)

439 if(
	`°©ef_›í
(
fûíame
, "rb"))

441 
ªsu…
;

442 i‡((
ªsu…
 = 
	`Un‰ìze
()Ë!
SUCCESS
)

444 
ªsu…
)

446 
WRONG_FORMAT
:

447 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_WRONG_FORMAT
,

449 
	`S9xRe£t
();

451 
WRONG_VERSION
:

452 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_WRONG_VERSION
,

454 
	`S9xRe£t
();

460 
	`°©ef_˛o£
();

461  (
FALSE
);

463 
	`°©ef_˛o£
();

464  (
TRUE
);

468  (
FALSE
);

469 
	}
}

471 
	$Fªeze
 ()

473 
buf„r
[1024];

474 
i
;

476 
	`S9xSëSoundMuã
 (
TRUE
);

477 #ifde‡
ZSNES_FX


478 i‡(
Sëtögs
.
Su≥rFX
)

479 
	`S9xSu≥rFXPªSaveSèã
 ();

482 
	`S9xSRTCPªSaveSèã
 ();

484 
i
 = 0; i < 8; i++)

486 
SoundD©a
.
ch™√ls
 [
i
].
¥evious16
 [0] = (
öt16
ËSoundD©a.ch™√l†[i].
¥evious
 [0];

487 
SoundD©a
.
ch™√ls
 [
i
].
¥evious16
 [1] = (
öt16
ËSoundD©a.ch™√l†[i].
¥evious
 [1];

489 
	`•rötf
 (
buf„r
, "%s:%04d\n", 
SNAPSHOT_MAGIC
, 
SNAPSHOT_VERSION
);

490 
	`°©ef_wrôe
(
buf„r
, 
	`°æí
 (buffer));

491 
	`•rötf
 (
buf„r
, "NAM:%06d:%s%c", 
	`°æí
 (
Mem‹y
.
ROMFûíame
) + 1,

492 
Mem‹y
.
ROMFûíame
, 0);

493 
	`°©ef_wrôe
(
buf„r
, 
	`°æí
 (buffer) + 1);

494 
	`FªezeSåu˘
 ("CPU", &
CPU
, 
S«pCPU
, 
	`COUNT
 (SnapCPU));

495 
	`FªezeSåu˘
 ("REG", &
Regi°îs
, 
S«pRegi°îs
, 
	`COUNT
 (SnapRegisters));

496 
	`FªezeSåu˘
 ("PPU", &
PPU
, 
S«pPPU
, 
	`COUNT
 (SnapPPU));

497 
	`FªezeSåu˘
 ("DMA", 
DMA
, 
S«pDMA
, 
	`COUNT
 (SnapDMA));

500 
	`FªezeBlock
 ("VRA", 
Mem‹y
.
VRAM
, 0x10000);

501 
	`FªezeBlock
 ("RAM", 
Mem‹y
.
RAM
, 0x20000);

502 
	`FªezeBlock
 ("SRA", ::
SRAM
, 0x20000);

503 
	`FªezeBlock
 ("FIL", 
Mem‹y
.
FûlRAM
, 0x8000);

504 i‡(
Sëtögs
.
APUE«bÀd
)

507 
	`FªezeSåu˘
 ("APU", &
APU
, 
S«pAPU
, 
	`COUNT
 (SnapAPU));

509 
SAPURegi°îs
 
•¸egs
;

510 
•¸egs
.
P
 = 
IAPU
.P;

511 
•¸egs
.
YA
.
W
 = 
IAPU
.YA.W;

512 
•¸egs
.
X
 = 
IAPU
.X;

513 
•¸egs
.
S
 = 
IAPU
.S;

514 
•¸egs
.
PC
 = 
IAPU
.PC - IAPU.
RAM
;

515 
	`FªezeSåu˘
 ("ARE", &
•¸egs
, 
S«pAPURegi°îs
,

516 
	`COUNT
 (
S«pAPURegi°îs
));

518 
	`FªezeBlock
 ("ARA", 
IAPU
.
RAM
, 0x10000);

519 
	`FªezeSåu˘
 ("SOU", &
SoundD©a
, 
S«pSoundD©a
,

520 
	`COUNT
 (
S«pSoundD©a
));

522 #ifde‡
USE_SA1


523 i‡(
Sëtögs
.
SA1
)

525 
SA1Regi°îs
.
PC
 = 
SA1
.PC - SA1.
PCBa£
;

526 
	`S9xSA1PackSètus
 ();

527 
	`FªezeSåu˘
 ("SA1", &
SA1
, 
S«pSA1
, 
	`COUNT
 (SnapSA1));

528 
	`FªezeSåu˘
 ("SAR", &
SA1Regi°îs
, 
S«pSA1Regi°îs
,

529 
	`COUNT
 (
S«pSA1Regi°îs
));

532 
	`S9xSëSoundMuã
 (
FALSE
);

533 #ifde‡
ZSNES_FX


534 i‡(
Sëtögs
.
Su≥rFX
)

535 
	`S9xSu≥rFXPo°SaveSèã
 ();

537 
	}
}

539 
	$Un‰ìze
()

542 
buf„r
 [16];

543 
rom_fûíame
 [512];

544 
ªsu…
;

546 
vîsi⁄
;

547 
Àn
 = 
	`°æí
 (
SNAPSHOT_MAGIC
) + 1 + 4 + 1;

548 i‡(
	`°©ef_ªad
(
buf„r
, 
Àn
) != ()len)

550 
	`¥ötf
("failedÅoÑead header\r\n");

551  (
WRONG_FORMAT
);

553 i‡(
	`°∫cmp
 (
buf„r
, 
SNAPSHOT_MAGIC
, 
	`°æí
 (SNAPSHOT_MAGIC)) != 0)

555 
	`¥ötf
("read headerÇot correct\r\n");

556  (
WRONG_FORMAT
);

558 i‡((
vîsi⁄
 = 
	`©oi
 (&
buf„r
 [
	`°æí
 (
SNAPSHOT_MAGIC
Ë+ 1])Ë> 
SNAPSHOT_VERSION
)

560 
	`¥ötf
("Wrong version\r\n");

561  (
WRONG_VERSION
);

564 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
("NAM", (
uöt8
 *Ë
rom_fûíame
, 512)Ë!
SUCCESS
)

566 
	`¥ötf
("UnfreezeBlock NAM failed\r\n");

567  (
ªsu…
);

570 i‡(
	`°rˇ£cmp
 (
rom_fûíame
, 
Mem‹y
.
ROMFûíame
) != 0 &&

571 
	`°rˇ£cmp
 (
	`S9xBa£«me
 (
rom_fûíame
), S9xBa£«mê(
Mem‹y
.
ROMFûíame
)) != 0)

573 
	`S9xMesßge
 (
S9X_WARNING
, 
S9X_FREEZE_ROM_NAME
,

575 
	`¥ötf
("filename mismatch\r\n");

580 
uöt32
 
ﬁd_Êags
 = 
CPU
.
Fœgs
;

581 #ifde‡
USE_SA1


582 
uöt32
 
ß1_ﬁd_Êags
 = 
SA1
.
Fœgs
;

584 
	`S9xRe£t
 ();

585 
	`S9xSëSoundMuã
 (
TRUE
);

587 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
("CPU", &
CPU
, 
S«pCPU
,

588 
	`COUNT
 (
S«pCPU
))Ë!
SUCCESS
)

589  (
ªsu…
);

592 
Mem‹y
.
	`FixROMS≥ed
 ();

593 
CPU
.
Fœgs
 |
ﬁd_Êags
 & (
DEBUG_MODE_FLAG
 | 
TRACE_FLAG
 |

594 
SINGLE_STEP_FLAG
 | 
FRAME_ADVANCE_FLAG
);

595 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
("REG", &
Regi°îs
, 
S«pRegi°îs
, 
	`COUNT
 (S«pRegi°îs))Ë!
SUCCESS
)

596  (
ªsu…
);

597 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
("PPU", &
PPU
, 
S«pPPU
, 
	`COUNT
 (S«pPPU))Ë!
SUCCESS
)

598  (
ªsu…
);

601 
IPPU
.
Cﬁ‹sCh™ged
 = 
TRUE
;

602 
IPPU
.
OBJCh™ged
 = 
TRUE
;

603 
CPU
.
InDMA
 = 
FALSE
;

604 
	`S9xFixCﬁourBrighäess
 ();

605 
IPPU
.
RídîThisFøme
 = 
FALSE
;

607 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
 ("DMA", 
DMA
, 
S«pDMA
,

608 
	`COUNT
 (
S«pDMA
))Ë!
SUCCESS
)

609  (
ªsu…
);

611 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
 ("VRA", 
Mem‹y
.
VRAM
, 0x10000)Ë!
SUCCESS
)

612  (
ªsu…
);

614 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
 ("RAM", 
Mem‹y
.
RAM
, 0x20000)Ë!
SUCCESS
)

615  (
ªsu…
);

617 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
 ("SRA", ::
SRAM
, 0x20000)Ë!
SUCCESS
)

618  (
ªsu…
);

620 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
 ("FIL", 
Mem‹y
.
FûlRAM
, 0x8000)Ë!
SUCCESS
)

621  (
ªsu…
);

624 i‡(
	`Un‰ìzeSåu˘
 ("APU", &
APU
, 
S«pAPU
, 
	`COUNT
 (S«pAPU)Ë=
SUCCESS
)

626 
SAPURegi°îs
 
•¸egs
;

627 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
 ("ARE", &
•¸egs
, 
S«pAPURegi°îs
,

628 
	`COUNT
 (
S«pAPURegi°îs
))Ë!
SUCCESS
)

629  (
ªsu…
);

631 
IAPU
.
P
 = 
•¸egs
.P;

632 
IAPU
.
YA
.
W
 = 
•¸egs
.YA.W;

633 
IAPU
.
X
 = 
•¸egs
.X;

634 
IAPU
.
S
 = 
•¸egs
.S;

635 
IAPU
.
PC
 = IAPU.
RAM
 + 
•¸egs
.PC;

637 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
 ("ARA", 
IAPU
.
RAM
, 0x10000)Ë!
SUCCESS
)

638  (
ªsu…
);

640 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
 ("SOU", &
SoundD©a
, 
S«pSoundD©a
,

641 
	`COUNT
 (
S«pSoundD©a
))Ë!
SUCCESS
)

642  (
ªsu…
);

645 
u
=0; u<8; u++) {

646 
SoundD©a
.
ch™√ls
[
u
].
ív_öd_©èck
 &= 0xf;

647 
SoundD©a
.
ch™√ls
[
u
].
ív_öd_deˇy
 &= 0x7;

648 
SoundD©a
.
ch™√ls
[
u
].
ív_öd_su°aö
&= 0x1f;

651 
	`S9xSëSoundMuã
 (
FALSE
);

652 
	`S9xAPUU≈ackSètus
 ();

653 i‡(
	`APUCheckDúe˘Page
 ())

654 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
 + 0x100;

656 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
;

657 
Sëtögs
.
APUE«bÀd
 = 
TRUE
;

658  
CPU
.
APU_APUExecutög
 = 
TRUE
;

662 
Sëtögs
.
APUE«bÀd
 = 
FALSE
;

663  
CPU
.
APU_APUExecutög
 = 
FALSE
;

664 
	`S9xSëSoundMuã
 (
TRUE
);

666 #ifde‡
USE_SA1


667 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
 ("SA1", &
SA1
, 
S«pSA1
,

668 
	`COUNT
(
S«pSA1
))Ë=
SUCCESS
)

670 i‡((
ªsu…
 = 
	`Un‰ìzeSåu˘
 ("SAR", &
SA1Regi°îs
,

671 
S«pSA1Regi°îs
, 
	`COUNT
 (S«pSA1Regi°îs))Ë!
SUCCESS
)

672  (
ªsu…
);

674 
	`S9xFixSA1A·îS«pshŸLﬂd
 ();

675 
SA1
.
Fœgs
 |
ß1_ﬁd_Êags
 & (
TRACE_FLAG
);

678 
	`S9xFixSoundA·îS«pshŸLﬂd
 ();

679 
ICPU
.
Shi·edPB
 = 
Regi°îs
.
PB
 << 16;

680 
ICPU
.
Shi·edDB
 = 
Regi°îs
.
DB
 << 16;

681 
	`S9xSëPCBa£
 (
ICPU
.
Shi·edPB
 + 
Regi°îs
.
PC
);

686 
	`S9xRescheduÀ
 ();

687 #ifde‡
ZSNES_FX


688 i‡(
Sëtögs
.
Su≥rFX
)

689 
	`S9xSu≥rFXPo°LﬂdSèã
 ();

692 
	`S9xSRTCPo°LﬂdSèã
 ();

693 i‡(
Sëtögs
.
SDD1
Ë
	`S9xSDD1Po°LﬂdSèã
 ();

695  (
SUCCESS
);

696 
	}
}

698 
	$FªezeSize
 (
size
, 
ty≥
)

700 
ty≥
)

702 
uöt16_ARRAY_V
:

703  (
size
 * 2);

704 
uöt32_ARRAY_V
:

705  (
size
 * 4);

707  (
size
);

709 
	}
}

711 
	$FªezeSåu˘
(*
«me
, *
ba£
, 
FªezeD©a
 *
fõlds
,

712 
num_fõlds
)

715 
Àn
 = 0;

716 
i
;

717 
j
;

719 
i
 = 0; i < 
num_fõlds
; i++)

721 i‡(
fõlds
 [
i
].
off£t
 + 
	`FªezeSize
 (fõld†[i].
size
,

722 
fõlds
 [
i
].
ty≥
Ë> 
Àn
)

723 
Àn
 = 
fõlds
 [
i
].
off£t
 + 
	`FªezeSize
 (fõld†[i].
size
,

724 
fõlds
 [
i
].
ty≥
);

728 
uöt8
 *
block
 = (uöt8*)
	`mÆloc
(
Àn
);

729 
uöt8
 *
±r
 = 
block
;

730 
uöt16
 
w‹d
;

731 
uöt32
 
dw‹d
;

732 
öt64
 
qw‹d
;

735 
i
 = 0; i < 
num_fõlds
; i++)

737 
fõlds
 [
i
].
ty≥
)

739 
INT_V
:

740 
fõlds
 [
i
].
size
)

743 *
±r
++ = *((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
);

746 
w‹d
 = *((
uöt16
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
));

747 *
±r
++ = (
uöt8
Ë(
w‹d
 >> 8);

748 *
±r
++ = (
uöt8
Ë
w‹d
;

751 
dw‹d
 = *((
uöt32
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
));

752 *
±r
++ = (
uöt8
Ë(
dw‹d
 >> 24);

753 *
±r
++ = (
uöt8
Ë(
dw‹d
 >> 16);

754 *
±r
++ = (
uöt8
Ë(
dw‹d
 >> 8);

755 *
±r
++ = (
uöt8
Ë
dw‹d
;

758 
qw‹d
 = *((
öt64
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
));

759 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 56);

760 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 48);

761 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 40);

762 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 32);

763 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 24);

764 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 16);

765 *
±r
++ = (
uöt8
Ë(
qw‹d
 >> 8);

766 *
±r
++ = (
uöt8
Ë
qw‹d
;

770 
uöt8_ARRAY_V
:

771 
	`memmove
 (
±r
, (
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
, fõld†[i].
size
);

772 
±r
 +
fõlds
 [
i
].
size
;

774 
uöt16_ARRAY_V
:

775 
j
 = 0; j < 
fõlds
 [
i
].
size
; j++)

777 
w‹d
 = *((
uöt16
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
 + 
j
 * 2));

778 *
±r
++ = (
uöt8
Ë(
w‹d
 >> 8);

779 *
±r
++ = (
uöt8
Ë
w‹d
;

782 
uöt32_ARRAY_V
:

783 
j
 = 0; j < 
fõlds
 [
i
].
size
; j++)

785 
dw‹d
 = *((
uöt32
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
 + 
j
 * 4));

786 *
±r
++ = (
uöt8
Ë(
dw‹d
 >> 24);

787 *
±r
++ = (
uöt8
Ë(
dw‹d
 >> 16);

788 *
±r
++ = (
uöt8
Ë(
dw‹d
 >> 8);

789 *
±r
++ = (
uöt8
Ë
dw‹d
;

795 
	`FªezeBlock
 (
«me
, 
block
, 
Àn
);

797 
	`‰ì
(
block
);

798 
	}
}

800 
	$FªezeBlock
 (*
«me
, 
uöt8
 *
block
, 
size
)

802 
buf„r
 [512];

803 
	`•rötf
 (
buf„r
, "%s:%06d:", 
«me
, 
size
);

804 
	`°©ef_wrôe
(
buf„r
, 
	`°æí
 (buffer));

805 
	`°©ef_wrôe
(
block
, 
size
);

806 
	}
}

808 
	$Un‰ìzeSåu˘
 (*
«me
, *
ba£
, 
FªezeD©a
 *
fõlds
,

809 
num_fõlds
)

812 
Àn
 = 0;

813 
i
;

814 
j
;

816 
i
 = 0; i < 
num_fõlds
; i++)

818 i‡(
fõlds
 [
i
].
off£t
 + 
	`FªezeSize
 (fõld†[i].
size
,

819 
fõlds
 [
i
].
ty≥
Ë> 
Àn
)

820 
Àn
 = 
fõlds
 [
i
].
off£t
 + 
	`FªezeSize
 (fõld†[i].
size
,

821 
fõlds
 [
i
].
ty≥
);

824 
uöt8
 *
block
 = (uöt8*)
	`mÆloc
(
Àn
);

825 
uöt8
 *
±r
 = 
block
;

826 
uöt16
 
w‹d
;

827 
uöt32
 
dw‹d
;

828 
öt64
 
qw‹d
;

829 
ªsu…
;

831 i‡((
ªsu…
 = 
	`Un‰ìzeBlock
 (
«me
, 
block
, 
Àn
)Ë!
SUCCESS
)

833 
	`‰ì
(
block
);

834  (
ªsu…
);

838 
i
 = 0; i < 
num_fõlds
; i++)

840 
fõlds
 [
i
].
ty≥
)

842 
INT_V
:

843 
fõlds
 [
i
].
size
)

846 *((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
Ë*
±r
++;

849 
w‹d
 = *
±r
++ << 8;

850 
w‹d
 |*
±r
++;

851 *((
uöt16
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
)Ë
w‹d
;

854 
dw‹d
 = *
±r
++ << 24;

855 
dw‹d
 |*
±r
++ << 16;

856 
dw‹d
 |*
±r
++ << 8;

857 
dw‹d
 |*
±r
++;

858 *((
uöt32
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
)Ë
dw‹d
;

861 
qw‹d
 = (
öt64
Ë*
±r
++ << 56;

862 
qw‹d
 |(
öt64
Ë*
±r
++ << 48;

863 
qw‹d
 |(
öt64
Ë*
±r
++ << 40;

864 
qw‹d
 |(
öt64
Ë*
±r
++ << 32;

865 
qw‹d
 |(
öt64
Ë*
±r
++ << 24;

866 
qw‹d
 |(
öt64
Ë*
±r
++ << 16;

867 
qw‹d
 |(
öt64
Ë*
±r
++ << 8;

868 
qw‹d
 |(
öt64
Ë*
±r
++;

869 *((
öt64
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
)Ë
qw‹d
;

873 
uöt8_ARRAY_V
:

874 
	`memmove
 ((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
, 
±r
, fõld†[i].
size
);

875 
±r
 +
fõlds
 [
i
].
size
;

877 
uöt16_ARRAY_V
:

878 
j
 = 0; j < 
fõlds
 [
i
].
size
; j++)

880 
w‹d
 = *
±r
++ << 8;

881 
w‹d
 |*
±r
++;

882 *((
uöt16
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
 + 
j
 * 2)Ë
w‹d
;

885 
uöt32_ARRAY_V
:

886 
j
 = 0; j < 
fõlds
 [
i
].
size
; j++)

888 
dw‹d
 = *
±r
++ << 24;

889 
dw‹d
 |*
±r
++ << 16;

890 
dw‹d
 |*
±r
++ << 8;

891 
dw‹d
 |*
±r
++;

892 *((
uöt32
 *Ë((
uöt8
 *Ë
ba£
 + 
fõlds
 [
i
].
off£t
 + 
j
 * 4)Ë
dw‹d
;

899 
	`‰ì
(
block
);

900  (
ªsu…
);

901 
	}
}

903 
	$Un‰ìzeBlock
(*
«me
, 
uöt8
 *
block
, 
size
)

905 
buf„r
 [20];

906 
Àn
 = 0;

907 
ªm
 = 0;

908 
	`¥ötf
("Un‰ìzeBlock: %s\r\n",
«me
);

909 i‡(
	`°©ef_ªad
(
buf„r
, 11) != 11 ||

910 
	`°∫cmp
 (
buf„r
, 
«me
, 3) != 0 || buffer [3] != ':' ||

911 (
Àn
 = 
	`©oi
 (&
buf„r
 [4])) == 0)

913 
	`¥ötf
("Un‰ìzeBlockÉº1\r\n",
«me
);

914  (
WRONG_FORMAT
);

917 i‡(
Àn
 > 
size
)

919 
ªm
 = 
Àn
 - 
size
;

920 
Àn
 = 
size
;

923 i‡(
	`°©ef_ªad
(
block
, 
Àn
) !=Üen)

925 
	`¥ötf
("Un‰ìzeBlockÉº2\r\n",
«me
);

926  (
WRONG_FORMAT
);

929 i‡(
ªm
)

931 *
junk
 = (*)
	`mÆloc
(
ªm
);

932 
	`°©ef_ªad
(
junk
, 
ªm
);

933 
	`‰ì
(
junk
);

936  (
SUCCESS
);

937 
	}
}

	@snapshot.h

41 #i‚de‡
_SNAPSHOT_H_


42 
	#_SNAPSHOT_H_


	)

44 
	~<°dio.h
>

45 
	~"¢es9x.h
"

47 
	#SNAPSHOT_MAGIC
 "#!¢es9x"

	)

48 
	#SNAPSHOT_VERSION
 1

	)

50 
	#SUCCESS
 1

	)

51 
	#WRONG_FORMAT
 (-1)

	)

52 
	#WRONG_VERSION
 (-2)

	)

53 
	#FILE_NOT_FOUND
 (-3)

	)

55 
START_EXTERN_C


56 
boﬁ8
 
S9xFªezeGame
 (c⁄° *
fûíame
);

57 
boﬁ8
 
S9xUn‰ìzeGame
 (c⁄° *
fûíame
);

58 
boﬁ8
 
S«pshŸ
 (c⁄° *
fûíame
);

59 
boﬁ8
 
S9xLﬂdS«pshŸ
 (c⁄° *
fûíame
);

60 
boﬁ8
 
S9xSPCDump
 (c⁄° *
fûíame
);

61 
	gEND_EXTERN_C


	@snes9x.cpp

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

44 
	~"¢es9x.h
"

45 
	~"memm≠.h
"

46 
	~"di•œy.h
"

47 
	~"chóts.h
"

49 #ifde‡
DEBUGGER


50 
FILE
 *
åa˚
;

53 
	$S9xUßge
 ()

55 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "snes9x: S9xUsage: snes9x <options> <rom image filename>\n\n");

56 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "Where <options> can be:\n");

58 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-cycles or -h <num> Percentage of CPU cyclesÅoÉxecuteÉvery scanÜine (default 90)\n");

60 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-frameskip or -f <num> Screen update frame skipÑate (default 2)\n");

62 
	`S9xExåaUßge
 ();

63 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-forcehirom or -F or -FH Force Hi-ROM memory map, useful for hacked ROM imagess.\n");

65 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-forcelorom or -FL Force Lo-ROM memory map, useful for hacked ROM images.\n");

67 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-old or -o Enable old-style SNES joypadÉmulation\n");

69 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-noold or -no Disbale old-style SNES joypadÉmulation\n");

71 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-soundskip or -ss <num> Sound CPU skip-waiting method, 0 - 3 (default 0)\n");

73 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-sound or -S Enable digital sound output (default:Énabled)\n");

75 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-nosound or -NS Disable digital sound output\n");

77 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-sound or -S Enable digital sound output (default: off)\n");

79 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-soundquality or -r <num> Sound sampleÖlaybackÑate/quality, 0-7 (default 4)\n");

82 #ifde‡
__sgi


84 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
0 - off, 1 - 8192, 2 - 11025, 3 - 16000,\n\
4 - 22050 (default), 5 - 32000, 6 - 44100,\n\
7 - 48000\n");

89 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
0 - off, 1 - 8192, 2 - 11025, 3 - 16500,\n\
4 - 22050 (default), 5 - 29300, 6 - 36600,\n\
7 - 44000\n");

95 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-stereo Enable stereo sound (default: mono sound)\n");

97 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-mono Enable mono sound (default: mono sound)\n");

99 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-buffersize or -B SoundÖlayback buffer size (defaultáuto forÖlaybackÑate)\n");

101 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-nospeedhacks or -N Disable some internal speed upsÅhat breaká few ROMs\n");

103 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-speedhacks or -SH Enable some internal speed upsÅhat breaká few ROMs\n");

105 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-loadsnapshot or -l <filename>\n\
 saved gameÖosition snapshot file &Ñequired ROM\n\
.\n");

109 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-swapjoypads or -s Swap joypad 1ánd 2áround\n");

111 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-pal or -p Fool ROM intoÅhinkingÅhatÅhis isá PAL SNES system\n");

113 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-ntsc or -n Fool ROM intoÅhinkingÅhatÅhis isá NTCS SNES system\n");

115 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-interleaved or -i ROM image is in interleaved format.\n");

117 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-interleaved2 or -i2 ROM image is in interleaved 2 format\n");

119 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-nohdma or -H Disable H-DMAÉmulation (default:Énabled)\n");

121 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-hdma or -NH Enable H-DMAÉmulation (default:Énabled)\n");

123 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-layering or -L Swap some backgroundÖriorityÜevels - helps some games\n");

125 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-graphicwindows Enable graphic windowÉffects (default:Énabled)\n");

127 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-nographicwindows or -nw Disable graphic windowÉffects (default:Énabled)\n");

129 #ifde‡
DEBUGGER


130 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-noirq or -I DisableÖrocessor IRQ (for debugging)\n");

132 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-debug or -d Enter debug mode once ROM hasÜoaded\n");

134 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-trace or -t Trace CPU instructionsÅo file (WARNING: file gets veryÜarge!)\n");

138 #ifde‡
JOYSTICK_SUPPORT


139 #ifde‡
__löux


140 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-joydevX /dev/jsY Use joystick device /dev/jsY forÉmulation of gamepad X\n");

142 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-joymapX 0 1 2 3 4 5 6 7 Joystick buttons which should beássignedÅo gamepad X - A B X Y TL TR Startánd Select\n");

145 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-four or -4 Single standard PC joystick has four buttons\n");

147 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-six or -6 Single standard PC joystick has six buttons\n");

150 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
-nojoy or -j Disable joystick support\n");

154 
	`S9xMesßge
 (
S9X_INFO
, 
S9X_USAGE
, "\
\nROM imageÇeedsÅo be in Super MagiCom (*.smc), Super FamiCom (*.sfc),\n\
*.fig, or split (*.1, *.2, or sf32527a, sf32527b,Étc) formatánd can be\n\
 with gzip or compress.\n");

159 
	`exô
 (1);

160 
	}
}

162 #ifde‡
STORM


163 
doÂs
;

164 
hicﬁ‹
;

165 
£c⁄djoy
;

166 
möimÆ
;

167 
	g¥ñude
=0;

168 
unô
;

171 *
	$S9xP¨£Args
 (**
¨gv
, 
¨gc
)

173 *
rom_fûíame
 = 
NULL
;

175 
i
 = 1; i < 
¨gc
; i++)

177 i‡(*
¨gv
[
i
] == '-')

179 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-so") == 0 ||

180 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sound") == 0)

182 
Sëtögs
.
NextAPUE«bÀd
 = 
TRUE
;

184 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ns") == 0 ||

185 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nosound") == 0)

187 
Sëtögs
.
NextAPUE«bÀd
 = 
FALSE
;

189 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-soundskip") == 0 ||

190 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sk") == 0)

192 i‡(
i
 + 1 < 
¨gc
)

193 
Sëtögs
.
SoundSkùMëhod
 = 
	`©oi
 (
¨gv
 [++
i
]);

195 
	`S9xUßge
 ();

197 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ra") == 0 ||

198 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ratio") == 0)

200 i‡(
i
 + 1 < 
¨gc
)

204 
	`S9xUßge
 ();

206 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-h") == 0 ||

207 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-cycles") == 0)

209 i‡(
i
 + 1 < 
¨gc
)

211 
p
 = 
	`©oi
 (
¨gv
 [++
i
]);

212 i‡(
p
 > 0 &&Ö < 200)

213 
Sëtögs
.
Cy˛esPî˚¡age
 = 
p
;

216 
	`S9xUßge
 ();

218 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nh") == 0 ||

219 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nohdma") == 0)

221 
Sëtögs
.
DißbÀHDMA
 = 
TRUE
;

223 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ha") == 0 ||

224 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-hdma") == 0)

226 
Sëtögs
.
DißbÀHDMA
 = 
FALSE
;

228 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-n") == 0 ||

229 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nospeedhacks") == 0)

231 
Sëtögs
.
ShutdownMa°î
 = 
FALSE
;

233 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sh") == 0 ||

234 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-speedhacks") == 0)

236 
Sëtögs
.
ShutdownMa°î
 = 
TRUE
;

238 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-p") == 0 ||

239 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-pal") == 0)

241 
Sëtögs
.
F‹˚PAL
 = 
TRUE
;

243 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-n") == 0 ||

244 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ntsc") == 0)

246 
Sëtögs
.
F‹˚NTSC
 = 
TRUE
;

248 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-f") == 0 ||

249 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-frameskip") == 0)

251 i‡(
i
 + 1 < 
¨gc
)

252 
Sëtögs
.
SkùFømes
 = 
	`©oi
 (
¨gv
 [++
i
]) + 1;

254 
	`S9xUßge
 ();

256 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-fh") == 0 ||

257 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-hr") == 0 ||

258 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-hirom") == 0)

259 
Sëtögs
.
F‹˚HiROM
 = 
TRUE
;

260 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-fl") == 0 ||

261 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-lr") == 0 ||

262 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-lorom") == 0)

263 
Sëtögs
.
F‹˚LoROM
 = 
TRUE
;

264 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-hd") == 0 ||

265 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-header") == 0 ||

266 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-he") == 0)

268 
Sëtögs
.
F‹˚Hódî
 = 
TRUE
;

270 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nhd") == 0 ||

271 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-noheader") == 0)

273 
Sëtögs
.
F‹˚NoHódî
 = 
TRUE
;

275 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-bs") == 0)

277 
Sëtögs
.
BS
 = 
TRUE
;

279 #ifde‡
DEBUGGER


280 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-d") == 0 ||

281 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-debug") == 0)

283 
CPU
.
Fœgs
 |
DEBUG_MODE_FLAG
;

285 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-t") == 0 ||

286 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-trace") == 0)

288 
åa˚
 = 
	`f›í
 ("trace.log", "wb");

289 
CPU
.
Fœgs
 |
TRACE_FLAG
;

292 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-L") == 0 ||

293 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-layering") == 0)

294 
Sëtögs
.
BGLayîög
 = 
TRUE
;

295 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nl") == 0 ||

296 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nolayering") == 0)

297 
Sëtögs
.
BGLayîög
 = 
FALSE
;

298 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-O") == 0 ||

299 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-tileredraw") == 0)

302 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-no") == 0 ||

303 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-lineredraw") == 0)

306 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-tr") == 0 ||

307 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-transparency") == 0)

309 
Sëtögs
.
F‹˚Tøn•¨ícy
 = 
TRUE
;

310 
Sëtögs
.
F‹˚NoTøn•¨ícy
 = 
FALSE
;

312 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nt") == 0 ||

313 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-notransparency") == 0)

315 
Sëtögs
.
F‹˚NoTøn•¨ícy
 = 
TRUE
;

316 
Sëtögs
.
F‹˚Tøn•¨ícy
 = 
FALSE
;

318 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-hi") == 0 ||

319 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-hires") == 0)

321 
Sëtögs
.
Suµ‹tHiRes
 = 
TRUE
;

323 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-16") == 0 ||

324 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sixteen") == 0)

326 
Sëtögs
.
SixãíBô
 = 
TRUE
;

328 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-displayframerate") == 0 ||

329 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-dfr") == 0)

331 
Sëtögs
.
Di•œyFømeR©e
 = 
TRUE
;

333 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-s") == 0 ||

334 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-swapjoypads") == 0 ||

335 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sw") == 0)

336 
Sëtögs
.
Sw≠Joy∑ds
 = 
TRUE
;

337 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-i") == 0 ||

338 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-interleaved") == 0)

339 
Sëtögs
.
F‹˚I¡îÀaved
 = 
TRUE
;

340 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-i2") == 0 ||

341 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-interleaved2") == 0)

342 
Sëtögs
.
F‹˚I¡îÀaved2
 = 
TRUE
;

343 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ni") == 0 ||

344 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nointerleave") == 0)

345 
Sëtögs
.
F‹˚NŸI¡îÀaved
 = 
TRUE
;

346 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-noirq") == 0)

347 
Sëtögs
.
DißbÀIRQ
 = 
TRUE
;

348 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nw") == 0 ||

349 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nowindows") == 0)

351 
Sëtögs
.
DißbÀGøphicWödows
 = 
TRUE
;

353 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-windows") == 0)

355 
Sëtögs
.
DißbÀGøphicWödows
 = 
FALSE
;

357 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-im7") == 0)

359 
Sëtögs
.
Mode7I¡îpﬁ©e
 = 
TRUE
;

361 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-gg") == 0 ||

362 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-gamegenie") == 0)

364 i‡(
i
 + 1 < 
¨gc
)

366 
uöt32
 
addªss
;

367 
uöt8
 
byã
;

368 c⁄° *
îr‹
;

369 i‡((
îr‹
 = 
	`S9xGameGíõToRaw
 (
¨gv
 [++
i
], 
addªss
, 
byã
)Ë=
NULL
)

370 
	`S9xAddChót
 (
TRUE
, 
FALSE
, 
addªss
, 
byã
);

372 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_GAME_GENIE_CODE_ERROR
,

373 
îr‹
);

376 
	`S9xUßge
 ();

378 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ar") == 0 ||

379 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-actionreplay") == 0)

381 i‡(
i
 + 1 < 
¨gc
)

383 
uöt32
 
addªss
;

384 
uöt8
 
byã
;

385 c⁄° *
îr‹
;

386 i‡((
îr‹
 = 
	`S9xProA˘i⁄RïœyToRaw
 (
¨gv
 [++
i
], 
addªss
, 
byã
)Ë=
NULL
)

387 
	`S9xAddChót
 (
TRUE
, 
FALSE
, 
addªss
, 
byã
);

389 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_ACTION_REPLY_CODE_ERROR
,

390 
îr‹
);

393 
	`S9xUßge
 ();

395 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-gf") == 0 ||

396 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-goldfinger") == 0)

398 i‡(
i
 + 1 < 
¨gc
)

400 
uöt32
 
addªss
;

401 
uöt8
 
byãs
 [3];

402 
boﬁ8
 
§am
;

403 
uöt8
 
num_byãs
;

404 c⁄° *
îr‹
;

405 i‡((
îr‹
 = 
	`S9xGﬁdFögîToRaw
 (
¨gv
 [++
i
], 
addªss
, 
§am
,

406 
num_byãs
, 
byãs
)Ë=
NULL
)

408 
c
 = 0; c < 
num_byãs
; c++)

409 
	`S9xAddChót
 (
TRUE
, 
FALSE
, 
addªss
 + 
c
, 
byãs
 [c]);

412 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_GOLD_FINGER_CODE_ERROR
,

413 
îr‹
);

416 
	`S9xUßge
 ();

418 i‡(
	`°rˇ£cmp
 (
¨gv
[
i
], "-ft") == 0 ||

419 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-frametime") == 0)

421 i‡(
i
 + 1 < 
¨gc
)

423 
·
;

424 i‡(
	`ssˇnf
 (
¨gv
 [++
i
], "%lf", &
·
) == 1)

426 #ifde‡
__WIN32__


427 
Sëtögs
.
FømeTimePAL
 = (
öt32
Ë(
·
 * 1000);

428 
Sëtögs
.
FømeTimeNTSC
 = (
öt32
Ë(
·
 * 1000);

430 
Sëtögs
.
FømeTimePAL
 = (
öt32
Ë
·
;

431 
Sëtögs
.
FømeTimeNTSC
 = (
öt32
Ë
·
;

437 
	`S9xUßge
 ();

439 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-e") == 0 ||

440 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-echo") == 0)

441 
Sëtögs
.
DißbÀSoundEcho
 = 
FALSE
;

442 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ne") == 0 ||

443 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-noecho") == 0)

444 
Sëtögs
.
DißbÀSoundEcho
 = 
TRUE
;

445 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-r") == 0 ||

446 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-soundquality") == 0 ||

447 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sq") == 0)

449 i‡(
i
 + 1 < 
¨gc
)

450 
Sëtögs
.
SoundPœybackR©e
 = 
	`©oi
 (
¨gv
 [++
i
]) & 7;

452 
	`S9xUßge
 ();

454 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-stereo") == 0 ||

455 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-st") == 0)

457 
Sëtögs
.
Sãªo
 = 
TRUE
;

458 
Sëtögs
.
APUE«bÀd
 = 
TRUE
;

459 
Sëtögs
.
NextAPUE«bÀd
 = 
TRUE
;

461 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-mono") == 0)

463 
Sëtögs
.
Sãªo
 = 
FALSE
;

464 
Sëtögs
.
NextAPUE«bÀd
 = 
TRUE
;

466 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-envx") == 0 ||

467 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ex") == 0)

469 
Sëtögs
.
SoundEnvñ›eHeightRódög
 = 
TRUE
;

471 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nosamplecaching") == 0 ||

472 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nsc") == 0 ||

473 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nc") == 0)

475 
Sëtögs
.
DißbÀSam∂eCachög
 = 
TRUE
;

477 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nomastervolume") == 0 ||

478 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nmv") == 0)

480 
Sëtögs
.
DißbÀMa°îVﬁume
 = 
TRUE
;

482 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-soundsync") == 0 ||

483 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sy") == 0)

485 
Sëtögs
.
SoundSync
 = 
TRUE
;

486 
Sëtögs
.
SoundEnvñ›eHeightRódög
 = 
TRUE
;

487 
Sëtögs
.
I¡îpﬁ©edSound
 = 
TRUE
;

489 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-soundsync2") == 0 ||

490 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sy2") == 0)

492 
Sëtögs
.
SoundSync
 = 2;

493 
Sëtögs
.
SoundEnvñ›eHeightRódög
 = 
TRUE
;

494 
Sëtögs
.
I¡îpﬁ©edSound
 = 
TRUE
;

496 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-interpolatedsound") == 0 ||

497 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-is") == 0)

499 
Sëtögs
.
I¡îpﬁ©edSound
 = 
TRUE
;

501 #ifde‡
USE_THREADS


502 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-threadsound") == 0 ||

503 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ts") == 0)

505 
Sëtögs
.
ThªadSound
 = 
TRUE
;

508 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-alt") == 0 ||

509 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-altsampledecode") == 0)

511 
Sëtögs
.
A…Sam∂eDecode
 = 1;

513 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-fix") == 0)

515 
Sëtögs
.
FixFªquícy
 = 1;

517 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nosuperfx") == 0 ||

518 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nosfx") == 0)

519 
Sëtögs
.
F‹˚NoSu≥rFX
 = 
TRUE
;

520 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-superfx") == 0 ||

521 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-sfx") == 0)

522 
Sëtögs
.
F‹˚Su≥rFX
 = 
TRUE
;

523 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-dsp1") == 0)

524 
Sëtögs
.
F‹˚DSP1
 = 
TRUE
;

525 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nodsp1") == 0)

526 
Sëtögs
.
F‹˚NoDSP1
 = 
TRUE
;

527 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nomultiplayer5") == 0 ||

528 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nmp") == 0)

529 
Sëtögs
.
Mu…iPœyî5
 = 
FALSE
;

530 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-multiplayer5") == 0 ||

531 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-mp") == 0)

533 
Sëtögs
.
Mu…iPœyî5
 = 
TRUE
;

534 
Sëtögs
.
C⁄åﬁÀrO±i⁄
 = 
SNES_MULTIPLAYER5
;

536 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-mouse") == 0 ||

537 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-mo") == 0)

539 
Sëtögs
.
C⁄åﬁÀrO±i⁄
 = 
SNES_MOUSE_SWAPPED
;

540 
Sëtögs
.
Mou£
 = 
TRUE
;

542 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nomouse") == 0 ||

543 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nm") == 0)

545 
Sëtögs
.
Mou£
 = 
FALSE
;

547 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-superscope") == 0 ||

548 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-ss") == 0)

550 
Sëtögs
.
Su≥rSc›e
 = 
TRUE
;

551 
Sëtögs
.
C⁄åﬁÀrO±i⁄
 = 
SNES_SUPERSCOPE
;

553 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nosuperscope") == 0 ||

554 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-nss") == 0)

556 
Sëtögs
.
Su≥rSc›e
 = 
FALSE
;

558 #ifde‡
NETPLAY_SUPPORT


559 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-port") == 0 ||

560 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-po") == 0)

562 i‡(
i
 + 1 < 
¨gc
)

564 
Sëtögs
.
NëPœy
 = 
TRUE
;

565 
Sëtögs
.
P‹t
 = -
	`©oi
 (
¨gv
 [++
i
]);

568 
	`S9xUßge
 ();

570 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-server") == 0 ||

571 
	`°rˇ£cmp
 (
¨gv
 [
i
], "-srv") == 0)

573 i‡(
i
 + 1 < 
¨gc
)

575 
Sëtögs
.
NëPœy
 = 
TRUE
;

576 
	`°∫˝y
 (
Sëtögs
.
SîvîName
, 
¨gv
 [++
i
], 127);

577 
Sëtögs
.
SîvîName
 [127] = 0;

580 
	`S9xUßge
 ();

582 i‡(
	`°rˇ£cmp
 (
¨gv
 [
i
], "-net") == 0)

584 
Sëtögs
.
NëPœy
 = 
TRUE
;

587 #ifde‡
STORM


588 i‡(
	`°rˇ£cmp
(
¨gv
[
i
],"-no£c⁄djoy")==0){
£c⁄djoy
=0;}

589 i‡(
	`°rˇ£cmp
(
¨gv
[
i
],"-showÂs")==0){
doÂs
=1;}

590 i‡(
	`°rˇ£cmp
(
¨gv
[
i
],"-hicﬁ‹")==0){
hicﬁ‹
=1;}

591 i‡(
	`°rˇ£cmp
(
¨gv
[
i
],"-möimÆ")==0){
möimÆ
=1;
	`¥ötf
("Keyboard withÉxception of ESC switched off!\n");}

592 i‡(
	`°rˇ£cmp
(
¨gv
[
i
],"-ahiunit")==0)

594 i‡(
i
+1<
¨gc
)

596 
	`Ârötf
(
°dîr
,"AHI Unô sëÅo: Unô %i\n",
	`©oi
(
¨gv
[++
i
]));

597 
unô
=
	`©oi
(
¨gv
[++
i
]);

603 
	`S9xP¨£Arg
 (
¨gv
, 
i
, 
¨gc
);

606 
rom_fûíame
 = 
¨gv
 [
i
];

609  (
rom_fûíame
);

610 
	}
}

612 
	$S9xP¨£ChótsFûe
 (c⁄° *
rom_fûíame
)

614 
FILE
 *
f
;

615 
dú
 [
_MAX_DIR
];

616 
drive
 [
_MAX_DRIVE
];

617 
«me
 [
_MAX_FNAME
];

618 
ext
 [
_MAX_EXT
];

619 
‚ame
 [
_MAX_PATH
];

620 
buf
 [80];

621 
uöt32
 
addªss
;

622 
uöt8
 
byã
;

623 
uöt8
 
byãs
 [3];

624 
boﬁ8
 
§am
;

625 
uöt8
 
num_byãs
;

626 c⁄° *
îr‹
;

627 *
p
;

629 
	`_•lô∑th
 (
rom_fûíame
, 
drive
, 
dú
, 
«me
, 
ext
);

630 
	`_makï©h
 (
‚ame
, 
drive
, 
dú
, 
«me
, "pat");

632 i‡((
f
 = 
	`f›í
(
‚ame
, "r")Ë!
NULL
)

634 
	`fgës
(
buf
, 80, 
f
Ë!
NULL
)

636 i‡((
p
 = 
	`°ºchr
 (
buf
, '\n')Ë!
NULL
)

637 *
p
 = '\0';

653 
	`f˛o£
(
f
);

655 
	}
}

	@snes9x.h

41 #i‚de‡
_SNES9X_H_


42 
	#_SNES9X_H_


	)

44 
	#VERSION
 "1.39"

	)

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

49 #ifde‡
__WIN32__


50 
	~"..\w¢es9x.h
"

51 
	~"..\zlib\zlib.h
"

54 
	~"p‹t.h
"

55 
	~"65c816.h
"

56 
	~"mesßges.h
"

58 #i‡
deföed
(
USE_GLIDE
Ë&& !deföed(
GFX_MULTI_FORMAT
)

59 
	#GFX_MULTI_FORMAT


	)

62 
	#ROM_NAME_LEN
 23

	)

64 #ifde‡
ZLIB


66 
	~"zlib.h
"

68 
	#STREAM
 
gzFûe


	)

69 
	#READ_STREAM
(
p
,
l
,
s
Ë
	`gzªad
 (s,p,l)

	)

70 
	#WRITE_STREAM
(
p
,
l
,
s
Ë
	`gzwrôe
 (s,p,l)

	)

71 
	#OPEN_STREAM
(
f
,
m
Ë
	`gz›í
 (f,m)

	)

72 
	#CLOSE_STREAM
(
s
Ë
	`gz˛o£
 (s)

	)

73 
	#SEEK_STREAM
(
p
,
r
,
s
Ë
	`gz£ek
(s,p,r)

	)

75 #ifde‡
__GP32__


76 
	#STREAM
 *

77 
	#READ_STREAM
(
p
,
l
,
s
Ë
	`gp32_‰ód
 ((*Ì,(Ó,s)

	)

78 
	#WRITE_STREAM
(
p
,
l
,
s
Ë
	`gp32_fwrôe
 ((*Ì,(Ó,s)

	)

79 
	#OPEN_STREAM
(
f
,
m
Ë
	`gp32_f›í
 ((*)f,(*)m)

	)

80 
	#CLOSE_STREAM
(
s
Ë
	`gp32_f˛o£
 (s)

	)

81 
	#SEEK_STREAM
(
p
,
r
,
s
Ë
	`gp32_f£ek
’,r,s)

	)

84 
	#STREAM
 
FILE
 *

	)

85 
	#READ_STREAM
(
p
,
l
,
s
Ë
	`‰ód
 (p,1,l,s)

	)

86 
	#WRITE_STREAM
(
p
,
l
,
s
Ë
	`fwrôe
 (p,1,l,s)

	)

87 
	#OPEN_STREAM
(
f
,
m
Ë
	`f›í
 (f,m)

	)

88 
	#CLOSE_STREAM
(
s
Ë
	`f˛o£
 (s)

	)

89 
	#SEEK_STREAM
(
p
,
r
,
s
Ë
	`f£ek
(s,p,r)

	)

90 
	#FROM_CURRENT
 
SEEK_CUR


	)

96 
	#SNES_WIDTH
 256

	)

97 
	#SNES_HEIGHT
 224

	)

98 
	#SNES_HEIGHT_EXTENDED
 239

	)

99 
	#IMAGE_WIDTH
 (
Sëtögs
.
Suµ‹tHiRes
 ? 
SNES_WIDTH
 * 2 : SNES_WIDTH)

	)

100 
	#IMAGE_HEIGHT
 (
Sëtögs
.
Suµ‹tHiRes
 ? 
SNES_HEIGHT_EXTENDED
 * 2 : SNES_HEIGHT_EXTENDED)

	)

102 
	#SNES_MAX_NTSC_VCOUNTER
 262

	)

103 
	#SNES_MAX_PAL_VCOUNTER
 312

	)

104 
	#SNES_HCOUNTER_MAX
 342

	)

105 
	#SPC700_TO_65C816_RATIO
 2

	)

106 
	#AUTO_FRAMERATE
 200

	)

108 
	#PPU_IGNORE_FIXEDCOLCHANGES
 (1<<0)

	)

109 
	#PPU_IGNORE_WINDOW
 (1<<1)

	)

110 
	#PPU_IGNORE_ADDSUB
 (1<<2)

	)

111 
	#PPU_IGNORE_PALWRITE
 (1<<3)

	)

112 
	#GFX_IGNORE_OBJ
 (1<<4)

	)

113 
	#GFX_IGNORE_BG0
 (1<<5)

	)

114 
	#GFX_IGNORE_BG1
 (1<<6)

	)

115 
	#GFX_IGNORE_BG2
 (1<<7)

	)

116 
	#GFX_IGNORE_BG3
 (1<<8)

	)

135 #ifde‡
VAR_CYCLES


137 
	#SNES_CYCLES_PER_SCANLINE
 ((
uöt32
)(228*6))

	)

139 
	#SNES_CYCLES_PER_SCANLINE
 ((
uöt32
Ë(
SNES_SCANLINE_TIME
 / 
SNES_CLOCK_LEN
 + 0.5))

	)

142 
	#SNES_TR_MASK
 (1 << 4)

	)

143 
	#SNES_TL_MASK
 (1 << 5)

	)

144 
	#SNES_X_MASK
 (1 << 6)

	)

145 
	#SNES_A_MASK
 (1 << 7)

	)

146 
	#SNES_RIGHT_MASK
 (1 << 8)

	)

147 
	#SNES_LEFT_MASK
 (1 << 9)

	)

148 
	#SNES_DOWN_MASK
 (1 << 10)

	)

149 
	#SNES_UP_MASK
 (1 << 11)

	)

150 
	#SNES_START_MASK
 (1 << 12)

	)

151 
	#SNES_SELECT_MASK
 (1 << 13)

	)

152 
	#SNES_Y_MASK
 (1 << 14)

	)

153 
	#SNES_B_MASK
 (1 << 15)

	)

156 
	mSNES_MULTIPLAYER5
,

157 
	mSNES_JOYPAD
,

158 
	mSNES_MOUSE_SWAPPED
,

159 
	mSNES_MOUSE
,

160 
	mSNES_SUPERSCOPE
,

161 
	mSNES_JUSTIFIER
,

162 
	mSNES_JUSTIFIER_2
,

163 
	mSNES_MAX_CONTROLLER_OPTIONS


166 
	#DEBUG_MODE_FLAG
 (1 << 0)

	)

167 
	#TRACE_FLAG
 (1 << 1)

	)

168 
	#SINGLE_STEP_FLAG
 (1 << 2)

	)

169 
	#BREAK_FLAG
 (1 << 3)

	)

170 
	#SCAN_KEYS_FLAG
 (1 << 4)

	)

171 
	#SAVE_SNAPSHOT_FLAG
 (1 << 5)

	)

172 
	#DELAYED_NMI_FLAG
 (1 << 6)

	)

173 
	#NMI_FLAG
 (1 << 7)

	)

174 
	#PROCESS_SOUND_FLAG
 (1 << 8)

	)

175 
	#FRAME_ADVANCE_FLAG
 (1 << 9)

	)

176 
	#DELAYED_NMI_FLAG2
 (1 << 10)

	)

177 
	#IRQ_PENDING_FLAG
 (1 << 11)

	)

179 #ifde‡
VAR_CYCLES


180 
	#ONE_CYCLE
 6

	)

181 
	#SLOW_ONE_CYCLE
 8

	)

182 
	#TWO_CYCLES
 12

	)

184 
	#ONE_CYCLE
 1

	)

185 
	#SLOW_ONE_CYCLE
 1

	)

186 
	#TWO_CYCLES
 2

	)

190 #unde‡
MEMMAP_BLOCK_SIZE


191 
	#MEMMAP_BLOCK_SIZE
 (0x1000)

	)

192 #unde‡
MEMMAP_NUM_BLOCKS


193 
	#MEMMAP_NUM_BLOCKS
 (0x1000000 / 
MEMMAP_BLOCK_SIZE
)

	)

195 
	sSCPUSèã
{

196 
uöt32
 
	mFœgs
;

197 
boﬁ8
 
	mBønchSkù
;

198 
boﬁ8
 
	mNMIA˘ive
;

199 
boﬁ8
 
	mIRQA˘ive
;

200 
boﬁ8
 
	mWaôögF‹I¡îru±
;

201 
SRegi°îs
 
	mRegs
;

211 
uöt8
 *
	mPC
;

212 
öt32
 
	mCy˛es
;

213 
uöt8
 *
	mPCBa£
;

214 
uöt8
 *
	mPCAtOpcodeSèπ
;

215 
uöt8
 *
	mWaôAddªss
;

216 
uöt32
 
	mWaôCou¡î
;

217 
öt32
 
	mNextEvít
;

218 
öt32
 
	mV_Cou¡î
;

219 
öt32
 
	mMemS≥ed
;

220 
öt32
 
	mMemS≥edx2
;

221 
öt32
 
	mFa°ROMS≥ed
;

222 
uöt32
 
	mAutoSaveTimî
;

223 
uöt32
 
	mNMITriggîPoöt
;

224 
uöt32
 
	mNMICy˛eCou¡
;

225 
uöt32
 
	mIRQCy˛eCou¡
;

227 
boﬁ8
 
	mInDMA
;

228 
uöt8
 
	mWhichEvít
;

229 
boﬁ8
 
	mSRAMModifõd
;

230 
boﬁ8
 
	mBRKTriggîed
;

231 
uöt32
 
	m_ARM_asm_ª£rved_1
;

232 
boﬁ8
 
	mTrõdI¡îÀavedMode2
;

233 
boﬁ8
 
	m_ARM_asm_∑ddög1
[3];

235 
uöt8
* 
	mMem‹y_M≠
;

236 
uöt8
* 
	mMem‹y_WrôeM≠
;

237 
uöt8
* 
	mMem‹y_Mem‹yS≥ed
;

238 
uöt8
* 
	mMem‹y_BlockIsRAM
;

239 
uöt8
* 
	mMem‹y_SRAM
;

240 
uöt8
* 
	mMem‹y_BWRAM
;

241 
uöt16
 
	mMem‹y_SRAMMask
;

242 
boﬁ8
 
	mAPU_APUExecutög
;

243 
boﬁ8
 
	m_ARM_asm_∑ddög2
;

244 
uöt32
 
	m_PALMSOS_R9
;

245 
uöt32
 
	m_PALMSOS_R10
;

246 
öt32
 
	mAPU_Cy˛es
;

250 
	#HBLANK_START_EVENT
 0

	)

251 
	#HBLANK_END_EVENT
 1

	)

252 
	#HTIMER_BEFORE_EVENT
 2

	)

253 
	#HTIMER_AFTER_EVENT
 3

	)

254 
	#NO_EVENT
 4

	)

256 
	sSSëtögs
{

258 
boﬁ8
 
	mAPUE«bÀd
;

259 
boﬁ8
 
	mShutdown
;

260 
uöt8
 
	mSoundSkùMëhod
;

261 
	mH_Max
;

262 
	mHBœnkSèπ
;

263 
	mCy˛esPî˚¡age
;

264 
boﬁ8
 
	mDißbÀIRQ
;

265 
boﬁ8
 
	mPau£d
;

266 
boﬁ8
 
	mF‹˚dPau£
;

267 
boﬁ8
 
	mSt›Emuœti⁄
;

270 
boﬁ8
 
	mTø˚DMA
;

271 
boﬁ8
 
	mTø˚HDMA
;

272 
boﬁ8
 
	mTø˚VRAM
;

273 
boﬁ8
 
	mTø˚UnknownRegi°îs
;

274 
boﬁ8
 
	mTø˚DSP
;

277 
boﬁ8
 
	mSw≠Joy∑ds
;

278 
boﬁ8
 
	mJoy°ickE«bÀd
;

281 
boﬁ8
 
	mF‹˚PAL
;

282 
boﬁ8
 
	mF‹˚NTSC
;

283 
boﬁ8
 
	mPAL
;

284 
uöt32
 
	mFømeTimePAL
;

285 
uöt32
 
	mFømeTimeNTSC
;

286 
uöt32
 
	mFømeTime
;

287 
uöt32
 
	mSkùFømes
;

290 
boﬁ8
 
	mF‹˚LoROM
;

291 
boﬁ8
 
	mF‹˚HiROM
;

292 
boﬁ8
 
	mF‹˚Hódî
;

293 
boﬁ8
 
	mF‹˚NoHódî
;

294 
boﬁ8
 
	mF‹˚I¡îÀaved
;

295 
boﬁ8
 
	mF‹˚I¡îÀaved2
;

296 
boﬁ8
 
	mF‹˚NŸI¡îÀaved
;

299 
boﬁ8
 
	mF‹˚Su≥rFX
;

300 
boﬁ8
 
	mF‹˚NoSu≥rFX
;

301 
boﬁ8
 
	mF‹˚DSP1
;

302 
boﬁ8
 
	mF‹˚NoDSP1
;

303 
boﬁ8
 
	mF‹˚SA1
;

304 
boﬁ8
 
	mF‹˚NoSA1
;

305 
boﬁ8
 
	mF‹˚C4
;

306 
boﬁ8
 
	mF‹˚NoC4
;

307 
boﬁ8
 
	mF‹˚SDD1
;

308 
boﬁ8
 
	mF‹˚NoSDD1
;

309 
boﬁ8
 
	mMu…iPœyî5
;

310 
boﬁ8
 
	mMou£
;

311 
boﬁ8
 
	mSu≥rSc›e
;

312 
boﬁ8
 
	mSRTC
;

313 
uöt32
 
	mC⁄åﬁÀrO±i⁄
;

315 
boﬁ8
 
	mShutdownMa°î
;

316 
boﬁ8
 
	mMu…iPœyî5Ma°î
;

317 
boﬁ8
 
	mSu≥rSc›eMa°î
;

318 
boﬁ8
 
	mMou£Ma°î
;

319 
boﬁ8
 
	mSu≥rFX
;

320 
boﬁ8
 
	mDSP1Ma°î
;

321 
boﬁ8
 
	mSA1
;

322 
boﬁ8
 
	mC4
;

323 
boﬁ8
 
	mSDD1
;

326 
uöt32
 
	mSoundPœybackR©e
;

327 
boﬁ8
 
	mTø˚SoundDSP
;

328 
boﬁ8
 
	mSãªo
;

329 
boﬁ8
 
	mRevî£Sãªo
;

330 
boﬁ8
 
	mSixãíBôSound
;

331 
	mSoundBuf„rSize
;

332 
	mSoundMixI¡îvÆ
;

333 
boﬁ8
 
	mSoundEnvñ›eHeightRódög
;

334 
boﬁ8
 
	mDißbÀSoundEcho
;

335 
boﬁ8
 
	mDißbÀSam∂eCachög
;

336 
boﬁ8
 
	mDißbÀMa°îVﬁume
;

337 
boﬁ8
 
	mSoundSync
;

338 
boﬁ8
 
	mI¡îpﬁ©edSound
;

339 
boﬁ8
 
	mThªadSound
;

340 
boﬁ8
 
	mMuã
;

342 
uöt8
 
	mA…Sam∂eDecode
;

343 
boﬁ8
 
	mFixFªquícy
;

346 
boﬁ8
 
	mSixãíBô
;

347 
boﬁ8
 
	mTøn•¨ícy
;

348 
boﬁ8
 
	mSuµ‹tHiRes
;

349 
boﬁ8
 
	mMode7I¡îpﬁ©e
;

352 
boﬁ8
 
	mBGLayîög
;

353 
boﬁ8
 
	mDißbÀGøphicWödows
;

354 
boﬁ8
 
	mF‹˚Tøn•¨ícy
;

355 
boﬁ8
 
	mF‹˚NoTøn•¨ícy
;

356 
boﬁ8
 
	mDißbÀHDMA
;

357 
boﬁ8
 
	mDi•œyFømeR©e
;

360 
boﬁ8
 
	mNëPœy
;

361 
boﬁ8
 
	mNëPœySîvî
;

362 
	mSîvîName
 [128];

363 
	mP‹t
;

364 
boﬁ8
 
	mGlideE«bÀ
;

365 
boﬁ8
 
	mO≥nGLE«bÀ
;

366 
öt32
 
	mAutoSaveDñay
;

367 
boﬁ8
 
	mAµlyChóts
;

368 
boﬁ8
 
	mTurboMode
;

369 
uöt32
 
	mTurboSkùFømes
;

370 
uöt32
 
	mAutoMaxSkùFømes
;

371 
uöt32
 
	mos9x_hack
;

374 
uöt32
 
	mSåikeGu¬îOff£tHack
;

375 
boﬁ8
 
	mChuckRock
;

376 
boﬁ8
 
	mSèrfoxHack
;

377 
boﬁ8
 
	mWöãrGﬁd
;

378 
boﬁ8
 
	mDez´m⁄
;

379 
boﬁ8
 
	mWª°Àm™üArˇde
;

380 
boﬁ8
 
	mBS
;

381 
boﬁ8
 
	mDaffyDuck
;

382 
uöt8
 
	mAPURAMInôülVÆue
;

383 
boﬁ8
 
	mSDD1Pack
;

386 
uöt32
 
	mGfxLayîMask
;

387 #ifde‡
__WIN32__


388 
	mSoundDrivî
;

392 
	sSSNESGameFixes


394 
uöt8
 
	mNìdInô0x2137
;

395 
uöt8
 
	mumih¨akawa£Fix
;

396 
uöt8
 
	mÆõnVS¥edë‹Fix
;

397 
uöt8
 
	mAPU_OutP‹ts_Rëu∫VÆueFix
;

398 
uöt8
 
	mOld_Ród0x4200
;

399 
uöt8
 
	m_0x213E_Rëu∫VÆue
;

400 
uöt8
 
	mTouhaidíC⁄åﬁÀrFix
;

401 
uöt8
 
	mSoundEnvñ›eHeightRódög2
;

402 
uöt8
 
	mSRAMInôülVÆue
;

405 
START_EXTERN_C


406 
SSëtögs
 
Sëtögs
;

407 
SCPUSèã
 
CPU
;

408 
SSNESGameFixes
 
SNESGameFixes
;

409 
Såög
 [513];

411 
S9xExô
 ();

412 
S9xMesßge
 (
ty≥
, 
numbî
, c⁄° *
mesßge
);

413 
S9xLﬂdSDD1D©a
 ();

414 
END_EXTERN_C


417 
	mPAUSE_NETPLAY_CONNECT
 = (1 << 0),

418 
	mPAUSE_TOGGLE_FULL_SCREEN
 = (1 << 1),

419 
	mPAUSE_EXIT
 = (1 << 2),

420 
	mPAUSE_MENU
 = (1 << 3),

421 
	mPAUSE_INACTIVE_WINDOW
 = (1 << 4),

422 
	mPAUSE_WINDOW_ICONISED
 = (1 << 5),

423 
	mPAUSE_RESTORE_GUI
 = (1 << 6),

424 
	mPAUSE_FREEZE_FILE
 = (1 << 7)

426 
S9xSëPau£
 (
uöt32
 
mask
);

427 
S9xCÀ¨Pau£
 (
uöt32
 
mask
);

	@soundux.cpp

41 #ifde‡
__DJGPP__


42 
	~<ÆÀgro.h
>

43 #unde‡
TRUE


46 
	~<°döt.h
>

47 
	~<°dlib.h
>

48 
	~<°dio.h
>

49 
	~<°rög.h
>

50 
	~<î∫o.h
>

54 #ifde‡
__˝lu•lus


57 
mem˝y16
(*
de°
, *
§c
, 
cou¡
);

58 
mem˝y16bsw≠
(*
de°
, *
§c
, 
cou¡
);

59 
mem˝y32
(
uöt32_t
 *
de°
, *
§c
, 
cou¡
);

60 
mem£t32
(
uöt32_t
 *
de°
, 
c
, 
cou¡
);

61 #ifde‡
__˝lu•lus


65 
	#CLIP16
(
v
Ë\

	)

66 i‡((
	gv
) < -32768) \

67 (
	gv
) = -32768; \

69 i‡((
	gv
) > 32767) \

70 (
	gv
) = 32767

72 
	#CLIP16_œtch
(
v
,
l
Ë\

	)

73 i‡((
	gv
) < -32768) \

74 { (
	gv
Ë-32768; (
	gl
)++; }\

76 i‡((
	gv
) > 32767) \

77 { (
	gv
Ë32767; (
	gl
)++; }

79 
	#CLIP24
(
v
Ë\

	)

80 i‡((
	gv
) < -8388608) \

81 (
	gv
) = -8388608; \

83 i‡((
	gv
) > 8388607) \

84 (
	gv
) = 8388607

96 
	~"¢es9x.h
"

97 
	~"soundux.h
"

98 
	~"≠u.h
"

99 
	~"memm≠.h
"

100 
	~"˝uexec.h
"

104 
wave
[
SOUND_BUFFER_SIZE
];

107 
MixBuf„r
 [
SOUND_BUFFER_SIZE
];

110 
Z
;

113 
FûãrVÆues
[4][2];

118 
	#FIXED_POINT_REMAINDER
 0xffffUL

	)

119 
	#FIXED_POINT_SHIFT
 16

	)

121 
	#VOL_DIV8
 0x8000

	)

122 
	#VOL_DIV16
 0x0080

	)

123 
	#ENVX_SHIFT
 24

	)

125 "C" 
DecodeBlockAsm
 (
öt8
 *, 
öt16
 *, 
öt32
 *, int32 *);

129 
	#PITCH_MOD
(
F
,
M
Ë((FË* ((((Ë(M)Ë+ 0x800000Ë>> 16Ë>> 7)

	)

132 
	#LAST_SAMPLE
 0xffffff

	)

133 
	#JUST_PLAYED_LAST_SAMPLE
(
c
Ë((c)->
ßm∂e_poöãr
 >
LAST_SAMPLE
)

	)

136 
ölöe
 
	$S9xAPUSëEndOfSam∂e
 (
i
, 
Ch™√l
 *
ch
)

138 
ch
->
°©e
 = 
SOUND_SILENT
;

139 
ch
->
mode
 = 
MODE_NONE
;

140 
APU
.
DSP
 [
APU_ENDX
] |1 << 
i
;

141 
APU
.
DSP
 [
APU_KON
] &~(1 << 
i
);

142 
APU
.
DSP
 [
APU_KOFF
] &~(1 << 
i
);

143 
APU
.
KeyedCh™√ls
 &~(1 << 
i
);

144 
	}
}

145 #ifde‡
__DJGPP


146 
	$END_OF_FUNCTION
 (
S9xAPUSëEndOfSam∂e
)

149 
ölöe
 
	$S9xAPUSëEndX
 (
ch
)

151 
APU
.
DSP
 [
APU_ENDX
] |1 << 
ch
;

152 
	}
}

153 #ifde‡
__DJGPP


154 
	$END_OF_FUNCTION
 (
S9xAPUSëEndX
)

157 
	$S9xSëEchoDñay
 (
dñay
)

159 
SoundD©a
.
echo_buf„r_size
 = (512 * 
dñay
 * 
so
.
∂ayback_øã
) >> 15;

160 i‡(
so
.
°îeo
)

161 
SoundD©a
.
echo_buf„r_size
 <<= 1;

162 i‡(
SoundD©a
.
echo_buf„r_size
) {

163 
SoundD©a
.
echo_±r
 >SoundD©a.
echo_buf„r_size
)

164 
SoundD©a
.
echo_±r
 -SoundD©a.
echo_buf„r_size
;

166 
SoundD©a
.
echo_±r
 = 0;

167 
	`S9xSëEchoE«bÀ
 (
APU
.
DSP
 [
APU_EON
]);

168 
	}
}

170 
	$S9xSëSoundKeyOff
 (
ch™√l
)

172 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

174 i‡(
ch
->
°©e
 !
SOUND_SILENT
)

176 
ch
->
°©e
 = 
SOUND_RELEASE
;

177 
ch
->
mode
 = 
MODE_RELEASE
;

178 
	`S9xSëEnvR©e
 (
ch
, 8, -1, 0, 5<<28);

180 
	}
}

182 
	$S9xFixSoundA·îS«pshŸLﬂd
 ()

184 
SoundD©a
.
echo_wrôe_íabÀd
 = !(
APU
.
DSP
 [
APU_FLG
] & 0x20);

185 
SoundD©a
.
echo_ch™√l_íabÀ
 = 
APU
.
DSP
 [
APU_EON
];

186 
	`S9xSëEchoDñay
 (
APU
.
DSP
 [
APU_EDL
] & 0xf);

187 
	`S9xSëEchoFìdback
 ((sig√d Ë
APU
.
DSP
 [
APU_EFB
]);

189 
	`S9xSëFûãrC€fficõ¡
 (0, (sig√d Ë
APU
.
DSP
 [
APU_C0
]);

190 
	`S9xSëFûãrC€fficõ¡
 (1, (sig√d Ë
APU
.
DSP
 [
APU_C1
]);

191 
	`S9xSëFûãrC€fficõ¡
 (2, (sig√d Ë
APU
.
DSP
 [
APU_C2
]);

192 
	`S9xSëFûãrC€fficõ¡
 (3, (sig√d Ë
APU
.
DSP
 [
APU_C3
]);

193 
	`S9xSëFûãrC€fficõ¡
 (4, (sig√d Ë
APU
.
DSP
 [
APU_C4
]);

194 
	`S9xSëFûãrC€fficõ¡
 (5, (sig√d Ë
APU
.
DSP
 [
APU_C5
]);

195 
	`S9xSëFûãrC€fficõ¡
 (6, (sig√d Ë
APU
.
DSP
 [
APU_C6
]);

196 
	`S9xSëFûãrC€fficõ¡
 (7, (sig√d Ë
APU
.
DSP
 [
APU_C7
]);

198 
i
 = 0; i < 8; i++)

200 
SoundD©a
.
ch™√ls
[
i
].
√eds_decode
 = 
TRUE
;

201 
	`S9xSëSoundFªquícy
 (
i
, 
SoundD©a
.
ch™√ls
[i].
hîtz
);

202 
SoundD©a
.
ch™√ls
 [
i
].
ívxx
 = SoundD©a.ch™√l†[i].
ívx
 << 
ENVX_SHIFT
;

203 
SoundD©a
.
ch™√ls
 [
i
].
√xt_ßm∂e
 = 0;

204 
SoundD©a
.
ch™√ls
 [
i
].
öãΩﬁ©e
 = 0;

205 
SoundD©a
.
ch™√ls
 [
i
].
¥evious
 [0] = (
öt32
ËSoundD©a.ch™√l†[i].
¥evious16
 [0];

206 
SoundD©a
.
ch™√ls
 [
i
].
¥evious
 [1] = (
öt32
ËSoundD©a.ch™√l†[i].
¥evious16
 [1];

208 
SoundD©a
.
ma°î_vﬁume
 [0] = SoundD©a.
ma°î_vﬁume_À·
;

209 
SoundD©a
.
ma°î_vﬁume
 [1] = SoundD©a.
ma°î_vﬁume_right
;

210 
SoundD©a
.
echo_vﬁume
 [0] = SoundD©a.
echo_vﬁume_À·
;

211 
SoundD©a
.
echo_vﬁume
 [1] = SoundD©a.
echo_vﬁume_right
;

212 
IAPU
.
Sˇ∆öe
 = 0;

213 
	}
}

215 
	$S9xSëEnvñ›eHeight
 (
ch™√l
, 
Àvñ
)

217 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

219 
ch
->
ívx
 = 
Àvñ
;

220 
ch
->
ívxx
 = 
Àvñ
 << 
ENVX_SHIFT
;

222 
ch
->
À·_vﬁ_Àvñ
 = (
Àvñ
 * ch->
vﬁume_À·
) / 128;

223 
ch
->
right_vﬁ_Àvñ
 = (
Àvñ
 * ch->
vﬁume_right
) / 128;

225 i‡(
ch
->
ívx
 =0 && ch->
°©e
 !
SOUND_SILENT
 && ch->°©ê!
SOUND_GAIN
)

227 
	`S9xAPUSëEndOfSam∂e
 (
ch™√l
, 
ch
);

229 
	}
}

232 
	$S9xSëSoundSam∂e
 (, 
uöt16
)

234 
	}
}

236 
	$S9xSëSoundSam∂e
 (
ch™√l
, 
uöt16
 
ßm∂e_numbî
)

238 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

240 i‡(
ch
->
°©e
 !
SOUND_SILENT
 &&

241 
ßm∂e_numbî
 !
ch
->sample_number)

243 
kìp
 = 
ch
->
°©e
;

244 
ch
->
°©e
 = 
SOUND_SILENT
;

245 
ch
->
ßm∂e_numbî
 = sample_number;

246 
ch
->
lo›
 = 
FALSE
;

247 
ch
->
√eds_decode
 = 
TRUE
;

248 
ch
->
œ°_block
 = 
FALSE
;

249 
ch
->
¥evious
 [0] = ch->previous[1] = 0;

250 
ch
->
block_poöãr
 = *
	`S9xGëSam∂eAddªss
(
ßm∂e_numbî
);

251 
ch
->
ßm∂e_poöãr
 = 0;

252 
ch
->
°©e
 = 
kìp
;

254 
	}
}

257 
	$DecodeBlock
 (
Ch™√l
 *
ch
)

259 i‡(
ch
->
block_poöãr
 >= 0x10000 - 9)

261 
ch
->
œ°_block
 = 
TRUE
;

262 
ch
->
lo›
 = 
FALSE
;

263 
ch
->
block
 = ch->
decoded
;

264 
	`mem£t32
 ((
uöt32_t
 *Ë
ch
->
decoded
, 0, 8);

267 sig√d *
com¥es£d
 = (sig√d *Ë&
IAPU
.
RAM
 [
ch
->
block_poöãr
];

269 
fûãr
 = *
com¥es£d
;

270 i‡((
ch
->
œ°_block
 = 
fûãr
 & 1))

271 
ch
->
lo›
 = (
fûãr
 & 2) != 0;

273 
öt16
 *
øw
 = 
ch
->
block
 = ch->
decoded
;

276 
	`DecodeBlockAsm
 (
com¥es£d
, 
øw
, &
ch
->
¥evious
 [0], &ch->previous [1]);

278 
öt32
 
out
;

279 
shi·
;

280 sig√d 
ßm∂e1
, 
ßm∂e2
;

281 
i
;

283 
com¥es£d
++;

285 
öt32
 
¥ev0
 = 
ch
->
¥evious
 [0];

286 
öt32
 
¥ev1
 = 
ch
->
¥evious
 [1];

287 
shi·
 = 
fûãr
 >> 4;

289 (
fûãr
 >> 2) & 3)

292 
i
 = 8; i != 0; i--)

294 
ßm∂e1
 = *
com¥es£d
++;

295 
ßm∂e2
 = 
ßm∂e1
 << 4;

296 
ßm∂e2
 >>= 4;

297 
ßm∂e1
 >>= 4;

298 *
øw
++ = ((
öt32
Ë
ßm∂e1
 << 
shi·
);

299 *
øw
++ = ((
öt32
Ë
ßm∂e2
 << 
shi·
);

301 
¥ev1
 = *(
øw
 - 2);

302 
¥ev0
 = *(
øw
 - 1);

305 
i
 = 8; i != 0; i--)

307 
ßm∂e1
 = *
com¥es£d
++;

308 
ßm∂e2
 = 
ßm∂e1
 << 4;

309 
ßm∂e2
 >>= 4;

310 
ßm∂e1
 >>= 4;

311 
¥ev0
 = (
öt16
)Örev0;

312 *
øw
++ = 
¥ev1
 = ((
öt32
Ë
ßm∂e1
 << 
shi·
Ë+ 
¥ev0
 - (prev0 >> 4);

313 
¥ev1
 = (
öt16
)Örev1;

314 *
øw
++ = 
¥ev0
 = ((
öt32
Ë
ßm∂e2
 << 
shi·
Ë+ 
¥ev1
 - (prev1 >> 4);

318 
i
 = 8; i != 0; i--)

320 
ßm∂e1
 = *
com¥es£d
++;

321 
ßm∂e2
 = 
ßm∂e1
 << 4;

322 
ßm∂e2
 >>= 4;

323 
ßm∂e1
 >>= 4;

325 
out
 = (
ßm∂e1
 << 
shi·
Ë- 
¥ev1
 + (prev1 >> 4);

326 
¥ev1
 = (
öt16
Ë
¥ev0
;

327 
¥ev0
 &= ~3;

328 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 5) -

329 (
¥ev0
 >> 4);

331 
out
 = (
ßm∂e2
 << 
shi·
Ë- 
¥ev1
 + (prev1 >> 4);

332 
¥ev1
 = (
öt16
Ë
¥ev0
;

333 
¥ev0
 &= ~3;

334 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 5) -

335 (
¥ev0
 >> 4);

339 
i
 = 8; i != 0; i--)

341 
ßm∂e1
 = *
com¥es£d
++;

342 
ßm∂e2
 = 
ßm∂e1
 << 4;

343 
ßm∂e2
 >>= 4;

344 
ßm∂e1
 >>= 4;

345 
out
 = (
ßm∂e1
 << 
shi·
);

347 
out
 = ouà- 
¥ev1
 + (prev1 >> 3) + (prev1 >> 4);

348 
¥ev1
 = (
öt16
Ë
¥ev0
;

349 
¥ev0
 &= ~3;

350 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 3) -

351 (
¥ev0
 >> 4Ë- (
¥ev1
 >> 6);

353 
out
 = (
ßm∂e2
 << 
shi·
);

354 
out
 = ouà- 
¥ev1
 + (prev1 >> 3) + (prev1 >> 4);

355 
¥ev1
 = (
öt16
Ë
¥ev0
;

356 
¥ev0
 &= ~3;

357 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 3) -

358 (
¥ev0
 >> 4Ë- (
¥ev1
 >> 6);

362 
ch
->
¥evious
 [0] = 
¥ev0
;

363 
ch
->
¥evious
 [1] = 
¥ev1
;

365 
ch
->
block_poöãr
 += 9;

366 
	}
}

369 
	$MixSãªo
 (
ßm∂e_cou¡
)

371 
pôch_mod
 = 
SoundD©a
.pôch_mod & (0xFFFFFFFF^
APU
.
DSP
[
APU_NON
]);

373 
uöt32
 
J
 = 0; J < 
NUM_CHANNELS
; J++)

375 
öt32
 
VL
, 
VR
;

376 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
J
];

377 
‰eq0
 = 
ch
->
‰equícy
;

379 i‡(
ch
->
°©e
 =
SOUND_SILENT
 || !(
so
.
sound_swôch
 & (1 << 
J
)))

384 
boﬁ8
 
mod
 = 
pôch_mod
 & (1 << 
J
);

386 i‡(
ch
->
√eds_decode
)

388 
	`DecodeBlock
(
ch
);

389 
ch
->
√eds_decode
 = 
FALSE
;

390 
ch
->
ßm∂e
 = ch->
block
[0];

391 
ch
->
ßm∂e_poöãr
 = 
‰eq0
 >> 
FIXED_POINT_SHIFT
;

392 i‡(
ch
->
ßm∂e_poöãr
 == 0)

393 
ch
->
ßm∂e_poöãr
 = 1;

394 i‡(
ch
->
ßm∂e_poöãr
 > 
SOUND_DECODE_LENGTH
)

395 
ch
->
ßm∂e_poöãr
 = 
SOUND_DECODE_LENGTH
 - 1;

397 
ch
->
√xt_ßm∂e
 = ch->
block
[ch->
ßm∂e_poöãr
];

398 
ch
->
öãΩﬁ©e
 = 0;

400 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq0
 < 
FIXED_POINT
 && !
mod
)

401 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

402 (Ë
‰eq0
Ë/ (Ë
FIXED_POINT
;

404 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

405 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

407 
uöt32
 
I
 = 0; I < (uöt32Ë
ßm∂e_cou¡
; I += 2)

409 
‰eq
 = 
‰eq0
;

411 i‡(
mod
)

412 
‰eq
 = 
	`PITCH_MOD
(‰eq, 
wave
 [
I
 / 2]);

414 
ch
->
ív_îr‹
 +ch->
î©e
;

415 i‡(
ch
->
ív_îr‹
 >
FIXED_POINT
)

417 
uöt32
 
°ï
 = 
ch
->
ív_îr‹
 >> 
FIXED_POINT_SHIFT
;

419 
ch
->
°©e
)

421 
SOUND_ATTACK
:

422 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

423 
ch
->
ívx
 +
°ï
 << 1;

424 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

426 i‡(
ch
->
ívx
 >= 126)

428 
ch
->
ívx
 = 127;

429 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

430 
ch
->
°©e
 = 
SOUND_DECAY
;

431 i‡(
ch
->
su°aö_Àvñ
 != 8)

433 
	`S9xSëEnvR©e
 (
ch
, ch->
deˇy_øã
, -1,

434 (
MAX_ENVELOPE_HEIGHT
 * 
ch
->
su°aö_Àvñ
) >> 3, 1<<28);

437 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

438 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0, 2<<28);

442 
SOUND_DECAY
:

443 
ch
->
ív_îr‹
 >
FIXED_POINT
)

445 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

446 
ch
->
ív_îr‹
 -
FIXED_POINT
;

448 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

449 i‡(
ch
->
ívx
 <ch->
ívx_èrgë
)

451 i‡(
ch
->
ívx
 <= 0)

453 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

454 
°îeo_exô
;

456 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

457 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0, 2<<28);

461 
SOUND_SUSTAIN
:

462 
ch
->
ív_îr‹
 >
FIXED_POINT
)

464 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

465 
ch
->
ív_îr‹
 -
FIXED_POINT
;

467 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

468 i‡(
ch
->
ívx
 <= 0)

470 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

471 
°îeo_exô
;

475 
SOUND_RELEASE
:

476 
ch
->
ív_îr‹
 >
FIXED_POINT
)

478 
ch
->
ívxx
 -(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

479 
ch
->
ív_îr‹
 -
FIXED_POINT
;

481 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

482 i‡(
ch
->
ívx
 <= 0)

484 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

485 
°îeo_exô
;

489 
SOUND_INCREASE_LINEAR
:

490 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

491 
ch
->
ívx
 +
°ï
 << 1;

492 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

494 i‡(
ch
->
ívx
 >= 126)

496 
ch
->
ívx
 = 127;

497 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

498 
ch
->
°©e
 = 
SOUND_GAIN
;

499 
ch
->
mode
 = 
MODE_GAIN
;

500 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0, 0);

504 
SOUND_INCREASE_BENT_LINE
:

505 i‡(
ch
->
ívx
 >(
MAX_ENVELOPE_HEIGHT
 * 3) / 4)

507 
ch
->
ív_îr‹
 >
FIXED_POINT
)

509 
ch
->
ívxx
 +(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

510 
ch
->
ív_îr‹
 -
FIXED_POINT
;

512 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

516 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

517 
ch
->
ívx
 +
°ï
 << 1;

518 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

521 i‡(
ch
->
ívx
 >= 126)

523 
ch
->
ívx
 = 127;

524 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

525 
ch
->
°©e
 = 
SOUND_GAIN
;

526 
ch
->
mode
 = 
MODE_GAIN
;

527 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0, 0);

531 
SOUND_DECREASE_LINEAR
:

532 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

533 
ch
->
ívx
 -
°ï
 << 1;

534 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

535 i‡(
ch
->
ívx
 <= 0)

537 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

538 
°îeo_exô
;

542 
SOUND_DECREASE_EXPONENTIAL
:

543 
ch
->
ív_îr‹
 >
FIXED_POINT
)

545 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

546 
ch
->
ív_îr‹
 -
FIXED_POINT
;

548 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

549 i‡(
ch
->
ívx
 <= 0)

551 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

552 
°îeo_exô
;

556 
SOUND_GAIN
:

557 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0, 0);

560 
ch
-> 
À·_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_À·
) / 128;

561 
ch
->
right_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_right
) / 128;

562 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

563 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

566 
ch
->
cou¡
 +
‰eq
;

567 i‡(
ch
->
cou¡
 >
FIXED_POINT
)

569 
VL
 = 
ch
->
cou¡
 >> 
FIXED_POINT_SHIFT
;

570 
ch
->
ßm∂e_poöãr
 +
VL
;

571 
ch
->
cou¡
 &
FIXED_POINT_REMAINDER
;

573 
ch
->
ßm∂e
 = ch->
√xt_ßm∂e
;

574 i‡(
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
)

576 i‡(
	`JUST_PLAYED_LAST_SAMPLE
(
ch
))

578 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

579 
°îeo_exô
;

583 
ch
->
ßm∂e_poöãr
 -
SOUND_DECODE_LENGTH
;

584 i‡(
ch
->
œ°_block
)

586 i‡(!
ch
->
lo›
)

588 
ch
->
ßm∂e_poöãr
 = 
LAST_SAMPLE
;

589 
ch
->
√xt_ßm∂e
 = ch->
ßm∂e
;

594 
	`S9xAPUSëEndX
 (
J
);

595 
ch
->
œ°_block
 = 
FALSE
;

596 
uöt16
 *
dú
 = 
	`S9xGëSam∂eAddªss
 (
ch
->
ßm∂e_numbî
);

597 
ch
->
block_poöãr
 = *(
dú
 + 1);

600 
	`DecodeBlock
 (
ch
);

601 } 
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
);

602 i‡(!
	`JUST_PLAYED_LAST_SAMPLE
 (
ch
))

603 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

606 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

608 i‡(
ch
->
ty≥
 =
SOUND_SAMPLE
)

610 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq
 < 
FIXED_POINT
 && !
mod
)

612 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

613 (Ë
‰eq
Ë/ (Ë
FIXED_POINT
;

614 
ch
->
ßm∂e
 = (
öt16
Ë(ch->ßm∂ê+ (((ch->
√xt_ßm∂e
 - ch->sample) *

615 (Ë(
ch
->
cou¡
)Ë/ (Ë
FIXED_POINT
));

618 
ch
->
öãΩﬁ©e
 = 0;

622 ;
VL
 > 0; VL--)

623 i‡((
so
.
noi£_gí
 <<= 1) & 0x80000000L)

624 
so
.
noi£_gí
 ^= 0x0040001L;

625 
ch
->
ßm∂e
 = (
so
.
noi£_gí
 << 17) >> 17;

626 
ch
->
öãΩﬁ©e
 = 0;

629 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

630 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

634 i‡(
ch
->
öãΩﬁ©e
)

636 
öt32
 
s
 = (öt32Ë
ch
->
ßm∂e
 + ch->
öãΩﬁ©e
;

638 
	`CLIP16
(
s
);

639 
ch
->
ßm∂e
 = (
öt16
Ë
s
;

640 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

641 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

645 i‡(
pôch_mod
 & (1 << (
J
 + 1)))

646 
wave
 [
I
 / 2] = 
ch
->
ßm∂e
 * ch->
ívx
;

648 
MixBuf„r
 [
I
] +
VL
;

649 
MixBuf„r
 [
I
+1] +
VR
;

650 i‡(
ch
->
echo_buf_±r
)

652 
ch
->
echo_buf_±r
 [
I
] +
VL
;

653 
ch
->
echo_buf_±r
 [
I
+1] +
VR
;

656 
°îeo_exô
: ;

658 
	}
}

660 
	$MixM⁄o
 (
ßm∂e_cou¡
)

662 
pôch_mod
 = 
SoundD©a
.pôch_mod & (0xFFFFFFFF^
APU
.
DSP
[
APU_NON
]);

664 
uöt32
 
J
 = 0; J < 
NUM_CHANNELS
; J++)

666 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
J
];

667 
‰eq0
 = 
ch
->
‰equícy
;

669 i‡(
ch
->
°©e
 =
SOUND_SILENT
 || !(
so
.
sound_swôch
 & (1 << 
J
)))

674 
boﬁ8
 
mod
 = 
pôch_mod
 & (1 << 
J
);

676 i‡(
ch
->
√eds_decode
)

678 
	`DecodeBlock
(
ch
);

679 
ch
->
√eds_decode
 = 
FALSE
;

680 
ch
->
ßm∂e
 = ch->
block
[0];

681 
ch
->
ßm∂e_poöãr
 = 
‰eq0
 >> 
FIXED_POINT_SHIFT
;

682 i‡(
ch
->
ßm∂e_poöãr
 == 0)

683 
ch
->
ßm∂e_poöãr
 = 1;

684 i‡(
ch
->
ßm∂e_poöãr
 > 
SOUND_DECODE_LENGTH
)

685 
ch
->
ßm∂e_poöãr
 = 
SOUND_DECODE_LENGTH
 - 1;

686 
ch
->
√xt_ßm∂e
 = ch->
block
[ch->
ßm∂e_poöãr
];

687 
ch
->
öãΩﬁ©e
 = 0;

689 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq0
 < 
FIXED_POINT
 && !
mod
)

690 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

691 (Ë
‰eq0
Ë/ (Ë
FIXED_POINT
;

693 
öt32
 
V
 = (
ch
->
ßm∂e
 * ch->
À·_vﬁ_Àvñ
) / 128;

695 
uöt32
 
I
 = 0; I < (uöt32Ë
ßm∂e_cou¡
; I++)

697 
‰eq
 = 
‰eq0
;

699 i‡(
mod
)

700 
‰eq
 = 
	`PITCH_MOD
(‰eq, 
wave
 [
I
]);

702 
ch
->
ív_îr‹
 +ch->
î©e
;

703 i‡(
ch
->
ív_îr‹
 >
FIXED_POINT
)

705 
uöt32
 
°ï
 = 
ch
->
ív_îr‹
 >> 
FIXED_POINT_SHIFT
;

707 
ch
->
°©e
)

709 
SOUND_ATTACK
:

710 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

711 
ch
->
ívx
 +
°ï
 << 1;

712 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

714 i‡(
ch
->
ívx
 >= 126)

716 
ch
->
ívx
 = 127;

717 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

718 
ch
->
°©e
 = 
SOUND_DECAY
;

719 i‡(
ch
->
su°aö_Àvñ
 != 8)

721 
	`S9xSëEnvR©e
 (
ch
, ch->
deˇy_øã
, -1,

722 (
MAX_ENVELOPE_HEIGHT
 * 
ch
->
su°aö_Àvñ
) >> 3, 1<<28);

725 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

726 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0, 2<<28);

730 
SOUND_DECAY
:

731 
ch
->
ív_îr‹
 >
FIXED_POINT
)

733 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

734 
ch
->
ív_îr‹
 -
FIXED_POINT
;

736 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

737 i‡(
ch
->
ívx
 <ch->
ívx_èrgë
)

739 i‡(
ch
->
ívx
 <= 0)

741 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

742 
m⁄o_exô
;

744 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

745 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0, 2<<28);

749 
SOUND_SUSTAIN
:

750 
ch
->
ív_îr‹
 >
FIXED_POINT
)

752 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

753 
ch
->
ív_îr‹
 -
FIXED_POINT
;

755 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

756 i‡(
ch
->
ívx
 <= 0)

758 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

759 
m⁄o_exô
;

763 
SOUND_RELEASE
:

764 
ch
->
ív_îr‹
 >
FIXED_POINT
)

766 
ch
->
ívxx
 -(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

767 
ch
->
ív_îr‹
 -
FIXED_POINT
;

769 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

770 i‡(
ch
->
ívx
 <= 0)

772 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

773 
m⁄o_exô
;

777 
SOUND_INCREASE_LINEAR
:

778 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

779 
ch
->
ívx
 +
°ï
 << 1;

780 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

782 i‡(
ch
->
ívx
 >= 126)

784 
ch
->
ívx
 = 127;

785 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

786 
ch
->
°©e
 = 
SOUND_GAIN
;

787 
ch
->
mode
 = 
MODE_GAIN
;

788 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0, 0);

792 
SOUND_INCREASE_BENT_LINE
:

793 i‡(
ch
->
ívx
 >(
MAX_ENVELOPE_HEIGHT
 * 3) / 4)

795 
ch
->
ív_îr‹
 >
FIXED_POINT
)

797 
ch
->
ívxx
 +(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

798 
ch
->
ív_îr‹
 -
FIXED_POINT
;

800 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

804 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

805 
ch
->
ívx
 +
°ï
 << 1;

806 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

809 i‡(
ch
->
ívx
 >= 126)

811 
ch
->
ívx
 = 127;

812 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

813 
ch
->
°©e
 = 
SOUND_GAIN
;

814 
ch
->
mode
 = 
MODE_GAIN
;

815 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0, 0);

819 
SOUND_DECREASE_LINEAR
:

820 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

821 
ch
->
ívx
 -
°ï
 << 1;

822 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

823 i‡(
ch
->
ívx
 <= 0)

825 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

826 
m⁄o_exô
;

830 
SOUND_DECREASE_EXPONENTIAL
:

831 
ch
->
ív_îr‹
 >
FIXED_POINT
)

833 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

834 
ch
->
ív_îr‹
 -
FIXED_POINT
;

836 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

837 i‡(
ch
->
ívx
 <= 0)

839 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

840 
m⁄o_exô
;

844 
SOUND_GAIN
:

845 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0, 0);

848 
ch
->
À·_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_À·
) / 128;

849 
V
 = (
ch
->
ßm∂e
 * ch->
À·_vﬁ_Àvñ
) / 128;

852 
ch
->
cou¡
 +
‰eq
;

853 i‡(
ch
->
cou¡
 >
FIXED_POINT
)

855 
V
 = 
ch
->
cou¡
 >> 
FIXED_POINT_SHIFT
;

856 
ch
->
ßm∂e_poöãr
 +
V
;

857 
ch
->
cou¡
 &
FIXED_POINT_REMAINDER
;

859 
ch
->
ßm∂e
 = ch->
√xt_ßm∂e
;

860 i‡(
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
)

862 i‡(
	`JUST_PLAYED_LAST_SAMPLE
(
ch
))

864 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

865 
m⁄o_exô
;

869 
ch
->
ßm∂e_poöãr
 -
SOUND_DECODE_LENGTH
;

870 i‡(
ch
->
œ°_block
)

872 i‡(!
ch
->
lo›
)

874 
ch
->
ßm∂e_poöãr
 = 
LAST_SAMPLE
;

875 
ch
->
√xt_ßm∂e
 = ch->
ßm∂e
;

880 
ch
->
œ°_block
 = 
FALSE
;

881 
uöt16
 *
dú
 = 
	`S9xGëSam∂eAddªss
 (
ch
->
ßm∂e_numbî
);

882 
ch
->
block_poöãr
 = *(
dú
 + 1);

883 
	`S9xAPUSëEndX
 (
J
);

886 
	`DecodeBlock
 (
ch
);

887 } 
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
);

888 i‡(!
	`JUST_PLAYED_LAST_SAMPLE
 (
ch
))

889 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

892 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

894 i‡(
ch
->
ty≥
 =
SOUND_SAMPLE
)

896 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq
 < 
FIXED_POINT
 && !
mod
)

898 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

899 (Ë
‰eq
Ë/ (Ë
FIXED_POINT
;

900 
ch
->
ßm∂e
 = (
öt16
Ë(ch->ßm∂ê+ (((ch->
√xt_ßm∂e
 - ch->sample) *

901 (Ë(
ch
->
cou¡
)Ë/ (Ë
FIXED_POINT
));

904 
ch
->
öãΩﬁ©e
 = 0;

908 ;
V
 > 0; V--)

909 i‡((
so
.
noi£_gí
 <<= 1) & 0x80000000L)

910 
so
.
noi£_gí
 ^= 0x0040001L;

911 
ch
->
ßm∂e
 = (
so
.
noi£_gí
 << 17) >> 17;

912 
ch
->
öãΩﬁ©e
 = 0;

914 
V
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

918 i‡(
ch
->
öãΩﬁ©e
)

920 
öt32
 
s
 = (öt32Ë
ch
->
ßm∂e
 + ch->
öãΩﬁ©e
;

922 
	`CLIP16
(
s
);

923 
ch
->
ßm∂e
 = (
öt16
Ë
s
;

924 
V
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

928 
MixBuf„r
 [
I
] +
V
;

929 i‡(
ch
->
echo_buf_±r
)

930 
ch
->
echo_buf_±r
 [
I
] +
V
;

932 i‡(
pôch_mod
 & (1 << (
J
 + 1)))

933 
wave
 [
I
] = 
ch
->
ßm∂e
 * ch->
ívx
;

935 
m⁄o_exô
: ;

937 
	}
}

941 
	$S9xMixSam∂es
 (sig√d *
buf„r
, 
ßm∂e_cou¡
)

943 
	`S9xMixSam∂esO
 (
buf„r
, 
ßm∂e_cou¡
, 0);

944 
	}
}

947 
	$S9xMixSam∂esO
 (sig√d *
buf„r
, 
ßm∂e_cou¡
, 
ßm∂e_off£t
)

950 
J
;

952 
buf„r
 +
ßm∂e_off£t
;

954 i‡(
so
.
muã_sound
)

956 
	`mem£t32
((
uöt32_t
*)
buf„r
, 0, 
ßm∂e_cou¡
>>1);

960 
	`mem£t32
 ((
uöt32_t
*)
MixBuf„r
, 0, 
ßm∂e_cou¡
);

961 i‡(
SoundD©a
.
echo_íabÀ
)

962 
	`mem£t32
 ((
uöt32_t
*)
EchoBuf„r
, 0, 
ßm∂e_cou¡
);

964 i‡(
so
.
°îeo
)

965 
	`MixSãªo
 (
ßm∂e_cou¡
);

967 
	`MixM⁄o
 (
ßm∂e_cou¡
);

970 i‡(
SoundD©a
.
echo_íabÀ
 && SoundD©a.
echo_buf„r_size
)

972 i‡(
so
.
°îeo
)

974 
l
, 
r
;

975 
ma°î_vﬁ_l
 = 
SoundD©a
.
ma°î_vﬁume
[0];

976 
ma°î_vﬁ_r
 = 
SoundD©a
.
ma°î_vﬁume
[1];

977 
echo_vﬁ_l
 = 
SoundD©a
.
echo_vﬁume
[0];

978 
echo_vﬁ_r
 = 
SoundD©a
.
echo_vﬁume
[1];

981 i‡(
SoundD©a
.
no_fûãr
)

984 
J
 = 0; J < 
ßm∂e_cou¡
; J+=2)

986 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

988 
Echo
[
SoundD©a
.
echo_±r
++] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
[
J
];

989 
Echo
[
SoundD©a
.
echo_±r
++] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
[
J
+1];

991 i‡(
SoundD©a
.
echo_±r
 >SoundD©a.
echo_buf„r_size
)

992 
SoundD©a
.
echo_±r
 = 0;

994 
l
 = (
MixBuf„r
[
J
] * 
ma°î_vﬁ_l
 + 
E
 * 
echo_vﬁ_l
Ë/ 
VOL_DIV16
;

995 
r
 = (
MixBuf„r
[
J
+1] * 
ma°î_vﬁ_r
 + 
E
 * 
echo_vﬁ_r
Ë/ 
VOL_DIV16
;

997 
	`CLIP16
(
l
);

998 
	`CLIP16
(
r
);

999 
buf„r
[
J
] = 
l
;

1000 
buf„r
[
J
+1] = 
r
;

1006 
J
 = 0; J < 
ßm∂e_cou¡
; J+=2)

1008 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1010 
Lo›
 [(
Z
 - 0Ë& 15] = 
E
;

1011 
E
 = E * 
FûãrT≠s
 [0];

1012 
E
 +
Lo›
 [(
Z
 - 2Ë& 15] * 
FûãrT≠s
 [1];

1013 
E
 +
Lo›
 [(
Z
 - 4Ë& 15] * 
FûãrT≠s
 [2];

1014 
E
 +
Lo›
 [(
Z
 - 6Ë& 15] * 
FûãrT≠s
 [3];

1015 
E
 +
Lo›
 [(
Z
 - 8Ë& 15] * 
FûãrT≠s
 [4];

1016 
E
 +
Lo›
 [(
Z
 - 10Ë& 15] * 
FûãrT≠s
 [5];

1017 
E
 +
Lo›
 [(
Z
 - 12Ë& 15] * 
FûãrT≠s
 [6];

1018 
E
 +
Lo›
 [(
Z
 - 14Ë& 15] * 
FûãrT≠s
 [7];

1019 
E
 /= 128;

1020 
Z
++;

1022 
Echo
[
SoundD©a
.
echo_±r
++] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
[
J
];

1023 
Echo
[
SoundD©a
.
echo_±r
++] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
[
J
+1];

1025 i‡(
SoundD©a
.
echo_±r
 >SoundD©a.
echo_buf„r_size
)

1026 
SoundD©a
.
echo_±r
 = 0;

1028 
l
 = (
MixBuf„r
[
J
] * 
ma°î_vﬁ_l
 + 
E
 * 
echo_vﬁ_l
Ë/ 
VOL_DIV16
;

1029 
r
 = (
MixBuf„r
[
J
+1] * 
ma°î_vﬁ_r
 + 
E
 * 
echo_vﬁ_r
Ë/ 
VOL_DIV16
;

1031 
	`CLIP16
(
l
);

1032 
	`CLIP16
(
r
);

1033 
buf„r
[
J
] = 
l
;

1034 
buf„r
[
J
+1] = 
r
;

1040 
I
;

1041 
ma°î_vﬁ_l
 = 
SoundD©a
.
ma°î_vﬁume
[0];

1042 
echo_vﬁ_l
 = 
SoundD©a
.
echo_vﬁume
[0];

1045 i‡(
SoundD©a
.
no_fûãr
)

1048 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1050 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1052 
Echo
[
SoundD©a
.
echo_±r
++] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
[
J
];

1054 i‡(
SoundD©a
.
echo_±r
 >SoundD©a.
echo_buf„r_size
)

1055 
SoundD©a
.
echo_±r
 = 0;

1057 
I
 = (
MixBuf„r
[
J
] * 
ma°î_vﬁ_l
 + 
E
 * 
echo_vﬁ_l
Ë/ 
VOL_DIV16
;

1058 
	`CLIP16
(
I
);

1059 
buf„r
[
J
] = 
I
;

1065 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1067 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1069 
Lo›
 [(
Z
 - 0Ë& 7] = 
E
;

1070 
E
 = E * 
FûãrT≠s
 [0];

1071 
E
 +
Lo›
 [(
Z
 - 1Ë& 7] * 
FûãrT≠s
 [1];

1072 
E
 +
Lo›
 [(
Z
 - 2Ë& 7] * 
FûãrT≠s
 [2];

1073 
E
 +
Lo›
 [(
Z
 - 3Ë& 7] * 
FûãrT≠s
 [3];

1074 
E
 +
Lo›
 [(
Z
 - 4Ë& 7] * 
FûãrT≠s
 [4];

1075 
E
 +
Lo›
 [(
Z
 - 5Ë& 7] * 
FûãrT≠s
 [5];

1076 
E
 +
Lo›
 [(
Z
 - 6Ë& 7] * 
FûãrT≠s
 [6];

1077 
E
 +
Lo›
 [(
Z
 - 7Ë& 7] * 
FûãrT≠s
 [7];

1078 
E
 /= 128;

1079 
Z
++;

1081 
Echo
[
SoundD©a
.
echo_±r
++] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
[
J
];

1083 i‡(
SoundD©a
.
echo_±r
 >SoundD©a.
echo_buf„r_size
)

1084 
SoundD©a
.
echo_±r
 = 0;

1086 
I
 = (
MixBuf„r
[
J
] * 
ma°î_vﬁ_l
 + 
E
 * 
echo_vﬁ_l
Ë/ 
VOL_DIV16
;

1087 
	`CLIP16
(
I
);

1088 
buf„r
[
J
] = 
I
;

1095 
l
, 
ma°î_vﬁ_l
 = 
SoundD©a
.
ma°î_vﬁume
[0];

1097 i‡(
so
.
°îeo
)

1099 
r
, 
ma°î_vﬁ_r
 = 
SoundD©a
.
ma°î_vﬁume
[1];

1102 
J
 = 0; J < 
ßm∂e_cou¡
; J+=2)

1104 
l
 = (
MixBuf„r
[
J
] * 
ma°î_vﬁ_l
Ë/ 
VOL_DIV16
;

1105 
r
 = (
MixBuf„r
[
J
+1] * 
ma°î_vﬁ_r
Ë/ 
VOL_DIV16
;

1107 
	`CLIP16
(
l
);

1108 
	`CLIP16
(
r
);

1109 
buf„r
[
J
] = 
l
;

1110 
buf„r
[
J
+1] = 
r
;

1116 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1118 
l
 = (
MixBuf„r
[
J
] * 
ma°î_vﬁ_l
Ë/ 
VOL_DIV16
;

1120 
	`CLIP16
(
l
);

1121 
buf„r
[
J
] = 
l
;

1125 
	}
}

1127 #ifde‡
__DJGPP


1128 
END_OF_FUNCTION
(
S9xMixSam∂esO
);

1131 
	$S9xRe£tSound
 (
boﬁ8
 
fuŒ
)

1133 
i
 = 0; i < 8; i++)

1135 
SoundD©a
.
ch™√ls
[
i
].
°©e
 = 
SOUND_SILENT
;

1136 
SoundD©a
.
ch™√ls
[
i
].
mode
 = 
MODE_NONE
;

1137 
SoundD©a
.
ch™√ls
[
i
].
ty≥
 = 
SOUND_SAMPLE
;

1138 
SoundD©a
.
ch™√ls
[
i
].
vﬁume_À·
 = 0;

1139 
SoundD©a
.
ch™√ls
[
i
].
vﬁume_right
 = 0;

1140 
SoundD©a
.
ch™√ls
[
i
].
hîtz
 = 0;

1141 
SoundD©a
.
ch™√ls
[
i
].
cou¡
 = 0;

1142 
SoundD©a
.
ch™√ls
[
i
].
lo›
 = 
FALSE
;

1143 
SoundD©a
.
ch™√ls
[
i
].
ívx_èrgë
 = 0;

1144 
SoundD©a
.
ch™√ls
[
i
].
ív_îr‹
 = 0;

1145 
SoundD©a
.
ch™√ls
[
i
].
î©e
 = 0;

1146 
SoundD©a
.
ch™√ls
[
i
].
ívx
 = 0;

1147 
SoundD©a
.
ch™√ls
[
i
].
ívxx
 = 0;

1148 
SoundD©a
.
ch™√ls
[
i
].
À·_vﬁ_Àvñ
 = 0;

1149 
SoundD©a
.
ch™√ls
[
i
].
right_vﬁ_Àvñ
 = 0;

1150 
SoundD©a
.
ch™√ls
[
i
].
dúe˘i⁄
 = 0;

1151 
SoundD©a
.
ch™√ls
[
i
].
©èck_øã
 = 0;

1152 
SoundD©a
.
ch™√ls
[
i
].
deˇy_øã
 = 0;

1153 
SoundD©a
.
ch™√ls
[
i
].
su°aö_øã
 = 0;

1154 
SoundD©a
.
ch™√ls
[
i
].
ªÀa£_øã
 = 0;

1155 
SoundD©a
.
ch™√ls
[
i
].
su°aö_Àvñ
 = 0;

1157 
SoundD©a
.
ch™√ls
[
i
].
ív_öd_©èck
 = 0;

1158 
SoundD©a
.
ch™√ls
[
i
].
ív_öd_deˇy
 = 0;

1159 
SoundD©a
.
ch™√ls
[
i
].
ív_öd_su°aö
 = 0;

1160 
SoundD©a
.
echo_±r
 = 0;

1161 
SoundD©a
.
echo_„edback
 = 0;

1162 
SoundD©a
.
echo_buf„r_size
 = 1;

1164 
FûãrT≠s
 [0] = 127;

1165 
FûãrT≠s
 [1] = 0;

1166 
FûãrT≠s
 [2] = 0;

1167 
FûãrT≠s
 [3] = 0;

1168 
FûãrT≠s
 [4] = 0;

1169 
FûãrT≠s
 [5] = 0;

1170 
FûãrT≠s
 [6] = 0;

1171 
FûãrT≠s
 [7] = 0;

1172 
so
.
muã_sound
 = 
TRUE
;

1173 
so
.
noi£_gí
 = 1;

1174 
so
.
sound_swôch
 = 255;

1176 i‡(
fuŒ
)

1178 
SoundD©a
.
ma°î_vﬁume_À·
 = 0;

1179 
SoundD©a
.
ma°î_vﬁume_right
 = 0;

1180 
SoundD©a
.
echo_vﬁume_À·
 = 0;

1181 
SoundD©a
.
echo_vﬁume_right
 = 0;

1182 
SoundD©a
.
echo_íabÀ
 = 0;

1183 
SoundD©a
.
echo_wrôe_íabÀd
 = 0;

1184 
SoundD©a
.
echo_ch™√l_íabÀ
 = 0;

1185 
SoundD©a
.
pôch_mod
 = 0;

1186 
SoundD©a
.
dummy
[0] = 0;

1187 
SoundD©a
.
dummy
[1] = 0;

1188 
SoundD©a
.
dummy
[2] = 0;

1189 
SoundD©a
.
ma°î_vﬁume
[0] = 0;

1190 
SoundD©a
.
ma°î_vﬁume
[1] = 0;

1191 
SoundD©a
.
echo_vﬁume
[0] = 0;

1192 
SoundD©a
.
echo_vﬁume
[1] = 0;

1193 
SoundD©a
.
noi£_hîtz
 = 0;

1196 
SoundD©a
.
ma°î_vﬁume_À·
 = 127;

1197 
SoundD©a
.
ma°î_vﬁume_right
 = 127;

1198 
SoundD©a
.
ma°î_vﬁume
 [0] = SoundData.master_volume [1] = 127;

1199 
SoundD©a
.
no_fûãr
 = 
TRUE
;

1200 
	}
}

1204 
AâackR©e
 [16];

1205 
DeˇyR©e
 [8];

1206 
Su°aöR©e
 [32];

1207 
In¸ó£R©e
 [32];

1208 
De¸ó£R©eExp
 [32];

1211 
	$S9xSëPœybackR©e
 (
uöt32
 
∂ayback_øã
)

1213 
so
.
∂ayback_øã
 =Ölayback_rate;

1215 if(
∂ayback_øã
) {

1217 
so
.
‰eqba£
 = (
FIXED_POINT
<<11Ë/ 
∂ayback_øã
;

1219 
°ïs
 [] =

1224 
i
, 
u
;

1225 
i
=0; i < 16; i++)

1226 
u
=0; u < 10; u++)

1227 
AâackER©e
[
i
][
u
] = (Ë(((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
[u]) /

1228 (
AâackR©e
[
i
] * 
∂ayback_øã
));

1229 
i
=0; i < 8; i++)

1230 
u
=0; u < 10; u++)

1231 
DeˇyER©e
[
i
][
u
] = (Ë(((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
[u]) /

1232 (
DeˇyR©e
[
i
] * 
∂ayback_øã
));

1234 
i
=0; i < 32; i++)

1235 
u
=0; u < 10; u++)

1236 
Su°aöER©e
[
i
][
u
](Ë(((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
[u]) /

1237 (
Su°aöR©e
[
i
] * 
∂ayback_øã
));

1239 
i
=0; i < 32; i++)

1240 
u
=0; u < 10; u++)

1241 
In¸ó£ER©e
[
i
][
u
]=(Ë(((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
[u]) /

1242 (
In¸ó£R©e
[
i
] * 
∂ayback_øã
));

1244 
i
=0; i < 32; i++)

1245 
u
=0; u < 10; u++)

1246 
De¸ó£ER©eExp
[
i
][
u
] = (Ë(((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
[u]) /

1247 (
De¸ó£R©eExp
[
i
] / 2 * 
∂ayback_øã
));

1249 
u
=0; u < 10; u++)

1250 
KeyOffER©e
[
u
] = (Ë(((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
[u]) /

1251 (8 * 
∂ayback_øã
));

1254 
	`S9xSëEchoDñay
 (
APU
.
DSP
 [
APU_EDL
] & 0xf);

1255 
i
 = 0; i < 8; i++)

1256 
	`S9xSëSoundFªquícy
 (
i
, 
SoundD©a
.
ch™√ls
 [i].
hîtz
);

1257 
	}
}

1259 
boﬁ8
 
	$S9xInôSound
 ()

1261 
so
.
∂ayback_øã
 = 0;

1262 
so
.
°îeo
 = 0;

1263 
so
.
sound_swôch
 = 255;

1265 
	`S9xRe£tSound
 (
TRUE
);

1266 
	`S9xSëSoundMuã
 (
TRUE
);

1269 
	}
}

	@soundux.h

41 #i‚de‡
_SOUND_H_


42 
	#_SOUND_H_


	)

44 íum { 
	mSOUND_SAMPLE
 = 0, 
	mSOUND_NOISE
, 
	mSOUND_EXTRA_NOISE
, 
	mSOUND_MUTE
 };

45 íum { 
	mSOUND_SILENT
, 
	mSOUND_ATTACK
, 
	mSOUND_DECAY
, 
	mSOUND_SUSTAIN
,

46 
	mSOUND_RELEASE
, 
	mSOUND_GAIN
, 
	mSOUND_INCREASE_LINEAR
,

47 
	mSOUND_INCREASE_BENT_LINE
, 
	mSOUND_DECREASE_LINEAR
,

48 
	mSOUND_DECREASE_EXPONENTIAL
};

50 íum { 
	mMODE_NONE
 = 
SOUND_SILENT
, 
	mMODE_ADSR
, 
	mMODE_RELEASE
 = 
SOUND_RELEASE
,

51 
	mMODE_GAIN
, 
	mMODE_INCREASE_LINEAR
, 
	mMODE_INCREASE_BENT_LINE
,

52 
	mMODE_DECREASE_LINEAR
, 
	mMODE_DECREASE_EXPONENTIAL
};

54 
	#MAX_ENVELOPE_HEIGHT
 127

	)

55 
	#ENVELOPE_SHIFT
 7

	)

56 
	#MAX_VOLUME
 127

	)

57 
	#VOLUME_SHIFT
 7

	)

58 
	#VOL_DIV
 128

	)

59 
	#SOUND_DECODE_LENGTH
 16

	)

61 
	#NUM_CHANNELS
 8

	)

62 
	#SOUND_BUFFER_SIZE
 (2*44100/50)

	)

63 
	#MAX_BUFFER_SIZE
 
SOUND_BUFFER_SIZE


	)

65 
	#SOUND_BUFS
 4

	)

68 
	m∂ayback_øã
;

69 
boﬁ8
 
	m°îeo
;

70 
boﬁ8
 
	mmuã_sound
;

71 
uöt8
 
	msound_swôch
;

72 
	mnoi£_gí
;

73 
uöt32
 
	m‰eqba£
;

74 } 
	tSoundSètus
;

76 
EXTERN_C
 
SoundSètus
 
	gso
;

79 
	m°©e
;

80 
	mty≥
;

81 
	mvﬁume_À·
;

82 
	mvﬁume_right
;

83 
uöt32
 
	mhîtz
;

84 
uöt32
 
	m‰equícy
;

85 
uöt32
 
	mcou¡
;

86 
boﬁ8
 
	mlo›
;

87 
	mívx
;

88 
	mÀ·_vﬁ_Àvñ
;

89 
	mright_vﬁ_Àvñ
;

90 
	mívx_èrgë
;

91 
	mív_îr‹
;

92 
	mî©e
;

93 
	mdúe˘i⁄
;

94 
	m©èck_øã
;

95 
	mdeˇy_øã
;

96 
	msu°aö_øã
;

97 
	mªÀa£_øã
;

98 
	msu°aö_Àvñ
;

99 sig√d 
	mßm∂e
;

100 sig√d 
	mdecoded
 [16];

101 sig√d 
	m¥evious16
 [2];

102 sig√d *
	mblock
;

103 
uöt16
 
	mßm∂e_numbî
;

104 
boﬁ8
 
	mœ°_block
;

105 
boﬁ8
 
	m√eds_decode
;

106 
uöt32
 
	mblock_poöãr
;

107 
uöt32
 
	mßm∂e_poöãr
;

108 *
	mecho_buf_±r
;

109 
	mmode
;

110 
öt32
 
	mívxx
;

111 sig√d 
	m√xt_ßm∂e
;

112 
öt32
 
	möãΩﬁ©e
;

113 
öt32
 
	m¥evious
 [2];

115 
uöt8
 
	mív_öd_©èck
;

116 
uöt8
 
	mív_öd_deˇy
;

117 
uöt8
 
	mív_öd_su°aö
;

118 
uöt8
 
	mdummy1
;

120 
uöt32
 
	mdummy
 [7];

122 
	mgaussün
[8];

123 
	mg_ödex
;

124 
	mœ°_vÆid_hódî
;

125 } 
	tCh™√l
;

129 
	mma°î_vﬁume_À·
;

130 
	mma°î_vﬁume_right
;

131 
	mecho_vﬁume_À·
;

132 
	mecho_vﬁume_right
;

133 
	mecho_íabÀ
;

134 
	mecho_„edback
;

135 
	mecho_±r
;

136 
	mecho_buf„r_size
;

137 
	mecho_wrôe_íabÀd
;

138 
	mecho_ch™√l_íabÀ
;

139 
	mpôch_mod
;

141 
uöt32
 
	mdummy
 [3];

142 
Ch™√l
 
	mch™√ls
 [
NUM_CHANNELS
];

143 
boﬁ8
 
	mno_fûãr
;

144 
	mma°î_vﬁume
 [2];

145 
	mecho_vﬁume
 [2];

146 
	mnoi£_hîtz
;

147 } 
	tSSoundD©a
;

149 
EXTERN_C
 
SSoundD©a
 
	gSoundD©a
;

151 
S9xSëEnvñ›eHeight
 (
ch™√l
, 
height
);

152 
S9xSëSoundKeyOff
 (
ch™√l
);

153 
S9xSëSoundDeˇyMode
 (
ch™√l
);

154 
S9xSëSoundAâachMode
 (
ch™√l
);

155 
S9xSoundSèπEnvñ›e
 (
Ch™√l
 *);

156 
S9xSëSoundSam∂e
 (
ch™√l
, 
uöt16
 
ßm∂e_numbî
);

157 
S9xSëEchoDñay
 (
byã
);

158 
S9xRe£tSound
 (
boﬁ8
 
fuŒ
);

159 
S9xFixSoundA·îS«pshŸLﬂd
 ();

160 
S9xPœybackSoundSëtög
 (
ch™√l
);

161 
S9xFixEnvñ›e
 (
ch™√l
, 
uöt8
 
gaö
, uöt8 
ad§1
, uöt8 
ad§2
);

162 
S9xSèπSam∂e
 (
ch™√l
);

164 
EXTERN_C
 
S9xMixSam∂es
 (sig√d *
buf„r
, 
ßm∂e_cou¡
);

165 
EXTERN_C
 
S9xMixSam∂esO
(sig√d *
buf„r
, 
ßm∂e_cou¡
, 
ßm∂e_off£t
);

166 
S9xSëPœybackR©e
 (
uöt32
 
øã
);

167 
boﬁ8
 
S9xInôSound
 ();

173 
	~"≠u.h
"

177 
Echo
 [24000];

178 
Lo›
 [16];

179 
FûãrT≠s
 [8];

180 
EchoBuf„r
 [
SOUND_BUFFER_SIZE
];

181 
Noi£Fªq
 [32];

184 
AâackER©e
 [16][10];

185 
DeˇyER©e
 [8][10];

186 
Su°aöER©e
 [32][10];

187 
In¸ó£ER©e
 [32][10];

188 
De¸ó£ER©eExp
[32][10];

189 
KeyOffER©e
[10];

192 
	#FIXED_POINT
 0x10000UL

	)

193 
	#CLIP8
(
v
Ë\

	)

194 i‡((
	gv
) < -128) \

195 (
	gv
) = -128; \

197 i‡((
	gv
) > 127) \

198 (
	gv
) = 127

200 
ölöe
 
	$S9xSëSoundMuã
 (
boﬁ8
 
muã
)

203 
so
.
muã_sound
 = 
muã
;

205 
	}
}

207 
ölöe
 
	$S9xSëEnvR©e
 (
Ch™√l
 *
ch
, 
øã
, 
dúe˘i⁄
, 
èrgë
, 
mode
)

209 
ch
->
ívx_èrgë
 = 
èrgë
;

211 i‡(
øã
 == ~0UL)

213 
ch
->
dúe˘i⁄
 = 0;

214 
øã
 = 0;

217 
ch
->
dúe˘i⁄
 = direction;

220 i‡(
øã
 =0 || 
so
.
∂ayback_øã
 == 0)

221 
ch
->
î©e
 = 0;

224 
mode
 >> 28) {

226 
ch
->
î©e
 = 
AâackER©e
[ch->
ív_öd_©èck
][ch->
°©e
];

230 
ch
->
î©e
 = 
DeˇyER©e
[ch->
ív_öd_deˇy
][ch->
°©e
];

234 
ch
->
î©e
 = 
Su°aöER©e
[ch->
ív_öd_su°aö
][ch->
°©e
];

238 
ch
->
î©e
 = 
In¸ó£ER©e
[
mode
&0x1f][ch->
°©e
];

242 
ch
->
î©e
 = 
De¸ó£ER©eExp
[
mode
&0x1f][ch->
°©e
];

246 
ch
->
î©e
 = 
KeyOffER©e
[ch->
°©e
];

252 
°ïs
 [] =

258 i‡(
øã
 =0 || 
so
.
∂ayback_øã
 == 0)

259 
ch
->
î©e
 = 0;

262 
ch
->
î©e
 = ()

263 (((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
 [
ch
->
°©e
]) /

264 (
øã
 * 
so
.
∂ayback_øã
));

267 
	}
}

269 
ölöe
 
	$S9xSëEchoE«bÀ
 (
uöt8
 
byã
)

271 
SoundD©a
.
echo_ch™√l_íabÀ
 = 
byã
;

272 i‡(!
SoundD©a
.
echo_wrôe_íabÀd
 || 
Sëtögs
.
DißbÀSoundEcho
)

273 
byã
 = 0;

274 i‡(
byã
 && !
SoundD©a
.
echo_íabÀ
)

276 
	`mem£t
 (
Echo
, 0,  (Echo));

277 
	`mem£t
 (
Lo›
, 0,  (Loop));

280 
SoundD©a
.
echo_íabÀ
 = 
byã
;

281 
i
 = 0; i < 8; i++)

283 i‡(
byã
 & (1 << 
i
))

284 
SoundD©a
.
ch™√ls
 [
i
].
echo_buf_±r
 = 
EchoBuf„r
;

286 
SoundD©a
.
ch™√ls
 [
i
].
echo_buf_±r
 = 0;

288 
	}
}

290 
ölöe
 
	$S9xSëEchoFìdback
 (
„edback
)

292 
	`CLIP8
(
„edback
);

293 
SoundD©a
.
echo_„edback
 = 
„edback
;

294 
	}
}

296 
ölöe
 
	$S9xSëFûãrC€fficõ¡
 (
èp
, 
vÆue
)

298 
FûãrT≠s
 [
èp
 & 7] = 
vÆue
;

299 
SoundD©a
.
no_fûãr
 = (
FûãrT≠s
 [0] == 127 || FilterTaps [0] == 0) &&

300 
FûãrT≠s
 [1] == 0 &&

301 
FûãrT≠s
 [2] == 0 &&

302 
FûãrT≠s
 [3] == 0 &&

303 
FûãrT≠s
 [4] == 0 &&

304 
FûãrT≠s
 [5] == 0 &&

305 
FûãrT≠s
 [6] == 0 &&

306 
FûãrT≠s
 [7] == 0;

307 
	}
}

309 
ölöe
 
uöt16
 *
	$S9xGëSam∂eAddªss
 (
ßm∂e_numbî
)

311 
uöt32
 
addr
 = (((
APU
.
DSP
[
APU_DIR
] << 8Ë+ (
ßm∂e_numbî
 << 2)) & 0xffff);

312  (
uöt16
 *)(
IAPU
.
RAM
 + 
addr
);

313 
	}
}

315 
ölöe
 
	$S9xSëSoundFªquícy
 (
ch™√l
, 
hîtz
)

317 i‡(
so
.
∂ayback_øã
)

319 i‡(
SoundD©a
.
ch™√ls
[
ch™√l
].
ty≥
 =
SOUND_NOISE
)

320 
hîtz
 = 
Noi£Fªq
 [
APU
.
DSP
 [
APU_FLG
] & 0x1f];

322 
SoundD©a
.
ch™√ls
[
ch™√l
].
‰equícy
 = ()

323 (((
öt64
Ë
hîtz
 * 
FIXED_POINT
Ë/ 
so
.
∂ayback_øã
);

325 
SoundD©a
.
ch™√ls
[
ch™√l
].
‰equícy
 = (
hîtz
 * 
so
.
‰eqba£
) >> 11;

334 
	}
}

	@sounduxnew.cpp

41 #ifde‡
__DJGPP__


43 #unde‡
TRUE


46 
	~<°dlib.h
>

47 
	~<°dio.h
>

48 
	~<°rög.h
>

49 #i‚de‡
_SNESPPC


50 
	~<î∫o.h
>

51 
	~<f˙é.h
>

54 
	#CLIP16
(
v
) \

55 i‡((
v
) < -32768) \

56 (
v
) = -32768; \

58 i‡((
v
) > 32767) \

59 (
v
Ë32767

	)

61 
	#CLIP16_œtch
(
v
,
l
) \

62 i‡((
v
) < -32768) \

63 { (
v
Ë-32768; (
l
)++; }\

65 i‡((
v
) > 32767) \

66 { (
v
Ë32767; (
l
)++; }

	)

68 
	#CLIP24
(
v
) \

69 i‡((
v
) < -8388608) \

70 (
v
) = -8388608; \

72 i‡((
v
) > 8388607) \

73 (
v
Ë8388607

	)

75 
	#CLIP8
(
v
) \

76 i‡((
v
) < -128) \

77 (
v
) = -128; \

79 i‡((
v
) > 127) \

80 (
v
Ë127

	)

82 
	~"¢es9x.h
"

83 
	~"soundux.h
"

84 
	~"≠u.h
"

85 
	~"memm≠.h
"

86 
	~"˝uexec.h
"

89 
Echo
 [24000];

90 
DummyEchoBuf„r
 [
SOUND_BUFFER_SIZE
];

91 
MixBuf„r
 [
SOUND_BUFFER_SIZE
];

92 
EchoBuf„r
 [
SOUND_BUFFER_SIZE
];

93 
FûãrT≠s
 [8];

94 
Z
;

95 
Lo›
 [16];

97 
FûãrVÆues
[4][2];

98 
Noi£Fªq
 [32];

100 #unde‡
ABS


101 
	#ABS
(
a
Ë(◊Ë< 0 ? -◊Ë: (a))

	)

103 
	#FIXED_POINT
 0x10000UL

	)

104 
	#FIXED_POINT_REMAINDER
 0xffffUL

	)

105 
	#FIXED_POINT_SHIFT
 16

	)

107 
	#VOL_DIV8
 0x8000

	)

108 
	#VOL_DIV16
 0x0080

	)

109 
	#ENVX_SHIFT
 24

	)

111 "C" 
DecodeBlockAsm
 (
öt8
 *, 
öt16
 *, 
öt32
 *, int32 *);

112 "C" 
DecodeBlockAsm2
 (
öt8
 *, 
öt16
 *, 
öt32
 *, int32 *);

116 
	#PITCH_MOD
(
F
,
M
Ë((FË* ((((Ë(M)Ë+ 0x800000Ë>> 16Ë>> 7)

	)

119 
	#LAST_SAMPLE
 0xffffff

	)

120 
	#JUST_PLAYED_LAST_SAMPLE
(
c
Ë((c)->
ßm∂e_poöãr
 >
LAST_SAMPLE
)

	)

122 
STATIC
 
INLINE
 
uöt8
 *
	$S9xGëSam∂eAddªss
 (
ßm∂e_numbî
)

124 
uöt32
 
addr
 = (((
APU
.
DSP
[
APU_DIR
] << 8Ë+ (
ßm∂e_numbî
 << 2)) & 0xffff);

125  (
IAPU
.
RAM
 + 
addr
);

126 
	}
}

128 
	$S9xAPUSëEndOfSam∂e
 (
i
, 
Ch™√l
 *
ch
)

130 
ch
->
°©e
 = 
SOUND_SILENT
;

131 
ch
->
mode
 = 
MODE_NONE
;

132 
APU
.
DSP
 [
APU_ENDX
] |1 << 
i
;

133 
APU
.
DSP
 [
APU_KON
] &~(1 << 
i
);

134 
APU
.
DSP
 [
APU_KOFF
] &~(1 << 
i
);

135 
APU
.
KeyedCh™√ls
 &~(1 << 
i
);

136 
	}
}

137 #ifde‡
__DJGPP


138 
	$END_OF_FUNCTION
 (
S9xAPUSëEndOfSam∂e
)

141 
	$S9xAPUSëEndX
 (
ch
)

143 
APU
.
DSP
 [
APU_ENDX
] |1 << 
ch
;

144 
	}
}

145 #ifde‡
__DJGPP


146 
	$END_OF_FUNCTION
 (
S9xAPUSëEndX
)

149 
	$S9xSëEnvR©e
 (
Ch™√l
 *
ch
, 
øã
, 
dúe˘i⁄
, 
èrgë
)

151 
ch
->
ívx_èrgë
 = 
èrgë
;

153 i‡(
øã
 == ~0UL)

155 
ch
->
dúe˘i⁄
 = 0;

156 
øã
 = 0;

159 
ch
->
dúe˘i⁄
 = direction;

161 
°ïs
 [] =

167 i‡(
øã
 =0 || 
so
.
∂ayback_øã
 == 0)

168 
ch
->
î©e
 = 0;

171 
ch
->
î©e
 = ()

172 (((
öt64
Ë
FIXED_POINT
 * 1000 * 
°ïs
 [
ch
->
°©e
]) /

173 (
øã
 * 
so
.
∂ayback_øã
));

175 
	}
}

177 #ifde‡
__DJGPP


178 
END_OF_FUNCTION
(
S9xSëEnvR©e
);

181 
	$S9xSëEnvñ›eR©e
 (
ch™√l
, 
øã
, 
dúe˘i⁄
,

182 
èrgë
)

184 
	`S9xSëEnvR©e
 (&
SoundD©a
.
ch™√ls
 [
ch™√l
], 
øã
, 
dúe˘i⁄
, 
èrgë
);

185 
	}
}

187 #ifde‡
__DJGPP


188 
END_OF_FUNCTION
(
S9xSëEnvñ›eR©e
);

191 
	$S9xSëSoundVﬁume
 (
ch™√l
, 
vﬁume_À·
, 
vﬁume_right
)

193 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

194 i‡(!
so
.
°îeo
)

195 
vﬁume_À·
 = (
	`ABS
(
vﬁume_right
) + ABS(volume_left)) / 2;

197 
ch
->
vﬁume_À·
 = volume_left;

198 
ch
->
vﬁume_right
 = volume_right;

199 
ch
-> 
À·_vﬁ_Àvñ
 = (ch->
ívx
 * 
vﬁume_À·
) / 128;

200 
ch
->
right_vﬁ_Àvñ
 = (ch->
ívx
 * 
vﬁume_right
) / 128;

201 
	}
}

203 
	$S9xSëMa°îVﬁume
 (
vﬁume_À·
, 
vﬁume_right
)

205 i‡(
Sëtögs
.
DißbÀMa°îVﬁume
)

207 
SoundD©a
.
ma°î_vﬁume_À·
 = 127;

208 
SoundD©a
.
ma°î_vﬁume_right
 = 127;

209 
SoundD©a
.
ma°î_vﬁume
 [0] = SoundData.master_volume [1] = 127;

213 i‡(!
so
.
°îeo
)

214 
vﬁume_À·
 = (
	`ABS
 (
vﬁume_right
) + ABS (volume_left)) / 2;

215 
SoundD©a
.
ma°î_vﬁume_À·
 = 
vﬁume_À·
;

216 
SoundD©a
.
ma°î_vﬁume_right
 = 
vﬁume_right
;

217 
SoundD©a
.
ma°î_vﬁume
 [
Sëtögs
.
Revî£Sãªo
] = 
vﬁume_À·
;

218 
SoundD©a
.
ma°î_vﬁume
 [1 ^ 
Sëtögs
.
Revî£Sãªo
] = 
vﬁume_right
;

220 
	}
}

222 
	$S9xSëEchoVﬁume
 (
vﬁume_À·
, 
vﬁume_right
)

224 i‡(!
so
.
°îeo
)

225 
vﬁume_À·
 = (
	`ABS
 (
vﬁume_right
) + ABS (volume_left)) / 2;

226 
SoundD©a
.
echo_vﬁume_À·
 = 
vﬁume_À·
;

227 
SoundD©a
.
echo_vﬁume_right
 = 
vﬁume_right
;

228 
SoundD©a
.
echo_vﬁume
 [
Sëtögs
.
Revî£Sãªo
] = 
vﬁume_À·
;

229 
SoundD©a
.
echo_vﬁume
 [1 ^ 
Sëtögs
.
Revî£Sãªo
] = 
vﬁume_right
;

230 
	}
}

232 
	$S9xSëEchoE«bÀ
 (
uöt8
 
byã
)

234 
SoundD©a
.
echo_ch™√l_íabÀ
 = 
byã
;

235 i‡(!
SoundD©a
.
echo_wrôe_íabÀd
 || 
Sëtögs
.
DißbÀSoundEcho
)

236 
byã
 = 0;

237 i‡(
byã
 && !
SoundD©a
.
echo_íabÀ
)

239 
	`mem£t
 (
Echo
, 0,  (Echo));

240 
	`mem£t
 (
Lo›
, 0,  (Loop));

243 
SoundD©a
.
echo_íabÀ
 = 
byã
;

244 
i
 = 0; i < 8; i++)

246 i‡(
byã
 & (1 << 
i
))

247 
SoundD©a
.
ch™√ls
 [
i
].
echo_buf_±r
 = 
EchoBuf„r
;

249 
SoundD©a
.
ch™√ls
 [
i
].
echo_buf_±r
 = 
DummyEchoBuf„r
;

251 
	}
}

253 
	$S9xSëEchoFìdback
 (
„edback
)

255 
	`CLIP8
(
„edback
);

256 
SoundD©a
.
echo_„edback
 = 
„edback
;

257 
	}
}

259 
	$S9xSëEchoDñay
 (
dñay
)

261 
SoundD©a
.
echo_buf„r_size
 = (512 * 
dñay
 * 
so
.
∂ayback_øã
) / 32000;

262 i‡(
so
.
°îeo
)

263 
SoundD©a
.
echo_buf„r_size
 <<= 1;

264 i‡(
SoundD©a
.
echo_buf„r_size
)

265 
SoundD©a
.
echo_±r
 %SoundD©a.
echo_buf„r_size
;

267 
SoundD©a
.
echo_±r
 = 0;

268 
	`S9xSëEchoE«bÀ
 (
APU
.
DSP
 [
APU_EON
]);

269 
	}
}

271 
	$S9xSëEchoWrôeE«bÀ
 (
uöt8
 
byã
)

273 
SoundD©a
.
echo_wrôe_íabÀd
 = 
byã
;

274 
	`S9xSëEchoDñay
 (
APU
.
DSP
 [
APU_EDL
] & 15);

275 
	}
}

277 
	$S9xSëFªquícyModuœti⁄E«bÀ
 (
uöt8
 
byã
)

279 
SoundD©a
.
pôch_mod
 = 
byã
 & ~1;

280 
	}
}

282 
	$S9xSëSoundKeyOff
 (
ch™√l
)

284 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

286 i‡(
ch
->
°©e
 !
SOUND_SILENT
)

288 
ch
->
°©e
 = 
SOUND_RELEASE
;

289 
ch
->
mode
 = 
MODE_RELEASE
;

290 
	`S9xSëEnvR©e
 (
ch
, 8, -1, 0);

292 
	}
}

294 
	$S9xFixSoundA·îS«pshŸLﬂd
 ()

296 
SoundD©a
.
echo_wrôe_íabÀd
 = !(
APU
.
DSP
 [
APU_FLG
] & 0x20);

297 
SoundD©a
.
echo_ch™√l_íabÀ
 = 
APU
.
DSP
 [
APU_EON
];

298 
	`S9xSëEchoDñay
 (
APU
.
DSP
 [
APU_EDL
] & 0xf);

299 
	`S9xSëEchoFìdback
 ((sig√d Ë
APU
.
DSP
 [
APU_EFB
]);

301 
	`S9xSëFûãrC€fficõ¡
 (0, (sig√d Ë
APU
.
DSP
 [
APU_C0
]);

302 
	`S9xSëFûãrC€fficõ¡
 (1, (sig√d Ë
APU
.
DSP
 [
APU_C1
]);

303 
	`S9xSëFûãrC€fficõ¡
 (2, (sig√d Ë
APU
.
DSP
 [
APU_C2
]);

304 
	`S9xSëFûãrC€fficõ¡
 (3, (sig√d Ë
APU
.
DSP
 [
APU_C3
]);

305 
	`S9xSëFûãrC€fficõ¡
 (4, (sig√d Ë
APU
.
DSP
 [
APU_C4
]);

306 
	`S9xSëFûãrC€fficõ¡
 (5, (sig√d Ë
APU
.
DSP
 [
APU_C5
]);

307 
	`S9xSëFûãrC€fficõ¡
 (6, (sig√d Ë
APU
.
DSP
 [
APU_C6
]);

308 
	`S9xSëFûãrC€fficõ¡
 (7, (sig√d Ë
APU
.
DSP
 [
APU_C7
]);

309 
i
 = 0; i < 8; i++)

311 
SoundD©a
.
ch™√ls
[
i
].
√eds_decode
 = 
TRUE
;

312 
	`S9xSëSoundFªquícy
 (
i
, 
SoundD©a
.
ch™√ls
[i].
hîtz
);

313 
SoundD©a
.
ch™√ls
 [
i
].
ívxx
 = SoundD©a.ch™√l†[i].
ívx
 << 
ENVX_SHIFT
;

314 
SoundD©a
.
ch™√ls
 [
i
].
√xt_ßm∂e
 = 0;

315 
SoundD©a
.
ch™√ls
 [
i
].
öãΩﬁ©e
 = 0;

316 
SoundD©a
.
ch™√ls
 [
i
].
¥evious
 [0] = (
öt32
ËSoundD©a.ch™√l†[i].
¥evious16
 [0];

317 
SoundD©a
.
ch™√ls
 [
i
].
¥evious
 [1] = (
öt32
ËSoundD©a.ch™√l†[i].
¥evious16
 [1];

319 
SoundD©a
.
ma°î_vﬁume
 [
Sëtögs
.
Revî£Sãªo
] = SoundD©a.
ma°î_vﬁume_À·
;

320 
SoundD©a
.
ma°î_vﬁume
 [1 ^ 
Sëtögs
.
Revî£Sãªo
] = SoundD©a.
ma°î_vﬁume_right
;

321 
SoundD©a
.
echo_vﬁume
 [
Sëtögs
.
Revî£Sãªo
] = SoundD©a.
echo_vﬁume_À·
;

322 
SoundD©a
.
echo_vﬁume
 [1 ^ 
Sëtögs
.
Revî£Sãªo
] = SoundD©a.
echo_vﬁume_right
;

323 
IAPU
.
Sˇ∆öe
 = 0;

324 
	}
}

326 
	$S9xSëFûãrC€fficõ¡
 (
èp
, 
vÆue
)

328 
FûãrT≠s
 [
èp
 & 7] = 
vÆue
;

329 
SoundD©a
.
no_fûãr
 = (
FûãrT≠s
 [0] == 127 || FilterTaps [0] == 0) &&

330 
FûãrT≠s
 [1] == 0 &&

331 
FûãrT≠s
 [2] == 0 &&

332 
FûãrT≠s
 [3] == 0 &&

333 
FûãrT≠s
 [4] == 0 &&

334 
FûãrT≠s
 [5] == 0 &&

335 
FûãrT≠s
 [6] == 0 &&

336 
FûãrT≠s
 [7] == 0;

337 
	}
}

339 
	$S9xSëSoundADSR
 (
ch™√l
, 
©èck_øã
, 
deˇy_øã
,

340 
su°aö_øã
, 
su°aö_Àvñ
, 
ªÀa£_øã
)

342 
SoundD©a
.
ch™√ls
[
ch™√l
].
©èck_øã
 =áttack_rate;

343 
SoundD©a
.
ch™√ls
[
ch™√l
].
deˇy_øã
 = decay_rate;

344 
SoundD©a
.
ch™√ls
[
ch™√l
].
su°aö_øã
 = sustain_rate;

345 
SoundD©a
.
ch™√ls
[
ch™√l
].
ªÀa£_øã
 =Ñelease_rate;

346 
SoundD©a
.
ch™√ls
[
ch™√l
].
su°aö_Àvñ
 = sustain_level + 1;

348 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
)

350 
SOUND_ATTACK
:

351 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
©èck_øã
, 1, 127);

354 
SOUND_DECAY
:

355 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
deˇy_øã
, -1,

356 (
MAX_ENVELOPE_HEIGHT
 * (
su°aö_Àvñ
 + 1)) >> 3);

358 
SOUND_SUSTAIN
:

359 
	`S9xSëEnvñ›eR©e
 (
ch™√l
, 
su°aö_øã
, -1, 0);

362 
	}
}

364 
	$S9xSëEnvñ›eHeight
 (
ch™√l
, 
Àvñ
)

366 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

368 
ch
->
ívx
 = 
Àvñ
;

369 
ch
->
ívxx
 = 
Àvñ
 << 
ENVX_SHIFT
;

371 
ch
->
À·_vﬁ_Àvñ
 = (
Àvñ
 * ch->
vﬁume_À·
) / 128;

372 
ch
->
right_vﬁ_Àvñ
 = (
Àvñ
 * ch->
vﬁume_right
) / 128;

374 i‡(
ch
->
ívx
 =0 && ch->
°©e
 !
SOUND_SILENT
 && ch->°©ê!
SOUND_GAIN
)

376 
	`S9xAPUSëEndOfSam∂e
 (
ch™√l
, 
ch
);

378 
	}
}

380 
	$S9xGëEnvñ›eHeight
 (
ch™√l
)

382 i‡((
Sëtögs
.
SoundEnvñ›eHeightRódög
 ||

383 
SNESGameFixes
.
SoundEnvñ›eHeightRódög2
) &&

384 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
 !
SOUND_SILENT
 &&

385 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
 !
SOUND_GAIN
)

387  (
SoundD©a
.
ch™√ls
[
ch™√l
].
ívx
);

391 i‡(
SNESGameFixes
.
SoundEnvñ›eHeightRódög2
 &&

392 
SoundD©a
.
ch™√ls
[
ch™√l
].
°©e
 !
SOUND_SILENT
)

394  (
SoundD©a
.
ch™√ls
[
ch™√l
].
ívx
);

398 
	}
}

401 
	$S9xSëSoundSam∂e
 (, 
uöt16
)

403 
	}
}

405 
	$S9xSëSoundSam∂e
 (
ch™√l
, 
uöt16
 
ßm∂e_numbî
)

407 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

409 i‡(
ch
->
°©e
 !
SOUND_SILENT
 &&

410 
ßm∂e_numbî
 !
ch
->sample_number)

412 
kìp
 = 
ch
->
°©e
;

413 
ch
->
°©e
 = 
SOUND_SILENT
;

414 
ch
->
ßm∂e_numbî
 = sample_number;

415 
ch
->
lo›
 = 
FALSE
;

416 
ch
->
√eds_decode
 = 
TRUE
;

417 
ch
->
œ°_block
 = 
FALSE
;

418 
ch
->
¥evious
 [0] = ch->previous[1] = 0;

419 
uöt8
 *
dú
 = 
	`S9xGëSam∂eAddªss
 (
ßm∂e_numbî
);

420 
ch
->
block_poöãr
 = 
	`READ_WORD
 (
dú
);

421 
ch
->
ßm∂e_poöãr
 = 0;

422 
ch
->
°©e
 = 
kìp
;

424 
	}
}

427 
	$S9xSëSoundFªquícy
 (
ch™√l
, 
hîtz
)

429 i‡(
so
.
∂ayback_øã
)

431 i‡(
SoundD©a
.
ch™√ls
[
ch™√l
].
ty≥
 =
SOUND_NOISE
)

432 
hîtz
 = 
Noi£Fªq
 [
APU
.
DSP
 [
APU_FLG
] & 0x1f];

433 
SoundD©a
.
ch™√ls
[
ch™√l
].
‰equícy
 = ()

434 (((
öt64
Ë
hîtz
 * 
FIXED_POINT
Ë/ 
so
.
∂ayback_øã
);

435 i‡(
Sëtögs
.
FixFªquícy
)

437 
SoundD©a
.
ch™√ls
[
ch™√l
].
‰equícy
 =

438 (Ë((Ë
SoundD©a
.
ch™√ls
[
ch™√l
].
‰equícy
 * 0.980);

441 
	}
}

443 
	$S9xSëSoundHîtz
 (
ch™√l
, 
hîtz
)

445 
SoundD©a
.
ch™√ls
[
ch™√l
].
hîtz
 = hertz;

446 
	`S9xSëSoundFªquícy
 (
ch™√l
, 
hîtz
);

447 
	}
}

449 
	$S9xSëSoundTy≥
 (
ch™√l
, 
ty≥_of_sound
)

451 
SoundD©a
.
ch™√ls
[
ch™√l
].
ty≥
 = 
ty≥_of_sound
;

452 
	}
}

454 
boﬁ8_32
 
	$S9xSëSoundMuã
 (
boﬁ8_32
 
muã
)

456 
boﬁ8_32
 
ﬁd
 = 
so
.
muã_sound
;

457 
so
.
muã_sound
 = 
muã
;

458  (
ﬁd
);

459 
	}
}

461 
	$A…DecodeBlock_PPC
 (
Ch™√l
 *
ch
, 
SIAPU
 * 
üpu
)

463 i‡(
ch
->
block_poöãr
 >= 0x10000 - 9)

465 
ch
->
œ°_block
 = 
TRUE
;

466 
ch
->
lo›
 = 
FALSE
;

467 
ch
->
block
 = ch->
decoded
;

468 
	`mem£t
 ((*Ë
ch
->
decoded
, 0,  (
öt16
) * 16);

471 sig√d *
com¥es£d
 = (sig√d *Ë&
üpu
->
RAM
 [
ch
->
block_poöãr
];

473 
fûãr
 = *
com¥es£d
;

474 i‡((
ch
->
œ°_block
 = 
fûãr
 & 1))

475 
ch
->
lo›
 = (
fûãr
 & 2) != 0;

477 #i‡(
	`deföed
 (
__i386__
Ë|| deföed (
__i486__
) ||\

478 
	`deföed
 (
__i586__
Ë|| deföed (
__WIN32__
Ë|| deföed (
__DJGPP
))

479 
öt16
 *
øw
 = 
ch
->
block
 = ch->
decoded
;

481 i‡(
Sëtögs
.
A…Sam∂eDecode
 == 1)

482 
	`DecodeBlockAsm
 (
com¥es£d
, 
øw
, &
ch
->
¥evious
 [0], &ch->previous [1]);

484 
	`DecodeBlockAsm2
 (
com¥es£d
, 
øw
, &
ch
->
¥evious
 [0], &ch->previous [1]);

486 
öt32
 
out
;

487 
shi·
;

488 sig√d 
ßm∂e1
, 
ßm∂e2
;

489 
i
;

491 
com¥es£d
++;

492 sig√d *
øw
 = 
ch
->
block
 = ch->
decoded
;

494 
öt32
 
¥ev0
 = 
ch
->
¥evious
 [0];

495 
öt32
 
¥ev1
 = 
ch
->
¥evious
 [1];

496 
shi·
 = 
fûãr
 >> 4;

498 (
fûãr
 >> 2) & 3)

501 
i
 = 8; i != 0; i--)

503 
ßm∂e1
 = *
com¥es£d
++;

504 
ßm∂e2
 = 
ßm∂e1
 << 4;

505 
ßm∂e2
 >>= 4;

506 
ßm∂e1
 >>= 4;

507 *
øw
++ = ((
öt32
Ë
ßm∂e1
 << 
shi·
);

508 *
øw
++ = ((
öt32
Ë
ßm∂e2
 << 
shi·
);

510 
¥ev1
 = *(
øw
 - 2);

511 
¥ev0
 = *(
øw
 - 1);

514 
i
 = 8; i != 0; i--)

516 
ßm∂e1
 = *
com¥es£d
++;

517 
ßm∂e2
 = 
ßm∂e1
 << 4;

518 
ßm∂e2
 >>= 4;

519 
ßm∂e1
 >>= 4;

520 
¥ev0
 = (
öt16
)Örev0;

521 *
øw
++ = 
¥ev1
 = ((
öt32
Ë
ßm∂e1
 << 
shi·
Ë+ 
¥ev0
 - (prev0 >> 4);

522 
¥ev1
 = (
öt16
)Örev1;

523 *
øw
++ = 
¥ev0
 = ((
öt32
Ë
ßm∂e2
 << 
shi·
Ë+ 
¥ev1
 - (prev1 >> 4);

527 
i
 = 8; i != 0; i--)

529 
ßm∂e1
 = *
com¥es£d
++;

530 
ßm∂e2
 = 
ßm∂e1
 << 4;

531 
ßm∂e2
 >>= 4;

532 
ßm∂e1
 >>= 4;

534 
out
 = (
ßm∂e1
 << 
shi·
Ë- 
¥ev1
 + (prev1 >> 4);

535 
¥ev1
 = (
öt16
Ë
¥ev0
;

536 
¥ev0
 &= ~3;

537 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 5) -

538 (
¥ev0
 >> 4);

540 
out
 = (
ßm∂e2
 << 
shi·
Ë- 
¥ev1
 + (prev1 >> 4);

541 
¥ev1
 = (
öt16
Ë
¥ev0
;

542 
¥ev0
 &= ~3;

543 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 5) -

544 (
¥ev0
 >> 4);

548 
i
 = 8; i != 0; i--)

550 
ßm∂e1
 = *
com¥es£d
++;

551 
ßm∂e2
 = 
ßm∂e1
 << 4;

552 
ßm∂e2
 >>= 4;

553 
ßm∂e1
 >>= 4;

554 
out
 = (
ßm∂e1
 << 
shi·
);

556 
out
 = ouà- 
¥ev1
 + (prev1 >> 3) + (prev1 >> 4);

557 
¥ev1
 = (
öt16
Ë
¥ev0
;

558 
¥ev0
 &= ~3;

559 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 3) -

560 (
¥ev0
 >> 4Ë- (
¥ev1
 >> 6);

562 
out
 = (
ßm∂e2
 << 
shi·
);

563 
out
 = ouà- 
¥ev1
 + (prev1 >> 3) + (prev1 >> 4);

564 
¥ev1
 = (
öt16
Ë
¥ev0
;

565 
¥ev0
 &= ~3;

566 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 3) -

567 (
¥ev0
 >> 4Ë- (
¥ev1
 >> 6);

571 
ch
->
¥evious
 [0] = 
¥ev0
;

572 
ch
->
¥evious
 [1] = 
¥ev1
;

575 
ch
->
block_poöãr
 += 9;

576 
	}
}

578 
	$A…DecodeBlock
 (
Ch™√l
 *
ch
, 
SIAPU
 * 
üpu
)

580 i‡(
ch
->
block_poöãr
 >= 0x10000 - 9)

582 
ch
->
œ°_block
 = 
TRUE
;

583 
ch
->
lo›
 = 
FALSE
;

584 
ch
->
block
 = ch->
decoded
;

585 
	`mem£t
 ((*Ë
ch
->
decoded
, 0,  (
öt16
) * 16);

588 sig√d *
com¥es£d
 = (sig√d *Ë&
üpu
->
RAM
 [
ch
->
block_poöãr
];

590 
fûãr
 = *
com¥es£d
;

591 i‡((
ch
->
œ°_block
 = 
fûãr
 & 1))

592 
ch
->
lo›
 = (
fûãr
 & 2) != 0;

594 #i‡(
	`deföed
 (
__i386__
Ë|| deföed (
__i486__
) ||\

595 
	`deföed
 (
__i586__
Ë|| deföed (
__WIN32__
Ë|| deföed (
__DJGPP
))

596 
öt16
 *
øw
 = 
ch
->
block
 = ch->
decoded
;

598 i‡(
Sëtögs
.
A…Sam∂eDecode
 == 1)

599 
	`DecodeBlockAsm
 (
com¥es£d
, 
øw
, &
ch
->
¥evious
 [0], &ch->previous [1]);

601 
	`DecodeBlockAsm2
 (
com¥es£d
, 
øw
, &
ch
->
¥evious
 [0], &ch->previous [1]);

603 
öt32
 
out
;

604 
shi·
;

605 sig√d 
ßm∂e1
, 
ßm∂e2
;

606 
i
;

608 
com¥es£d
++;

609 sig√d *
øw
 = 
ch
->
block
 = ch->
decoded
;

611 
öt32
 
¥ev0
 = 
ch
->
¥evious
 [0];

612 
öt32
 
¥ev1
 = 
ch
->
¥evious
 [1];

613 
shi·
 = 
fûãr
 >> 4;

615 (
fûãr
 >> 2) & 3)

618 
i
 = 8; i != 0; i--)

620 
ßm∂e1
 = *
com¥es£d
++;

621 
ßm∂e2
 = 
ßm∂e1
 << 4;

622 
ßm∂e2
 >>= 4;

623 
ßm∂e1
 >>= 4;

624 *
øw
++ = ((
öt32
Ë
ßm∂e1
 << 
shi·
);

625 *
øw
++ = ((
öt32
Ë
ßm∂e2
 << 
shi·
);

627 
¥ev1
 = *(
øw
 - 2);

628 
¥ev0
 = *(
øw
 - 1);

631 
i
 = 8; i != 0; i--)

633 
ßm∂e1
 = *
com¥es£d
++;

634 
ßm∂e2
 = 
ßm∂e1
 << 4;

635 
ßm∂e2
 >>= 4;

636 
ßm∂e1
 >>= 4;

637 
¥ev0
 = (
öt16
)Örev0;

638 *
øw
++ = 
¥ev1
 = ((
öt32
Ë
ßm∂e1
 << 
shi·
Ë+ 
¥ev0
 - (prev0 >> 4);

639 
¥ev1
 = (
öt16
)Örev1;

640 *
øw
++ = 
¥ev0
 = ((
öt32
Ë
ßm∂e2
 << 
shi·
Ë+ 
¥ev1
 - (prev1 >> 4);

644 
i
 = 8; i != 0; i--)

646 
ßm∂e1
 = *
com¥es£d
++;

647 
ßm∂e2
 = 
ßm∂e1
 << 4;

648 
ßm∂e2
 >>= 4;

649 
ßm∂e1
 >>= 4;

651 
out
 = (
ßm∂e1
 << 
shi·
Ë- 
¥ev1
 + (prev1 >> 4);

652 
¥ev1
 = (
öt16
Ë
¥ev0
;

653 
¥ev0
 &= ~3;

654 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 5) -

655 (
¥ev0
 >> 4);

657 
out
 = (
ßm∂e2
 << 
shi·
Ë- 
¥ev1
 + (prev1 >> 4);

658 
¥ev1
 = (
öt16
Ë
¥ev0
;

659 
¥ev0
 &= ~3;

660 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 5) -

661 (
¥ev0
 >> 4);

665 
i
 = 8; i != 0; i--)

667 
ßm∂e1
 = *
com¥es£d
++;

668 
ßm∂e2
 = 
ßm∂e1
 << 4;

669 
ßm∂e2
 >>= 4;

670 
ßm∂e1
 >>= 4;

671 
out
 = (
ßm∂e1
 << 
shi·
);

673 
out
 = ouà- 
¥ev1
 + (prev1 >> 3) + (prev1 >> 4);

674 
¥ev1
 = (
öt16
Ë
¥ev0
;

675 
¥ev0
 &= ~3;

676 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 3) -

677 (
¥ev0
 >> 4Ë- (
¥ev1
 >> 6);

679 
out
 = (
ßm∂e2
 << 
shi·
);

680 
out
 = ouà- 
¥ev1
 + (prev1 >> 3) + (prev1 >> 4);

681 
¥ev1
 = (
öt16
Ë
¥ev0
;

682 
¥ev0
 &= ~3;

683 *
øw
++ = 
¥ev0
 = 
out
 + (prev0 << 1) - (prev0 >> 3) -

684 (
¥ev0
 >> 4Ë- (
¥ev1
 >> 6);

688 
ch
->
¥evious
 [0] = 
¥ev0
;

689 
ch
->
¥evious
 [1] = 
¥ev1
;

692 
ch
->
block_poöãr
 += 9;

693 
	}
}

695 
	$A…DecodeBlock2
 (
Ch™√l
 *
ch
)

697 
öt32
 
out
;

698 
fûãr
;

699 
shi·
;

700 sig√d 
ßm∂e1
, 
ßm∂e2
;

701 
i
;

703 i‡(
ch
->
block_poöãr
 > 0x10000 - 9)

705 
ch
->
œ°_block
 = 
TRUE
;

706 
ch
->
lo›
 = 
FALSE
;

707 
ch
->
block
 = ch->
decoded
;

708 
	`mem£t
 ((*Ë
ch
->
decoded
, 0,  (
öt16
) * 16);

712 sig√d *
com¥es£d
 = (sig√d *Ë&
IAPU
.
RAM
 [
ch
->
block_poöãr
];

714 
fûãr
 = *
com¥es£d
;

715 i‡((
ch
->
œ°_block
 = 
fûãr
 & 1))

716 
ch
->
lo›
 = (
fûãr
 & 2) != 0;

718 
com¥es£d
++;

719 sig√d *
øw
 = 
ch
->
block
 = ch->
decoded
;

721 
shi·
 = 
fûãr
 >> 4;

722 
öt32
 
¥ev0
 = 
ch
->
¥evious
 [0];

723 
öt32
 
¥ev1
 = 
ch
->
¥evious
 [1];

725 if(
shi·
 > 12)

726 
shi·
 -= 4;

728 (
fûãr
 >> 2) & 3)

731 
i
 = 8; i != 0; i--)

733 
ßm∂e1
 = *
com¥es£d
++;

734 
ßm∂e2
 = 
ßm∂e1
 << 4;

736 
ßm∂e2
 >>= 4;

738 
ßm∂e1
 >>= 4;

740 
out
 = (
öt32
)(
ßm∂e1
 << 
shi·
);

742 
¥ev1
 = 
¥ev0
;

743 
¥ev0
 = 
out
;

744 
	`CLIP16
(
out
);

745 *
øw
++ = (
öt16
)
out
;

747 
out
 = (
öt32
)(
ßm∂e2
 << 
shi·
);

749 
¥ev1
 = 
¥ev0
;

750 
¥ev0
 = 
out
;

751 
	`CLIP16
(
out
);

752 *
øw
++ = (
öt16
)
out
;

756 
i
 = 8; i != 0; i--)

758 
ßm∂e1
 = *
com¥es£d
++;

759 
ßm∂e2
 = 
ßm∂e1
 << 4;

761 
ßm∂e2
 >>= 4;

763 
ßm∂e1
 >>= 4;

764 
out
 = (
öt32
)(
ßm∂e1
 << 
shi·
);

765 
out
 +(
öt32
)(()
¥ev0
 * 15/16);

767 
¥ev1
 = 
¥ev0
;

768 
¥ev0
 = 
out
;

769 
	`CLIP16
(
out
);

770 *
øw
++ = (
öt16
)
out
;

772 
out
 = (
öt32
)(
ßm∂e2
 << 
shi·
);

773 
out
 +(
öt32
)(()
¥ev0
 * 15/16);

775 
¥ev1
 = 
¥ev0
;

776 
¥ev0
 = 
out
;

777 
	`CLIP16
(
out
);

778 *
øw
++ = (
öt16
)
out
;

782 
i
 = 8; i != 0; i--)

784 
ßm∂e1
 = *
com¥es£d
++;

785 
ßm∂e2
 = 
ßm∂e1
 << 4;

787 
ßm∂e2
 >>= 4;

789 
ßm∂e1
 >>= 4;

791 
out
 = ((
ßm∂e1
 << 
shi·
Ë* 256 + (
¥ev0
 & ~0x2Ë* 488 - 
¥ev1
 * 240) >> 8;

793 
¥ev1
 = 
¥ev0
;

794 
¥ev0
 = (
öt16
)
out
;

795 *
øw
++ = (
öt16
)
out
;

797 
out
 = ((
ßm∂e2
 << 
shi·
Ë* 256 + (
¥ev0
 & ~0x2Ë* 488 - 
¥ev1
 * 240) >> 8;

799 
¥ev1
 = 
¥ev0
;

800 
¥ev0
 = (
öt16
)
out
;

801 *
øw
++ = (
öt16
)
out
;

806 
i
 = 8; i != 0; i--)

808 
ßm∂e1
 = *
com¥es£d
++;

809 
ßm∂e2
 = 
ßm∂e1
 << 4;

811 
ßm∂e2
 >>= 4;

813 
ßm∂e1
 >>= 4;

814 
out
 = (
öt32
)(
ßm∂e1
 << 
shi·
);

815 
out
 +(
öt32
)(()
¥ev0
 * 115/64 - ()
¥ev1
 * 13/16);

817 
¥ev1
 = 
¥ev0
;

818 
¥ev0
 = 
out
;

820 
	`CLIP16
(
out
);

821 *
øw
++ = (
öt16
)
out
;

823 
out
 = (
öt32
)(
ßm∂e2
 << 
shi·
);

824 
out
 +(
öt32
)(()
¥ev0
 * 115/64 - ()
¥ev1
 * 13/16);

826 
¥ev1
 = 
¥ev0
;

827 
¥ev0
 = 
out
;

829 
	`CLIP16
(
out
);

830 *
øw
++ = (
öt16
)
out
;

834 
ch
->
¥evious
 [0] = 
¥ev0
;

835 
ch
->
¥evious
 [1] = 
¥ev1
;

836 
ch
->
block_poöãr
 += 9;

837 
	}
}

839 
	$DecodeBlock
 (
Ch™√l
 *
ch
)

841 
öt32
 
out
;

842 
fûãr
;

843 
shi·
;

844 sig√d 
ßm∂e1
, 
ßm∂e2
;

845 
i
;

847 i‡(
Sëtögs
.
A…Sam∂eDecode
)

849 i‡(
Sëtögs
.
A…Sam∂eDecode
 < 3)

850 
	`A…DecodeBlock
 (
ch
, &
IAPU
);

852 
	`A…DecodeBlock2
 (
ch
);

855 i‡(
ch
->
block_poöãr
 > 0x10000 - 9)

857 
ch
->
œ°_block
 = 
TRUE
;

858 
ch
->
lo›
 = 
FALSE
;

859 
ch
->
block
 = ch->
decoded
;

862 sig√d *
com¥es£d
 = (sig√d *Ë&
IAPU
.
RAM
 [
ch
->
block_poöãr
];

864 
fûãr
 = *
com¥es£d
;

865 i‡((
ch
->
œ°_block
 = 
fûãr
 & 1))

866 
ch
->
lo›
 = (
fûãr
 & 2) != 0;

871 i‡(!
Sëtögs
.
DißbÀSam∂eCachög
 &&

872 
	`memcmp
 ((
uöt8
 *Ë
com¥es£d
, &
IAPU
.
ShadowRAM
 [
ch
->
block_poöãr
], 9) == 0)

874 
ch
->
block
 = (sig√d *Ë(
IAPU
.
CachedSam∂es
 + (ch->
block_poöãr
 << 2));

875 
ch
->
¥evious
 [0] = ch->
block
 [15];

876 
ch
->
¥evious
 [1] = ch->
block
 [14];

880 i‡(!
Sëtögs
.
DißbÀSam∂eCachög
)

881 
	`mem˝y
 (&
IAPU
.
ShadowRAM
 [
ch
->
block_poöãr
], (
uöt8
 *Ë
com¥es£d
, 9);

882 
com¥es£d
++;

883 sig√d *
øw
 = 
ch
->
block
 = ch->
decoded
;

885 
shi·
 = 
fûãr
 >> 4;

886 
fûãr
 = ((filter >> 2) & 3);

887 
öt32
 
¥ev0
 = 
ch
->
¥evious
 [0];

888 
öt32
 
¥ev1
 = 
ch
->
¥evious
 [1];

889 
öt32
 
f0
 = 
FûãrVÆues
[
fûãr
][0];

890 
öt32
 
f1
 = 
FûãrVÆues
[
fûãr
][1];

892 
i
 = 8; i != 0; i--)

894 
ßm∂e1
 = *
com¥es£d
++;

895 
ßm∂e2
 = 
ßm∂e1
 << 4;

897 
ßm∂e2
 >>= 4;

899 
ßm∂e1
 >>= 4;

900 
out
 = (
ßm∂e1
 << 
shi·
);

901 
out
 +(
¥ev0
 * 
f0
 + 
¥ev1
 * 
f1
) / 256;

903 
	`CLIP16
 (
out
);

904 
¥ev1
 = 
¥ev0
;

905 
¥ev0
 = 
out
;

906 *
øw
++ = (sig√d Ë
out
;

908 
out
 = (
ßm∂e2
 << 
shi·
);

909 
out
 +(
¥ev0
 * 
f0
 + 
¥ev1
 * 
f1
) / 256;

911 
	`CLIP16
 (
out
);

912 
¥ev1
 = 
¥ev0
;

913 
¥ev0
 = 
out
;

914 *
øw
++ = (sig√d Ë
out
;

916 
ch
->
¥evious
 [0] = 
¥ev0
;

917 
ch
->
¥evious
 [1] = 
¥ev1
;

919 i‡(!
Sëtögs
.
DißbÀSam∂eCachög
)

921 
	`mem˝y
 (
IAPU
.
CachedSam∂es
 + (
ch
->
block_poöãr
 << 2),

922 (
uöt8
 *Ë
ch
->
decoded
, 32);

925 
ch
->
block_poöãr
 += 9;

926 
	}
}

928 
	$MixSãªo
 (
ßm∂e_cou¡
)

930 
SIAPU
 * 
üpu
 = &
IAPU
;

931 #i‡
	`deföed
(
TARGET_OS_MAC
) && TARGET_OS_MAC

932 
wave
[
SOUND_BUFFER_SIZE
];

934 
wave
[
SOUND_BUFFER_SIZE
];

936 
pôch_mod
 = 
SoundD©a
.pôch_mod & ~
APU
.
DSP
[
APU_NON
];

938 
uöt32
 
J
 = 0; J < 
NUM_CHANNELS
; J++)

940 
öt32
 
VL
, 
VR
;

941 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
J
];

942 
‰eq0
 = 
ch
->
‰equícy
;

944 i‡(
ch
->
°©e
 =
SOUND_SILENT
 || !(
so
.
sound_swôch
 & (1 << 
J
)))

949 
boﬁ8_32
 
mod
 = 
pôch_mod
 & (1 << 
J
);

951 i‡(
ch
->
√eds_decode
)

953 
	`A…DecodeBlock
(
ch
, 
üpu
);

955 
ch
->
√eds_decode
 = 
FALSE
;

956 
ch
->
ßm∂e
 = ch->
block
[0];

957 
ch
->
ßm∂e_poöãr
 = 
‰eq0
 >> 
FIXED_POINT_SHIFT
;

958 i‡(
ch
->
ßm∂e_poöãr
 == 0)

959 
ch
->
ßm∂e_poöãr
 = 1;

960 i‡(
ch
->
ßm∂e_poöãr
 > 
SOUND_DECODE_LENGTH
)

961 
ch
->
ßm∂e_poöãr
 = 
SOUND_DECODE_LENGTH
 - 1;

963 
ch
->
√xt_ßm∂e
 = ch->
block
[ch->
ßm∂e_poöãr
];

964 
ch
->
öãΩﬁ©e
 = 0;

966 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq0
 < 
FIXED_POINT
 && !
mod
)

967 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

968 (Ë
‰eq0
Ë/ (Ë
FIXED_POINT
;

970 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

971 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

973 
uöt32
 
I
 = 0; I < (uöt32Ë
ßm∂e_cou¡
; I += 2)

975 
‰eq
 = 
‰eq0
;

977 i‡(
mod
)

978 
‰eq
 = 
	`PITCH_MOD
(‰eq, 
wave
 [
I
 / 2]);

980 
ch
->
ív_îr‹
 +ch->
î©e
;

981 i‡(
ch
->
ív_îr‹
 >
FIXED_POINT
)

983 
uöt32
 
°ï
 = 
ch
->
ív_îr‹
 >> 
FIXED_POINT_SHIFT
;

985 
ch
->
°©e
)

987 
SOUND_ATTACK
:

988 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

989 
ch
->
ívx
 +
°ï
 << 1;

990 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

992 i‡(
ch
->
ívx
 >= 126)

994 
ch
->
ívx
 = 127;

995 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

996 
ch
->
°©e
 = 
SOUND_DECAY
;

997 i‡(
ch
->
su°aö_Àvñ
 != 8)

999 
	`S9xSëEnvR©e
 (
ch
, ch->
deˇy_øã
, -1,

1000 (
MAX_ENVELOPE_HEIGHT
 * 
ch
->
su°aö_Àvñ
)

1004 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

1005 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0);

1009 
SOUND_DECAY
:

1010 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1012 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

1013 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1015 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1016 i‡(
ch
->
ívx
 <ch->
ívx_èrgë
)

1018 i‡(
ch
->
ívx
 <= 0)

1020 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1021 
°îeo_exô
;

1023 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

1024 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0);

1028 
SOUND_SUSTAIN
:

1029 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1031 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

1032 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1034 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1035 i‡(
ch
->
ívx
 <= 0)

1037 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1038 
°îeo_exô
;

1042 
SOUND_RELEASE
:

1043 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1045 
ch
->
ívxx
 -(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

1046 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1048 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1049 i‡(
ch
->
ívx
 <= 0)

1051 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1052 
°îeo_exô
;

1056 
SOUND_INCREASE_LINEAR
:

1057 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1058 
ch
->
ívx
 +
°ï
 << 1;

1059 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1061 i‡(
ch
->
ívx
 >= 126)

1063 
ch
->
ívx
 = 127;

1064 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

1065 
ch
->
°©e
 = 
SOUND_GAIN
;

1066 
ch
->
mode
 = 
MODE_GAIN
;

1067 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0);

1071 
SOUND_INCREASE_BENT_LINE
:

1072 i‡(
ch
->
ívx
 >(
MAX_ENVELOPE_HEIGHT
 * 3) / 4)

1074 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1076 
ch
->
ívxx
 +(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

1077 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1079 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1083 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1084 
ch
->
ívx
 +
°ï
 << 1;

1085 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1088 i‡(
ch
->
ívx
 >= 126)

1090 
ch
->
ívx
 = 127;

1091 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

1092 
ch
->
°©e
 = 
SOUND_GAIN
;

1093 
ch
->
mode
 = 
MODE_GAIN
;

1094 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0);

1098 
SOUND_DECREASE_LINEAR
:

1099 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1100 
ch
->
ívx
 -
°ï
 << 1;

1101 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1102 i‡(
ch
->
ívx
 <= 0)

1104 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1105 
°îeo_exô
;

1109 
SOUND_DECREASE_EXPONENTIAL
:

1110 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1112 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

1113 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1115 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1116 i‡(
ch
->
ívx
 <= 0)

1118 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1119 
°îeo_exô
;

1123 
SOUND_GAIN
:

1124 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0);

1127 
ch
-> 
À·_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_À·
) / 128;

1128 
ch
->
right_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_right
) / 128;

1129 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

1130 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

1133 
ch
->
cou¡
 +
‰eq
;

1134 i‡(
ch
->
cou¡
 >
FIXED_POINT
)

1136 
VL
 = 
ch
->
cou¡
 >> 
FIXED_POINT_SHIFT
;

1137 
ch
->
ßm∂e_poöãr
 +
VL
;

1138 
ch
->
cou¡
 &
FIXED_POINT_REMAINDER
;

1140 
ch
->
ßm∂e
 = ch->
√xt_ßm∂e
;

1141 i‡(
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
)

1143 i‡(
	`JUST_PLAYED_LAST_SAMPLE
(
ch
))

1145 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1146 
°îeo_exô
;

1150 
ch
->
ßm∂e_poöãr
 -
SOUND_DECODE_LENGTH
;

1151 i‡(
ch
->
œ°_block
)

1153 i‡(!
ch
->
lo›
)

1155 
ch
->
ßm∂e_poöãr
 = 
LAST_SAMPLE
;

1156 
ch
->
√xt_ßm∂e
 = ch->
ßm∂e
;

1161 
	`S9xAPUSëEndX
 (
J
);

1162 
ch
->
œ°_block
 = 
FALSE
;

1163 
uöt8
 *
dú
 = 
	`S9xGëSam∂eAddªss
 (
ch
->
ßm∂e_numbî
);

1164 
ch
->
block_poöãr
 = 
	`READ_WORD
(
dú
 + 2);

1167 
	`A…DecodeBlock
(
ch
, 
üpu
);

1169 } 
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
);

1170 i‡(!
	`JUST_PLAYED_LAST_SAMPLE
 (
ch
))

1171 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

1174 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

1176 i‡(
ch
->
ty≥
 =
SOUND_SAMPLE
)

1178 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq
 < 
FIXED_POINT
 && !
mod
)

1180 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

1181 (Ë
‰eq
Ë/ (Ë
FIXED_POINT
;

1182 
ch
->
ßm∂e
 = (
öt16
Ë(ch->ßm∂ê+ (((ch->
√xt_ßm∂e
 - ch->sample) *

1183 (Ë(
ch
->
cou¡
)Ë/ (Ë
FIXED_POINT
));

1186 
ch
->
öãΩﬁ©e
 = 0;

1190 ;
VL
 > 0; VL--)

1191 i‡((
so
.
noi£_gí
 <<= 1) & 0x80000000L)

1192 
so
.
noi£_gí
 ^= 0x0040001L;

1193 
ch
->
ßm∂e
 = (
so
.
noi£_gí
 << 17) >> 17;

1194 
ch
->
öãΩﬁ©e
 = 0;

1197 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

1198 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

1202 i‡(
ch
->
öãΩﬁ©e
)

1204 
öt32
 
s
 = (öt32Ë
ch
->
ßm∂e
 + ch->
öãΩﬁ©e
;

1206 
	`CLIP16
(
s
);

1207 
ch
->
ßm∂e
 = (
öt16
Ë
s
;

1208 
VL
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

1209 
VR
 = (
ch
->
ßm∂e
 * ch->
right_vﬁ_Àvñ
) / 128;

1213 i‡(
pôch_mod
 & (1 << (
J
 + 1)))

1214 
wave
 [
I
 / 2] = 
ch
->
ßm∂e
 * ch->
ívx
;

1216 
MixBuf„r
 [
I
 ^ 
Sëtögs
.
Revî£Sãªo
] +
VL
;

1217 
MixBuf„r
 [
I
 + (1 ^ 
Sëtögs
.
Revî£Sãªo
)] +
VR
;

1218 
ch
->
echo_buf_±r
 [
I
 ^ 
Sëtögs
.
Revî£Sãªo
] +
VL
;

1219 
ch
->
echo_buf_±r
 [
I
 + (1 ^ 
Sëtögs
.
Revî£Sãªo
)] +
VR
;

1221 
°îeo_exô
: ;

1223 
	}
}

1225 #ifde‡
__DJGPP


1226 
END_OF_FUNCTION
(
MixSãªo
);

1229 
	$MixM⁄o
 (
ßm∂e_cou¡
)

1231 
SIAPU
 * 
üpu
 = &
IAPU
;

1232 #i‡
	`deföed
(
TARGET_OS_MAC
) && TARGET_OS_MAC

1233 
wave
[
SOUND_BUFFER_SIZE
];

1235 #ifde‡
_SNESPPC


1236 
wave
[
SOUND_BUFFER_SIZE
];

1238 
wave
[
SOUND_BUFFER_SIZE
];

1241 
pôch_mod
 = 
SoundD©a
.pôch_mod & (~
APU
.
DSP
[
APU_NON
]);

1243 
uöt32
 
J
 = 0; J < 
NUM_CHANNELS
; J++)

1245 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
J
];

1246 
‰eq0
 = 
ch
->
‰equícy
;

1248 i‡(
ch
->
°©e
 =
SOUND_SILENT
 || !(
so
.
sound_swôch
 & (1 << 
J
)))

1253 
boﬁ8_32
 
mod
 = 
pôch_mod
 & (1 << 
J
);

1255 i‡(
ch
->
√eds_decode
)

1257 
	`A…DecodeBlock
(
ch
, 
üpu
);

1259 
ch
->
√eds_decode
 = 
FALSE
;

1260 
ch
->
ßm∂e
 = ch->
block
[0];

1261 
ch
->
ßm∂e_poöãr
 = 
‰eq0
 >> 
FIXED_POINT_SHIFT
;

1262 i‡(
ch
->
ßm∂e_poöãr
 == 0)

1263 
ch
->
ßm∂e_poöãr
 = 1;

1264 i‡(
ch
->
ßm∂e_poöãr
 > 
SOUND_DECODE_LENGTH
)

1265 
ch
->
ßm∂e_poöãr
 = 
SOUND_DECODE_LENGTH
 - 1;

1266 
ch
->
√xt_ßm∂e
 = ch->
block
[ch->
ßm∂e_poöãr
];

1267 
ch
->
öãΩﬁ©e
 = 0;

1269 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq0
 < 
FIXED_POINT
 && !
mod
)

1270 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

1271 (Ë
‰eq0
Ë/ (Ë
FIXED_POINT
;

1273 
öt32
 
V
 = (
ch
->
ßm∂e
 * ch->
À·_vﬁ_Àvñ
) / 128;

1275 
uöt32
 
I
 = 0; I < (uöt32Ë
ßm∂e_cou¡
; I++)

1277 
‰eq
 = 
‰eq0
;

1279 i‡(
mod
)

1280 
‰eq
 = 
	`PITCH_MOD
(‰eq, 
wave
 [
I
]);

1282 
ch
->
ív_îr‹
 +ch->
î©e
;

1283 i‡(
ch
->
ív_îr‹
 >
FIXED_POINT
)

1285 
uöt32
 
°ï
 = 
ch
->
ív_îr‹
 >> 
FIXED_POINT_SHIFT
;

1287 
ch
->
°©e
)

1289 
SOUND_ATTACK
:

1290 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1291 
ch
->
ívx
 +
°ï
 << 1;

1292 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1294 i‡(
ch
->
ívx
 >= 126)

1296 
ch
->
ívx
 = 127;

1297 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

1298 
ch
->
°©e
 = 
SOUND_DECAY
;

1299 i‡(
ch
->
su°aö_Àvñ
 != 8)

1301 
	`S9xSëEnvR©e
 (
ch
, ch->
deˇy_øã
, -1,

1302 (
MAX_ENVELOPE_HEIGHT
 * 
ch
->
su°aö_Àvñ
)

1306 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

1307 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0);

1311 
SOUND_DECAY
:

1312 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1314 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

1315 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1317 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1318 i‡(
ch
->
ívx
 <ch->
ívx_èrgë
)

1320 i‡(
ch
->
ívx
 <= 0)

1322 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1323 
m⁄o_exô
;

1325 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

1326 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0);

1330 
SOUND_SUSTAIN
:

1331 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1333 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

1334 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1336 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1337 i‡(
ch
->
ívx
 <= 0)

1339 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1340 
m⁄o_exô
;

1344 
SOUND_RELEASE
:

1345 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1347 
ch
->
ívxx
 -(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

1348 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1350 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1351 i‡(
ch
->
ívx
 <= 0)

1353 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1354 
m⁄o_exô
;

1358 
SOUND_INCREASE_LINEAR
:

1359 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1360 
ch
->
ívx
 +
°ï
 << 1;

1361 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1363 i‡(
ch
->
ívx
 >= 126)

1365 
ch
->
ívx
 = 127;

1366 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

1367 
ch
->
°©e
 = 
SOUND_GAIN
;

1368 
ch
->
mode
 = 
MODE_GAIN
;

1369 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0);

1373 
SOUND_INCREASE_BENT_LINE
:

1374 i‡(
ch
->
ívx
 >(
MAX_ENVELOPE_HEIGHT
 * 3) / 4)

1376 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1378 
ch
->
ívxx
 +(
MAX_ENVELOPE_HEIGHT
 << 
ENVX_SHIFT
) / 256;

1379 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1381 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1385 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1386 
ch
->
ívx
 +
°ï
 << 1;

1387 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1390 i‡(
ch
->
ívx
 >= 126)

1392 
ch
->
ívx
 = 127;

1393 
ch
->
ívxx
 = 127 << 
ENVX_SHIFT
;

1394 
ch
->
°©e
 = 
SOUND_GAIN
;

1395 
ch
->
mode
 = 
MODE_GAIN
;

1396 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0);

1400 
SOUND_DECREASE_LINEAR
:

1401 
ch
->
ív_îr‹
 &
FIXED_POINT_REMAINDER
;

1402 
ch
->
ívx
 -
°ï
 << 1;

1403 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

1404 i‡(
ch
->
ívx
 <= 0)

1406 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1407 
m⁄o_exô
;

1411 
SOUND_DECREASE_EXPONENTIAL
:

1412 
ch
->
ív_îr‹
 >
FIXED_POINT
)

1414 
ch
->
ívxx
 = (ch->envxx >> 8) * 255;

1415 
ch
->
ív_îr‹
 -
FIXED_POINT
;

1417 
ch
->
ívx
 = ch->
ívxx
 >> 
ENVX_SHIFT
;

1418 i‡(
ch
->
ívx
 <= 0)

1420 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1421 
m⁄o_exô
;

1425 
SOUND_GAIN
:

1426 
	`S9xSëEnvR©e
 (
ch
, 0, -1, 0);

1429 
ch
->
À·_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_À·
) / 128;

1430 
V
 = (
ch
->
ßm∂e
 * ch->
À·_vﬁ_Àvñ
) / 128;

1433 
ch
->
cou¡
 +
‰eq
;

1434 i‡(
ch
->
cou¡
 >
FIXED_POINT
)

1436 
V
 = 
ch
->
cou¡
 >> 
FIXED_POINT_SHIFT
;

1437 
ch
->
ßm∂e_poöãr
 +
V
;

1438 
ch
->
cou¡
 &
FIXED_POINT_REMAINDER
;

1440 
ch
->
ßm∂e
 = ch->
√xt_ßm∂e
;

1441 i‡(
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
)

1443 i‡(
	`JUST_PLAYED_LAST_SAMPLE
(
ch
))

1445 
	`S9xAPUSëEndOfSam∂e
 (
J
, 
ch
);

1446 
m⁄o_exô
;

1450 
ch
->
ßm∂e_poöãr
 -
SOUND_DECODE_LENGTH
;

1451 i‡(
ch
->
œ°_block
)

1453 i‡(!
ch
->
lo›
)

1455 
ch
->
ßm∂e_poöãr
 = 
LAST_SAMPLE
;

1456 
ch
->
√xt_ßm∂e
 = ch->
ßm∂e
;

1461 
ch
->
œ°_block
 = 
FALSE
;

1462 
uöt8
 *
dú
 = 
	`S9xGëSam∂eAddªss
 (
ch
->
ßm∂e_numbî
);

1463 
ch
->
block_poöãr
 = 
	`READ_WORD
(
dú
 + 2);

1464 
	`S9xAPUSëEndX
 (
J
);

1467 
	`A…DecodeBlock
(
ch
, 
üpu
);

1469 } 
ch
->
ßm∂e_poöãr
 >
SOUND_DECODE_LENGTH
);

1470 i‡(!
	`JUST_PLAYED_LAST_SAMPLE
 (
ch
))

1471 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

1474 
ch
->
√xt_ßm∂e
 = ch->
block
 [ch->
ßm∂e_poöãr
];

1476 i‡(
ch
->
ty≥
 =
SOUND_SAMPLE
)

1478 i‡(
Sëtögs
.
I¡îpﬁ©edSound
 && 
‰eq
 < 
FIXED_POINT
 && !
mod
)

1480 
ch
->
öãΩﬁ©e
 = ((ch->
√xt_ßm∂e
 - ch->
ßm∂e
) *

1481 (Ë
‰eq
Ë/ (Ë
FIXED_POINT
;

1482 
ch
->
ßm∂e
 = (
öt16
Ë(ch->ßm∂ê+ (((ch->
√xt_ßm∂e
 - ch->sample) *

1483 (Ë(
ch
->
cou¡
)Ë/ (Ë
FIXED_POINT
));

1486 
ch
->
öãΩﬁ©e
 = 0;

1490 ;
V
 > 0; V--)

1491 i‡((
so
.
noi£_gí
 <<= 1) & 0x80000000L)

1492 
so
.
noi£_gí
 ^= 0x0040001L;

1493 
ch
->
ßm∂e
 = (
so
.
noi£_gí
 << 17) >> 17;

1494 
ch
->
öãΩﬁ©e
 = 0;

1496 
V
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

1500 i‡(
ch
->
öãΩﬁ©e
)

1502 
öt32
 
s
 = (öt32Ë
ch
->
ßm∂e
 + ch->
öãΩﬁ©e
;

1504 
	`CLIP16
(
s
);

1505 
ch
->
ßm∂e
 = (
öt16
Ë
s
;

1506 
V
 = (
ch
->
ßm∂e
 * ch-> 
À·_vﬁ_Àvñ
) / 128;

1510 
MixBuf„r
 [
I
] +
V
;

1511 
ch
->
echo_buf_±r
 [
I
] +
V
;

1513 i‡(
pôch_mod
 & (1 << (
J
 + 1)))

1514 
wave
 [
I
] = 
ch
->
ßm∂e
 * ch->
ívx
;

1516 
m⁄o_exô
: ;

1518 
	}
}

1519 #ifde‡
__DJGPP


1520 
END_OF_FUNCTION
(
MixM⁄o
);

1523 #ifde‡
__sun


1524 
uöt8
 
öt2uœw
 ();

1528 
	$S9xMixSam∂es
 (
uöt8
 *
buf„r
, 
ßm∂e_cou¡
)

1530 
	`S9xMixSam∂esO
 (
buf„r
, 
ßm∂e_cou¡
, 0);

1531 
	}
}

1532 #ifde‡
__DJGPP


1533 
END_OF_FUNCTION
(
S9xMixSam∂es
);

1536 
	$S9xMixSam∂esO
 (
uöt8
 *
buf„r
, 
ßm∂e_cou¡
, 
byã_off£t
)

1538 
J
;

1539 
I
;

1541 i‡(!
so
.
muã_sound
)

1543 
	`mem£t
 (
MixBuf„r
, 0, 
ßm∂e_cou¡
 *  (MixBuffer [0]));

1544 i‡(
SoundD©a
.
echo_íabÀ
)

1545 
	`mem£t
 (
EchoBuf„r
, 0, 
ßm∂e_cou¡
 *  (EchoBuffer [0]));

1547 i‡(
so
.
°îeo
)

1548 
	`MixSãªo
 (
ßm∂e_cou¡
);

1550 
	`MixM⁄o
 (
ßm∂e_cou¡
);

1554 i‡(
so
.
sixãí_bô
)

1556 
byã_cou¡
 = 
ßm∂e_cou¡
 << 1;

1559 i‡(
so
.
muã_sound
)

1561 
	`mem£t
 (
buf„r
 + 
byã_off£t
, 0, 
byã_cou¡
);

1565 
O
 = 
byã_off£t
 >> 1;

1566 i‡(
SoundD©a
.
echo_íabÀ
 && SoundD©a.
echo_buf„r_size
)

1568 i‡(
so
.
°îeo
)

1571 i‡(
SoundD©a
.
no_fûãr
)

1574 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1576 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1578 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
Ë/ 128 + 
EchoBuf„r
 [
J
];

1580 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1581 
SoundD©a
.
echo_±r
 = 0;

1583 
I
 = (
MixBuf„r
 [
J
] * 
SoundD©a
.
ma°î_vﬁume
 [J & 1] + 
E
 * SoundD©a.
echo_vﬁume
 [J & 1]Ë/ 
VOL_DIV16
;

1585 
	`CLIP16
(
I
);

1586 ((sig√d *Ë
buf„r
)[
J
 + 
O
] = 
I
;

1592 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1594 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1596 
Lo›
 [(
Z
 - 0Ë& 15] = 
E
;

1597 
E
 = E * 
FûãrT≠s
 [0];

1598 
E
 +
Lo›
 [(
Z
 - 2Ë& 15] * 
FûãrT≠s
 [1];

1599 
E
 +
Lo›
 [(
Z
 - 4Ë& 15] * 
FûãrT≠s
 [2];

1600 
E
 +
Lo›
 [(
Z
 - 6Ë& 15] * 
FûãrT≠s
 [3];

1601 
E
 +
Lo›
 [(
Z
 - 8Ë& 15] * 
FûãrT≠s
 [4];

1602 
E
 +
Lo›
 [(
Z
 - 10Ë& 15] * 
FûãrT≠s
 [5];

1603 
E
 +
Lo›
 [(
Z
 - 12Ë& 15] * 
FûãrT≠s
 [6];

1604 
E
 +
Lo›
 [(
Z
 - 14Ë& 15] * 
FûãrT≠s
 [7];

1605 
E
 /= 128;

1606 
Z
++;

1608 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1609 
EchoBuf„r
 [
J
];

1611 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1612 
SoundD©a
.
echo_±r
 = 0;

1614 
I
 = (
MixBuf„r
 [
J
] *

1615 
SoundD©a
.
ma°î_vﬁume
 [
J
 & 1] +

1616 
E
 * 
SoundD©a
.
echo_vﬁume
 [
J
 & 1]Ë/ 
VOL_DIV16
;

1618 
	`CLIP16
(
I
);

1619 ((sig√d *Ë
buf„r
)[
J
 + 
O
] = 
I
;

1626 i‡(
SoundD©a
.
no_fûãr
)

1629 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1631 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1633 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1634 
EchoBuf„r
 [
J
];

1636 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1637 
SoundD©a
.
echo_±r
 = 0;

1639 
I
 = (
MixBuf„r
 [
J
] *

1640 
SoundD©a
.
ma°î_vﬁume
 [0] +

1641 
E
 * 
SoundD©a
.
echo_vﬁume
 [0]Ë/ 
VOL_DIV16
;

1642 
	`CLIP16
(
I
);

1643 ((sig√d *Ë
buf„r
)[
J
 + 
O
] = 
I
;

1649 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1651 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1653 
Lo›
 [(
Z
 - 0Ë& 7] = 
E
;

1654 
E
 = E * 
FûãrT≠s
 [0];

1655 
E
 +
Lo›
 [(
Z
 - 1Ë& 7] * 
FûãrT≠s
 [1];

1656 
E
 +
Lo›
 [(
Z
 - 2Ë& 7] * 
FûãrT≠s
 [2];

1657 
E
 +
Lo›
 [(
Z
 - 3Ë& 7] * 
FûãrT≠s
 [3];

1658 
E
 +
Lo›
 [(
Z
 - 4Ë& 7] * 
FûãrT≠s
 [4];

1659 
E
 +
Lo›
 [(
Z
 - 5Ë& 7] * 
FûãrT≠s
 [5];

1660 
E
 +
Lo›
 [(
Z
 - 6Ë& 7] * 
FûãrT≠s
 [6];

1661 
E
 +
Lo›
 [(
Z
 - 7Ë& 7] * 
FûãrT≠s
 [7];

1662 
E
 /= 128;

1663 
Z
++;

1665 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1666 
EchoBuf„r
 [
J
];

1668 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1669 
SoundD©a
.
echo_±r
 = 0;

1671 
I
 = (
MixBuf„r
 [
J
] * 
SoundD©a
.
ma°î_vﬁume
 [0] +

1672 
E
 * 
SoundD©a
.
echo_vﬁume
 [0]Ë/ 
VOL_DIV16
;

1673 
	`CLIP16
(
I
);

1674 ((sig√d *Ë
buf„r
)[
J
 + 
O
] = 
I
;

1682 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1684 
I
 = (
MixBuf„r
 [
J
] *

1685 
SoundD©a
.
ma°î_vﬁume
 [
J
 & 1]Ë/ 
VOL_DIV16
;

1687 
	`CLIP16
(
I
);

1688 ((sig√d *Ë
buf„r
)[
J
 + 
O
] = 
I
;

1695 
O
 = 
byã_off£t
;

1698 i‡(
so
.
muã_sound
)

1700 
	`mem£t
 (
buf„r
 + 
O
, 128, 
ßm∂e_cou¡
);

1703 #ifde‡
__sun


1704 i‡(
so
.
ícoded
)

1706 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1708 
I
 = (
MixBuf„r
 [
J
] * 
SoundD©a
.
ma°î_vﬁume_À·
Ë/ 
VOL_DIV16
;

1709 
	`CLIP16
(
I
);

1710 
buf„r
[
J
 + 
O
] = 
	`öt2uœw
 (
I
);

1716 i‡(
SoundD©a
.
echo_íabÀ
 && SoundD©a.
echo_buf„r_size
)

1718 i‡(
so
.
°îeo
)

1721 i‡(
SoundD©a
.
no_fûãr
)

1724 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1726 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1728 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1729 
EchoBuf„r
 [
J
];

1731 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1732 
SoundD©a
.
echo_±r
 = 0;

1734 
I
 = (
MixBuf„r
 [
J
] *

1735 
SoundD©a
.
ma°î_vﬁume
 [
J
 & 1] +

1736 
E
 * 
SoundD©a
.
echo_vﬁume
 [
J
 & 1]Ë/ 
VOL_DIV8
;

1737 
	`CLIP8
(
I
);

1738 
buf„r
 [
J
 + 
O
] = 
I
 + 128;

1744 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1746 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1748 
Lo›
 [(
Z
 - 0Ë& 15] = 
E
;

1749 
E
 = E * 
FûãrT≠s
 [0];

1750 
E
 +
Lo›
 [(
Z
 - 2Ë& 15] * 
FûãrT≠s
 [1];

1751 
E
 +
Lo›
 [(
Z
 - 4Ë& 15] * 
FûãrT≠s
 [2];

1752 
E
 +
Lo›
 [(
Z
 - 6Ë& 15] * 
FûãrT≠s
 [3];

1753 
E
 +
Lo›
 [(
Z
 - 8Ë& 15] * 
FûãrT≠s
 [4];

1754 
E
 +
Lo›
 [(
Z
 - 10Ë& 15] * 
FûãrT≠s
 [5];

1755 
E
 +
Lo›
 [(
Z
 - 12Ë& 15] * 
FûãrT≠s
 [6];

1756 
E
 +
Lo›
 [(
Z
 - 14Ë& 15] * 
FûãrT≠s
 [7];

1757 
E
 /= 128;

1758 
Z
++;

1760 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1761 
EchoBuf„r
 [
J
];

1763 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1764 
SoundD©a
.
echo_±r
 = 0;

1766 
I
 = (
MixBuf„r
 [
J
] *

1767 
SoundD©a
.
ma°î_vﬁume
 [
J
 & 1] +

1768 
E
 * 
SoundD©a
.
echo_vﬁume
 [
J
 & 1]Ë/ 
VOL_DIV8
;

1769 
	`CLIP8
(
I
);

1770 
buf„r
 [
J
 + 
O
] = 
I
 + 128;

1777 i‡(
SoundD©a
.
no_fûãr
)

1780 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1782 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1784 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1785 
EchoBuf„r
 [
J
];

1787 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1788 
SoundD©a
.
echo_±r
 = 0;

1790 
I
 = (
MixBuf„r
 [
J
] * 
SoundD©a
.
ma°î_vﬁume
 [0] +

1791 
E
 * 
SoundD©a
.
echo_vﬁume
 [0]Ë/ 
VOL_DIV8
;

1792 
	`CLIP8
(
I
);

1793 
buf„r
 [
J
 + 
O
] = 
I
 + 128;

1799 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1801 
E
 = 
Echo
 [
SoundD©a
.
echo_±r
];

1803 
Lo›
 [(
Z
 - 0Ë& 7] = 
E
;

1804 
E
 = E * 
FûãrT≠s
 [0];

1805 
E
 +
Lo›
 [(
Z
 - 1Ë& 7] * 
FûãrT≠s
 [1];

1806 
E
 +
Lo›
 [(
Z
 - 2Ë& 7] * 
FûãrT≠s
 [2];

1807 
E
 +
Lo›
 [(
Z
 - 3Ë& 7] * 
FûãrT≠s
 [3];

1808 
E
 +
Lo›
 [(
Z
 - 4Ë& 7] * 
FûãrT≠s
 [4];

1809 
E
 +
Lo›
 [(
Z
 - 5Ë& 7] * 
FûãrT≠s
 [5];

1810 
E
 +
Lo›
 [(
Z
 - 6Ë& 7] * 
FûãrT≠s
 [6];

1811 
E
 +
Lo›
 [(
Z
 - 7Ë& 7] * 
FûãrT≠s
 [7];

1812 
E
 /= 128;

1813 
Z
++;

1815 
Echo
 [
SoundD©a
.
echo_±r
] = (
E
 * SoundD©a.
echo_„edback
) / 128 +

1816 
EchoBuf„r
 [
J
];

1818 i‡((
SoundD©a
.
echo_±r
 +1Ë>SoundD©a.
echo_buf„r_size
)

1819 
SoundD©a
.
echo_±r
 = 0;

1821 
I
 = (
MixBuf„r
 [
J
] * 
SoundD©a
.
ma°î_vﬁume
 [0] +

1822 
E
 * 
SoundD©a
.
echo_vﬁume
 [0]Ë/ 
VOL_DIV8
;

1823 
	`CLIP8
(
I
);

1824 
buf„r
 [
J
 + 
O
] = 
I
 + 128;

1832 
J
 = 0; J < 
ßm∂e_cou¡
; J++)

1834 
I
 = (
MixBuf„r
 [
J
] *

1835 
SoundD©a
.
ma°î_vﬁume
 [
J
 & 1]Ë/ 
VOL_DIV8
;

1836 
	`CLIP8
(
I
);

1837 
buf„r
 [
J
 + 
O
] = 
I
 + 128;

1842 
	}
}

1844 #ifde‡
__DJGPP


1845 
END_OF_FUNCTION
(
S9xMixSam∂esO
);

1848 
	$S9xRe£tSound
 (
boﬁ8_32
 
fuŒ
)

1850 
i
 = 0; i < 8; i++)

1852 
SoundD©a
.
ch™√ls
[
i
].
°©e
 = 
SOUND_SILENT
;

1853 
SoundD©a
.
ch™√ls
[
i
].
mode
 = 
MODE_NONE
;

1854 
SoundD©a
.
ch™√ls
[
i
].
ty≥
 = 
SOUND_SAMPLE
;

1855 
SoundD©a
.
ch™√ls
[
i
].
vﬁume_À·
 = 0;

1856 
SoundD©a
.
ch™√ls
[
i
].
vﬁume_right
 = 0;

1857 
SoundD©a
.
ch™√ls
[
i
].
hîtz
 = 0;

1858 
SoundD©a
.
ch™√ls
[
i
].
cou¡
 = 0;

1859 
SoundD©a
.
ch™√ls
[
i
].
lo›
 = 
FALSE
;

1860 
SoundD©a
.
ch™√ls
[
i
].
ívx_èrgë
 = 0;

1861 
SoundD©a
.
ch™√ls
[
i
].
ív_îr‹
 = 0;

1862 
SoundD©a
.
ch™√ls
[
i
].
î©e
 = 0;

1863 
SoundD©a
.
ch™√ls
[
i
].
ívx
 = 0;

1864 
SoundD©a
.
ch™√ls
[
i
].
ívxx
 = 0;

1865 
SoundD©a
.
ch™√ls
[
i
].
À·_vﬁ_Àvñ
 = 0;

1866 
SoundD©a
.
ch™√ls
[
i
].
right_vﬁ_Àvñ
 = 0;

1867 
SoundD©a
.
ch™√ls
[
i
].
dúe˘i⁄
 = 0;

1868 
SoundD©a
.
ch™√ls
[
i
].
©èck_øã
 = 0;

1869 
SoundD©a
.
ch™√ls
[
i
].
deˇy_øã
 = 0;

1870 
SoundD©a
.
ch™√ls
[
i
].
su°aö_øã
 = 0;

1871 
SoundD©a
.
ch™√ls
[
i
].
ªÀa£_øã
 = 0;

1872 
SoundD©a
.
ch™√ls
[
i
].
su°aö_Àvñ
 = 0;

1873 
SoundD©a
.
echo_±r
 = 0;

1874 
SoundD©a
.
echo_„edback
 = 0;

1875 
SoundD©a
.
echo_buf„r_size
 = 1;

1877 
FûãrT≠s
 [0] = 127;

1878 
FûãrT≠s
 [1] = 0;

1879 
FûãrT≠s
 [2] = 0;

1880 
FûãrT≠s
 [3] = 0;

1881 
FûãrT≠s
 [4] = 0;

1882 
FûãrT≠s
 [5] = 0;

1883 
FûãrT≠s
 [6] = 0;

1884 
FûãrT≠s
 [7] = 0;

1885 
so
.
muã_sound
 = 
TRUE
;

1886 
so
.
noi£_gí
 = 1;

1887 
so
.
sound_swôch
 = 255;

1888 
so
.
ßm∂es_mixed_so_Ár
 = 0;

1889 
so
.
∂ay_posôi⁄
 = 0;

1890 
so
.
îr_cou¡î
 = 0;

1892 i‡(
fuŒ
)

1894 
SoundD©a
.
ma°î_vﬁume_À·
 = 0;

1895 
SoundD©a
.
ma°î_vﬁume_right
 = 0;

1896 
SoundD©a
.
echo_vﬁume_À·
 = 0;

1897 
SoundD©a
.
echo_vﬁume_right
 = 0;

1898 
SoundD©a
.
echo_íabÀ
 = 0;

1899 
SoundD©a
.
echo_wrôe_íabÀd
 = 0;

1900 
SoundD©a
.
echo_ch™√l_íabÀ
 = 0;

1901 
SoundD©a
.
pôch_mod
 = 0;

1902 
SoundD©a
.
dummy
[0] = 0;

1903 
SoundD©a
.
dummy
[1] = 0;

1904 
SoundD©a
.
dummy
[2] = 0;

1905 
SoundD©a
.
ma°î_vﬁume
[0] = 0;

1906 
SoundD©a
.
ma°î_vﬁume
[1] = 0;

1907 
SoundD©a
.
echo_vﬁume
[0] = 0;

1908 
SoundD©a
.
echo_vﬁume
[1] = 0;

1909 
SoundD©a
.
noi£_hîtz
 = 0;

1912 
SoundD©a
.
ma°î_vﬁume_À·
 = 127;

1913 
SoundD©a
.
ma°î_vﬁume_right
 = 127;

1914 
SoundD©a
.
ma°î_vﬁume
 [0] = SoundData.master_volume [1] = 127;

1915 i‡(
so
.
∂ayback_øã
)

1916 
so
.
îr_øã
 = (
uöt32
Ë(
FIXED_POINT
 * 
SNES_SCANLINE_TIME
 / (1.0 / so.
∂ayback_øã
));

1918 
so
.
îr_øã
 = 0;

1919 
SoundD©a
.
no_fûãr
 = 
TRUE
;

1920 
	}
}

1922 
	$S9xSëPœybackR©e
 (
uöt32
 
∂ayback_øã
)

1924 
so
.
∂ayback_øã
 =Ölayback_rate;

1925 
so
.
îr_øã
 = (
uöt32
Ë(
SNES_SCANLINE_TIME
 * 
FIXED_POINT
 / (1.0 / (Ëso.
∂ayback_øã
));

1926 
	`S9xSëEchoDñay
 (
APU
.
DSP
 [
APU_EDL
] & 0xf);

1927 
i
 = 0; i < 8; i++)

1928 
	`S9xSëSoundFªquícy
 (
i
, 
SoundD©a
.
ch™√ls
 [i].
hîtz
);

1929 
	}
}

1931 
boﬁ8_32
 
	$S9xInôSound
 (
mode
, 
boﬁ8_32
 
°îeo
, 
buf„r_size
)

1933 
so
.
sound_fd
 = -1;

1934 
so
.
sound_swôch
 = 255;

1936 
so
.
∂ayback_øã
 = 
mode
;

1937 
so
.
buf„r_size
 = buffer_size;

1938 
so
.
°îeo
 = 
Ál£
;

1939 
so
.
sixãí_bô
 = 
Sëtögs
.
SixãíBôSound
;

1940 
so
.
ícoded
 = 
FALSE
;

1942 
	`S9xRe£tSound
 (
TRUE
);

1947 
	`S9xSëSoundMuã
 (
TRUE
);

1948 i‡(!
	`S9xO≥nSoundDevi˚
 (
mode
, 
°îeo
, 
buf„r_size
))

1950 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_SOUND_DEVICE_OPEN_FAILED
,

1956 
	}
}

1958 
boﬁ8_32
 
	$S9xSëSoundMode
 (
ch™√l
, 
mode
)

1960 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

1962 
mode
)

1964 
MODE_RELEASE
:

1965 i‡(
ch
->
mode
 !
MODE_NONE
)

1967 
ch
->
mode
 = 
MODE_RELEASE
;

1968  (
TRUE
);

1972 
MODE_DECREASE_LINEAR
:

1973 
MODE_DECREASE_EXPONENTIAL
:

1974 
MODE_GAIN
:

1975 i‡(
ch
->
mode
 !
MODE_RELEASE
)

1977 
ch
->
mode
 = mode;

1978 i‡(
ch
->
°©e
 !
SOUND_SILENT
)

1979 
ch
->
°©e
 = 
mode
;

1981  (
TRUE
);

1985 
MODE_INCREASE_LINEAR
:

1986 
MODE_INCREASE_BENT_LINE
:

1987 i‡(
ch
->
mode
 !
MODE_RELEASE
)

1989 
ch
->
mode
 = mode;

1990 i‡(
ch
->
°©e
 !
SOUND_SILENT
)

1991 
ch
->
°©e
 = 
mode
;

1993  (
TRUE
);

1997 
MODE_ADSR
:

1998 i‡(
ch
->
mode
 =
MODE_NONE
 || ch->modê=
MODE_ADSR
)

2000 
ch
->
mode
 = mode;

2001  (
TRUE
);

2005  (
FALSE
);

2006 
	}
}

2008 
	$S9xSëSoundC⁄åﬁ
 (
sound_swôch
)

2010 
so
.
sound_swôch
 = sound_switch;

2011 
	}
}

2013 
	$S9xPœySam∂e
 (
ch™√l
)

2015 
Ch™√l
 *
ch
 = &
SoundD©a
.
ch™√ls
[
ch™√l
];

2017 
ch
->
°©e
 = 
SOUND_SILENT
;

2018 
ch
->
mode
 = 
MODE_NONE
;

2019 
ch
->
ívx
 = 0;

2020 
ch
->
ívxx
 = 0;

2022 
	`S9xFixEnvñ›e
 (
ch™√l
,

2023 
APU
.
DSP
 [
APU_GAIN
 + (
ch™√l
 << 4)],

2024 
APU
.
DSP
 [
APU_ADSR1
 + (
ch™√l
 << 4)],

2025 
APU
.
DSP
 [
APU_ADSR2
 + (
ch™√l
 << 4)]);

2027 
ch
->
ßm∂e_numbî
 = 
APU
.
DSP
 [
APU_SRCN
 + 
ch™√l
 * 0x10];

2028 i‡(
APU
.
DSP
 [
APU_NON
] & (1 << 
ch™√l
))

2029 
ch
->
ty≥
 = 
SOUND_NOISE
;

2031 
ch
->
ty≥
 = 
SOUND_SAMPLE
;

2033 
	`S9xSëSoundFªquícy
 (
ch™√l
, 
ch
->
hîtz
);

2034 
ch
->
lo›
 = 
FALSE
;

2035 
ch
->
√eds_decode
 = 
TRUE
;

2036 
ch
->
œ°_block
 = 
FALSE
;

2037 
ch
->
¥evious
 [0] = ch->previous[1] = 0;

2038 
uöt8
 *
dú
 = 
	`S9xGëSam∂eAddªss
 (
ch
->
ßm∂e_numbî
);

2039 
ch
->
block_poöãr
 = 
	`READ_WORD
 (
dú
);

2040 
ch
->
ßm∂e_poöãr
 = 0;

2041 
ch
->
ív_îr‹
 = 0;

2042 
ch
->
√xt_ßm∂e
 = 0;

2043 
ch
->
öãΩﬁ©e
 = 0;

2045 
ch
->
mode
)

2047 
MODE_ADSR
:

2048 i‡(
ch
->
©èck_øã
 == 0)

2050 i‡(
ch
->
deˇy_øã
 =0 || ch->
su°aö_Àvñ
 == 8)

2052 
ch
->
°©e
 = 
SOUND_SUSTAIN
;

2053 
ch
->
ívx
 = (
MAX_ENVELOPE_HEIGHT
 * ch->
su°aö_Àvñ
) >> 3;

2054 
	`S9xSëEnvR©e
 (
ch
, ch->
su°aö_øã
, -1, 0);

2058 
ch
->
°©e
 = 
SOUND_DECAY
;

2059 
ch
->
ívx
 = 
MAX_ENVELOPE_HEIGHT
;

2060 
	`S9xSëEnvR©e
 (
ch
, ch->
deˇy_øã
, -1,

2061 (
MAX_ENVELOPE_HEIGHT
 * 
ch
->
su°aö_Àvñ
) >> 3);

2063 
ch
-> 
À·_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_À·
) / 128;

2064 
ch
->
right_vﬁ_Àvñ
 = (ch->
ívx
 * ch->
vﬁume_right
) / 128;

2068 
ch
->
°©e
 = 
SOUND_ATTACK
;

2069 
ch
->
ívx
 = 0;

2070 
ch
->
À·_vﬁ_Àvñ
 = 0;

2071 
ch
->
right_vﬁ_Àvñ
 = 0;

2072 
	`S9xSëEnvR©e
 (
ch
, ch->
©èck_øã
, 1, 
MAX_ENVELOPE_HEIGHT
);

2074 
ch
->
ívxx
 = ch->
ívx
 << 
ENVX_SHIFT
;

2077 
MODE_GAIN
:

2078 
ch
->
°©e
 = 
SOUND_GAIN
;

2081 
MODE_INCREASE_LINEAR
:

2082 
ch
->
°©e
 = 
SOUND_INCREASE_LINEAR
;

2085 
MODE_INCREASE_BENT_LINE
:

2086 
ch
->
°©e
 = 
SOUND_INCREASE_BENT_LINE
;

2089 
MODE_DECREASE_LINEAR
:

2090 
ch
->
°©e
 = 
SOUND_DECREASE_LINEAR
;

2093 
MODE_DECREASE_EXPONENTIAL
:

2094 
ch
->
°©e
 = 
SOUND_DECREASE_EXPONENTIAL
;

2101 
	`S9xFixEnvñ›e
 (
ch™√l
,

2102 
APU
.
DSP
 [
APU_GAIN
 + (
ch™√l
 << 4)],

2103 
APU
.
DSP
 [
APU_ADSR1
 + (
ch™√l
 << 4)],

2104 
APU
.
DSP
 [
APU_ADSR2
 + (
ch™√l
 << 4)]);

2105 
	}
}

	@sounduxnew.h

41 #i‚de‡
_SOUND_H_


42 
	#_SOUND_H_


	)

44 íum { 
	mSOUND_SAMPLE
 = 0, 
	mSOUND_NOISE
, 
	mSOUND_EXTRA_NOISE
, 
	mSOUND_MUTE
 };

45 íum { 
	mSOUND_SILENT
, 
	mSOUND_ATTACK
, 
	mSOUND_DECAY
, 
	mSOUND_SUSTAIN
,

46 
	mSOUND_RELEASE
, 
	mSOUND_GAIN
, 
	mSOUND_INCREASE_LINEAR
,

47 
	mSOUND_INCREASE_BENT_LINE
, 
	mSOUND_DECREASE_LINEAR
,

48 
	mSOUND_DECREASE_EXPONENTIAL
};

50 íum { 
	mMODE_NONE
 = 
SOUND_SILENT
, 
	mMODE_ADSR
, 
	mMODE_RELEASE
 = 
SOUND_RELEASE
,

51 
	mMODE_GAIN
, 
	mMODE_INCREASE_LINEAR
, 
	mMODE_INCREASE_BENT_LINE
,

52 
	mMODE_DECREASE_LINEAR
, 
	mMODE_DECREASE_EXPONENTIAL
};

54 
	#MAX_ENVELOPE_HEIGHT
 127

	)

55 
	#ENVELOPE_SHIFT
 7

	)

56 
	#MAX_VOLUME
 127

	)

57 
	#VOLUME_SHIFT
 7

	)

58 
	#VOL_DIV
 128

	)

59 
	#SOUND_DECODE_LENGTH
 16

	)

61 
	#NUM_CHANNELS
 8

	)

62 
	#SOUND_BUFFER_SIZE
 (1024 * 16)

	)

63 
	#MAX_BUFFER_SIZE
 
SOUND_BUFFER_SIZE


	)

64 
	#SOUND_BUFFER_SIZE_MASK
 (
SOUND_BUFFER_SIZE
 - 1)

	)

66 
	#SOUND_BUFS
 4

	)

68 #ifde‡
__sgi


73 
	msound_fd
;

74 
	msound_swôch
;

75 
	m∂ayback_øã
;

76 
	mbuf„r_size
;

77 
	mnoi£_gí
;

78 
boﬁ8_32
 
	mmuã_sound
;

79 
	m°îeo
;

80 
boﬁ8_32
 
	msixãí_bô
;

81 
boﬁ8_32
 
	mícoded
;

82 #ifde‡
__sun


83 
	mœ°_eof
;

85 #ifde‡
__sgi


86 
ALp‹t
 
	mÆ_p‹t
;

88 
öt32
 
	mßm∂es_mixed_so_Ár
;

89 
öt32
 
	m∂ay_posôi⁄
;

90 
uöt32
 
	mîr_cou¡î
;

91 
uöt32
 
	mîr_øã
;

92 } 
	tSoundSètus
;

94 
EXTERN_C
 vﬁ©ûê
SoundSètus
 
	gso
;

97 
	m°©e
;

98 
	mty≥
;

99 
	mvﬁume_À·
;

100 
	mvﬁume_right
;

101 
uöt32
 
	mhîtz
;

102 
uöt32
 
	m‰equícy
;

103 
uöt32
 
	mcou¡
;

104 
boﬁ8_32
 
	mlo›
;

105 
	mívx
;

106 
	mÀ·_vﬁ_Àvñ
;

107 
	mright_vﬁ_Àvñ
;

108 
	mívx_èrgë
;

109 
	mív_îr‹
;

110 
	mî©e
;

111 
	mdúe˘i⁄
;

112 
	m©èck_øã
;

113 
	mdeˇy_øã
;

114 
	msu°aö_øã
;

115 
	mªÀa£_øã
;

116 
	msu°aö_Àvñ
;

117 sig√d 
	mßm∂e
;

118 sig√d 
	mdecoded
 [16];

119 sig√d 
	m¥evious16
 [2];

120 sig√d *
	mblock
;

121 
uöt16
 
	mßm∂e_numbî
;

122 
boﬁ8_32
 
	mœ°_block
;

123 
boﬁ8_32
 
	m√eds_decode
;

124 
uöt32
 
	mblock_poöãr
;

125 
uöt32
 
	mßm∂e_poöãr
;

126 *
	mecho_buf_±r
;

127 
	mmode
;

128 
öt32
 
	mívxx
;

129 sig√d 
	m√xt_ßm∂e
;

130 
öt32
 
	möãΩﬁ©e
;

131 
öt32
 
	m¥evious
 [2];

133 
uöt32
 
	mdummy
 [8];

134 } 
	tCh™√l
;

138 
	mma°î_vﬁume_À·
;

139 
	mma°î_vﬁume_right
;

140 
	mecho_vﬁume_À·
;

141 
	mecho_vﬁume_right
;

142 
	mecho_íabÀ
;

143 
	mecho_„edback
;

144 
	mecho_±r
;

145 
	mecho_buf„r_size
;

146 
	mecho_wrôe_íabÀd
;

147 
	mecho_ch™√l_íabÀ
;

148 
	mpôch_mod
;

150 
uöt32
 
	mdummy
 [3];

151 
Ch™√l
 
	mch™√ls
 [
NUM_CHANNELS
];

152 
boﬁ8_32
 
	mno_fûãr
;

153 
	mma°î_vﬁume
 [2];

154 
	mecho_vﬁume
 [2];

155 
	mnoi£_hîtz
;

156 } 
	tSSoundD©a
;

158 
EXTERN_C
 
SSoundD©a
 
	gSoundD©a
;

160 
S9xSëSoundVﬁume
 (
ch™√l
, 
vﬁume_À·
, 
vﬁume_right
);

161 
S9xSëSoundFªquícy
 (
ch™√l
, 
hîtz
);

162 
S9xSëSoundHîtz
 (
ch™√l
, 
hîtz
);

163 
S9xSëSoundTy≥
 (
ch™√l
, 
ty≥_of_sound
);

164 
S9xSëMa°îVﬁume
 (
ma°î_vﬁume_À·
, 
ma°î_vﬁume_right
);

165 
S9xSëEchoVﬁume
 (
echo_vﬁume_À·
, 
echo_vﬁume_right
);

166 
S9xSëSoundC⁄åﬁ
 (
sound_swôch
);

167 
boﬁ8_32
 
S9xSëSoundMuã
 (boﬁ8_32 
muã
);

168 
S9xSëEnvñ›eHeight
 (
ch™√l
, 
height
);

169 
S9xSëSoundADSR
 (
ch™√l
, 
©èck
, 
deˇy
, 
su°aö
,

170 
su°aö_Àvñ
, 
ªÀa£
);

171 
S9xSëSoundKeyOff
 (
ch™√l
);

172 
S9xSëSoundDeˇyMode
 (
ch™√l
);

173 
S9xSëSoundAâachMode
 (
ch™√l
);

174 
S9xSoundSèπEnvñ›e
 (
Ch™√l
 *);

175 
S9xSëSoundSam∂e
 (
ch™√l
, 
uöt16
 
ßm∂e_numbî
);

176 
S9xSëEchoFìdback
 (
echo_„edback
);

177 
S9xSëEchoE«bÀ
 (
uöt8
 
byã
);

178 
S9xSëEchoDñay
 (
byã
);

179 
S9xSëEchoWrôeE«bÀ
 (
uöt8
 
byã
);

180 
S9xSëFûãrC€fficõ¡
 (
èp
, 
vÆue
);

181 
S9xSëFªquícyModuœti⁄E«bÀ
 (
uöt8
 
byã
);

182 
S9xSëEnvñ›eR©e
 (
ch™√l
, 
øã
, 
dúe˘i⁄
,

183 
èrgë
);

184 
boﬁ8_32
 
S9xSëSoundMode
 (
ch™√l
, 
mode
);

185 
S9xGëEnvñ›eHeight
 (
ch™√l
);

186 
S9xRe£tSound
 (
boﬁ8_32
 
fuŒ
);

187 
S9xFixSoundA·îS«pshŸLﬂd
 ();

188 
S9xPœybackSoundSëtög
 (
ch™√l
);

189 
S9xPœySam∂e
 (
ch™√l
);

190 
S9xFixEnvñ›e
 (
ch™√l
, 
uöt8
 
gaö
, uöt8 
ad§1
, uöt8 
ad§2
);

191 
S9xSèπSam∂e
 (
ch™√l
);

193 
EXTERN_C
 
S9xMixSam∂es
 (
uöt8
 *
buf„r
, 
ßm∂e_cou¡
);

194 
EXTERN_C
 
S9xMixSam∂esO
 (
uöt8
 *
buf„r
, 
ßm∂e_cou¡
, 
byã_off£t
);

195 
boﬁ8_32
 
S9xO≥nSoundDevi˚
 (, bool8_32, );

196 
S9xSëPœybackR©e
 (
uöt32
 
øã
);

	@spc700.cpp

41 
	~"¢es9x.h
"

42 
	~"memm≠.h
"

43 
	~"di•œy.h
"

44 
	~"˝uexec.h
"

45 
	~"≠u.h
"

46 
	~"•c700.h
"

50 #i‡
deföed
(
ASM_SPC700
)

53 #unde‡
INLINE


54 
	#INLINE
 "C"

	)

55 
	~"≠umem.h
"

59 #i‡
deföed
(
NO_INLINE_SET_GET
)

60 
uöt8
 
S9xAPUGëByãZ
 (uöt8 
addªss
);

61 
uöt8
 
S9xAPUGëByã
 (
uöt32
 
addªss
);

62 
S9xAPUSëByãZ
 (
uöt8
, uöt8 
addªss
);

63 
S9xAPUSëByã
 (
uöt8
, 
uöt32
 
addªss
);

65 #unde‡
INLINE


66 
	#INLINE
 
ölöe


	)

67 
	~"≠umem.h
"

70 
START_EXTERN_C


71 
uöt8
 
W‹k8
;

72 
uöt16
 
W‹k16
;

73 
uöt32
 
W‹k32
;

74 sig√d 
I¡8
;

75 
I¡16
;

76 
I¡32
;

77 
I¡16
;

78 
uöt8
 
W1
;

79 
uöt8
 
W2
;

81 
	gEND_EXTERN_C


83 
	#OP1
 (*(
IAPU
.
PC
 + 1))

	)

84 
	#OP2
 (*(
IAPU
.
PC
 + 2))

	)

86 #ifde‡
SPC700_SHUTDOWN


87 
	#APUShutdown
(Ë\

	)

88 i‡(
	gSëtögs
.
	gShutdown
 && (
	gIAPU
.
	gPC
 =
IAPU
.
WaôAddªss1
 || IAPU.
PC
 =IAPU.
WaôAddªss2
)) \

90 i‡(
IAPU
.
WaôCou¡î
 == 0) \

92 i‡(!
ICPU
.
CPUExecutög
) \

93 
CPU
.
APU_Cy˛es
 = CPU.
Cy˛es
 = CPU.
NextEvít
; \

95 
	gCPU
.
	gAPU_APUExecutög
 = 
FALSE
; \

98 i‡(
	gIAPU
.
	gWaôCou¡î
 >= 2) \

99 
IAPU
.
WaôCou¡î
 = 1; \

101 
	gIAPU
.
	gWaôCou¡î
--; \

104 
	#APUShutdown
()

	)

107 
	#APUSëZN8
(
b
)\

	)

108 
	gIAPU
.
	g_Zîo
 = (
b
);

110 
	#APUSëZN16
(
w
)\

	)

111 
	gIAPU
.
	g_Zîo
 = ((
w
) != 0) | ((w) >> 8);

113 
	$STOP
 (*
s
)

115 
buf„r
[100];

117 #ifde‡
DEBUGGER


118 
	`S9xAPUOPröt
 (
buf„r
, 
IAPU
.
PC
 - IAPU.
RAM
);

121 
	`•rötf
 (
Såög
, "Sound CPU i¿unknow¿°©êexecutög %†© %04lX\n%s\n", 
s
, 
IAPU
.
PC
 - IAPU.
RAM
, 
buf„r
);

122 
	`S9xMesßge
 (
S9X_ERROR
, 
S9X_APU_STOPPED
, 
Såög
);

123 
APU
.
TimîE«bÀd
[0] = APU.TimîE«bÀd[1] = APU.TimîE«bÀd[2] = 
FALSE
;

124 
CPU
.
APU_APUExecutög
 = 
FALSE
;

126 #ifde‡
DEBUGGER


127 
CPU
.
Fœgs
 |
DEBUG_MODE_FLAG
;

129 
	`S9xExô
 ();

131 
	}
}

133 
	#TCALL
(
n
)\

	)

135 
PushW
 ((
IAPU
.
PC
 - IAPU.
RAM
 + 1)); \

136 
	gIAPU
.
	gPC
 = 
IAPU
.
RAM
 + (
APU
.
ExåaRAM
 [((15 - 
n
) << 1)] + \

137 (
APU
.
ExåaRAM
 [((15 - 
n
) << 1) + 1] << 8)); \

141 
	#SBC
(
a
,
b
)\

	)

142 
	gI¡16
 = (Ë(
a
Ë- (Ë(
b
Ë+ (Ë(
APUCheckC¨ry
 ()) - 1;\

143 
	gIAPU
.
	g_C¨ry
 = 
I¡16
 >= 0;\

144 i‡((((
	ga
Ë^ (
	gb
)Ë& 0x80Ë&& ((◊Ë^ (
	guöt8
Ë
	gI¡16
) & 0x80))\

145 
APUSëOvîÊow
 ();\

147 
APUCÀ¨OvîÊow
 (); \

148 
APUSëHÆfC¨ry
 ();\

149 if(((
	ga
Ë^ (
	gb
Ë^ (
	guöt8
Ë
	gI¡16
) & 0x10)\

150 
APUCÀ¨HÆfC¨ry
 ();\

151 (
	ga
Ë(
uöt8
Ë
I¡16
;\

152 
APUSëZN8
 ((
uöt8
Ë
I¡16
);

155 
	#ADC
(
a
,
b
)\

	)

156 
	gW‹k16
 = (
a
Ë+ (
b
Ë+ 
APUCheckC¨ry
();\

157 
	gIAPU
.
	g_C¨ry
 = 
W‹k16
 >= 0x100; \

158 i‡(~((
	ga
Ë^ (
	gb
)Ë& ((bË^ (
	guöt8
Ë
	gW‹k16
) & 0x80)\

159 
APUSëOvîÊow
 ();\

161 
APUCÀ¨OvîÊow
 (); \

162 
APUCÀ¨HÆfC¨ry
 ();\

164 if(((
	ga
Ë^ (
	gb
Ë^ (
	guöt8
Ë
	gW‹k16
) & 0x10)\

165 
APUSëHÆfC¨ry
 ();\

166 (
	ga
Ë(
uöt8
Ë
W‹k16
;\

167 
APUSëZN8
 ((
uöt8
Ë
W‹k16
);

169 
	#CMP
(
a
,
b
)\

	)

170 
	gI¡16
 = (Ë(
a
Ë- (Ë(
b
);\

171 
	gIAPU
.
	g_C¨ry
 = 
I¡16
 >= 0;\

172 
APUSëZN8
 ((
uöt8
Ë
I¡16
);

174 
	#ASL
(
b
)\

	)

175 
	gIAPU
.
	g_C¨ry
 = ((
b
) & 0x80) != 0; \

176 (
	gb
) <<= 1;\

177 
APUSëZN8
 (
b
);

178 
	#LSR
(
b
)\

	)

179 
	gIAPU
.
	g_C¨ry
 = (
b
) & 1;\

180 (
	gb
) >>= 1;\

181 
APUSëZN8
 (
b
);

182 
	#ROL
(
b
)\

	)

183 
	gW‹k16
 = ((
b
Ë<< 1Ë| 
APUCheckC¨ry
 (); \

184 
	gIAPU
.
	g_C¨ry
 = 
W‹k16
 >= 0x100; \

185 (
	gb
Ë(
uöt8
Ë
W‹k16
; \

186 
APUSëZN8
 (
b
);

187 
	#ROR
(
b
)\

	)

188 
	gW‹k16
 = (
b
Ë| ((
uöt16
Ë
APUCheckC¨ry
 () << 8); \

189 
	gIAPU
.
	g_C¨ry
 = (
uöt8
Ë
W‹k16
 & 1; \

190 
	gW‹k16
 >>= 1; \

191 (
	gb
Ë(
uöt8
Ë
W‹k16
; \

192 
APUSëZN8
 (
b
);

194 
	#Push
(
b
)\

	)

195 *(
	gIAPU
.
	gRAM
 + 0x100 + IAPU.
	gS
Ë
b
;\

196 
	gIAPU
.
	gS
--;

198 
	#P›
(
b
)\

	)

199 
	gIAPU
.
	gS
++;\

200 (
	gb
Ë*(
IAPU
.
RAM
 + 0x100 + IAPU.
S
);

202 #ifde‡
FAST_LSB_WORD_ACCESS


203 
	#PushW
(
w
)\

	)

204 *(
	guöt16
 *Ë(
	gIAPU
.
	gRAM
 + 0xf‡+ IAPU.
	gS
Ë
w
;\

205 
	gIAPU
.
	gS
 -= 2;

206 
	#P›W
(
w
)\

	)

207 
	gIAPU
.
	gS
 += 2;\

208 
	gw
 = *(
uöt16
 *Ë(
IAPU
.
RAM
 + 0xf‡+ IAPU.
S
);

210 
	#PushW
(
w
)\

	)

211 *(
	gIAPU
.
	gRAM
 + 0xf‡+ IAPU.
	gS
Ë
w
;\

212 *(
	gIAPU
.
	gRAM
 + 0x100 + IAPU.
	gS
Ë(
w
 >> 8);\

213 
	gIAPU
.
	gS
 -= 2;

214 
	#P›W
(
w
)\

	)

215 
	gIAPU
.
	gS
 += 2; \

216 (
	gw
Ë*(
IAPU
.
RAM
 + 0xf‡+ IAPU.
S
) + (*(IAPU.RAM + 0x100 + IAPU.S) << 8);

219 
	#Rñ©ive
()\

	)

220 
	gI¡8
 = 
OP1
;\

221 
	gI¡16
 = (Ë(
IAPU
.
PC
 + 2 - IAPU.
RAM
Ë+ 
I¡8
;

223 
	#Rñ©ive2
()\

	)

224 
	gI¡8
 = 
OP2
;\

225 
	gI¡16
 = (Ë(
IAPU
.
PC
 + 3 - IAPU.
RAM
Ë+ 
I¡8
;

227 #ifde‡
FAST_LSB_WORD_ACCESS


228 
	#IndexedXIndúe˘
()\

	)

229 
	gIAPU
.
	gAddªss
 = *(
uöt16
 *Ë(
IAPU
.
Dúe˘Page
 + ((
OP1
 + IAPU.
X
) & 0xff));

231 
	#Absﬁuã
()\

	)

232 
	gIAPU
.
	gAddªss
 = *(
uöt16
 *Ë(
IAPU
.
PC
 + 1);

234 
	#AbsﬁuãX
()\

	)

235 
	gIAPU
.
	gAddªss
 = *(
uöt16
 *Ë(
IAPU
.
PC
 + 1Ë+ IAPU.
X
;

237 
	#AbsﬁuãY
()\

	)

238 
	gIAPU
.
	gAddªss
 = *(
uöt16
 *Ë(
IAPU
.
PC
 + 1Ë+ IAPU.
YA
.
B
.
Y
;

240 
	#MemBô
()\

	)

241 
	gIAPU
.
	gAddªss
 = *(
uöt16
 *Ë(
IAPU
.
PC
 + 1);\

242 
	gIAPU
.
	gBô
 = (
uöt8
)(
IAPU
.
Addªss
 >> 13);\

243 
	gIAPU
.
	gAddªss
 &= 0x1fff;

245 
	#Indúe˘IndexedY
()\

	)

246 
	gIAPU
.
	gAddªss
 = *(
uöt16
 *Ë(
IAPU
.
Dúe˘Page
 + 
OP1
Ë+ IAPU.
YA
.
B
.
Y
;

248 
	#IndexedXIndúe˘
()\

	)

249 
	gIAPU
.
	gAddªss
 = *(
IAPU
.
Dúe˘Page
 + ((
OP1
 + IAPU.
X
) & 0xff)) + \

250 (*(
IAPU
.
Dúe˘Page
 + ((
OP1
 + IAPU.
X
 + 1) & 0xff)) << 8);

251 
	#Absﬁuã
()\

	)

252 
	gIAPU
.
	gAddªss
 = 
OP1
 + (
OP2
 << 8);

254 
	#AbsﬁuãX
()\

	)

255 
	gIAPU
.
	gAddªss
 = 
OP1
 + (
OP2
 << 8Ë+ 
IAPU
.
X
;

257 
	#AbsﬁuãY
()\

	)

258 
	gIAPU
.
	gAddªss
 = 
OP1
 + (
OP2
 << 8Ë+ 
IAPU
.
YA
.
B
.
Y
;

260 
	#MemBô
()\

	)

261 
	gIAPU
.
	gAddªss
 = 
OP1
 + (
OP2
 << 8);\

262 
	gIAPU
.
	gBô
 = (
öt8
Ë(
IAPU
.
Addªss
 >> 13);\

263 
	gIAPU
.
	gAddªss
 &= 0x1fff;

265 
	#Indúe˘IndexedY
()\

	)

266 
	gIAPU
.
	gAddªss
 = *(
IAPU
.
Dúe˘Page
 + 
OP1
) + \

267 (*(
IAPU
.
Dúe˘Page
 + 
OP1
 + 1) << 8) + \

268 
IAPU
.
YA
.
B
.
Y
;

271 
	$Apu00
 ()

274 
IAPU
.
PC
++;

275 
	}
}

277 
	$Apu01
 (Ë{ 
	`TCALL
 (0Ë
	}
}

279 
	$Apu11
 (Ë{ 
	`TCALL
 (1Ë
	}
}

281 
	$Apu21
 (Ë{ 
	`TCALL
 (2Ë
	}
}

283 
	$Apu31
 (Ë{ 
	`TCALL
 (3Ë
	}
}

285 
	$Apu41
 (Ë{ 
	`TCALL
 (4Ë
	}
}

287 
	$Apu51
 (Ë{ 
	`TCALL
 (5Ë
	}
}

289 
	$Apu61
 (Ë{ 
	`TCALL
 (6Ë
	}
}

291 
	$Apu71
 (Ë{ 
	`TCALL
 (7Ë
	}
}

293 
	$Apu81
 (Ë{ 
	`TCALL
 (8Ë
	}
}

295 
	$Apu91
 (Ë{ 
	`TCALL
 (9Ë
	}
}

297 
	$ApuA1
 (Ë{ 
	`TCALL
 (10Ë
	}
}

299 
	$ApuB1
 (Ë{ 
	`TCALL
 (11Ë
	}
}

301 
	$ApuC1
 (Ë{ 
	`TCALL
 (12Ë
	}
}

303 
	$ApuD1
 (Ë{ 
	`TCALL
 (13Ë
	}
}

305 
	$ApuE1
 (Ë{ 
	`TCALL
 (14Ë
	}
}

307 
	$ApuF1
 (Ë{ 
	`TCALL
 (15Ë
	}
}

309 
	$Apu3F
 ()

311 
	`Absﬁuã
 ();

313 
	`PushW
 ((
IAPU
.
PC
 + 3 - IAPU.
RAM
));

314 
IAPU
.
PC
 = IAPU.
RAM
 + IAPU.
Addªss
;

315 
	}
}

317 
	$Apu4F
 ()

319 
W‹k8
 = 
OP1
;

320 
	`PushW
 ((
IAPU
.
PC
 + 2 - IAPU.
RAM
));

321 
IAPU
.
PC
 = IAPU.
RAM
 + 0xff00 + 
W‹k8
;

322 
	}
}

324 
	#SET
(
b
Ë\

	)

325 
S9xAPUSëByãZ
 ((
uöt8
Ë(
S9xAPUGëByãZ
 (
OP1
 ) | (1 << (
b
))), OP1); \

326 
	gIAPU
.
	gPC
 += 2

328 
	$Apu02
 ()

330 
	`SET
 (0);

331 
	}
}

333 
	$Apu22
 ()

335 
	`SET
 (1);

336 
	}
}

338 
	$Apu42
 ()

340 
	`SET
 (2);

341 
	}
}

343 
	$Apu62
 ()

345 
	`SET
 (3);

346 
	}
}

348 
	$Apu82
 ()

350 
	`SET
 (4);

351 
	}
}

353 
	$ApuA2
 ()

355 
	`SET
 (5);

356 
	}
}

358 
	$ApuC2
 ()

360 
	`SET
 (6);

361 
	}
}

363 
	$ApuE2
 ()

365 
	`SET
 (7);

366 
	}
}

368 
	#CLR
(
b
Ë\

	)

369 
S9xAPUSëByãZ
 ((
uöt8
Ë(
S9xAPUGëByãZ
 (
OP1
Ë& ~(1 << (
b
))), OP1); \

370 
	gIAPU
.
	gPC
 += 2;

372 
	$Apu12
 ()

374 
	`CLR
 (0);

375 
	}
}

377 
	$Apu32
 ()

379 
	`CLR
 (1);

380 
	}
}

382 
	$Apu52
 ()

384 
	`CLR
 (2);

385 
	}
}

387 
	$Apu72
 ()

389 
	`CLR
 (3);

390 
	}
}

392 
	$Apu92
 ()

394 
	`CLR
 (4);

395 
	}
}

397 
	$ApuB2
 ()

399 
	`CLR
 (5);

400 
	}
}

402 
	$ApuD2
 ()

404 
	`CLR
 (6);

405 
	}
}

407 
	$ApuF2
 ()

409 
	`CLR
 (7);

410 
	}
}

412 
	#BBS
(
b
Ë\

	)

413 
	gW‹k8
 = 
OP1
; \

414 
Rñ©ive2
 (); \

415 i‡(
S9xAPUGëByãZ
 (
W‹k8
Ë& (1 << (
	gb
))) \

417 
	gIAPU
.
	gPC
 = 
IAPU
.
RAM
 + (
uöt16
Ë
I¡16
; \

418 
	gCPU
.
	gAPU_Cy˛es
 +
IAPU
.
TwoCy˛es
; \

421 
	gIAPU
.
	gPC
 += 3

423 
	$Apu03
 ()

425 
	`BBS
 (0);

426 
	}
}

428 
	$Apu23
 ()

430 
	`BBS
 (1);

431 
	}
}

433 
	$Apu43
 ()

435 
	`BBS
 (2);

436 
	}
}

438 
	$Apu63
 ()

440 
	`BBS
 (3);

441 
	}
}

443 
	$Apu83
 ()

445 
	`BBS
 (4);

446 
	}
}

448 
	$ApuA3
 ()

450 
	`BBS
 (5);

451 
	}
}

453 
	$ApuC3
 ()

455 
	`BBS
 (6);

456 
	}
}

458 
	$ApuE3
 ()

460 
	`BBS
 (7);

461 
	}
}

463 
	#BBC
(
b
Ë\

	)

464 
	gW‹k8
 = 
OP1
; \

465 
Rñ©ive2
 (); \

466 i‡(!(
S9xAPUGëByãZ
 (
W‹k8
Ë& (1 << (
	gb
)))) \

468 
	gIAPU
.
	gPC
 = 
IAPU
.
RAM
 + (
uöt16
Ë
I¡16
; \

469 
	gCPU
.
	gAPU_Cy˛es
 +
IAPU
.
TwoCy˛es
; \

472 
	gIAPU
.
	gPC
 += 3

474 
	$Apu13
 ()

476 
	`BBC
 (0);

477 
	}
}

479 
	$Apu33
 ()

481 
	`BBC
 (1);

482 
	}
}

484 
	$Apu53
 ()

486 
	`BBC
 (2);

487 
	}
}

489 
	$Apu73
 ()

491 
	`BBC
 (3);

492 
	}
}

494 
	$Apu93
 ()

496 
	`BBC
 (4);

497 
	}
}

499 
	$ApuB3
 ()

501 
	`BBC
 (5);

502 
	}
}

504 
	$ApuD3
 ()

506 
	`BBC
 (6);

507 
	}
}

509 
	$ApuF3
 ()

511 
	`BBC
 (7);

512 
	}
}

514 
	$Apu04
 ()

517 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByãZ
 (
OP1
);

518 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

519 
IAPU
.
PC
 += 2;

520 
	}
}

522 
	$Apu05
 ()

525 
	`Absﬁuã
 ();

526 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByã
 (IAPU.
Addªss
);

527 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

528 
IAPU
.
PC
 += 3;

529 
	}
}

531 
	$Apu06
 ()

534 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByãZ
 (IAPU.
X
);

535 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

536 
IAPU
.
PC
++;

537 
	}
}

539 
	$Apu07
 ()

542 
	`IndexedXIndúe˘
 ();

543 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByã
 (IAPU.
Addªss
);

544 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

545 
IAPU
.
PC
 += 2;

546 
	}
}

548 
	$Apu08
 ()

551 
IAPU
.
YA
.
B
.
A
 |
OP1
;

552 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

553 
IAPU
.
PC
 += 2;

554 
	}
}

556 
	$Apu09
 ()

559 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

560 
W‹k8
 |
	`S9xAPUGëByãZ
 (
OP2
);

561 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

562 
	`APUSëZN8
 (
W‹k8
);

563 
IAPU
.
PC
 += 3;

564 
	}
}

566 
	$Apu14
 ()

569 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByãZ
 (
OP1
 + IAPU.
X
);

570 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

571 
IAPU
.
PC
 += 2;

572 
	}
}

574 
	$Apu15
 ()

577 
	`AbsﬁuãX
 ();

578 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByã
 (IAPU.
Addªss
);

579 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

580 
IAPU
.
PC
 += 3;

581 
	}
}

583 
	$Apu16
 ()

586 
	`AbsﬁuãY
 ();

587 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByã
 (IAPU.
Addªss
);

588 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

589 
IAPU
.
PC
 += 3;

590 
	}
}

592 
	$Apu17
 ()

595 
	`Indúe˘IndexedY
 ();

596 
IAPU
.
YA
.
B
.
A
 |
	`S9xAPUGëByã
 (IAPU.
Addªss
);

597 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

598 
IAPU
.
PC
 += 2;

599 
	}
}

601 
	$Apu18
 ()

604 
W‹k8
 = 
OP1
;

605 
W‹k8
 |
	`S9xAPUGëByãZ
 (
OP2
);

606 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

607 
	`APUSëZN8
 (
W‹k8
);

608 
IAPU
.
PC
 += 3;

609 
	}
}

611 
	$Apu19
 ()

614 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
Ë| S9xAPUGëByãZ (IAPU.
YA
.
B
.
Y
);

615 
	`APUSëZN8
 (
W‹k8
);

616 
	`S9xAPUSëByãZ
 (
W‹k8
, 
IAPU
.
X
);

617 
IAPU
.
PC
++;

618 
	}
}

620 
	$Apu0A
 ()

623 
	`MemBô
 ();

624 i‡(!
	`APUCheckC¨ry
 ())

626 i‡(
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
))

627 
	`APUSëC¨ry
 ();

629 
IAPU
.
PC
 += 3;

630 
	}
}

632 
	$Apu2A
 ()

635 
	`MemBô
 ();

636 i‡(!
	`APUCheckC¨ry
 ())

638 i‡(!(
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
)))

639 
	`APUSëC¨ry
 ();

641 
IAPU
.
PC
 += 3;

642 
	}
}

644 
	$Apu4A
 ()

647 
	`MemBô
 ();

648 i‡(
	`APUCheckC¨ry
 ())

650 i‡(!(
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
)))

651 
	`APUCÀ¨C¨ry
 ();

653 
IAPU
.
PC
 += 3;

654 
	}
}

656 
	$Apu6A
 ()

659 
	`MemBô
 ();

660 i‡(
	`APUCheckC¨ry
 ())

662 i‡((
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
)))

663 
	`APUCÀ¨C¨ry
 ();

665 
IAPU
.
PC
 += 3;

666 
	}
}

668 
	$Apu8A
 ()

671 
	`MemBô
 ();

672 i‡(
	`APUCheckC¨ry
 ())

674 i‡(
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
))

675 
	`APUCÀ¨C¨ry
 ();

679 i‡(
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
))

680 
	`APUSëC¨ry
 ();

682 
IAPU
.
PC
 += 3;

683 
	}
}

685 
	$ApuAA
 ()

688 
	`MemBô
 ();

689 i‡(
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& (1 << IAPU.
Bô
))

690 
	`APUSëC¨ry
 ();

692 
	`APUCÀ¨C¨ry
 ();

693 
IAPU
.
PC
 += 3;

694 
	}
}

696 
	$ApuCA
 ()

699 
	`MemBô
 ();

700 i‡(
	`APUCheckC¨ry
 ())

702 
	`S9xAPUSëByã
 (
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë| (1 << IAPU.
Bô
), IAPU.Address);

706 
	`S9xAPUSëByã
 (
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë& ~(1 << IAPU.
Bô
), IAPU.Address);

708 
IAPU
.
PC
 += 3;

709 
	}
}

711 
	$ApuEA
 ()

714 
	`MemBô
 ();

715 
	`S9xAPUSëByã
 (
	`S9xAPUGëByã
 (
IAPU
.
Addªss
Ë^ (1 << IAPU.
Bô
), IAPU.Address);

716 
IAPU
.
PC
 += 3;

717 
	}
}

719 
	$Apu0B
 ()

722 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

723 
	`ASL
 (
W‹k8
);

724 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
);

725 
IAPU
.
PC
 += 2;

726 
	}
}

728 
	$Apu0C
 ()

731 
	`Absﬁuã
 ();

732 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

733 
	`ASL
 (
W‹k8
);

734 
	`S9xAPUSëByã
 (
W‹k8
, 
IAPU
.
Addªss
);

735 
IAPU
.
PC
 += 3;

736 
	}
}

738 
	$Apu1B
 ()

741 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

742 
	`ASL
 (
W‹k8
);

743 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
 + 
IAPU
.
X
);

744 
IAPU
.
PC
 += 2;

745 
	}
}

747 
	$Apu1C
 ()

750 
	`ASL
 (
IAPU
.
YA
.
B
.
A
);

751 
IAPU
.
PC
++;

752 
	}
}

754 
	$Apu0D
 ()

757 
	`S9xAPUPackSètus
 ();

758 
	`Push
 (
IAPU
.
P
);

759 
IAPU
.
PC
++;

760 
	}
}

762 
	$Apu2D
 ()

765 
	`Push
 (
IAPU
.
YA
.
B
.
A
);

766 
IAPU
.
PC
++;

767 
	}
}

769 
	$Apu4D
 ()

772 
	`Push
 (
IAPU
.
X
);

773 
IAPU
.
PC
++;

774 
	}
}

776 
	$Apu6D
 ()

779 
	`Push
 (
IAPU
.
YA
.
B
.
Y
);

780 
IAPU
.
PC
++;

781 
	}
}

783 
	$Apu8E
 ()

786 
	`P›
 (
IAPU
.
P
);

787 
	`S9xAPUU≈ackSètus
 ();

788 i‡(
	`APUCheckDúe˘Page
 ())

789 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
 + 0x100;

791 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
;

792 
IAPU
.
PC
++;

793 
	}
}

795 
	$ApuAE
 ()

798 
	`P›
 (
IAPU
.
YA
.
B
.
A
);

799 
IAPU
.
PC
++;

800 
	}
}

802 
	$ApuCE
 ()

805 
	`P›
 (
IAPU
.
X
);

806 
IAPU
.
PC
++;

807 
	}
}

809 
	$ApuEE
 ()

812 
	`P›
 (
IAPU
.
YA
.
B
.
Y
);

813 
IAPU
.
PC
++;

814 
	}
}

816 
	$Apu0E
 ()

819 
	`Absﬁuã
 ();

820 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

821 
	`S9xAPUSëByã
 (
W‹k8
 | 
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

822 
W‹k8
 &
IAPU
.
YA
.
B
.
A
;

823 
	`APUSëZN8
 (
W‹k8
);

824 
IAPU
.
PC
 += 3;

825 
	}
}

827 
	$Apu4E
 ()

830 
	`Absﬁuã
 ();

831 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

832 
	`S9xAPUSëByã
 (
W‹k8
 & ~
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

833 
W‹k8
 &
IAPU
.
YA
.
B
.
A
;

834 
	`APUSëZN8
 (
W‹k8
);

835 
IAPU
.
PC
 += 3;

836 
	}
}

838 
	$Apu0F
 ()

843 
	`STOP
 ("BRK");

845 
	`PushW
 ((
IAPU
.
PC
 + 1 - IAPU.
RAM
));

846 
	`S9xAPUPackSètus
 ();

847 
	`Push
 (
IAPU
.
P
);

848 
	`APUSëBªak
 ();

849 
	`APUCÀ¨I¡îru±
 ();

851 
IAPU
.
PC
 = IAPU.
RAM
 + 
APU
.
ExåaRAM
[0x20] + (APU.ExtraRAM[0x21] << 8);

853 
	}
}

855 
	$ApuEF
 ()

860 
CPU
.
APU_APUExecutög
 = 
FALSE
;

861 
IAPU
.
PC
++;

862 
	}
}

864 
	$ApuFF
 ()

868 
CPU
.
APU_APUExecutög
 = 
FALSE
;

869 
IAPU
.
PC
++;

870 
	}
}

872 
	$Apu10
 ()

875 
	`Rñ©ive
 ();

876 i‡(!
	`APUCheckNeg©ive
 ())

878 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

879 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

880 
	`APUShutdown
 ();

883 
IAPU
.
PC
 += 2;

884 
	}
}

886 
	$Apu30
 ()

889 
	`Rñ©ive
 ();

890 i‡(
	`APUCheckNeg©ive
 ())

892 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

893 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

894 
	`APUShutdown
 ();

897 
IAPU
.
PC
 += 2;

898 
	}
}

900 
	$Apu90
 ()

903 
	`Rñ©ive
 ();

904 i‡(!
	`APUCheckC¨ry
 ())

906 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

907 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

908 
	`APUShutdown
 ();

911 
IAPU
.
PC
 += 2;

912 
	}
}

914 
	$ApuB0
 ()

917 
	`Rñ©ive
 ();

918 i‡(
	`APUCheckC¨ry
 ())

920 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

921 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

922 
	`APUShutdown
 ();

925 
IAPU
.
PC
 += 2;

926 
	}
}

928 
	$ApuD0
 ()

931 
	`Rñ©ive
 ();

932 i‡(!
	`APUCheckZîo
 ())

934 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

935 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

936 
	`APUShutdown
 ();

939 
IAPU
.
PC
 += 2;

940 
	}
}

942 
	$ApuF0
 ()

945 
	`Rñ©ive
 ();

946 i‡(
	`APUCheckZîo
 ())

948 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

949 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

950 
	`APUShutdown
 ();

953 
IAPU
.
PC
 += 2;

954 
	}
}

956 
	$Apu50
 ()

959 
	`Rñ©ive
 ();

960 i‡(!
	`APUCheckOvîÊow
 ())

962 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

963 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

966 
IAPU
.
PC
 += 2;

967 
	}
}

969 
	$Apu70
 ()

972 
	`Rñ©ive
 ();

973 i‡(
	`APUCheckOvîÊow
 ())

975 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

976 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

979 
IAPU
.
PC
 += 2;

980 
	}
}

982 
	$Apu2F
 ()

985 
	`Rñ©ive
 ();

986 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

987 
	}
}

989 
	$Apu80
 ()

992 
	`APUSëC¨ry
 ();

993 
IAPU
.
PC
++;

994 
	}
}

996 
	$ApuED
 ()

999 
IAPU
.
_C¨ry
 ^= 1;

1000 
IAPU
.
PC
++;

1001 
	}
}

1003 
	$Apu40
 ()

1006 
	`APUSëDúe˘Page
 ();

1007 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
 + 0x100;

1008 
IAPU
.
PC
++;

1009 
	}
}

1011 
	$Apu1A
 ()

1014 
W‹k16
 = 
	`S9xAPUGëByãZ
 (
OP1
) + (S9xAPUGetByteZ (OP1 + 1) << 8);

1015 
W‹k16
--;

1016 
	`S9xAPUSëByãZ
 ((
uöt8
Ë
W‹k16
, 
OP1
);

1017 
	`S9xAPUSëByãZ
 (
W‹k16
 >> 8, 
OP1
 + 1);

1018 
	`APUSëZN16
 (
W‹k16
);

1019 
IAPU
.
PC
 += 2;

1020 
	}
}

1022 
	$Apu5A
 ()

1025 
W‹k16
 = 
	`S9xAPUGëByãZ
 (
OP1
) + (S9xAPUGetByteZ (OP1 + 1) << 8);

1026 
I¡32
 = (Ë
IAPU
.
YA
.
W
 - (Ë
W‹k16
;

1027 
IAPU
.
_C¨ry
 = 
I¡32
 >= 0;

1028 
	`APUSëZN16
 ((
uöt16
Ë
I¡32
);

1029 
IAPU
.
PC
 += 2;

1030 
	}
}

1032 
	$Apu3A
 ()

1035 
W‹k16
 = 
	`S9xAPUGëByãZ
 (
OP1
) + (S9xAPUGetByteZ (OP1 + 1) << 8);

1036 
W‹k16
++;

1037 
	`S9xAPUSëByãZ
 ((
uöt8
Ë
W‹k16
, 
OP1
);

1038 
	`S9xAPUSëByãZ
 (
W‹k16
 >> 8, 
OP1
 + 1);

1039 
	`APUSëZN16
 (
W‹k16
);

1040 
IAPU
.
PC
 += 2;

1041 
	}
}

1044 
	$Apu7A
 ()

1047 
W‹k16
 = 
	`S9xAPUGëByãZ
 (
OP1
) + (S9xAPUGetByteZ (OP1 + 1) << 8);

1048 
W‹k32
 = (
uöt32
Ë
IAPU
.
YA
.
W
 + 
W‹k16
;

1049 
IAPU
.
_C¨ry
 = 
W‹k32
 >= 0x10000;

1050 i‡(~(
IAPU
.
YA
.
W
 ^ 
W‹k16
Ë& (W‹k16 ^ (
uöt16
Ë
W‹k32
) & 0x8000)

1051 
	`APUSëOvîÊow
 ();

1053 
	`APUCÀ¨OvîÊow
 ();

1054 
	`APUCÀ¨HÆfC¨ry
 ();

1055 if((
IAPU
.
YA
.
W
 ^ 
W‹k16
 ^ (
uöt16
Ë
W‹k32
) & 0x10)

1056 
	`APUSëHÆfC¨ry
 ();

1057 
IAPU
.
YA
.
W
 = (
uöt16
Ë
W‹k32
;

1058 
	`APUSëZN16
 (
IAPU
.
YA
.
W
);

1059 
IAPU
.
PC
 += 2;

1060 
	}
}

1064 
	$Apu9A
 ()

1067 
W‹k16
 = 
	`S9xAPUGëByãZ
 (
OP1
) + (S9xAPUGetByteZ (OP1 + 1) << 8);

1068 
I¡32
 = (Ë
IAPU
.
YA
.
W
 - (Ë
W‹k16
;

1069 
	`APUCÀ¨HÆfC¨ry
 ();

1070 
IAPU
.
_C¨ry
 = 
I¡32
 >= 0;

1071 i‡(((
IAPU
.
YA
.
W
 ^ 
W‹k16
) & 0x8000) &&

1072 ((
IAPU
.
YA
.
W
 ^ (
uöt16
Ë
I¡32
) & 0x8000))

1073 
	`APUSëOvîÊow
 ();

1075 
	`APUCÀ¨OvîÊow
 ();

1079 
	`APUSëHÆfC¨ry
 ();

1081 if((
IAPU
.
YA
.
W
 ^ 
W‹k16
 ^ (
uöt16
Ë
I¡32
) & 0x10)

1082 
	`APUCÀ¨HÆfC¨ry
 ();

1083 
IAPU
.
YA
.
W
 = (
uöt16
Ë
I¡32
;

1084 
	`APUSëZN16
 (
IAPU
.
YA
.
W
);

1085 
IAPU
.
PC
 += 2;

1086 
	}
}

1088 
	$ApuBA
 ()

1091 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1092 
IAPU
.
YA
.
B
.
Y
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 1);

1093 
	`APUSëZN16
 (
IAPU
.
YA
.
W
);

1094 
IAPU
.
PC
 += 2;

1095 
	}
}

1097 
	$ApuDA
 ()

1100 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
A
, 
OP1
);

1101 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
Y
, 
OP1
 + 1);

1102 
IAPU
.
PC
 += 2;

1103 
	}
}

1105 
	$Apu64
 ()

1108 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1109 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1110 
IAPU
.
PC
 += 2;

1111 
	}
}

1113 
	$Apu65
 ()

1116 
	`Absﬁuã
 ();

1117 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1118 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1119 
IAPU
.
PC
 += 3;

1120 
	}
}

1122 
	$Apu66
 ()

1125 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
);

1126 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1127 
IAPU
.
PC
++;

1128 
	}
}

1130 
	$Apu67
 ()

1133 
	`IndexedXIndúe˘
 ();

1134 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1135 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1136 
IAPU
.
PC
 += 2;

1137 
	}
}

1139 
	$Apu68
 ()

1142 
W‹k8
 = 
OP1
;

1143 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1144 
IAPU
.
PC
 += 2;

1145 
	}
}

1147 
	$Apu69
 ()

1150 
W1
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1151 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP2
);

1152 
	`CMP
 (
W‹k8
, 
W1
);

1153 
IAPU
.
PC
 += 3;

1154 
	}
}

1156 
	$Apu74
 ()

1159 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

1160 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1161 
IAPU
.
PC
 += 2;

1162 
	}
}

1164 
	$Apu75
 ()

1167 
	`AbsﬁuãX
 ();

1168 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1169 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1170 
IAPU
.
PC
 += 3;

1171 
	}
}

1173 
	$Apu76
 ()

1176 
	`AbsﬁuãY
 ();

1177 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1178 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1179 
IAPU
.
PC
 += 3;

1180 
	}
}

1182 
	$Apu77
 ()

1185 
	`Indúe˘IndexedY
 ();

1186 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1187 
	`CMP
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1188 
IAPU
.
PC
 += 2;

1189 
	}
}

1191 
	$Apu78
 ()

1194 
W‹k8
 = 
OP1
;

1195 
W1
 = 
	`S9xAPUGëByãZ
 (
OP2
);

1196 
	`CMP
 (
W1
, 
W‹k8
);

1197 
IAPU
.
PC
 += 3;

1198 
	}
}

1200 
	$Apu79
 ()

1203 
W1
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
);

1204 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
YA
.
B
.
Y
);

1205 
	`CMP
 (
W1
, 
W‹k8
);

1206 
IAPU
.
PC
++;

1207 
	}
}

1209 
	$Apu1E
 ()

1212 
	`Absﬁuã
 ();

1213 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1214 
	`CMP
 (
IAPU
.
X
, 
W‹k8
);

1215 
IAPU
.
PC
 += 3;

1216 
	}
}

1218 
	$Apu3E
 ()

1221 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1222 
	`CMP
 (
IAPU
.
X
, 
W‹k8
);

1223 
IAPU
.
PC
 += 2;

1224 
	}
}

1226 
	$ApuC8
 ()

1229 
	`CMP
 (
IAPU
.
X
, 
OP1
);

1230 
IAPU
.
PC
 += 2;

1231 
	}
}

1233 
	$Apu5E
 ()

1236 
	`Absﬁuã
 ();

1237 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1238 
	`CMP
 (
IAPU
.
YA
.
B
.
Y
, 
W‹k8
);

1239 
IAPU
.
PC
 += 3;

1240 
	}
}

1242 
	$Apu7E
 ()

1245 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1246 
	`CMP
 (
IAPU
.
YA
.
B
.
Y
, 
W‹k8
);

1247 
IAPU
.
PC
 += 2;

1248 
	}
}

1250 
	$ApuAD
 ()

1253 
W‹k8
 = 
OP1
;

1254 
	`CMP
 (
IAPU
.
YA
.
B
.
Y
, 
W‹k8
);

1255 
IAPU
.
PC
 += 2;

1256 
	}
}

1258 
	$Apu1F
 ()

1261 
	`Absﬁuã
 ();

1262 
IAPU
.
PC
 = IAPU.
RAM
 + 
	`S9xAPUGëByã
 (IAPU.
Addªss
 + IAPU.
X
) +

1263 (
	`S9xAPUGëByã
 (
IAPU
.
Addªss
 + IAPU.
X
 + 1) << 8);

1266 
	}
}

1268 
	$Apu5F
 ()

1271 
	`Absﬁuã
 ();

1272 
IAPU
.
PC
 = IAPU.
RAM
 + IAPU.
Addªss
;

1273 
	}
}

1275 
	$Apu20
 ()

1278 
	`APUCÀ¨Dúe˘Page
 ();

1279 
IAPU
.
Dúe˘Page
 = IAPU.
RAM
;

1280 
IAPU
.
PC
++;

1281 
	}
}

1283 
	$Apu60
 ()

1286 
	`APUCÀ¨C¨ry
 ();

1287 
IAPU
.
PC
++;

1288 
	}
}

1290 
	$ApuE0
 ()

1293 
	`APUCÀ¨HÆfC¨ry
 ();

1294 
	`APUCÀ¨OvîÊow
 ();

1295 
IAPU
.
PC
++;

1296 
	}
}

1298 
	$Apu24
 ()

1301 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByãZ
 (
OP1
);

1302 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1303 
IAPU
.
PC
 += 2;

1304 
	}
}

1306 
	$Apu25
 ()

1309 
	`Absﬁuã
 ();

1310 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1311 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1312 
IAPU
.
PC
 += 3;

1313 
	}
}

1315 
	$Apu26
 ()

1318 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByãZ
 (IAPU.
X
);

1319 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1320 
IAPU
.
PC
++;

1321 
	}
}

1323 
	$Apu27
 ()

1326 
	`IndexedXIndúe˘
 ();

1327 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1328 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1329 
IAPU
.
PC
 += 2;

1330 
	}
}

1332 
	$Apu28
 ()

1335 
IAPU
.
YA
.
B
.
A
 &
OP1
;

1336 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1337 
IAPU
.
PC
 += 2;

1338 
	}
}

1340 
	$Apu29
 ()

1343 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1344 
W‹k8
 &
	`S9xAPUGëByãZ
 (
OP2
);

1345 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

1346 
	`APUSëZN8
 (
W‹k8
);

1347 
IAPU
.
PC
 += 3;

1348 
	}
}

1350 
	$Apu34
 ()

1353 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByãZ
 (
OP1
 + IAPU.
X
);

1354 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1355 
IAPU
.
PC
 += 2;

1356 
	}
}

1358 
	$Apu35
 ()

1361 
	`AbsﬁuãX
 ();

1362 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1363 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1364 
IAPU
.
PC
 += 3;

1365 
	}
}

1367 
	$Apu36
 ()

1370 
	`AbsﬁuãY
 ();

1371 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1372 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1373 
IAPU
.
PC
 += 3;

1374 
	}
}

1376 
	$Apu37
 ()

1379 
	`Indúe˘IndexedY
 ();

1380 
IAPU
.
YA
.
B
.
A
 &
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1381 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1382 
IAPU
.
PC
 += 2;

1383 
	}
}

1385 
	$Apu38
 ()

1388 
W‹k8
 = 
OP1
;

1389 
W‹k8
 &
	`S9xAPUGëByãZ
 (
OP2
);

1390 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

1391 
	`APUSëZN8
 (
W‹k8
);

1392 
IAPU
.
PC
 += 3;

1393 
	}
}

1395 
	$Apu39
 ()

1398 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
Ë& S9xAPUGëByãZ (IAPU.
YA
.
B
.
Y
);

1399 
	`APUSëZN8
 (
W‹k8
);

1400 
	`S9xAPUSëByãZ
 (
W‹k8
, 
IAPU
.
X
);

1401 
IAPU
.
PC
++;

1402 
	}
}

1404 
	$Apu2B
 ()

1407 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1408 
	`ROL
 (
W‹k8
);

1409 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
);

1410 
IAPU
.
PC
 += 2;

1411 
	}
}

1413 
	$Apu2C
 ()

1416 
	`Absﬁuã
 ();

1417 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1418 
	`ROL
 (
W‹k8
);

1419 
	`S9xAPUSëByã
 (
W‹k8
, 
IAPU
.
Addªss
);

1420 
IAPU
.
PC
 += 3;

1421 
	}
}

1423 
	$Apu3B
 ()

1426 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

1427 
	`ROL
 (
W‹k8
);

1428 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
 + 
IAPU
.
X
);

1429 
IAPU
.
PC
 += 2;

1430 
	}
}

1432 
	$Apu3C
 ()

1435 
	`ROL
 (
IAPU
.
YA
.
B
.
A
);

1436 
IAPU
.
PC
++;

1437 
	}
}

1439 
	$Apu2E
 ()

1442 
W‹k8
 = 
OP1
;

1443 
	`Rñ©ive2
 ();

1445 i‡(
	`S9xAPUGëByãZ
 (
W‹k8
Ë!
IAPU
.
YA
.
B
.
A
)

1447 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

1448 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

1449 
	`APUShutdown
 ();

1452 
IAPU
.
PC
 += 3;

1453 
	}
}

1455 
	$ApuDE
 ()

1458 
W‹k8
 = 
OP1
 + 
IAPU
.
X
;

1459 
	`Rñ©ive2
 ();

1461 i‡(
	`S9xAPUGëByãZ
 (
W‹k8
Ë!
IAPU
.
YA
.
B
.
A
)

1463 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

1464 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

1465 
	`APUShutdown
 ();

1468 
IAPU
.
PC
 += 3;

1469 
	}
}

1471 
	$Apu3D
 ()

1474 
IAPU
.
X
++;

1475 
	`APUSëZN8
 (
IAPU
.
X
);

1477 #ifde‡
SPC700_SHUTDOWN


1478 
IAPU
.
WaôCou¡î
++;

1481 
IAPU
.
PC
++;

1482 
	}
}

1484 
	$ApuFC
 ()

1487 
IAPU
.
YA
.
B
.
Y
++;

1488 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

1490 #ifde‡
SPC700_SHUTDOWN


1491 
IAPU
.
WaôCou¡î
++;

1494 
IAPU
.
PC
++;

1495 
	}
}

1497 
	$Apu1D
 ()

1500 
IAPU
.
X
--;

1501 
	`APUSëZN8
 (
IAPU
.
X
);

1503 #ifde‡
SPC700_SHUTDOWN


1504 
IAPU
.
WaôCou¡î
++;

1507 
IAPU
.
PC
++;

1508 
	}
}

1510 
	$ApuDC
 ()

1513 
IAPU
.
YA
.
B
.
Y
--;

1514 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

1516 #ifde‡
SPC700_SHUTDOWN


1517 
IAPU
.
WaôCou¡î
++;

1520 
IAPU
.
PC
++;

1521 
	}
}

1523 
	$ApuAB
 ()

1526 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
) + 1;

1527 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
);

1528 
	`APUSëZN8
 (
W‹k8
);

1530 #ifde‡
SPC700_SHUTDOWN


1531 
IAPU
.
WaôCou¡î
++;

1534 
IAPU
.
PC
 += 2;

1535 
	}
}

1537 
	$ApuAC
 ()

1540 
	`Absﬁuã
 ();

1541 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
) + 1;

1542 
	`S9xAPUSëByã
 (
W‹k8
, 
IAPU
.
Addªss
);

1543 
	`APUSëZN8
 (
W‹k8
);

1545 #ifde‡
SPC700_SHUTDOWN


1546 
IAPU
.
WaôCou¡î
++;

1549 
IAPU
.
PC
 += 3;

1550 
	}
}

1552 
	$ApuBB
 ()

1555 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
) + 1;

1556 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
 + 
IAPU
.
X
);

1557 
	`APUSëZN8
 (
W‹k8
);

1559 #ifde‡
SPC700_SHUTDOWN


1560 
IAPU
.
WaôCou¡î
++;

1563 
IAPU
.
PC
 += 2;

1564 
	}
}

1566 
	$ApuBC
 ()

1569 
IAPU
.
YA
.
B
.
A
++;

1570 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1572 #ifde‡
SPC700_SHUTDOWN


1573 
IAPU
.
WaôCou¡î
++;

1576 
IAPU
.
PC
++;

1577 
	}
}

1579 
	$Apu8B
 ()

1582 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
) - 1;

1583 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
);

1584 
	`APUSëZN8
 (
W‹k8
);

1586 #ifde‡
SPC700_SHUTDOWN


1587 
IAPU
.
WaôCou¡î
++;

1590 
IAPU
.
PC
 += 2;

1591 
	}
}

1593 
	$Apu8C
 ()

1596 
	`Absﬁuã
 ();

1597 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
) - 1;

1598 
	`S9xAPUSëByã
 (
W‹k8
, 
IAPU
.
Addªss
);

1599 
	`APUSëZN8
 (
W‹k8
);

1601 #ifde‡
SPC700_SHUTDOWN


1602 
IAPU
.
WaôCou¡î
++;

1605 
IAPU
.
PC
 += 3;

1606 
	}
}

1608 
	$Apu9B
 ()

1611 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
) - 1;

1612 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
 + 
IAPU
.
X
);

1613 
	`APUSëZN8
 (
W‹k8
);

1615 #ifde‡
SPC700_SHUTDOWN


1616 
IAPU
.
WaôCou¡î
++;

1619 
IAPU
.
PC
 += 2;

1620 
	}
}

1622 
	$Apu9C
 ()

1625 
IAPU
.
YA
.
B
.
A
--;

1626 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1628 #ifde‡
SPC700_SHUTDOWN


1629 
IAPU
.
WaôCou¡î
++;

1632 
IAPU
.
PC
++;

1633 
	}
}

1635 
	$Apu44
 ()

1638 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByãZ
 (
OP1
);

1639 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1640 
IAPU
.
PC
 += 2;

1641 
	}
}

1643 
	$Apu45
 ()

1646 
	`Absﬁuã
 ();

1647 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1648 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1649 
IAPU
.
PC
 += 3;

1650 
	}
}

1652 
	$Apu46
 ()

1655 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByãZ
 (IAPU.
X
);

1656 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1657 
IAPU
.
PC
++;

1658 
	}
}

1660 
	$Apu47
 ()

1663 
	`IndexedXIndúe˘
 ();

1664 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1665 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1666 
IAPU
.
PC
 += 2;

1667 
	}
}

1669 
	$Apu48
 ()

1672 
IAPU
.
YA
.
B
.
A
 ^
OP1
;

1673 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1674 
IAPU
.
PC
 += 2;

1675 
	}
}

1677 
	$Apu49
 ()

1680 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1681 
W‹k8
 ^
	`S9xAPUGëByãZ
 (
OP2
);

1682 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

1683 
	`APUSëZN8
 (
W‹k8
);

1684 
IAPU
.
PC
 += 3;

1685 
	}
}

1687 
	$Apu54
 ()

1690 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByãZ
 (
OP1
 + IAPU.
X
);

1691 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1692 
IAPU
.
PC
 += 2;

1693 
	}
}

1695 
	$Apu55
 ()

1698 
	`AbsﬁuãX
 ();

1699 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1700 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1701 
IAPU
.
PC
 += 3;

1702 
	}
}

1704 
	$Apu56
 ()

1707 
	`AbsﬁuãY
 ();

1708 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1709 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1710 
IAPU
.
PC
 += 3;

1711 
	}
}

1713 
	$Apu57
 ()

1716 
	`Indúe˘IndexedY
 ();

1717 
IAPU
.
YA
.
B
.
A
 ^
	`S9xAPUGëByã
 (IAPU.
Addªss
);

1718 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1719 
IAPU
.
PC
 += 2;

1720 
	}
}

1722 
	$Apu58
 ()

1725 
W‹k8
 = 
OP1
;

1726 
W‹k8
 ^
	`S9xAPUGëByãZ
 (
OP2
);

1727 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

1728 
	`APUSëZN8
 (
W‹k8
);

1729 
IAPU
.
PC
 += 3;

1730 
	}
}

1732 
	$Apu59
 ()

1735 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
Ë^ S9xAPUGëByãZ (IAPU.
YA
.
B
.
Y
);

1736 
	`APUSëZN8
 (
W‹k8
);

1737 
	`S9xAPUSëByãZ
 (
W‹k8
, 
IAPU
.
X
);

1738 
IAPU
.
PC
++;

1739 
	}
}

1741 
	$Apu4B
 ()

1744 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1745 
	`LSR
 (
W‹k8
);

1746 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
);

1747 
IAPU
.
PC
 += 2;

1748 
	}
}

1750 
	$Apu4C
 ()

1753 
	`Absﬁuã
 ();

1754 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1755 
	`LSR
 (
W‹k8
);

1756 
	`S9xAPUSëByã
 (
W‹k8
, 
IAPU
.
Addªss
);

1757 
IAPU
.
PC
 += 3;

1758 
	}
}

1760 
	$Apu5B
 ()

1763 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

1764 
	`LSR
 (
W‹k8
);

1765 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
 + 
IAPU
.
X
);

1766 
IAPU
.
PC
 += 2;

1767 
	}
}

1769 
	$Apu5C
 ()

1772 
	`LSR
 (
IAPU
.
YA
.
B
.
A
);

1773 
IAPU
.
PC
++;

1774 
	}
}

1776 
	$Apu7D
 ()

1779 
IAPU
.
YA
.
B
.
A
 = IAPU.
X
;

1780 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1781 
IAPU
.
PC
++;

1782 
	}
}

1784 
	$ApuDD
 ()

1787 
IAPU
.
YA
.
B
.
A
 = IAPU.YA.B.
Y
;

1788 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

1789 
IAPU
.
PC
++;

1790 
	}
}

1792 
	$Apu5D
 ()

1795 
IAPU
.
X
 = IAPU.
YA
.
B
.
A
;

1796 
	`APUSëZN8
 (
IAPU
.
X
);

1797 
IAPU
.
PC
++;

1798 
	}
}

1800 
	$ApuFD
 ()

1803 
IAPU
.
YA
.
B
.
Y
 = IAPU.YA.B.
A
;

1804 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

1805 
IAPU
.
PC
++;

1806 
	}
}

1808 
	$Apu9D
 ()

1811 
IAPU
.
X
 = IAPU.
S
;

1812 
	`APUSëZN8
 (
IAPU
.
X
);

1813 
IAPU
.
PC
++;

1814 
	}
}

1816 
	$ApuBD
 ()

1819 
IAPU
.
S
 = IAPU.
X
;

1820 
IAPU
.
PC
++;

1821 
	}
}

1823 
	$Apu6B
 ()

1826 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1827 
	`ROR
 (
W‹k8
);

1828 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
);

1829 
IAPU
.
PC
 += 2;

1830 
	}
}

1832 
	$Apu6C
 ()

1835 
	`Absﬁuã
 ();

1836 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1837 
	`ROR
 (
W‹k8
);

1838 
	`S9xAPUSëByã
 (
W‹k8
, 
IAPU
.
Addªss
);

1839 
IAPU
.
PC
 += 3;

1840 
	}
}

1842 
	$Apu7B
 ()

1845 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

1846 
	`ROR
 (
W‹k8
);

1847 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP1
 + 
IAPU
.
X
);

1848 
IAPU
.
PC
 += 2;

1849 
	}
}

1851 
	$Apu7C
 ()

1854 
	`ROR
 (
IAPU
.
YA
.
B
.
A
);

1855 
IAPU
.
PC
++;

1856 
	}
}

1858 
	$Apu6E
 ()

1861 
W‹k8
 = 
OP1
;

1862 
	`Rñ©ive2
 ();

1863 
W1
 = 
	`S9xAPUGëByãZ
 (
W‹k8
) - 1;

1864 
	`S9xAPUSëByãZ
 (
W1
, 
W‹k8
);

1865 i‡(
W1
 != 0)

1867 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

1868 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

1871 
IAPU
.
PC
 += 3;

1872 
	}
}

1874 
	$ApuFE
 ()

1877 
	`Rñ©ive
 ();

1878 
IAPU
.
YA
.
B
.
Y
--;

1879 i‡(
IAPU
.
YA
.
B
.
Y
 != 0)

1881 
IAPU
.
PC
 = IAPU.
RAM
 + (
uöt16
Ë
I¡16
;

1882 
CPU
.
APU_Cy˛es
 +
IAPU
.
TwoCy˛es
;

1885 
IAPU
.
PC
 += 2;

1886 
	}
}

1888 
	$Apu6F
 ()

1891 
	`P›W
 (
W‹k16
);

1892 
IAPU
.
PC
 = IAPU.
RAM
 + 
W‹k16
;

1893 
	}
}

1895 
	$Apu7F
 ()

1899 
	`P›
 (
IAPU
.
P
);

1900 
	`S9xAPUU≈ackSètus
 ();

1901 
	`P›W
 (
W‹k16
);

1902 
IAPU
.
PC
 = IAPU.
RAM
 + 
W‹k16
;

1903 
	}
}

1905 
	$Apu84
 ()

1908 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1909 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1910 
IAPU
.
PC
 += 2;

1911 
	}
}

1913 
	$Apu85
 ()

1916 
	`Absﬁuã
 ();

1917 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1918 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1919 
IAPU
.
PC
 += 3;

1920 
	}
}

1922 
	$Apu86
 ()

1925 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
);

1926 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1927 
IAPU
.
PC
++;

1928 
	}
}

1930 
	$Apu87
 ()

1933 
	`IndexedXIndúe˘
 ();

1934 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1935 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1936 
IAPU
.
PC
 += 2;

1937 
	}
}

1939 
	$Apu88
 ()

1942 
W‹k8
 = 
OP1
;

1943 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1944 
IAPU
.
PC
 += 2;

1945 
	}
}

1947 
	$Apu89
 ()

1950 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

1951 
W1
 = 
	`S9xAPUGëByãZ
 (
OP2
);

1952 
	`ADC
 (
W1
, 
W‹k8
);

1953 
	`S9xAPUSëByãZ
 (
W1
, 
OP2
);

1954 
IAPU
.
PC
 += 3;

1955 
	}
}

1957 
	$Apu94
 ()

1960 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

1961 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1962 
IAPU
.
PC
 += 2;

1963 
	}
}

1965 
	$Apu95
 ()

1968 
	`AbsﬁuãX
 ();

1969 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1970 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1971 
IAPU
.
PC
 += 3;

1972 
	}
}

1974 
	$Apu96
 ()

1977 
	`AbsﬁuãY
 ();

1978 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1979 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1980 
IAPU
.
PC
 += 3;

1981 
	}
}

1983 
	$Apu97
 ()

1986 
	`Indúe˘IndexedY
 ();

1987 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

1988 
	`ADC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

1989 
IAPU
.
PC
 += 2;

1990 
	}
}

1992 
	$Apu98
 ()

1995 
W‹k8
 = 
OP1
;

1996 
W1
 = 
	`S9xAPUGëByãZ
 (
OP2
);

1997 
	`ADC
 (
W1
, 
W‹k8
);

1998 
	`S9xAPUSëByãZ
 (
W1
, 
OP2
);

1999 
IAPU
.
PC
 += 3;

2000 
	}
}

2002 
	$Apu99
 ()

2005 
W1
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
);

2006 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
YA
.
B
.
Y
);

2007 
	`ADC
 (
W1
, 
W‹k8
);

2008 
	`S9xAPUSëByãZ
 (
W1
, 
IAPU
.
X
);

2009 
IAPU
.
PC
++;

2010 
	}
}

2012 
	$Apu8D
 ()

2015 
IAPU
.
YA
.
B
.
Y
 = 
OP1
;

2016 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

2017 
IAPU
.
PC
 += 2;

2018 
	}
}

2020 
	$Apu8F
 ()

2023 
W‹k8
 = 
OP1
;

2024 
	`S9xAPUSëByãZ
 (
W‹k8
, 
OP2
);

2025 
IAPU
.
PC
 += 3;

2026 
	}
}

2028 
	$Apu9E
 ()

2031 i‡(
IAPU
.
X
 == 0)

2033 
	`APUSëOvîÊow
 ();

2034 
IAPU
.
YA
.
B
.
Y
 = 0xff;

2035 
IAPU
.
YA
.
B
.
A
 = 0xff;

2039 
	`APUCÀ¨OvîÊow
 ();

2040 
W‹k8
 = 
IAPU
.
YA
.
W
 / IAPU.
X
;

2041 
IAPU
.
YA
.
B
.
Y
 = IAPU.YA.
W
 % IAPU.
X
;

2042 
IAPU
.
YA
.
B
.
A
 = 
W‹k8
;

2046 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2047 
IAPU
.
PC
++;

2048 
	}
}

2050 
	$Apu9F
 ()

2053 
IAPU
.
YA
.
B
.
A
 = (IAPU.YA.B.A >> 4) | (IAPU.YA.B.A << 4);

2054 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2055 
IAPU
.
PC
++;

2056 
	}
}

2058 
	$ApuA4
 ()

2061 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

2062 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2063 
IAPU
.
PC
 += 2;

2064 
	}
}

2066 
	$ApuA5
 ()

2069 
	`Absﬁuã
 ();

2070 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

2071 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2072 
IAPU
.
PC
 += 3;

2073 
	}
}

2075 
	$ApuA6
 ()

2078 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
);

2079 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2080 
IAPU
.
PC
++;

2081 
	}
}

2083 
	$ApuA7
 ()

2086 
	`IndexedXIndúe˘
 ();

2087 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

2088 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2089 
IAPU
.
PC
 += 2;

2090 
	}
}

2092 
	$ApuA8
 ()

2095 
W‹k8
 = 
OP1
;

2096 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2097 
IAPU
.
PC
 += 2;

2098 
	}
}

2100 
	$ApuA9
 ()

2103 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
);

2104 
W1
 = 
	`S9xAPUGëByãZ
 (
OP2
);

2105 
	`SBC
 (
W1
, 
W‹k8
);

2106 
	`S9xAPUSëByãZ
 (
W1
, 
OP2
);

2107 
IAPU
.
PC
 += 3;

2108 
	}
}

2110 
	$ApuB4
 ()

2113 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
OP1
 + 
IAPU
.
X
);

2114 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2115 
IAPU
.
PC
 += 2;

2116 
	}
}

2118 
	$ApuB5
 ()

2121 
	`AbsﬁuãX
 ();

2122 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

2123 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2124 
IAPU
.
PC
 += 3;

2125 
	}
}

2127 
	$ApuB6
 ()

2130 
	`AbsﬁuãY
 ();

2131 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

2132 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2133 
IAPU
.
PC
 += 3;

2134 
	}
}

2136 
	$ApuB7
 ()

2139 
	`Indúe˘IndexedY
 ();

2140 
W‹k8
 = 
	`S9xAPUGëByã
 (
IAPU
.
Addªss
);

2141 
	`SBC
 (
IAPU
.
YA
.
B
.
A
, 
W‹k8
);

2142 
IAPU
.
PC
 += 2;

2143 
	}
}

2145 
	$ApuB8
 ()

2148 
W‹k8
 = 
OP1
;

2149 
W1
 = 
	`S9xAPUGëByãZ
 (
OP2
);

2150 
	`SBC
 (
W1
, 
W‹k8
);

2151 
	`S9xAPUSëByãZ
 (
W1
, 
OP2
);

2152 
IAPU
.
PC
 += 3;

2153 
	}
}

2155 
	$ApuB9
 ()

2158 
W1
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
X
);

2159 
W‹k8
 = 
	`S9xAPUGëByãZ
 (
IAPU
.
YA
.
B
.
Y
);

2160 
	`SBC
 (
W1
, 
W‹k8
);

2161 
	`S9xAPUSëByãZ
 (
W1
, 
IAPU
.
X
);

2162 
IAPU
.
PC
++;

2163 
	}
}

2165 
	$ApuAF
 ()

2168 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
A
, IAPU.
X
++);

2169 
IAPU
.
PC
++;

2170 
	}
}

2172 
	$ApuBE
 ()

2175 i‡((
IAPU
.
YA
.
B
.
A
 & 0x0fË> 9 || !
	`APUCheckHÆfC¨ry
())

2177 
IAPU
.
YA
.
B
.
A
 -= 6;

2179 i‡(
IAPU
.
YA
.
B
.
A
 > 0x9‡|| !IAPU.
_C¨ry
)

2181 
IAPU
.
YA
.
B
.
A
 -= 0x60;

2182 
	`APUCÀ¨C¨ry
 ();

2184 { 
	`APUSëC¨ry
 (); }

2185 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2186 
IAPU
.
PC
++;

2187 
	}
}

2189 
	$ApuBF
 ()

2192 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByãZ
 (IAPU.
X
++);

2193 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2194 
IAPU
.
PC
++;

2195 
	}
}

2197 
	$ApuC0
 ()

2200 
	`APUCÀ¨I¡îru±
 ();

2201 
IAPU
.
PC
++;

2202 
	}
}

2204 
	$ApuA0
 ()

2207 
	`APUSëI¡îru±
 ();

2208 
IAPU
.
PC
++;

2209 
	}
}

2211 
	$ApuC4
 ()

2214 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
A
, 
OP1
);

2215 
IAPU
.
PC
 += 2;

2216 
	}
}

2218 
	$ApuC5
 ()

2221 
	`Absﬁuã
 ();

2222 
	`S9xAPUSëByã
 (
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

2223 
IAPU
.
PC
 += 3;

2224 
	}
}

2226 
	$ApuC6
 ()

2229 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
A
, IAPU.
X
);

2230 
IAPU
.
PC
++;

2231 
	}
}

2233 
	$ApuC7
 ()

2236 
	`IndexedXIndúe˘
 ();

2237 
	`S9xAPUSëByã
 (
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

2238 
IAPU
.
PC
 += 2;

2239 
	}
}

2241 
	$ApuC9
 ()

2244 
	`Absﬁuã
 ();

2245 
	`S9xAPUSëByã
 (
IAPU
.
X
, IAPU.
Addªss
);

2246 
IAPU
.
PC
 += 3;

2247 
	}
}

2249 
	$ApuCB
 ()

2252 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
Y
, 
OP1
);

2253 
IAPU
.
PC
 += 2;

2254 
	}
}

2256 
	$ApuCC
 ()

2259 
	`Absﬁuã
 ();

2260 
	`S9xAPUSëByã
 (
IAPU
.
YA
.
B
.
Y
, IAPU.
Addªss
);

2261 
IAPU
.
PC
 += 3;

2262 
	}
}

2264 
	$ApuCD
 ()

2267 
IAPU
.
X
 = 
OP1
;

2268 
	`APUSëZN8
 (
IAPU
.
X
);

2269 
IAPU
.
PC
 += 2;

2270 
	}
}

2272 
	$ApuCF
 ()

2275 
IAPU
.
YA
.
W
 = (
uöt16
ËIAPU.YA.
B
.
A
 * IAPU.YA.B.
Y
;

2276 
	`APUSëZN16
 (
IAPU
.
YA
.
W
);

2277 
IAPU
.
PC
++;

2278 
	}
}

2280 
	$ApuD4
 ()

2283 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
A
, 
OP1
 + IAPU.
X
);

2284 
IAPU
.
PC
 += 2;

2285 
	}
}

2287 
	$ApuD5
 ()

2290 
	`AbsﬁuãX
 ();

2291 
	`S9xAPUSëByã
 (
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

2292 
IAPU
.
PC
 += 3;

2293 
	}
}

2295 
	$ApuD6
 ()

2298 
	`AbsﬁuãY
 ();

2299 
	`S9xAPUSëByã
 (
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

2300 
IAPU
.
PC
 += 3;

2301 
	}
}

2303 
	$ApuD7
 ()

2306 
	`Indúe˘IndexedY
 ();

2307 
	`S9xAPUSëByã
 (
IAPU
.
YA
.
B
.
A
, IAPU.
Addªss
);

2308 
IAPU
.
PC
 += 2;

2309 
	}
}

2311 
	$ApuD8
 ()

2314 
	`S9xAPUSëByãZ
 (
IAPU
.
X
, 
OP1
);

2315 
IAPU
.
PC
 += 2;

2316 
	}
}

2318 
	$ApuD9
 ()

2321 
	`S9xAPUSëByãZ
 (
IAPU
.
X
, 
OP1
 + IAPU.
YA
.
B
.
Y
);

2322 
IAPU
.
PC
 += 2;

2323 
	}
}

2325 
	$ApuDB
 ()

2328 
	`S9xAPUSëByãZ
 (
IAPU
.
YA
.
B
.
Y
, 
OP1
 + IAPU.
X
);

2329 
IAPU
.
PC
 += 2;

2330 
	}
}

2332 
	$ApuDF
 ()

2335 i‡((
IAPU
.
YA
.
B
.
A
 & 0x0fË> 9 || 
	`APUCheckHÆfC¨ry
())

2337 if(
IAPU
.
YA
.
B
.
A
 > 0xf0Ë
	`APUSëC¨ry
 ();

2338 
IAPU
.
YA
.
B
.
A
 += 6;

2342 i‡(
IAPU
.
YA
.
B
.
A
 > 0x9‡|| IAPU.
_C¨ry
)

2344 
IAPU
.
YA
.
B
.
A
 += 0x60;

2345 
	`APUSëC¨ry
 ();

2347 { 
	`APUCÀ¨C¨ry
 (); }

2348 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2349 
IAPU
.
PC
++;

2350 
	}
}

2352 
	$ApuE4
 ()

2355 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByãZ
 (
OP1
);

2356 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2357 
IAPU
.
PC
 += 2;

2358 
	}
}

2360 
	$ApuE5
 ()

2363 
	`Absﬁuã
 ();

2364 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2365 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2366 
IAPU
.
PC
 += 3;

2367 
	}
}

2369 
	$ApuE6
 ()

2372 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByãZ
 (IAPU.
X
);

2373 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2374 
IAPU
.
PC
++;

2375 
	}
}

2377 
	$ApuE7
 ()

2380 
	`IndexedXIndúe˘
 ();

2381 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2382 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2383 
IAPU
.
PC
 += 2;

2384 
	}
}

2386 
	$ApuE8
 ()

2389 
IAPU
.
YA
.
B
.
A
 = 
OP1
;

2390 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2391 
IAPU
.
PC
 += 2;

2392 
	}
}

2394 
	$ApuE9
 ()

2397 
	`Absﬁuã
 ();

2398 
IAPU
.
X
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2399 
	`APUSëZN8
 (
IAPU
.
X
);

2400 
IAPU
.
PC
 += 3;

2401 
	}
}

2403 
	$ApuEB
 ()

2406 
IAPU
.
YA
.
B
.
Y
 = 
	`S9xAPUGëByãZ
 (
OP1
);

2407 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

2408 
IAPU
.
PC
 += 2;

2409 
	}
}

2411 
	$ApuEC
 ()

2414 
	`Absﬁuã
 ();

2415 
IAPU
.
YA
.
B
.
Y
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2416 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

2417 
IAPU
.
PC
 += 3;

2418 
	}
}

2420 
	$ApuF4
 ()

2423 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByãZ
 (
OP1
 + IAPU.
X
);

2424 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2425 
IAPU
.
PC
 += 2;

2426 
	}
}

2428 
	$ApuF5
 ()

2431 
	`AbsﬁuãX
 ();

2432 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2433 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2434 
IAPU
.
PC
 += 3;

2435 
	}
}

2437 
	$ApuF6
 ()

2440 
	`AbsﬁuãY
 ();

2441 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2442 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2443 
IAPU
.
PC
 += 3;

2444 
	}
}

2446 
	$ApuF7
 ()

2449 
	`Indúe˘IndexedY
 ();

2450 
IAPU
.
YA
.
B
.
A
 = 
	`S9xAPUGëByã
 (IAPU.
Addªss
);

2451 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
A
);

2452 
IAPU
.
PC
 += 2;

2453 
	}
}

2455 
	$ApuF8
 ()

2458 
IAPU
.
X
 = 
	`S9xAPUGëByãZ
 (
OP1
);

2459 
	`APUSëZN8
 (
IAPU
.
X
);

2460 
IAPU
.
PC
 += 2;

2461 
	}
}

2463 
	$ApuF9
 ()

2466 
IAPU
.
X
 = 
	`S9xAPUGëByãZ
 (
OP1
 + IAPU.
YA
.
B
.
Y
);

2467 
	`APUSëZN8
 (
IAPU
.
X
);

2468 
IAPU
.
PC
 += 2;

2469 
	}
}

2471 
	$ApuFA
 ()

2474 
	`S9xAPUSëByãZ
 (
	`S9xAPUGëByãZ
 (
OP1
), 
OP2
);

2475 
IAPU
.
PC
 += 3;

2476 
	}
}

2478 
	$ApuFB
 ()

2481 
IAPU
.
YA
.
B
.
Y
 = 
	`S9xAPUGëByãZ
 (
OP1
 + IAPU.
X
);

2482 
	`APUSëZN8
 (
IAPU
.
YA
.
B
.
Y
);

2483 
IAPU
.
PC
 += 2;

2484 
	}
}

2486 #i‡
deföed
(
NO_INLINE_SET_GET
)

2487 #unde‡
INLINE


2488 
	#INLINE


	)

2489 
	~"≠umem.h
"

2493 (*
S9xApuOpcodes
[256]) () =

2495 
Apu00
, 
Apu01
, 
Apu02
, 
Apu03
, 
Apu04
, 
Apu05
, 
Apu06
, 
Apu07
,

2496 
Apu08
, 
Apu09
, 
Apu0A
, 
Apu0B
, 
Apu0C
, 
Apu0D
, 
Apu0E
, 
Apu0F
,

2497 
Apu10
, 
Apu11
, 
Apu12
, 
Apu13
, 
Apu14
, 
Apu15
, 
Apu16
, 
Apu17
,

2498 
Apu18
, 
Apu19
, 
Apu1A
, 
Apu1B
, 
Apu1C
, 
Apu1D
, 
Apu1E
, 
Apu1F
,

2499 
Apu20
, 
Apu21
, 
Apu22
, 
Apu23
, 
Apu24
, 
Apu25
, 
Apu26
, 
Apu27
,

2500 
Apu28
, 
Apu29
, 
Apu2A
, 
Apu2B
, 
Apu2C
, 
Apu2D
, 
Apu2E
, 
Apu2F
,

2501 
Apu30
, 
Apu31
, 
Apu32
, 
Apu33
, 
Apu34
, 
Apu35
, 
Apu36
, 
Apu37
,

2502 
Apu38
, 
Apu39
, 
Apu3A
, 
Apu3B
, 
Apu3C
, 
Apu3D
, 
Apu3E
, 
Apu3F
,

2503 
Apu40
, 
Apu41
, 
Apu42
, 
Apu43
, 
Apu44
, 
Apu45
, 
Apu46
, 
Apu47
,

2504 
Apu48
, 
Apu49
, 
Apu4A
, 
Apu4B
, 
Apu4C
, 
Apu4D
, 
Apu4E
, 
Apu4F
,

2505 
Apu50
, 
Apu51
, 
Apu52
, 
Apu53
, 
Apu54
, 
Apu55
, 
Apu56
, 
Apu57
,

2506 
Apu58
, 
Apu59
, 
Apu5A
, 
Apu5B
, 
Apu5C
, 
Apu5D
, 
Apu5E
, 
Apu5F
,

2507 
Apu60
, 
Apu61
, 
Apu62
, 
Apu63
, 
Apu64
, 
Apu65
, 
Apu66
, 
Apu67
,

2508 
Apu68
, 
Apu69
, 
Apu6A
, 
Apu6B
, 
Apu6C
, 
Apu6D
, 
Apu6E
, 
Apu6F
,

2509 
Apu70
, 
Apu71
, 
Apu72
, 
Apu73
, 
Apu74
, 
Apu75
, 
Apu76
, 
Apu77
,

2510 
Apu78
, 
Apu79
, 
Apu7A
, 
Apu7B
, 
Apu7C
, 
Apu7D
, 
Apu7E
, 
Apu7F
,

2511 
Apu80
, 
Apu81
, 
Apu82
, 
Apu83
, 
Apu84
, 
Apu85
, 
Apu86
, 
Apu87
,

2512 
Apu88
, 
Apu89
, 
Apu8A
, 
Apu8B
, 
Apu8C
, 
Apu8D
, 
Apu8E
, 
Apu8F
,

2513 
Apu90
, 
Apu91
, 
Apu92
, 
Apu93
, 
Apu94
, 
Apu95
, 
Apu96
, 
Apu97
,

2514 
Apu98
, 
Apu99
, 
Apu9A
, 
Apu9B
, 
Apu9C
, 
Apu9D
, 
Apu9E
, 
Apu9F
,

2515 
ApuA0
, 
ApuA1
, 
ApuA2
, 
ApuA3
, 
ApuA4
, 
ApuA5
, 
ApuA6
, 
ApuA7
,

2516 
ApuA8
, 
ApuA9
, 
ApuAA
, 
ApuAB
, 
ApuAC
, 
ApuAD
, 
ApuAE
, 
ApuAF
,

2517 
ApuB0
, 
ApuB1
, 
ApuB2
, 
ApuB3
, 
ApuB4
, 
ApuB5
, 
ApuB6
, 
ApuB7
,

2518 
ApuB8
, 
ApuB9
, 
ApuBA
, 
ApuBB
, 
ApuBC
, 
ApuBD
, 
ApuBE
, 
ApuBF
,

2519 
ApuC0
, 
ApuC1
, 
ApuC2
, 
ApuC3
, 
ApuC4
, 
ApuC5
, 
ApuC6
, 
ApuC7
,

2520 
ApuC8
, 
ApuC9
, 
ApuCA
, 
ApuCB
, 
ApuCC
, 
ApuCD
, 
ApuCE
, 
ApuCF
,

2521 
ApuD0
, 
ApuD1
, 
ApuD2
, 
ApuD3
, 
ApuD4
, 
ApuD5
, 
ApuD6
, 
ApuD7
,

2522 
ApuD8
, 
ApuD9
, 
ApuDA
, 
ApuDB
, 
ApuDC
, 
ApuDD
, 
ApuDE
, 
ApuDF
,

2523 
ApuE0
, 
ApuE1
, 
ApuE2
, 
ApuE3
, 
ApuE4
, 
ApuE5
, 
ApuE6
, 
ApuE7
,

2524 
ApuE8
, 
ApuE9
, 
ApuEA
, 
ApuEB
, 
ApuEC
, 
ApuED
, 
ApuEE
, 
ApuEF
,

2525 
ApuF0
, 
ApuF1
, 
ApuF2
, 
ApuF3
, 
ApuF4
, 
ApuF5
, 
ApuF6
, 
ApuF7
,

2526 
ApuF8
, 
ApuF9
, 
ApuFA
, 
ApuFB
, 
ApuFC
, 
ApuFD
, 
ApuFE
, 
ApuFF


2527 
	}
};

	@spc700.h

41 #i‚de‡
_SPC700_H_


42 
	#_SPC700_H_


	)

44 #ifde‡
SPCTOOL


45 
	#NO_CHANNEL_STRUCT


	)

46 
	~"•˘oﬁ/d•.h
"

47 
	~"•˘oﬁ/•c700.h
"

48 
	~"•˘oﬁ/soundmod.h
"

52 
	#C¨ry
 1

	)

53 
	#Zîo
 2

	)

54 
	#I¡îru±
 4

	)

55 
	#HÆfC¨ry
 8

	)

56 
	#BªakFœg
 16

	)

57 
	#Dúe˘PageFœg
 32

	)

58 
	#OvîÊow
 64

	)

59 
	#Neg©ive
 128

	)

61 
	#APUCÀ¨C¨ry
(Ë(
IAPU
.
_C¨ry
 = 0)

	)

62 
	#APUSëC¨ry
(Ë(
IAPU
.
_C¨ry
 = 1)

	)

63 
	#APUSëI¡îru±
(Ë(
IAPU
.
P
 |
I¡îru±
)

	)

64 
	#APUCÀ¨I¡îru±
(Ë(
IAPU
.
P
 &~
I¡îru±
)

	)

65 
	#APUSëHÆfC¨ry
(Ë(
IAPU
.
P
 |
HÆfC¨ry
)

	)

66 
	#APUCÀ¨HÆfC¨ry
(Ë(
IAPU
.
P
 &~
HÆfC¨ry
)

	)

67 
	#APUSëBªak
(Ë(
IAPU
.
P
 |
BªakFœg
)

	)

68 
	#APUCÀ¨Bªak
(Ë(
IAPU
.
P
 &~
BªakFœg
)

	)

69 
	#APUSëDúe˘Page
(Ë(
IAPU
.
P
 |
Dúe˘PageFœg
)

	)

70 
	#APUCÀ¨Dúe˘Page
(Ë(
IAPU
.
P
 &~
Dúe˘PageFœg
)

	)

71 
	#APUSëOvîÊow
(Ë(
IAPU
.
_OvîÊow
 = 1)

	)

72 
	#APUCÀ¨OvîÊow
(Ë(
IAPU
.
_OvîÊow
 = 0)

	)

74 
	#APUCheckZîo
(Ë(
IAPU
.
_Zîo
 =0)

	)

75 
	#APUCheckC¨ry
(Ë(
IAPU
.
_C¨ry
)

	)

76 
	#APUCheckI¡îru±
(Ë(
IAPU
.
P
 & 
I¡îru±
)

	)

77 
	#APUCheckHÆfC¨ry
(Ë(
IAPU
.
P
 & 
HÆfC¨ry
)

	)

78 
	#APUCheckBªak
(Ë(
IAPU
.
P
 & 
BªakFœg
)

	)

79 
	#APUCheckDúe˘Page
(Ë(
IAPU
.
P
 & 
Dúe˘PageFœg
)

	)

80 
	#APUCheckOvîÊow
(Ë(
IAPU
.
_OvîÊow
)

	)

81 
	#APUCheckNeg©ive
(Ë(
IAPU
.
_Zîo
 & 0x80)

	)

89 #ifde‡
LSB_FIRST


90 °ru˘ { 
uöt8
 
	mA
, 
	mY
; } 
	mB
;

92 °ru˘ { 
uöt8
 
	mY
, 
	mA
; } 
	mB
;

94 
uöt16
 
	mW
;

95 
uöt32
 
	m_∑ddî
;

96 } 
	tYAndA
;

98 
	sSAPURegi°îs
{

99 
uöt8
 
	mP
;

100 
YAndA
 
	mYA
;

101 
uöt8
 
	mX
;

102 
uöt8
 
	mS
;

103 
uöt16
 
	mPC
;

110 
	#ONE_APU_CYCLE
 21

	)

114 
	#ONE_APU_CYCLE_HUMAN
 21

	)

118 #ifde‡
SPCTOOL


119 
EXTERN_C
 
öt32
 
ESPC
 (int32);

121 
	#APU_EXECUTE
(Ë\

	)

123 
öt32
 
	gl
 = (
CPU
.
Cy˛es
 - CPU.
APU_Cy˛es
) / 14; \

124 i‡(
	gl
 > 0) \

126 
	gl
 -
_EmuSPC
(
l
); \

127 
	gCPU
.
	gAPU_Cy˛es
 +
l
 * 14; \

133 #ifde‡
ASM_SPC700


136 "C" 
•c700_execuã
(
cy˛es
);

138 
	#APU_EXECUTE1
(Ë\

	)

140 
	gCPU
.
	gAPU_Cy˛es
 -
•c700_execuã
(0); \

145 
	#APU_EXECUTE
(
mode
Ë\

	)

146 i‡(
	gCPU
.
	gAPU_APUExecutög
 =
mode
) \

148 if(
CPU
.
APU_Cy˛es
 <CPU.
Cy˛es
) { \

149 
cy˛es
 = 
CPU
.
Cy˛es
 - CPU.
APU_Cy˛es
; \

150 
	gCPU
.
	gAPU_Cy˛es
 +
cy˛es
 - 
•c700_execuã
(cycles); \

156 
	#APU_EXECUTE1
(Ë\

	)

158 
	gCPU
.
	gAPU_Cy˛es
 +
S9xAPUCy˛es
 [*
IAPU
.
PC
]; \

159 (*
	gS9xApuOpcodes
[*
IAPU
.
PC
]) (); \

162 
	#APU_EXECUTE
(
x
Ë\

	)

163 i‡(
	gCPU
.
	gAPU_APUExecutög
) \

165 
	gCPU
.
	gAPU_Cy˛es
 <
CPU
.
Cy˛es
) \

166 
APU_EXECUTE1
(); \

	@spc700/spcgen.c

41 
	#ONE_APU_CYCLE
 21

	)

42 
	#VERSION
 "0.11"

	)

47 
	~<°dio.h
>

48 
	~<°d¨g.h
>

49 
	~<°rög.h
>

50 
	~<°dlib.h
>

54 
	gS9xAPUCy˛es
 [256] =

77 
FILE
 *
	gAsmFûe
=
NULL
;

78 
	g›code
=0;

80 
	$Ÿ
(*
f‹m©
, ...)

82 
va_li°
 
vÆi°
=
NULL
;

83 
i
, 
Àn
;

87 
i
=0, 
Àn
=
	`°æí
(
f‹m©
); i <Üen && format[i] != '\n'; i++);

88 if(
i
 < 
Àn
-1 && 
f‹m©
[Àn-1] !'\n'Ë
	`¥ötf
("\nWARNING:Öossible improperÇewlineÖlacement:\n%s\n", format);

90 
	`va_°¨t
(
vÆi°
,
f‹m©
);

91 i‡(
AsmFûe
Ë
	`vÂrötf
(AsmFûe,
f‹m©
,
vÆi°
);

92 
	`va_íd
(
vÆi°
);

93 
	}
}

109 
	$PrötFømew‹k
()

111 #i‚de‡
SPC_DEBUG


112 
	`Ÿ
(" .extern IAPU\n");

114 
	`Ÿ
(" .extern IAPU2\n");

116 
	`Ÿ
(" .extern CPU @ for STOPánd SLEEP\n");

117 
	`Ÿ
(" .extern S9xAPUGetByte\n");

118 
	`Ÿ
(" .extern S9xAPUSetByte\n");

119 
	`Ÿ
(" .extern S9xAPUGetByteZ\n");

120 
	`Ÿ
(" .extern S9xAPUSetByteZ\n\n");

122 
	`Ÿ
(" .global spc700_execute @ int cycles\n");

123 
	`Ÿ
(" .global Spc700JumpTab\n\n");

125 
	`Ÿ
(" opcode .reqÑ3\n");

126 
	`Ÿ
(" cycles .reqÑ4\n");

127 
	`Ÿ
(" context .reqÑ5\n");

128 
	`Ÿ
(" opcodes .reqÑ6\n");

129 
	`Ÿ
(" spc_pc .reqÑ7\n");

130 
	`Ÿ
(" spc_ya .reqÑ8\n");

131 
	`Ÿ
(" spc_p .reqÑ9\n");

132 
	`Ÿ
(" spc_x .reqÑ10\n");

133 
	`Ÿ
(" spc_s .reqÑ11\n");

134 
	`Ÿ
(" spc_ram .reqÜr\n\n");

136 
	`Ÿ
(" .equ iapu_directpage, 0x00\n");

137 
	`Ÿ
(" .equ iapu_ram, 0x44\n");

138 
	`Ÿ
(" .equ iapu_extraram, 0x48\n");

139 
	`Ÿ
(" .equ iapu_allregs_load, 0x30\n");

140 
	`Ÿ
(" .equ iapu_allregs_save, 0x34\n\n");

142 
	`Ÿ
(" .equ flag_c, 0x01\n");

143 
	`Ÿ
(" .equ flag_z, 0x02\n");

144 
	`Ÿ
(" .equ flag_i, 0x04\n");

145 
	`Ÿ
(" .equ flag_h, 0x08\n");

146 
	`Ÿ
(" .equ flag_b, 0x10\n");

147 
	`Ÿ
(" .equ flag_d, 0x20\n");

148 
	`Ÿ
(" .equ flag_o, 0x40\n");

149 
	`Ÿ
(" .equ flag_n, 0x80\n\n");

155 
	`Ÿ
("@ --------------------------- Framework --------------------------\n");

156 
	`Ÿ
("spc700_execute: @ int cycles\n");

158 
	`Ÿ
(" stmfd sp!,{r4-r11,lr}\n");

160 #i‚de‡
SPC_DEBUG


161 
	`Ÿ
("Üdr context,=IAPU @ PointerÅo SIAPU struct\n");

163 
	`Ÿ
("Üdr context,=IAPU2 @ PointerÅo SIAPU struct\n");

165 
	`Ÿ
(" mov cycles,r0 @ Cycles\n");

166 
	`Ÿ
("áddÑ0,context,#iapu_allregs_load\n");

167 
	`Ÿ
("ÜdmiaÑ0,{opcodes,spc_pc,spc_ya,spc_p,spc_x,spc_ram}\n");

169 
	`Ÿ
(" mov spc_s,spc_x,lsr #8\n");

170 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

171 
	`Ÿ
("\n");

173 
	`Ÿ
("Üdrb opcode,[spc_pc],#1 @ Fetch first opcode\n");

174 
	`Ÿ
("ÜdrÖc,[opcodes,opcode,lsl #2] @ JumpÅo opcode handler\n");

175 
	`Ÿ
("\n\n");

178 
	`Ÿ
("@ We come back hereáfterÉxecution\n");

179 
	`Ÿ
("spc700End:\n");

180 
	`Ÿ
(" orr spc_x,spc_x,spc_s,lsl #8\n");

181 
	`Ÿ
("áddÑ0,context,#iapu_allregs_save\n");

182 
	`Ÿ
(" stmiaÑ0,{spc_pc,spc_ya,spc_p,spc_x}\n");

183 
	`Ÿ
(" movÑ0,cycles\n");

184 
	`Ÿ
("Üdmfd sp!,{r4-r11,pc}\n");

185 
	`Ÿ
("\n");

187 
	`Ÿ
(" .ltorg\n");

188 
	`Ÿ
("\n");

189 
	}
}

195 
	$MemH™dÀr
(
£t
, 
z
, 
ßve
)

197 if(
£t
Ë
	`Ÿ
(" b» S9xAPUSëByã%s\n", 
z
 ? "Z" : "");

198 
	`Ÿ
(" b» S9xAPUGëByã%s\n", 
z
 ? "Z" : "");

200 if(
ßve
Ë
	`Ÿ
("Üdr spc_ram,[context,#iapu_ram]\n");

201 
	}
}

204 
	$Push
(*
ªg
)

206 
	`Ÿ
("áddÑ1,spc_ram,spc_s\n");

207 
	`Ÿ
(" såb %s,[r1,#0x100]\n", 
ªg
);

208 
	`Ÿ
(" sub spc_s,spc_s,#1\n");

209 
	}
}

212 
	$PushW
()

214 
	`Ÿ
("áddÑ1,spc_ram,spc_s\n");

215 
	`Ÿ
(" strbÑ0,[r1,#0xff]\n");

216 
	`Ÿ
(" movÑ0,r0,lsr #8\n");

217 
	`Ÿ
(" strbÑ0,[r1,#0x100]\n");

218 
	`Ÿ
(" sub spc_s,spc_s,#2\n");

219 
	}
}

222 
	$P›
(*
ªg
)

224 
	`Ÿ
("ádd spc_s,spc_s,#1\n");

225 
	`Ÿ
("ádd %s,•c_øm,•c_s\n", 
ªg
);

226 
	`Ÿ
("Üdrb %s,[%s,#0x100]\n", 
ªg
,Ñeg);

227 
	}
}

230 
	$P›W
()

232 
	`Ÿ
("ádd spc_s,spc_s,#2\n");

233 
	`Ÿ
("áddÑ1,spc_ram,spc_s\n");

234 
	`Ÿ
("ÜdrbÑ0,[r1,#0xff]\n");

235 
	`Ÿ
("ÜdrbÑ1,[r1,#0x100]\n");

236 
	`Ÿ
(" orrÑ0,r0,r1,lsl #8\n");

237 
	}
}

240 
	$Absﬁuã
(
r
)

242 
	`Ÿ
("ÜdrbÑ%i,[•c_pc],#1\n", 
r
);

243 
	`Ÿ
("ÜdrbÑ12,[spc_pc],#1\n");

244 
	`Ÿ
(" oºÑ%i,r%i,r12,l¶ #8\n", 
r
,Ñ);

245 
	}
}

248 
	$AbsﬁuãX
(
r
)

250 
	`Absﬁuã
(
r
);

251 
	`Ÿ
("áddÑ%i,r%i,•c_x\n", 
r
,Ñ);

252 
	}
}

255 
	$AbsﬁuãY
(
r
)

257 
	`Absﬁuã
(
r
);

258 
	`Ÿ
("áddÑ%i,r%i,•c_ya,l§ #8\n", 
r
,Ñ);

259 
	}
}

262 
	$Indúe˘IndexedY
(
r
)

264 
	`Ÿ
("ÜdrbÑ%i,[•c_pc],#1\n", 
r
);

265 
	`Ÿ
("ÜdrÑ12,[context,#iapu_directpage]\n");

266 
	`Ÿ
("ÜdrbÑ%i,[r12,r%i]!\n", 
r
,Ñ);

267 
	`Ÿ
("ÜdrbÑ12,[r12,#1]\n");

268 
	`Ÿ
(" oºÑ%i,r%i,r12,l¶ #8\n", 
r
,Ñ);

269 
	`Ÿ
("áddÑ%i,r%i,•c_ya,l§ #8\n", 
r
,Ñ);

270 
	}
}

273 
	$IndexedXIndúe˘
(
r
)

275 
	`Ÿ
("ÜdrbÑ%i,[•c_pc],#1\n", 
r
);

276 
	`Ÿ
("áddÑ%i,r%i,•c_x\n", 
r
,Ñ);

277 
	`Ÿ
("ándÑ%i,r%i,#0xff\n", 
r
,Ñ);

278 
	`Ÿ
("ÜdrÑ12,[context,#iapu_directpage]\n");

279 
	`Ÿ
("ÜdrbÑ%i,[r12,r%i]!\n", 
r
,Ñ);

280 
	`Ÿ
("ÜdrbÑ12,[r12,#1]\n");

281 
	`Ÿ
(" oºÑ%i,r%i,r12,l¶ #8\n", 
r
,Ñ);

282 
	}
}

285 
	$SëZN8
(*
ªg
)

287 
	`Ÿ
("ánd spc_p,spc_p,#0xff\n");

288 
	`Ÿ
(" oº spc_p,•c_p,%s,l¶ #24\n", 
ªg
);

289 
	}
}

292 
	$SëZN16
(*
ªg
)

294 
	`Ÿ
("ánd spc_p,spc_p,#0xff\n");

295 
	`Ÿ
(" oº spc_p,•c_p,%s,l¶ #16\n", 
ªg
);

296 
	`Ÿ
("Å° %s,#0xff\n", 
ªg
);

297 
	`Ÿ
(" orrne spc_p,spc_p,#0x01000000\n");

298 
	}
}

301 
	$Rﬁ
()

303 
	`Ÿ
(" movÑ0,r0,lsl #1\n");

304 
	`Ÿ
("Åst spc_p,#flag_c\n");

305 
	`Ÿ
(" orrneÑ0,r0,#1\n");

306 
	`Ÿ
("ÅstÑ0,#0x100\n");

307 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

308 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n");

309 
	`SëZN8
("r0");

310 
	}
}

313 
	$R‹
()

315 
	`Ÿ
("Åst spc_p,#flag_c\n");

316 
	`Ÿ
(" orrneÑ0,r0,#0x100\n");

317 
	`Ÿ
(" movsÑ0,r0,lsr #1\n");

318 
	`Ÿ
(" orrcs spc_p,spc_p,#flag_c\n");

319 
	`Ÿ
(" biccc spc_p,spc_p,#flag_c\n");

320 
	`SëZN8
("r0");

321 
	}
}

324 
	$A¶
()

326 
	`Ÿ
("ÅstÑ0,#0x80\n");

327 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

328 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n");

329 
	`Ÿ
(" movÑ0,r0,lsl #1\n");

330 
	`SëZN8
("r0");

331 
	}
}

334 
	$L§
()

336 
	`Ÿ
("ÅstÑ0,#0x01\n");

337 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

338 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n");

339 
	`Ÿ
(" movÑ0,r0,lsr #1\n");

340 
	`SëZN8
("r0");

341 
	}
}

344 
	$Cmp
(*
r0
, *
r1
, 
™d_r0
)

346 *
l›
 = 
r0
;

348 if(
™d_r0
Ë{ 
	`Ÿ
("ándÑ12,%s,#0xff\n", 
r0
); 
l›
 = "r12"; }

349 
	`Ÿ
(" sub†Ñ12,%s,%s\n", 
l›
, 
r1
);

350 
	`Ÿ
(" orrge spc_p,spc_p,#flag_c\n");

351 
	`Ÿ
(" biclt spc_p,spc_p,#flag_c\n");

352 
	`SëZN8
("r12");

353 
	}
}

356 
	$Adc
(*
r0
, *
r1
)

358 
	`Ÿ
("É‹Ñ3,%s,%s\n", 
r0
, 
r1
);

359 
	`Ÿ
("ádd %s,%s,%s\n", 
r0
,Ñ0, 
r1
);

360 
	`Ÿ
("Åst spc_p,#flag_c\n");

361 
	`Ÿ
("ádd√ %s,%s,#1\n", 
r0
,Ñ0);

362 
	`Ÿ
(" mov†Ñ12,%s,l§ #8\n", 
r0
);

363 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

364 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n");

365 
	`Ÿ
("É‹Ñ12,%s,%s\n", 
r0
, 
r1
);

366 
	`Ÿ
(" bicÑ12,r12,r3\n");

367 
	`Ÿ
("ÅstÑ12,#0x80\n");

368 
	`Ÿ
(" orrne spc_p,spc_p,#flag_o\n");

369 
	`Ÿ
(" biceq spc_p,spc_p,#flag_o\n");

370 
	`Ÿ
("É‹Ñ12,r3,%s\n", 
r0
);

371 
	`Ÿ
("ÅstÑ12,#0x10\n");

372 
	`Ÿ
(" orrne spc_p,spc_p,#flag_h\n");

373 
	`Ÿ
(" biceq spc_p,spc_p,#flag_h\n");

374 
	}
}

377 
	$Sbc
(*
r0
, *
r1
)

379 
	`Ÿ
(" movsÑ12,spc_p,lsr #1\n");

380 
	`Ÿ
(" sbc†Ñ2,%s,%s\n", 
r0
, 
r1
);

381 
	`Ÿ
(" orrge spc_p,spc_p,#flag_c\n");

382 
	`Ÿ
(" biclt spc_p,spc_p,#flag_c\n");

383 
	`Ÿ
("É‹Ñ12,%s,r2\n", 
r0
);

384 
	`Ÿ
("É‹Ñ3,%s,%s\n", 
r0
, 
r1
);

385 
	`Ÿ
("ándÑ12,r12,r3\n");

386 
	`Ÿ
("ÅstÑ12,#0x80\n");

387 
	`Ÿ
(" orrne spc_p,spc_p,#flag_o\n");

388 
	`Ÿ
(" biceq spc_p,spc_p,#flag_o\n");

389 
	`Ÿ
("É‹Ñ12,r3,r2\n", 
r0
);

390 
	`Ÿ
("ÅstÑ12,#0x10\n");

391 
	`Ÿ
(" orreq spc_p,spc_p,#flag_h\n");

392 
	`Ÿ
(" bicne spc_p,spc_p,#flag_h\n");

393 
	`Ÿ
(" mov %s,r2\n", 
r0
);

394 
	}
}

398 
	$TCÆl
()

400 
	`Ÿ
(" subÑ0,spc_pc,spc_ram\n");

401 
	`PushW
();

402 
	`Ÿ
("ÜdrÑ0,[context,#iapu_extraram]\n");

403 
	`Ÿ
("ÜdrhÑ0,[r0,#0x%x]\n", (15-(
›code
>>4))<<1);

404 
	`Ÿ
("ádd spc_pc,spc_ram,r0\n");

405 
	}
}

408 
	$SëCÃ1
()

410 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

411 
	`MemH™dÀr
(0, 1, 0);

412 
	`Ÿ
(" %†Ñ0,r0,#0x%02x\n", 
›code
 & 0x10 ? "bic" : "orr", 1<<(opcode>>5));

413 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

414 
	`MemH™dÀr
(1, 1, 1);

415 
	}
}

418 
	$BssBbc
()

420 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

421 
	`MemH™dÀr
(0, 1, 1);

422 
	`Ÿ
("Å°Ñ0,#0x%02x\n", 1<<(
›code
>>5));

423 
	`Ÿ
("ádd%†•c_pc,•c_pc,#1\n", 
›code
 & 0x10 ? "ne" : "eq");

424 
	`Ÿ
("Üdr%ssbÑ0,[•c_pc],#1\n", 
›code
 & 0x10 ? "eq" : "ne");

425 
	`Ÿ
("ádd%†•c_pc,•c_pc,r0\n", 
›code
 & 0x10 ? "eq" : "ne");

426 
	`Ÿ
(" sub%†cy˛es,cy˛es,#%i\n",
›code
 & 0x10 ? "eq" : "√", 
ONE_APU_CYCLE
*2);

427 
	}
}

430 
	$Membô
()

432 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

433 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

434 
	`Ÿ
("áddÑ0,r0,r1,lsl #8\n");

435 
	`Ÿ
(" movÑ1,r1,lsr #5\n");

436 
	`Ÿ
(" movÑ0,r0,lsl #19\n");

437 
	`Ÿ
(" movÑ0,r0,lsr #19\n");

438 
	`Ÿ
(" orr spc_x,spc_x,r1,lsl #29 @ store membit where it can survive memhandler call\n");

439 if((
›code
 >> 4) >= 0xC)

440 
	`Ÿ
(" stmfd sp!,{r0}\n");

441 
	`MemH™dÀr
(0, 0, 0);

442 
	`Ÿ
(" movÑ1,spc_x,lsr #29\n");

443 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

444 if((
›code
 >> 4) < 0xC) {

445 
	`Ÿ
(" movÑ0,r0,lsrÑ1\n");

446 
	`Ÿ
("ÅstÑ0,#1\n");

447 
›code
 >> 4) {

448 0x0: 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n"); ;

449 0x2: 
	`Ÿ
(" orreq spc_p,spc_p,#flag_c\n"); ;

450 0x4: 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n"); ;

451 0x6: 
	`Ÿ
(" bicne spc_p,spc_p,#flag_c\n"); ;

452 0x8: 
	`Ÿ
("Éorne spc_p,spc_p,#flag_c\n"); ;

453 0xA: 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

454 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n"); ;

457 
	`Ÿ
(" movÑ2,#1\n");

458 
	`Ÿ
(" movÑ2,r2,lslÑ1\n");

459 if((
›code
 >> 4) == 0xC) {

460 
	`Ÿ
("Åst spc_p,#flag_c\n");

461 
	`Ÿ
(" orrneÑ0,r0,r2\n");

462 
	`Ÿ
(" biceqÑ0,r0,r2\n");

464 
	`Ÿ
("ÉorÑ0,r0,r2\n");

466 
	`Ÿ
("Üdmfd sp!,{r1}\n");

467 
	`MemH™dÀr
(1, 0, 0);

469 
	`Ÿ
("Üdr spc_ram,[context,#iapu_ram] @Ñestore what memhandler(s) messed up\n");

470 
	}
}

473 
	$CBønch
()

475 
ã°s
[] = { 0x80000000, 0x40, 0x01, 0xff000000 };

476 *
eq
 = "eq";

477 *
√
 = "ne";

479 if((
›code
>>6) == 3) {

480 
eq
 = "ne";

481 
√
 = "eq";

484 
	`Ÿ
("Å° spc_p,#0x%08X\n", 
ã°s
[
›code
>>6]);

485 
	`Ÿ
("ádd%†•c_pc,•c_pc,#1\n", 
›code
 & 0x20 ? 
eq
 : 
√
);

494 
	`Ÿ
("Üdr%ssbÑ0,[•c_pc],#1\n", 
›code
 & 0x20 ? 
√
 : 
eq
);

495 
	`Ÿ
("ádd%†•c_pc,•c_pc,r0\n", 
›code
 & 0x20 ? 
√
 : 
eq
);

497 
	`Ÿ
(" sub%†cy˛es,cy˛es,#%i\n", 
›code
 & 0x20 ? 
√
 : 
eq
, 
ONE_APU_CYCLE
*2);

499 
	}
}

502 
	$ArôhOpToA
()

505 if((
›code
>>5) == 4 || (opcode>>5) == 5) {

506 
	`Ÿ
("ándÑ1,spc_ya,#0xff00\n");

507 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

510 
›code
>>5) {

511 0: 
	`Ÿ
(" orr spc_ya,spc_ya,r0\n"); ;

512 1: 
	`Ÿ
(" orrÑ0,r0,#0xff00\n");

513 
	`Ÿ
("ánd spc_ya,spc_ya,r0\n"); ;

514 2: 
	`Ÿ
("Éor spc_ya,spc_ya,r0\n"); ;

515 3: 
	`Cmp
("spc_ya", "r0", 1); ;

516 4: 
	`Adc
("spc_ya", "r0"); ;

517 5: 
	`Sbc
("spc_ya", "r0"); ;

518 6: 
	`¥ötf
("MOV (reversed)!?\n"); ;

519 7: 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

520 
	`Ÿ
(" orr spc_ya,spc_ya,r0\n"); ;

523 if((
›code
>>5Ë!3Ë
	`SëZN8
("spc_ya");

526 if((
›code
>>5) == 4 || (opcode>>5) == 5) {

527 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

528 
	`Ÿ
(" orr spc_ya,spc_ya,r1\n");

530 
	}
}

533 
	$ArôhmëicToA
()

535 
›code
&0x1f) {

537 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

538 
	`MemH™dÀr
(0, 1, 1);

539 
	`ArôhOpToA
();

543 
	`Absﬁuã
(0);

544 
	`MemH™dÀr
(0, 0, 1);

545 
	`ArôhOpToA
();

549 
	`Ÿ
(" movÑ0,spc_x\n");

550 
	`MemH™dÀr
(0, 1, 1);

551 
	`ArôhOpToA
();

555 
	`IndexedXIndúe˘
(0);

556 
	`MemH™dÀr
(0, 0, 1);

557 
	`ArôhOpToA
();

561 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

562 
	`ArôhOpToA
();

566 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

567 
	`Ÿ
("áddÑ0,r0,spc_x\n");

568 
	`MemH™dÀr
(0, 1, 1);

569 
	`ArôhOpToA
();

573 
	`AbsﬁuãX
(0);

574 
	`MemH™dÀr
(0, 0, 1);

575 
	`ArôhOpToA
();

579 
	`AbsﬁuãY
(0);

580 
	`MemH™dÀr
(0, 0, 1);

581 
	`ArôhOpToA
();

585 
	`Indúe˘IndexedY
(0);

586 
	`MemH™dÀr
(0, 0, 1);

587 
	`ArôhOpToA
();

591 
	`¥ötf
("O∞%02X -árôhmëic??\n", 
›code
);

593 
	}
}

596 
	$maö
()

598 
i
;

600 
	`¥ötf
("\¿ÇŸaz'†SPC700 Emuœt‹ v%†- C‹êCª©‹\n\n", 
VERSION
);

603 
AsmFûe
=
	`f›í
("•c700a.s", "wt"); i‡(AsmFûe==
NULL
)  1;

605 
	`Ÿ
("@ÇŸaz'†SPC700 Emuœt‹ v%†- As£mbÀ∏Ouçut\n\n", 
VERSION
);

606 
	`Ÿ
("@ (c) Copyright 2006Çotaz, AllÑightsÑeserved.\n\n");

607 
	`Ÿ
("@Åhis isáÑewrite of spc700.cpp in ARMásm, inspired by otherásm CPU coresÜike\n");

608 
	`Ÿ
("@ Cycloneánd DrZ80. It is meantÅo be used in Snes9xÉmulatorÖorts for ARMÖlatforms.\n\n");

609 
	`Ÿ
("@Åhe code isÑeleased under Snes9xÜicense. See spcgen.c orány other source file\n@ from Snes9x sourceÅree.\n\n\n");

611 
	`PrötFømew‹k
();

613 
›code
; opcode < 0x100; opcode++) {

614 
	`¥ötf
("%02X", 
›code
);

616 
	`Ÿ
("\n\n");

618 
	`Ÿ
("Apu%02X:\n", 
›code
);

620 if((
›code
 & 0x1fË=0x10Ë
	`CBønch
();

621 if((
›code
 & 0x0fË=0x01Ë
	`TCÆl
();

622 if((
›code
 & 0x0fË=0x02Ë
	`SëCÃ1
();

623 if((
›code
 & 0x0fË=0x03Ë
	`BssBbc
();

624 if((
›code
 & 0x1fË=0x0AË
	`Membô
();

625 if((
›code
 & 0x0f) >= 0x04 && (opcode & 0x0f) <= 0x08 && (opcode & 0x1f) != 0x18 && (opcode >> 5) != 6)

626 
	`ArôhmëicToA
();

629 
›code
) {

634 
	`Absﬁuã
(2);

635 
	`Ÿ
(" subÑ0,spc_pc,spc_ram\n");

636 
	`PushW
();

637 
	`Ÿ
("ádd spc_pc,spc_ram,r2\n");

641 
	`Ÿ
("ÜdrbÑ2,[spc_pc],#1\n");

642 
	`Ÿ
(" subÑ0,spc_pc,spc_ram\n");

643 
	`PushW
();

644 
	`Ÿ
("ádd spc_pc,spc_ram,r2\n");

645 
	`Ÿ
("ádd spc_pc,spc_pc,#0xff00\n");

649 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

650 
	`MemH™dÀr
(0, 1, 0);

651 
	`Ÿ
(" orr spc_x,spc_x,r0,lsl #24 @ save from harm\n");

652 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

653 
	`MemH™dÀr
(0, 1, 0);

654 
	`Ÿ
(" orrÑ0,r0,spc_x,lsr #24\n");

655 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

656 
	`SëZN8
("r0");

657 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

658 
	`MemH™dÀr
(1, 1, 1);

662 
	`Ÿ
("ÜdrbÑ0,[spc_pc,#1]\n");

663 
	`MemH™dÀr
(0, 1, 0);

664 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

665 
	`Ÿ
(" orrÑ0,r0,r1\n");

666 
	`SëZN8
("r0");

667 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

668 
	`MemH™dÀr
(1, 1, 1);

672 
	`Ÿ
(" movÑ0,spc_x\n");

673 
	`MemH™dÀr
(0, 1, 0);

674 
	`Ÿ
(" orr spc_x,spc_x,r0,lsl #24\n");

675 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

676 
	`MemH™dÀr
(0, 1, 0);

677 
	`Ÿ
(" orrÑ0,r0,spc_x,lsr #24\n");

678 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

679 
	`SëZN8
("r0");

680 
	`Ÿ
(" movÑ1,spc_x\n");

681 
	`MemH™dÀr
(1, 1, 1);

685 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

686 
	`MemH™dÀr
(0, 1, 0);

687 
	`A¶
();

688 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

689 
	`MemH™dÀr
(1, 1, 1);

693 
	`Absﬁuã
(0);

694 
	`Ÿ
(" stmfd sp!,{r0}\n");

695 
	`MemH™dÀr
(0, 0, 0);

696 
	`A¶
();

697 
	`Ÿ
("Üdmfd sp!,{r1}\n");

698 
	`MemH™dÀr
(1, 0, 1);

702 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

703 
	`Ÿ
("áddÑ0,r0,spc_x\n");

704 
	`Ÿ
(" stmfd sp!,{r0}\n");

705 
	`MemH™dÀr
(0, 1, 0);

706 
	`A¶
();

707 
	`Ÿ
("Üdmfd sp!,{r1}\n");

708 
	`MemH™dÀr
(1, 1, 1);

712 
	`Ÿ
("Åst spc_ya,#0x80\n");

713 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

714 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n");

715 
	`Ÿ
("ándÑ0,spc_ya,#0x7f\n");

716 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

717 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #1\n");

718 
	`SëZN8
("spc_ya");

722 
	`Ÿ
(" movÑ0,spc_p,lsr #24\n");

723 
	`Ÿ
("ándÑ1,r0,#0x80\n");

724 
	`Ÿ
("ÅstÑ0,r0\n");

725 
	`Ÿ
(" orreqÑ1,r1,#flag_z\n");

726 
	`Ÿ
("ánd spc_p,spc_p,#0x7d @ clear N & Z\n");

727 
	`Ÿ
(" orr spc_p,spc_p,r1\n");

728 
	`Push
("spc_p");

729 
	`Ÿ
(" orr spc_p,spc_p,r0,lsl #24\n");

733 
	`Push
("spc_ya");

737 
	`Push
("spc_x");

741 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

742 
	`Push
("r0");

746 
	`P›
("spc_p");

747 
	`Ÿ
("ándÑ0,spc_p,#(flag_z|flag_n)\n");

748 
	`Ÿ
("ÉorÑ0,r0,#flag_z\n");

749 
	`Ÿ
(" orr spc_p,spc_p,r0,lsl #24\n");

750 
	`Ÿ
("Åst spc_p,#flag_d\n");

751 
	`Ÿ
("áddneÑ0,spc_ram,#0x100\n");

752 
	`Ÿ
(" moveqÑ0,spc_ram\n");

753 
	`Ÿ
(" strÑ0,[context,#iapu_directpage]\n");

757 
	`P›
("r0");

758 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

759 
	`Ÿ
(" orr spc_ya,spc_ya,r0\n");

763 
	`P›
("spc_x");

767 
	`P›
("r0");

768 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

769 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

773 
	`Absﬁuã
(0);

774 
	`Ÿ
(" orr spc_x,spc_x,r0,lsl #16 @ save from memhandler\n");

775 
	`MemH™dÀr
(0, 0, 0);

776 
	`Ÿ
("ándÑ2,r0,spc_ya\n");

777 
	`SëZN8
("r2");

778 
	`Ÿ
(" orrÑ0,r0,spc_ya\n");

779 
	`Ÿ
(" movÑ1,spc_x,lsr #16\n");

780 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

781 
	`MemH™dÀr
(1, 0, 1);

785 
	`Absﬁuã
(0);

786 
	`Ÿ
(" orr spc_x,spc_x,r0,lsl #16 @ save from memhandler\n");

787 
	`MemH™dÀr
(0, 0, 0);

788 
	`Ÿ
("ándÑ2,r0,spc_ya\n");

789 
	`SëZN8
("r2");

790 
	`Ÿ
(" bicÑ0,r0,spc_ya\n");

791 
	`Ÿ
(" movÑ1,spc_x,lsr #16\n");

792 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

793 
	`MemH™dÀr
(1, 0, 1);

797 
	`Ÿ
(" subÑ0,spc_pc,spc_ram\n");

798 
	`PushW
();

799 
	`Ÿ
(" movÑ0,spc_p,lsr #24\n");

800 
	`Ÿ
("ándÑ1,r0,#0x80\n");

801 
	`Ÿ
("ÅstÑ0,r0\n");

802 
	`Ÿ
(" orrneÑ1,r1,#flag_z\n");

803 
	`Ÿ
("ánd spc_p,spc_p,#0x7d @ clear N & Z\n");

804 
	`Ÿ
(" orr spc_p,spc_p,r1\n");

805 
	`Push
("spc_p");

806 
	`Ÿ
(" orr spc_p,spc_p,#flag_b\n");

807 
	`Ÿ
(" bic spc_p,spc_p,#flag_i\n");

808 
	`Ÿ
("ÜdrÑ0,[context,#iapu_extraram]\n");

809 
	`Ÿ
("ÜdrhÑ0,[r0,#0x20]\n");

810 
	`Ÿ
("ádd spc_pc,spc_ram,r0\n");

815 
	`Ÿ
("ÜdrÑ0,=CPU\n");

816 
	`Ÿ
(" movÑ1,#0\n");

817 
	`Ÿ
(" strbÑ1,[r0,#122]\n");

821 
	`Ÿ
("ÜdrsbÑ0,[spc_pc],#1\n");

822 
	`Ÿ
("ádd spc_pc,spc_pc,r0\n");

826 
	`Ÿ
(" orr spc_p,spc_p,#flag_c\n");

830 
	`Ÿ
("Éor spc_p,spc_p,#flag_c\n");

834 
	`Ÿ
(" orr spc_p,spc_p,#flag_d\n");

835 
	`Ÿ
("áddÑ0,spc_ram,#0x100\n");

836 
	`Ÿ
(" strÑ0,[context,#iapu_directpage]\n");

840 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

841 
	`MemH™dÀr
(0, 1, 0);

842 
	`Ÿ
(" stmfd sp!,{r0}\n");

843 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

844 
	`Ÿ
("áddÑ0,r0,#1\n");

845 
	`MemH™dÀr
(0, 1, 0);

846 
	`Ÿ
("Üdmfd sp!,{r1}\n");

847 
	`Ÿ
(" orrÑ1,r1,r0,lsl #8\n");

848 
	`Ÿ
(" subÑ0,r1,#1\n");

849 
	`SëZN16
("r0");

850 
	`Ÿ
(" stmfd sp!,{r0}\n");

851 
	`Ÿ
("ÜdrbÑ1,[spc_pc]\n");

852 
	`MemH™dÀr
(1, 1, 0);

853 
	`Ÿ
("Üdmfd sp!,{r0}\n");

854 
	`Ÿ
(" movÑ0,r0,lsr #8\n");

855 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

856 
	`Ÿ
("áddÑ1,r1,#1\n");

857 
	`MemH™dÀr
(1, 1, 1);

861 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

862 
	`MemH™dÀr
(0, 1, 0);

863 
	`Ÿ
(" stmfd sp!,{r0}\n");

864 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

865 
	`Ÿ
("áddÑ0,r0,#1\n");

866 
	`MemH™dÀr
(0, 1, 1);

867 
	`Ÿ
("Üdmfd sp!,{r1}\n");

868 
	`Ÿ
(" orrÑ1,r1,r0,lsl #8\n");

869 
	`Ÿ
(" subsÑ0,spc_ya,r1\n");

870 
	`Ÿ
(" orrge spc_p,spc_p,#flag_c\n");

871 
	`Ÿ
(" biclt spc_p,spc_p,#flag_c\n");

872 
	`SëZN16
("r0");

876 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

877 
	`MemH™dÀr
(0, 1, 0);

878 
	`Ÿ
(" stmfd sp!,{r0}\n");

879 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

880 
	`Ÿ
("áddÑ0,r0,#1\n");

881 
	`MemH™dÀr
(0, 1, 0);

882 
	`Ÿ
("Üdmfd sp!,{r1}\n");

883 
	`Ÿ
(" orrÑ1,r1,r0,lsl #8\n");

884 
	`Ÿ
("áddÑ0,r1,#1\n");

885 
	`SëZN16
("r0");

886 
	`Ÿ
(" stmfd sp!,{r0}\n");

887 
	`Ÿ
("ÜdrbÑ1,[spc_pc]\n");

888 
	`MemH™dÀr
(1, 1, 0);

889 
	`Ÿ
("Üdmfd sp!,{r0}\n");

890 
	`Ÿ
(" movÑ0,r0,lsr #8\n");

891 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

892 
	`Ÿ
("áddÑ1,r1,#1\n");

893 
	`MemH™dÀr
(1, 1, 1);

897 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

898 
	`MemH™dÀr
(0, 1, 0);

899 
	`Ÿ
(" stmfd sp!,{r0}\n");

900 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

901 
	`Ÿ
("áddÑ0,r0,#1\n");

902 
	`MemH™dÀr
(0, 1, 1);

903 
	`Ÿ
("Üdmfd sp!,{r1}\n");

904 
	`Ÿ
(" orrÑ1,r1,r0,lsl #8\n");

905 
	`Ÿ
("áddÑ0,spc_ya,r1\n");

906 
	`Ÿ
(" movsÑ2,r0,lsr #16\n");

907 
	`Ÿ
(" orrne spc_p,spc_p,#flag_c\n");

908 
	`Ÿ
(" biceq spc_p,spc_p,#flag_c\n");

909 
	`Ÿ
(" bicÑ2,r0,#0x00ff0000\n");

910 
	`Ÿ
("ÉorÑ3,r1,r2\n");

911 
	`Ÿ
("ÉorÑ12,spc_ya,r1\n");

912 
	`Ÿ
(" mvnÑ12,r12\n");

913 
	`Ÿ
("ándÑ12,r12,r3\n");

914 
	`Ÿ
("ÅstÑ12,#0x8000\n");

915 
	`Ÿ
(" orrne spc_p,spc_p,#flag_o\n");

916 
	`Ÿ
(" biceq spc_p,spc_p,#flag_o\n");

917 
	`Ÿ
("ÉorÑ12,r3,spc_ya\n");

918 
	`Ÿ
("ÅstÑ12,#0x10\n");

919 
	`Ÿ
(" orrne spc_p,spc_p,#flag_h\n");

920 
	`Ÿ
(" biceq spc_p,spc_p,#flag_h\n");

921 
	`Ÿ
(" mov spc_ya,r2\n");

922 
	`SëZN16
("spc_ya");

926 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

927 
	`MemH™dÀr
(0, 1, 0);

928 
	`Ÿ
(" stmfd sp!,{r0}\n");

929 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

930 
	`Ÿ
("áddÑ0,r0,#1\n");

931 
	`MemH™dÀr
(0, 1, 1);

932 
	`Ÿ
("Üdmfd sp!,{r1}\n");

933 
	`Ÿ
(" orrÑ1,r1,r0,lsl #8\n");

934 
	`Ÿ
(" subsÑ0,spc_ya,r1\n");

935 
	`Ÿ
(" orrge spc_p,spc_p,#flag_c\n");

936 
	`Ÿ
(" biclt spc_p,spc_p,#flag_c\n");

937 
	`Ÿ
(" movÑ2,r0,lsl #16\n");

938 
	`Ÿ
(" movÑ2,r2,lsr #16\n");

939 
	`Ÿ
("ÉorÑ3,spc_ya,r2\n");

940 
	`Ÿ
("ÉorÑ12,spc_ya,r1\n");

941 
	`Ÿ
("ándÑ12,r12,r3\n");

942 
	`Ÿ
("ÅstÑ12,#0x8000\n");

943 
	`Ÿ
(" orrne spc_p,spc_p,#flag_o\n");

944 
	`Ÿ
(" biceq spc_p,spc_p,#flag_o\n");

945 
	`Ÿ
("ÉorÑ12,r3,r1\n");

946 
	`Ÿ
("ÅstÑ12,#0x10\n");

947 
	`Ÿ
(" bicne spc_p,spc_p,#flag_h\n");

948 
	`Ÿ
(" orreq spc_p,spc_p,#flag_h\n");

949 
	`Ÿ
(" mov spc_ya,r2\n");

950 
	`SëZN16
("spc_ya");

954 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

955 
	`MemH™dÀr
(0, 1, 0);

956 
	`Ÿ
(" mov spc_ya,r0\n");

957 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

958 
	`Ÿ
("áddÑ0,r0,#1\n");

959 
	`MemH™dÀr
(0, 1, 1);

960 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

961 
	`SëZN16
("spc_ya");

965 
	`Ÿ
("ÜdrbÑ1,[spc_pc]\n");

966 
	`Ÿ
(" movÑ0,spc_ya\n");

967 
	`MemH™dÀr
(1, 1, 0);

968 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

969 
	`Ÿ
("áddÑ1,r1,#1\n");

970 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

971 
	`MemH™dÀr
(1, 1, 1);

975 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

976 
	`MemH™dÀr
(0, 1, 0);

977 
	`Ÿ
(" orr spc_x,spc_x,r0,lsl #24\n");

978 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

979 
	`MemH™dÀr
(0, 1, 1);

980 
	`Ÿ
(" movÑ1,spc_x,lsr #24\n");

981 
	`Cmp
("r0", "r1", 0);

982 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

986 
	`Ÿ
("ÜdrbÑ0,[spc_pc,#1]\n");

987 
	`MemH™dÀr
(0, 1, 1);

988 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#2\n");

989 
	`Cmp
("r0", "r1", 0);

993 
	`Ÿ
(" movÑ0,spc_x\n");

994 
	`MemH™dÀr
(0, 1, 0);

995 
	`Ÿ
(" orr spc_x,spc_x,r0,lsl #24\n");

996 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

997 
	`MemH™dÀr
(0, 1, 1);

998 
	`Ÿ
(" movÑ1,spc_x,lsr #24\n");

999 
	`Cmp
("r1", "r0", 0);

1000 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

1004 
	`Absﬁuã
(0);

1005 
	`MemH™dÀr
(0, 0, 1);

1006 
	`Cmp
("spc_x", "r0", 0);

1010 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1011 
	`MemH™dÀr
(0, 1, 1);

1012 
	`Cmp
("spc_x", "r0", 0);

1016 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1017 
	`Cmp
("spc_x", "r0", 0);

1021 
	`Absﬁuã
(0);

1022 
	`MemH™dÀr
(0, 0, 1);

1023 
	`Ÿ
(" movÑ1,spc_ya,lsr #8\n");

1024 
	`Cmp
("r1", "r0", 0);

1028 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1029 
	`MemH™dÀr
(0, 1, 1);

1030 
	`Ÿ
(" movÑ1,spc_ya,lsr #8\n");

1031 
	`Cmp
("r1", "r0", 0);

1035 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1036 
	`Ÿ
(" movÑ1,spc_ya,lsr #8\n");

1037 
	`Cmp
("r1", "r0", 0);

1041 
	`AbsﬁuãX
(0);

1042 
	`Ÿ
(" sub sp,sp,#8\n");

1043 
	`Ÿ
(" strÑ0,[sp,#4]\n");

1044 
	`MemH™dÀr
(0, 0, 0);

1045 
	`Ÿ
(" strÑ0,[sp]\n");

1046 
	`Ÿ
("ÜdrÑ0,[sp,#4]\n");

1047 
	`Ÿ
("áddÑ0,r0,#1\n");

1048 
	`MemH™dÀr
(0, 0, 1);

1049 
	`Ÿ
("ÜdrÑ1,[sp],#8\n");

1050 
	`Ÿ
(" orrÑ0,r1,r0,lsl #8\n");

1051 
	`Ÿ
("ádd spc_pc,spc_ram,r0\n");

1055 
	`Absﬁuã
(0);

1056 
	`Ÿ
("ádd spc_pc,spc_ram,r0\n");

1060 
	`Ÿ
(" bic spc_p,spc_p,#flag_d\n");

1061 
	`Ÿ
(" str spc_ram,[context,#iapu_directpage]\n");

1065 
	`Ÿ
(" bic spc_p,spc_p,#flag_c\n");

1069 
	`Ÿ
(" bic spc_p,spc_p,#(flag_o|flag_h)\n");

1073 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1074 
	`MemH™dÀr
(0, 1, 0);

1075 
	`Ÿ
(" stmfd sp!,{r0}\n");

1076 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1077 
	`MemH™dÀr
(0, 1, 0);

1078 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1079 
	`Ÿ
("ándÑ0,r0,r1\n");

1080 
	`SëZN8
("r0");

1081 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1082 
	`MemH™dÀr
(1, 1, 1);

1086 
	`Ÿ
("ÜdrbÑ0,[spc_pc,#1]\n");

1087 
	`MemH™dÀr
(0, 1, 0);

1088 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#2\n");

1089 
	`Ÿ
("ándÑ0,r0,r1\n");

1090 
	`SëZN8
("r0");

1091 
	`Ÿ
("ÜdrbÑ1,[spc_pc,#-1]\n");

1092 
	`MemH™dÀr
(1, 1, 1);

1096 
	`Ÿ
(" movÑ0,spc_x\n");

1097 
	`MemH™dÀr
(0, 1, 0);

1098 
	`Ÿ
(" stmfd sp!,{r0}\n");

1099 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1100 
	`MemH™dÀr
(0, 1, 0);

1101 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1102 
	`Ÿ
("ándÑ0,r0,r1\n");

1103 
	`SëZN8
("r0");

1104 
	`Ÿ
(" movÑ1,spc_x\n");

1105 
	`MemH™dÀr
(1, 1, 1);

1109 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1110 
	`MemH™dÀr
(0, 1, 0);

1111 
	`Rﬁ
();

1112 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1113 
	`MemH™dÀr
(1, 1, 1);

1117 
	`Absﬁuã
(0);

1118 
	`Ÿ
(" stmfd sp!,{r0}\n");

1119 
	`MemH™dÀr
(0, 0, 0);

1120 
	`Rﬁ
();

1121 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1122 
	`MemH™dÀr
(1, 0, 1);

1126 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1127 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1128 
	`MemH™dÀr
(0, 1, 0);

1129 
	`Rﬁ
();

1130 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1131 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1132 
	`MemH™dÀr
(1, 1, 1);

1136 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1137 
	`Rﬁ
();

1138 
	`Ÿ
("ándÑ0,r0,#0xff\n");

1139 
	`Ÿ
(" mov spc_ya,spc_ya,lsr #8\n");

1140 
	`Ÿ
(" orr spc_ya,r0,spc_ya,lsl #8\n");

1144 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1145 
	`MemH™dÀr
(0, 1, 1);

1146 
	`Ÿ
("ándÑ1,spc_ya,#0xff\n");

1147 
	`Ÿ
(" cmpÑ0,r1\n");

1148 
	`Ÿ
("áddeq spc_pc,spc_pc,#1\n");

1149 
	`Ÿ
("ÜdrnesbÑ0,[spc_pc],#1\n");

1150 
	`Ÿ
("áddne spc_pc,spc_pc,r0\n");

1151 
	`Ÿ
(" sub√ cy˛es,cy˛es,#%i\n", 
ONE_APU_CYCLE
*2);

1155 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1156 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1157 
	`MemH™dÀr
(0, 1, 1);

1158 
	`Ÿ
("ándÑ1,spc_ya,#0xff\n");

1159 
	`Ÿ
(" cmpÑ0,r1\n");

1160 
	`Ÿ
("áddeq spc_pc,spc_pc,#1\n");

1161 
	`Ÿ
("ÜdrnesbÑ0,[spc_pc],#1\n");

1162 
	`Ÿ
("áddne spc_pc,spc_pc,r0\n");

1163 
	`Ÿ
(" sub√ cy˛es,cy˛es,#%i\n", 
ONE_APU_CYCLE
*2);

1167 
	`Ÿ
("ádd spc_x,spc_x,#1\n");

1168 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

1169 
	`SëZN8
("spc_x");

1173 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1174 
	`Ÿ
("áddÑ0,r0,#1\n");

1175 
	`Ÿ
("ándÑ0,r0,#0xff\n");

1176 
	`SëZN8
("r0");

1177 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1178 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

1182 
	`Ÿ
(" sub spc_x,spc_x,#1\n");

1183 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

1184 
	`SëZN8
("spc_x");

1188 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1189 
	`Ÿ
(" subÑ0,r0,#1\n");

1190 
	`Ÿ
("ándÑ0,r0,#0xff\n");

1191 
	`SëZN8
("r0");

1192 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1193 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

1197 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1198 
	`MemH™dÀr
(0, 1, 0);

1199 
	`Ÿ
("áddÑ0,r0,#1\n");

1200 
	`SëZN8
("r0");

1201 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1202 
	`MemH™dÀr
(1, 1, 1);

1206 
	`Absﬁuã
(0);

1207 
	`Ÿ
(" stmfd sp!,{r0}\n");

1208 
	`MemH™dÀr
(0, 0, 0);

1209 
	`Ÿ
("áddÑ0,r0,#1\n");

1210 
	`SëZN8
("r0");

1211 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1212 
	`MemH™dÀr
(1, 0, 1);

1216 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1217 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1218 
	`MemH™dÀr
(0, 1, 0);

1219 
	`Ÿ
("áddÑ0,r0,#1\n");

1220 
	`SëZN8
("r0");

1221 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1222 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1223 
	`MemH™dÀr
(1, 1, 1);

1227 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1228 
	`Ÿ
("áddÑ0,r0,#1\n");

1229 
	`SëZN8
("r0");

1230 
	`Ÿ
("ándÑ0,r0,#0xff\n");

1231 
	`Ÿ
(" mov spc_ya,spc_ya,lsr #8\n");

1232 
	`Ÿ
(" orr spc_ya,r0,spc_ya,lsl #8\n");

1236 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1237 
	`MemH™dÀr
(0, 1, 0);

1238 
	`Ÿ
(" subÑ0,r0,#1\n");

1239 
	`SëZN8
("r0");

1240 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1241 
	`MemH™dÀr
(1, 1, 1);

1245 
	`Absﬁuã
(0);

1246 
	`Ÿ
(" stmfd sp!,{r0}\n");

1247 
	`MemH™dÀr
(0, 0, 0);

1248 
	`Ÿ
(" subÑ0,r0,#1\n");

1249 
	`SëZN8
("r0");

1250 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1251 
	`MemH™dÀr
(1, 0, 1);

1255 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1256 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1257 
	`MemH™dÀr
(0, 1, 0);

1258 
	`Ÿ
(" subÑ0,r0,#1\n");

1259 
	`SëZN8
("r0");

1260 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1261 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1262 
	`MemH™dÀr
(1, 1, 1);

1266 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1267 
	`Ÿ
(" subÑ0,r0,#1\n");

1268 
	`SëZN8
("r0");

1269 
	`Ÿ
("ándÑ0,r0,#0xff\n");

1270 
	`Ÿ
(" mov spc_ya,spc_ya,lsr #8\n");

1271 
	`Ÿ
(" orr spc_ya,r0,spc_ya,lsl #8\n");

1275 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1276 
	`MemH™dÀr
(0, 1, 0);

1277 
	`Ÿ
(" stmfd sp!,{r0}\n");

1278 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1279 
	`MemH™dÀr
(0, 1, 0);

1280 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1281 
	`Ÿ
("ÉorÑ0,r0,r1\n");

1282 
	`SëZN8
("r0");

1283 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1284 
	`MemH™dÀr
(1, 1, 1);

1288 
	`Ÿ
("ÜdrbÑ0,[spc_pc,#1]\n");

1289 
	`MemH™dÀr
(0, 1, 0);

1290 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#2\n");

1291 
	`Ÿ
("ÉorÑ0,r0,r1\n");

1292 
	`SëZN8
("r0");

1293 
	`Ÿ
("ÜdrbÑ1,[spc_pc,#-1]\n");

1294 
	`MemH™dÀr
(1, 1, 1);

1298 
	`Ÿ
(" movÑ0,spc_x\n");

1299 
	`MemH™dÀr
(0, 1, 0);

1300 
	`Ÿ
(" stmfd sp!,{r0}\n");

1301 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1302 
	`MemH™dÀr
(0, 1, 0);

1303 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1304 
	`Ÿ
("ÉorÑ0,r0,r1\n");

1305 
	`SëZN8
("r0");

1306 
	`Ÿ
(" movÑ1,spc_x\n");

1307 
	`MemH™dÀr
(1, 1, 1);

1311 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1312 
	`MemH™dÀr
(0, 1, 0);

1313 
	`L§
();

1314 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1315 
	`MemH™dÀr
(1, 1, 1);

1319 
	`Absﬁuã
(0);

1320 
	`Ÿ
(" stmfd sp!,{r0}\n");

1321 
	`MemH™dÀr
(0, 0, 0);

1322 
	`L§
();

1323 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1324 
	`MemH™dÀr
(1, 0, 1);

1328 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1329 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1330 
	`MemH™dÀr
(0, 1, 0);

1331 
	`L§
();

1332 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1333 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1334 
	`MemH™dÀr
(1, 1, 1);

1338 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1339 
	`L§
();

1340 
	`Ÿ
(" mov spc_ya,spc_ya,lsr #8\n");

1341 
	`Ÿ
(" orr spc_ya,r0,spc_ya,lsl #8\n");

1345 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

1346 
	`Ÿ
(" orr spc_ya,spc_ya,spc_x\n");

1347 
	`SëZN8
("spc_ya");

1351 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

1352 
	`Ÿ
(" orr spc_ya,spc_ya,spc_ya,lsr #8\n");

1353 
	`SëZN8
("spc_ya");

1357 
	`Ÿ
("ánd spc_x,spc_ya,#0xff\n");

1358 
	`SëZN8
("spc_x");

1362 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1363 
	`Ÿ
(" orr spc_ya,spc_ya,spc_ya,lsl #8\n");

1364 
	`SëZN8
("spc_ya");

1368 
	`Ÿ
(" mov spc_x,spc_s\n");

1369 
	`SëZN8
("spc_x");

1373 
	`Ÿ
(" mov spc_s,spc_x\n");

1377 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1378 
	`MemH™dÀr
(0, 1, 0);

1379 
	`R‹
();

1380 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1381 
	`MemH™dÀr
(1, 1, 1);

1385 
	`Absﬁuã
(0);

1386 
	`Ÿ
(" stmfd sp!,{r0}\n");

1387 
	`MemH™dÀr
(0, 0, 0);

1388 
	`R‹
();

1389 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1390 
	`MemH™dÀr
(1, 0, 1);

1394 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1395 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1396 
	`MemH™dÀr
(0, 1, 0);

1397 
	`R‹
();

1398 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1399 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1400 
	`MemH™dÀr
(1, 1, 1);

1404 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1405 
	`R‹
();

1406 
	`Ÿ
(" mov spc_ya,spc_ya,lsr #8\n");

1407 
	`Ÿ
(" orr spc_ya,r0,spc_ya,lsl #8\n");

1411 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1412 
	`MemH™dÀr
(0, 1, 0);

1413 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1414 
	`Ÿ
(" subÑ0,r0,#1\n");

1415 
	`Ÿ
("ÅstÑ0,r0\n");

1416 
	`Ÿ
("áddeq spc_pc,spc_pc,#1\n");

1417 
	`Ÿ
("ÜdrnesbÑ2,[spc_pc],#1\n");

1418 
	`Ÿ
("áddne spc_pc,spc_pc,r2\n");

1419 
	`Ÿ
(" sub√ cy˛es,cy˛es,#%i\n", 
ONE_APU_CYCLE
*2);

1420 
	`MemH™dÀr
(1, 1, 1);

1424 
	`Ÿ
(" sub spc_ya,spc_ya,#0x100\n");

1425 
	`Ÿ
(" mov spc_ya,spc_ya,lsl #16\n");

1426 
	`Ÿ
(" mov spc_ya,spc_ya,lsr #16\n");

1427 
	`Ÿ
(" movsÑ0,spc_ya,lsr #8\n");

1428 
	`Ÿ
("áddeq spc_pc,spc_pc,#1\n");

1429 
	`Ÿ
("ÜdrnesbÑ0,[spc_pc],#1\n");

1430 
	`Ÿ
("áddne spc_pc,spc_pc,r0\n");

1431 
	`Ÿ
(" sub√ cy˛es,cy˛es,#%i\n", 
ONE_APU_CYCLE
*2);

1435 
	`P›W
();

1436 
	`Ÿ
("ádd spc_pc,spc_ram,r0\n");

1440 
	`P›
("spc_p");

1441 
	`Ÿ
("ándÑ0,spc_p,#(flag_z|flag_n)\n");

1442 
	`Ÿ
("ÉorÑ0,r0,#flag_z\n");

1443 
	`Ÿ
(" orr spc_p,spc_p,r0,lsl #24\n");

1444 
	`Ÿ
("Åst spc_p,#flag_d\n");

1445 
	`Ÿ
("áddneÑ0,spc_ram,#0x100\n");

1446 
	`Ÿ
(" moveqÑ0,spc_ram\n");

1447 
	`Ÿ
(" strÑ0,[context,#iapu_directpage]\n");

1448 
	`P›W
();

1449 
	`Ÿ
("ádd spc_pc,spc_ram,r0\n");

1453 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1454 
	`MemH™dÀr
(0, 1, 0);

1455 
	`Ÿ
(" stmfd sp!,{r0}\n");

1456 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1457 
	`MemH™dÀr
(0, 1, 0);

1458 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1459 
	`Adc
("r0", "r1");

1460 
	`SëZN8
("r0");

1461 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1462 
	`MemH™dÀr
(1, 1, 1);

1466 
	`Ÿ
("ÜdrbÑ0,[spc_pc,#1]\n");

1467 
	`MemH™dÀr
(0, 1, 0);

1468 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#2\n");

1469 
	`Adc
("r0", "r1");

1470 
	`SëZN8
("r0");

1471 
	`Ÿ
("ÜdrbÑ1,[spc_pc,#-1]\n");

1472 
	`MemH™dÀr
(1, 1, 1);

1476 
	`Ÿ
(" movÑ0,spc_x\n");

1477 
	`MemH™dÀr
(0, 1, 0);

1478 
	`Ÿ
(" stmfd sp!,{r0}\n");

1479 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1480 
	`MemH™dÀr
(0, 1, 0);

1481 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1482 
	`Adc
("r0", "r1");

1483 
	`SëZN8
("r0");

1484 
	`Ÿ
(" movÑ1,spc_x\n");

1485 
	`MemH™dÀr
(1, 1, 1);

1489 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1490 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1491 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

1492 
	`SëZN8
("r0");

1496 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1497 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1498 
	`MemH™dÀr
(1, 1, 1);

1502 
	`Ÿ
("Åst spc_x,spc_x @ div by 0?\n");

1503 
	`Ÿ
(" orreq spc_ya,spc_ya,#0xff00\n");

1504 
	`Ÿ
(" orreq spc_ya,spc_ya,#0x00ff\n");

1505 
	`Ÿ
(" orreq spc_p,spc_p,#flag_o\n");

1506 
	`Ÿ
(" beq Apu9E_end\n");

1507 
	`Ÿ
(" bic spc_p,spc_p,#flag_o\n");

1510 
	`Ÿ
("@ Divide spc_ya by spc_x\n");

1511 
	`Ÿ
(" movÑ3,#0\n");

1512 
	`Ÿ
(" movÑ1,spc_x\n");

1513 
	`Ÿ
("\n");

1524 
	`Ÿ
("@ Shift up divisorÅill it's justÜessÅhanÇumerator\n");

1525 
	`Ÿ
("cmp spc_ya,r1,lsl #8\n");

1526 
	`Ÿ
("movgeÑ1,r1,lsl #8\n");

1527 
	`Ÿ
("cmp spc_ya,r1,lsl #4\n");

1528 
	`Ÿ
("movgeÑ1,r1,lsl #4\n");

1529 
	`Ÿ
("cmp spc_ya,r1,lsl #2\n");

1530 
	`Ÿ
("movgeÑ1,r1,lsl #2\n");

1531 
	`Ÿ
("cmp spc_ya,r1,lsl #1\n");

1532 
	`Ÿ
("movgeÑ1,r1,lsl #1\n");

1534 
	`Ÿ
("divloop:\n");

1535 
	`Ÿ
(" cmp spc_ya,r1\n");

1536 
	`Ÿ
("ádcÑ3,r3,r3 ;@ DoubleÑ3ándádd 1 if carry set\n");

1537 
	`Ÿ
(" subcs spc_ya,spc_ya,r1\n");

1538 
	`Ÿ
("ÅeqÑ1,spc_x\n");

1539 
	`Ÿ
(" movneÑ1,r1,lsr #1\n");

1540 
	`Ÿ
(" bne divloop\n");

1541 
	`Ÿ
("\n");

1543 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1544 
	`Ÿ
("ándÑ3,r3,#0xff\n");

1545 
	`Ÿ
(" orr spc_ya,r3,spc_ya,lsl #8\n");

1547 
	`Ÿ
("Apu9E_end:\n");

1548 
	`SëZN8
("spc_ya");

1552 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1553 
	`Ÿ
(" movÑ1,r0,lsl #28\n");

1554 
	`Ÿ
(" orrÑ0,r1,r0,lsl #20\n");

1555 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

1556 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsr #24\n");

1557 
	`SëZN8
("spc_ya");

1561 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1562 
	`MemH™dÀr
(0, 1, 0);

1563 
	`Ÿ
(" stmfd sp!,{r0}\n");

1564 
	`Ÿ
("ÜdrbÑ0,[spc_pc]\n");

1565 
	`MemH™dÀr
(0, 1, 0);

1566 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1567 
	`Sbc
("r0", "r1");

1568 
	`SëZN8
("r0");

1569 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1570 
	`MemH™dÀr
(1, 1, 1);

1574 
	`Ÿ
("ÜdrbÑ0,[spc_pc,#1]\n");

1575 
	`MemH™dÀr
(0, 1, 0);

1576 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#2\n");

1577 
	`Sbc
("r0", "r1");

1578 
	`SëZN8
("r0");

1579 
	`Ÿ
("ÜdrbÑ1,[spc_pc,#-1]\n");

1580 
	`MemH™dÀr
(1, 1, 1);

1584 
	`Ÿ
(" movÑ0,spc_x\n");

1585 
	`MemH™dÀr
(0, 1, 0);

1586 
	`Ÿ
(" stmfd sp!,{r0}\n");

1587 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1588 
	`MemH™dÀr
(0, 1, 0);

1589 
	`Ÿ
("Üdmfd sp!,{r1}\n");

1590 
	`Sbc
("r0", "r1");

1591 
	`SëZN8
("r0");

1592 
	`Ÿ
(" movÑ1,spc_x\n");

1593 
	`MemH™dÀr
(1, 1, 1);

1597 
	`Ÿ
(" movÑ0,spc_ya\n");

1598 
	`Ÿ
(" movÑ1,spc_x\n");

1599 
	`MemH™dÀr
(1, 1, 1);

1600 
	`Ÿ
("ádd spc_x,spc_x,#1\n");

1601 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

1605 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1606 
	`Ÿ
("ándÑ1,spc_ya,#0x0f\n");

1607 
	`Ÿ
(" cmpÑ1,#9\n");

1608 
	`Ÿ
(" subhiÑ0,r0,#6\n");

1609 
	`Ÿ
("Åstls spc_p,#flag_h\n");

1610 
	`Ÿ
(" subeqÑ0,r0,#6\n");

1611 
	`Ÿ
(" cmpÑ0,#0x9f\n");

1612 
	`Ÿ
(" bhi ApuBE_tens\n");

1613 
	`Ÿ
("Åst spc_p,#flag_c\n");

1614 
	`Ÿ
(" beq ApuBE_tens\n");

1615 
	`Ÿ
(" orr spc_p,spc_p,#flag_c\n");

1616 
	`Ÿ
(" b ApuBE_end\n");

1617 
	`Ÿ
("ApuBE_tens:\n");

1618 
	`Ÿ
(" subÑ0,r0,#0x60\n");

1619 
	`Ÿ
(" bic spc_p,spc_p,#flag_c\n");

1620 
	`Ÿ
("ApuBE_end:\n");

1621 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

1622 
	`Ÿ
(" orr spc_ya,spc_ya,r0\n");

1623 
	`SëZN8
("spc_ya");

1627 
	`Ÿ
(" movÑ0,spc_x\n");

1628 
	`MemH™dÀr
(0, 1, 1);

1629 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

1630 
	`Ÿ
(" orr spc_ya,spc_ya,r0\n");

1631 
	`Ÿ
("ádd spc_x,spc_x,#1\n");

1632 
	`Ÿ
("ánd spc_x,spc_x,#0xff\n");

1633 
	`SëZN8
("spc_ya");

1637 
	`Ÿ
(" bic spc_p,spc_p,#flag_i\n");

1641 
	`Ÿ
(" orr spc_p,spc_p,#flag_i\n");

1645 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1646 
	`Ÿ
(" movÑ0,spc_ya\n");

1647 
	`MemH™dÀr
(1, 1, 1);

1651 
	`Absﬁuã
(1);

1652 
	`Ÿ
(" movÑ0,spc_ya\n");

1653 
	`MemH™dÀr
(1, 0, 1);

1657 
	`Ÿ
(" movÑ0,spc_ya\n");

1658 
	`Ÿ
(" movÑ1,spc_x\n");

1659 
	`MemH™dÀr
(1, 1, 1);

1663 
	`IndexedXIndúe˘
(1);

1664 
	`Ÿ
(" movÑ0,spc_ya\n");

1665 
	`MemH™dÀr
(1, 0, 1);

1669 
	`Absﬁuã
(1);

1670 
	`Ÿ
(" movÑ0,spc_x\n");

1671 
	`MemH™dÀr
(1, 0, 1);

1675 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1676 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1677 
	`MemH™dÀr
(1, 1, 1);

1681 
	`Absﬁuã
(1);

1682 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1683 
	`MemH™dÀr
(1, 0, 1);

1687 
	`Ÿ
("Üdrb spc_x,[spc_pc],#1\n");

1688 
	`SëZN8
("spc_x");

1692 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1693 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1694 
	`Ÿ
(" mul spc_ya,r0,spc_ya\n");

1695 
	`SëZN16
("spc_ya");

1699 
	`Ÿ
(" movÑ0,spc_ya\n");

1700 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1701 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1702 
	`MemH™dÀr
(1, 1, 1);

1706 
	`AbsﬁuãX
(1);

1707 
	`Ÿ
(" movÑ0,spc_ya\n");

1708 
	`MemH™dÀr
(1, 0, 1);

1712 
	`AbsﬁuãY
(1);

1713 
	`Ÿ
(" movÑ0,spc_ya\n");

1714 
	`MemH™dÀr
(1, 0, 1);

1718 
	`Indúe˘IndexedY
(1);

1719 
	`Ÿ
(" movÑ0,spc_ya\n");

1720 
	`MemH™dÀr
(1, 0, 1);

1724 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1725 
	`Ÿ
(" movÑ0,spc_x\n");

1726 
	`MemH™dÀr
(1, 1, 1);

1730 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1731 
	`Ÿ
("áddÑ1,r1,spc_ya,lsr #8\n");

1732 
	`Ÿ
(" movÑ0,spc_x\n");

1733 
	`MemH™dÀr
(1, 1, 1);

1737 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1738 
	`Ÿ
("áddÑ1,r1,spc_x\n");

1739 
	`Ÿ
(" movÑ0,spc_ya,lsr #8\n");

1740 
	`MemH™dÀr
(1, 1, 1);

1744 
	`Ÿ
("ándÑ0,spc_ya,#0xff\n");

1745 
	`Ÿ
("ándÑ1,spc_ya,#0x0f\n");

1746 
	`Ÿ
(" cmpÑ1,#9\n");

1747 
	`Ÿ
("áddhiÑ0,r0,#6\n");

1748 
	`Ÿ
(" bls ApuDF_testHc\n");

1749 
	`Ÿ
(" cmphiÑ0,#0xf0\n");

1750 
	`Ÿ
(" orrhi spc_p,spc_p,#flag_c\n");

1751 
	`Ÿ
(" b ApuDF_test2\n");

1752 
	`Ÿ
("ApuDF_testHc:\n");

1753 
	`Ÿ
("Åst spc_p,#flag_h\n");

1754 
	`Ÿ
("áddneÑ0,r0,#6\n");

1755 
	`Ÿ
(" beq ApuDF_test2\n");

1756 
	`Ÿ
(" cmpÑ0,#0xf0\n");

1757 
	`Ÿ
(" orrhi spc_p,spc_p,#flag_c\n");

1758 
	`Ÿ
("ApuDF_test2:\n");

1759 
	`Ÿ
("Åst spc_p,#flag_c\n");

1760 
	`Ÿ
("áddneÑ0,r0,#0x60\n");

1761 
	`Ÿ
(" bne ApuDF_end\n");

1762 
	`Ÿ
(" cmpÑ0,#0x9f\n");

1763 
	`Ÿ
("áddhiÑ0,r0,#0x60\n");

1764 
	`Ÿ
(" orrhi spc_p,spc_p,#flag_c\n");

1765 
	`Ÿ
(" bicls spc_p,spc_p,#flag_c\n");

1766 
	`Ÿ
("ApuDF_end:\n");

1767 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff00\n");

1768 
	`Ÿ
(" orr spc_ya,spc_ya,r0\n");

1769 
	`SëZN8
("spc_ya");

1773 
	`Absﬁuã
(0);

1774 
	`MemH™dÀr
(0, 0, 1);

1775 
	`Ÿ
(" mov spc_x,r0\n");

1776 
	`SëZN8
("spc_x");

1780 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1781 
	`MemH™dÀr
(0, 1, 1);

1782 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1783 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

1784 
	`SëZN8
("r0");

1788 
	`Absﬁuã
(0);

1789 
	`MemH™dÀr
(0, 0, 1);

1790 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1791 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

1792 
	`SëZN8
("r0");

1796 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1797 
	`MemH™dÀr
(0, 1, 1);

1798 
	`Ÿ
(" mov spc_x,r0\n");

1799 
	`SëZN8
("spc_x");

1803 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1804 
	`Ÿ
("áddÑ0,r0,spc_ya,lsr #8\n");

1805 
	`MemH™dÀr
(0, 1, 1);

1806 
	`Ÿ
(" mov spc_x,r0\n");

1807 
	`SëZN8
("spc_x");

1811 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1812 
	`MemH™dÀr
(0, 1, 0);

1813 
	`Ÿ
("ÜdrbÑ1,[spc_pc],#1\n");

1814 
	`MemH™dÀr
(1, 1, 1);

1818 
	`Ÿ
("ÜdrbÑ0,[spc_pc],#1\n");

1819 
	`Ÿ
("áddÑ0,r0,spc_x\n");

1820 
	`MemH™dÀr
(0, 1, 1);

1821 
	`Ÿ
("ánd spc_ya,spc_ya,#0xff\n");

1822 
	`Ÿ
(" orr spc_ya,spc_ya,r0,lsl #8\n");

1823 
	`SëZN8
("r0");

1828 
	`Ÿ
(" sub† cy˛es,cy˛es,#%i\n", 
S9xAPUCy˛es
[
›code
] * 
ONE_APU_CYCLE
);

1829 
	`Ÿ
("Üdrgeb opcode,[spc_pc],#1\n");

1830 
	`Ÿ
("ÜdrgeÖc,[opcodes,opcode,lsl #2]\n");

1831 
	`Ÿ
(" b spc700End\n");

1833 
	`¥ötf
("\b\b");

1837 
	`Ÿ
("\n\n");

1838 
	`Ÿ
("@ -------------------------- Jump Table --------------------------\n");

1839 
	`Ÿ
("Spc700JumpTab:\n");

1841 
i
=0; i < 0x100; i++)

1843 i‡((
i
&7)==0Ë
	`Ÿ
(" .long ");

1845 
	`Ÿ
("Apu%02X", 
i
);

1847 i‡((
i
&7)==7Ë
	`Ÿ
(" @ %02x\n",i-7);

1848 i‡(
i
+1 < 0x100Ë
	`Ÿ
(", ");

1851 
	`f˛o£
(
AsmFûe
); AsmFûe=
NULL
;

1853 
	`¥ötf
("Assembling...\n");

1856 
	`¥ötf
("Done!\n\n");

1859 
	}
}

	@squidgehack.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

9 **
g_¨gv
;

12 
	$mmuhack
()

14 
kocmd
[1024];

15 
i
, 
mmufd
 = 
	`›í
("/dev/mmuhack", 
O_RDWR
);

17 if(
mmufd
 < 0) {

18 
	`°r˝y
(
kocmd
, "/sbin/insmod ");

19 
	`°∫˝y
(
kocmd
+13, 
g_¨gv
[0], 1023-13);

20 
kocmd
[1023] = 0;

21 
i
 = 
	`°æí
(
kocmd
); i > 0; i--)

22 i‡(
kocmd
[
i
] == '/') { kocmd[i] = 0; ; }

23 
	`°rˇt
(
kocmd
, "/mmuhack.o");

25 
	`¥ötf
("In°Ælög NK'†kî√»moduÀ f‹ SquidgêMMU Hack (%s)...\n", 
kocmd
);

26 
	`sy°em
(
kocmd
);

27 
mmufd
 = 
	`›í
("/dev/mmuhack", 
O_RDWR
);

29 if(
mmufd
 < 0)  0;

31 
	`˛o£
(
mmufd
);

33 
	}
}

37 
	$mmuunhack
()

39 
ªt
;

40 
	`¥ötf
("Removög NK'†kî√»moduÀ f‹ SquidgêMMU Hack... "); 
	`fÊush
(
°dout
);

41 
ªt
 = 
	`sy°em
("/sbin/rmmod mmuhack");

42 
	`¥ötf
("d⁄ê(%i)\n", 
ªt
);

44  
ªt
;

45 
	}
}

	@squidgehack.h

1 #i‚de‡
__MMUHACK__


2 
	#__MMUHACK__


	)

4 #ifde‡
__˝lu•lus


8 
mmuhack
();

9 
mmuunhack
();

11 #ifde‡
__˝lu•lus


	@srtc.cpp

41 
	~<°rög.h
>

42 
	~"¢es9x.h
"

43 
	~"§tc.h
"

44 
	~"memm≠.h
"

73 
SRTC_DATA
 
	gπc
;

76 
	gm⁄th_keys
[12] = { 1, 4, 4, 0, 2, 5, 0, 3, 6, 1, 4, 6 };

96 
	$S9xRe£tSRTC
 ()

98 
πc
.
ödex
 = -1;

99 
πc
.
mode
 = 
MODE_READ
;

100 
	}
}

102 
	$S9xH¨dRe£tSRTC
 ()

104 
	`ZîoMem‹y
 (&
πc
,  (rtc));

105 
πc
.
ödex
 = -1;

106 
πc
.
mode
 = 
MODE_READ
;

107 
πc
.
cou¡_íabÀ
 = 
FALSE
;

108 
πc
.
√eds_öô
 = 
TRUE
;

111 
πc
.
sy°em_time°amp
 = 
	`time
 (
NULL
);

112 
	}
}

118 
	$S9xSRTCCompuãDayOfWìk
 ()

120 
yór
 = 
πc
.
d©a
[10]*10 +Ñtc.data[9];

121 
m⁄th
 = 
πc
.
d©a
[8];

122 
day
 = 
πc
.
d©a
[7]*10 +Ñtc.data[6];

123 
day_of_wìk
;

125 
yór
 +(
πc
.
d©a
[11] - 9) * 100;

128 i‡–
m⁄th
 > 12 )

129 
m⁄th
 = 1;

131 
day_of_wìk
 = 
yór
 + (yó∏/ 4Ë+ 
m⁄th_keys
[
m⁄th
-1] + 
day
 - 1;

133 if(–
yór
 % 4 =0 ) && ( 
m⁄th
 <= 2 ) )

134 
day_of_wìk
--;

136 
day_of_wìk
 %= 7;

138  
day_of_wìk
;

139 
	}
}

146 
	$S9xSRTCDaysInMm⁄th
–
m⁄th
, 
yór
 )

148 
mdays
;

150  
m⁄th
 )

153 i‡––
yór
 % 4 == 0 ) )

154 
mdays
 = 29;

156 
mdays
 = 28;

163 
mdays
 = 30;

167 
mdays
 = 31;

171  
mdays
;

172 
	}
}

175 
	#DAYTICKS
 (60*60*24)

	)

176 
	#HOURTICKS
 (60*60)

	)

177 
	#MINUTETICKS
 60

	)

184 
	$S9xUpd©eSπcTime
 ()

186 
time_t
 
cur_sy°ime
;

187 
time_diff
;

198 i‡(
πc
.
cou¡_íabÀ
 && !πc.
√eds_öô
)

200 
cur_sy°ime
 = 
	`time
 (
NULL
);

207 
time_diff
 = (Ë(
cur_sy°ime
 - 
πc
.
sy°em_time°amp
);

208 
πc
.
sy°em_time°amp
 = 
cur_sy°ime
;

210 i‡–
time_diff
 > 0 )

212 
£c⁄ds
;

213 
möuãs
;

214 
hours
;

215 
days
;

216 
m⁄th
;

217 
yór
;

218 
ãmp_days
;

220 
yór_hundªds
;

221 
yór_ãns
;

222 
yór_⁄es
;

225 i‡–
time_diff
 > 
DAYTICKS
 )

227 
days
 = 
time_diff
 / 
DAYTICKS
;

228 
time_diff
 =Åime_dif‡- 
days
 * 
DAYTICKS
;

232 
days
 = 0;

235 i‡–
time_diff
 > 
HOURTICKS
 )

237 
hours
 = 
time_diff
 / 
HOURTICKS
;

238 
time_diff
 =Åime_dif‡- 
hours
 * 
HOURTICKS
;

242 
hours
 = 0;

245 i‡–
time_diff
 > 
MINUTETICKS
 )

247 
möuãs
 = 
time_diff
 / 
MINUTETICKS
;

248 
time_diff
 =Åime_dif‡- 
möuãs
 * 
MINUTETICKS
;

252 
möuãs
 = 0;

255 i‡–
time_diff
 > 0 )

257 
£c⁄ds
 = 
time_diff
;

261 
£c⁄ds
 = 0;

265 
£c⁄ds
 +(
πc
.
d©a
[1]*10 +Ñtc.data[0]);

266 i‡–
£c⁄ds
 >= 60 )

268 
£c⁄ds
 -= 60;

269 
möuãs
 += 1;

272 
möuãs
 +(
πc
.
d©a
[3]*10 +Ñtc.data[2]);

273 i‡–
möuãs
 >= 60 )

275 
möuãs
 -= 60;

276 
hours
 += 1;

279 
hours
 +(
πc
.
d©a
[5]*10 +Ñtc.data[4]);

280 i‡–
hours
 >= 24 )

282 
hours
 -= 24;

283 
days
 += 1;

286 i‡–
days
 > 0 )

288 
yór
 = 
πc
.
d©a
[10]*10 +Ñtc.data[9];

289 
yór
 +–1000 + 
πc
.
d©a
[11] * 100 );

291 
m⁄th
 = 
πc
.
d©a
[8];

292 
days
 +(
πc
.
d©a
[7]*10 +Ñtc.data[6]);

293  
days
 > (
ãmp_days
 = 
	`S9xSRTCDaysInMm⁄th
–
m⁄th
, 
yór
 )) )

295 
days
 -
ãmp_days
;

296 
m⁄th
 += 1;

297 i‡–
m⁄th
 > 12 )

299 
yór
 += 1;

300 
m⁄th
 = 1;

304 
yór_ãns
 = 
yór
 % 100;

305 
yór_⁄es
 = 
yór_ãns
 % 10;

306 
yór_ãns
 /= 10;

307 
yór_hundªds
 = (
yór
 - 1000) / 100;

309 
πc
.
d©a
[6] = 
days
 % 10;

310 
πc
.
d©a
[7] = 
days
 / 10;

311 
πc
.
d©a
[8] = 
m⁄th
;

312 
πc
.
d©a
[9] = 
yór_⁄es
;

313 
πc
.
d©a
[10] = 
yór_ãns
;

314 
πc
.
d©a
[11] = 
yór_hundªds
;

315 
πc
.
d©a
[12] = 
	`S9xSRTCCompuãDayOfWìk
 ();

318 
πc
.
d©a
[0] = 
£c⁄ds
 % 10;

319 
πc
.
d©a
[1] = 
£c⁄ds
 / 10;

320 
πc
.
d©a
[2] = 
möuãs
 % 10;

321 
πc
.
d©a
[3] = 
möuãs
 / 10;

322 
πc
.
d©a
[4] = 
hours
 % 10;

323 
πc
.
d©a
[5] = 
hours
 / 10;

328 
	}
}

335 
	$S9xSëSRTC
 (
uöt8
 
d©a
, 
uöt16
 
Addªss
)

338 
d©a
 &= 0x0F;

340 if–
d©a
 >= 0xD )

344  
d©a
 )

347 
πc
.
mode
 = 
MODE_READ
;

348 
πc
.
ödex
 = -1;

352 
πc
.
mode
 = 
MODE_COMMAND
;

365 i‡–
πc
.
mode
 =
MODE_LOAD_RTC
 )

367 i‡–(
πc
.
ödex
 >0Ë|| (πc.ödex < 
MAX_RTC_INDEX
) )

369 
πc
.
d©a
[πc.
ödex
++] = data;

371 i‡–
πc
.
ödex
 =
MAX_RTC_INDEX
 )

375 
πc
.
sy°em_time°amp
 = 
	`time
 (
NULL
);

378 
πc
.
d©a
[πc.
ödex
++] = 
	`S9xSRTCCompuãDayOfWìk
 ();

381 
πc
.
cou¡_íabÀ
 = 
TRUE
;

382 
πc
.
√eds_öô
 = 
FALSE
;

393 i‡–
πc
.
mode
 =
MODE_COMMAND
 )

395  
d©a
 )

397 
COMMAND_CLEAR_RTC
:

399 
πc
.
cou¡_íabÀ
 = 
FALSE
;

401 
	`ZîoMem‹y
 (
πc
.
d©a
, 
MAX_RTC_INDEX
+1);

402 
πc
.
ödex
 = -1;

403 
πc
.
mode
 = 
MODE_COMMAND_DONE
;

406 
COMMAND_LOAD_RTC
:

408 
πc
.
cou¡_íabÀ
 = 
FALSE
;

410 
πc
.
ödex
 = 0;

411 
πc
.
mode
 = 
MODE_LOAD_RTC
;

415 
πc
.
mode
 = 
MODE_COMMAND_DONE
;

423 i‡–
πc
.
mode
 =
MODE_READ
 )

428 i‡–
πc
.
mode
 =
MODE_COMMAND_DONE
 )

434 
	}
}

440 
uöt8
 
	$S9xGëSRTC
 (
uöt16
 
Addªss
)

442 i‡–
πc
.
mode
 =
MODE_READ
 )

444 i‡–
πc
.
ödex
 < 0 )

446 
	`S9xUpd©eSπcTime
 ();

447 
πc
.
ödex
++;

450 i‡(
πc
.
ödex
 > 
MAX_RTC_INDEX
)

452 
πc
.
ödex
 = -1;

458  
πc
.
d©a
[πc.
ödex
++];

465 
	}
}

467 
	$S9xSRTCPªSaveSèã
 ()

469 i‡(
Sëtögs
.
SRTC
)

471 
	`S9xUpd©eSπcTime
 ();

473 
s
 = 
Mem‹y
.
SRAMSize
 ?

474 (1 << (
Mem‹y
.
SRAMSize
 + 3)) * 128 : 0;

475 i‡(
s
 > 0x20000)

476 
s
 = 0x20000;

478 
SRAM
 [
s
 + 0] = 
πc
.
√eds_öô
;

479 
SRAM
 [
s
 + 1] = 
πc
.
cou¡_íabÀ
;

480 
	`memmove
 (&
SRAM
 [
s
 + 2], 
πc
.
d©a
, 
MAX_RTC_INDEX
 + 1);

481 
SRAM
 [
s
 + 3 + 
MAX_RTC_INDEX
] = 
πc
.
ödex
;

482 
SRAM
 [
s
 + 4 + 
MAX_RTC_INDEX
] = 
πc
.
mode
;

484 #ifde‡
LSB_FIRST


485 
	`memmove
 (&
SRAM
 [
s
 + 5 + 
MAX_RTC_INDEX
], &
πc
.
sy°em_time°amp
, 8);

487 
SRAM
 [
s
 + 5 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 0);

488 
SRAM
 [
s
 + 6 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 8);

489 
SRAM
 [
s
 + 7 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 16);

490 
SRAM
 [
s
 + 8 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 24);

491 
SRAM
 [
s
 + 9 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 32);

492 
SRAM
 [
s
 + 10 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 40);

493 
SRAM
 [
s
 + 11 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 48);

494 
SRAM
 [
s
 + 12 + 
MAX_RTC_INDEX
] = (
uöt8
Ë(
πc
.
sy°em_time°amp
 >> 56);

497 
	}
}

499 
	$S9xSRTCPo°LﬂdSèã
 ()

501 i‡(
Sëtögs
.
SRTC
)

503 
s
 = 
Mem‹y
.
SRAMSize
 ?

504 (1 << (
Mem‹y
.
SRAMSize
 + 3)) * 128 : 0;

505 i‡(
s
 > 0x20000)

506 
s
 = 0x20000;

508 
πc
.
√eds_öô
 = 
SRAM
 [
s
 + 0];

509 
πc
.
cou¡_íabÀ
 = 
SRAM
 [
s
 + 1];

510 
	`memmove
 (
πc
.
d©a
, &
SRAM
 [
s
 + 2], 
MAX_RTC_INDEX
 + 1);

511 
πc
.
ödex
 = 
SRAM
 [
s
 + 3 + 
MAX_RTC_INDEX
];

512 
πc
.
mode
 = 
SRAM
 [
s
 + 4 + 
MAX_RTC_INDEX
];

514 #ifde‡
LSB_FIRST


515 
	`memmove
 (&
πc
.
sy°em_time°amp
, &
SRAM
 [
s
 + 5 + 
MAX_RTC_INDEX
], 8);

517 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 5 + 
MAX_RTC_INDEX
] << 0);

518 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 6 + 
MAX_RTC_INDEX
] << 8);

519 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 7 + 
MAX_RTC_INDEX
] << 16);

520 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 8 + 
MAX_RTC_INDEX
] << 24);

521 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 9 + 
MAX_RTC_INDEX
] << 32);

522 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 10 + 
MAX_RTC_INDEX
] << 40);

523 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 11 + 
MAX_RTC_INDEX
] << 48);

524 
πc
.
sy°em_time°amp
 |(
SRAM
 [
s
 + 12 + 
MAX_RTC_INDEX
] << 56);

526 
	`S9xUpd©eSπcTime
 ();

528 
	}
}

	@srtc.h

41 #i‚de‡
_§tc_h_


42 
	#_§tc_h_


	)

44 #i‡!
deföed
(
_SNESPPC
Ë&& !deföed(
__GIZ__
Ë&& !deföed(
__GP2X__
)

45 
	~<time.h
>

48 
	#MAX_RTC_INDEX
 0xC

	)

50 
	#MODE_READ
 0

	)

51 
	#MODE_LOAD_RTC
 1

	)

52 
	#MODE_COMMAND
 2

	)

53 
	#MODE_COMMAND_DONE
 3

	)

55 
	#COMMAND_LOAD_RTC
 0

	)

56 
	#COMMAND_CLEAR_RTC
 4

	)

88 
boﬁ8_32
 
	m√eds_öô
;

89 
boﬁ8_32
 
	mcou¡_íabÀ
;

90 
uöt8
 
	md©a
 [
MAX_RTC_INDEX
+1];

91 
öt8
 
	mödex
;

92 
uöt8
 
	mmode
;

94 
time_t
 
	msy°em_time°amp
;

95 
uöt32
 
	m∑d
;

96 } 
	tSRTC_DATA
;

98 
SRTC_DATA
 
πc
;

100 
S9xUpd©eSπcTime
 ();

101 
S9xSëSRTC
 (
uöt8
 
d©a
, 
uöt16
 
Addªss
);

102 
uöt8
 
S9xGëSRTC
 (
uöt16
 
Addªss
);

103 
S9xSRTCPªSaveSèã
 ();

104 
S9xSRTCPo°LﬂdSèã
 ();

105 
S9xRe£tSRTC
 ();

106 
S9xH¨dRe£tSRTC
 ();

108 
	#SRTC_SRAM_PAD
 (4 + 8 + 1 + 
MAX_RTC_INDEX
)

	)

	@tile.cpp

41 
	~"¢es9x.h
"

43 
	~"memm≠.h
"

44 
	~"µu.h
"

45 
	~"di•œy.h
"

46 
	~"gfx.h
"

47 
	~"tûe.h
"

49 #ifde‡
USE_GLIDE


50 
	~"3d.h
"

53 
uöt32
 
HódMask
 [4];

54 
uöt32
 
TaûMask
 [5];

56 
uöt8
 
	$C⁄vîtTûe
 (
uöt8
 *
pCache
, 
uöt32
 
TûeAddr
)

58 
uöt8
 *
ç
 = &
Mem‹y
.
VRAM
[
TûeAddr
];

59 
uöt32
 *
p
 = (uöt32 *Ë
pCache
;

60 
uöt32
 
n⁄_zîo
 = 0;

61 
uöt8
 
löe
;

62 
uöt32
 
p1
;

63 
uöt32
 
p2
;

64 
uöt8
 
pix
;

66 
BG
.
BôShi·
)

69 
löe
 = 8;Üöê!0;Üöe--, 
ç
 += 2)

71 
p1
 = 
p2
 = 0;

72 i‡((
pix
 = *(
ç
 + 0)))

74 
p1
 |
odd_high
[0][
pix
 >> 4];

75 
p2
 |
odd_low
[0][
pix
 & 0xf];

77 i‡((
pix
 = *(
ç
 + 1)))

79 
p1
 |
eví_high
[0][
pix
 >> 4];

80 
p2
 |
eví_low
[0][
pix
 & 0xf];

82 i‡((
pix
 = *(
ç
 + 16)))

84 
p1
 |
odd_high
[1][
pix
 >> 4];

85 
p2
 |
odd_low
[1][
pix
 & 0xf];

87 i‡((
pix
 = *(
ç
 + 17)))

89 
p1
 |
eví_high
[1][
pix
 >> 4];

90 
p2
 |
eví_low
[1][
pix
 & 0xf];

92 i‡((
pix
 = *(
ç
 + 32)))

94 
p1
 |
odd_high
[2][
pix
 >> 4];

95 
p2
 |
odd_low
[2][
pix
 & 0xf];

97 i‡((
pix
 = *(
ç
 + 33)))

99 
p1
 |
eví_high
[2][
pix
 >> 4];

100 
p2
 |
eví_low
[2][
pix
 & 0xf];

102 i‡((
pix
 = *(
ç
 + 48)))

104 
p1
 |
odd_high
[3][
pix
 >> 4];

105 
p2
 |
odd_low
[3][
pix
 & 0xf];

107 i‡((
pix
 = *(
ç
 + 49)))

109 
p1
 |
eví_high
[3][
pix
 >> 4];

110 
p2
 |
eví_low
[3][
pix
 & 0xf];

112 *
p
++ = 
p1
;

113 *
p
++ = 
p2
;

114 
n⁄_zîo
 |
p1
 | 
p2
;

119 
löe
 = 8;Üöê!0;Üöe--, 
ç
 += 2)

121 
p1
 = 
p2
 = 0;

122 i‡((
pix
 = *(
ç
 + 0)))

124 
p1
 |
odd_high
[0][
pix
 >> 4];

125 
p2
 |
odd_low
[0][
pix
 & 0xf];

127 i‡((
pix
 = *(
ç
 + 1)))

129 
p1
 |
eví_high
[0][
pix
 >> 4];

130 
p2
 |
eví_low
[0][
pix
 & 0xf];

132 i‡((
pix
 = *(
ç
 + 16)))

134 
p1
 |
odd_high
[1][
pix
 >> 4];

135 
p2
 |
odd_low
[1][
pix
 & 0xf];

137 i‡((
pix
 = *(
ç
 + 17)))

139 
p1
 |
eví_high
[1][
pix
 >> 4];

140 
p2
 |
eví_low
[1][
pix
 & 0xf];

142 *
p
++ = 
p1
;

143 *
p
++ = 
p2
;

144 
n⁄_zîo
 |
p1
 | 
p2
;

149 
löe
 = 8;Üöê!0;Üöe--, 
ç
 += 2)

151 
p1
 = 
p2
 = 0;

152 i‡((
pix
 = *(
ç
 + 0)))

154 
p1
 |
odd_high
[0][
pix
 >> 4];

155 
p2
 |
odd_low
[0][
pix
 & 0xf];

157 i‡((
pix
 = *(
ç
 + 1)))

159 
p1
 |
eví_high
[0][
pix
 >> 4];

160 
p2
 |
eví_low
[0][
pix
 & 0xf];

162 *
p
++ = 
p1
;

163 *
p
++ = 
p2
;

164 
n⁄_zîo
 |
p1
 | 
p2
;

168  (
n⁄_zîo
 ? 
TRUE
 : 
BLANK_TILE
);

169 
	}
}

171 
INLINE
 
	$WRITE_4PIXELS
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

173 
uöt8
 
Pixñ
;

174 
uöt8
 *
S¸ìn
 = 
gfx
->
S
 + 
Off£t
;

175 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

177 
	#FN
(
N
) \

178 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

180 
S¸ìn
 [
N
] = (
uöt8
Ë
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

181 
Dïth
 [
N
] = 
gfx
->
Z2
; \

182 }

	)

184 
	`FN
(0)

185 
	`FN
(1)

186 
	`FN
(2)

187 
	`FN
(3)

188 #unde‡
FN


189 
	}
}

191 
INLINE
 
	$WRITE_4PIXELS_FLIPPED
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

193 
uöt8
 
Pixñ
;

194 
uöt8
 *
S¸ìn
 = 
gfx
->
S
 + 
Off£t
;

195 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

197 
	#FN
(
N
) \

198 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

200 
S¸ìn
 [
N
] = (
uöt8
Ë
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

201 
Dïth
 [
N
] = 
gfx
->
Z2
; \

202 }

	)

204 
	`FN
(0)

205 
	`FN
(1)

206 
	`FN
(2)

207 
	`FN
(3)

208 #unde‡
FN


209 
	}
}

211 
ölöe
 
	$WRITE_4PIXELSHI16
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

213 
uöt32
 
Pixñ
;

214 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

215 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

217 
	#FN
(
N
) \

218 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[2*N])) \

220 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

221 
Dïth
 [
N
] = 
GFX
.
Z2
; \

222 }

	)

224 
	`FN
(0)

225 
	`FN
(1)

226 
	`FN
(2)

227 
	`FN
(3)

228 #unde‡
FN


229 
	}
}

231 
ölöe
 
	$WRITE_4PIXELSHI16_FLIPPED
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

233 
uöt32
 
Pixñ
;

234 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

235 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

237 
	#FN
(
N
) \

238 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[6 - 2*N])) \

240 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

241 
Dïth
 [
N
] = 
GFX
.
Z2
; \

242 }

	)

244 
	`FN
(0)

245 
	`FN
(1)

246 
	`FN
(2)

247 
	`FN
(3)

248 #unde‡
FN


249 
	}
}

251 
INLINE
 
	$WRITE_4PIXELSx2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

253 
uöt8
 
Pixñ
;

254 
uöt8
 *
S¸ìn
 = 
gfx
->
S
 + 
Off£t
;

255 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

257 
	#FN
(
N
) \

258 i‡(
gfx
->
Z1
 > 
Dïth
 [0] && (
Pixñ
 = 
Pixñs
[
N
])) \

260 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = (
uöt8
Ë
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

261 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = 
gfx
->
Z2
; \

262 }

	)

264 
	`FN
(0)

265 
	`FN
(1)

266 
	`FN
(2)

267 
	`FN
(3)

268 #unde‡
FN


269 
	}
}

271 
INLINE
 
	$WRITE_4PIXELS_FLIPPEDx2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

273 
uöt8
 
Pixñ
;

274 
uöt8
 *
S¸ìn
 = 
gfx
->
S
 + 
Off£t
;

275 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

277 
	#FN
(
N
) \

278 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[3 - N])) \

280 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = (
uöt8
Ë
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

281 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = 
gfx
->
Z2
; \

282 }

	)

284 
	`FN
(0)

285 
	`FN
(1)

286 
	`FN
(2)

287 
	`FN
(3)

288 #unde‡
FN


289 
	}
}

291 
INLINE
 
	$WRITE_4PIXELSx2x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

293 
uöt8
 
Pixñ
;

294 
uöt8
 *
S¸ìn
 = 
gfx
->
S
 + 
Off£t
;

295 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

297 
	#FN
(
N
) \

298 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[N])) \

300 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = S¸ì¿[
gfx
->
RólPôch
 + N * 2] = \

301 
S¸ìn
 [
gfx
->
RólPôch
 + 
N
 * 2 + 1] = (
uöt8
Ëgfx->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

302 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = Dïth [
gfx
->
RólPôch
 + N * 2] = \

303 
Dïth
 [
gfx
->
RólPôch
 + 
N
 * 2 + 1] = gfx->
Z2
; \

304 }

	)

306 
	`FN
(0)

307 
	`FN
(1)

308 
	`FN
(2)

309 
	`FN
(3)

310 #unde‡
FN


311 
	}
}

313 
INLINE
 
	$WRITE_4PIXELS_FLIPPEDx2x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

315 
uöt8
 
Pixñ
;

316 
uöt8
 *
S¸ìn
 = 
gfx
->
S
 + 
Off£t
;

317 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

319 
	#FN
(
N
) \

320 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[3 - N])) \

322 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = S¸ì¿[
gfx
->
RólPôch
 + N * 2] = \

323 
S¸ìn
 [
gfx
->
RólPôch
 + 
N
 * 2 + 1] = (
uöt8
Ëgfx->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

324 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = Dïth [
gfx
->
RólPôch
 + N * 2] = \

325 
Dïth
 [
gfx
->
RólPôch
 + 
N
 * 2 + 1] = gfx->
Z2
; \

326 }

	)

328 
	`FN
(0)

329 
	`FN
(1)

330 
	`FN
(2)

331 
	`FN
(3)

332 #unde‡
FN


333 
	}
}

335 
	$DøwTûe
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

336 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

338 
TILE_PREAMBLE


340 
uöt8
 *
bp
;

342 
	`RENDER_TILE
(
WRITE_4PIXELS
, 
WRITE_4PIXELS_FLIPPED
, 4)

343 
	}
}

345 
	$DøwClù≥dTûe
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

346 
uöt32
 
SèπPixñ
, uöt32 
Width
,

347 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

349 
TILE_PREAMBLE


350 
uöt8
 *
bp
;

352 
TILE_CLIP_PREAMBLE


353 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS
, 
WRITE_4PIXELS_FLIPPED
, 4)

354 
	}
}

356 
	$DøwTûex2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

357 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

359 
TILE_PREAMBLE


361 
uöt8
 *
bp
;

363 
	`RENDER_TILE
(
WRITE_4PIXELSx2
, 
WRITE_4PIXELS_FLIPPEDx2
, 8)

364 
	}
}

366 
	$DøwClù≥dTûex2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

367 
uöt32
 
SèπPixñ
, uöt32 
Width
,

368 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

370 
TILE_PREAMBLE


371 
uöt8
 *
bp
;

373 
TILE_CLIP_PREAMBLE


374 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELSx2
, 
WRITE_4PIXELS_FLIPPEDx2
, 8)

375 
	}
}

377 
	$DøwTûex2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

378 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

380 
TILE_PREAMBLE


382 
uöt8
 *
bp
;

384 
	`RENDER_TILE
(
WRITE_4PIXELSx2x2
, 
WRITE_4PIXELS_FLIPPEDx2x2
, 8)

385 
	}
}

387 
	$DøwClù≥dTûex2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

388 
uöt32
 
SèπPixñ
, uöt32 
Width
,

389 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

391 
TILE_PREAMBLE


392 
uöt8
 *
bp
;

394 
TILE_CLIP_PREAMBLE


395 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELSx2x2
, 
WRITE_4PIXELS_FLIPPEDx2x2
, 8)

396 
	}
}

398 
	$DøwL¨gePixñ
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

399 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

400 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

402 
TILE_PREAMBLE


404 
uöt8
 *
•
 = 
gfx
->
S
 + 
Off£t
;

405 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

406 
uöt8
 
pixñ
;

407 
	#PLOT_PIXEL
(
s¸ìn
, 
pixñ
Ë’ixñ)

	)

409 
	`RENDER_TILE_LARGE
 (((
uöt8
Ë
gfx
->
S¸ìnCﬁ‹s
 [
pixñ
]), 
PLOT_PIXEL
)

410 
	}
}

412 
INLINE
 
	$WRITE_4PIXELS16
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

414 
uöt32
 
Pixñ
;

415 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

416 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

418 
	#FN
(
N
) \

419 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

421 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

422 
Dïth
 [
N
] = 
gfx
->
Z2
; \

423 }

	)

425 
	`FN
(0)

426 
	`FN
(1)

427 
	`FN
(2)

428 
	`FN
(3)

429 #unde‡
FN


430 
	}
}

432 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

434 
uöt32
 
Pixñ
;

435 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

436 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

438 
	#FN
(
N
) \

439 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

441 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

442 
Dïth
 [
N
] = 
gfx
->
Z2
; \

443 }

	)

445 
	`FN
(0)

446 
	`FN
(1)

447 
	`FN
(2)

448 
	`FN
(3)

449 #unde‡
FN


450 
	}
}

452 
INLINE
 
	$WRITE_4PIXELS16x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

454 
uöt32
 
Pixñ
;

455 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

456 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

458 
	#FN
(
N
) \

459 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[N])) \

461 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

462 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = 
gfx
->
Z2
; \

463 }

	)

465 
	`FN
(0)

466 
	`FN
(1)

467 
	`FN
(2)

468 
	`FN
(3)

469 #unde‡
FN


470 
	}
}

472 
INLINE
 
	$WRITE_4PIXELS16_FLIPPEDx2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

474 
uöt32
 
Pixñ
;

475 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

476 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

478 
	#FN
(
N
) \

479 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[3 - N])) \

481 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

482 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = 
gfx
->
Z2
; \

483 }

	)

485 
	`FN
(0)

486 
	`FN
(1)

487 
	`FN
(2)

488 
	`FN
(3)

489 #unde‡
FN


490 
	}
}

492 
INLINE
 
	$WRITE_4PIXELS16x2x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

494 
uöt32
 
Pixñ
;

495 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

496 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

498 
	#FN
(
N
) \

499 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[N])) \

501 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = S¸ì¿[(
gfx
->
RólPôch
 >> 1) + N * 2] = \

502 
S¸ìn
 [(
gfx
->
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = gfx->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

503 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = Dïth [(
gfx
->
RólPôch
 >> 1) + N * 2] = \

504 
Dïth
 [(
gfx
->
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = gfx->
Z2
; \

505 }

	)

507 
	`FN
(0)

508 
	`FN
(1)

509 
	`FN
(2)

510 
	`FN
(3)

511 #unde‡
FN


512 
	}
}

514 
INLINE
 
	$WRITE_4PIXELS16_FLIPPEDx2x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

516 
uöt32
 
Pixñ
;

517 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

518 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

520 
	#FN
(
N
) \

521 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[3 - N])) \

523 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = S¸ì¿[(
gfx
->
RólPôch
 >> 1) + N * 2] = \

524 
S¸ìn
 [(
gfx
->
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = gfx->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

525 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = Dïth [(
gfx
->
RólPôch
 >> 1) + N * 2] = \

526 
Dïth
 [(
gfx
->
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = gfx->
Z2
; \

527 }

	)

529 
	`FN
(0)

530 
	`FN
(1)

531 
	`FN
(2)

532 
	`FN
(3)

533 #unde‡
FN


534 
	}
}

536 
	$DøwTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

537 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

539 
TILE_PREAMBLE


540 
uöt8
 *
bp
;

542 
	`RENDER_TILE
(
WRITE_4PIXELS16
, 
WRITE_4PIXELS16_FLIPPED
, 4)

543 
	}
}

545 
	$DøwClù≥dTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

546 
uöt32
 
SèπPixñ
, uöt32 
Width
,

547 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

549 
TILE_PREAMBLE


550 
uöt8
 *
bp
;

552 
TILE_CLIP_PREAMBLE


553 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16
, 
WRITE_4PIXELS16_FLIPPED
, 4)

554 
	}
}

556 
	$DøwTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

557 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

559 
TILE_PREAMBLE


560 
uöt8
 *
bp
;

562 
	`RENDER_TILE
(
WRITE_4PIXELS16x2
, 
WRITE_4PIXELS16_FLIPPEDx2
, 8)

563 
	}
}

565 
	$DøwClù≥dTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

566 
uöt32
 
SèπPixñ
, uöt32 
Width
,

567 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

569 
TILE_PREAMBLE


570 
uöt8
 *
bp
;

572 
TILE_CLIP_PREAMBLE


573 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16x2
, 
WRITE_4PIXELS16_FLIPPEDx2
, 8)

574 
	}
}

576 
	$DøwTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

577 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

579 
TILE_PREAMBLE


580 
uöt8
 *
bp
;

582 
	`RENDER_TILE
(
WRITE_4PIXELS16x2x2
, 
WRITE_4PIXELS16_FLIPPEDx2x2
, 8)

583 
	}
}

585 
	$DøwClù≥dTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

586 
uöt32
 
SèπPixñ
, uöt32 
Width
,

587 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

589 
TILE_PREAMBLE


590 
uöt8
 *
bp
;

592 
TILE_CLIP_PREAMBLE


593 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16x2x2
, 
WRITE_4PIXELS16_FLIPPEDx2x2
, 8)

594 
	}
}

596 
	$DøwL¨gePixñ16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

597 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

598 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

600 
TILE_PREAMBLE


602 
uöt16
 *
•
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

603 
uöt8
 *
Dïth
 = 
gfx
->
DB
 + 
Off£t
;

604 
uöt16
 
pixñ
;

606 
	`RENDER_TILE_LARGE
 (
gfx
->
S¸ìnCﬁ‹s
 [
pixñ
], 
PLOT_PIXEL
)

607 
	}
}

609 
INLINE
 
	$WRITE_4PIXELS16_ADD
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

611 
uöt32
 
Pixñ
;

612 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

613 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

614 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

616 
	#FN
(
N
) \

617 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

619 i‡(
SubDïth
 [
N
]) \

621 i‡(
SubDïth
 [
N
] != 1) \

622 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

623 
S¸ìn
 [
gfx
->
Dñè
 + 
N
]); \

625 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

626 
gfx
->
FixedCﬁour
); \

629 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

630 
Dïth
 [
N
] = 
gfx
->
Z2
; \

631 }

	)

633 
	`FN
(0)

634 
	`FN
(1)

635 
	`FN
(2)

636 
	`FN
(3)

638 #unde‡
FN


639 
	}
}

641 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED_ADD
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

643 
uöt32
 
Pixñ
;

644 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

645 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

646 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

648 
	#FN
(
N
) \

649 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

651 i‡(
SubDïth
 [
N
]) \

653 i‡(
SubDïth
 [
N
] != 1) \

654 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

655 
S¸ìn
 [
gfx
->
Dñè
 + 
N
]); \

657 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

658 
gfx
->
FixedCﬁour
); \

661 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

662 
Dïth
 [
N
] = 
gfx
->
Z2
; \

663 }

	)

665 
	`FN
(0)

666 
	`FN
(1)

667 
	`FN
(2)

668 
	`FN
(3)

670 #unde‡
FN


671 
	}
}

673 
INLINE
 
	$WRITE_4PIXELS16_ADD1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

675 
uöt32
 
Pixñ
;

676 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

677 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

678 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

680 
	#FN
(
N
) \

681 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

683 i‡(
SubDïth
 [
N
]) \

685 i‡(
SubDïth
 [
N
] != 1) \

686 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

687 
S¸ìn
 [
gfx
->
Dñè
 + 
N
])); \

689 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

690 
gfx
->
FixedCﬁour
); \

693 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

694 
Dïth
 [
N
] = 
gfx
->
Z2
; \

695 }

	)

697 
	`FN
(0)

698 
	`FN
(1)

699 
	`FN
(2)

700 
	`FN
(3)

702 #unde‡
FN


703 
	}
}

705 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED_ADD1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

707 
uöt32
 
Pixñ
;

708 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

709 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

710 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

712 
	#FN
(
N
) \

713 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

715 i‡(
SubDïth
 [
N
]) \

717 i‡(
SubDïth
 [
N
] != 1) \

718 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

719 
S¸ìn
 [
gfx
->
Dñè
 + 
N
])); \

721 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

722 
gfx
->
FixedCﬁour
); \

725 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

726 
Dïth
 [
N
] = 
gfx
->
Z2
; \

727 }

	)

729 
	`FN
(0)

730 
	`FN
(1)

731 
	`FN
(2)

732 
	`FN
(3)

734 #unde‡
FN


735 
	}
}

737 
INLINE
 
	$WRITE_4PIXELS16_SUB
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

739 
uöt32
 
Pixñ
;

740 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

741 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

742 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

744 
	#FN
(
N
) \

745 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

747 i‡(
SubDïth
 [
N
]) \

749 i‡(
SubDïth
 [
N
] != 1) \

750 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

751 
S¸ìn
 [
gfx
->
Dñè
 + 
N
]); \

753 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

754 
gfx
->
FixedCﬁour
); \

757 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

758 
Dïth
 [
N
] = 
gfx
->
Z2
; \

759 }

	)

761 
	`FN
(0)

762 
	`FN
(1)

763 
	`FN
(2)

764 
	`FN
(3)

766 #unde‡
FN


767 
	}
}

769 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED_SUB
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

771 
uöt32
 
Pixñ
;

772 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

773 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

774 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

776 
	#FN
(
N
) \

777 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

779 i‡(
SubDïth
 [
N
]) \

781 i‡(
SubDïth
 [
N
] != 1) \

782 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

783 
S¸ìn
 [
gfx
->
Dñè
 + 
N
]); \

785 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

786 
gfx
->
FixedCﬁour
); \

789 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

790 
Dïth
 [
N
] = 
gfx
->
Z2
; \

791 }

	)

793 
	`FN
(0)

794 
	`FN
(1)

795 
	`FN
(2)

796 
	`FN
(3)

798 #unde‡
FN


799 
	}
}

801 
INLINE
 
	$WRITE_4PIXELS16_SUB1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

803 
uöt32
 
Pixñ
;

804 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

805 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

806 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

808 
	#FN
(
N
) \

809 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

811 i‡(
SubDïth
 [
N
]) \

813 i‡(
SubDïth
 [
N
] != 1) \

814 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

815 
S¸ìn
 [
gfx
->
Dñè
 + 
N
]); \

817 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

818 
gfx
->
FixedCﬁour
); \

821 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

822 
Dïth
 [
N
] = 
gfx
->
Z2
; \

823 }

	)

825 
	`FN
(0)

826 
	`FN
(1)

827 
	`FN
(2)

828 
	`FN
(3)

830 #unde‡
FN


831 
	}
}

833 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED_SUB1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

835 
uöt32
 
Pixñ
;

836 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

837 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

838 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

840 
	#FN
(
N
) \

841 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

843 i‡(
SubDïth
 [
N
]) \

845 i‡(
SubDïth
 [
N
] != 1) \

846 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

847 
S¸ìn
 [
gfx
->
Dñè
 + 
N
]); \

849 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

850 
gfx
->
FixedCﬁour
); \

853 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

854 
Dïth
 [
N
] = 
gfx
->
Z2
; \

855 }

	)

857 
	`FN
(0)

858 
	`FN
(1)

859 
	`FN
(2)

860 
	`FN
(3)

862 #unde‡
FN


863 
	}
}

866 
	$DøwTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

867 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

869 
TILE_PREAMBLE


870 
uöt8
 *
bp
;

872 
	`RENDER_TILE
(
WRITE_4PIXELS16_ADD
, 
WRITE_4PIXELS16_FLIPPED_ADD
, 4)

873 
	}
}

875 
	$DøwClù≥dTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

876 
uöt32
 
SèπPixñ
, uöt32 
Width
,

877 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

879 
TILE_PREAMBLE


880 
uöt8
 *
bp
;

882 
TILE_CLIP_PREAMBLE


883 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_ADD
, 
WRITE_4PIXELS16_FLIPPED_ADD
, 4)

884 
	}
}

886 
	$DøwTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

887 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

889 
TILE_PREAMBLE


890 
uöt8
 *
bp
;

892 
	`RENDER_TILE
(
WRITE_4PIXELS16_ADD1_2
, 
WRITE_4PIXELS16_FLIPPED_ADD1_2
, 4)

893 
	}
}

895 
	$DøwClù≥dTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

896 
uöt32
 
SèπPixñ
, uöt32 
Width
,

897 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

899 
TILE_PREAMBLE


900 
uöt8
 *
bp
;

902 
TILE_CLIP_PREAMBLE


903 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_ADD1_2
, 
WRITE_4PIXELS16_FLIPPED_ADD1_2
, 4)

904 
	}
}

906 
	$DøwTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

907 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

909 
TILE_PREAMBLE


910 
uöt8
 *
bp
;

912 
	`RENDER_TILE
(
WRITE_4PIXELS16_SUB
, 
WRITE_4PIXELS16_FLIPPED_SUB
, 4)

913 
	}
}

915 
	$DøwClù≥dTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

916 
uöt32
 
SèπPixñ
, uöt32 
Width
,

917 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

919 
TILE_PREAMBLE


920 
uöt8
 *
bp
;

922 
TILE_CLIP_PREAMBLE


923 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_SUB
, 
WRITE_4PIXELS16_FLIPPED_SUB
, 4)

924 
	}
}

926 
	$DøwTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

927 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

929 
TILE_PREAMBLE


930 
uöt8
 *
bp
;

932 
	`RENDER_TILE
(
WRITE_4PIXELS16_SUB1_2
, 
WRITE_4PIXELS16_FLIPPED_SUB1_2
, 4)

933 
	}
}

935 
	$DøwClù≥dTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

936 
uöt32
 
SèπPixñ
, uöt32 
Width
,

937 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

939 
TILE_PREAMBLE


940 
uöt8
 *
bp
;

942 
TILE_CLIP_PREAMBLE


943 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_SUB1_2
, 
WRITE_4PIXELS16_FLIPPED_SUB1_2
, 4)

944 
	}
}

946 
INLINE
 
	$WRITE_4PIXELS16_ADDF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

948 
uöt32
 
Pixñ
;

949 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

950 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

951 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

953 
	#FN
(
N
) \

954 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

956 i‡(
SubDïth
 [
N
] == 1) \

957 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

958 
gfx
->
FixedCﬁour
)); \

960 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
];\

961 
Dïth
 [
N
] = 
gfx
->
Z2
; \

962 }

	)

964 
	`FN
(0)

965 
	`FN
(1)

966 
	`FN
(2)

967 
	`FN
(3)

969 #unde‡
FN


970 
	}
}

972 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED_ADDF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

974 
uöt32
 
Pixñ
;

975 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

976 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

977 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

979 
	#FN
(
N
) \

980 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

982 i‡(
SubDïth
 [
N
] == 1) \

983 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

984 
gfx
->
FixedCﬁour
)); \

986 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
];\

987 
Dïth
 [
N
] = 
gfx
->
Z2
; \

988 }

	)

990 
	`FN
(0)

991 
	`FN
(1)

992 
	`FN
(2)

993 
	`FN
(3)

995 #unde‡
FN


996 
	}
}

998 
INLINE
 
	$WRITE_4PIXELS16_SUBF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

1000 
uöt32
 
Pixñ
;

1001 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

1002 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

1003 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

1005 
	#FN
(
N
) \

1006 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

1008 i‡(
SubDïth
 [
N
] == 1) \

1009 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

1010 
gfx
->
FixedCﬁour
); \

1012 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

1013 
Dïth
 [
N
] = 
gfx
->
Z2
; \

1014 }

	)

1016 
	`FN
(0)

1017 
	`FN
(1)

1018 
	`FN
(2)

1019 
	`FN
(3)

1021 #unde‡
FN


1022 
	}
}

1024 
INLINE
 
	$WRITE_4PIXELS16_FLIPPED_SUBF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
, 
SGFX
 * 
gfx
)

1026 
uöt32
 
Pixñ
;

1027 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

1028 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

1029 
uöt8
 *
SubDïth
 = 
gfx
->
SubZBuf„r
 + 
Off£t
;

1031 
	#FN
(
N
) \

1032 i‡(
gfx
->
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

1034 i‡(
SubDïth
 [
N
] == 1) \

1035 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
], \

1036 
gfx
->
FixedCﬁour
); \

1038 
S¸ìn
 [
N
] = 
gfx
->
S¸ìnCﬁ‹s
 [
Pixñ
]; \

1039 
Dïth
 [
N
] = 
gfx
->
Z2
; \

1040 }

	)

1042 
	`FN
(0)

1043 
	`FN
(1)

1044 
	`FN
(2)

1045 
	`FN
(3)

1047 #unde‡
FN


1048 
	}
}

1050 
	$DøwTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

1051 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

1053 
TILE_PREAMBLE


1054 
uöt8
 *
bp
;

1056 
	`RENDER_TILE
(
WRITE_4PIXELS16_ADDF1_2
, 
WRITE_4PIXELS16_FLIPPED_ADDF1_2
, 4)

1057 
	}
}

1059 
	$DøwClù≥dTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1060 
uöt32
 
SèπPixñ
, uöt32 
Width
,

1061 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1063 
TILE_PREAMBLE


1064 
uöt8
 *
bp
;

1066 
TILE_CLIP_PREAMBLE


1067 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_ADDF1_2
,

1068 
WRITE_4PIXELS16_FLIPPED_ADDF1_2
, 4)

1069 
	}
}

1071 
	$DøwTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

1072 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

1074 
TILE_PREAMBLE


1075 
uöt8
 *
bp
;

1077 
	`RENDER_TILE
(
WRITE_4PIXELS16_SUBF1_2
, 
WRITE_4PIXELS16_FLIPPED_SUBF1_2
, 4)

1078 
	}
}

1080 
	$DøwClù≥dTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1081 
uöt32
 
SèπPixñ
, uöt32 
Width
,

1082 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1084 
TILE_PREAMBLE


1085 
uöt8
 *
bp
;

1087 
TILE_CLIP_PREAMBLE


1088 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_SUBF1_2
,

1089 
WRITE_4PIXELS16_FLIPPED_SUBF1_2
, 4)

1090 
	}
}

1092 
	$DøwL¨gePixñ16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1093 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

1094 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1096 
TILE_PREAMBLE


1098 
uöt16
 *
•
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

1099 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

1100 
uöt16
 
pixñ
;

1102 
	#LARGE_ADD_PIXEL
(
s
, 
p
) \

1103 (
Dïth
 [
z
 + 
gfx
->
DïthDñè
] ? (Depth [z + gfx->DepthDelta] != 1 ? \

1104 
	`COLOR_ADD
 (
p
, *(
s
 + 
gfx
->
Dñè
)) : \

1105 
	`COLOR_ADD
 (
p
, 
gfx
->
FixedCﬁour
)) \

1106 : 
p
)

	)

1108 
	`RENDER_TILE_LARGE
 (
gfx
->
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_ADD_PIXEL
)

1109 
	}
}

1111 
	$DøwL¨gePixñ16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1112 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

1113 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1115 
TILE_PREAMBLE


1117 
uöt16
 *
•
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

1118 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

1119 
uöt16
 
pixñ
;

1121 
	#LARGE_ADD_PIXEL1_2
(
s
, 
p
) \

1122 ((
uöt16
Ë(
Dïth
 [
z
 + 
gfx
->
DïthDñè
] ? (Depth [z + gfx->DepthDelta] != 1 ? \

1123 
	`COLOR_ADD1_2
 (
p
, *(
s
 + 
gfx
->
Dñè
)) : \

1124 
	`COLOR_ADD
 (
p
, 
gfx
->
FixedCﬁour
)) \

1125 : 
p
))

	)

1127 
	`RENDER_TILE_LARGE
 (
gfx
->
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_ADD_PIXEL1_2
)

1128 
	}
}

1130 
	$DøwL¨gePixñ16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1131 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

1132 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1134 
TILE_PREAMBLE


1136 
uöt16
 *
•
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

1137 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

1138 
uöt16
 
pixñ
;

1140 
	#LARGE_SUB_PIXEL
(
s
, 
p
) \

1141 (
Dïth
 [
z
 + 
gfx
->
DïthDñè
] ? (Depth [z + gfx->DepthDelta] != 1 ? \

1142 
	`COLOR_SUB
 (
p
, *(
s
 + 
gfx
->
Dñè
)) : \

1143 
	`COLOR_SUB
 (
p
, 
gfx
->
FixedCﬁour
)) \

1144 : 
p
)

	)

1146 
	`RENDER_TILE_LARGE
 (
gfx
->
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_SUB_PIXEL
)

1147 
	}
}

1149 
	$DøwL¨gePixñ16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1150 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

1151 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1153 
TILE_PREAMBLE


1155 
uöt16
 *
•
 = (uöt16 *Ë
gfx
->
S
 + 
Off£t
;

1156 
uöt8
 *
Dïth
 = 
gfx
->
ZBuf„r
 + 
Off£t
;

1157 
uöt16
 
pixñ
;

1159 
	#LARGE_SUB_PIXEL1_2
(
s
, 
p
) \

1160 (
Dïth
 [
z
 + 
gfx
->
DïthDñè
] ? (Depth [z + gfx->DepthDelta] != 1 ? \

1161 
	`COLOR_SUB1_2
 (
p
, *(
s
 + 
gfx
->
Dñè
)) : \

1162 
	`COLOR_SUB
 (
p
, 
gfx
->
FixedCﬁour
)) \

1163 : 
p
)

	)

1165 
	`RENDER_TILE_LARGE
 (
gfx
->
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_SUB_PIXEL1_2
)

1166 
	}
}

1168 
	$DøwHiResTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

1169 
uöt32
 
LöeCou¡
, 
SGFX
 * 
gfx
)

1171 
TILE_PREAMBLE


1172 
uöt8
 *
bp
;

1174 
	`RENDER_TILEHI
(
WRITE_4PIXELSHI16
, 
WRITE_4PIXELSHI16_FLIPPED
, 4)

1175 
	}
}

1177 
	$DøwHiResClù≥dTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

1178 
uöt32
 
SèπPixñ
, uöt32 
Width
,

1179 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
, 
SGFX
 * 
gfx
)

1181 
TILE_PREAMBLE


1182 
uöt8
 *
bp
;

1184 
TILE_CLIP_PREAMBLE


1185 
	`RENDER_CLIPPED_TILEHI
(
WRITE_4PIXELSHI16
, 
WRITE_4PIXELSHI16_FLIPPED
, 4)

1186 
	}
}

	@tile.h

41 #i‚de‡
_TILE_H_


42 
	#_TILE_H_


	)

44 
	#TILE_PREAMBLE
 \

45 
uöt8
 *
pCache
; \

47 
uöt32
 
TûeAddr
 = 
BG
.
TûeAddªss
 + ((
Tûe
 & 0x3ffË<< BG.
TûeShi·
); \

48 i‡((
Tûe
 & 0x1ff) >= 256) \

49 
TûeAddr
 +
BG
.
NameSñe˘
; \

51 
TûeAddr
 &= 0xffff; \

53 
uöt32
 
TûeNumbî
; \

54 
pCache
 = &
BG
.
Buf„r
[(
TûeNumbî
 = (
TûeAddr
 >> BG.
TûeShi·
)) << 6]; \

56 i‡(!
BG
.
Buf„ªd
 [
TûeNumbî
]) \

57 
BG
.
Buf„ªd
[
TûeNumbî
] = 
	`C⁄vîtTûe
 (
pCache
, 
TûeAddr
); \

59 i‡(
BG
.
Buf„ªd
 [
TûeNumbî
] =
BLANK_TILE
) \

62 
uöt32
 
l
; \

63 i‡(
BG
.
Dúe˘CﬁourMode
) \

65 i‡(
IPPU
.
Dúe˘CﬁourM≠sNìdRebuûd
) \

66 
	`S9xBuûdDúe˘CﬁourM≠s
 (); \

67 
gfx
->
S¸ìnCﬁ‹s
 = 
Dúe˘CﬁourM≠s
 [(
Tûe
 >> 10Ë& 
BG
.
PÆëãMask
]; \

70 
gfx
->
S¸ìnCﬁ‹s
 = &
IPPU
.S¸ìnCﬁ‹†[(((
Tûe
 >> 10Ë& 
BG
.
PÆëãMask
Ë<< BG.
PÆëãShi·
Ë+ BG.
SèπPÆëã
];

	)

72 
	#RENDER_TILE
(
NORMAL
, 
FLIPPED
, 
N
) \

73 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
))) \

75 
bp
 = 
pCache
 + 
SèπLöe
; \

76 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

78 i‡(*(
uöt32
 *Ë
bp
) \

79 
	`NORMAL
 (
Off£t
, 
bp
, 
gfx
); \

80 i‡(*(
uöt32
 *Ë(
bp
 + 4)) \

81 
	`NORMAL
 (
Off£t
 + 
N
, 
bp
 + 4, 
gfx
); \

85 i‡(!(
Tûe
 & 
V_FLIP
)) \

87 
bp
 = 
pCache
 + 
SèπLöe
; \

88 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

90 i‡(*(
uöt32
 *Ë(
bp
 + 4)) \

91 
	`FLIPPED
 (
Off£t
, 
bp
 + 4, 
gfx
); \

92 i‡(*(
uöt32
 *Ë
bp
) \

93 
	`FLIPPED
 (
Off£t
 + 
N
, 
bp
, 
gfx
); \

97 i‡(
Tûe
 & 
H_FLIP
) \

99 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

100 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

102 i‡(*(
uöt32
 *Ë(
bp
 + 4)) \

103 
	`FLIPPED
 (
Off£t
, 
bp
 + 4, 
gfx
); \

104 i‡(*(
uöt32
 *Ë
bp
) \

105 
	`FLIPPED
 (
Off£t
 + 
N
, 
bp
, 
gfx
); \

110 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

111 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

113 i‡(*(
uöt32
 *Ë
bp
) \

114 
	`NORMAL
 (
Off£t
, 
bp
, 
gfx
); \

115 i‡(*(
uöt32
 *Ë(
bp
 + 4)) \

116 
	`NORMAL
 (
Off£t
 + 
N
, 
bp
 + 4, 
gfx
); \

118 }

	)

120 
	#TILE_CLIP_PREAMBLE
 \

121 
uöt32
 
dd
; \

122 
uöt32
 
d1
; \

123 
uöt32
 
d2
; \

125 i‡(
SèπPixñ
 < 4) \

127 
d1
 = 
HódMask
 [
SèπPixñ
]; \

128 i‡(
SèπPixñ
 + 
Width
 < 4) \

129 
d1
 &
TaûMask
 [
SèπPixñ
 + 
Width
]; \

132 
d1
 = 0; \

134 i‡(
SèπPixñ
 + 
Width
 > 4) \

136 i‡(
SèπPixñ
 > 4) \

137 
d2
 = 
HódMask
 [
SèπPixñ
 - 4]; \

139 
d2
 = 0xffffffff; \

141 
d2
 &
TaûMask
 [(
SèπPixñ
 + 
Width
 - 4)]; \

144 
d2
 = 0;

	)

147 
	#RENDER_CLIPPED_TILE
(
NORMAL
, 
FLIPPED
, 
N
) \

148 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
))) \

150 
bp
 = 
pCache
 + 
SèπLöe
; \

151 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

153 i‡((
dd
 = (*(
uöt32
 *Ë
bp
Ë& 
d1
)) \

154 
	`NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
, 
gfx
); \

155 i‡((
dd
 = (*(
uöt32
 *Ë(
bp
 + 4)Ë& 
d2
)) \

156 
	`NORMAL
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
, 
gfx
); \

160 i‡(!(
Tûe
 & 
V_FLIP
)) \

162 
bp
 = 
pCache
 + 
SèπLöe
; \

163 
	`SWAP_DWORD
 (
d1
); \

164 
	`SWAP_DWORD
 (
d2
); \

165 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

167 i‡((
dd
 = *(
uöt32
 *Ë(
bp
 + 4Ë& 
d1
)) \

168 
	`FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
, 
gfx
); \

169 i‡((
dd
 = *(
uöt32
 *Ë
bp
 & 
d2
)) \

170 
	`FLIPPED
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
, 
gfx
); \

174 i‡(
Tûe
 & 
H_FLIP
) \

176 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

177 
	`SWAP_DWORD
 (
d1
); \

178 
	`SWAP_DWORD
 (
d2
); \

179 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

181 i‡((
dd
 = *(
uöt32
 *Ë(
bp
 + 4Ë& 
d1
)) \

182 
	`FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
, 
gfx
); \

183 i‡((
dd
 = *(
uöt32
 *Ë
bp
 & 
d2
)) \

184 
	`FLIPPED
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
, 
gfx
); \

189 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

190 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

192 i‡((
dd
 = (*(
uöt32
 *Ë
bp
Ë& 
d1
)) \

193 
	`NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
, 
gfx
); \

194 i‡((
dd
 = (*(
uöt32
 *Ë(
bp
 + 4)Ë& 
d2
)) \

195 
	`NORMAL
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
, 
gfx
); \

197 }

	)

199 
	#RENDER_TILE_LARGE
(
PIXEL
, 
FUNCTION
) \

200 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
))) \

202 i‡((
pixñ
 = *(
pCache
 + 
SèπLöe
 + 
SèπPixñ
))) \

204 
pixñ
 = 
PIXEL
; \

205 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
•
 +
gfx
->
PPL
, 
Dïth
 += gfx->PPL) \

207 
z
 = 
Pixñs
 - 1; z >= 0; z--) \

208 i‡(
gfx
->
Z1
 > 
Dïth
 [
z
]) \

210 
•
 [
z
] = 
	`FUNCTION
(• + z, 
pixñ
); \

211 
Dïth
 [
z
] = 
gfx
->
Z2
; \

217 i‡(!(
Tûe
 & 
V_FLIP
)) \

219 
SèπPixñ
 = 7 - StartPixel; \

220 i‡((
pixñ
 = *(
pCache
 + 
SèπLöe
 + 
SèπPixñ
))) \

222 
pixñ
 = 
PIXEL
; \

223 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
•
 +
gfx
->
PPL
, 
Dïth
 += gfx->PPL) \

225 
z
 = 
Pixñs
 - 1; z >= 0; z--) \

226 i‡(
gfx
->
Z1
 > 
Dïth
 [
z
]) \

228 
•
 [
z
] = 
	`FUNCTION
(• + z, 
pixñ
); \

229 
Dïth
 [
z
] = 
gfx
->
Z2
; \

235 i‡(
Tûe
 & 
H_FLIP
) \

237 
SèπPixñ
 = 7 - StartPixel; \

238 i‡((
pixñ
 = *(
pCache
 + 56 - 
SèπLöe
 + 
SèπPixñ
))) \

240 
pixñ
 = 
PIXEL
; \

241 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
•
 +
gfx
->
PPL
, 
Dïth
 += gfx->PPL) \

243 
z
 = 
Pixñs
 - 1; z >= 0; z--) \

244 i‡(
gfx
->
Z1
 > 
Dïth
 [
z
]) \

246 
•
 [
z
] = 
	`FUNCTION
(• + z, 
pixñ
); \

247 
Dïth
 [
z
] = 
gfx
->
Z2
; \

254 i‡((
pixñ
 = *(
pCache
 + 56 - 
SèπLöe
 + 
SèπPixñ
))) \

256 
pixñ
 = 
PIXEL
; \

257 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
•
 +
gfx
->
PPL
, 
Dïth
 += gfx->PPL) \

259 
z
 = 
Pixñs
 - 1; z >= 0; z--) \

260 i‡(
gfx
->
Z1
 > 
Dïth
 [
z
]) \

262 
•
 [
z
] = 
	`FUNCTION
(• + z, 
pixñ
); \

263 
Dïth
 [
z
] = 
gfx
->
Z2
; \

267 }

	)

269 
	#RENDER_TILEHI
(
NORMAL
, 
FLIPPED
, 
N
) \

270 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
))) \

272 
bp
 = 
pCache
 + 
SèπLöe
; \

273 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

275  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

276 
	`NORMAL
 (
Off£t
, 
bp
); \

280 i‡(!(
Tûe
 & 
V_FLIP
)) \

282 
bp
 = 
pCache
 + 
SèπLöe
; \

283 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

285  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

286 
	`FLIPPED
 (
Off£t
, 
bp
); \

290 i‡(
Tûe
 & 
H_FLIP
) \

292 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

293 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

295  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

296 
	`FLIPPED
 (
Off£t
, 
bp
); \

301 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

302 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

304  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

305 
	`NORMAL
 (
Off£t
, 
bp
); \

307 }

	)

311 
	#RENDER_CLIPPED_TILEHI
(
NORMAL
, 
FLIPPED
, 
N
) \

312 
d1
=(d1&0xFF)|((d1&0xFF0000)>>8)|((
d2
&0xFF)<<16)|((d2&0xFF0000)<<8);\

313 i‡(!(
Tûe
 & (
V_FLIP
 | 
H_FLIP
))) \

315 
bp
 = 
pCache
 + 
SèπLöe
; \

316 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

318  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

319 
	`NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

323 i‡(!(
Tûe
 & 
V_FLIP
)) \

325 
bp
 = 
pCache
 + 
SèπLöe
; \

326 
	`SWAP_DWORD
 (
d1
); \

328 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 +8, 
Off£t
 +
gfx
->
PPL
) \

330  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

331 
	`FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

335 i‡(
Tûe
 & 
H_FLIP
) \

337 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

338 
	`SWAP_DWORD
 (
d1
); \

340 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

342  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

343 
	`FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

348 
bp
 = 
pCache
 + 56 - 
SèπLöe
; \

349 
l
 = 
LöeCou¡
;Ü !0;Ü--, 
bp
 -8, 
Off£t
 +
gfx
->
PPL
) \

351  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

352 
	`NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

354 }

	)

	@tile_org.cpp

41 
	~"¢es9x.h
"

43 
	~"memm≠.h
"

44 
	~"µu.h
"

45 
	~"˝uexec.h
"

46 
	~"di•œy.h
"

47 
	~"gfx.h
"

48 
	~"≠u.h
"

49 
	~"tûe_‹g.h
"

52 
uöt32
 
HódMask
 [4];

53 
uöt32
 
TaûMask
 [5];

55 
uöt8
 
	$‹gC⁄vîtTûe
 (
uöt8
 *
pCache
, 
uöt32
 
TûeAddr
)

57 
uöt8
 *
ç
 = &
Mem‹y
.
VRAM
[
TûeAddr
];

58 
uöt32
 *
p
 = (uöt32 *Ë
pCache
;

59 
uöt32
 
n⁄_zîo
 = 0;

60 
uöt8
 
löe
;

62 
BG
.
BôShi·
)

65 
löe
 = 8;Üöê!0;Üöe--, 
ç
 += 2)

67 
uöt32
 
p1
 = 0;

68 
uöt32
 
p2
 = 0;

69 
uöt8
 
pix
;

71 i‡((
pix
 = *(
ç
 + 0)))

73 
p1
 |
odd_high
[0][
pix
 >> 4];

74 
p2
 |
odd_low
[0][
pix
 & 0xf];

76 i‡((
pix
 = *(
ç
 + 1)))

78 
p1
 |
eví_high
[0][
pix
 >> 4];

79 
p2
 |
eví_low
[0][
pix
 & 0xf];

81 i‡((
pix
 = *(
ç
 + 16)))

83 
p1
 |
odd_high
[1][
pix
 >> 4];

84 
p2
 |
odd_low
[1][
pix
 & 0xf];

86 i‡((
pix
 = *(
ç
 + 17)))

88 
p1
 |
eví_high
[1][
pix
 >> 4];

89 
p2
 |
eví_low
[1][
pix
 & 0xf];

91 i‡((
pix
 = *(
ç
 + 32)))

93 
p1
 |
odd_high
[2][
pix
 >> 4];

94 
p2
 |
odd_low
[2][
pix
 & 0xf];

96 i‡((
pix
 = *(
ç
 + 33)))

98 
p1
 |
eví_high
[2][
pix
 >> 4];

99 
p2
 |
eví_low
[2][
pix
 & 0xf];

101 i‡((
pix
 = *(
ç
 + 48)))

103 
p1
 |
odd_high
[3][
pix
 >> 4];

104 
p2
 |
odd_low
[3][
pix
 & 0xf];

106 i‡((
pix
 = *(
ç
 + 49)))

108 
p1
 |
eví_high
[3][
pix
 >> 4];

109 
p2
 |
eví_low
[3][
pix
 & 0xf];

111 *
p
++ = 
p1
;

112 *
p
++ = 
p2
;

113 
n⁄_zîo
 |
p1
 | 
p2
;

118 
löe
 = 8;Üöê!0;Üöe--, 
ç
 += 2)

120 
uöt32
 
p1
 = 0;

121 
uöt32
 
p2
 = 0;

122 
uöt8
 
pix
;

123 i‡((
pix
 = *(
ç
 + 0)))

125 
p1
 |
odd_high
[0][
pix
 >> 4];

126 
p2
 |
odd_low
[0][
pix
 & 0xf];

128 i‡((
pix
 = *(
ç
 + 1)))

130 
p1
 |
eví_high
[0][
pix
 >> 4];

131 
p2
 |
eví_low
[0][
pix
 & 0xf];

133 i‡((
pix
 = *(
ç
 + 16)))

135 
p1
 |
odd_high
[1][
pix
 >> 4];

136 
p2
 |
odd_low
[1][
pix
 & 0xf];

138 i‡((
pix
 = *(
ç
 + 17)))

140 
p1
 |
eví_high
[1][
pix
 >> 4];

141 
p2
 |
eví_low
[1][
pix
 & 0xf];

143 *
p
++ = 
p1
;

144 *
p
++ = 
p2
;

145 
n⁄_zîo
 |
p1
 | 
p2
;

150 
löe
 = 8;Üöê!0;Üöe--, 
ç
 += 2)

152 
uöt32
 
p1
 = 0;

153 
uöt32
 
p2
 = 0;

154 
uöt8
 
pix
;

155 i‡((
pix
 = *(
ç
 + 0)))

157 
p1
 |
odd_high
[0][
pix
 >> 4];

158 
p2
 |
odd_low
[0][
pix
 & 0xf];

160 i‡((
pix
 = *(
ç
 + 1)))

162 
p1
 |
eví_high
[0][
pix
 >> 4];

163 
p2
 |
eví_low
[0][
pix
 & 0xf];

165 *
p
++ = 
p1
;

166 *
p
++ = 
p2
;

167 
n⁄_zîo
 |
p1
 | 
p2
;

171  (
n⁄_zîo
 ? 
TRUE
 : 
BLANK_TILE
);

172 
	}
}

176 
	#PLOT_PIXEL
(
s¸ìn
, 
pixñ
Ë’ixñ)

	)

178 
ölöe
 
	$WRITE_4PIXELS16
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

180 
uöt32
 
Pixñ
;

181 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

182 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

184 
	#FN
(
N
Ë\

	)

185 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

187 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

188 
Dïth
 [
N
] = 
GFX
.
Z2
; \

191 
	`FN
(0)

192 
	`FN
(1)

193 
	`FN
(2)

194 
	`FN
(3)

195 #unde‡
FN


196 
	}
}

198 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

200 
uöt32
 
Pixñ
;

201 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

202 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

204 
	#FN
(
N
Ë\

	)

205 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

207 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

208 
Dïth
 [
N
] = 
GFX
.
Z2
; \

211 
	`FN
(0)

212 
	`FN
(1)

213 
	`FN
(2)

214 
	`FN
(3)

215 #unde‡
FN


216 
	}
}

219 
ölöe
 
	$WRITE_4PIXELSHI16
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

221 
uöt32
 
Pixñ
;

222 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

223 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

225 
	#FN
(
N
Ë\

	)

226 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[2*N])) \

228 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

229 
Dïth
 [
N
] = 
GFX
.
Z2
; \

232 
	`FN
(0)

233 
	`FN
(1)

234 
	`FN
(2)

235 
	`FN
(3)

236 #unde‡
FN


237 
	}
}

239 
ölöe
 
	$WRITE_4PIXELSHI16_FLIPPED
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

241 
uöt32
 
Pixñ
;

242 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

243 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

245 
	#FN
(
N
Ë\

	)

246 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[6 - 2*N])) \

248 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

249 
Dïth
 [
N
] = 
GFX
.
Z2
; \

252 
	`FN
(0)

253 
	`FN
(1)

254 
	`FN
(2)

255 
	`FN
(3)

256 #unde‡
FN


257 
	}
}

260 
ölöe
 
	$WRITE_4PIXELS16x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

262 
uöt32
 
Pixñ
;

263 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

264 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

266 
	#FN
(
N
Ë\

	)

267 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[N])) \

269 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

270 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = 
GFX
.
Z2
; \

273 
	`FN
(0)

274 
	`FN
(1)

275 
	`FN
(2)

276 
	`FN
(3)

277 #unde‡
FN


278 
	}
}

280 
ölöe
 
	$WRITE_4PIXELS16_FLIPPEDx2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

282 
uöt32
 
Pixñ
;

283 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

284 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

286 
	#FN
(
N
Ë\

	)

287 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[3 - N])) \

289 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

290 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = 
GFX
.
Z2
; \

293 
	`FN
(0)

294 
	`FN
(1)

295 
	`FN
(2)

296 
	`FN
(3)

297 #unde‡
FN


298 
	}
}

300 
ölöe
 
	$WRITE_4PIXELS16x2x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

302 
uöt32
 
Pixñ
;

303 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

304 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

306 
	#FN
(
N
Ë\

	)

307 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[N])) \

309 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = S¸ì¿[(
GFX
.
RólPôch
 >> 1) + N * 2] = \

310 
S¸ìn
 [(
GFX
.
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = GFX.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

311 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = Dïth [(
GFX
.
RólPôch
 >> 1) + N * 2] = \

312 
Dïth
 [(
GFX
.
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = GFX.
Z2
; \

315 
	`FN
(0)

316 
	`FN
(1)

317 
	`FN
(2)

318 
	`FN
(3)

319 #unde‡
FN


320 
	}
}

322 
ölöe
 
	$WRITE_4PIXELS16_FLIPPEDx2x2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

324 
uöt32
 
Pixñ
;

325 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

326 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

328 
	#FN
(
N
Ë\

	)

329 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
 * 2] && (
Pixñ
 = 
Pixñs
[3 - N])) \

331 
S¸ìn
 [
N
 * 2] = S¸ì¿[N * 2 + 1] = S¸ì¿[(
GFX
.
RólPôch
 >> 1) + N * 2] = \

332 
S¸ìn
 [(
GFX
.
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = GFX.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

333 
Dïth
 [
N
 * 2] = Dïth [N * 2 + 1] = Dïth [(
GFX
.
RólPôch
 >> 1) + N * 2] = \

334 
Dïth
 [(
GFX
.
RólPôch
 >> 1Ë+ 
N
 * 2 + 1] = GFX.
Z2
; \

337 
	`FN
(0)

338 
	`FN
(1)

339 
	`FN
(2)

340 
	`FN
(3)

341 #unde‡
FN


342 
	}
}

344 
	$‹gDøwTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

345 
uöt32
 
LöeCou¡
)

347 
TILE_PREAMBLE


348 
uöt8
 *
bp
;

350 
	`RENDER_TILE
(
WRITE_4PIXELS16
, 
WRITE_4PIXELS16_FLIPPED
, 4)

351 
	}
}

353 
	$‹gDøwClù≥dTûe16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

354 
uöt32
 
SèπPixñ
, uöt32 
Width
,

355 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

357 
TILE_PREAMBLE


358 
uöt8
 *
bp
;

360 
TILE_CLIP_PREAMBLE


361 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16
, 
WRITE_4PIXELS16_FLIPPED
, 4)

362 
	}
}

364 
	$‹gDøwTûeHi16
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

365 
uöt32
 
LöeCou¡
)

367 
TILE_PREAMBLE


368 
uöt8
 *
bp
;

370 
	`RENDER_TILEHI
(
WRITE_4PIXELSHI16
, 
WRITE_4PIXELSHI16_FLIPPED
, 4)

371 
	}
}

373 
	$‹gDøwClù≥dTûeHi16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

374 
uöt32
 
SèπPixñ
, uöt32 
Width
,

375 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

377 
TILE_PREAMBLE


378 
uöt8
 *
bp
;

380 
TILE_CLIP_PREAMBLE


381 
	`RENDER_CLIPPED_TILEHI
(
WRITE_4PIXELSHI16
, 
WRITE_4PIXELSHI16_FLIPPED
, 4)

382 
	}
}

385 
	$‹gDøwTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

386 
uöt32
 
LöeCou¡
)

388 
TILE_PREAMBLE


389 
uöt8
 *
bp
;

391 
	`RENDER_TILE
(
WRITE_4PIXELS16x2
, 
WRITE_4PIXELS16_FLIPPEDx2
, 8)

392 
	}
}

394 
	$‹gDøwClù≥dTûe16x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

395 
uöt32
 
SèπPixñ
, uöt32 
Width
,

396 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

398 
TILE_PREAMBLE


399 
uöt8
 *
bp
;

401 
TILE_CLIP_PREAMBLE


402 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16x2
, 
WRITE_4PIXELS16_FLIPPEDx2
, 8)

403 
	}
}

405 
	$‹gDøwTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

406 
uöt32
 
LöeCou¡
)

408 
TILE_PREAMBLE


409 
uöt8
 *
bp
;

411 
	`RENDER_TILE
(
WRITE_4PIXELS16x2x2
, 
WRITE_4PIXELS16_FLIPPEDx2x2
, 8)

412 
	}
}

414 
	$‹gDøwClù≥dTûe16x2x2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

415 
uöt32
 
SèπPixñ
, uöt32 
Width
,

416 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

418 
TILE_PREAMBLE


419 
uöt8
 *
bp
;

421 
TILE_CLIP_PREAMBLE


422 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16x2x2
, 
WRITE_4PIXELS16_FLIPPEDx2x2
, 8)

423 
	}
}

425 
	$‹gDøwL¨gePixñ16
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

426 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

427 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

429 
TILE_PREAMBLE


431 
uöt16
 *
•
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

432 
uöt8
 *
Dïth
 = 
GFX
.
DB
 + 
Off£t
;

433 
uöt16
 
pixñ
;

435 
	`RENDER_TILE_LARGE
 (
GFX
.
S¸ìnCﬁ‹s
 [
pixñ
], 
PLOT_PIXEL
)

436 
	}
}

438 
ölöe
 
	$WRITE_4PIXELS16_ADD
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

440 
uöt32
 
Pixñ
;

441 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

442 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

443 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

445 
	#FN
(
N
Ë\

	)

446 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

448 i‡(
SubDïth
 [
N
]) \

450 i‡(
SubDïth
 [
N
] != 1) \

451 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

452 
S¸ìn
 [
GFX
.
Dñè
 + 
N
]); \

454 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

455 
GFX
.
FixedCﬁour
); \

458 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

459 
Dïth
 [
N
] = 
GFX
.
Z2
; \

462 
	`FN
(0)

463 
	`FN
(1)

464 
	`FN
(2)

465 
	`FN
(3)

467 #unde‡
FN


468 
	}
}

470 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED_ADD
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

472 
uöt32
 
Pixñ
;

473 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

474 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

475 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

477 
	#FN
(
N
Ë\

	)

478 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

480 i‡(
SubDïth
 [
N
]) \

482 i‡(
SubDïth
 [
N
] != 1) \

483 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

484 
S¸ìn
 [
GFX
.
Dñè
 + 
N
]); \

486 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

487 
GFX
.
FixedCﬁour
); \

490 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

491 
Dïth
 [
N
] = 
GFX
.
Z2
; \

494 
	`FN
(0)

495 
	`FN
(1)

496 
	`FN
(2)

497 
	`FN
(3)

499 #unde‡
FN


500 
	}
}

502 
ölöe
 
	$WRITE_4PIXELS16_ADD1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

504 
uöt32
 
Pixñ
;

505 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

506 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

507 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

509 
	#FN
(
N
Ë\

	)

510 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

512 i‡(
SubDïth
 [
N
]) \

514 i‡(
SubDïth
 [
N
] != 1) \

515 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

516 
S¸ìn
 [
GFX
.
Dñè
 + 
N
])); \

518 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

519 
GFX
.
FixedCﬁour
); \

522 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

523 
Dïth
 [
N
] = 
GFX
.
Z2
; \

526 
	`FN
(0)

527 
	`FN
(1)

528 
	`FN
(2)

529 
	`FN
(3)

531 #unde‡
FN


532 
	}
}

534 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED_ADD1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

536 
uöt32
 
Pixñ
;

537 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

538 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

539 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

541 
	#FN
(
N
Ë\

	)

542 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

544 i‡(
SubDïth
 [
N
]) \

546 i‡(
SubDïth
 [
N
] != 1) \

547 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

548 
S¸ìn
 [
GFX
.
Dñè
 + 
N
])); \

550 
S¸ìn
 [
N
] = 
	`COLOR_ADD
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

551 
GFX
.
FixedCﬁour
); \

554 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

555 
Dïth
 [
N
] = 
GFX
.
Z2
; \

558 
	`FN
(0)

559 
	`FN
(1)

560 
	`FN
(2)

561 
	`FN
(3)

563 #unde‡
FN


564 
	}
}

566 
ölöe
 
	$WRITE_4PIXELS16_SUB
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

568 
uöt32
 
Pixñ
;

569 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

570 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

571 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

573 
	#FN
(
N
Ë\

	)

574 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

576 i‡(
SubDïth
 [
N
]) \

578 i‡(
SubDïth
 [
N
] != 1) \

579 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

580 
S¸ìn
 [
GFX
.
Dñè
 + 
N
]); \

582 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

583 
GFX
.
FixedCﬁour
); \

586 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

587 
Dïth
 [
N
] = 
GFX
.
Z2
; \

590 
	`FN
(0)

591 
	`FN
(1)

592 
	`FN
(2)

593 
	`FN
(3)

595 #unde‡
FN


596 
	}
}

598 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED_SUB
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

600 
uöt32
 
Pixñ
;

601 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

602 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

603 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

605 
	#FN
(
N
Ë\

	)

606 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

608 i‡(
SubDïth
 [
N
]) \

610 i‡(
SubDïth
 [
N
] != 1) \

611 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

612 
S¸ìn
 [
GFX
.
Dñè
 + 
N
]); \

614 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

615 
GFX
.
FixedCﬁour
); \

618 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

619 
Dïth
 [
N
] = 
GFX
.
Z2
; \

622 
	`FN
(0)

623 
	`FN
(1)

624 
	`FN
(2)

625 
	`FN
(3)

627 #unde‡
FN


628 
	}
}

630 
ölöe
 
	$WRITE_4PIXELS16_SUB1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

632 
uöt32
 
Pixñ
;

633 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

634 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

635 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

637 
	#FN
(
N
Ë\

	)

638 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

640 i‡(
SubDïth
 [
N
]) \

642 i‡(
SubDïth
 [
N
] != 1) \

643 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

644 
S¸ìn
 [
GFX
.
Dñè
 + 
N
]); \

646 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

647 
GFX
.
FixedCﬁour
); \

650 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

651 
Dïth
 [
N
] = 
GFX
.
Z2
; \

654 
	`FN
(0)

655 
	`FN
(1)

656 
	`FN
(2)

657 
	`FN
(3)

659 #unde‡
FN


660 
	}
}

662 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED_SUB1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

664 
uöt32
 
Pixñ
;

665 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

666 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

667 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

669 
	#FN
(
N
Ë\

	)

670 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

672 i‡(
SubDïth
 [
N
]) \

674 i‡(
SubDïth
 [
N
] != 1) \

675 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

676 
S¸ìn
 [
GFX
.
Dñè
 + 
N
]); \

678 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

679 
GFX
.
FixedCﬁour
); \

682 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

683 
Dïth
 [
N
] = 
GFX
.
Z2
; \

686 
	`FN
(0)

687 
	`FN
(1)

688 
	`FN
(2)

689 
	`FN
(3)

691 #unde‡
FN


692 
	}
}

695 
	$‹gDøwTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

696 
uöt32
 
LöeCou¡
)

698 
TILE_PREAMBLE


699 
uöt8
 *
bp
;

701 
	`RENDER_TILE
(
WRITE_4PIXELS16_ADD
, 
WRITE_4PIXELS16_FLIPPED_ADD
, 4)

702 
	}
}

704 
	$‹gDøwClù≥dTûe16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

705 
uöt32
 
SèπPixñ
, uöt32 
Width
,

706 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

708 
TILE_PREAMBLE


709 
uöt8
 *
bp
;

711 
TILE_CLIP_PREAMBLE


712 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_ADD
, 
WRITE_4PIXELS16_FLIPPED_ADD
, 4)

713 
	}
}

715 
	$‹gDøwTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

716 
uöt32
 
LöeCou¡
)

718 
TILE_PREAMBLE


719 
uöt8
 *
bp
;

721 
	`RENDER_TILE
(
WRITE_4PIXELS16_ADD1_2
, 
WRITE_4PIXELS16_FLIPPED_ADD1_2
, 4)

722 
	}
}

724 
	$‹gDøwClù≥dTûe16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

725 
uöt32
 
SèπPixñ
, uöt32 
Width
,

726 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

728 
TILE_PREAMBLE


729 
uöt8
 *
bp
;

731 
TILE_CLIP_PREAMBLE


732 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_ADD1_2
, 
WRITE_4PIXELS16_FLIPPED_ADD1_2
, 4)

733 
	}
}

735 
	$‹gDøwTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

736 
uöt32
 
LöeCou¡
)

738 
TILE_PREAMBLE


739 
uöt8
 *
bp
;

741 
	`RENDER_TILE
(
WRITE_4PIXELS16_SUB
, 
WRITE_4PIXELS16_FLIPPED_SUB
, 4)

742 
	}
}

744 
	$‹gDøwClù≥dTûe16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

745 
uöt32
 
SèπPixñ
, uöt32 
Width
,

746 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

748 
TILE_PREAMBLE


749 
uöt8
 *
bp
;

751 
TILE_CLIP_PREAMBLE


752 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_SUB
, 
WRITE_4PIXELS16_FLIPPED_SUB
, 4)

753 
	}
}

755 
	$‹gDøwTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

756 
uöt32
 
LöeCou¡
)

758 
TILE_PREAMBLE


759 
uöt8
 *
bp
;

761 
	`RENDER_TILE
(
WRITE_4PIXELS16_SUB1_2
, 
WRITE_4PIXELS16_FLIPPED_SUB1_2
, 4)

762 
	}
}

764 
	$‹gDøwClù≥dTûe16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

765 
uöt32
 
SèπPixñ
, uöt32 
Width
,

766 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

768 
TILE_PREAMBLE


769 
uöt8
 *
bp
;

771 
TILE_CLIP_PREAMBLE


772 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_SUB1_2
, 
WRITE_4PIXELS16_FLIPPED_SUB1_2
, 4)

773 
	}
}

775 
ölöe
 
	$WRITE_4PIXELS16_ADDF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

777 
uöt32
 
Pixñ
;

778 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

779 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

780 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

782 
	#FN
(
N
Ë\

	)

783 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

785 i‡(
SubDïth
 [
N
] == 1) \

786 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

787 
GFX
.
FixedCﬁour
)); \

789 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
];\

790 
Dïth
 [
N
] = 
GFX
.
Z2
; \

793 
	`FN
(0)

794 
	`FN
(1)

795 
	`FN
(2)

796 
	`FN
(3)

798 #unde‡
FN


799 
	}
}

801 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED_ADDF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

803 
uöt32
 
Pixñ
;

804 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

805 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

806 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

808 
	#FN
(
N
Ë\

	)

809 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

811 i‡(
SubDïth
 [
N
] == 1) \

812 
S¸ìn
 [
N
] = (
uöt16
Ë(
	`COLOR_ADD1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

813 
GFX
.
FixedCﬁour
)); \

815 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
];\

816 
Dïth
 [
N
] = 
GFX
.
Z2
; \

819 
	`FN
(0)

820 
	`FN
(1)

821 
	`FN
(2)

822 
	`FN
(3)

824 #unde‡
FN


825 
	}
}

827 
ölöe
 
	$WRITE_4PIXELS16_SUBF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

829 
uöt32
 
Pixñ
;

830 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

831 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

832 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

834 
	#FN
(
N
Ë\

	)

835 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[N])) \

837 i‡(
SubDïth
 [
N
] == 1) \

838 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

839 
GFX
.
FixedCﬁour
); \

841 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

842 
Dïth
 [
N
] = 
GFX
.
Z2
; \

845 
	`FN
(0)

846 
	`FN
(1)

847 
	`FN
(2)

848 
	`FN
(3)

850 #unde‡
FN


851 
	}
}

853 
ölöe
 
	$WRITE_4PIXELS16_FLIPPED_SUBF1_2
 (
uöt32
 
Off£t
, 
uöt8
 *
Pixñs
)

855 
uöt32
 
Pixñ
;

856 
uöt16
 *
S¸ìn
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

857 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

858 
uöt8
 *
SubDïth
 = 
GFX
.
SubZBuf„r
 + 
Off£t
;

860 
	#FN
(
N
Ë\

	)

861 i‡(
GFX
.
Z1
 > 
Dïth
 [
N
] && (
Pixñ
 = 
Pixñs
[3 - N])) \

863 i‡(
SubDïth
 [
N
] == 1) \

864 
S¸ìn
 [
N
] = (
uöt16
Ë
	`COLOR_SUB1_2
 (
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
], \

865 
GFX
.
FixedCﬁour
); \

867 
S¸ìn
 [
N
] = 
GFX
.
S¸ìnCﬁ‹s
 [
Pixñ
]; \

868 
Dïth
 [
N
] = 
GFX
.
Z2
; \

871 
	`FN
(0)

872 
	`FN
(1)

873 
	`FN
(2)

874 
	`FN
(3)

876 #unde‡
FN


877 
	}
}

879 
	$‹gDøwTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

880 
uöt32
 
LöeCou¡
)

882 
TILE_PREAMBLE


883 
uöt8
 *
bp
;

885 
	`RENDER_TILE
(
WRITE_4PIXELS16_ADDF1_2
, 
WRITE_4PIXELS16_FLIPPED_ADDF1_2
, 4)

886 
	}
}

888 
	$‹gDøwClù≥dTûe16FixedAdd1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

889 
uöt32
 
SèπPixñ
, uöt32 
Width
,

890 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

892 
TILE_PREAMBLE


893 
uöt8
 *
bp
;

895 
TILE_CLIP_PREAMBLE


896 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_ADDF1_2
,

897 
WRITE_4PIXELS16_FLIPPED_ADDF1_2
, 4)

898 
	}
}

900 
	$‹gDøwTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
, uöt32 
SèπLöe
,

901 
uöt32
 
LöeCou¡
)

903 
TILE_PREAMBLE


904 
uöt8
 *
bp
;

906 
	`RENDER_TILE
(
WRITE_4PIXELS16_SUBF1_2
, 
WRITE_4PIXELS16_FLIPPED_SUBF1_2
, 4)

907 
	}
}

909 
	$‹gDøwClù≥dTûe16FixedSub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

910 
uöt32
 
SèπPixñ
, uöt32 
Width
,

911 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

913 
TILE_PREAMBLE


914 
uöt8
 *
bp
;

916 
TILE_CLIP_PREAMBLE


917 
	`RENDER_CLIPPED_TILE
(
WRITE_4PIXELS16_SUBF1_2
,

918 
WRITE_4PIXELS16_FLIPPED_SUBF1_2
, 4)

919 
	}
}

921 
	$‹gDøwL¨gePixñ16Add
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

922 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

923 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

925 
TILE_PREAMBLE


927 
uöt16
 *
•
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

928 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

929 
uöt16
 
pixñ
;

931 
	#LARGE_ADD_PIXEL
(
s
, 
p
Ë\

	)

932 (
Dïth
 [
z
 + 
GFX
.
DïthDñè
] ? (Depth [z + GFX.DepthDelta] != 1 ? \

933 
	`COLOR_ADD
 (
p
, *(
s
 + 
GFX
.
Dñè
)) : \

934 
	`COLOR_ADD
 (
p
, 
GFX
.
FixedCﬁour
)) \

935 : 
p
)

937 
	`RENDER_TILE_LARGE
 (
GFX
.
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_ADD_PIXEL
)

938 
	}
}

940 
	$‹gDøwL¨gePixñ16Add1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

941 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

942 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

944 
TILE_PREAMBLE


946 
uöt16
 *
•
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

947 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

948 
uöt16
 
pixñ
;

950 
	#LARGE_ADD_PIXEL1_2
(
s
, 
p
Ë\

	)

951 ((
uöt16
Ë(
Dïth
 [
z
 + 
GFX
.
DïthDñè
] ? (Depth [z + GFX.DepthDelta] != 1 ? \

952 
	`COLOR_ADD1_2
 (
p
, *(
s
 + 
GFX
.
Dñè
)) : \

953 
	`COLOR_ADD
 (
p
, 
GFX
.
FixedCﬁour
)) \

954 : 
p
))

956 
	`RENDER_TILE_LARGE
 (
GFX
.
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_ADD_PIXEL1_2
)

957 
	}
}

959 
	$‹gDøwL¨gePixñ16Sub
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

960 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

961 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

963 
TILE_PREAMBLE


965 
uöt16
 *
•
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

966 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

967 
uöt16
 
pixñ
;

969 
	#LARGE_SUB_PIXEL
(
s
, 
p
Ë\

	)

970 (
Dïth
 [
z
 + 
GFX
.
DïthDñè
] ? (Depth [z + GFX.DepthDelta] != 1 ? \

971 
	`COLOR_SUB
 (
p
, *(
s
 + 
GFX
.
Dñè
)) : \

972 
	`COLOR_SUB
 (
p
, 
GFX
.
FixedCﬁour
)) \

973 : 
p
)

975 
	`RENDER_TILE_LARGE
 (
GFX
.
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_SUB_PIXEL
)

976 
	}
}

978 
	$‹gDøwL¨gePixñ16Sub1_2
 (
uöt32
 
Tûe
, uöt32 
Off£t
,

979 
uöt32
 
SèπPixñ
, uöt32 
Pixñs
,

980 
uöt32
 
SèπLöe
, uöt32 
LöeCou¡
)

982 
TILE_PREAMBLE


984 
uöt16
 *
•
 = (uöt16 *Ë
GFX
.
S
 + 
Off£t
;

985 
uöt8
 *
Dïth
 = 
GFX
.
ZBuf„r
 + 
Off£t
;

986 
uöt16
 
pixñ
;

988 
	#LARGE_SUB_PIXEL1_2
(
s
, 
p
Ë\

	)

989 (
Dïth
 [
z
 + 
GFX
.
DïthDñè
] ? (Depth [z + GFX.DepthDelta] != 1 ? \

990 
	`COLOR_SUB1_2
 (
p
, *(
s
 + 
GFX
.
Dñè
)) : \

991 
	`COLOR_SUB
 (
p
, 
GFX
.
FixedCﬁour
)) \

992 : 
p
)

994 
	`RENDER_TILE_LARGE
 (
GFX
.
S¸ìnCﬁ‹s
 [
pixñ
], 
LARGE_SUB_PIXEL1_2
)

995 
	}
}

	@tile_org.h

41 #i‚de‡
_TILE_ORG_H_


42 
	#_TILE_ORG_H_


	)

44 
	#TILE_PREAMBLE
 \

	)

45 
uöt8
 *
	gpCache
; \

47 
uöt32
 
	gTûeAddr
 = 
BG
.
TûeAddªss
 + ((
Tûe
 & 0x3ffË<< BG.
TûeShi·
); \

48 i‡((
	gTûe
 & 0x1ff) >= 256) \

49 
TûeAddr
 +
BG
.
NameSñe˘
; \

51 
	gTûeAddr
 &= 0xffff; \

53 
uöt32
 
	gTûeNumbî
; \

54 
	gpCache
 = &
BG
.
Buf„r
[(
TûeNumbî
 = (
TûeAddr
 >> BG.
TûeShi·
)) << 6]; \

56 i‡(!
	gBG
.
	gBuf„ªd
 [
TûeNumbî
<<1]) \

57 
	gBG
.
	gBuf„ªd
[
TûeNumbî
<<1] = 
‹gC⁄vîtTûe
 (
pCache
, 
TûeAddr
); \

59 i‡(
	gBG
.
	gBuf„ªd
 [
TûeNumbî
<<1] =
BLANK_TILE
) \

62 
uöt32
 
	gl
; \

63 i‡(
	gBG
.
	gDúe˘CﬁourMode
) \

65 i‡(
	gIPPU
.
	gDúe˘CﬁourM≠sNìdRebuûd
) \

66 
S9xBuûdDúe˘CﬁourM≠s
 (); \

67 
	gGFX
.
	gS¸ìnCﬁ‹s
 = 
Dúe˘CﬁourM≠s
 [(
Tûe
 >> 10Ë& 
BG
.
PÆëãMask
]; \

70 
	gGFX
.
	gS¸ìnCﬁ‹s
 = &
IPPU
.
S¸ìnCﬁ‹s
 [(((
Tûe
 >> 10Ë& 
BG
.
PÆëãMask
Ë<< BG.
PÆëãShi·
Ë+ BG.
SèπPÆëã
];

72 
	#RENDER_TILE
(
NORMAL
, 
FLIPPED
, 
N
Ë\

	)

73 i‡(!(
	gTûe
 & (
	gV_FLIP
 | 
	gH_FLIP
))) \

75 
	gbp
 = 
pCache
 + 
SèπLöe
; \

76 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

78  i‡(((
uöt32
)
bp
[0])|((uint32)bp[1])|((uint32)bp[2])|((uint32)bp[3])) \

79 
NORMAL
 (
Off£t
, 
bp
); \

80  i‡(((
	guöt32
)
	gbp
[4])|((uint32)bp[5])|((uint32)bp[6])|((uint32)bp[7])) \

81 
NORMAL
 (
Off£t
 + 
N
, 
bp
 + 4); \

85 i‡(!(
	gTûe
 & 
	gV_FLIP
)) \

87 
	gbp
 = 
pCache
 + 
SèπLöe
; \

88 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

90  i‡(((
uöt32
)
bp
[4])|((uint32)bp[5])|((uint32)bp[6])|((uint32)bp[7])) \

91 
FLIPPED
 (
Off£t
, 
bp
 + 4); \

92  i‡(((
	guöt32
)
	gbp
[0])|((uint32)bp[1])|((uint32)bp[2])|((uint32)bp[3])) \

93 
FLIPPED
 (
Off£t
 + 
N
, 
bp
); \

97 i‡(
	gTûe
 & 
	gH_FLIP
) \

99 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

100 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

102  i‡(((
uöt32
)
bp
[4])|((uint32)bp[5])|((uint32)bp[6])|((uint32)bp[7])) \

103 
FLIPPED
 (
Off£t
, 
bp
 + 4); \

104  i‡(((
	guöt32
)
	gbp
[0])|((uint32)bp[1])|((uint32)bp[2])|((uint32)bp[3])) \

105 
FLIPPED
 (
Off£t
 + 
N
, 
bp
); \

110 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

111 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

113  i‡(((
uöt32
)
bp
[0])|((uint32)bp[1])|((uint32)bp[2])|((uint32)bp[3])) \

114 
NORMAL
 (
Off£t
, 
bp
); \

115  i‡(((
	guöt32
)
	gbp
[4])|((uint32)bp[5])|((uint32)bp[6])|((uint32)bp[7])) \

116 
NORMAL
 (
Off£t
 + 
N
, 
bp
 + 4); \

120 
	#TILE_CLIP_PREAMBLE
 \

	)

121 
uöt32
 
	gdd
; \

122 
uöt32
 
	gd1
; \

123 
uöt32
 
	gd2
; \

125 i‡(
	gSèπPixñ
 < 4) \

127 
	gd1
 = 
HódMask
 [
SèπPixñ
]; \

128 i‡(
	gSèπPixñ
 + 
	gWidth
 < 4) \

129 
	gd1
 &
TaûMask
 [
SèπPixñ
 + 
Width
]; \

132 
	gd1
 = 0; \

134 i‡(
	gSèπPixñ
 + 
	gWidth
 > 4) \

136 i‡(
	gSèπPixñ
 > 4) \

137 
	gd2
 = 
HódMask
 [
SèπPixñ
 - 4]; \

139 
	gd2
 = 0xffffffff; \

141 
	gd2
 &
TaûMask
 [(
SèπPixñ
 + 
Width
 - 4)]; \

144 
	gd2
 = 0;

147 
	#RENDER_CLIPPED_TILE
(
NORMAL
, 
FLIPPED
, 
N
Ë\

	)

148 i‡(!(
	gTûe
 & (
	gV_FLIP
 | 
	gH_FLIP
))) \

150 
	gbp
 = 
pCache
 + 
SèπLöe
; \

151 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

153  i‡(
dd
 = (((((
uöt32
)
bp
[3])<<24)|(((uöt32)bp[2])<<16)|(((uöt32)bp[1])<<8)|((uöt32)bp[0]))&
d1
)) \

154 
NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

155  i‡(
	gdd
 = (((((
uöt32
)
bp
[7])<<24)|(((uöt32)bp[6])<<16)|(((uöt32)bp[5])<<8)|((uöt32)bp[4]))&
d2
)) \

156 
NORMAL
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
); \

160 i‡(!(
	gTûe
 & 
	gV_FLIP
)) \

162 
	gbp
 = 
pCache
 + 
SèπLöe
; \

163 
SWAP_DWORD
 (
d1
); \

164 
SWAP_DWORD
 (
d2
); \

165 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

167  i‡(
dd
 = (((((
uöt32
)
bp
[7])<<24)|(((uöt32)bp[6])<<16)|(((uöt32)bp[5])<<8)|((uöt32)bp[4]))&
d1
)) \

168 
FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

169  i‡(
	gdd
 = (((((
uöt32
)
bp
[3])<<24)|(((uöt32)bp[2])<<16)|(((uöt32)bp[1])<<8)|((uöt32)bp[0]))&
d2
)) \

170 
FLIPPED
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
); \

174 i‡(
	gTûe
 & 
	gH_FLIP
) \

176 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

177 
SWAP_DWORD
 (
d1
); \

178 
SWAP_DWORD
 (
d2
); \

179 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

181  i‡(
dd
 = (((((
uöt32
)
bp
[7])<<24)|(((uöt32)bp[6])<<16)|(((uöt32)bp[5])<<8)|((uöt32)bp[4]))&
d1
)) \

182 
FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

183  i‡(
	gdd
 = (((((
uöt32
)
bp
[3])<<24)|(((uöt32)bp[2])<<16)|(((uöt32)bp[1])<<8)|((uöt32)bp[0]))&
d2
)) \

184 
FLIPPED
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
); \

189 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

190 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

192  i‡(
dd
 = (((((
uöt32
)
bp
[3])<<24)|(((uöt32)bp[2])<<16)|(((uöt32)bp[1])<<8)|((uöt32)bp[0]))&
d1
)) \

193 
NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

194  i‡(
	gdd
 = (((((
uöt32
)
bp
[7])<<24)|(((uöt32)bp[6])<<16)|(((uöt32)bp[5])<<8)|((uöt32)bp[4]))&
d2
)) \

195 
NORMAL
 (
Off£t
 + 
N
, (
uöt8
 *Ë&
dd
); \

199 
	#RENDER_TILE_LARGE
(
PIXEL
, 
FUNCTION
Ë\

	)

200 i‡(!(
	gTûe
 & (
	gV_FLIP
 | 
	gH_FLIP
))) \

202 i‡((
	gpixñ
 = *(
pCache
 + 
SèπLöe
 + 
SèπPixñ
))) \

204 
pixñ
 = 
PIXEL
; \

205 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	g•
 +
GFX
.
PPL
, 
	gDïth
 += GFX.PPL) \

207 
z
 = 
Pixñs
 - 1; 
	gz
 >= 0; z--) \

208 i‡(
	gGFX
.
	gZ1
 > 
	gDïth
 [
z
]) \

210 
	g•
 [
z
] = 
FUNCTION
(
•
 + z, 
pixñ
); \

211 
	gDïth
 [
z
] = 
GFX
.
Z2
; \

217 i‡(!(
	gTûe
 & 
	gV_FLIP
)) \

219 
	gSèπPixñ
 = 7 - 
SèπPixñ
; \

220 i‡((
	gpixñ
 = *(
pCache
 + 
SèπLöe
 + 
SèπPixñ
))) \

222 
pixñ
 = 
PIXEL
; \

223 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	g•
 +
GFX
.
PPL
, 
	gDïth
 += GFX.PPL) \

225 
z
 = 
Pixñs
 - 1; 
	gz
 >= 0; z--) \

226 i‡(
	gGFX
.
	gZ1
 > 
	gDïth
 [
z
]) \

228 
	g•
 [
z
] = 
FUNCTION
(
•
 + z, 
pixñ
); \

229 
	gDïth
 [
z
] = 
GFX
.
Z2
; \

235 i‡(
	gTûe
 & 
	gH_FLIP
) \

237 
	gSèπPixñ
 = 7 - 
SèπPixñ
; \

238 i‡((
	gpixñ
 = *(
pCache
 + 56 - 
SèπLöe
 + 
SèπPixñ
))) \

240 
pixñ
 = 
PIXEL
; \

241 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	g•
 +
GFX
.
PPL
, 
	gDïth
 += GFX.PPL) \

243 
z
 = 
Pixñs
 - 1; 
	gz
 >= 0; z--) \

244 i‡(
	gGFX
.
	gZ1
 > 
	gDïth
 [
z
]) \

246 
	g•
 [
z
] = 
FUNCTION
(
•
 + z, 
pixñ
); \

247 
	gDïth
 [
z
] = 
GFX
.
Z2
; \

254 i‡((
	gpixñ
 = *(
pCache
 + 56 - 
SèπLöe
 + 
SèπPixñ
))) \

256 
pixñ
 = 
PIXEL
; \

257 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	g•
 +
GFX
.
PPL
, 
	gDïth
 += GFX.PPL) \

259 
z
 = 
Pixñs
 - 1; 
	gz
 >= 0; z--) \

260 i‡(
	gGFX
.
	gZ1
 > 
	gDïth
 [
z
]) \

262 
	g•
 [
z
] = 
FUNCTION
(
•
 + z, 
pixñ
); \

263 
	gDïth
 [
z
] = 
GFX
.
Z2
; \

273 
	#RENDER_TILEHI
(
NORMAL
, 
FLIPPED
, 
N
Ë\

	)

274 i‡(!(
	gTûe
 & (
	gV_FLIP
 | 
	gH_FLIP
))) \

276 
	gbp
 = 
pCache
 + 
SèπLöe
; \

277 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

279  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

280 
NORMAL
 (
Off£t
, 
bp
); \

284 i‡(!(
	gTûe
 & 
	gV_FLIP
)) \

286 
	gbp
 = 
pCache
 + 
SèπLöe
; \

287 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

289  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

290 
FLIPPED
 (
Off£t
, 
bp
); \

294 i‡(
	gTûe
 & 
	gH_FLIP
) \

296 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

297 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

299  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

300 
FLIPPED
 (
Off£t
, 
bp
); \

305 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

306 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

308  i‡(((
uöt32
)
bp
[0])|((uint32)bp[2])|((uint32)bp[4])|((uint32)bp[6])) \

309 
NORMAL
 (
Off£t
, 
bp
); \

315 
	#RENDER_CLIPPED_TILEHI
(
NORMAL
, 
FLIPPED
, 
N
Ë\

	)

316 
	gd1
=(
d1
&0xFF)|((d1&0xFF0000)>>8)|((
d2
&0xFF)<<16)|((d2&0xFF0000)<<8);\

317 i‡(!(
	gTûe
 & (
	gV_FLIP
 | 
	gH_FLIP
))) \

319 
	gbp
 = 
pCache
 + 
SèπLöe
; \

320 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

322  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

323 
NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

327 i‡(!(
	gTûe
 & 
	gV_FLIP
)) \

329 
	gbp
 = 
pCache
 + 
SèπLöe
; \

330 
SWAP_DWORD
 (
d1
); \

332 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 +8, 
	gOff£t
 +
GFX
.
PPL
) \

334  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

335 
FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

339 i‡(
	gTûe
 & 
	gH_FLIP
) \

341 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

342 
SWAP_DWORD
 (
d1
); \

344 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

346  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

347 
FLIPPED
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

352 
	gbp
 = 
pCache
 + 56 - 
SèπLöe
; \

353 
	gl
 = 
LöeCou¡
;Ü !0;Ü--, 
	gbp
 -8, 
	gOff£t
 +
GFX
.
PPL
) \

355  i‡(
dd
 = (((((
uöt32
)
bp
[6])<<24)|(((uöt32)bp[4])<<16)|(((uöt32)bp[2])<<8)|((uöt32)bp[0]))&
d1
)) \

356 
NORMAL
 (
Off£t
, (
uöt8
 *Ë&
dd
); \

	@unzip.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~"zlib.h
"

42 
	~"unzù.h
"

44 #ifde‡
STDC


45 
	~<°ddef.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

49 #ifde‡
NO_ERRNO_H


50 
î∫o
;

52 
	~<î∫o.h
>

56 #i‚de‡
loˇl


57 
	#loˇl
 

	)

62 #i‚de‡
CASESENSITIVITYDEFAULT_NO


63 #i‡!
deföed
(
unix
Ë&& !deföed(
CASESENSITIVITYDEFAULT_YES
)

64 
	#CASESENSITIVITYDEFAULT_NO


	)

69 #i‚de‡
UNZ_BUFSIZE


70 
	#UNZ_BUFSIZE
 (16384)

	)

73 #i‚de‡
UNZ_MAXFILENAMEINZIP


74 
	#UNZ_MAXFILENAMEINZIP
 (256)

	)

77 #i‚de‡
ALLOC


78 
	#ALLOC
(
size
Ë(
	`mÆloc
(size))

	)

80 #i‚de‡
TRYFREE


81 
	#TRYFREE
(
p
Ë{i‡’Ë
	`‰ì
’);}

	)

84 
	#SIZECENTRALDIRITEM
 (0x2e)

	)

85 
	#SIZEZIPLOCALHEADER
 (0x1e)

	)

90 c⁄° 
	gunz_c›yright
[] =

94 
	sunz_fûe_öfo_öã∫Æ_s


96 
uL⁄g
 
	moff£t_curfûe
;

97 } 
	tunz_fûe_öfo_öã∫Æ
;

104 *
	mªad_buf„r
;

105 
z_°ªam
 
	m°ªam
;

107 
uL⁄g
 
	mpos_ö_zùfûe
;

108 
uL⁄g
 
	m°ªam_öôüli£d
;

110 
uL⁄g
 
	moff£t_loˇl_exåafõld
;

111 
uI¡
 
	msize_loˇl_exåafõld
;

112 
uL⁄g
 
	mpos_loˇl_exåafõld
;

114 
uL⁄g
 
	m¸c32
;

115 
uL⁄g
 
	m¸c32_waô
;

116 
uL⁄g
 
	mª°_ªad_com¥es£d
;

117 
uL⁄g
 
	mª°_ªad_uncom¥es£d
;

118 
zlib_fûefunc_def
 
	mz_fûefunc
;

119 
voidpf
 
	mfûe°ªam
;

120 
uL⁄g
 
	mcom¥essi⁄_mëhod
;

121 
uL⁄g
 
	mbyã_bef‹e_the_zùfûe
;

122 
	møw
;

123 } 
	tfûe_ö_zù_ªad_öfo_s
;

130 
zlib_fûefunc_def
 
	mz_fûefunc
;

131 
voidpf
 
	mfûe°ªam
;

132 
unz_globÆ_öfo
 
	mgi
;

133 
uL⁄g
 
	mbyã_bef‹e_the_zùfûe
;

134 
uL⁄g
 
	mnum_fûe
;

135 
uL⁄g
 
	mpos_ö_˚¡øl_dú
;

136 
uL⁄g
 
	mcuºít_fûe_ok
;

137 
uL⁄g
 
	m˚¡øl_pos
;

139 
uL⁄g
 
	msize_˚¡øl_dú
;

140 
uL⁄g
 
	moff£t_˚¡øl_dú
;

143 
unz_fûe_öfo
 
	mcur_fûe_öfo
;

144 
unz_fûe_öfo_öã∫Æ
 
	mcur_fûe_öfo_öã∫Æ
;

145 
fûe_ö_zù_ªad_öfo_s
* 
	mpfûe_ö_zù_ªad
;

147 
	mí¸y±ed
;

148 #i‚de‡
NOUNCRYPT


149 
	mkeys
[3];

150 c⁄° * 
	mp¸c_32_èb
;

152 } 
	tunz_s
;

155 #i‚de‡
NOUNCRYPT


156 
	~"¸y±.h
"

166 
loˇl
 
unzloˇl_gëByã
 
OF
((

167 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

168 
voidpf
 
fûe°ªam
,

169 *
pi
));

171 
loˇl
 
	$unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,
pi
)

172 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

173 
voidpf
 
fûe°ªam
;

174 *
pi
;

176 
c
;

177 
îr
 = ()
	`ZREAD
(*
pzlib_fûefunc_def
,
fûe°ªam
,&
c
,1);

178 i‡(
îr
==1)

180 *
pi
 = ()
c
;

181  
UNZ_OK
;

185 i‡(
	`ZERROR
(*
pzlib_fûefunc_def
,
fûe°ªam
))

186  
UNZ_ERRNO
;

188  
UNZ_EOF
;

190 
	}
}

196 
loˇl
 
unzloˇl_gëSh‹t
 
OF
((

197 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

198 
voidpf
 
fûe°ªam
,

199 
uL⁄g
 *
pX
));

201 
loˇl
 
	$unzloˇl_gëSh‹t
 (
pzlib_fûefunc_def
,
fûe°ªam
,
pX
)

202 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

203 
voidpf
 
fûe°ªam
;

204 
uL⁄g
 *
pX
;

206 
uL⁄g
 
x
 ;

207 
i
;

208 
îr
;

210 
îr
 = 
	`unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

211 
x
 = (
uL⁄g
)
i
;

213 i‡(
îr
==
UNZ_OK
)

214 
îr
 = 
	`unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

215 
x
 +((
uL⁄g
)
i
)<<8;

217 i‡(
îr
==
UNZ_OK
)

218 *
pX
 = 
x
;

220 *
pX
 = 0;

221  
îr
;

222 
	}
}

224 
loˇl
 
unzloˇl_gëL⁄g
 
OF
((

225 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

226 
voidpf
 
fûe°ªam
,

227 
uL⁄g
 *
pX
));

229 
loˇl
 
	$unzloˇl_gëL⁄g
 (
pzlib_fûefunc_def
,
fûe°ªam
,
pX
)

230 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

231 
voidpf
 
fûe°ªam
;

232 
uL⁄g
 *
pX
;

234 
uL⁄g
 
x
 ;

235 
i
;

236 
îr
;

238 
îr
 = 
	`unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

239 
x
 = (
uL⁄g
)
i
;

241 i‡(
îr
==
UNZ_OK
)

242 
îr
 = 
	`unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

243 
x
 +((
uL⁄g
)
i
)<<8;

245 i‡(
îr
==
UNZ_OK
)

246 
îr
 = 
	`unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

247 
x
 +((
uL⁄g
)
i
)<<16;

249 i‡(
îr
==
UNZ_OK
)

250 
îr
 = 
	`unzloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

251 
x
 +((
uL⁄g
)
i
)<<24;

253 i‡(
îr
==
UNZ_OK
)

254 *
pX
 = 
x
;

256 *
pX
 = 0;

257  
îr
;

258 
	}
}

262 
loˇl
 
	$°rcmpˇ£no£nsôive_öã∫Æ
 (
fûeName1
,
fûeName2
)

263 c⁄° * 
fûeName1
;

264 c⁄° * 
fûeName2
;

268 
c1
=*(
fûeName1
++);

269 
c2
=*(
fûeName2
++);

270 i‡((
c1
>='a') && (c1<='z'))

271 
c1
 -= 0x20;

272 i‡((
c2
>='a') && (c2<='z'))

273 
c2
 -= 0x20;

274 i‡(
c1
=='\0')

275  ((
c2
=='\0') ? 0 : -1);

276 i‡(
c2
=='\0')

278 i‡(
c1
<
c2
)

280 i‡(
c1
>
c2
)

283 
	}
}

286 #ifde‡ 
CASESENSITIVITYDEFAULT_NO


287 
	#CASESENSITIVITYDEFAULTVALUE
 2

	)

289 
	#CASESENSITIVITYDEFAULTVALUE
 1

	)

292 #i‚de‡
STRCMPCASENOSENTIVEFUNCTION


293 
	#STRCMPCASENOSENTIVEFUNCTION
 
°rcmpˇ£no£nsôive_öã∫Æ


	)

305 
ZEXPORT
 
	$unzSåögFûeNameCom∑ª
 (
fûeName1
,
fûeName2
,
iCa£Sísôivôy
)

306 c⁄° * 
fûeName1
;

307 c⁄° * 
fûeName2
;

308 
iCa£Sísôivôy
;

310 i‡(
iCa£Sísôivôy
==0)

311 
iCa£Sísôivôy
=
CASESENSITIVITYDEFAULTVALUE
;

313 i‡(
iCa£Sísôivôy
==1)

314  
	`°rcmp
(
fûeName1
,
fûeName2
);

316  
	`STRCMPCASENOSENTIVEFUNCTION
(
fûeName1
,
fûeName2
);

317 
	}
}

319 #i‚de‡
BUFREADCOMMENT


320 
	#BUFREADCOMMENT
 (0x400)

	)

327 
loˇl
 
uL⁄g
 
unzloˇl_SórchCíåÆDú
 
OF
((

328 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

329 
voidpf
 
fûe°ªam
));

331 
loˇl
 
uL⁄g
 
	$unzloˇl_SórchCíåÆDú
(
pzlib_fûefunc_def
,
fûe°ªam
)

332 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

333 
voidpf
 
fûe°ªam
;

335 * 
buf
;

336 
uL⁄g
 
uSizeFûe
;

337 
uL⁄g
 
uBackRód
;

338 
uL⁄g
 
uMaxBack
=0xffff;

339 
uL⁄g
 
uPosFound
=0;

341 i‡(
	`ZSEEK
(*
pzlib_fûefunc_def
,
fûe°ªam
,0,
ZLIB_FILEFUNC_SEEK_END
) != 0)

345 
uSizeFûe
 = 
	`ZTELL
(*
pzlib_fûefunc_def
,
fûe°ªam
);

347 i‡(
uMaxBack
>
uSizeFûe
)

348 
uMaxBack
 = 
uSizeFûe
;

350 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

351 i‡(
buf
==
NULL
)

354 
uBackRód
 = 4;

355 
uBackRód
<
uMaxBack
)

357 
uL⁄g
 
uRódSize
,
uRódPos
 ;

358 
i
;

359 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

360 
uBackRód
 = 
uMaxBack
;

362 
uBackRód
+=
BUFREADCOMMENT
;

363 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

365 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

366 (
BUFREADCOMMENT
+4Ë: (
uSizeFûe
-
uRódPos
);

367 i‡(
	`ZSEEK
(*
pzlib_fûefunc_def
,
fûe°ªam
,
uRódPos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

370 i‡(
	`ZREAD
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
uRódSize
)!=uReadSize)

373 
i
=()
uRódSize
-3; (i--)>0;)

374 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

375 ((*(
buf
+
i
+2))==0x05) && ((*(buf+i+3))==0x06))

377 
uPosFound
 = 
uRódPos
+
i
;

381 i‡(
uPosFound
!=0)

384 
	`TRYFREE
(
buf
);

385  
uPosFound
;

386 
	}
}

397 
unzFûe
 
ZEXPORT
 
	$unzO≥n2
 (
∑th
, 
pzlib_fûefunc_def
)

398 c⁄° *
∑th
;

399 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

401 
unz_s
 
us
;

402 
unz_s
 *
s
;

403 
uL⁄g
 
˚¡øl_pos
,
uL
;

405 
uL⁄g
 
numbî_disk
;

407 
uL⁄g
 
numbî_disk_wôh_CD
;

409 
uL⁄g
 
numbî_íåy_CD
;

413 
îr
=
UNZ_OK
;

415 i‡(
unz_c›yright
[0]!=' ')

416  
NULL
;

418 i‡(
pzlib_fûefunc_def
==
NULL
)

419 
	`fûl_f›í_fûefunc
(&
us
.
z_fûefunc
);

421 
us
.
z_fûefunc
 = *
pzlib_fûefunc_def
;

423 
us
.
fûe°ªam
(*(us.
z_fûefunc
.
z›í_fûe
))(us.z_fûefunc.
›aque
,

424 
∑th
,

425 
ZLIB_FILEFUNC_MODE_READ
 |

426 
ZLIB_FILEFUNC_MODE_EXISTING
);

427 i‡(
us
.
fûe°ªam
==
NULL
)

428  
NULL
;

430 
˚¡øl_pos
 = 
	`unzloˇl_SórchCíåÆDú
(&
us
.
z_fûefunc
,us.
fûe°ªam
);

431 i‡(
˚¡øl_pos
==0)

432 
îr
=
UNZ_ERRNO
;

434 i‡(
	`ZSEEK
(
us
.
z_fûefunc
, us.
fûe°ªam
,

435 
˚¡øl_pos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

436 
îr
=
UNZ_ERRNO
;

439 i‡(
	`unzloˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

440 
îr
=
UNZ_ERRNO
;

443 i‡(
	`unzloˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_disk
)!=
UNZ_OK
)

444 
îr
=
UNZ_ERRNO
;

447 i‡(
	`unzloˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_disk_wôh_CD
)!=
UNZ_OK
)

448 
îr
=
UNZ_ERRNO
;

451 i‡(
	`unzloˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
gi
.
numbî_íåy
)!=
UNZ_OK
)

452 
îr
=
UNZ_ERRNO
;

455 i‡(
	`unzloˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_íåy_CD
)!=
UNZ_OK
)

456 
îr
=
UNZ_ERRNO
;

458 i‡((
numbî_íåy_CD
!=
us
.
gi
.
numbî_íåy
) ||

459 (
numbî_disk_wôh_CD
!=0) ||

460 (
numbî_disk
!=0))

461 
îr
=
UNZ_BADZIPFILE
;

464 i‡(
	`unzloˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
size_˚¡øl_dú
)!=
UNZ_OK
)

465 
îr
=
UNZ_ERRNO
;

469 i‡(
	`unzloˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
off£t_˚¡øl_dú
)!=
UNZ_OK
)

470 
îr
=
UNZ_ERRNO
;

473 i‡(
	`unzloˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
gi
.
size_commít
)!=
UNZ_OK
)

474 
îr
=
UNZ_ERRNO
;

476 i‡((
˚¡øl_pos
<
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
) &&

477 (
îr
==
UNZ_OK
))

478 
îr
=
UNZ_BADZIPFILE
;

480 i‡(
îr
!=
UNZ_OK
)

482 
	`ZCLOSE
(
us
.
z_fûefunc
, us.
fûe°ªam
);

483  
NULL
;

486 
us
.
byã_bef‹e_the_zùfûe
 = 
˚¡øl_pos
 -

487 (
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
);

488 
us
.
˚¡øl_pos
 = central_pos;

489 
us
.
pfûe_ö_zù_ªad
 = 
NULL
;

490 
us
.
í¸y±ed
 = 0;

493 
s
=(
unz_s
*)
	`ALLOC
((unz_s));

494 *
s
=
us
;

495 
	`unzGoToFú°Fûe
((
unzFûe
)
s
);

496  (
unzFûe
)
s
;

497 
	}
}

500 
unzFûe
 
ZEXPORT
 
	$unzO≥n
 (
∑th
)

501 c⁄° *
∑th
;

503  
	`unzO≥n2
(
∑th
, 
NULL
);

504 
	}
}

511 
ZEXPORT
 
	$unzClo£
 (
fûe
)

512 
unzFûe
 
fûe
;

514 
unz_s
* 
s
;

515 i‡(
fûe
==
NULL
)

516  
UNZ_PARAMERROR
;

517 
s
=(
unz_s
*)
fûe
;

519 i‡(
s
->
pfûe_ö_zù_ªad
!=
NULL
)

520 
	`unzClo£CuºítFûe
(
fûe
);

522 
	`ZCLOSE
(
s
->
z_fûefunc
, s->
fûe°ªam
);

523 
	`TRYFREE
(
s
);

524  
UNZ_OK
;

525 
	}
}

532 
ZEXPORT
 
	$unzGëGlobÆInfo
 (
fûe
,
pglobÆ_öfo
)

533 
unzFûe
 
fûe
;

534 
unz_globÆ_öfo
 *
pglobÆ_öfo
;

536 
unz_s
* 
s
;

537 i‡(
fûe
==
NULL
)

538  
UNZ_PARAMERROR
;

539 
s
=(
unz_s
*)
fûe
;

540 *
pglobÆ_öfo
=
s
->
gi
;

541  
UNZ_OK
;

542 
	}
}

548 
loˇl
 
	$unzloˇl_DosD©eToTmuD©e
 (
ulDosD©e
, 
±m
)

549 
uL⁄g
 
ulDosD©e
;

550 
tm_unz
* 
±m
;

552 
uL⁄g
 
uD©e
;

553 
uD©e
 = (
uL⁄g
)(
ulDosD©e
>>16);

554 
±m
->
tm_mday
 = (
uI¡
)(
uD©e
&0x1f) ;

555 
±m
->
tm_m⁄
 = (
uI¡
)((((
uD©e
)&0x1E0)/0x20)-1) ;

556 
±m
->
tm_yór
 = (
uI¡
)(((
uD©e
&0x0FE00)/0x0200)+1980) ;

558 
±m
->
tm_hour
 = (
uI¡
Ë((
ulDosD©e
 &0xF800)/0x800);

559 
±m
->
tm_mö
 = (
uI¡
Ë((
ulDosD©e
&0x7E0)/0x20) ;

560 
±m
->
tm_£c
 = (
uI¡
Ë(2*(
ulDosD©e
&0x1f)) ;

561 
	}
}

566 
loˇl
 
unzloˇl_GëCuºítFûeInfoI¡î«l
 
OF
((
unzFûe
 
fûe
,

567 
unz_fûe_öfo
 *
pfûe_öfo
,

568 
unz_fûe_öfo_öã∫Æ


569 *
pfûe_öfo_öã∫Æ
,

570 *
szFûeName
,

571 
uL⁄g
 
fûeNameBuf„rSize
,

572 *
exåaFõld
,

573 
uL⁄g
 
exåaFõldBuf„rSize
,

574 *
szCommít
,

575 
uL⁄g
 
commítBuf„rSize
));

577 
loˇl
 
	$unzloˇl_GëCuºítFûeInfoI¡î«l
 (
fûe
,

578 
pfûe_öfo
,

579 
pfûe_öfo_öã∫Æ
,

580 
szFûeName
, 
fûeNameBuf„rSize
,

581 
exåaFõld
, 
exåaFõldBuf„rSize
,

582 
szCommít
, 
commítBuf„rSize
)

583 
unzFûe
 
fûe
;

584 
unz_fûe_öfo
 *
pfûe_öfo
;

585 
unz_fûe_öfo_öã∫Æ
 *
pfûe_öfo_öã∫Æ
;

586 *
szFûeName
;

587 
uL⁄g
 
fûeNameBuf„rSize
;

588 *
exåaFõld
;

589 
uL⁄g
 
exåaFõldBuf„rSize
;

590 *
szCommít
;

591 
uL⁄g
 
commítBuf„rSize
;

593 
unz_s
* 
s
;

594 
unz_fûe_öfo
 
fûe_öfo
;

595 
unz_fûe_öfo_öã∫Æ
 
fûe_öfo_öã∫Æ
;

596 
îr
=
UNZ_OK
;

597 
uL⁄g
 
uMagic
;

598 
lSìk
=0;

600 i‡(
fûe
==
NULL
)

601  
UNZ_PARAMERROR
;

602 
s
=(
unz_s
*)
fûe
;

603 i‡(
	`ZSEEK
(
s
->
z_fûefunc
, s->
fûe°ªam
,

604 
s
->
pos_ö_˚¡øl_dú
+s->
byã_bef‹e_the_zùfûe
,

605 
ZLIB_FILEFUNC_SEEK_SET
)!=0)

606 
îr
=
UNZ_ERRNO
;

610 i‡(
îr
==
UNZ_OK
)

611 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uMagic
Ë!
UNZ_OK
)

612 
îr
=
UNZ_ERRNO
;

613 i‡(
uMagic
!=0x02014b50)

614 
îr
=
UNZ_BADZIPFILE
;

616 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
vîsi⁄
Ë!
UNZ_OK
)

617 
îr
=
UNZ_ERRNO
;

619 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
vîsi⁄_√eded
Ë!
UNZ_OK
)

620 
îr
=
UNZ_ERRNO
;

622 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
Êag
Ë!
UNZ_OK
)

623 
îr
=
UNZ_ERRNO
;

625 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
com¥essi⁄_mëhod
Ë!
UNZ_OK
)

626 
îr
=
UNZ_ERRNO
;

628 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
dosD©e
Ë!
UNZ_OK
)

629 
îr
=
UNZ_ERRNO
;

631 
	`unzloˇl_DosD©eToTmuD©e
(
fûe_öfo
.
dosD©e
,&fûe_öfo.
tmu_d©e
);

633 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
¸c
Ë!
UNZ_OK
)

634 
îr
=
UNZ_ERRNO
;

636 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
com¥es£d_size
Ë!
UNZ_OK
)

637 
îr
=
UNZ_ERRNO
;

639 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
uncom¥es£d_size
Ë!
UNZ_OK
)

640 
îr
=
UNZ_ERRNO
;

642 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
size_fûíame
Ë!
UNZ_OK
)

643 
îr
=
UNZ_ERRNO
;

645 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
size_fûe_exåa
Ë!
UNZ_OK
)

646 
îr
=
UNZ_ERRNO
;

648 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
size_fûe_commít
Ë!
UNZ_OK
)

649 
îr
=
UNZ_ERRNO
;

651 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
disk_num_°¨t
Ë!
UNZ_OK
)

652 
îr
=
UNZ_ERRNO
;

654 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
öã∫Æ_Á
Ë!
UNZ_OK
)

655 
îr
=
UNZ_ERRNO
;

657 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
exã∫Æ_Á
Ë!
UNZ_OK
)

658 
îr
=
UNZ_ERRNO
;

660 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo_öã∫Æ
.
off£t_curfûe
Ë!
UNZ_OK
)

661 
îr
=
UNZ_ERRNO
;

663 
lSìk
+=
fûe_öfo
.
size_fûíame
;

664 i‡((
îr
==
UNZ_OK
Ë&& (
szFûeName
!=
NULL
))

666 
uL⁄g
 
uSizeRód
 ;

667 i‡(
fûe_öfo
.
size_fûíame
<
fûeNameBuf„rSize
)

669 *(
szFûeName
+
fûe_öfo
.
size_fûíame
)='\0';

670 
uSizeRód
 = 
fûe_öfo
.
size_fûíame
;

673 
uSizeRód
 = 
fûeNameBuf„rSize
;

675 i‡((
fûe_öfo
.
size_fûíame
>0Ë&& (
fûeNameBuf„rSize
>0))

676 i‡(
	`ZREAD
(
s
->
z_fûefunc
, s->
fûe°ªam
,
szFûeName
,
uSizeRód
)!=uSizeRead)

677 
îr
=
UNZ_ERRNO
;

678 
lSìk
 -
uSizeRód
;

682 i‡((
îr
==
UNZ_OK
Ë&& (
exåaFõld
!=
NULL
))

684 
uL⁄g
 
uSizeRód
 ;

685 i‡(
fûe_öfo
.
size_fûe_exåa
<
exåaFõldBuf„rSize
)

686 
uSizeRód
 = 
fûe_öfo
.
size_fûe_exåa
;

688 
uSizeRód
 = 
exåaFõldBuf„rSize
;

690 i‡(
lSìk
!=0)

691 i‡(
	`ZSEEK
(
s
->
z_fûefunc
, s->
fûe°ªam
,
lSìk
,
ZLIB_FILEFUNC_SEEK_CUR
)==0)

692 
lSìk
=0;

694 
îr
=
UNZ_ERRNO
;

695 i‡((
fûe_öfo
.
size_fûe_exåa
>0Ë&& (
exåaFõldBuf„rSize
>0))

696 i‡(
	`ZREAD
(
s
->
z_fûefunc
, s->
fûe°ªam
,
exåaFõld
,
uSizeRód
)!=uSizeRead)

697 
îr
=
UNZ_ERRNO
;

698 
lSìk
 +
fûe_öfo
.
size_fûe_exåa
 - 
uSizeRód
;

701 
lSìk
+=
fûe_öfo
.
size_fûe_exåa
;

704 i‡((
îr
==
UNZ_OK
Ë&& (
szCommít
!=
NULL
))

706 
uL⁄g
 
uSizeRód
 ;

707 i‡(
fûe_öfo
.
size_fûe_commít
<
commítBuf„rSize
)

709 *(
szCommít
+
fûe_öfo
.
size_fûe_commít
)='\0';

710 
uSizeRód
 = 
fûe_öfo
.
size_fûe_commít
;

713 
uSizeRód
 = 
commítBuf„rSize
;

715 i‡(
lSìk
!=0)

716 i‡(
	`ZSEEK
(
s
->
z_fûefunc
, s->
fûe°ªam
,
lSìk
,
ZLIB_FILEFUNC_SEEK_CUR
)==0)

717 
lSìk
=0;

719 
îr
=
UNZ_ERRNO
;

720 i‡((
fûe_öfo
.
size_fûe_commít
>0Ë&& (
commítBuf„rSize
>0))

721 i‡(
	`ZREAD
(
s
->
z_fûefunc
, s->
fûe°ªam
,
szCommít
,
uSizeRód
)!=uSizeRead)

722 
îr
=
UNZ_ERRNO
;

723 
lSìk
+=
fûe_öfo
.
size_fûe_commít
 - 
uSizeRód
;

726 
lSìk
+=
fûe_öfo
.
size_fûe_commít
;

728 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo
!=
NULL
))

729 *
pfûe_öfo
=
fûe_öfo
;

731 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo_öã∫Æ
!=
NULL
))

732 *
pfûe_öfo_öã∫Æ
=
fûe_öfo_öã∫Æ
;

734  
îr
;

735 
	}
}

744 
ZEXPORT
 
	$unzGëCuºítFûeInfo
 (
fûe
,

745 
pfûe_öfo
,

746 
szFûeName
, 
fûeNameBuf„rSize
,

747 
exåaFõld
, 
exåaFõldBuf„rSize
,

748 
szCommít
, 
commítBuf„rSize
)

749 
unzFûe
 
fûe
;

750 
unz_fûe_öfo
 *
pfûe_öfo
;

751 *
szFûeName
;

752 
uL⁄g
 
fûeNameBuf„rSize
;

753 *
exåaFõld
;

754 
uL⁄g
 
exåaFõldBuf„rSize
;

755 *
szCommít
;

756 
uL⁄g
 
commítBuf„rSize
;

758  
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,
pfûe_öfo
,
NULL
,

759 
szFûeName
,
fûeNameBuf„rSize
,

760 
exåaFõld
,
exåaFõldBuf„rSize
,

761 
szCommít
,
commítBuf„rSize
);

762 
	}
}

768 
ZEXPORT
 
	$unzGoToFú°Fûe
 (
fûe
)

769 
unzFûe
 
fûe
;

771 
îr
=
UNZ_OK
;

772 
unz_s
* 
s
;

773 i‡(
fûe
==
NULL
)

774  
UNZ_PARAMERROR
;

775 
s
=(
unz_s
*)
fûe
;

776 
s
->
pos_ö_˚¡øl_dú
=s->
off£t_˚¡øl_dú
;

777 
s
->
num_fûe
=0;

778 
îr
=
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

779 &
s
->
cur_fûe_öfo_öã∫Æ
,

780 
NULL
,0,NULL,0,NULL,0);

781 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

782  
îr
;

783 
	}
}

790 
ZEXPORT
 
	$unzGoToNextFûe
 (
fûe
)

791 
unzFûe
 
fûe
;

793 
unz_s
* 
s
;

794 
îr
;

796 i‡(
fûe
==
NULL
)

797  
UNZ_PARAMERROR
;

798 
s
=(
unz_s
*)
fûe
;

799 i‡(!
s
->
cuºít_fûe_ok
)

800  
UNZ_END_OF_LIST_OF_FILE
;

801 i‡(
s
->
gi
.
numbî_íåy
 != 0xffff)

802 i‡(
s
->
num_fûe
+1==s->
gi
.
numbî_íåy
)

803  
UNZ_END_OF_LIST_OF_FILE
;

805 
s
->
pos_ö_˚¡øl_dú
 +
SIZECENTRALDIRITEM
 + s->
cur_fûe_öfo
.
size_fûíame
 +

806 
s
->
cur_fûe_öfo
.
size_fûe_exåa
 + s->cur_fûe_öfo.
size_fûe_commít
 ;

807 
s
->
num_fûe
++;

808 
îr
 = 
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

809 &
s
->
cur_fûe_öfo_öã∫Æ
,

810 
NULL
,0,NULL,0,NULL,0);

811 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

812  
îr
;

813 
	}
}

824 
ZEXPORT
 
	$unzLoˇãFûe
 (
fûe
, 
szFûeName
, 
iCa£Sísôivôy
)

825 
unzFûe
 
fûe
;

826 c⁄° *
szFûeName
;

827 
iCa£Sísôivôy
;

829 
unz_s
* 
s
;

830 
îr
;

835 
unz_fûe_öfo
 
cur_fûe_öfoSaved
;

836 
unz_fûe_öfo_öã∫Æ
 
cur_fûe_öfo_öã∫ÆSaved
;

837 
uL⁄g
 
num_fûeSaved
;

838 
uL⁄g
 
pos_ö_˚¡øl_dúSaved
;

841 i‡(
fûe
==
NULL
)

842  
UNZ_PARAMERROR
;

844 i‡(
	`°æí
(
szFûeName
)>=
UNZ_MAXFILENAMEINZIP
)

845  
UNZ_PARAMERROR
;

847 
s
=(
unz_s
*)
fûe
;

848 i‡(!
s
->
cuºít_fûe_ok
)

849  
UNZ_END_OF_LIST_OF_FILE
;

852 
num_fûeSaved
 = 
s
->
num_fûe
;

853 
pos_ö_˚¡øl_dúSaved
 = 
s
->
pos_ö_˚¡øl_dú
;

854 
cur_fûe_öfoSaved
 = 
s
->
cur_fûe_öfo
;

855 
cur_fûe_öfo_öã∫ÆSaved
 = 
s
->
cur_fûe_öfo_öã∫Æ
;

857 
îr
 = 
	`unzGoToFú°Fûe
(
fûe
);

859 
îr
 =
UNZ_OK
)

861 
szCuºítFûeName
[
UNZ_MAXFILENAMEINZIP
+1];

862 
îr
 = 
	`unzGëCuºítFûeInfo
(
fûe
,
NULL
,

863 
szCuºítFûeName
,(szCurrentFileName)-1,

864 
NULL
,0,NULL,0);

865 i‡(
îr
 =
UNZ_OK
)

867 i‡(
	`unzSåögFûeNameCom∑ª
(
szCuºítFûeName
,

868 
szFûeName
,
iCa£Sísôivôy
)==0)

869  
UNZ_OK
;

870 
îr
 = 
	`unzGoToNextFûe
(
fûe
);

877 
s
->
num_fûe
 = 
num_fûeSaved
 ;

878 
s
->
pos_ö_˚¡øl_dú
 = 
pos_ö_˚¡øl_dúSaved
 ;

879 
s
->
cur_fûe_öfo
 = 
cur_fûe_öfoSaved
;

880 
s
->
cur_fûe_öfo_öã∫Æ
 = 
cur_fûe_öfo_öã∫ÆSaved
;

881  
îr
;

882 
	}
}

903 
ZEXPORT
 
	$unzGëFûePos
(
fûe
, 
fûe_pos
)

904 
unzFûe
 
fûe
;

905 
unz_fûe_pos
* 
fûe_pos
;

907 
unz_s
* 
s
;

909 i‡(
fûe
==
NULL
 || 
fûe_pos
==NULL)

910  
UNZ_PARAMERROR
;

911 
s
=(
unz_s
*)
fûe
;

912 i‡(!
s
->
cuºít_fûe_ok
)

913  
UNZ_END_OF_LIST_OF_FILE
;

915 
fûe_pos
->
pos_ö_zù_dúe˘‹y
 = 
s
->
pos_ö_˚¡øl_dú
;

916 
fûe_pos
->
num_of_fûe
 = 
s
->
num_fûe
;

918  
UNZ_OK
;

919 
	}
}

921 
ZEXPORT
 
	$unzGoToFûePos
(
fûe
, 
fûe_pos
)

922 
unzFûe
 
fûe
;

923 
unz_fûe_pos
* 
fûe_pos
;

925 
unz_s
* 
s
;

926 
îr
;

928 i‡(
fûe
==
NULL
 || 
fûe_pos
==NULL)

929  
UNZ_PARAMERROR
;

930 
s
=(
unz_s
*)
fûe
;

933 
s
->
pos_ö_˚¡øl_dú
 = 
fûe_pos
->
pos_ö_zù_dúe˘‹y
;

934 
s
->
num_fûe
 = 
fûe_pos
->
num_of_fûe
;

937 
îr
 = 
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

938 &
s
->
cur_fûe_öfo_öã∫Æ
,

939 
NULL
,0,NULL,0,NULL,0);

941 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

942  
îr
;

943 
	}
}

957 
loˇl
 
	$unzloˇl_CheckCuºítFûeCohîícyHódî
 (
s
,
piSizeV¨
,

958 
poff£t_loˇl_exåafõld
,

959 
psize_loˇl_exåafõld
)

960 
unz_s
* 
s
;

961 
uI¡
* 
piSizeV¨
;

962 
uL⁄g
 *
poff£t_loˇl_exåafõld
;

963 
uI¡
 *
psize_loˇl_exåafõld
;

965 
uL⁄g
 
uMagic
,
uD©a
,
uFœgs
;

966 
uL⁄g
 
size_fûíame
;

967 
uL⁄g
 
size_exåa_fõld
;

968 
îr
=
UNZ_OK
;

970 *
piSizeV¨
 = 0;

971 *
poff£t_loˇl_exåafõld
 = 0;

972 *
psize_loˇl_exåafõld
 = 0;

974 i‡(
	`ZSEEK
(
s
->
z_fûefunc
, s->
fûe°ªam
,s->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

975 
s
->
byã_bef‹e_the_zùfûe
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

976  
UNZ_ERRNO
;

979 i‡(
îr
==
UNZ_OK
)

980 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uMagic
Ë!
UNZ_OK
)

981 
îr
=
UNZ_ERRNO
;

982 i‡(
uMagic
!=0x04034b50)

983 
îr
=
UNZ_BADZIPFILE
;

985 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

986 
îr
=
UNZ_ERRNO
;

991 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uFœgs
Ë!
UNZ_OK
)

992 
îr
=
UNZ_ERRNO
;

994 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

995 
îr
=
UNZ_ERRNO
;

996 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
))

997 
îr
=
UNZ_BADZIPFILE
;

999 i‡((
îr
==
UNZ_OK
Ë&& (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

1000 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

1001 
îr
=
UNZ_BADZIPFILE
;

1003 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1004 
îr
=
UNZ_ERRNO
;

1006 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1007 
îr
=
UNZ_ERRNO
;

1008 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
¸c
) &&

1009 ((
uFœgs
 & 8)==0))

1010 
îr
=
UNZ_BADZIPFILE
;

1012 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1013 
îr
=
UNZ_ERRNO
;

1014 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥es£d_size
) &&

1015 ((
uFœgs
 & 8)==0))

1016 
îr
=
UNZ_BADZIPFILE
;

1018 i‡(
	`unzloˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1019 
îr
=
UNZ_ERRNO
;

1020 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
uncom¥es£d_size
) &&

1021 ((
uFœgs
 & 8)==0))

1022 
îr
=
UNZ_BADZIPFILE
;

1025 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
size_fûíame
Ë!
UNZ_OK
)

1026 
îr
=
UNZ_ERRNO
;

1027 i‡((
îr
==
UNZ_OK
Ë&& (
size_fûíame
!=
s
->
cur_fûe_öfo
.size_filename))

1028 
îr
=
UNZ_BADZIPFILE
;

1030 *
piSizeV¨
 +(
uI¡
)
size_fûíame
;

1032 i‡(
	`unzloˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
size_exåa_fõld
Ë!
UNZ_OK
)

1033 
îr
=
UNZ_ERRNO
;

1034 *
poff£t_loˇl_exåafõld

s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

1035 
SIZEZIPLOCALHEADER
 + 
size_fûíame
;

1036 *
psize_loˇl_exåafõld
 = (
uI¡
)
size_exåa_fõld
;

1038 *
piSizeV¨
 +(
uI¡
)
size_exåa_fõld
;

1040  
îr
;

1041 
	}
}

1047 
ZEXPORT
 
	$unzO≥nCuºítFûe3
 (
fûe
, 
mëhod
, 
Àvñ
, 
øw
, 
∑ssw‹d
)

1048 
unzFûe
 
fûe
;

1049 * 
mëhod
;

1050 * 
Àvñ
;

1051 
øw
;

1052 c⁄° * 
∑ssw‹d
;

1054 
îr
=
UNZ_OK
;

1055 
uI¡
 
iSizeV¨
;

1056 
unz_s
* 
s
;

1057 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1058 
uL⁄g
 
off£t_loˇl_exåafõld
;

1059 
uI¡
 
size_loˇl_exåafõld
;

1060 #i‚de‡
NOUNCRYPT


1061 
sour˚
[12];

1063 i‡(
∑ssw‹d
 !
NULL
)

1064  
UNZ_PARAMERROR
;

1067 i‡(
fûe
==
NULL
)

1068  
UNZ_PARAMERROR
;

1069 
s
=(
unz_s
*)
fûe
;

1070 i‡(!
s
->
cuºít_fûe_ok
)

1071  
UNZ_PARAMERROR
;

1073 i‡(
s
->
pfûe_ö_zù_ªad
 !
NULL
)

1074 
	`unzClo£CuºítFûe
(
fûe
);

1076 i‡(
	`unzloˇl_CheckCuºítFûeCohîícyHódî
(
s
,&
iSizeV¨
,

1077 &
off£t_loˇl_exåafõld
,&
size_loˇl_exåafõld
)!=
UNZ_OK
)

1078  
UNZ_BADZIPFILE
;

1080 
pfûe_ö_zù_ªad_öfo
 = (
fûe_ö_zù_ªad_öfo_s
*)

1081 
	`ALLOC
((
fûe_ö_zù_ªad_öfo_s
));

1082 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1083  
UNZ_INTERNALERROR
;

1085 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
=(*)
	`ALLOC
(
UNZ_BUFSIZE
);

1086 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 = offset_local_extrafield;

1087 
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 = size_local_extrafield;

1088 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
=0;

1089 
pfûe_ö_zù_ªad_öfo
->
øw
=raw;

1091 i‡(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
==
NULL
)

1093 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1094  
UNZ_INTERNALERROR
;

1097 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=0;

1099 i‡(
mëhod
!=
NULL
)

1100 *
mëhod
 = ()
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
;

1102 i‡(
Àvñ
!=
NULL
)

1104 *
Àvñ
 = 6;

1105 
s
->
cur_fûe_öfo
.
Êag
 & 0x06)

1107 6 : *
Àvñ
 = 1; ;

1108 4 : *
Àvñ
 = 2; ;

1109 2 : *
Àvñ
 = 9; ;

1113 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

1114 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

1115 
îr
=
UNZ_BADZIPFILE
;

1117 
pfûe_ö_zù_ªad_öfo
->
¸c32_waô
=
s
->
cur_fûe_öfo
.
¸c
;

1118 
pfûe_ö_zù_ªad_öfo
->
¸c32
=0;

1119 
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
 =

1120 
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
;

1121 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
=
s
->filestream;

1122 
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
=
s
->z_filefunc;

1123 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
=
s
->byte_before_the_zipfile;

1125 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 = 0;

1127 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
==
Z_DEFLATED
) &&

1128 (!
øw
))

1130 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
zÆloc
 = (
Æloc_func
)0;

1131 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
z‰ì
 = (
‰ì_func
)0;

1132 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
›aque
 = (
voidpf
)0;

1133 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 = (
voidpf
)0;

1134 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = 0;

1136 
îr
=
	`öÊ©eInô2
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
, -
MAX_WBITS
);

1137 i‡(
îr
 =
Z_OK
)

1138 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=1;

1141 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1142  
îr
;

1152 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
 =

1153 
s
->
cur_fûe_öfo
.
com¥es£d_size
 ;

1154 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 =

1155 
s
->
cur_fûe_öfo
.
uncom¥es£d_size
 ;

1158 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 =

1159 
s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 + 
SIZEZIPLOCALHEADER
 +

1160 
iSizeV¨
;

1162 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)0;

1164 
s
->
pfûe_ö_zù_ªad
 = 
pfûe_ö_zù_ªad_öfo
;

1166 #i‚de‡
NOUNCRYPT


1167 i‡(
∑ssw‹d
 !
NULL
)

1169 
i
;

1170 
s
->
p¸c_32_èb
 = 
	`gë_¸c_èbÀ
();

1171 
	`öô_keys
(
∑ssw‹d
,
s
->
keys
,s->
p¸c_32_èb
);

1172 i‡(
	`ZSEEK
(
s
->
z_fûefunc
, s->
fûe°ªam
,

1173 
s
->
pfûe_ö_zù_ªad
->
pos_ö_zùfûe
 +

1174 
s
->
pfûe_ö_zù_ªad
->
byã_bef‹e_the_zùfûe
,

1175 
SEEK_SET
)!=0)

1176  
UNZ_INTERNALERROR
;

1177 if(
	`ZREAD
(
s
->
z_fûefunc
, s->
fûe°ªam
,
sour˚
, 12)<12)

1178  
UNZ_INTERNALERROR
;

1180 
i
 = 0; i<12; i++)

1181 
	`zdecode
(
s
->
keys
,s->
p¸c_32_èb
,
sour˚
[
i
]);

1183 
s
->
pfûe_ö_zù_ªad
->
pos_ö_zùfûe
+=12;

1184 
s
->
í¸y±ed
=1;

1189  
UNZ_OK
;

1190 
	}
}

1192 
ZEXPORT
 
	$unzO≥nCuºítFûe
 (
fûe
)

1193 
unzFûe
 
fûe
;

1195  
	`unzO≥nCuºítFûe3
(
fûe
, 
NULL
, NULL, 0, NULL);

1196 
	}
}

1198 
ZEXPORT
 
	$unzO≥nCuºítFûePassw‹d
 (
fûe
, 
∑ssw‹d
)

1199 
unzFûe
 
fûe
;

1200 c⁄° * 
∑ssw‹d
;

1202  
	`unzO≥nCuºítFûe3
(
fûe
, 
NULL
, NULL, 0, 
∑ssw‹d
);

1203 
	}
}

1205 
ZEXPORT
 
	$unzO≥nCuºítFûe2
 (
fûe
,
mëhod
,
Àvñ
,
øw
)

1206 
unzFûe
 
fûe
;

1207 * 
mëhod
;

1208 * 
Àvñ
;

1209 
øw
;

1211  
	`unzO≥nCuºítFûe3
(
fûe
, 
mëhod
, 
Àvñ
, 
øw
, 
NULL
);

1212 
	}
}

1224 
ZEXPORT
 
	$unzRódCuºítFûe
 (
fûe
, 
buf
, 
Àn
)

1225 
unzFûe
 
fûe
;

1226 
voidp
 
buf
;

1227 
Àn
;

1229 
îr
=
UNZ_OK
;

1230 
uI¡
 
iRód
 = 0;

1231 
unz_s
* 
s
;

1232 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1233 i‡(
fûe
==
NULL
)

1234  
UNZ_PARAMERROR
;

1235 
s
=(
unz_s
*)
fûe
;

1236 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1238 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1239  
UNZ_PARAMERROR
;

1242 i‡((
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 =
NULL
))

1243  
UNZ_END_OF_LIST_OF_FILE
;

1244 i‡(
Àn
==0)

1247 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 = (
Byãf
*)
buf
;

1249 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 = (
uI¡
)
Àn
;

1251 i‡((
Àn
>
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
) &&

1252 (!(
pfûe_ö_zù_ªad_öfo
->
øw
)))

1253 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =

1254 (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
;

1256 i‡((
Àn
>
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
+

1257 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
) &&

1258 (
pfûe_ö_zù_ªad_öfo
->
øw
))

1259 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =

1260 (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
+

1261 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
;

1263 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
>0)

1265 i‡((
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
==0) &&

1266 (
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
>0))

1268 
uI¡
 
uRódThis
 = 
UNZ_BUFSIZE
;

1269 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
<
uRódThis
)

1270 
uRódThis
 = (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
;

1271 i‡(
uRódThis
 == 0)

1272  
UNZ_EOF
;

1273 i‡(
	`ZSEEK
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1274 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1275 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +

1276 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
,

1277 
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1278  
UNZ_ERRNO
;

1279 i‡(
	`ZREAD
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1280 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1281 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
,

1282 
uRódThis
)!=uReadThis)

1283  
UNZ_ERRNO
;

1286 #i‚de‡
NOUNCRYPT


1287 if(
s
->
í¸y±ed
)

1289 
uI¡
 
i
;

1290 
i
=0;i<
uRódThis
;i++)

1291 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
[
i
] =

1292 
	`zdecode
(
s
->
keys
,s->
p¸c_32_èb
,

1293 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
[
i
]);

1298 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +
uRódThis
;

1300 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
-=
uRódThis
;

1302 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 =

1303 (
Byãf
*)
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
;

1304 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)
uRódThis
;

1307 i‡((
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
==0Ë|| (pfûe_ö_zù_ªad_öfo->
øw
))

1309 
uI¡
 
uDoC›y
,
i
 ;

1311 i‡((
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 == 0) &&

1312 (
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
 == 0))

1313  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1315 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 <

1316 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
)

1317 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 ;

1319 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 ;

1321 
i
=0;i<
uDoC›y
;i++)

1322 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
+
i
) =

1323 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
+
i
);

1325 
pfûe_ö_zù_ªad_öfo
->
¸c32
 = 
	`¸c32
(pfile_in_zip_read_info->crc32,

1326 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
,

1327 
uDoC›y
);

1328 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
-=
uDoC›y
;

1329 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 -
uDoC›y
;

1330 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 -
uDoC›y
;

1331 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 +
uDoC›y
;

1332 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 +
uDoC›y
;

1333 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 +
uDoC›y
;

1334 
iRód
 +
uDoC›y
;

1338 
uL⁄g
 
uTŸÆOutBef‹e
,
uTŸÆOutA·î
;

1339 c⁄° 
Byãf
 *
bufBef‹e
;

1340 
uL⁄g
 
uOutThis
;

1341 
Êush
=
Z_SYNC_FLUSH
;

1343 
uTŸÆOutBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1344 
bufBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
;

1352 
îr
=
	`öÊ©e
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
,
Êush
);

1354 i‡((
îr
>=0Ë&& (
pfûe_ö_zù_ªad_öfo
->
°ªam
.
msg
!=
NULL
))

1355 
îr
 = 
Z_DATA_ERROR
;

1357 
uTŸÆOutA·î
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1358 
uOutThis
 = 
uTŸÆOutA·î
-
uTŸÆOutBef‹e
;

1360 
pfûe_ö_zù_ªad_öfo
->
¸c32
 =

1361 
	`¸c32
(
pfûe_ö_zù_ªad_öfo
->
¸c32
,
bufBef‹e
,

1362 (
uI¡
)(
uOutThis
));

1364 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 -=

1365 
uOutThis
;

1367 
iRód
 +(
uI¡
)(
uTŸÆOutA·î
 - 
uTŸÆOutBef‹e
);

1369 i‡(
îr
==
Z_STREAM_END
)

1370  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1371 i‡(
îr
!=
Z_OK
)

1376 i‡(
îr
==
Z_OK
)

1377  
iRód
;

1378  
îr
;

1379 
	}
}

1385 
z_off_t
 
ZEXPORT
 
	$unzãŒ
 (
fûe
)

1386 
unzFûe
 
fûe
;

1388 
unz_s
* 
s
;

1389 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1390 i‡(
fûe
==
NULL
)

1391  
UNZ_PARAMERROR
;

1392 
s
=(
unz_s
*)
fûe
;

1393 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1395 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1396  
UNZ_PARAMERROR
;

1398  (
z_off_t
)
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1399 
	}
}

1405 
ZEXPORT
 
	$unzeof
 (
fûe
)

1406 
unzFûe
 
fûe
;

1408 
unz_s
* 
s
;

1409 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1410 i‡(
fûe
==
NULL
)

1411  
UNZ_PARAMERROR
;

1412 
s
=(
unz_s
*)
fûe
;

1413 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1415 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1416  
UNZ_PARAMERROR
;

1418 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0)

1422 
	}
}

1438 
ZEXPORT
 
	$unzGëLoˇlExåafõld
 (
fûe
,
buf
,
Àn
)

1439 
unzFûe
 
fûe
;

1440 
voidp
 
buf
;

1441 
Àn
;

1443 
unz_s
* 
s
;

1444 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1445 
uI¡
 
ªad_now
;

1446 
uL⁄g
 
size_to_ªad
;

1448 i‡(
fûe
==
NULL
)

1449  
UNZ_PARAMERROR
;

1450 
s
=(
unz_s
*)
fûe
;

1451 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1453 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1454  
UNZ_PARAMERROR
;

1456 
size_to_ªad
 = (
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 -

1457 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
);

1459 i‡(
buf
==
NULL
)

1460  ()
size_to_ªad
;

1462 i‡(
Àn
>
size_to_ªad
)

1463 
ªad_now
 = (
uI¡
)
size_to_ªad
;

1465 
ªad_now
 = (
uI¡
)
Àn
 ;

1467 i‡(
ªad_now
==0)

1470 i‡(
	`ZSEEK
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1471 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1472 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 +

1473 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
,

1474 
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1475  
UNZ_ERRNO
;

1477 i‡(
	`ZREAD
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1478 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1479 
buf
,
ªad_now
)!=read_now)

1480  
UNZ_ERRNO
;

1482  ()
ªad_now
;

1483 
	}
}

1489 
ZEXPORT
 
	$unzClo£CuºítFûe
 (
fûe
)

1490 
unzFûe
 
fûe
;

1492 
îr
=
UNZ_OK
;

1494 
unz_s
* 
s
;

1495 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1496 i‡(
fûe
==
NULL
)

1497  
UNZ_PARAMERROR
;

1498 
s
=(
unz_s
*)
fûe
;

1499 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1501 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1502  
UNZ_PARAMERROR
;

1505 i‡((
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0) &&

1506 (!
pfûe_ö_zù_ªad_öfo
->
øw
))

1508 i‡(
pfûe_ö_zù_ªad_öfo
->
¸c32
 !pfûe_ö_zù_ªad_öfo->
¸c32_waô
)

1509 
îr
=
UNZ_CRCERROR
;

1513 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
);

1514 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 = 
NULL
;

1515 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
)

1516 
	`öÊ©eEnd
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
);

1518 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
 = 0;

1519 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1521 
s
->
pfûe_ö_zù_ªad
=
NULL
;

1523  
îr
;

1524 
	}
}

1532 
ZEXPORT
 
	$unzGëGlobÆCommít
 (
fûe
, 
szCommít
, 
uSizeBuf
)

1533 
unzFûe
 
fûe
;

1534 *
szCommít
;

1535 
uL⁄g
 
uSizeBuf
;

1537 
îr
=
UNZ_OK
;

1538 
unz_s
* 
s
;

1539 
uL⁄g
 
uRódThis
 ;

1540 i‡(
fûe
==
NULL
)

1541  
UNZ_PARAMERROR
;

1542 
s
=(
unz_s
*)
fûe
;

1544 
uRódThis
 = 
uSizeBuf
;

1545 i‡(
uRódThis
>
s
->
gi
.
size_commít
)

1546 
uRódThis
 = 
s
->
gi
.
size_commít
;

1548 i‡(
	`ZSEEK
(
s
->
z_fûefunc
,s->
fûe°ªam
,s->
˚¡øl_pos
+22,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1549  
UNZ_ERRNO
;

1551 i‡(
uRódThis
>0)

1553 *
szCommít
='\0';

1554 i‡(
	`ZREAD
(
s
->
z_fûefunc
,s->
fûe°ªam
,
szCommít
,
uRódThis
)!=uReadThis)

1555  
UNZ_ERRNO
;

1558 i‡((
szCommít
 !
NULL
Ë&& (
uSizeBuf
 > 
s
->
gi
.
size_commít
))

1559 *(
szCommít
+
s
->
gi
.
size_commít
)='\0';

1560  ()
uRódThis
;

1561 
	}
}

1564 
uL⁄g
 
ZEXPORT
 
	$unzGëOff£t
 (
fûe
)

1565 
unzFûe
 
fûe
;

1567 
unz_s
* 
s
;

1569 i‡(
fûe
==
NULL
)

1570  
UNZ_PARAMERROR
;

1571 
s
=(
unz_s
*)
fûe
;

1572 i‡(!
s
->
cuºít_fûe_ok
)

1574 i‡(
s
->
gi
.
numbî_íåy
 != 0 && s->gi.number_entry != 0xffff)

1575 i‡(
s
->
num_fûe
==s->
gi
.
numbî_íåy
)

1577  
s
->
pos_ö_˚¡øl_dú
;

1578 
	}
}

1580 
ZEXPORT
 
	$unzSëOff£t
 (
fûe
, 
pos
)

1581 
unzFûe
 
fûe
;

1582 
uL⁄g
 
pos
;

1584 
unz_s
* 
s
;

1585 
îr
;

1587 i‡(
fûe
==
NULL
)

1588  
UNZ_PARAMERROR
;

1589 
s
=(
unz_s
*)
fûe
;

1591 
s
->
pos_ö_˚¡øl_dú
 = 
pos
;

1592 
s
->
num_fûe
 = s->
gi
.
numbî_íåy
;

1593 
îr
 = 
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

1594 &
s
->
cur_fûe_öfo_öã∫Æ
,

1595 
NULL
,0,NULL,0,NULL,0);

1596 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

1597  
îr
;

1598 
	}
}

	@unzip.h

45 #i‚de‡
_unz_H


46 
	#_unz_H


	)

48 #ifde‡
__˝lu•lus


52 
	#NOUNCRYPT


	)

54 #i‚de‡
_ZLIB_H


55 
	~"zlib.h
"

58 #i‚de‡
_ZLIBIOAPI_H


59 
	~"iﬂpi.h
"

62 #i‡
deföed
(
STRICTUNZIP
Ë|| deföed(
STRICTZIPUNZIP
)

65 
	sTagunzFûe__
 { 
unu£d
; } 
	tunzFûe__
;

66 
unzFûe__
 *
	tunzFûe
;

68 
voidp
 
	tunzFûe
;

72 
	#UNZ_OK
 (0)

	)

73 
	#UNZ_END_OF_LIST_OF_FILE
 (-100)

	)

74 
	#UNZ_ERRNO
 (
Z_ERRNO
)

	)

75 
	#UNZ_EOF
 (0)

	)

76 
	#UNZ_PARAMERROR
 (-102)

	)

77 
	#UNZ_BADZIPFILE
 (-103)

	)

78 
	#UNZ_INTERNALERROR
 (-104)

	)

79 
	#UNZ_CRCERROR
 (-105)

	)

82 
	stm_unz_s


84 
uI¡
 
tm_£c
;

85 
uI¡
 
tm_mö
;

86 
uI¡
 
tm_hour
;

87 
uI¡
 
tm_mday
;

88 
uI¡
 
tm_m⁄
;

89 
uI¡
 
tm_yór
;

90 } 
	ttm_unz
;

94 
	sunz_globÆ_öfo_s


96 
uL⁄g
 
numbî_íåy
;

98 
uL⁄g
 
size_commít
;

99 } 
	tunz_globÆ_öfo
;

103 
	sunz_fûe_öfo_s


105 
uL⁄g
 
vîsi⁄
;

106 
uL⁄g
 
vîsi⁄_√eded
;

107 
uL⁄g
 
Êag
;

108 
uL⁄g
 
com¥essi⁄_mëhod
;

109 
uL⁄g
 
dosD©e
;

110 
uL⁄g
 
¸c
;

111 
uL⁄g
 
com¥es£d_size
;

112 
uL⁄g
 
uncom¥es£d_size
;

113 
uL⁄g
 
size_fûíame
;

114 
uL⁄g
 
size_fûe_exåa
;

115 
uL⁄g
 
size_fûe_commít
;

117 
uL⁄g
 
disk_num_°¨t
;

118 
uL⁄g
 
öã∫Æ_Á
;

119 
uL⁄g
 
exã∫Æ_Á
;

121 
tm_unz
 
tmu_d©e
;

122 } 
	tunz_fûe_öfo
;

124 
ZEXPORT
 
unzSåögFûeNameCom∑ª
 
OF
 ((c⁄° * 
fûeName1
,

125 c⁄° * 
fûeName2
,

126 
iCa£Sísôivôy
));

137 
unzFûe
 
ZEXPORT
 
unzO≥n
 
OF
((c⁄° *
∑th
));

148 
unzFûe
 
ZEXPORT
 
unzO≥n2
 
OF
((c⁄° *
∑th
,

149 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

155 
ZEXPORT
 
unzClo£
 
OF
((
unzFûe
 
fûe
));

162 
ZEXPORT
 
unzGëGlobÆInfo
 
OF
((
unzFûe
 
fûe
,

163 
unz_globÆ_öfo
 *
pglobÆ_öfo
));

170 
ZEXPORT
 
unzGëGlobÆCommít
 
OF
((
unzFûe
 
fûe
,

171 *
szCommít
,

172 
uL⁄g
 
uSizeBuf
));

183 
ZEXPORT
 
unzGoToFú°Fûe
 
OF
((
unzFûe
 
fûe
));

189 
ZEXPORT
 
unzGoToNextFûe
 
OF
((
unzFûe
 
fûe
));

196 
ZEXPORT
 
unzLoˇãFûe
 
OF
((
unzFûe
 
fûe
,

197 c⁄° *
szFûeName
,

198 
iCa£Sísôivôy
));

212 
	sunz_fûe_pos_s


214 
uL⁄g
 
	gpos_ö_zù_dúe˘‹y
;

215 
uL⁄g
 
	gnum_of_fûe
;

216 } 
	tunz_fûe_pos
;

218 
ZEXPORT
 
unzGëFûePos
(

219 
unzFûe
 
fûe
,

220 
unz_fûe_pos
* 
fûe_pos
);

222 
ZEXPORT
 
unzGoToFûePos
(

223 
unzFûe
 
fûe
,

224 
unz_fûe_pos
* 
fûe_pos
);

228 
ZEXPORT
 
unzGëCuºítFûeInfo
 
OF
((
unzFûe
 
fûe
,

229 
unz_fûe_öfo
 *
pfûe_öfo
,

230 *
szFûeName
,

231 
uL⁄g
 
fûeNameBuf„rSize
,

232 *
exåaFõld
,

233 
uL⁄g
 
exåaFõldBuf„rSize
,

234 *
szCommít
,

235 
uL⁄g
 
commítBuf„rSize
));

254 
ZEXPORT
 
unzO≥nCuºítFûe
 
OF
((
unzFûe
 
fûe
));

260 
ZEXPORT
 
unzO≥nCuºítFûePassw‹d
 
OF
((
unzFûe
 
fûe
,

261 c⁄° * 
∑ssw‹d
));

268 
ZEXPORT
 
unzO≥nCuºítFûe2
 
OF
((
unzFûe
 
fûe
,

269 * 
mëhod
,

270 * 
Àvñ
,

271 
øw
));

281 
ZEXPORT
 
unzO≥nCuºítFûe3
 
OF
((
unzFûe
 
fûe
,

282 * 
mëhod
,

283 * 
Àvñ
,

284 
øw
,

285 c⁄° * 
∑ssw‹d
));

296 
ZEXPORT
 
unzClo£CuºítFûe
 
OF
((
unzFûe
 
fûe
));

302 
ZEXPORT
 
unzRódCuºítFûe
 
OF
((
unzFûe
 
fûe
,

303 
voidp
 
buf
,

304 
Àn
));

316 
z_off_t
 
ZEXPORT
 
unzãŒ
 
OF
((
unzFûe
 
fûe
));

321 
ZEXPORT
 
unzeof
 
OF
((
unzFûe
 
fûe
));

326 
ZEXPORT
 
unzGëLoˇlExåafõld
 
OF
((
unzFûe
 
fûe
,

327 
voidp
 
buf
,

328 
Àn
));

345 
uL⁄g
 
ZEXPORT
 
unzGëOff£t
 (
unzFûe
 
fûe
);

348 
ZEXPORT
 
unzSëOff£t
 (
unzFûe
 
fûe
, 
uL⁄g
 
pos
);

352 #ifde‡
__˝lu•lus


	@usbjoy.c

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/io˘l.h
>

28 
	~<f˙é.h
>

29 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<limôs.h
>

33 
	~<löux/joy°ick.h
>

35 
	~"usbjoy.h
"

52 
usbjoy
 * 
	$joy_›í
 (
joynumbî
) {

53 
fd
, 
i
;

54 
∑th
 [128];

55 
usbjoy
 * 
joy
 = 
NULL
;

57 
	`sy°em
 ("insmod joydev");

59 i‡(
joynumbî
 == 0) {

61 i‡(
joynumbî
 > 0) {

62 
	`•rötf
 (
∑th
, "/dev/öput/js%d", 
joynumbî
-1);

63 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
, 0);

64 i‡(
fd
 > 0) {

65 
joy
 = (
usbjoy
 *Ë
	`mÆloc
((usbjoy));

68 
joy
->
fd
 = fd;

71 
	`f˙é
(
joy
->
fd
, 
F_SETFL
, 
O_NONBLOCK
);

74 
	`io˘l
(
joy
->
fd
, 
	`JSIOCGNAME
(128*()), joy->
«me
);

77 
	`•rötf
 (
joy
->
devi˚
, 
∑th
);

80 
	`io˘l
(
joy
->
fd
, 
JSIOCGBUTTONS
, &joy->
numbuâ⁄s
);

83 
	`io˘l
(
joy
->
fd
, 
JSIOCGAXES
, &joy->
numaxes
);

86 
i
=0; i<32; i++Ë
joy
->
°©ebuâ⁄s
[i] = 0;

87 
i
=0; i<4; i++Ë
joy
->
°©óxes
[i] = 0;

90 
	`¥ötf
 ("ERROR: No Joystick found\n");

93  
joy
;

94 
	}
}

109 * 
	$joy_«me
 (
usbjoy
 * 
joy
) {

110 i‡(
joy
 !
NULL
Ë joy->
«me
;

111  
NULL
;

112 
	}
}

128 * 
	$joy_devi˚
 (
usbjoy
 * 
joy
) {

129 i‡(
joy
 !
NULL
Ë joy->
devi˚
;

130  
NULL
;

131 
	}
}

147 
	$joy_buâ⁄s
 (
usbjoy
 * 
joy
) {

148 i‡(
joy
 !
NULL
Ë joy->
numbuâ⁄s
;

150 
	}
}

166 
	$joy_axes
 (
usbjoy
 * 
joy
) {

167 i‡(
joy
 !
NULL
Ë joy->
numaxes
;

169 
	}
}

187 
	$joy_upd©e
 (
usbjoy
 * 
joy
) {

188 
js_evít
 
evíts
[0xff];

189 
i
, 
Àn
;

190 
evít
 = 0;

191 i‡(
joy
 !
NULL
) {

192 i‡((
Àn
=
	`ªad
(
joy
->
fd
, 
evíts
, (Évents))) >0) {

193 
Àn
 /(
evíts
[0]);

194  
i
=0; i<
Àn
; ++i ) {

195 
evíts
[
i
].
ty≥
 & ~
JS_EVENT_INIT
) {

196 
JS_EVENT_AXIS
:

197 i‡(
evíts
[
i
].
numbî
 == 0) {

198 
joy
->
°©óxes
[
JOYLEFT
] = joy->°©óxes[
JOYRIGHT
] = 0;

199 i‡(
evíts
[
i
].
vÆue
 < 0Ë
joy
->
°©óxes
[
JOYLEFT
] = 1;

200 i‡(
evíts
[
i
].
vÆue
 > 0Ë
joy
->
°©óxes
[
JOYRIGHT
] = 1;

202 i‡(
evíts
[
i
].
numbî
 == 1) {

203 
joy
->
°©óxes
[
JOYUP
] = joy->°©óxes[
JOYDOWN
] = 0;

204 i‡(
evíts
[
i
].
vÆue
 < 0Ë
joy
->
°©óxes
[
JOYUP
] = 1;

205 i‡(
evíts
[
i
].
vÆue
 > 0Ë
joy
->
°©óxes
[
JOYDOWN
] = 1;

207 
evít
 = 1;

209 
JS_EVENT_BUTTON
:

210 
joy
->
°©ebuâ⁄s
[
evíts
[
i
].
numbî
] =Évíts[i].
vÆue
;

211 
evít
 = 1;

220 
evít
 = -1;

222  
evít
;

223 
	}
}

242 
	$joy_gëbuâ⁄
 (
buâ⁄
, 
usbjoy
 * 
joy
) {

243 i‡(
joy
 !
NULL
) {

244 i‡(
buâ⁄
 < 
	`joy_buâ⁄s
(
joy
)Ë joy->
°©ebuâ⁄s
[button];

248 
	}
}

267 
	$joy_gëaxe
 (
axe
, 
usbjoy
 * 
joy
) {

268 i‡(
joy
 !
NULL
) {

269 i‡(
axe
 < 4Ë 
joy
->
°©óxes
[axe];

273 
	}
}

290 
	$joy_˛o£
 (
usbjoy
 * 
joy
) {

291 i‡(
joy
 !
NULL
) {

292 
	`˛o£
 (
joy
->
fd
);

293 
	`‰ì
 (
joy
);

297 
	}
}

	@usbjoy.h

23 #i‚de‡
USBJOY_H


24 
	#USBJOY_H


	)

39 
	#JOYUP
 (0)

	)

40 
	#JOYDOWN
 (1)

	)

41 
	#JOYLEFT
 (2)

	)

42 
	#JOYRIGHT
 (3)

	)

60 
	susbjoy
 {

61 
	mfd
;

62 
	m«me
 [128];

63 
	mdevi˚
 [128];

64 
	mnumbuâ⁄s
;

65 
	mnumaxes
;

66 
	mnumh©s
;

67 
	m°©ebuâ⁄s
[32];

68 
	m°©óxes
[4];

85 
usbjoy
 * 
joy_›í
 (
joynumbî
);

101 * 
joy_«me
 (
usbjoy
 * 
joy
);

117 * 
joy_devi˚
 (
usbjoy
 * 
joy
);

132 
joy_buâ⁄s
 (
usbjoy
 * 
joy
);

147 
joy_axes
 (
usbjoy
 * 
joy
);

165 
joy_upd©e
 (
usbjoy
 * 
joy
);

184 
joy_gëbuâ⁄
 (
buâ⁄
, 
usbjoy
 * 
joy
);

203 
joy_gëaxe
 (
axe
, 
usbjoy
 * 
joy
);

219 
joy_˛o£
 (
usbjoy
 * 
joy
);

	@zip.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<time.h
>

17 
	~"zlib.h
"

18 
	~"zù.h
"

20 #ifde‡
STDC


21 
	~<°ddef.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

25 #ifde‡
NO_ERRNO_H


26 
î∫o
;

28 
	~<î∫o.h
>

32 #i‚de‡
loˇl


33 
	#loˇl
 

	)

37 #i‚de‡
VERSIONMADEBY


38 
	#VERSIONMADEBY
 (0x0Ë

	)

41 #i‚de‡
Z_BUFSIZE


42 
	#Z_BUFSIZE
 (16384)

	)

45 #i‚de‡
Z_MAXFILENAMEINZIP


46 
	#Z_MAXFILENAMEINZIP
 (256)

	)

49 #i‚de‡
ALLOC


50 
	#ALLOC
(
size
Ë(
	`mÆloc
(size))

	)

52 #i‚de‡
TRYFREE


53 
	#TRYFREE
(
p
Ë{i‡’Ë
	`‰ì
’);}

	)

63 #i‚de‡
SEEK_CUR


64 
	#SEEK_CUR
 1

	)

67 #i‚de‡
SEEK_END


68 
	#SEEK_END
 2

	)

71 #i‚de‡
SEEK_SET


72 
	#SEEK_SET
 0

	)

75 #i‚de‡
DEF_MEM_LEVEL


76 #i‡
MAX_MEM_LEVEL
 >= 8

77 
	#DEF_MEM_LEVEL
 8

	)

79 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

82 c⁄° 
	gzù_c›yright
[] =

86 
	#SIZEDATA_INDATABLOCK
 (4096-(4*4))

	)

88 
	#LOCALHEADERMAGIC
 (0x04034b50)

	)

89 
	#CENTRALHEADERMAGIC
 (0x02014b50)

	)

90 
	#ENDHEADERMAGIC
 (0x06054b50)

	)

92 
	#FLAG_LOCALHEADER_OFFSET
 (0x06)

	)

93 
	#CRC_LOCALHEADER_OFFSET
 (0x0e)

	)

95 
	#SIZECENTRALHEADER
 (0x2eË

	)

97 
	slökedli°_d©ablock_öã∫Æ_s


99 
lökedli°_d©ablock_öã∫Æ_s
* 
	m√xt_d©ablock
;

100 
uL⁄g
 
	mavaû_ö_this_block
;

101 
uL⁄g
 
	mfûÀd_ö_this_block
;

102 
uL⁄g
 
	munu£d
;

103 
	md©a
[
SIZEDATA_INDATABLOCK
];

104 } 
	tlökedli°_d©ablock_öã∫Æ
;

106 
	slökedli°_d©a_s


108 
lökedli°_d©ablock_öã∫Æ
* 
	mfú°_block
;

109 
lökedli°_d©ablock_öã∫Æ
* 
	mœ°_block
;

110 } 
	tlökedli°_d©a
;

115 
z_°ªam
 
	m°ªam
;

116 
	m°ªam_öôüli£d
;

117 
uI¡
 
	mpos_ö_buf„ªd_d©a
;

119 
uL⁄g
 
	mpos_loˇl_hódî
;

121 * 
	m˚¡øl_hódî
;

122 
uL⁄g
 
	msize_˚¡ølhódî
;

123 
uL⁄g
 
	mÊag
;

125 
	mmëhod
;

126 
	møw
;

127 
Byã
 
	mbuf„ªd_d©a
[
Z_BUFSIZE
];

128 
uL⁄g
 
	mdosD©e
;

129 
uL⁄g
 
	m¸c32
;

130 
	mí¸y±
;

131 #i‚de‡
NOCRYPT


132 
	mkeys
[3];

133 c⁄° * 
	mp¸c_32_èb
;

134 
	m¸y±_hódî_size
;

136 } 
	tcurfûe_öfo
;

140 
zlib_fûefunc_def
 
	mz_fûefunc
;

141 
voidpf
 
	mfûe°ªam
;

142 
lökedli°_d©a
 
	m˚¡øl_dú
;

143 
	mö_›íed_fûe_özù
;

144 
curfûe_öfo
 
	mci
;

146 
uL⁄g
 
	mbegö_pos
;

147 
uL⁄g
 
	madd_posôi⁄_whí_wrôtög_off£t
;

148 
uL⁄g
 
	mnumbî_íåy
;

149 #i‚de‡
NO_ADDFILEINEXISTINGZIP


150 *
	mglobÆcommít
;

152 } 
	tzù_öã∫Æ
;

156 #i‚de‡
NOCRYPT


157 
	#INCLUDECRYPTINGCODE_IFCRYPTALLOWED


	)

158 
	~"¸y±.h
"

161 
loˇl
 
lökedli°_d©ablock_öã∫Æ
* 
	$Æloˇã_√w_d©ablock
()

163 
lökedli°_d©ablock_öã∫Æ
* 
ldi
;

164 
ldi
 = (
lökedli°_d©ablock_öã∫Æ
*)

165 
	`ALLOC
((
lökedli°_d©ablock_öã∫Æ
));

166 i‡(
ldi
!=
NULL
)

168 
ldi
->
√xt_d©ablock
 = 
NULL
 ;

169 
ldi
->
fûÀd_ö_this_block
 = 0 ;

170 
ldi
->
avaû_ö_this_block
 = 
SIZEDATA_INDATABLOCK
 ;

172  
ldi
;

173 
	}
}

175 
loˇl
 
	$‰ì_d©ablock
(
ldi
)

176 
lökedli°_d©ablock_öã∫Æ
* 
ldi
;

178 
ldi
!=
NULL
)

180 
lökedli°_d©ablock_öã∫Æ
* 
ldöext
 = 
ldi
->
√xt_d©ablock
;

181 
	`TRYFREE
(
ldi
);

182 
ldi
 = 
ldöext
;

184 
	}
}

186 
loˇl
 
	$öô_lökedli°
(
Œ
)

187 
lökedli°_d©a
* 
Œ
;

189 
Œ
->
fú°_block
 =Ül->
œ°_block
 = 
NULL
;

190 
	}
}

192 
loˇl
 
	$‰ì_lökedli°
(
Œ
)

193 
lökedli°_d©a
* 
Œ
;

195 
	`‰ì_d©ablock
(
Œ
->
fú°_block
);

196 
Œ
->
fú°_block
 =Ül->
œ°_block
 = 
NULL
;

197 
	}
}

200 
loˇl
 
	$add_d©a_ö_d©ablock
(
Œ
,
buf
,
Àn
)

201 
lökedli°_d©a
* 
Œ
;

202 c⁄° * 
buf
;

203 
uL⁄g
 
Àn
;

205 
lökedli°_d©ablock_öã∫Æ
* 
ldi
;

206 c⁄° * 
‰om_c›y
;

208 i‡(
Œ
==
NULL
)

209  
ZIP_INTERNALERROR
;

211 i‡(
Œ
->
œ°_block
 =
NULL
)

213 
Œ
->
fú°_block
 =Ül->
œ°_block
 = 
	`Æloˇã_√w_d©ablock
();

214 i‡(
Œ
->
fú°_block
 =
NULL
)

215  
ZIP_INTERNALERROR
;

218 
ldi
 = 
Œ
->
œ°_block
;

219 
‰om_c›y
 = (*)
buf
;

221 
Àn
>0)

223 
uI¡
 
c›y_this
;

224 
uI¡
 
i
;

225 * 
to_c›y
;

227 i‡(
ldi
->
avaû_ö_this_block
==0)

229 
ldi
->
√xt_d©ablock
 = 
	`Æloˇã_√w_d©ablock
();

230 i‡(
ldi
->
√xt_d©ablock
 =
NULL
)

231  
ZIP_INTERNALERROR
;

232 
ldi
 =Üdi->
√xt_d©ablock
 ;

233 
Œ
->
œ°_block
 = 
ldi
;

236 i‡(
ldi
->
avaû_ö_this_block
 < 
Àn
)

237 
c›y_this
 = (
uI¡
)
ldi
->
avaû_ö_this_block
;

239 
c›y_this
 = (
uI¡
)
Àn
;

241 
to_c›y
 = &(
ldi
->
d©a
[ldi->
fûÀd_ö_this_block
]);

243 
i
=0;i<
c›y_this
;i++)

244 *(
to_c›y
+
i
)=*(
‰om_c›y
+i);

246 
ldi
->
fûÀd_ö_this_block
 +
c›y_this
;

247 
ldi
->
avaû_ö_this_block
 -
c›y_this
;

248 
‰om_c›y
 +
c›y_this
 ;

249 
Àn
 -
c›y_this
;

251  
ZIP_OK
;

252 
	}
}

258 #i‚de‡
NO_ADDFILEINEXISTINGZIP


264 
loˇl
 
zùloˇl_putVÆue
 
OF
((c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

265 
voidpf
 
fûe°ªam
, 
uL⁄g
 
x
, 
nbByã
));

266 
loˇl
 
	$zùloˇl_putVÆue
 (
pzlib_fûefunc_def
, 
fûe°ªam
, 
x
, 
nbByã
)

267 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

268 
voidpf
 
fûe°ªam
;

269 
uL⁄g
 
x
;

270 
nbByã
;

272 
buf
[4];

273 
n
;

274 
n
 = 0;Ç < 
nbByã
;Ç++)

276 
buf
[
n
] = ()(
x
 & 0xff);

277 
x
 >>= 8;

279 i‡(
x
 != 0)

281 
n
 = 0;Ç < 
nbByã
;Ç++)

283 
buf
[
n
] = 0xff;

287 i‡(
	`ZWRITE
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
nbByã
)!=(
uL⁄g
)nbByte)

288  
ZIP_ERRNO
;

290  
ZIP_OK
;

291 
	}
}

293 
loˇl
 
zùloˇl_putVÆue_ömem‹y
 
OF
((* 
de°
, 
uL⁄g
 
x
, 
nbByã
));

294 
loˇl
 
	$zùloˇl_putVÆue_ömem‹y
 (
de°
, 
x
, 
nbByã
)

295 * 
de°
;

296 
uL⁄g
 
x
;

297 
nbByã
;

299 * 
buf
=(*)
de°
;

300 
n
;

301 
n
 = 0;Ç < 
nbByã
;Ç++) {

302 
buf
[
n
] = ()(
x
 & 0xff);

303 
x
 >>= 8;

306 i‡(
x
 != 0)

308 
n
 = 0;Ç < 
nbByã
;Ç++)

310 
buf
[
n
] = 0xff;

313 
	}
}

318 
loˇl
 
uL⁄g
 
	$zùloˇl_TmzD©eToDosD©e
(
±m
,
dosD©e
)

319 c⁄° 
tm_zù
* 
±m
;

320 
uL⁄g
 
dosD©e
;

322 
uL⁄g
 
yór
 = (uL⁄g)
±m
->
tm_yór
;

323 i‡(
yór
>1980)

324 
yór
-=1980;

325 i‡(
yór
>80)

326 
yór
-=80;

328 (
uL⁄g
Ë(((
±m
->
tm_mday
Ë+ (32 * (±m->
tm_m⁄
+1)Ë+ (512 * 
yór
)) << 16) |

329 ((
±m
->
tm_£c
/2Ë+ (32*Ötm->
tm_mö
Ë+ (2048 * (
uL⁄g
Ìtm->
tm_hour
));

330 
	}
}

335 
loˇl
 
zùloˇl_gëByã
 
OF
((

336 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

337 
voidpf
 
fûe°ªam
,

338 *
pi
));

340 
loˇl
 
	$zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,
pi
)

341 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

342 
voidpf
 
fûe°ªam
;

343 *
pi
;

345 
c
;

346 
îr
 = ()
	`ZREAD
(*
pzlib_fûefunc_def
,
fûe°ªam
,&
c
,1);

347 i‡(
îr
==1)

349 *
pi
 = ()
c
;

350  
ZIP_OK
;

354 i‡(
	`ZERROR
(*
pzlib_fûefunc_def
,
fûe°ªam
))

355  
ZIP_ERRNO
;

357  
ZIP_EOF
;

359 
	}
}

365 
loˇl
 
zùloˇl_gëSh‹t
 
OF
((

366 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

367 
voidpf
 
fûe°ªam
,

368 
uL⁄g
 *
pX
));

370 
loˇl
 
	$zùloˇl_gëSh‹t
 (
pzlib_fûefunc_def
,
fûe°ªam
,
pX
)

371 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

372 
voidpf
 
fûe°ªam
;

373 
uL⁄g
 *
pX
;

375 
uL⁄g
 
x
 ;

376 
i
;

377 
îr
;

379 
îr
 = 
	`zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

380 
x
 = (
uL⁄g
)
i
;

382 i‡(
îr
==
ZIP_OK
)

383 
îr
 = 
	`zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

384 
x
 +((
uL⁄g
)
i
)<<8;

386 i‡(
îr
==
ZIP_OK
)

387 *
pX
 = 
x
;

389 *
pX
 = 0;

390  
îr
;

391 
	}
}

393 
loˇl
 
zùloˇl_gëL⁄g
 
OF
((

394 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

395 
voidpf
 
fûe°ªam
,

396 
uL⁄g
 *
pX
));

398 
loˇl
 
	$zùloˇl_gëL⁄g
 (
pzlib_fûefunc_def
,
fûe°ªam
,
pX
)

399 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

400 
voidpf
 
fûe°ªam
;

401 
uL⁄g
 *
pX
;

403 
uL⁄g
 
x
 ;

404 
i
;

405 
îr
;

407 
îr
 = 
	`zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

408 
x
 = (
uL⁄g
)
i
;

410 i‡(
îr
==
ZIP_OK
)

411 
îr
 = 
	`zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

412 
x
 +((
uL⁄g
)
i
)<<8;

414 i‡(
îr
==
ZIP_OK
)

415 
îr
 = 
	`zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

416 
x
 +((
uL⁄g
)
i
)<<16;

418 i‡(
îr
==
ZIP_OK
)

419 
îr
 = 
	`zùloˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

420 
x
 +((
uL⁄g
)
i
)<<24;

422 i‡(
îr
==
ZIP_OK
)

423 *
pX
 = 
x
;

425 *
pX
 = 0;

426  
îr
;

427 
	}
}

429 #i‚de‡
BUFREADCOMMENT


430 
	#BUFREADCOMMENT
 (0x400)

	)

436 
loˇl
 
uL⁄g
 
zùloˇl_SórchCíåÆDú
 
OF
((

437 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
,

438 
voidpf
 
fûe°ªam
));

440 
loˇl
 
uL⁄g
 
	$zùloˇl_SórchCíåÆDú
(
pzlib_fûefunc_def
,
fûe°ªam
)

441 c⁄° 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

442 
voidpf
 
fûe°ªam
;

444 * 
buf
;

445 
uL⁄g
 
uSizeFûe
;

446 
uL⁄g
 
uBackRód
;

447 
uL⁄g
 
uMaxBack
=0xffff;

448 
uL⁄g
 
uPosFound
=0;

450 i‡(
	`ZSEEK
(*
pzlib_fûefunc_def
,
fûe°ªam
,0,
ZLIB_FILEFUNC_SEEK_END
) != 0)

454 
uSizeFûe
 = 
	`ZTELL
(*
pzlib_fûefunc_def
,
fûe°ªam
);

456 i‡(
uMaxBack
>
uSizeFûe
)

457 
uMaxBack
 = 
uSizeFûe
;

459 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

460 i‡(
buf
==
NULL
)

463 
uBackRód
 = 4;

464 
uBackRód
<
uMaxBack
)

466 
uL⁄g
 
uRódSize
,
uRódPos
 ;

467 
i
;

468 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

469 
uBackRód
 = 
uMaxBack
;

471 
uBackRód
+=
BUFREADCOMMENT
;

472 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

474 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

475 (
BUFREADCOMMENT
+4Ë: (
uSizeFûe
-
uRódPos
);

476 i‡(
	`ZSEEK
(*
pzlib_fûefunc_def
,
fûe°ªam
,
uRódPos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

479 i‡(
	`ZREAD
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
uRódSize
)!=uReadSize)

482 
i
=()
uRódSize
-3; (i--)>0;)

483 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

484 ((*(
buf
+
i
+2))==0x05) && ((*(buf+i+3))==0x06))

486 
uPosFound
 = 
uRódPos
+
i
;

490 i‡(
uPosFound
!=0)

493 
	`TRYFREE
(
buf
);

494  
uPosFound
;

495 
	}
}

499 
zùFûe
 
ZEXPORT
 
	$zùO≥n2
 (
∑th«me
, 
≠≥nd
, 
globÆcommít
, 
pzlib_fûefunc_def
)

500 c⁄° *
∑th«me
;

501 
≠≥nd
;

502 
zùch¨pc
* 
globÆcommít
;

503 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

505 
zù_öã∫Æ
 
ziöô
;

506 
zù_öã∫Æ
* 
zi
;

507 
îr
=
ZIP_OK
;

510 i‡(
pzlib_fûefunc_def
==
NULL
)

511 
	`fûl_f›í_fûefunc
(&
ziöô
.
z_fûefunc
);

513 
ziöô
.
z_fûefunc
 = *
pzlib_fûefunc_def
;

515 
ziöô
.
fûe°ªam
 = (*(ziöô.
z_fûefunc
.
z›í_fûe
))

516 (
ziöô
.
z_fûefunc
.
›aque
,

517 
∑th«me
,

518 (
≠≥nd
 =
APPEND_STATUS_CREATE
) ?

519 (
ZLIB_FILEFUNC_MODE_READ
 | 
ZLIB_FILEFUNC_MODE_WRITE
 | 
ZLIB_FILEFUNC_MODE_CREATE
) :

520 (
ZLIB_FILEFUNC_MODE_READ
 | 
ZLIB_FILEFUNC_MODE_WRITE
 | 
ZLIB_FILEFUNC_MODE_EXISTING
));

522 i‡(
ziöô
.
fûe°ªam
 =
NULL
)

523  
NULL
;

524 
ziöô
.
begö_pos
 = 
	`ZTELL
(ziöô.
z_fûefunc
,ziöô.
fûe°ªam
);

525 
ziöô
.
ö_›íed_fûe_özù
 = 0;

526 
ziöô
.
ci
.
°ªam_öôüli£d
 = 0;

527 
ziöô
.
numbî_íåy
 = 0;

528 
ziöô
.
add_posôi⁄_whí_wrôtög_off£t
 = 0;

529 
	`öô_lökedli°
(&(
ziöô
.
˚¡øl_dú
));

532 
zi
 = (
zù_öã∫Æ
*)
	`ALLOC
((zip_internal));

533 i‡(
zi
==
NULL
)

535 
	`ZCLOSE
(
ziöô
.
z_fûefunc
,ziöô.
fûe°ªam
);

536  
NULL
;

540 #i‚de‡
NO_ADDFILEINEXISTINGZIP


541 
ziöô
.
globÆcommít
 = 
NULL
;

542 i‡(
≠≥nd
 =
APPEND_STATUS_ADDINZIP
)

544 
uL⁄g
 
byã_bef‹e_the_zùfûe
;

546 
uL⁄g
 
size_˚¡øl_dú
;

547 
uL⁄g
 
off£t_˚¡øl_dú
;

548 
uL⁄g
 
˚¡øl_pos
,
uL
;

550 
uL⁄g
 
numbî_disk
;

552 
uL⁄g
 
numbî_disk_wôh_CD
;

554 
uL⁄g
 
numbî_íåy
;

555 
uL⁄g
 
numbî_íåy_CD
;

558 
uL⁄g
 
size_commít
;

560 
˚¡øl_pos
 = 
	`zùloˇl_SórchCíåÆDú
(&
ziöô
.
z_fûefunc
,ziöô.
fûe°ªam
);

561 i‡(
˚¡øl_pos
==0)

562 
îr
=
ZIP_ERRNO
;

564 i‡(
	`ZSEEK
(
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,

565 
˚¡øl_pos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

566 
îr
=
ZIP_ERRNO
;

569 i‡(
	`zùloˇl_gëL⁄g
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
uL
)!=
ZIP_OK
)

570 
îr
=
ZIP_ERRNO
;

573 i‡(
	`zùloˇl_gëSh‹t
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
numbî_disk
)!=
ZIP_OK
)

574 
îr
=
ZIP_ERRNO
;

577 i‡(
	`zùloˇl_gëSh‹t
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
numbî_disk_wôh_CD
)!=
ZIP_OK
)

578 
îr
=
ZIP_ERRNO
;

581 i‡(
	`zùloˇl_gëSh‹t
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
numbî_íåy
)!=
ZIP_OK
)

582 
îr
=
ZIP_ERRNO
;

585 i‡(
	`zùloˇl_gëSh‹t
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
numbî_íåy_CD
)!=
ZIP_OK
)

586 
îr
=
ZIP_ERRNO
;

588 i‡((
numbî_íåy_CD
!=
numbî_íåy
) ||

589 (
numbî_disk_wôh_CD
!=0) ||

590 (
numbî_disk
!=0))

591 
îr
=
ZIP_BADZIPFILE
;

594 i‡(
	`zùloˇl_gëL⁄g
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
size_˚¡øl_dú
)!=
ZIP_OK
)

595 
îr
=
ZIP_ERRNO
;

599 i‡(
	`zùloˇl_gëL⁄g
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
off£t_˚¡øl_dú
)!=
ZIP_OK
)

600 
îr
=
ZIP_ERRNO
;

603 i‡(
	`zùloˇl_gëSh‹t
(&
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,&
size_commít
)!=
ZIP_OK
)

604 
îr
=
ZIP_ERRNO
;

606 i‡((
˚¡øl_pos
<
off£t_˚¡øl_dú
+
size_˚¡øl_dú
) &&

607 (
îr
==
ZIP_OK
))

608 
îr
=
ZIP_BADZIPFILE
;

610 i‡(
îr
!=
ZIP_OK
)

612 
	`ZCLOSE
(
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
);

613  
NULL
;

616 i‡(
size_commít
>0)

618 
ziöô
.
globÆcommít
 = 
	`ALLOC
(
size_commít
+1);

619 i‡(
ziöô
.
globÆcommít
)

621 
size_commít
 = 
	`ZREAD
(
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,ziöô.
globÆcommít
,size_comment);

622 
ziöô
.
globÆcommít
[
size_commít
]=0;

626 
byã_bef‹e_the_zùfûe
 = 
˚¡øl_pos
 -

627 (
off£t_˚¡øl_dú
+
size_˚¡øl_dú
);

628 
ziöô
.
add_posôi⁄_whí_wrôtög_off£t
 = 
byã_bef‹e_the_zùfûe
 ;

631 
uL⁄g
 
size_˚¡øl_dú_to_ªad
 = 
size_˚¡øl_dú
;

632 
size_t
 
buf_size
 = 
SIZEDATA_INDATABLOCK
;

633 * 
buf_ªad
 = (*)
	`ALLOC
(
buf_size
);

634 i‡(
	`ZSEEK
(
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,

635 
off£t_˚¡øl_dú
 + 
byã_bef‹e_the_zùfûe
,

636 
ZLIB_FILEFUNC_SEEK_SET
) != 0)

637 
îr
=
ZIP_ERRNO
;

639 (
size_˚¡øl_dú_to_ªad
>0Ë&& (
îr
==
ZIP_OK
))

641 
uL⁄g
 
ªad_this
 = 
SIZEDATA_INDATABLOCK
;

642 i‡(
ªad_this
 > 
size_˚¡øl_dú_to_ªad
)

643 
ªad_this
 = 
size_˚¡øl_dú_to_ªad
;

644 i‡(
	`ZREAD
(
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,
buf_ªad
,
ªad_this
) !=Ñead_this)

645 
îr
=
ZIP_ERRNO
;

647 i‡(
îr
==
ZIP_OK
)

648 
îr
 = 
	`add_d©a_ö_d©ablock
(&
ziöô
.
˚¡øl_dú
,
buf_ªad
,

649 (
uL⁄g
)
ªad_this
);

650 
size_˚¡øl_dú_to_ªad
-=
ªad_this
;

652 
	`TRYFREE
(
buf_ªad
);

654 
ziöô
.
begö_pos
 = 
byã_bef‹e_the_zùfûe
;

655 
ziöô
.
numbî_íåy
 = 
numbî_íåy_CD
;

657 i‡(
	`ZSEEK
(
ziöô
.
z_fûefunc
, ziöô.
fûe°ªam
,

658 
off£t_˚¡øl_dú
+
byã_bef‹e_the_zùfûe
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

659 
îr
=
ZIP_ERRNO
;

660 
	}
}

662 i‡(
	gglobÆcommít
)

664 *
	gglobÆcommít
 = 
ziöô
.
globÆcommít
;

668 i‡(
	gîr
 !
ZIP_OK
)

670 #i‚de‡
NO_ADDFILEINEXISTINGZIP


671 
TRYFREE
(
ziöô
.
globÆcommít
);

673 
TRYFREE
(
zi
);

674  
	gNULL
;

678 *
	gzi
 = 
ziöô
;

679  (
	gzùFûe
)
	gzi
;

683 
zùFûe
 
ZEXPORT
 
	$zùO≥n
 (
∑th«me
, 
≠≥nd
)

684 c⁄° *
∑th«me
;

685 
≠≥nd
;

687  
	`zùO≥n2
(
∑th«me
,
≠≥nd
,
NULL
,NULL);

688 
	}
}

690 
ZEXPORT
 
	$zùO≥nNewFûeInZù3
 (
fûe
, 
fûíame
, 
zùfi
,

691 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

692 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

693 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

694 
wödowBôs
, 
memLevñ
, 
°øãgy
,

695 
∑ssw‹d
, 
¸cF‹Cry±ög
)

696 
zùFûe
 
fûe
;

697 c⁄° * 
fûíame
;

698 c⁄° 
zù_fûeöfo
* 
zùfi
;

699 c⁄° * 
exåafõld_loˇl
;

700 
uI¡
 
size_exåafõld_loˇl
;

701 c⁄° * 
exåafõld_globÆ
;

702 
uI¡
 
size_exåafõld_globÆ
;

703 c⁄° * 
commít
;

704 
mëhod
;

705 
Àvñ
;

706 
øw
;

707 
wödowBôs
;

708 
memLevñ
;

709 
°øãgy
;

710 c⁄° * 
∑ssw‹d
;

711 
uL⁄g
 
¸cF‹Cry±ög
;

713 
zù_öã∫Æ
* 
zi
;

714 
uI¡
 
size_fûíame
;

715 
uI¡
 
size_commít
;

716 
uI¡
 
i
;

717 
îr
 = 
ZIP_OK
;

719 #ifde‡
NOCRYPT


720 i‡(
∑ssw‹d
 !
NULL
)

721  
ZIP_PARAMERROR
;

724 i‡(
fûe
 =
NULL
)

725  
ZIP_PARAMERROR
;

726 i‡((
mëhod
!=0Ë&& (mëhod!=
Z_DEFLATED
))

727  
ZIP_PARAMERROR
;

729 
zi
 = (
zù_öã∫Æ
*)
fûe
;

731 i‡(
zi
->
ö_›íed_fûe_özù
 == 1)

733 
îr
 = 
	`zùClo£FûeInZù
 (
fûe
);

734 i‡(
îr
 !
ZIP_OK
)

735  
îr
;

739 i‡(
fûíame
==
NULL
)

740 
fûíame
="-";

742 i‡(
commít
==
NULL
)

743 
size_commít
 = 0;

745 
size_commít
 = (
uI¡
)
	`°æí
(
commít
);

747 
size_fûíame
 = (
uI¡
)
	`°æí
(
fûíame
);

749 i‡(
zùfi
 =
NULL
)

750 
zi
->
ci
.
dosD©e
 = 0;

753 i‡(
zùfi
->
dosD©e
 != 0)

754 
zi
->
ci
.
dosD©e
 = 
zùfi
->dosDate;

755 
zi
->
ci
.
dosD©e
 = 
	`zùloˇl_TmzD©eToDosD©e
(&
zùfi
->
tmz_d©e
,zipfi->dosDate);

758 
zi
->
ci
.
Êag
 = 0;

759 i‡((
Àvñ
==8) || (level==9))

760 
zi
->
ci
.
Êag
 |= 2;

761 i‡((
Àvñ
==2))

762 
zi
->
ci
.
Êag
 |= 4;

763 i‡((
Àvñ
==1))

764 
zi
->
ci
.
Êag
 |= 6;

765 i‡(
∑ssw‹d
 !
NULL
)

766 
zi
->
ci
.
Êag
 |= 1;

768 
zi
->
ci
.
¸c32
 = 0;

769 
zi
->
ci
.
mëhod
 = method;

770 
zi
->
ci
.
í¸y±
 = 0;

771 
zi
->
ci
.
°ªam_öôüli£d
 = 0;

772 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 = 0;

773 
zi
->
ci
.
øw
 =Ñaw;

774 
zi
->
ci
.
pos_loˇl_hódî
 = 
	`ZTELL
(zi->
z_fûefunc
,zi->
fûe°ªam
) ;

775 
zi
->
ci
.
size_˚¡ølhódî
 = 
SIZECENTRALHEADER
 + 
size_fûíame
 +

776 
size_exåafõld_globÆ
 + 
size_commít
;

777 
zi
->
ci
.
˚¡øl_hódî
 = (*)
	`ALLOC
((
uI¡
)zi->ci.
size_˚¡ølhódî
);

779 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
,(
uL⁄g
)
CENTRALHEADERMAGIC
,4);

781 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+4,(
uL⁄g
)
VERSIONMADEBY
,2);

782 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+6,(
uL⁄g
)20,2);

783 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+8,(
uL⁄g
)zi->ci.
Êag
,2);

784 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+10,(
uL⁄g
)zi->ci.
mëhod
,2);

785 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+12,(
uL⁄g
)zi->ci.
dosD©e
,4);

786 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+16,(
uL⁄g
)0,4);

787 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+20,(
uL⁄g
)0,4);

788 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+24,(
uL⁄g
)0,4);

789 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+28,(
uL⁄g
)
size_fûíame
,2);

790 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+30,(
uL⁄g
)
size_exåafõld_globÆ
,2);

791 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+32,(
uL⁄g
)
size_commít
,2);

792 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+34,(
uL⁄g
)0,2);

794 i‡(
zùfi
==
NULL
)

795 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+36,(
uL⁄g
)0,2);

797 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+36,(
uL⁄g
)
zùfi
->
öã∫Æ_Á
,2);

799 i‡(
zùfi
==
NULL
)

800 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+38,(
uL⁄g
)0,4);

802 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+38,(
uL⁄g
)
zùfi
->
exã∫Æ_Á
,4);

804 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+42,(
uL⁄g
)zi->ci.
pos_loˇl_hódî
- zi->
add_posôi⁄_whí_wrôtög_off£t
,4);

806 
i
=0;i<
size_fûíame
;i++)

807 *(
zi
->
ci
.
˚¡øl_hódî
+
SIZECENTRALHEADER
+
i
Ë*(
fûíame
+i);

809 
i
=0;i<
size_exåafõld_globÆ
;i++)

810 *(
zi
->
ci
.
˚¡øl_hódî
+
SIZECENTRALHEADER
+
size_fûíame
+
i
) =

811 *(((c⁄° *)
exåafõld_globÆ
)+
i
);

813 
i
=0;i<
size_commít
;i++)

814 *(
zi
->
ci
.
˚¡øl_hódî
+
SIZECENTRALHEADER
+
size_fûíame
+

815 
size_exåafõld_globÆ
+
i
Ë*(
commít
+i);

816 i‡(
zi
->
ci
.
˚¡øl_hódî
 =
NULL
)

817  
ZIP_INTERNALERROR
;

821 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
LOCALHEADERMAGIC
,4);

823 i‡(
îr
==
ZIP_OK
)

824 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)20,2);

825 i‡(
îr
==
ZIP_OK
)

826 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
ci
.
Êag
,2);

828 i‡(
îr
==
ZIP_OK
)

829 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
ci
.
mëhod
,2);

831 i‡(
îr
==
ZIP_OK
)

832 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
ci
.
dosD©e
,4);

834 i‡(
îr
==
ZIP_OK
)

835 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

836 i‡(
îr
==
ZIP_OK
)

837 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

838 i‡(
îr
==
ZIP_OK
)

839 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

841 i‡(
îr
==
ZIP_OK
)

842 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_fûíame
,2);

844 i‡(
îr
==
ZIP_OK
)

845 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_exåafõld_loˇl
,2);

847 i‡((
îr
==
ZIP_OK
Ë&& (
size_fûíame
>0))

848 i‡(
	`ZWRITE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,
fûíame
,
size_fûíame
)!=size_filename)

849 
îr
 = 
ZIP_ERRNO
;

851 i‡((
îr
==
ZIP_OK
Ë&& (
size_exåafõld_loˇl
>0))

852 i‡(
	`ZWRITE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,
exåafõld_loˇl
,
size_exåafõld_loˇl
)

853 !=
size_exåafõld_loˇl
)

854 
îr
 = 
ZIP_ERRNO
;

856 
zi
->
ci
.
°ªam
.
avaû_ö
 = (
uI¡
)0;

857 
zi
->
ci
.
°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

858 
zi
->
ci
.
°ªam
.
√xt_out
 = zi->ci.
buf„ªd_d©a
;

859 
zi
->
ci
.
°ªam
.
tŸÆ_ö
 = 0;

860 
zi
->
ci
.
°ªam
.
tŸÆ_out
 = 0;

862 i‡((
îr
==
ZIP_OK
Ë&& (
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

864 
zi
->
ci
.
°ªam
.
zÆloc
 = (
Æloc_func
)0;

865 
zi
->
ci
.
°ªam
.
z‰ì
 = (
‰ì_func
)0;

866 
zi
->
ci
.
°ªam
.
›aque
 = (
voidpf
)0;

868 i‡(
wödowBôs
>0)

869 
wödowBôs
 = -windowBits;

871 
îr
 = 
	`deÊ©eInô2
(&
zi
->
ci
.
°ªam
, 
Àvñ
,

872 
Z_DEFLATED
, 
wödowBôs
, 
memLevñ
, 
°øãgy
);

874 i‡(
îr
==
Z_OK
)

875 
zi
->
ci
.
°ªam_öôüli£d
 = 1;

877 #i‚de‡
NOCRYPT


878 
zi
->
ci
.
¸y±_hódî_size
 = 0;

879 i‡((
îr
==
Z_OK
Ë&& (
∑ssw‹d
 !
NULL
))

881 
bufHód
[
RAND_HEAD_LEN
];

882 
sizeHód
;

883 
zi
->
ci
.
í¸y±
 = 1;

884 
zi
->
ci
.
p¸c_32_èb
 = 
	`gë_¸c_èbÀ
();

887 
sizeHód
=
	`¸y±hód
(
∑ssw‹d
,
bufHód
,
RAND_HEAD_LEN
,
zi
->
ci
.
keys
,zi->ci.
p¸c_32_èb
,
¸cF‹Cry±ög
);

888 
zi
->
ci
.
¸y±_hódî_size
 = 
sizeHód
;

890 i‡(
	`ZWRITE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,
bufHód
,
sizeHód
) != sizeHead)

891 
îr
 = 
ZIP_ERRNO
;

895 i‡(
îr
==
Z_OK
)

896 
zi
->
ö_›íed_fûe_özù
 = 1;

897  
îr
;

898 
	}
}

900 
ZEXPORT
 
	$zùO≥nNewFûeInZù2
(
fûe
, 
fûíame
, 
zùfi
,

901 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

902 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

903 
commít
, 
mëhod
, 
Àvñ
, 
øw
)

904 
zùFûe
 
fûe
;

905 c⁄° * 
fûíame
;

906 c⁄° 
zù_fûeöfo
* 
zùfi
;

907 c⁄° * 
exåafõld_loˇl
;

908 
uI¡
 
size_exåafõld_loˇl
;

909 c⁄° * 
exåafõld_globÆ
;

910 
uI¡
 
size_exåafõld_globÆ
;

911 c⁄° * 
commít
;

912 
mëhod
;

913 
Àvñ
;

914 
øw
;

916  
	`zùO≥nNewFûeInZù3
 (
fûe
, 
fûíame
, 
zùfi
,

917 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

918 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

919 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

920 -
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
,

921 
NULL
, 0);

922 
	}
}

924 
ZEXPORT
 
	$zùO≥nNewFûeInZù
 (
fûe
, 
fûíame
, 
zùfi
,

925 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

926 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

927 
commít
, 
mëhod
, 
Àvñ
)

928 
zùFûe
 
fûe
;

929 c⁄° * 
fûíame
;

930 c⁄° 
zù_fûeöfo
* 
zùfi
;

931 c⁄° * 
exåafõld_loˇl
;

932 
uI¡
 
size_exåafõld_loˇl
;

933 c⁄° * 
exåafõld_globÆ
;

934 
uI¡
 
size_exåafõld_globÆ
;

935 c⁄° * 
commít
;

936 
mëhod
;

937 
Àvñ
;

939  
	`zùO≥nNewFûeInZù2
 (
fûe
, 
fûíame
, 
zùfi
,

940 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

941 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

942 
commít
, 
mëhod
, 
Àvñ
, 0);

943 
	}
}

945 
loˇl
 
	$zùFlushWrôeBuf„r
(
zi
)

946 
zù_öã∫Æ
* 
zi
;

948 
îr
=
ZIP_OK
;

950 i‡(
zi
->
ci
.
í¸y±
 != 0)

952 #i‚de‡
NOCRYPT


953 
uI¡
 
i
;

954 
t
;

955 
i
=0;i<
zi
->
ci
.
pos_ö_buf„ªd_d©a
;i++)

956 
zi
->
ci
.
buf„ªd_d©a
[
i
] = 
	`zícode
(zi->ci.
keys
, zi->ci.
p¸c_32_èb
,

957 
zi
->
ci
.
buf„ªd_d©a
[
i
],
t
);

960 i‡(
	`ZWRITE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,zi->
ci
.
buf„ªd_d©a
,zi->ci.
pos_ö_buf„ªd_d©a
)

961 !=
zi
->
ci
.
pos_ö_buf„ªd_d©a
)

962 
îr
 = 
ZIP_ERRNO
;

963 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 = 0;

964  
îr
;

965 
	}
}

967 
ZEXPORT
 
	$zùWrôeInFûeInZù
 (
fûe
, 
buf
, 
Àn
)

968 
zùFûe
 
fûe
;

969 c⁄° * 
buf
;

970 
Àn
;

972 
zù_öã∫Æ
* 
zi
;

973 
îr
=
ZIP_OK
;

975 i‡(
fûe
 =
NULL
)

976  
ZIP_PARAMERROR
;

977 
zi
 = (
zù_öã∫Æ
*)
fûe
;

979 i‡(
zi
->
ö_›íed_fûe_özù
 == 0)

980  
ZIP_PARAMERROR
;

982 
zi
->
ci
.
°ªam
.
√xt_ö
 = (*)
buf
;

983 
zi
->
ci
.
°ªam
.
avaû_ö
 = 
Àn
;

984 
zi
->
ci
.
¸c32
 = 
	`¸c32
(zi->ci.¸c32,
buf
,
Àn
);

986 (
îr
==
ZIP_OK
Ë&& (
zi
->
ci
.
°ªam
.
avaû_ö
>0))

988 i‡(
zi
->
ci
.
°ªam
.
avaû_out
 == 0)

990 i‡(
	`zùFlushWrôeBuf„r
(
zi
Ë=
ZIP_ERRNO
)

991 
îr
 = 
ZIP_ERRNO
;

992 
zi
->
ci
.
°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

993 
zi
->
ci
.
°ªam
.
√xt_out
 = zi->ci.
buf„ªd_d©a
;

997 if(
îr
 !
ZIP_OK
)

1000 i‡((
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1002 
uL⁄g
 
uTŸÆOutBef‹e
 = 
zi
->
ci
.
°ªam
.
tŸÆ_out
;

1003 
îr
=
	`deÊ©e
(&
zi
->
ci
.
°ªam
, 
Z_NO_FLUSH
);

1004 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +(
uI¡
)(zi->ci.
°ªam
.
tŸÆ_out
 - 
uTŸÆOutBef‹e
) ;

1009 
uI¡
 
c›y_this
,
i
;

1010 i‡(
zi
->
ci
.
°ªam
.
avaû_ö
 < zi->ci.°ªam.
avaû_out
)

1011 
c›y_this
 = 
zi
->
ci
.
°ªam
.
avaû_ö
;

1013 
c›y_this
 = 
zi
->
ci
.
°ªam
.
avaû_out
;

1014 
i
=0;i<
c›y_this
;i++)

1015 *(((*)
zi
->
ci
.
°ªam
.
√xt_out
)+
i
) =

1016 *(((c⁄° *)
zi
->
ci
.
°ªam
.
√xt_ö
)+
i
);

1018 
zi
->
ci
.
°ªam
.
avaû_ö
 -
c›y_this
;

1019 
zi
->
ci
.
°ªam
.
avaû_out
-
c›y_this
;

1020 
zi
->
ci
.
°ªam
.
√xt_ö
+
c›y_this
;

1021 
zi
->
ci
.
°ªam
.
√xt_out
+
c›y_this
;

1022 
zi
->
ci
.
°ªam
.
tŸÆ_ö
+
c›y_this
;

1023 
zi
->
ci
.
°ªam
.
tŸÆ_out
+
c›y_this
;

1024 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +
c›y_this
;

1028  
îr
;

1029 
	}
}

1031 
ZEXPORT
 
	$zùClo£FûeInZùRaw
 (
fûe
, 
uncom¥es£d_size
, 
¸c32
)

1032 
zùFûe
 
fûe
;

1033 
uL⁄g
 
uncom¥es£d_size
;

1034 
uL⁄g
 
¸c32
;

1036 
zù_öã∫Æ
* 
zi
;

1037 
uL⁄g
 
com¥es£d_size
;

1038 
îr
=
ZIP_OK
;

1039 i‡(
fûe
 =
NULL
)

1040  
ZIP_PARAMERROR
;

1041 
zi
 = (
zù_öã∫Æ
*)
fûe
;

1043 i‡(
zi
->
ö_›íed_fûe_özù
 == 0)

1044  
ZIP_PARAMERROR
;

1045 
zi
->
ci
.
°ªam
.
avaû_ö
 = 0;

1047 i‡((
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1048 
îr
==
ZIP_OK
)

1050 
uL⁄g
 
uTŸÆOutBef‹e
;

1051 i‡(
zi
->
ci
.
°ªam
.
avaû_out
 == 0)

1053 i‡(
	`zùFlushWrôeBuf„r
(
zi
Ë=
ZIP_ERRNO
)

1054 
îr
 = 
ZIP_ERRNO
;

1055 
zi
->
ci
.
°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1056 
zi
->
ci
.
°ªam
.
√xt_out
 = zi->ci.
buf„ªd_d©a
;

1058 
uTŸÆOutBef‹e
 = 
zi
->
ci
.
°ªam
.
tŸÆ_out
;

1059 
îr
=
	`deÊ©e
(&
zi
->
ci
.
°ªam
, 
Z_FINISH
);

1060 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +(
uI¡
)(zi->ci.
°ªam
.
tŸÆ_out
 - 
uTŸÆOutBef‹e
) ;

1063 i‡(
îr
==
Z_STREAM_END
)

1064 
îr
=
ZIP_OK
;

1066 i‡((
zi
->
ci
.
pos_ö_buf„ªd_d©a
>0Ë&& (
îr
==
ZIP_OK
))

1067 i‡(
	`zùFlushWrôeBuf„r
(
zi
)==
ZIP_ERRNO
)

1068 
îr
 = 
ZIP_ERRNO
;

1070 i‡((
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1072 
îr
=
	`deÊ©eEnd
(&
zi
->
ci
.
°ªam
);

1073 
zi
->
ci
.
°ªam_öôüli£d
 = 0;

1076 i‡(!
zi
->
ci
.
øw
)

1078 
¸c32
 = (
uL⁄g
)
zi
->
ci
.crc32;

1079 
uncom¥es£d_size
 = (
uL⁄g
)
zi
->
ci
.
°ªam
.
tŸÆ_ö
;

1081 
com¥es£d_size
 = (
uL⁄g
)
zi
->
ci
.
°ªam
.
tŸÆ_out
;

1082 #i‚de‡
NOCRYPT


1083 
com¥es£d_size
 +
zi
->
ci
.
¸y±_hódî_size
;

1086 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+16,
¸c32
,4);

1087 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+20,

1088 
com¥es£d_size
,4);

1089 i‡(
zi
->
ci
.
°ªam
.
d©a_ty≥
 =
Z_ASCII
)

1090 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+36,(
uL⁄g
)
Z_ASCII
,2);

1091 
	`zùloˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+24,

1092 
uncom¥es£d_size
,4);

1094 i‡(
îr
==
ZIP_OK
)

1095 
îr
 = 
	`add_d©a_ö_d©ablock
(&
zi
->
˚¡øl_dú
,zi->
ci
.
˚¡øl_hódî
,

1096 (
uL⁄g
)
zi
->
ci
.
size_˚¡ølhódî
);

1097 
	`‰ì
(
zi
->
ci
.
˚¡øl_hódî
);

1099 i‡(
îr
==
ZIP_OK
)

1101 
cur_pos_özù
 = 
	`ZTELL
(
zi
->
z_fûefunc
,zi->
fûe°ªam
);

1102 i‡(
	`ZSEEK
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,

1103 
zi
->
ci
.
pos_loˇl_hódî
 + 14,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1104 
îr
 = 
ZIP_ERRNO
;

1106 i‡(
îr
==
ZIP_OK
)

1107 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,
¸c32
,4);

1109 i‡(
îr
==
ZIP_OK
)

1110 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,
com¥es£d_size
,4);

1112 i‡(
îr
==
ZIP_OK
)

1113 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,
uncom¥es£d_size
,4);

1115 i‡(
	`ZSEEK
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,

1116 
cur_pos_özù
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1117 
îr
 = 
ZIP_ERRNO
;

1120 
zi
->
numbî_íåy
 ++;

1121 
zi
->
ö_›íed_fûe_özù
 = 0;

1123  
îr
;

1124 
	}
}

1126 
ZEXPORT
 
	$zùClo£FûeInZù
 (
fûe
)

1127 
zùFûe
 
fûe
;

1129  
	`zùClo£FûeInZùRaw
 (
fûe
,0,0);

1130 
	}
}

1132 
ZEXPORT
 
	$zùClo£
 (
fûe
, 
globÆ_commít
)

1133 
zùFûe
 
fûe
;

1134 c⁄° * 
globÆ_commít
;

1136 
zù_öã∫Æ
* 
zi
;

1137 
îr
 = 0;

1138 
uL⁄g
 
size_˚¡øldú
 = 0;

1139 
uL⁄g
 
˚¡øldú_pos_özù
 ;

1140 
uI¡
 
size_globÆ_commít
;

1141 i‡(
fûe
 =
NULL
)

1142  
ZIP_PARAMERROR
;

1143 
zi
 = (
zù_öã∫Æ
*)
fûe
;

1145 i‡(
zi
->
ö_›íed_fûe_özù
 == 1)

1147 
îr
 = 
	`zùClo£FûeInZù
 (
fûe
);

1150 #i‚de‡
NO_ADDFILEINEXISTINGZIP


1151 i‡(
globÆ_commít
==
NULL
)

1152 
globÆ_commít
 = 
zi
->
globÆcommít
;

1154 i‡(
globÆ_commít
==
NULL
)

1155 
size_globÆ_commít
 = 0;

1157 
size_globÆ_commít
 = (
uI¡
)
	`°æí
(
globÆ_commít
);

1159 
˚¡øldú_pos_özù
 = 
	`ZTELL
(
zi
->
z_fûefunc
,zi->
fûe°ªam
);

1160 i‡(
îr
==
ZIP_OK
)

1162 
lökedli°_d©ablock_öã∫Æ
* 
ldi
 = 
zi
->
˚¡øl_dú
.
fú°_block
 ;

1163 
ldi
!=
NULL
)

1165 i‡((
îr
==
ZIP_OK
Ë&& (
ldi
->
fûÀd_ö_this_block
>0))

1166 i‡(
	`ZWRITE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,

1167 
ldi
->
d©a
,ldi->
fûÀd_ö_this_block
)

1168 !=
ldi
->
fûÀd_ö_this_block
 )

1169 
îr
 = 
ZIP_ERRNO
;

1171 
size_˚¡øldú
 +
ldi
->
fûÀd_ö_this_block
;

1172 
ldi
 =Üdi->
√xt_d©ablock
;

1175 
	`‰ì_d©ablock
(
zi
->
˚¡øl_dú
.
fú°_block
);

1177 i‡(
îr
==
ZIP_OK
)

1178 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
ENDHEADERMAGIC
,4);

1180 i‡(
îr
==
ZIP_OK
)

1181 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,2);

1183 i‡(
îr
==
ZIP_OK
)

1184 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,2);

1186 i‡(
îr
==
ZIP_OK
)

1187 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
numbî_íåy
,2);

1189 i‡(
îr
==
ZIP_OK
)

1190 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
numbî_íåy
,2);

1192 i‡(
îr
==
ZIP_OK
)

1193 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_˚¡øldú
,4);

1195 i‡(
îr
==
ZIP_OK
)

1197 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,

1198 (
uL⁄g
)(
˚¡øldú_pos_özù
 - 
zi
->
add_posôi⁄_whí_wrôtög_off£t
),4);

1200 i‡(
îr
==
ZIP_OK
)

1201 
îr
 = 
	`zùloˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_globÆ_commít
,2);

1203 i‡((
îr
==
ZIP_OK
Ë&& (
size_globÆ_commít
>0))

1204 i‡(
	`ZWRITE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,

1205 
globÆ_commít
,
size_globÆ_commít
) != size_global_comment)

1206 
îr
 = 
ZIP_ERRNO
;

1208 i‡(
	`ZCLOSE
(
zi
->
z_fûefunc
,zi->
fûe°ªam
) != 0)

1209 i‡(
îr
 =
ZIP_OK
)

1210 
îr
 = 
ZIP_ERRNO
;

1212 #i‚de‡
NO_ADDFILEINEXISTINGZIP


1213 
	`TRYFREE
(
zi
->
globÆcommít
);

1215 
	`TRYFREE
(
zi
);

1217  
îr
;

1218 
	}
}

	@zip.h

46 #i‚de‡
_zù_H


47 
	#_zù_H


	)

49 #ifde‡
__˝lu•lus


53 
	#NOCRYPT


	)

55 #i‚de‡
_ZLIB_H


56 
	~"zlib.h
"

59 #i‚de‡
_ZLIBIOAPI_H


60 
	~"iﬂpi.h
"

63 #i‡
deföed
(
STRICTZIP
Ë|| deföed(
STRICTZIPUNZIP
)

66 
	sTagzùFûe__
 { 
unu£d
; } 
	tzùFûe__
;

67 
zùFûe__
 *
	tzùFûe
;

69 
voidp
 
	tzùFûe
;

72 
	#ZIP_OK
 (0)

	)

73 
	#ZIP_EOF
 (0)

	)

74 
	#ZIP_ERRNO
 (
Z_ERRNO
)

	)

75 
	#ZIP_PARAMERROR
 (-102)

	)

76 
	#ZIP_BADZIPFILE
 (-103)

	)

77 
	#ZIP_INTERNALERROR
 (-104)

	)

79 #i‚de‡
DEF_MEM_LEVEL


80 #i‡
MAX_MEM_LEVEL
 >= 8

81 
	#DEF_MEM_LEVEL
 8

	)

83 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

89 
	stm_zù_s


91 
uI¡
 
tm_£c
;

92 
uI¡
 
tm_mö
;

93 
uI¡
 
tm_hour
;

94 
uI¡
 
tm_mday
;

95 
uI¡
 
tm_m⁄
;

96 
uI¡
 
tm_yór
;

97 } 
	ttm_zù
;

101 
tm_zù
 
tmz_d©e
;

102 
uL⁄g
 
dosD©e
;

105 
uL⁄g
 
öã∫Æ_Á
;

106 
uL⁄g
 
exã∫Æ_Á
;

107 } 
	tzù_fûeöfo
;

109 c⁄° * 
	tzùch¨pc
;

112 
	#APPEND_STATUS_CREATE
 (0)

	)

113 
	#APPEND_STATUS_CREATEAFTER
 (1)

	)

114 
	#APPEND_STATUS_ADDINZIP
 (2)

	)

116 
zùFûe
 
ZEXPORT
 
zùO≥n
 
OF
((c⁄° *
∑th«me
, 
≠≥nd
));

136 
zùFûe
 
ZEXPORT
 
zùO≥n2
 
OF
((c⁄° *
∑th«me
,

137 
≠≥nd
,

138 
zùch¨pc
* 
globÆcommít
,

139 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

141 
ZEXPORT
 
zùO≥nNewFûeInZù
 
OF
((
zùFûe
 
fûe
,

142 c⁄° * 
fûíame
,

143 c⁄° 
zù_fûeöfo
* 
zùfi
,

144 c⁄° * 
exåafõld_loˇl
,

145 
uI¡
 
size_exåafõld_loˇl
,

146 c⁄° * 
exåafõld_globÆ
,

147 
uI¡
 
size_exåafõld_globÆ
,

148 c⁄° * 
commít
,

149 
mëhod
,

150 
Àvñ
));

165 
ZEXPORT
 
zùO≥nNewFûeInZù2
 
OF
((
zùFûe
 
fûe
,

166 c⁄° * 
fûíame
,

167 c⁄° 
zù_fûeöfo
* 
zùfi
,

168 c⁄° * 
exåafõld_loˇl
,

169 
uI¡
 
size_exåafõld_loˇl
,

170 c⁄° * 
exåafõld_globÆ
,

171 
uI¡
 
size_exåafõld_globÆ
,

172 c⁄° * 
commít
,

173 
mëhod
,

174 
Àvñ
,

175 
øw
));

181 
ZEXPORT
 
zùO≥nNewFûeInZù3
 
OF
((
zùFûe
 
fûe
,

182 c⁄° * 
fûíame
,

183 c⁄° 
zù_fûeöfo
* 
zùfi
,

184 c⁄° * 
exåafõld_loˇl
,

185 
uI¡
 
size_exåafõld_loˇl
,

186 c⁄° * 
exåafõld_globÆ
,

187 
uI¡
 
size_exåafõld_globÆ
,

188 c⁄° * 
commít
,

189 
mëhod
,

190 
Àvñ
,

191 
øw
,

192 
wödowBôs
,

193 
memLevñ
,

194 
°øãgy
,

195 c⁄° * 
∑ssw‹d
,

196 
uL⁄g
 
¸cF‹Cty±ög
));

206 
ZEXPORT
 
zùWrôeInFûeInZù
 
OF
((
zùFûe
 
fûe
,

207 c⁄° * 
buf
,

208 
Àn
));

213 
ZEXPORT
 
zùClo£FûeInZù
 
OF
((
zùFûe
 
fûe
));

218 
ZEXPORT
 
zùClo£FûeInZùRaw
 
OF
((
zùFûe
 
fûe
,

219 
uL⁄g
 
uncom¥es£d_size
,

220 
uL⁄g
 
¸c32
));

227 
ZEXPORT
 
zùClo£
 
OF
((
zùFûe
 
fûe
,

228 c⁄° * 
globÆ_commít
));

233 #ifde‡
__˝lu•lus


	@/usr/include/GL/gl.h

26 #i‚de‡
__gl_h_


27 
	#__gl_h_


	)

29 #i‡
deföed
(
USE_MGL_NAMESPACE
)

30 
	~"gl_m™gÀ.h
"

39 #i‡!
deföed
(
__SCITECH_SNAP__
)

41 #i‡
deföed
(
__BEOS__
)

42 
	~<°dlib.h
>

45 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
NeXT
Ë|| deföed(
NeXT_PDO
))

46 
	#OPENSTEP


	)

49 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

50 
	#__WIN32__


	)

53 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
))

54 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

55 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

56 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 
	#GLAPI
 

	)

61 
	#GLAPIENTRY
 
__°dˇŒ


	)

62 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

63 
	#GLAPI
 

	)

64 
	#GLAPIENTRY
 
__°dˇŒ


	)

65 #ñi‡
deföed
(
__GNUC__
Ë&& (__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303

66 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

67 
	#GLAPIENTRY


	)

70 #i‡(
deföed
(
__BEOS__
Ë&& deföed(
__POWERPC__
)Ë|| deföed(
__QUICKDRAW__
)

71 
	#PRAGMA_EXPORT_SUPPORTED
 1

	)

82 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

83 
	#WIN32_LEAN_AND_MEAN
 1

	)

84 
	~<wödows.h
>

87 #i‡
deföed
(
_WIN32
Ë&& !deföed(
_WINGDI_
Ë&& !deföed(
_GNU_H_WINDOWS32_DEFINES
) \

88 && !
deföed
(
OPENSTEP
Ë&& !deföed(
__CYGWIN__
Ë|| 
	$deföed
(
__MINGW32__
)

89 
	~<GL/meß_wgl.h
>

92 #i‡
	`deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


93 #¥agm®
imp‹t
 
⁄


96 #i‚de‡
GLAPI


97 
	#GLAPI
 

	)

100 #i‚de‡
GLAPIENTRY


101 
	#GLAPIENTRY


	)

104 #i‚de‡
APIENTRY


105 
	#APIENTRY
 
GLAPIENTRY


	)

109 #i‚de‡
APIENTRYP


110 
	#APIENTRYP
 
APIENTRY
 *

	)

113 #i‚de‡
GLAPIENTRYP


114 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

117 #ifde‡
CENTERLINE_CLPP


118 sig√d

	)

121 #i‡
	`deföed
(
PRAGMA_EXPORT_SUPPORTED
)

122 #¥agm®
exp‹t
 
⁄


132 #ifde‡
__˝lu•lus


138 
	#GL_VERSION_1_1
 1

	)

139 
	#GL_VERSION_1_2
 1

	)

140 
	#GL_VERSION_1_3
 1

	)

141 
	#GL_ARB_imagög
 1

	)

147 
	tGLíum
;

148 
	tGLboﬁón
;

149 
	tGLbôfõld
;

150 
	tGLvoid
;

151 sig√d 
	tGLbyã
;

152 
	tGLsh‹t
;

153 
	tGLöt
;

154 
	tGLubyã
;

155 
	tGLush‹t
;

156 
	tGLuöt
;

157 
	tGLsizei
;

158 
	tGLÊﬂt
;

159 
	tGL˛ampf
;

160 
	tGLdoubÀ
;

161 
	tGL˛ampd
;

170 
	#GL_FALSE
 0x0

	)

171 
	#GL_TRUE
 0x1

	)

174 
	#GL_BYTE
 0x1400

	)

175 
	#GL_UNSIGNED_BYTE
 0x1401

	)

176 
	#GL_SHORT
 0x1402

	)

177 
	#GL_UNSIGNED_SHORT
 0x1403

	)

178 
	#GL_INT
 0x1404

	)

179 
	#GL_UNSIGNED_INT
 0x1405

	)

180 
	#GL_FLOAT
 0x1406

	)

181 
	#GL_2_BYTES
 0x1407

	)

182 
	#GL_3_BYTES
 0x1408

	)

183 
	#GL_4_BYTES
 0x1409

	)

184 
	#GL_DOUBLE
 0x140A

	)

187 
	#GL_POINTS
 0x0000

	)

188 
	#GL_LINES
 0x0001

	)

189 
	#GL_LINE_LOOP
 0x0002

	)

190 
	#GL_LINE_STRIP
 0x0003

	)

191 
	#GL_TRIANGLES
 0x0004

	)

192 
	#GL_TRIANGLE_STRIP
 0x0005

	)

193 
	#GL_TRIANGLE_FAN
 0x0006

	)

194 
	#GL_QUADS
 0x0007

	)

195 
	#GL_QUAD_STRIP
 0x0008

	)

196 
	#GL_POLYGON
 0x0009

	)

199 
	#GL_VERTEX_ARRAY
 0x8074

	)

200 
	#GL_NORMAL_ARRAY
 0x8075

	)

201 
	#GL_COLOR_ARRAY
 0x8076

	)

202 
	#GL_INDEX_ARRAY
 0x8077

	)

203 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

204 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

205 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

206 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

207 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

208 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

209 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

210 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

211 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

212 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

213 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

214 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

215 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

216 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

217 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

218 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

219 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

220 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

221 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

222 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

223 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

224 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

225 
	#GL_V2F
 0x2A20

	)

226 
	#GL_V3F
 0x2A21

	)

227 
	#GL_C4UB_V2F
 0x2A22

	)

228 
	#GL_C4UB_V3F
 0x2A23

	)

229 
	#GL_C3F_V3F
 0x2A24

	)

230 
	#GL_N3F_V3F
 0x2A25

	)

231 
	#GL_C4F_N3F_V3F
 0x2A26

	)

232 
	#GL_T2F_V3F
 0x2A27

	)

233 
	#GL_T4F_V4F
 0x2A28

	)

234 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

235 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

236 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

237 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

238 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

241 
	#GL_MATRIX_MODE
 0x0BA0

	)

242 
	#GL_MODELVIEW
 0x1700

	)

243 
	#GL_PROJECTION
 0x1701

	)

244 
	#GL_TEXTURE
 0x1702

	)

247 
	#GL_POINT_SMOOTH
 0x0B10

	)

248 
	#GL_POINT_SIZE
 0x0B11

	)

249 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

250 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

253 
	#GL_LINE_SMOOTH
 0x0B20

	)

254 
	#GL_LINE_STIPPLE
 0x0B24

	)

255 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

256 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

257 
	#GL_LINE_WIDTH
 0x0B21

	)

258 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

259 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

262 
	#GL_POINT
 0x1B00

	)

263 
	#GL_LINE
 0x1B01

	)

264 
	#GL_FILL
 0x1B02

	)

265 
	#GL_CW
 0x0900

	)

266 
	#GL_CCW
 0x0901

	)

267 
	#GL_FRONT
 0x0404

	)

268 
	#GL_BACK
 0x0405

	)

269 
	#GL_POLYGON_MODE
 0x0B40

	)

270 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

271 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

272 
	#GL_EDGE_FLAG
 0x0B43

	)

273 
	#GL_CULL_FACE
 0x0B44

	)

274 
	#GL_CULL_FACE_MODE
 0x0B45

	)

275 
	#GL_FRONT_FACE
 0x0B46

	)

276 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

277 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

278 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

279 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

280 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

283 
	#GL_COMPILE
 0x1300

	)

284 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

285 
	#GL_LIST_BASE
 0x0B32

	)

286 
	#GL_LIST_INDEX
 0x0B33

	)

287 
	#GL_LIST_MODE
 0x0B30

	)

290 
	#GL_NEVER
 0x0200

	)

291 
	#GL_LESS
 0x0201

	)

292 
	#GL_EQUAL
 0x0202

	)

293 
	#GL_LEQUAL
 0x0203

	)

294 
	#GL_GREATER
 0x0204

	)

295 
	#GL_NOTEQUAL
 0x0205

	)

296 
	#GL_GEQUAL
 0x0206

	)

297 
	#GL_ALWAYS
 0x0207

	)

298 
	#GL_DEPTH_TEST
 0x0B71

	)

299 
	#GL_DEPTH_BITS
 0x0D56

	)

300 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

301 
	#GL_DEPTH_FUNC
 0x0B74

	)

302 
	#GL_DEPTH_RANGE
 0x0B70

	)

303 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

304 
	#GL_DEPTH_COMPONENT
 0x1902

	)

307 
	#GL_LIGHTING
 0x0B50

	)

308 
	#GL_LIGHT0
 0x4000

	)

309 
	#GL_LIGHT1
 0x4001

	)

310 
	#GL_LIGHT2
 0x4002

	)

311 
	#GL_LIGHT3
 0x4003

	)

312 
	#GL_LIGHT4
 0x4004

	)

313 
	#GL_LIGHT5
 0x4005

	)

314 
	#GL_LIGHT6
 0x4006

	)

315 
	#GL_LIGHT7
 0x4007

	)

316 
	#GL_SPOT_EXPONENT
 0x1205

	)

317 
	#GL_SPOT_CUTOFF
 0x1206

	)

318 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

319 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

320 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

321 
	#GL_AMBIENT
 0x1200

	)

322 
	#GL_DIFFUSE
 0x1201

	)

323 
	#GL_SPECULAR
 0x1202

	)

324 
	#GL_SHININESS
 0x1601

	)

325 
	#GL_EMISSION
 0x1600

	)

326 
	#GL_POSITION
 0x1203

	)

327 
	#GL_SPOT_DIRECTION
 0x1204

	)

328 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

329 
	#GL_COLOR_INDEXES
 0x1603

	)

330 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

331 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

332 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

333 
	#GL_FRONT_AND_BACK
 0x0408

	)

334 
	#GL_SHADE_MODEL
 0x0B54

	)

335 
	#GL_FLAT
 0x1D00

	)

336 
	#GL_SMOOTH
 0x1D01

	)

337 
	#GL_COLOR_MATERIAL
 0x0B57

	)

338 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

339 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

340 
	#GL_NORMALIZE
 0x0BA1

	)

343 
	#GL_CLIP_PLANE0
 0x3000

	)

344 
	#GL_CLIP_PLANE1
 0x3001

	)

345 
	#GL_CLIP_PLANE2
 0x3002

	)

346 
	#GL_CLIP_PLANE3
 0x3003

	)

347 
	#GL_CLIP_PLANE4
 0x3004

	)

348 
	#GL_CLIP_PLANE5
 0x3005

	)

351 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

352 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

353 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

354 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

355 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

356 
	#GL_ACCUM
 0x0100

	)

357 
	#GL_ADD
 0x0104

	)

358 
	#GL_LOAD
 0x0101

	)

359 
	#GL_MULT
 0x0103

	)

360 
	#GL_RETURN
 0x0102

	)

363 
	#GL_ALPHA_TEST
 0x0BC0

	)

364 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

365 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

368 
	#GL_BLEND
 0x0BE2

	)

369 
	#GL_BLEND_SRC
 0x0BE1

	)

370 
	#GL_BLEND_DST
 0x0BE0

	)

371 
	#GL_ZERO
 0x0

	)

372 
	#GL_ONE
 0x1

	)

373 
	#GL_SRC_COLOR
 0x0300

	)

374 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

375 
	#GL_SRC_ALPHA
 0x0302

	)

376 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

377 
	#GL_DST_ALPHA
 0x0304

	)

378 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

379 
	#GL_DST_COLOR
 0x0306

	)

380 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

381 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

384 
	#GL_FEEDBACK
 0x1C01

	)

385 
	#GL_RENDER
 0x1C00

	)

386 
	#GL_SELECT
 0x1C02

	)

389 
	#GL_2D
 0x0600

	)

390 
	#GL_3D
 0x0601

	)

391 
	#GL_3D_COLOR
 0x0602

	)

392 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

393 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

394 
	#GL_POINT_TOKEN
 0x0701

	)

395 
	#GL_LINE_TOKEN
 0x0702

	)

396 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

397 
	#GL_POLYGON_TOKEN
 0x0703

	)

398 
	#GL_BITMAP_TOKEN
 0x0704

	)

399 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

400 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

401 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

402 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

403 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

404 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

407 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

408 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

411 
	#GL_FOG
 0x0B60

	)

412 
	#GL_FOG_MODE
 0x0B65

	)

413 
	#GL_FOG_DENSITY
 0x0B62

	)

414 
	#GL_FOG_COLOR
 0x0B66

	)

415 
	#GL_FOG_INDEX
 0x0B61

	)

416 
	#GL_FOG_START
 0x0B63

	)

417 
	#GL_FOG_END
 0x0B64

	)

418 
	#GL_LINEAR
 0x2601

	)

419 
	#GL_EXP
 0x0800

	)

420 
	#GL_EXP2
 0x0801

	)

423 
	#GL_LOGIC_OP
 0x0BF1

	)

424 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

425 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

426 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

427 
	#GL_CLEAR
 0x1500

	)

428 
	#GL_SET
 0x150F

	)

429 
	#GL_COPY
 0x1503

	)

430 
	#GL_COPY_INVERTED
 0x150C

	)

431 
	#GL_NOOP
 0x1505

	)

432 
	#GL_INVERT
 0x150A

	)

433 
	#GL_AND
 0x1501

	)

434 
	#GL_NAND
 0x150E

	)

435 
	#GL_OR
 0x1507

	)

436 
	#GL_NOR
 0x1508

	)

437 
	#GL_XOR
 0x1506

	)

438 
	#GL_EQUIV
 0x1509

	)

439 
	#GL_AND_REVERSE
 0x1502

	)

440 
	#GL_AND_INVERTED
 0x1504

	)

441 
	#GL_OR_REVERSE
 0x150B

	)

442 
	#GL_OR_INVERTED
 0x150D

	)

445 
	#GL_STENCIL_BITS
 0x0D57

	)

446 
	#GL_STENCIL_TEST
 0x0B90

	)

447 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

448 
	#GL_STENCIL_FUNC
 0x0B92

	)

449 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

450 
	#GL_STENCIL_FAIL
 0x0B94

	)

451 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

452 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

453 
	#GL_STENCIL_REF
 0x0B97

	)

454 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

455 
	#GL_STENCIL_INDEX
 0x1901

	)

456 
	#GL_KEEP
 0x1E00

	)

457 
	#GL_REPLACE
 0x1E01

	)

458 
	#GL_INCR
 0x1E02

	)

459 
	#GL_DECR
 0x1E03

	)

462 
	#GL_NONE
 0x0

	)

463 
	#GL_LEFT
 0x0406

	)

464 
	#GL_RIGHT
 0x0407

	)

468 
	#GL_FRONT_LEFT
 0x0400

	)

469 
	#GL_FRONT_RIGHT
 0x0401

	)

470 
	#GL_BACK_LEFT
 0x0402

	)

471 
	#GL_BACK_RIGHT
 0x0403

	)

472 
	#GL_AUX0
 0x0409

	)

473 
	#GL_AUX1
 0x040A

	)

474 
	#GL_AUX2
 0x040B

	)

475 
	#GL_AUX3
 0x040C

	)

476 
	#GL_COLOR_INDEX
 0x1900

	)

477 
	#GL_RED
 0x1903

	)

478 
	#GL_GREEN
 0x1904

	)

479 
	#GL_BLUE
 0x1905

	)

480 
	#GL_ALPHA
 0x1906

	)

481 
	#GL_LUMINANCE
 0x1909

	)

482 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

483 
	#GL_ALPHA_BITS
 0x0D55

	)

484 
	#GL_RED_BITS
 0x0D52

	)

485 
	#GL_GREEN_BITS
 0x0D53

	)

486 
	#GL_BLUE_BITS
 0x0D54

	)

487 
	#GL_INDEX_BITS
 0x0D51

	)

488 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

489 
	#GL_AUX_BUFFERS
 0x0C00

	)

490 
	#GL_READ_BUFFER
 0x0C02

	)

491 
	#GL_DRAW_BUFFER
 0x0C01

	)

492 
	#GL_DOUBLEBUFFER
 0x0C32

	)

493 
	#GL_STEREO
 0x0C33

	)

494 
	#GL_BITMAP
 0x1A00

	)

495 
	#GL_COLOR
 0x1800

	)

496 
	#GL_DEPTH
 0x1801

	)

497 
	#GL_STENCIL
 0x1802

	)

498 
	#GL_DITHER
 0x0BD0

	)

499 
	#GL_RGB
 0x1907

	)

500 
	#GL_RGBA
 0x1908

	)

503 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

504 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

505 
	#GL_MAX_LIGHTS
 0x0D31

	)

506 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

507 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

508 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

509 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

510 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

511 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

512 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

513 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

514 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

515 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

518 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

519 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

520 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

521 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

522 
	#GL_CURRENT_INDEX
 0x0B01

	)

523 
	#GL_CURRENT_COLOR
 0x0B00

	)

524 
	#GL_CURRENT_NORMAL
 0x0B02

	)

525 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

526 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

527 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

528 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

529 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

530 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

531 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

532 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

533 
	#GL_INDEX_MODE
 0x0C30

	)

534 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

535 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

536 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

537 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

538 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

539 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

540 
	#GL_RENDER_MODE
 0x0C40

	)

541 
	#GL_RGBA_MODE
 0x0C31

	)

542 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

543 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

544 
	#GL_VIEWPORT
 0x0BA2

	)

547 
	#GL_AUTO_NORMAL
 0x0D80

	)

548 
	#GL_MAP1_COLOR_4
 0x0D90

	)

549 
	#GL_MAP1_INDEX
 0x0D91

	)

550 
	#GL_MAP1_NORMAL
 0x0D92

	)

551 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

552 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

553 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

554 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

555 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

556 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

557 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

558 
	#GL_MAP2_INDEX
 0x0DB1

	)

559 
	#GL_MAP2_NORMAL
 0x0DB2

	)

560 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

561 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

562 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

563 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

564 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

565 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

566 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

567 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

568 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

569 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

570 
	#GL_COEFF
 0x0A00

	)

571 
	#GL_ORDER
 0x0A01

	)

572 
	#GL_DOMAIN
 0x0A02

	)

575 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

576 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

577 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

578 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

579 
	#GL_FOG_HINT
 0x0C54

	)

580 
	#GL_DONT_CARE
 0x1100

	)

581 
	#GL_FASTEST
 0x1101

	)

582 
	#GL_NICEST
 0x1102

	)

585 
	#GL_SCISSOR_BOX
 0x0C10

	)

586 
	#GL_SCISSOR_TEST
 0x0C11

	)

589 
	#GL_MAP_COLOR
 0x0D10

	)

590 
	#GL_MAP_STENCIL
 0x0D11

	)

591 
	#GL_INDEX_SHIFT
 0x0D12

	)

592 
	#GL_INDEX_OFFSET
 0x0D13

	)

593 
	#GL_RED_SCALE
 0x0D14

	)

594 
	#GL_RED_BIAS
 0x0D15

	)

595 
	#GL_GREEN_SCALE
 0x0D18

	)

596 
	#GL_GREEN_BIAS
 0x0D19

	)

597 
	#GL_BLUE_SCALE
 0x0D1A

	)

598 
	#GL_BLUE_BIAS
 0x0D1B

	)

599 
	#GL_ALPHA_SCALE
 0x0D1C

	)

600 
	#GL_ALPHA_BIAS
 0x0D1D

	)

601 
	#GL_DEPTH_SCALE
 0x0D1E

	)

602 
	#GL_DEPTH_BIAS
 0x0D1F

	)

603 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

604 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

605 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

606 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

607 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

608 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

609 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

610 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

611 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

612 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

613 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

614 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

615 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

616 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

617 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

618 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

619 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

620 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

621 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

622 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

623 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

624 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

625 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

626 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

627 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

628 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

629 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

630 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

631 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

632 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

633 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

634 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

635 
	#GL_ZOOM_X
 0x0D16

	)

636 
	#GL_ZOOM_Y
 0x0D17

	)

639 
	#GL_TEXTURE_ENV
 0x2300

	)

640 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

641 
	#GL_TEXTURE_1D
 0x0DE0

	)

642 
	#GL_TEXTURE_2D
 0x0DE1

	)

643 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

644 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

645 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

646 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

647 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

648 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

649 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

650 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

651 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

652 
	#GL_TEXTURE_WIDTH
 0x1000

	)

653 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

654 
	#GL_TEXTURE_BORDER
 0x1005

	)

655 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

656 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

657 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

658 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

659 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

660 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

661 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

662 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

663 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

664 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

665 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

666 
	#GL_OBJECT_LINEAR
 0x2401

	)

667 
	#GL_OBJECT_PLANE
 0x2501

	)

668 
	#GL_EYE_LINEAR
 0x2400

	)

669 
	#GL_EYE_PLANE
 0x2502

	)

670 
	#GL_SPHERE_MAP
 0x2402

	)

671 
	#GL_DECAL
 0x2101

	)

672 
	#GL_MODULATE
 0x2100

	)

673 
	#GL_NEAREST
 0x2600

	)

674 
	#GL_REPEAT
 0x2901

	)

675 
	#GL_CLAMP
 0x2900

	)

676 
	#GL_S
 0x2000

	)

677 
	#GL_T
 0x2001

	)

678 
	#GL_R
 0x2002

	)

679 
	#GL_Q
 0x2003

	)

680 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

681 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

684 
	#GL_VENDOR
 0x1F00

	)

685 
	#GL_RENDERER
 0x1F01

	)

686 
	#GL_VERSION
 0x1F02

	)

687 
	#GL_EXTENSIONS
 0x1F03

	)

690 
	#GL_NO_ERROR
 0x0

	)

691 
	#GL_INVALID_ENUM
 0x0500

	)

692 
	#GL_INVALID_VALUE
 0x0501

	)

693 
	#GL_INVALID_OPERATION
 0x0502

	)

694 
	#GL_STACK_OVERFLOW
 0x0503

	)

695 
	#GL_STACK_UNDERFLOW
 0x0504

	)

696 
	#GL_OUT_OF_MEMORY
 0x0505

	)

699 
	#GL_CURRENT_BIT
 0x00000001

	)

700 
	#GL_POINT_BIT
 0x00000002

	)

701 
	#GL_LINE_BIT
 0x00000004

	)

702 
	#GL_POLYGON_BIT
 0x00000008

	)

703 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

704 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

705 
	#GL_LIGHTING_BIT
 0x00000040

	)

706 
	#GL_FOG_BIT
 0x00000080

	)

707 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

708 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

709 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

710 
	#GL_VIEWPORT_BIT
 0x00000800

	)

711 
	#GL_TRANSFORM_BIT
 0x00001000

	)

712 
	#GL_ENABLE_BIT
 0x00002000

	)

713 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

714 
	#GL_HINT_BIT
 0x00008000

	)

715 
	#GL_EVAL_BIT
 0x00010000

	)

716 
	#GL_LIST_BIT
 0x00020000

	)

717 
	#GL_TEXTURE_BIT
 0x00040000

	)

718 
	#GL_SCISSOR_BIT
 0x00080000

	)

719 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

723 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

724 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

725 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

726 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

727 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

728 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

729 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

730 
	#GL_ALPHA4
 0x803B

	)

731 
	#GL_ALPHA8
 0x803C

	)

732 
	#GL_ALPHA12
 0x803D

	)

733 
	#GL_ALPHA16
 0x803E

	)

734 
	#GL_LUMINANCE4
 0x803F

	)

735 
	#GL_LUMINANCE8
 0x8040

	)

736 
	#GL_LUMINANCE12
 0x8041

	)

737 
	#GL_LUMINANCE16
 0x8042

	)

738 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

739 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

740 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

741 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

742 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

743 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

744 
	#GL_INTENSITY
 0x8049

	)

745 
	#GL_INTENSITY4
 0x804A

	)

746 
	#GL_INTENSITY8
 0x804B

	)

747 
	#GL_INTENSITY12
 0x804C

	)

748 
	#GL_INTENSITY16
 0x804D

	)

749 
	#GL_R3_G3_B2
 0x2A10

	)

750 
	#GL_RGB4
 0x804F

	)

751 
	#GL_RGB5
 0x8050

	)

752 
	#GL_RGB8
 0x8051

	)

753 
	#GL_RGB10
 0x8052

	)

754 
	#GL_RGB12
 0x8053

	)

755 
	#GL_RGB16
 0x8054

	)

756 
	#GL_RGBA2
 0x8055

	)

757 
	#GL_RGBA4
 0x8056

	)

758 
	#GL_RGB5_A1
 0x8057

	)

759 
	#GL_RGBA8
 0x8058

	)

760 
	#GL_RGB10_A2
 0x8059

	)

761 
	#GL_RGBA12
 0x805A

	)

762 
	#GL_RGBA16
 0x805B

	)

763 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

764 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

765 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

766 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

774 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Index
–
GLÊﬂt
 
c
 );

776 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

778 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨
–
GLbôfõld
 
mask
 );

780 
GLAPI
 
GLAPIENTRY
 
	`glIndexMask
–
GLuöt
 
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

784 
GLAPI
 
GLAPIENTRY
 
	`glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

786 
GLAPI
 
GLAPIENTRY
 
	`glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

788 
GLAPI
 
GLAPIENTRY
 
	`glLogicOp
–
GLíum
 
›code
 );

790 
GLAPI
 
GLAPIENTRY
 
	`glCuŒFa˚
–
GLíum
 
mode
 );

792 
GLAPI
 
GLAPIENTRY
 
	`glFr⁄tFa˚
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
	`glPoötSize
–
GLÊﬂt
 
size
 );

796 
GLAPI
 
GLAPIENTRY
 
	`glLöeWidth
–
GLÊﬂt
 
width
 );

798 
GLAPI
 
GLAPIENTRY
 
	`glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

800 
GLAPI
 
GLAPIENTRY
 
	`glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

802 
GLAPI
 
GLAPIENTRY
 
	`glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

804 
GLAPI
 
GLAPIENTRY
 
	`glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

806 
GLAPI
 
GLAPIENTRY
 
	`glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

808 
GLAPI
 
GLAPIENTRY
 
	`glEdgeFœg
–
GLboﬁón
 
Êag
 );

810 
GLAPI
 
GLAPIENTRY
 
	`glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

812 
GLAPI
 
GLAPIENTRY
 
	`glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

814 
GLAPI
 
GLAPIENTRY
 
	`glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

816 
GLAPI
 
GLAPIENTRY
 
	`glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

818 
GLAPI
 
GLAPIENTRY
 
	`glDøwBuf„r
–
GLíum
 
mode
 );

820 
GLAPI
 
GLAPIENTRY
 
	`glRódBuf„r
–
GLíum
 
mode
 );

822 
GLAPI
 
GLAPIENTRY
 
	`glE«bÀ
–
GLíum
 
ˇp
 );

824 
GLAPI
 
GLAPIENTRY
 
	`glDißbÀ
–
GLíum
 
ˇp
 );

826 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glIsE«bÀd
–
GLíum
 
ˇp
 );

829 
GLAPI
 
GLAPIENTRY
 
	`glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

831 
GLAPI
 
GLAPIENTRY
 
	`glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

834 
GLAPI
 
GLAPIENTRY
 
	`glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

836 
GLAPI
 
GLAPIENTRY
 
	`glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

838 
GLAPI
 
GLAPIENTRY
 
	`glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

840 
GLAPI
 
GLAPIENTRY
 
	`glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

843 
GLAPI
 
GLAPIENTRY
 
	`glPushAârib
–
GLbôfõld
 
mask
 );

845 
GLAPI
 
GLAPIENTRY
 
	`glP›Aârib
( );

848 
GLAPI
 
GLAPIENTRY
 
	`glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

850 
GLAPI
 
GLAPIENTRY
 
	`glP›Clõ¡Aârib
( );

853 
GLAPI
 
GLöt
 
GLAPIENTRY
 
	`glRídîMode
–
GLíum
 
mode
 );

855 
GLAPI
 
GLíum
 
GLAPIENTRY
 
	`glGëEº‹
( );

857 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
	`glGëSåög
–
GLíum
 
«me
 );

859 
GLAPI
 
GLAPIENTRY
 
	`glFöish
( );

861 
GLAPI
 
GLAPIENTRY
 
	`glFlush
( );

863 
GLAPI
 
GLAPIENTRY
 
	`glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

870 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

872 
GLAPI
 
GLAPIENTRY
 
	`glDïthFunc
–
GLíum
 
func
 );

874 
GLAPI
 
GLAPIENTRY
 
	`glDïthMask
–
GLboﬁón
 
Êag
 );

876 
GLAPI
 
GLAPIENTRY
 
	`glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

883 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

885 
GLAPI
 
GLAPIENTRY
 
	`glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

892 
GLAPI
 
GLAPIENTRY
 
	`glM©rixMode
–
GLíum
 
mode
 );

894 
GLAPI
 
GLAPIENTRY
 
	`glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

895 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

896 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

898 
GLAPI
 
GLAPIENTRY
 
	`glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

899 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

900 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

902 
GLAPI
 
GLAPIENTRY
 
	`glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

903 
GLsizei
 
width
, GLsizeò
height
 );

905 
GLAPI
 
GLAPIENTRY
 
	`glPushM©rix
( );

907 
GLAPI
 
GLAPIENTRY
 
	`glP›M©rix
( );

909 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdIdítôy
( );

911 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

912 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

914 
GLAPI
 
GLAPIENTRY
 
	`glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

915 
GLAPI
 
GLAPIENTRY
 
	`glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

917 
GLAPI
 
GLAPIENTRY
 
	`glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

918 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

919 
GLAPI
 
GLAPIENTRY
 
	`glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

920 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

922 
GLAPI
 
GLAPIENTRY
 
	`glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

923 
GLAPI
 
GLAPIENTRY
 
	`glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

925 
GLAPI
 
GLAPIENTRY
 
	`glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

926 
GLAPI
 
GLAPIENTRY
 
	`glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

933 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glIsLi°
–
GLuöt
 
li°
 );

935 
GLAPI
 
GLAPIENTRY
 
	`glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

937 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
	`glGíLi°s
–
GLsizei
 
ønge
 );

939 
GLAPI
 
GLAPIENTRY
 
	`glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

941 
GLAPI
 
GLAPIENTRY
 
	`glEndLi°
( );

943 
GLAPI
 
GLAPIENTRY
 
	`glCÆlLi°
–
GLuöt
 
li°
 );

945 
GLAPI
 
GLAPIENTRY
 
	`glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

946 c⁄° 
GLvoid
 *
li°s
 );

948 
GLAPI
 
GLAPIENTRY
 
	`glLi°Ba£
–
GLuöt
 
ba£
 );

955 
GLAPI
 
GLAPIENTRY
 
	`glBegö
–
GLíum
 
mode
 );

957 
GLAPI
 
GLAPIENTRY
 
	`glEnd
( );

960 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

961 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

962 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

963 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

965 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

966 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

967 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

968 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

970 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

971 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

972 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

973 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

975 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

976 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

977 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

980 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

981 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

982 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

983 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

985 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

986 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

987 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

988 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

991 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

992 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

993 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

994 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

995 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

997 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

998 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

999 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1000 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

1001 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

1004 
GLAPI
 
GLAPIENTRY
 
	`glIndexd
–
GLdoubÀ
 
c
 );

1005 
GLAPI
 
GLAPIENTRY
 
	`glIndexf
–
GLÊﬂt
 
c
 );

1006 
GLAPI
 
GLAPIENTRY
 
	`glIndexi
–
GLöt
 
c
 );

1007 
GLAPI
 
GLAPIENTRY
 
	`glIndexs
–
GLsh‹t
 
c
 );

1008 
GLAPI
 
GLAPIENTRY
 
	`glIndexub
–
GLubyã
 
c
 );

1010 
GLAPI
 
GLAPIENTRY
 
	`glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

1011 
GLAPI
 
GLAPIENTRY
 
	`glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

1012 
GLAPI
 
GLAPIENTRY
 
	`glIndexiv
–c⁄° 
GLöt
 *
c
 );

1013 
GLAPI
 
GLAPIENTRY
 
	`glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

1014 
GLAPI
 
GLAPIENTRY
 
	`glIndexubv
–c⁄° 
GLubyã
 *
c
 );

1016 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

1017 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

1018 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

1019 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

1020 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

1021 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1022 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1023 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1025 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1026 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1027 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1028 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1029 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1030 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1031 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1032 
GLöt
 
blue
, GLöà
Æpha
 );

1033 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1034 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1035 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1036 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1037 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1038 
GLuöt
 
blue
, GLuöà
Æpha
 );

1039 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1040 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1043 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1044 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1045 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1046 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1047 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1048 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1049 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1050 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1052 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1053 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1054 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1055 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1056 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1063 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1064 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1i
–
GLöt
 
s
 );

1065 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1s
–
GLsh‹t
 
s
 );

1067 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1068 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1069 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1070 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1072 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1073 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1074 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1075 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1077 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1078 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1079 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1080 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1082 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1083 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1084 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1085 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1087 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1088 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1089 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1090 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1092 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1093 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1104 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1105 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1106 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1108 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1109 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1110 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1111 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1113 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1114 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1115 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1116 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1118 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1119 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1120 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1121 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1123 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1124 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1125 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1126 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1128 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1129 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1130 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1131 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1134 
GLAPI
 
GLAPIENTRY
 
	`glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1135 
GLAPI
 
GLAPIENTRY
 
	`glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1136 
GLAPI
 
GLAPIENTRY
 
	`glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1137 
GLAPI
 
GLAPIENTRY
 
	`glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1140 
GLAPI
 
GLAPIENTRY
 
	`glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1141 
GLAPI
 
GLAPIENTRY
 
	`glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1142 
GLAPI
 
GLAPIENTRY
 
	`glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1143 
GLAPI
 
GLAPIENTRY
 
	`glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1150 
GLAPI
 
GLAPIENTRY
 
	`glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1151 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1153 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1154 c⁄° 
GLvoid
 *
±r
 );

1156 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1157 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1159 
GLAPI
 
GLAPIENTRY
 
	`glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1160 c⁄° 
GLvoid
 *
±r
 );

1162 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1163 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1165 
GLAPI
 
GLAPIENTRY
 
	`glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1167 
GLAPI
 
GLAPIENTRY
 
	`glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1169 
GLAPI
 
GLAPIENTRY
 
	`glAºayEÀmít
–
GLöt
 
i
 );

1171 
GLAPI
 
GLAPIENTRY
 
	`glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1173 
GLAPI
 
GLAPIENTRY
 
	`glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1174 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1176 
GLAPI
 
GLAPIENTRY
 
	`glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1177 c⁄° 
GLvoid
 *
poöãr
 );

1183 
GLAPI
 
GLAPIENTRY
 
	`glShadeModñ
–
GLíum
 
mode
 );

1185 
GLAPI
 
GLAPIENTRY
 
	`glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1186 
GLAPI
 
GLAPIENTRY
 
	`glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1187 
GLAPI
 
GLAPIENTRY
 
	`glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1188 c⁄° 
GLÊﬂt
 *
∑øms
 );

1189 
GLAPI
 
GLAPIENTRY
 
	`glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1190 c⁄° 
GLöt
 *
∑øms
 );

1192 
GLAPI
 
GLAPIENTRY
 
	`glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1193 
GLÊﬂt
 *
∑øms
 );

1194 
GLAPI
 
GLAPIENTRY
 
	`glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1195 
GLöt
 *
∑øms
 );

1197 
GLAPI
 
GLAPIENTRY
 
	`glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1198 
GLAPI
 
GLAPIENTRY
 
	`glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1199 
GLAPI
 
GLAPIENTRY
 
	`glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1200 
GLAPI
 
GLAPIENTRY
 
	`glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1202 
GLAPI
 
GLAPIENTRY
 
	`glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1203 
GLAPI
 
GLAPIENTRY
 
	`glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1204 
GLAPI
 
GLAPIENTRY
 
	`glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1205 
GLAPI
 
GLAPIENTRY
 
	`glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1207 
GLAPI
 
GLAPIENTRY
 
	`glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1208 
GLAPI
 
GLAPIENTRY
 
	`glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1210 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1217 
GLAPI
 
GLAPIENTRY
 
	`glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1219 
GLAPI
 
GLAPIENTRY
 
	`glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1220 
GLAPI
 
GLAPIENTRY
 
	`glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1222 
GLAPI
 
GLAPIENTRY
 
	`glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1223 
GLAPI
 
GLAPIENTRY
 
	`glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1225 
GLAPI
 
GLAPIENTRY
 
	`glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1226 c⁄° 
GLÊﬂt
 *
vÆues
 );

1227 
GLAPI
 
GLAPIENTRY
 
	`glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1228 c⁄° 
GLuöt
 *
vÆues
 );

1229 
GLAPI
 
GLAPIENTRY
 
	`glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1230 c⁄° 
GLush‹t
 *
vÆues
 );

1232 
GLAPI
 
GLAPIENTRY
 
	`glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1233 
GLAPI
 
GLAPIENTRY
 
	`glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1234 
GLAPI
 
GLAPIENTRY
 
	`glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1236 
GLAPI
 
GLAPIENTRY
 
	`glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1237 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1238 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1239 c⁄° 
GLubyã
 *
bôm≠
 );

1241 
GLAPI
 
GLAPIENTRY
 
	`glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1242 
GLsizei
 
width
, GLsizeò
height
,

1243 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1244 
GLvoid
 *
pixñs
 );

1246 
GLAPI
 
GLAPIENTRY
 
	`glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1247 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1248 c⁄° 
GLvoid
 *
pixñs
 );

1250 
GLAPI
 
GLAPIENTRY
 
	`glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1251 
GLsizei
 
width
, GLsizeò
height
,

1252 
GLíum
 
ty≥
 );

1258 
GLAPI
 
GLAPIENTRY
 
	`glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1260 
GLAPI
 
GLAPIENTRY
 
	`glSãncûMask
–
GLuöt
 
mask
 );

1262 
GLAPI
 
GLAPIENTRY
 
	`glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1264 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Sãncû
–
GLöt
 
s
 );

1272 
GLAPI
 
GLAPIENTRY
 
	`glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1273 
GLAPI
 
GLAPIENTRY
 
	`glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1274 
GLAPI
 
GLAPIENTRY
 
	`glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1276 
GLAPI
 
GLAPIENTRY
 
	`glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1277 
GLAPI
 
GLAPIENTRY
 
	`glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1278 
GLAPI
 
GLAPIENTRY
 
	`glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1280 
GLAPI
 
GLAPIENTRY
 
	`glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1281 
GLAPI
 
GLAPIENTRY
 
	`glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
	`glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1285 
GLAPI
 
GLAPIENTRY
 
	`glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1286 
GLAPI
 
GLAPIENTRY
 
	`glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1288 
GLAPI
 
GLAPIENTRY
 
	`glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1289 
GLAPI
 
GLAPIENTRY
 
	`glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1291 
GLAPI
 
GLAPIENTRY
 
	`glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1292 
GLAPI
 
GLAPIENTRY
 
	`glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1295 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1296 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1298 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1299 c⁄° 
GLÊﬂt
 *
∑øms
 );

1300 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1301 c⁄° 
GLöt
 *
∑øms
 );

1303 
GLAPI
 
GLAPIENTRY
 
	`glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1304 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1305 
GLAPI
 
GLAPIENTRY
 
	`glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1306 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1308 
GLAPI
 
GLAPIENTRY
 
	`glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1309 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1310 
GLAPI
 
GLAPIENTRY
 
	`glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1311 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1314 
GLAPI
 
GLAPIENTRY
 
	`glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1315 
GLöt
 
öã∫ÆF‹m©
,

1316 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1317 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1318 c⁄° 
GLvoid
 *
pixñs
 );

1320 
GLAPI
 
GLAPIENTRY
 
	`glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1321 
GLöt
 
öã∫ÆF‹m©
,

1322 
GLsizei
 
width
, GLsizeò
height
,

1323 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1324 c⁄° 
GLvoid
 *
pixñs
 );

1326 
GLAPI
 
GLAPIENTRY
 
	`glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1327 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1328 
GLvoid
 *
pixñs
 );

1333 
GLAPI
 
GLAPIENTRY
 
	`glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1335 
GLAPI
 
GLAPIENTRY
 
	`glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1337 
GLAPI
 
GLAPIENTRY
 
	`glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1339 
GLAPI
 
GLAPIENTRY
 
	`glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1340 c⁄° 
GLuöt
 *
ãxtuªs
,

1341 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1343 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glAªTextuªsResidít
–
GLsizei
 
n
,

1344 c⁄° 
GLuöt
 *
ãxtuªs
,

1345 
GLboﬁón
 *
ªsidí˚s
 );

1347 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glIsTextuª
–
GLuöt
 
ãxtuª
 );

1350 
GLAPI
 
GLAPIENTRY
 
	`glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1351 
GLöt
 
xoff£t
,

1352 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1353 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1356 
GLAPI
 
GLAPIENTRY
 
	`glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1357 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1358 
GLsizei
 
width
, GLsizeò
height
,

1359 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1360 c⁄° 
GLvoid
 *
pixñs
 );

1363 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1364 
GLíum
 
öã∫Æf‹m©
,

1365 
GLöt
 
x
, GLöà
y
,

1366 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1369 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1370 
GLíum
 
öã∫Æf‹m©
,

1371 
GLöt
 
x
, GLöà
y
,

1372 
GLsizei
 
width
, GLsizeò
height
,

1373 
GLöt
 
b‹dî
 );

1376 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1377 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1378 
GLsizei
 
width
 );

1381 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1382 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1383 
GLöt
 
x
, GLöà
y
,

1384 
GLsizei
 
width
, GLsizeò
height
 );

1391 
GLAPI
 
GLAPIENTRY
 
	`glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1392 
GLöt
 
°ride
,

1393 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1394 
GLAPI
 
GLAPIENTRY
 
	`glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1395 
GLöt
 
°ride
,

1396 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1398 
GLAPI
 
GLAPIENTRY
 
	`glM≠2d
–
GLíum
 
èrgë
,

1399 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1400 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1401 c⁄° 
GLdoubÀ
 *
poöts
 );

1402 
GLAPI
 
GLAPIENTRY
 
	`glM≠2f
–
GLíum
 
èrgë
,

1403 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1404 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1405 c⁄° 
GLÊﬂt
 *
poöts
 );

1407 
GLAPI
 
GLAPIENTRY
 
	`glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1408 
GLAPI
 
GLAPIENTRY
 
	`glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1409 
GLAPI
 
GLAPIENTRY
 
	`glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1411 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1412 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1414 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1415 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1417 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1418 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1420 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1421 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1423 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1424 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1426 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1427 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1428 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1429 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1431 
GLAPI
 
GLAPIENTRY
 
	`glEvÆPoöt1
–
GLöt
 
i
 );

1433 
GLAPI
 
GLAPIENTRY
 
	`glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1435 
GLAPI
 
GLAPIENTRY
 
	`glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1437 
GLAPI
 
GLAPIENTRY
 
	`glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1444 
GLAPI
 
GLAPIENTRY
 
	`glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1446 
GLAPI
 
GLAPIENTRY
 
	`glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1448 
GLAPI
 
GLAPIENTRY
 
	`glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1450 
GLAPI
 
GLAPIENTRY
 
	`glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1457 
GLAPI
 
GLAPIENTRY
 
	`glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1459 
GLAPI
 
GLAPIENTRY
 
	`glPassThrough
–
GLÊﬂt
 
tokí
 );

1461 
GLAPI
 
GLAPIENTRY
 
	`glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1463 
GLAPI
 
GLAPIENTRY
 
	`glInôNames
( );

1465 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdName
–
GLuöt
 
«me
 );

1467 
GLAPI
 
GLAPIENTRY
 
	`glPushName
–
GLuöt
 
«me
 );

1469 
GLAPI
 
GLAPIENTRY
 
	`glP›Name
( );

1477 
	#GL_RESCALE_NORMAL
 0x803A

	)

1478 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1479 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1480 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1481 
	#GL_BGR
 0x80E0

	)

1482 
	#GL_BGRA
 0x80E1

	)

1483 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1484 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1485 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1486 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1487 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1488 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1489 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1490 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1491 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1492 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1493 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1494 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1495 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1496 
	#GL_SINGLE_COLOR
 0x81F9

	)

1497 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1498 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1499 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1500 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1501 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1502 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1503 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1504 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1505 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1506 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1507 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1508 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1509 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1510 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1511 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1512 
	#GL_TEXTURE_3D
 0x806F

	)

1513 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1514 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1515 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1516 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1517 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1519 
GLAPI
 
GLAPIENTRY
 
	`glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1520 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1522 
GLAPI
 
GLAPIENTRY
 
	`glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1523 
GLöt
 
öã∫ÆF‹m©
,

1524 
GLsizei
 
width
, GLsizeò
height
,

1525 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1526 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1527 c⁄° 
GLvoid
 *
pixñs
 );

1529 
GLAPI
 
GLAPIENTRY
 
	`glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1530 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1531 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1532 
GLsizei
 
height
, GLsizeò
dïth
,

1533 
GLíum
 
f‹m©
,

1534 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1536 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1537 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1538 
GLöt
 
zoff£t
, GLöà
x
,

1539 
GLöt
 
y
, 
GLsizei
 
width
,

1540 
GLsizei
 
height
 );

1542 (
	tAPIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1543 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1544 (
	tAPIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1545 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1552 
	#GL_CONSTANT_COLOR
 0x8001

	)

1553 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1554 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1555 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1556 
	#GL_COLOR_TABLE
 0x80D0

	)

1557 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1558 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1559 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1560 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1561 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1562 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1563 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1564 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1565 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1566 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1567 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1568 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1569 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1570 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1571 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1572 
	#GL_CONVOLUTION_1D
 0x8010

	)

1573 
	#GL_CONVOLUTION_2D
 0x8011

	)

1574 
	#GL_SEPARABLE_2D
 0x8012

	)

1575 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1576 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1577 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1578 
	#GL_REDUCE
 0x8016

	)

1579 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1580 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1581 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1582 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1583 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1584 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1585 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1586 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1587 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1588 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1589 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1590 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1591 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1592 
	#GL_CONSTANT_BORDER
 0x8151

	)

1593 
	#GL_REPLICATE_BORDER
 0x8153

	)

1594 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1595 
	#GL_COLOR_MATRIX
 0x80B1

	)

1596 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1597 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1598 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1599 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1600 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1601 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1602 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1603 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1604 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1605 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1606 
	#GL_HISTOGRAM
 0x8024

	)

1607 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1608 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1609 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1610 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1611 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1612 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1613 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1614 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1615 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1616 
	#GL_MINMAX
 0x802E

	)

1617 
	#GL_MINMAX_FORMAT
 0x802F

	)

1618 
	#GL_MINMAX_SINK
 0x8030

	)

1619 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1620 
	#GL_BLEND_EQUATION
 0x8009

	)

1621 
	#GL_MIN
 0x8007

	)

1622 
	#GL_MAX
 0x8008

	)

1623 
	#GL_FUNC_ADD
 0x8006

	)

1624 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1625 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1626 
	#GL_BLEND_COLOR
 0x8005

	)

1629 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1630 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1631 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1633 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1634 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1635 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1636 c⁄° 
GLvoid
 *
d©a
 );

1638 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1639 c⁄° 
GLöt
 *
∑øms
);

1641 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1642 c⁄° 
GLÊﬂt
 *
∑øms
);

1644 
GLAPI
 
GLAPIENTRY
 
	`glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1645 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1647 
GLAPI
 
GLAPIENTRY
 
	`glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1648 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1650 
GLAPI
 
GLAPIENTRY
 
	`glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1651 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1653 
GLAPI
 
GLAPIENTRY
 
	`glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1654 
GLÊﬂt
 *
∑øms
 );

1656 
GLAPI
 
GLAPIENTRY
 
	`glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1657 
GLöt
 *
∑øms
 );

1659 
GLAPI
 
GLAPIENTRY
 
	`glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1661 
GLAPI
 
GLAPIENTRY
 
	`glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1662 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1664 
GLAPI
 
GLAPIENTRY
 
	`glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1665 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1667 
GLAPI
 
GLAPIENTRY
 
	`glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1669 
GLAPI
 
GLAPIENTRY
 
	`glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1670 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1671 
GLvoid
 *
vÆues
 );

1673 
GLAPI
 
GLAPIENTRY
 
	`glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1674 
GLÊﬂt
 *
∑øms
 );

1676 
GLAPI
 
GLAPIENTRY
 
	`glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1677 
GLöt
 *
∑øms
 );

1679 
GLAPI
 
GLAPIENTRY
 
	`glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1680 
GLboﬁón
 
sök
 );

1682 
GLAPI
 
GLAPIENTRY
 
	`glRe£tMömax
–
GLíum
 
èrgë
 );

1684 
GLAPI
 
GLAPIENTRY
 
	`glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1685 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1686 
GLvoid
 *
vÆues
 );

1688 
GLAPI
 
GLAPIENTRY
 
	`glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1689 
GLÊﬂt
 *
∑øms
 );

1691 
GLAPI
 
GLAPIENTRY
 
	`glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1692 
GLöt
 *
∑øms
 );

1694 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1695 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1696 c⁄° 
GLvoid
 *
image
 );

1698 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1699 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1700 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1702 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1703 
GLÊﬂt
 
∑øms
 );

1705 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1706 c⁄° 
GLÊﬂt
 *
∑øms
 );

1708 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1709 
GLöt
 
∑øms
 );

1711 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1712 c⁄° 
GLöt
 *
∑øms
 );

1714 
GLAPI
 
GLAPIENTRY
 
	`glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1715 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1717 
GLAPI
 
GLAPIENTRY
 
	`glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1718 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1719 
GLsizei
 
height
);

1721 
GLAPI
 
GLAPIENTRY
 
	`glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1722 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1724 
GLAPI
 
GLAPIENTRY
 
	`glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1725 
GLÊﬂt
 *
∑øms
 );

1727 
GLAPI
 
GLAPIENTRY
 
	`glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1728 
GLöt
 *
∑øms
 );

1730 
GLAPI
 
GLAPIENTRY
 
	`glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1731 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1732 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1734 
GLAPI
 
GLAPIENTRY
 
	`glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1735 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1737 (
	tAPIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1738 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1739 (
	tAPIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

1740 (
	tAPIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

1741 (
	tAPIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1742 (
	tAPIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

1743 (
	tAPIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

1744 (
	tAPIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1745 (
	tAPIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1746 (
	tAPIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

1747 (
	tAPIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

1748 (
	tAPIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

1749 (
	tAPIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

1750 (
	tAPIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

1751 (
	tAPIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

1752 (
	tAPIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

1753 (
	tAPIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1754 (
	tAPIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

1755 (
	tAPIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1756 (
	tAPIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

1757 (
	tAPIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1758 (
	tAPIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1759 (
	tAPIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

1760 (
	tAPIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

1761 (
	tAPIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

1762 (
	tAPIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1763 (
	tAPIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1764 (
	tAPIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

1765 (
	tAPIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1766 (
	tAPIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1767 (
	tAPIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

1768 (
	tAPIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

1769 (
	tAPIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

1770 (
	tAPIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

1779 
	#GL_TEXTURE0
 0x84C0

	)

1780 
	#GL_TEXTURE1
 0x84C1

	)

1781 
	#GL_TEXTURE2
 0x84C2

	)

1782 
	#GL_TEXTURE3
 0x84C3

	)

1783 
	#GL_TEXTURE4
 0x84C4

	)

1784 
	#GL_TEXTURE5
 0x84C5

	)

1785 
	#GL_TEXTURE6
 0x84C6

	)

1786 
	#GL_TEXTURE7
 0x84C7

	)

1787 
	#GL_TEXTURE8
 0x84C8

	)

1788 
	#GL_TEXTURE9
 0x84C9

	)

1789 
	#GL_TEXTURE10
 0x84CA

	)

1790 
	#GL_TEXTURE11
 0x84CB

	)

1791 
	#GL_TEXTURE12
 0x84CC

	)

1792 
	#GL_TEXTURE13
 0x84CD

	)

1793 
	#GL_TEXTURE14
 0x84CE

	)

1794 
	#GL_TEXTURE15
 0x84CF

	)

1795 
	#GL_TEXTURE16
 0x84D0

	)

1796 
	#GL_TEXTURE17
 0x84D1

	)

1797 
	#GL_TEXTURE18
 0x84D2

	)

1798 
	#GL_TEXTURE19
 0x84D3

	)

1799 
	#GL_TEXTURE20
 0x84D4

	)

1800 
	#GL_TEXTURE21
 0x84D5

	)

1801 
	#GL_TEXTURE22
 0x84D6

	)

1802 
	#GL_TEXTURE23
 0x84D7

	)

1803 
	#GL_TEXTURE24
 0x84D8

	)

1804 
	#GL_TEXTURE25
 0x84D9

	)

1805 
	#GL_TEXTURE26
 0x84DA

	)

1806 
	#GL_TEXTURE27
 0x84DB

	)

1807 
	#GL_TEXTURE28
 0x84DC

	)

1808 
	#GL_TEXTURE29
 0x84DD

	)

1809 
	#GL_TEXTURE30
 0x84DE

	)

1810 
	#GL_TEXTURE31
 0x84DF

	)

1811 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1812 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1813 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1815 
	#GL_NORMAL_MAP
 0x8511

	)

1816 
	#GL_REFLECTION_MAP
 0x8512

	)

1817 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1818 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1819 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1820 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1821 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1822 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1823 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1824 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1825 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1826 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1828 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1829 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1830 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1831 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1832 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1833 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1834 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1835 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1836 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1837 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1838 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1840 
	#GL_MULTISAMPLE
 0x809D

	)

1841 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1842 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1843 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1844 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1845 
	#GL_SAMPLES
 0x80A9

	)

1846 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1847 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1848 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1850 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1851 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1852 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1853 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1855 
	#GL_COMBINE
 0x8570

	)

1856 
	#GL_COMBINE_RGB
 0x8571

	)

1857 
	#GL_COMBINE_ALPHA
 0x8572

	)

1858 
	#GL_SOURCE0_RGB
 0x8580

	)

1859 
	#GL_SOURCE1_RGB
 0x8581

	)

1860 
	#GL_SOURCE2_RGB
 0x8582

	)

1861 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1862 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1863 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1864 
	#GL_OPERAND0_RGB
 0x8590

	)

1865 
	#GL_OPERAND1_RGB
 0x8591

	)

1866 
	#GL_OPERAND2_RGB
 0x8592

	)

1867 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1868 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1869 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1870 
	#GL_RGB_SCALE
 0x8573

	)

1871 
	#GL_ADD_SIGNED
 0x8574

	)

1872 
	#GL_INTERPOLATE
 0x8575

	)

1873 
	#GL_SUBTRACT
 0x84E7

	)

1874 
	#GL_CONSTANT
 0x8576

	)

1875 
	#GL_PRIMARY_COLOR
 0x8577

	)

1876 
	#GL_PREVIOUS
 0x8578

	)

1878 
	#GL_DOT3_RGB
 0x86AE

	)

1879 
	#GL_DOT3_RGBA
 0x86AF

	)

1881 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1883 
GLAPI
 
GLAPIENTRY
 
	`glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1885 
GLAPI
 
GLAPIENTRY
 
	`glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1887 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1889 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1891 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1893 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1895 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1897 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1899 
GLAPI
 
GLAPIENTRY
 
	`glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1901 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1903 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1905 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1907 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1909 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1911 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1913 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1915 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1917 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1919 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1921 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1923 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1925 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1927 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1929 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1931 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1933 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1935 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1937 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1939 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1941 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1943 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1945 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1947 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1949 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1951 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1953 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1955 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1957 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1959 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1961 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1963 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1966 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1968 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1970 
GLAPI
 
GLAPIENTRY
 
	`glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1972 
GLAPI
 
GLAPIENTRY
 
	`glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1974 
GLAPI
 
GLAPIENTRY
 
	`glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1976 (
	tAPIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1977 (
	tAPIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1978 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

1979 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1980 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

1981 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1982 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

1983 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1984 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

1985 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1986 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

1987 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1988 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

1989 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1990 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

1991 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1992 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

1993 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1994 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

1995 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1996 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

1997 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1998 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

1999 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2000 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2001 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2002 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2003 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2004 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2005 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2006 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2007 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2008 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2009 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2010 (
	tAPIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

2011 (
	tAPIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

2012 (
	tAPIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

2013 (
	tAPIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

2014 (
	tAPIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

2015 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

2016 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

2017 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

2018 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

2019 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

2020 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

2021 (
	tAPIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

2027 #i‚de‡
GL_ARB_mu…ôextuª


2028 
	#GL_ARB_mu…ôextuª
 1

	)

2030 
	#GL_TEXTURE0_ARB
 0x84C0

	)

2031 
	#GL_TEXTURE1_ARB
 0x84C1

	)

2032 
	#GL_TEXTURE2_ARB
 0x84C2

	)

2033 
	#GL_TEXTURE3_ARB
 0x84C3

	)

2034 
	#GL_TEXTURE4_ARB
 0x84C4

	)

2035 
	#GL_TEXTURE5_ARB
 0x84C5

	)

2036 
	#GL_TEXTURE6_ARB
 0x84C6

	)

2037 
	#GL_TEXTURE7_ARB
 0x84C7

	)

2038 
	#GL_TEXTURE8_ARB
 0x84C8

	)

2039 
	#GL_TEXTURE9_ARB
 0x84C9

	)

2040 
	#GL_TEXTURE10_ARB
 0x84CA

	)

2041 
	#GL_TEXTURE11_ARB
 0x84CB

	)

2042 
	#GL_TEXTURE12_ARB
 0x84CC

	)

2043 
	#GL_TEXTURE13_ARB
 0x84CD

	)

2044 
	#GL_TEXTURE14_ARB
 0x84CE

	)

2045 
	#GL_TEXTURE15_ARB
 0x84CF

	)

2046 
	#GL_TEXTURE16_ARB
 0x84D0

	)

2047 
	#GL_TEXTURE17_ARB
 0x84D1

	)

2048 
	#GL_TEXTURE18_ARB
 0x84D2

	)

2049 
	#GL_TEXTURE19_ARB
 0x84D3

	)

2050 
	#GL_TEXTURE20_ARB
 0x84D4

	)

2051 
	#GL_TEXTURE21_ARB
 0x84D5

	)

2052 
	#GL_TEXTURE22_ARB
 0x84D6

	)

2053 
	#GL_TEXTURE23_ARB
 0x84D7

	)

2054 
	#GL_TEXTURE24_ARB
 0x84D8

	)

2055 
	#GL_TEXTURE25_ARB
 0x84D9

	)

2056 
	#GL_TEXTURE26_ARB
 0x84DA

	)

2057 
	#GL_TEXTURE27_ARB
 0x84DB

	)

2058 
	#GL_TEXTURE28_ARB
 0x84DC

	)

2059 
	#GL_TEXTURE29_ARB
 0x84DD

	)

2060 
	#GL_TEXTURE30_ARB
 0x84DE

	)

2061 
	#GL_TEXTURE31_ARB
 0x84DF

	)

2062 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

2063 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

2064 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

2066 
GLAPI
 
GLAPIENTRY
 
	`glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2067 
GLAPI
 
GLAPIENTRY
 
	`glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2068 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

2069 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2070 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

2071 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2072 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

2073 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2074 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

2075 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2076 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

2077 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2078 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

2079 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2080 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

2081 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2082 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

2083 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2084 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

2085 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2086 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

2087 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2088 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

2089 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2090 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2091 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2092 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2093 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2094 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2095 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2096 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2097 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2098 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2099 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2101 (
	tAPIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2102 (
	tAPIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2103 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2104 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2105 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2106 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2107 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2108 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2109 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2110 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2111 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2112 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2113 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2114 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2115 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2116 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2117 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2118 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2119 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2120 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2121 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2122 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2123 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2124 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2125 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2126 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2127 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2128 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2129 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2130 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2131 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2132 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2133 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2134 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2144 #i‡
	`deföed
(
GL_GLEXT_LEGACY
)

2150 
	~<GL/gÀxt.h
>

2156 #i‡
GL_ARB_shadî_obje˘s


2158 #i‚de‡
GL_MESA_shadî_debug


2159 
	#GL_MESA_shadî_debug
 1

	)

2161 
	#GL_DEBUG_OBJECT_MESA
 0x8759

	)

2162 
	#GL_DEBUG_PRINT_MESA
 0x875A

	)

2163 
	#GL_DEBUG_ASSERT_MESA
 0x875B

	)

2165 
GLAPI
 
GLh™dÀARB
 
GLAPIENTRY
 
	`glCª©eDebugObje˘MESA
 ();

2166 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨DebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2167 
GLAPI
 
GLAPIENTRY
 
	`glGëDebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
, 
GLsizei
 
maxLígth
,

2168 
GLsizei
 *
Àngth
, 
GLch¨ARB
 *
debugLog
);

2169 
GLAPI
 
GLsizei
 
GLAPIENTRY
 
	`glGëDebugLogLígthMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2180 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2181 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2183 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2184 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2185 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2186 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2187 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2192 #i‚de‡
GL_MESA_¥ogøm_debug


2193 
	#GL_MESA_¥ogøm_debug
 1

	)

2195 
	#GL_FRAGMENT_PROGRAM_POSITION_MESA
 0x8bb0

	)

2196 
	#GL_FRAGMENT_PROGRAM_CALLBACK_MESA
 0x8bb1

	)

2197 
	#GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb2

	)

2198 
	#GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA
 0x8bb3

	)

2199 
	#GL_VERTEX_PROGRAM_POSITION_MESA
 0x8bb4

	)

2200 
	#GL_VERTEX_PROGRAM_CALLBACK_MESA
 0x8bb5

	)

2201 
	#GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb6

	)

2202 
	#GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA
 0x8bb7

	)

2204 (*
	tGL¥ogømˇŒbackMESA
)(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 *
	td©a
);

2206 
GLAPI
 
GLAPIENTRY
 
	`glProgømCÆlbackMESA
(
GLíum
 
èrgë
, 
GL¥ogømˇŒbackMESA
 
ˇŒback
, 
GLvoid
 *
d©a
);

2208 
GLAPI
 
GLAPIENTRY
 
	`glGëProgømRegi°îfvMESA
(
GLíum
 
èrgë
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
v
);

2213 #i‚de‡
GL_MESA_ãxtuª_¨øy


2214 
	#GL_MESA_ãxtuª_¨øy
 1

	)

2218 #i‚de‡
GL_EXT_ãxtuª_¨øy


2220 #ifde‡
GL_GLEXT_PROTOTYPES


2221 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuªLayîEXT
(
GLíum
 
èrgë
,

2222 
GLíum
 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2229 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
,

2230 
	tGLíum
 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2233 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

2234 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

2235 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

2236 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

2237 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

2238 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

2239 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

2240 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

2246 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2247 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2249 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2251 
GLAPI
 
GLAPIENTRY
 
	`glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2252 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2269 #i‡
	`deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2270 #¥agm®
exp‹t
 
off


2273 #i‡
	`deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


2274 #¥agm®
imp‹t
 
off


2281 #ifde‡
__˝lu•lus


2282 
	}
}

	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 
	#GLAPIENTRY


	)

44 #i‚de‡
GLAPIENTRYP


45 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

48 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

49 #unde‡
GLAPI


50 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

51 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

55 #ñi‡!
deföed
(
GLAPI
)

57 
	#GLAPI
 

	)

60 #ifde‡
__˝lu•lus


67 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

68 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

71 
	#GLU_FALSE
 0

	)

72 
	#GLU_TRUE
 1

	)

75 
	#GLU_VERSION_1_1
 1

	)

76 
	#GLU_VERSION_1_2
 1

	)

77 
	#GLU_VERSION_1_3
 1

	)

80 
	#GLU_VERSION
 100800

	)

81 
	#GLU_EXTENSIONS
 100801

	)

84 
	#GLU_INVALID_ENUM
 100900

	)

85 
	#GLU_INVALID_VALUE
 100901

	)

86 
	#GLU_OUT_OF_MEMORY
 100902

	)

87 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

88 
	#GLU_INVALID_OPERATION
 100904

	)

92 
	#GLU_OUTLINE_POLYGON
 100240

	)

93 
	#GLU_OUTLINE_PATCH
 100241

	)

96 
	#GLU_NURBS_ERROR
 100103

	)

97 
	#GLU_ERROR
 100103

	)

98 
	#GLU_NURBS_BEGIN
 100164

	)

99 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

100 
	#GLU_NURBS_VERTEX
 100165

	)

101 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

102 
	#GLU_NURBS_NORMAL
 100166

	)

103 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

104 
	#GLU_NURBS_COLOR
 100167

	)

105 
	#GLU_NURBS_COLOR_EXT
 100167

	)

106 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

107 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

108 
	#GLU_NURBS_END
 100169

	)

109 
	#GLU_NURBS_END_EXT
 100169

	)

110 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

111 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

112 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

113 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

114 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

115 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

116 
	#GLU_NURBS_COLOR_DATA
 100173

	)

117 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

118 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

119 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

120 
	#GLU_NURBS_END_DATA
 100175

	)

121 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

124 
	#GLU_NURBS_ERROR1
 100251

	)

125 
	#GLU_NURBS_ERROR2
 100252

	)

126 
	#GLU_NURBS_ERROR3
 100253

	)

127 
	#GLU_NURBS_ERROR4
 100254

	)

128 
	#GLU_NURBS_ERROR5
 100255

	)

129 
	#GLU_NURBS_ERROR6
 100256

	)

130 
	#GLU_NURBS_ERROR7
 100257

	)

131 
	#GLU_NURBS_ERROR8
 100258

	)

132 
	#GLU_NURBS_ERROR9
 100259

	)

133 
	#GLU_NURBS_ERROR10
 100260

	)

134 
	#GLU_NURBS_ERROR11
 100261

	)

135 
	#GLU_NURBS_ERROR12
 100262

	)

136 
	#GLU_NURBS_ERROR13
 100263

	)

137 
	#GLU_NURBS_ERROR14
 100264

	)

138 
	#GLU_NURBS_ERROR15
 100265

	)

139 
	#GLU_NURBS_ERROR16
 100266

	)

140 
	#GLU_NURBS_ERROR17
 100267

	)

141 
	#GLU_NURBS_ERROR18
 100268

	)

142 
	#GLU_NURBS_ERROR19
 100269

	)

143 
	#GLU_NURBS_ERROR20
 100270

	)

144 
	#GLU_NURBS_ERROR21
 100271

	)

145 
	#GLU_NURBS_ERROR22
 100272

	)

146 
	#GLU_NURBS_ERROR23
 100273

	)

147 
	#GLU_NURBS_ERROR24
 100274

	)

148 
	#GLU_NURBS_ERROR25
 100275

	)

149 
	#GLU_NURBS_ERROR26
 100276

	)

150 
	#GLU_NURBS_ERROR27
 100277

	)

151 
	#GLU_NURBS_ERROR28
 100278

	)

152 
	#GLU_NURBS_ERROR29
 100279

	)

153 
	#GLU_NURBS_ERROR30
 100280

	)

154 
	#GLU_NURBS_ERROR31
 100281

	)

155 
	#GLU_NURBS_ERROR32
 100282

	)

156 
	#GLU_NURBS_ERROR33
 100283

	)

157 
	#GLU_NURBS_ERROR34
 100284

	)

158 
	#GLU_NURBS_ERROR35
 100285

	)

159 
	#GLU_NURBS_ERROR36
 100286

	)

160 
	#GLU_NURBS_ERROR37
 100287

	)

163 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

164 
	#GLU_CULLING
 100201

	)

165 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

166 
	#GLU_DISPLAY_MODE
 100204

	)

167 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

168 
	#GLU_SAMPLING_METHOD
 100205

	)

169 
	#GLU_U_STEP
 100206

	)

170 
	#GLU_V_STEP
 100207

	)

171 
	#GLU_NURBS_MODE
 100160

	)

172 
	#GLU_NURBS_MODE_EXT
 100160

	)

173 
	#GLU_NURBS_TESSELLATOR
 100161

	)

174 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

175 
	#GLU_NURBS_RENDERER
 100162

	)

176 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

179 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

180 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

181 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

182 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

183 
	#GLU_PATH_LENGTH
 100215

	)

184 
	#GLU_PARAMETRIC_ERROR
 100216

	)

185 
	#GLU_DOMAIN_DISTANCE
 100217

	)

188 
	#GLU_MAP1_TRIM_2
 100210

	)

189 
	#GLU_MAP1_TRIM_3
 100211

	)

192 
	#GLU_POINT
 100010

	)

193 
	#GLU_LINE
 100011

	)

194 
	#GLU_FILL
 100012

	)

195 
	#GLU_SILHOUETTE
 100013

	)

201 
	#GLU_SMOOTH
 100000

	)

202 
	#GLU_FLAT
 100001

	)

203 
	#GLU_NONE
 100002

	)

206 
	#GLU_OUTSIDE
 100020

	)

207 
	#GLU_INSIDE
 100021

	)

210 
	#GLU_TESS_BEGIN
 100100

	)

211 
	#GLU_BEGIN
 100100

	)

212 
	#GLU_TESS_VERTEX
 100101

	)

213 
	#GLU_VERTEX
 100101

	)

214 
	#GLU_TESS_END
 100102

	)

215 
	#GLU_END
 100102

	)

216 
	#GLU_TESS_ERROR
 100103

	)

217 
	#GLU_TESS_EDGE_FLAG
 100104

	)

218 
	#GLU_EDGE_FLAG
 100104

	)

219 
	#GLU_TESS_COMBINE
 100105

	)

220 
	#GLU_TESS_BEGIN_DATA
 100106

	)

221 
	#GLU_TESS_VERTEX_DATA
 100107

	)

222 
	#GLU_TESS_END_DATA
 100108

	)

223 
	#GLU_TESS_ERROR_DATA
 100109

	)

224 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

225 
	#GLU_TESS_COMBINE_DATA
 100111

	)

228 
	#GLU_CW
 100120

	)

229 
	#GLU_CCW
 100121

	)

230 
	#GLU_INTERIOR
 100122

	)

231 
	#GLU_EXTERIOR
 100123

	)

232 
	#GLU_UNKNOWN
 100124

	)

235 
	#GLU_TESS_WINDING_RULE
 100140

	)

236 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

237 
	#GLU_TESS_TOLERANCE
 100142

	)

240 
	#GLU_TESS_ERROR1
 100151

	)

241 
	#GLU_TESS_ERROR2
 100152

	)

242 
	#GLU_TESS_ERROR3
 100153

	)

243 
	#GLU_TESS_ERROR4
 100154

	)

244 
	#GLU_TESS_ERROR5
 100155

	)

245 
	#GLU_TESS_ERROR6
 100156

	)

246 
	#GLU_TESS_ERROR7
 100157

	)

247 
	#GLU_TESS_ERROR8
 100158

	)

248 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

249 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

250 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

251 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

252 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

253 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

256 
	#GLU_TESS_WINDING_ODD
 100130

	)

257 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

258 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

259 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

260 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

265 #ifde‡
__˝lu•lus


266 
˛ass
 
GLUnurbs
;

267 
˛ass
 
GLUquadric
;

268 
˛ass
 
GLUãs£œt‹
;

270 
GLUnurbs
 
	tGLUnurbs
;

271 
GLUquadric
 
	tGLUquadric
;

272 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

275 
GLUnurbs
 
	tGLUnurbsObj
;

276 
GLUquadric
 
	tGLUquadricObj
;

277 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

278 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

280 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

283 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

285 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

286 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

287 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

288 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

289 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

290 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

291 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

292 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

296 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

297 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

298 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

299 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

300 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

301 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

303 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

304 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

305 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

306 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

307 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

308 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

309 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

310 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

311 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

312 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

313 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

314 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

315 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

316 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

317 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

318 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

321 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

322 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

323 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

324 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

325 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

326 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

327 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

328 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

329 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

330 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

332 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

333 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

334 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

335 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

336 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

337 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

342 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

343 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

345 #ifde‡
__˝lu•lus


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_GNU


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

242 
	#__√ed_size_t


	)

243 
	~<°ddef.h
>

249 #i‚de‡
__USE_FILE_OFFSET64


250 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

251 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

252 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

253 (*
__cmp
Ë(
__c⁄°
 *, __const *))

254 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__REDIRECT


257 
	`__REDIRECT
 (
sˇndú
,

258 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

259 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

260 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

261 (*
__cmp
Ë(
__c⁄°
 *, __const *)),

262 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

264 
	#sˇndú
 
sˇndú64


	)

268 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


271 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

272 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

273 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

274 (*
__cmp
Ë(
__c⁄°
 *, __const *))

275 
	`__n⁄nuŒ
 ((1, 2));

279 #i‚de‡
__USE_FILE_OFFSET64


280 
	$Æphas‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

283 #ifde‡
__REDIRECT


284 
	`__REDIRECT_NTH
 (
Æphas‹t
,

285 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

286 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
	#Æphas‹t
 
Æphas‹t64


	)

292 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


293 
	$Æphas‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__USE_GNU


299 #i‚de‡
__USE_FILE_OFFSET64


300 
	$vîsi⁄s‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

301 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 #ifde‡
__REDIRECT


304 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

305 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

306 
vîsi⁄s‹t64
)

307 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

313 #ifde‡
__USE_LARGEFILE64


314 
	$vîsi⁄s‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

325 
size_t
 
__nbyãs
,

326 
__off_t
 *
__ª°ri˘
 
__ba£p
)

327 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

329 #ifde‡
__REDIRECT


330 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

331 (
__fd
, *
__ª°ri˘
 
__buf
,

332 
size_t
 
__nbyãs
,

333 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

334 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

336 
	#gëdúíåõs
 
gëdúíåõs64


	)

340 #ifde‡
__USE_LARGEFILE64


341 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

342 
size_t
 
__nbyãs
,

343 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

349 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifde‡
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
f˙é
 (
__fd
, 
__cmd
, ...);

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

87 #ifde‡
__REDIRECT


88 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

89 
	`__n⁄nuŒ
 ((1));

91 
	#›í
 
›í64


	)

94 #ifde‡
__USE_LARGEFILE64


95 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

98 #ifde‡
__USE_ATFILE


108 #i‚de‡
__USE_FILE_OFFSET64


109 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

110 
	`__n⁄nuŒ
 ((2));

112 #ifde‡
__REDIRECT


113 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

114 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

116 
	#›í©
 
›í©64


	)

120 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

121 
	`__n⁄nuŒ
 ((2));

129 #i‚de‡
__USE_FILE_OFFSET64


130 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__REDIRECT


133 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

134 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

136 
	#¸ót
 
¸ót64


	)

139 #ifde‡
__USE_LARGEFILE64


140 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

143 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

144 && !
deföed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

172 #ifde‡
__USE_XOPEN2K


175 #i‚de‡
__USE_FILE_OFFSET64


176 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

177 
__advi£
Ë
__THROW
;

179 #ifde‡
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Àn
, 
__advi£
),

182 
posix_Ádvi£64
);

184 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

187 #ifde‡
__USE_LARGEFILE64


188 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

189 
__advi£
Ë
__THROW
;

197 #i‚de‡
__USE_FILE_OFFSET64


198 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Àn
),

203 
posix_ÁŒoˇã64
);

205 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

208 #ifde‡
__USE_LARGEFILE64


209 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

215 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

216 && 
deföed
 
__va_¨g_∑ck_Àn


217 
	~<bôs/f˙é2.h
>

220 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/fb.h

1 #i‚de‡
_LINUX_FB_H


2 
	#_LINUX_FB_H


	)

4 
	~<asm/ty≥s.h
>

5 
	~<löux/i2c.h
>

7 
	gdíåy
;

11 
	#FB_MAX
 32

	)

15 
	#FBIOGET_VSCREENINFO
 0x4600

	)

16 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

17 
	#FBIOGET_FSCREENINFO
 0x4602

	)

18 
	#FBIOGETCMAP
 0x4604

	)

19 
	#FBIOPUTCMAP
 0x4605

	)

20 
	#FBIOPAN_DISPLAY
 0x4606

	)

21 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

26 
	#FBIOGET_CON2FBMAP
 0x460F

	)

27 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

28 
	#FBIOBLANK
 0x4611

	)

29 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

30 
	#FBIO_ALLOC
 0x4613

	)

31 
	#FBIO_FREE
 0x4614

	)

32 
	#FBIOGET_GLYPH
 0x4615

	)

33 
	#FBIOGET_HWCINFO
 0x4616

	)

34 
	#FBIOPUT_MODEINFO
 0x4617

	)

35 
	#FBIOGET_DISPINFO
 0x4618

	)

38 
	#FB_TYPE_PACKED_PIXELS
 0

	)

39 
	#FB_TYPE_PLANES
 1

	)

40 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

41 
	#FB_TYPE_TEXT
 3

	)

42 
	#FB_TYPE_VGA_PLANES
 4

	)

44 
	#FB_AUX_TEXT_MDA
 0

	)

45 
	#FB_AUX_TEXT_CGA
 1

	)

46 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

47 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

48 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

49 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

50 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

51 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

52 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

53 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

54 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

55 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

57 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

58 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

59 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

61 
	#FB_VISUAL_MONO01
 0

	)

62 
	#FB_VISUAL_MONO10
 1

	)

63 
	#FB_VISUAL_TRUECOLOR
 2

	)

64 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

65 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

66 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

68 
	#FB_ACCEL_NONE
 0

	)

69 
	#FB_ACCEL_ATARIBLITT
 1

	)

70 
	#FB_ACCEL_AMIGABLITT
 2

	)

71 
	#FB_ACCEL_S3_TRIO64
 3

	)

72 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

73 
	#FB_ACCEL_S3_VIRGE
 5

	)

74 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

75 
	#FB_ACCEL_DEC_TGA
 7

	)

76 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

77 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

78 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

79 
	#FB_ACCEL_SUN_CREATOR
 11

	)

80 
	#FB_ACCEL_SUN_CGSIX
 12

	)

81 
	#FB_ACCEL_SUN_LEO
 13

	)

82 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

83 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

84 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

85 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

86 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

87 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

88 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

89 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

90 
	#FB_ACCEL_SUN_CG14
 22

	)

91 
	#FB_ACCEL_SUN_BWTWO
 23

	)

92 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

93 
	#FB_ACCEL_SUN_TCX
 25

	)

94 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

95 
	#FB_ACCEL_NV3
 27

	)

96 
	#FB_ACCEL_NV4
 28

	)

97 
	#FB_ACCEL_NV5
 29

	)

98 
	#FB_ACCEL_CT_6555x
 30

	)

99 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

100 
	#FB_ACCEL_ATI_RAGE128
 32

	)

101 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

102 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

103 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

104 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

105 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

106 
	#FB_ACCEL_ATI_RADEON
 38

	)

107 
	#FB_ACCEL_I810
 39

	)

108 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

109 
	#FB_ACCEL_SIS_XABRE
 41

	)

110 
	#FB_ACCEL_I830
 42

	)

111 
	#FB_ACCEL_NV_10
 43

	)

112 
	#FB_ACCEL_NV_20
 44

	)

113 
	#FB_ACCEL_NV_30
 45

	)

114 
	#FB_ACCEL_NV_40
 46

	)

115 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

116 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

117 
	#FB_ACCEL_OMAP1610
 49

	)

118 
	#FB_ACCEL_TRIDENT_TGUI
 50

	)

119 
	#FB_ACCEL_TRIDENT_3DIMAGE
 51

	)

120 
	#FB_ACCEL_TRIDENT_BLADE3D
 52

	)

121 
	#FB_ACCEL_TRIDENT_BLADEXP
 53

	)

122 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

123 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

124 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

125 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

126 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

127 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

128 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

129 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

130 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

132 
	#FB_ACCEL_SAVAGE4
 0x80

	)

133 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

134 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

135 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

136 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

137 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

138 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

139 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

140 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

141 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

142 
	#FB_ACCEL_S3TWISTER_P
 0x8®

	)

143 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

144 
	#FB_ACCEL_SUPERSAVAGE
 0x8¯

	)

145 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

146 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8ê

	)

148 
	sfb_fix_s¸ìnöfo
 {

149 
	mid
[16];

150 
	msmem_°¨t
;

152 
__u32
 
	msmem_Àn
;

153 
__u32
 
	mty≥
;

154 
__u32
 
	mty≥_aux
;

155 
__u32
 
	mvisuÆ
;

156 
__u16
 
	mx∑n°ï
;

157 
__u16
 
	my∑n°ï
;

158 
__u16
 
	mywøp°ï
;

159 
__u32
 
	mlöe_Àngth
;

160 
	mmmio_°¨t
;

162 
__u32
 
	mmmio_Àn
;

163 
__u32
 
	mac˚l
;

165 
__u16
 
	mª£rved
[3];

174 
	sfb_bôfõld
 {

175 
__u32
 
	moff£t
;

176 
__u32
 
	mÀngth
;

177 
__u32
 
	mmsb_right
;

181 
	#FB_NONSTD_HAM
 1

	)

182 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

184 
	#FB_ACTIVATE_NOW
 0

	)

185 
	#FB_ACTIVATE_NXTOPEN
 1

	)

186 
	#FB_ACTIVATE_TEST
 2

	)

187 
	#FB_ACTIVATE_MASK
 15

	)

189 
	#FB_ACTIVATE_VBL
 16

	)

190 
	#FB_CHANGE_CMAP_VBL
 32

	)

191 
	#FB_ACTIVATE_ALL
 64

	)

192 
	#FB_ACTIVATE_FORCE
 128

	)

193 
	#FB_ACTIVATE_INV_MODE
 256

	)

195 
	#FB_ACCELF_TEXT
 1

	)

197 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

198 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

199 
	#FB_SYNC_EXT
 4

	)

200 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

201 
	#FB_SYNC_BROADCAST
 16

	)

204 
	#FB_SYNC_ON_GREEN
 32

	)

206 
	#FB_VMODE_NONINTERLACED
 0

	)

207 
	#FB_VMODE_INTERLACED
 1

	)

208 
	#FB_VMODE_DOUBLE
 2

	)

209 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

210 
	#FB_VMODE_MASK
 255

	)

212 
	#FB_VMODE_YWRAP
 256

	)

213 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

214 
	#FB_VMODE_CONUPDATE
 512

	)

219 
	#FB_ROTATE_UR
 0

	)

220 
	#FB_ROTATE_CW
 1

	)

221 
	#FB_ROTATE_UD
 2

	)

222 
	#FB_ROTATE_CCW
 3

	)

224 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

225 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

227 
	sfb_v¨_s¸ìnöfo
 {

228 
__u32
 
	mxªs
;

229 
__u32
 
	myªs
;

230 
__u32
 
	mxªs_vútuÆ
;

231 
__u32
 
	myªs_vútuÆ
;

232 
__u32
 
	mxoff£t
;

233 
__u32
 
	myoff£t
;

235 
__u32
 
	mbôs_≥r_pixñ
;

236 
__u32
 
	mgøysˇÀ
;

238 
fb_bôfõld
 
	mªd
;

239 
fb_bôfõld
 
	mgªí
;

240 
fb_bôfõld
 
	mblue
;

241 
fb_bôfõld
 
	må™•
;

243 
__u32
 
	mn⁄°d
;

245 
__u32
 
	ma˘iv©e
;

247 
__u32
 
	mheight
;

248 
__u32
 
	mwidth
;

250 
__u32
 
	mac˚l_Êags
;

253 
__u32
 
	mpix˛ock
;

254 
__u32
 
	mÀ·_m¨gö
;

255 
__u32
 
	mright_m¨gö
;

256 
__u32
 
	muµî_m¨gö
;

257 
__u32
 
	mlowî_m¨gö
;

258 
__u32
 
	mhsync_Àn
;

259 
__u32
 
	mvsync_Àn
;

260 
__u32
 
	msync
;

261 
__u32
 
	mvmode
;

262 
__u32
 
	mrŸ©e
;

263 
__u32
 
	mª£rved
[5];

266 
	sfb_cm≠
 {

267 
__u32
 
	m°¨t
;

268 
__u32
 
	mÀn
;

269 
__u16
 *
	mªd
;

270 
__u16
 *
	mgªí
;

271 
__u16
 *
	mblue
;

272 
__u16
 *
	må™•
;

275 
	sfb_c⁄2fbm≠
 {

276 
__u32
 
	mc⁄sﬁe
;

277 
__u32
 
	m‰amebuf„r
;

281 
	#VESA_NO_BLANKING
 0

	)

282 
	#VESA_VSYNC_SUSPEND
 1

	)

283 
	#VESA_HSYNC_SUSPEND
 2

	)

284 
	#VESA_POWERDOWN
 3

	)

289 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

292 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

295 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

298 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

301 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

304 
	#FB_VBLANK_VBLANKING
 0x001

	)

305 
	#FB_VBLANK_HBLANKING
 0x002

	)

306 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

307 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

308 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

309 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

310 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

311 
	#FB_VBLANK_VSYNCING
 0x080

	)

312 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

314 
	sfb_vbœnk
 {

315 
__u32
 
	mÊags
;

316 
__u32
 
	mcou¡
;

317 
__u32
 
	mvcou¡
;

318 
__u32
 
	mhcou¡
;

319 
__u32
 
	mª£rved
[4];

323 
	#ROP_COPY
 0

	)

324 
	#ROP_XOR
 1

	)

326 
	sfb_c›y¨ó
 {

327 
__u32
 
	mdx
;

328 
__u32
 
	mdy
;

329 
__u32
 
	mwidth
;

330 
__u32
 
	mheight
;

331 
__u32
 
	msx
;

332 
__u32
 
	msy
;

335 
	sfb_fûÃe˘
 {

336 
__u32
 
	mdx
;

337 
__u32
 
	mdy
;

338 
__u32
 
	mwidth
;

339 
__u32
 
	mheight
;

340 
__u32
 
	mcﬁ‹
;

341 
__u32
 
	mr›
;

344 
	sfb_image
 {

345 
__u32
 
	mdx
;

346 
__u32
 
	mdy
;

347 
__u32
 
	mwidth
;

348 
__u32
 
	mheight
;

349 
__u32
 
	mfg_cﬁ‹
;

350 
__u32
 
	mbg_cﬁ‹
;

351 
__u8
 
	mdïth
;

352 c⁄° *
	md©a
;

353 
fb_cm≠
 
	mcm≠
;

360 
	#FB_CUR_SETIMAGE
 0x01

	)

361 
	#FB_CUR_SETPOS
 0x02

	)

362 
	#FB_CUR_SETHOT
 0x04

	)

363 
	#FB_CUR_SETCMAP
 0x08

	)

364 
	#FB_CUR_SETSHAPE
 0x10

	)

365 
	#FB_CUR_SETSIZE
 0x20

	)

366 
	#FB_CUR_SETALL
 0xFF

	)

368 
	sfbcuΩos
 {

369 
__u16
 
	mx
, 
	my
;

372 
	sfb_curs‹
 {

373 
__u16
 
	m£t
;

374 
__u16
 
	míabÀ
;

375 
__u16
 
	mr›
;

376 c⁄° *
	mmask
;

377 
fbcuΩos
 
	mhŸ
;

378 
fb_image
 
	mimage
;

381 #ifde‡
CONFIG_FB_BACKLIGHT


383 
	#FB_BACKLIGHT_LEVELS
 128

	)

384 
	#FB_BACKLIGHT_MAX
 0xFF

	)

	@/usr/include/linux/joystick.h

1 #i‚de‡
_LINUX_JOYSTICK_H


2 
	#_LINUX_JOYSTICK_H


	)

30 
	~<asm/ty≥s.h
>

31 
	~<löux/öput.h
>

37 
	#JS_VERSION
 0x020100

	)

43 
	#JS_EVENT_BUTTON
 0x01

	)

44 
	#JS_EVENT_AXIS
 0x02

	)

45 
	#JS_EVENT_INIT
 0x80

	)

47 
	sjs_evít
 {

48 
__u32
 
	mtime
;

49 
__s16
 
	mvÆue
;

50 
__u8
 
	mty≥
;

51 
__u8
 
	mnumbî
;

58 
	#JSIOCGVERSION
 
	`_IOR
('j', 0x01, 
__u32
Ë

	)

60 
	#JSIOCGAXES
 
	`_IOR
('j', 0x11, 
__u8
Ë

	)

61 
	#JSIOCGBUTTONS
 
	`_IOR
('j', 0x12, 
__u8
Ë

	)

62 
	#JSIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'j', 0x13,ÜíË

	)

64 
	#JSIOCSCORR
 
	`_IOW
('j', 0x21, 
js_c‹r
Ë

	)

65 
	#JSIOCGCORR
 
	`_IOR
('j', 0x22, 
js_c‹r
Ë

	)

67 
	#JSIOCSAXMAP
 
	`_IOW
('j', 0x31, 
__u8
[
ABS_MAX
 + 1]Ë

	)

68 
	#JSIOCGAXMAP
 
	`_IOR
('j', 0x32, 
__u8
[
ABS_MAX
 + 1]Ë

	)

69 
	#JSIOCSBTNMAP
 
	`_IOW
('j', 0x33, 
__u16
[
KEY_MAX
 - 
BTN_MISC
 + 1]Ë

	)

70 
	#JSIOCGBTNMAP
 
	`_IOR
('j', 0x34, 
__u16
[
KEY_MAX
 - 
BTN_MISC
 + 1]Ë

	)

76 
	#JS_CORR_NONE
 0x00

	)

77 
	#JS_CORR_BROKEN
 0x01

	)

79 
	sjs_c‹r
 {

80 
__s32
 
	mc€f
[8];

81 
__s16
 
	m¥ec
;

82 
__u16
 
	mty≥
;

89 
	#JS_RETURN
 (
JS_DATA_TYPE
)

	)

90 
	#JS_TRUE
 1

	)

91 
	#JS_FALSE
 0

	)

92 
	#JS_X_0
 0x01

	)

93 
	#JS_Y_0
 0x02

	)

94 
	#JS_X_1
 0x04

	)

95 
	#JS_Y_1
 0x08

	)

96 
	#JS_MAX
 2

	)

98 
	#JS_DEF_TIMEOUT
 0x1300

	)

99 
	#JS_DEF_CORR
 0

	)

100 
	#JS_DEF_TIMELIMIT
 10L

	)

102 
	#JS_SET_CAL
 1

	)

103 
	#JS_GET_CAL
 2

	)

104 
	#JS_SET_TIMEOUT
 3

	)

105 
	#JS_GET_TIMEOUT
 4

	)

106 
	#JS_SET_TIMELIMIT
 5

	)

107 
	#JS_GET_TIMELIMIT
 6

	)

108 
	#JS_GET_ALL
 7

	)

109 
	#JS_SET_ALL
 8

	)

111 
	sJS_DATA_TYPE
 {

112 
__s32
 
	mbuâ⁄s
;

113 
__s32
 
	mx
;

114 
__s32
 
	my
;

117 
	sJS_DATA_SAVE_TYPE_32
 {

118 
__s32
 
	mJS_TIMEOUT
;

119 
__s32
 
	mBUSY
;

120 
__s32
 
	mJS_EXPIRETIME
;

121 
__s32
 
	mJS_TIMELIMIT
;

122 
JS_DATA_TYPE
 
	mJS_SAVE
;

123 
JS_DATA_TYPE
 
	mJS_CORR
;

126 
	sJS_DATA_SAVE_TYPE_64
 {

127 
__s32
 
	mJS_TIMEOUT
;

128 
__s32
 
	mBUSY
;

129 
__s64
 
	mJS_EXPIRETIME
;

130 
__s64
 
	mJS_TIMELIMIT
;

131 
JS_DATA_TYPE
 
	mJS_SAVE
;

132 
JS_DATA_TYPE
 
	mJS_CORR
;

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 || deföed 
__LDBL_COMPAT
)

102 #ifde‡
__LDBL_COMPAT


104 #ifde‡
__USE_ISOC99


105 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

106 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

107 #ifde‡
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

109 
__∆dbl_√xâow¨df
)

110 
	`__©åibuã__
 ((
__c⁄°__
));

111 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

112 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

114 (
__x
, 
__y
),

115 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #unde‡
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

125 
¨gs
, 
Æüs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

130 #i‚de‡
_Ml⁄g_doubÀ_


131 
	#_Ml⁄g_doubÀ_
 

	)

133 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

134 #ifde‡
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

139 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bôs/m©hˇŒs.h
>

142 #unde‡
_MdoubÀ_


143 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


144 #unde‡
_MdoubÀ_END_NAMESPACE


145 #unde‡
__MATH_PRECNAME


150 #unde‡
__MATHDECL_1


151 #unde‡
__MATHDECL


152 #unde‡
__MATHCALL


155 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


157 
signgam
;

162 #ifde‡
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifde‡
__NO_LONG_DOUBLE_MATH


214 
	#Â˛assify
(
x
) \

215 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

217 
	#Â˛assify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__Â˛assifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

225 #ifde‡
__NO_LONG_DOUBLE_MATH


226 
	#signbô
(
x
) \

227 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

229 
	#signbô
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbôf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

237 #ifde‡
__NO_LONG_DOUBLE_MATH


238 
	#isföôe
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

241 
	#isföôe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__föôef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

249 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

253 #ifde‡
__NO_LONG_DOUBLE_MATH


254 
	#i¢™
(
x
) \

255 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

257 
	#i¢™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__i¢™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

265 #ifde‡
__NO_LONG_DOUBLE_MATH


266 
	#isöf
(
x
) \

267 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

269 
	#isöf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isöff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

282 #ifdef 
__USE_MISC


286 
_IEEE_
 = -1,

287 
_SVID_
,

288 
_XOPEN_
,

289 
_POSIX_
,

290 
_ISOC_


291 } 
	t_LIB_VERSION_TYPE
;

296 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

300 #ifde‡
__USE_SVID


306 #ifde‡
__˝lu•lus


307 
__ex˚±i⁄


309 
ex˚±i⁄


312 
ty≥
;

313 *
«me
;

314 
¨g1
;

315 
¨g2
;

316 
ªtvÆ
;

317 
	}
};

319 #ifde‡
__˝lu•lus


320 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

322 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

325 
	#X_TLOSS
 1.41484755040568800000e+16

	)

328 
	#DOMAIN
 1

	)

329 
	#SING
 2

	)

330 
	#OVERFLOW
 3

	)

331 
	#UNDERFLOW
 4

	)

332 
	#TLOSS
 5

	)

333 
	#PLOSS
 6

	)

336 
	#HUGE
 3.40282347e+38F

	)

340 #ifde‡
__USE_XOPEN


342 
	#MAXFLOAT
 3.40282347e+38F

	)

349 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


350 
	#M_E
 2.7182818284590452354

	)

351 
	#M_LOG2E
 1.4426950408889634074

	)

352 
	#M_LOG10E
 0.43429448190325182765

	)

353 
	#M_LN2
 0.69314718055994530942

	)

354 
	#M_LN10
 2.30258509299404568402

	)

355 
	#M_PI
 3.14159265358979323846

	)

356 
	#M_PI_2
 1.57079632679489661923

	)

357 
	#M_PI_4
 0.78539816339744830962

	)

358 
	#M_1_PI
 0.31830988618379067154

	)

359 
	#M_2_PI
 0.63661977236758134308

	)

360 
	#M_2_SQRTPI
 1.12837916709551257390

	)

361 
	#M_SQRT2
 1.41421356237309504880

	)

362 
	#M_SQRT1_2
 0.70710678118654752440

	)

368 #ifde‡
__USE_GNU


369 
	#M_El
 2.7182818284590452353602874713526625L

	)

370 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

371 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

372 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

373 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

374 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

375 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

376 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

377 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

378 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

379 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

380 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

381 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

388 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


389 
	#__NO_MATH_INLINES
 1

	)

392 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

399 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

400 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

401 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

402 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

403 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

404 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

408 #ifde‡
__USE_EXTERN_INLINES


409 
	~<bôs/m©hölöe.h
>

412 #ifde‡
__USE_ISOC99


416 #i‚de‡
isgª©î


417 
	#isgª©î
(
x
, 
y
) \

418 (
__exãnsi⁄__
 \

419 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

420 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

424 #i‚de‡
isgª©îequÆ


425 
	#isgª©îequÆ
(
x
, 
y
) \

426 (
__exãnsi⁄__
 \

427 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

428 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

432 #i‚de‡
i¶ess


433 
	#i¶ess
(
x
, 
y
) \

434 (
__exãnsi⁄__
 \

435 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

436 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

440 #i‚de‡
i¶es£quÆ


441 
	#i¶es£quÆ
(
x
, 
y
) \

442 (
__exãnsi⁄__
 \

443 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

444 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

448 #i‚de‡
i¶essgª©î


449 
	#i¶essgª©î
(
x
, 
y
) \

450 (
__exãnsi⁄__
 \

451 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

452 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

456 #i‚de‡
isun‹dîed


457 
	#isun‹dîed
(
u
, 
v
) \

458 (
__exãnsi⁄__
 \

459 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

460 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

465 
	g__END_DECLS


	@/usr/include/png.h

382 #i‚de‡
PNG_H


383 
	#PNG_H


	)

392 
	#PNG_LIBPNG_VER_STRING
 "1.2.27"

	)

393 
	#PNG_HEADER_VERSION_STRING
 \

394 "Üib≤g vîsi⁄ 1.2.27 - A¥û 29, 2008\n"

	)

396 
	#PNG_LIBPNG_VER_SONUM
 0

	)

397 
	#PNG_LIBPNG_VER_DLLNUM
 13

	)

400 
	#PNG_LIBPNG_VER_MAJOR
 1

	)

401 
	#PNG_LIBPNG_VER_MINOR
 2

	)

402 
	#PNG_LIBPNG_VER_RELEASE
 27

	)

406 
	#PNG_LIBPNG_VER_BUILD
 0

	)

409 
	#PNG_LIBPNG_BUILD_ALPHA
 1

	)

410 
	#PNG_LIBPNG_BUILD_BETA
 2

	)

411 
	#PNG_LIBPNG_BUILD_RC
 3

	)

412 
	#PNG_LIBPNG_BUILD_STABLE
 4

	)

413 
	#PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK
 7

	)

416 
	#PNG_LIBPNG_BUILD_PATCH
 8

	)

418 
	#PNG_LIBPNG_BUILD_PRIVATE
 16

	)

420 
	#PNG_LIBPNG_BUILD_SPECIAL
 32

	)

423 
	#PNG_LIBPNG_BUILD_BASE_TYPE
 
PNG_LIBPNG_BUILD_STABLE


	)

430 
	#PNG_LIBPNG_VER
 10227

	)

432 #i‚de‡
PNG_VERSION_INFO_ONLY


434 
	~"zlib.h
"

438 
	~"≤gc⁄f.h
"

453 #i‡
deföed
(
PNG_USER_PRIVATEBUILD
)

454 
	#PNG_LIBPNG_BUILD_TYPE
 \

455 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_PRIVATE
)

	)

457 #i‡
deföed
(
PNG_LIBPNG_SPECIALBUILD
)

458 
	#PNG_LIBPNG_BUILD_TYPE
 \

459 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_SPECIAL
)

	)

461 
	#PNG_LIBPNG_BUILD_TYPE
 (
PNG_LIBPNG_BUILD_BASE_TYPE
)

	)

465 #i‚de‡
PNG_VERSION_INFO_ONLY


468 #ifde‡
__˝lu•lus


478 #i‚de‡
PNG_NO_TYPECAST_NULL


479 
	#öt_p_NULL
 (*)
NULL


	)

480 
	#≤g_byãp_NULL
 (
≤g_byãp
)
NULL


	)

481 
	#≤g_byãµ_NULL
 (
≤g_byãµ
)
NULL


	)

482 
	#≤g_doubÀp_NULL
 (
≤g_doubÀp
)
NULL


	)

483 
	#≤g_îr‹_±r_NULL
 (
≤g_îr‹_±r
)
NULL


	)

484 
	#≤g_Êush_±r_NULL
 (
≤g_Êush_±r
)
NULL


	)

485 
	#≤g_‰ì_±r_NULL
 (
≤g_‰ì_±r
)
NULL


	)

486 
	#≤g_öf›p_NULL
 (
≤g_öf›p
)
NULL


	)

487 
	#≤g_mÆloc_±r_NULL
 (
≤g_mÆloc_±r
)
NULL


	)

488 
	#≤g_ªad_°©us_±r_NULL
 (
≤g_ªad_°©us_±r
)
NULL


	)

489 
	#≤g_rw_±r_NULL
 (
≤g_rw_±r
)
NULL


	)

490 
	#≤g_°ru˘p_NULL
 (
≤g_°ru˘p
)
NULL


	)

491 
	#≤g_uöt_16p_NULL
 (
≤g_uöt_16p
)
NULL


	)

492 
	#≤g_voidp_NULL
 (
≤g_voidp
)
NULL


	)

493 
	#≤g_wrôe_°©us_±r_NULL
 (
≤g_wrôe_°©us_±r
)
NULL


	)

495 
	#öt_p_NULL
 
NULL


	)

496 
	#≤g_byãp_NULL
 
NULL


	)

497 
	#≤g_byãµ_NULL
 
NULL


	)

498 
	#≤g_doubÀp_NULL
 
NULL


	)

499 
	#≤g_îr‹_±r_NULL
 
NULL


	)

500 
	#≤g_Êush_±r_NULL
 
NULL


	)

501 
	#≤g_‰ì_±r_NULL
 
NULL


	)

502 
	#≤g_öf›p_NULL
 
NULL


	)

503 
	#≤g_mÆloc_±r_NULL
 
NULL


	)

504 
	#≤g_ªad_°©us_±r_NULL
 
NULL


	)

505 
	#≤g_rw_±r_NULL
 
NULL


	)

506 
	#≤g_°ru˘p_NULL
 
NULL


	)

507 
	#≤g_uöt_16p_NULL
 
NULL


	)

508 
	#≤g_voidp_NULL
 
NULL


	)

509 
	#≤g_wrôe_°©us_±r_NULL
 
NULL


	)

513 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

517 #ifde‡
PNG_USE_GLOBAL_ARRAYS


518 
PNG_EXPORT_VAR
 (
PNG_CONST
 Ë
≤g_lib≤g_vî
[18];

521 
	#≤g_lib≤g_vî
 
	`≤g_gë_hódî_vî
(
NULL
)

	)

524 #ifde‡
PNG_USE_GLOBAL_ARRAYS


527 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_°¨t
[7];

528 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_öc
[7];

529 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_y°¨t
[7];

530 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_yöc
[7];

531 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_mask
[7];

532 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_d•_mask
[7];

544 
	s≤g_cﬁ‹_°ru˘


546 
≤g_byã
 
ªd
;

547 
≤g_byã
 
gªí
;

548 
≤g_byã
 
blue
;

549 } 
	t≤g_cﬁ‹
;

550 
≤g_cﬁ‹
 
	tFAR
 * 
	t≤g_cﬁ‹p
;

551 
≤g_cﬁ‹
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹µ
;

553 
	s≤g_cﬁ‹_16_°ru˘


555 
≤g_byã
 
ödex
;

556 
≤g_uöt_16
 
ªd
;

557 
≤g_uöt_16
 
gªí
;

558 
≤g_uöt_16
 
blue
;

559 
≤g_uöt_16
 
gøy
;

560 } 
	t≤g_cﬁ‹_16
;

561 
≤g_cﬁ‹_16
 
	tFAR
 * 
	t≤g_cﬁ‹_16p
;

562 
≤g_cﬁ‹_16
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_16µ
;

564 
	s≤g_cﬁ‹_8_°ru˘


566 
≤g_byã
 
ªd
;

567 
≤g_byã
 
gªí
;

568 
≤g_byã
 
blue
;

569 
≤g_byã
 
gøy
;

570 
≤g_byã
 
Æpha
;

571 } 
	t≤g_cﬁ‹_8
;

572 
≤g_cﬁ‹_8
 
	tFAR
 * 
	t≤g_cﬁ‹_8p
;

573 
≤g_cﬁ‹_8
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_8µ
;

579 
	s≤g_sPLT_íåy_°ru˘


581 
≤g_uöt_16
 
ªd
;

582 
≤g_uöt_16
 
gªí
;

583 
≤g_uöt_16
 
blue
;

584 
≤g_uöt_16
 
Æpha
;

585 
≤g_uöt_16
 
‰equícy
;

586 } 
	t≤g_sPLT_íåy
;

587 
≤g_sPLT_íåy
 
	tFAR
 * 
	t≤g_sPLT_íåyp
;

588 
≤g_sPLT_íåy
 
	tFAR
 * FAR * 
	t≤g_sPLT_íåyµ
;

595 
	s≤g_sPLT_°ru˘


597 
≤g_ch¨p
 
«me
;

598 
≤g_byã
 
dïth
;

599 
≤g_sPLT_íåyp
 
íåõs
;

600 
≤g_öt_32
 
√¡rõs
;

601 } 
	t≤g_sPLT_t
;

602 
≤g_sPLT_t
 
	tFAR
 * 
	t≤g_sPLT_ç
;

603 
≤g_sPLT_t
 
	tFAR
 * FAR * 
	t≤g_sPLT_çp
;

605 #ifde‡
PNG_TEXT_SUPPORTED


614 
	s≤g_ãxt_°ru˘


616 
com¥essi⁄
;

621 
≤g_ch¨p
 
key
;

622 
≤g_ch¨p
 
ãxt
;

624 
≤g_size_t
 
ãxt_Àngth
;

625 #ifde‡
PNG_iTXt_SUPPORTED


626 
≤g_size_t
 
ôxt_Àngth
;

627 
≤g_ch¨p
 
œng
;

629 
≤g_ch¨p
 
œng_key
;

632 } 
	t≤g_ãxt
;

633 
≤g_ãxt
 
	tFAR
 * 
	t≤g_ãxç
;

634 
≤g_ãxt
 
	tFAR
 * FAR * 
	t≤g_ãxçp
;

639 
	#PNG_TEXT_COMPRESSION_NONE_WR
 -3

	)

640 
	#PNG_TEXT_COMPRESSION_zTXt_WR
 -2

	)

641 
	#PNG_TEXT_COMPRESSION_NONE
 -1

	)

642 
	#PNG_TEXT_COMPRESSION_zTXt
 0

	)

643 
	#PNG_ITXT_COMPRESSION_NONE
 1

	)

644 
	#PNG_ITXT_COMPRESSION_zTXt
 2

	)

645 
	#PNG_TEXT_COMPRESSION_LAST
 3

	)

653 
	s≤g_time_°ru˘


655 
≤g_uöt_16
 
yór
;

656 
≤g_byã
 
m⁄th
;

657 
≤g_byã
 
day
;

658 
≤g_byã
 
hour
;

659 
≤g_byã
 
möuã
;

660 
≤g_byã
 
£c⁄d
;

661 } 
	t≤g_time
;

662 
≤g_time
 
	tFAR
 * 
	t≤g_timï
;

663 
≤g_time
 
	tFAR
 * FAR * 
	t≤g_timïp
;

665 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

671 
	#PNG_CHUNK_NAME_LENGTH
 5

	)

672 
	s≤g_unknown_chunk_t


674 
≤g_byã
 
«me
[
PNG_CHUNK_NAME_LENGTH
];

675 
≤g_byã
 *
d©a
;

676 
≤g_size_t
 
size
;

679 
≤g_byã
 
loˇti⁄
;

681 
	t≤g_unknown_chunk
;

682 
≤g_unknown_chunk
 
	tFAR
 * 
	t≤g_unknown_chunkp
;

683 
≤g_unknown_chunk
 
	tFAR
 * FAR * 
	t≤g_unknown_chunkµ
;

725 
	s≤g_öfo_°ru˘


728 
≤g_uöt_32
 
width
;

729 
≤g_uöt_32
 
height
;

730 
≤g_uöt_32
 
vÆid
;

731 
≤g_uöt_32
 
rowbyãs
;

732 
≤g_cﬁ‹p
 
∑Àâe
;

733 
≤g_uöt_16
 
num_∑Àâe
;

734 
≤g_uöt_16
 
num_å™s
;

735 
≤g_byã
 
bô_dïth
;

736 
≤g_byã
 
cﬁ‹_ty≥
;

738 
≤g_byã
 
com¥essi⁄_ty≥
;

739 
≤g_byã
 
fûãr_ty≥
;

740 
≤g_byã
 
öãæa˚_ty≥
;

743 
≤g_byã
 
ch™√ls
;

744 
≤g_byã
 
pixñ_dïth
;

745 
≤g_byã
 
•¨e_byã
;

746 
≤g_byã
 
sig«tuª
[8];

754 #i‡
deföed
(
PNG_gAMA_SUPPORTED
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

759 
gamma
;

762 #i‡
deföed
(
PNG_sRGB_SUPPORTED
)

765 
≤g_byã
 
§gb_öã¡
;

768 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

777 
num_ãxt
;

778 
max_ãxt
;

779 
≤g_ãxç
 
ãxt
;

782 #i‡
deföed
(
PNG_tIME_SUPPORTED
)

786 
≤g_time
 
mod_time
;

789 #i‡
deföed
(
PNG_sBIT_SUPPORTED
)

796 
≤g_cﬁ‹_8
 
sig_bô
;

799 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_EXPAND_SUPPORTED
) || \

800 
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

810 
≤g_byãp
 
å™s
;

811 
≤g_cﬁ‹_16
 
å™s_vÆues
;

814 #i‡
deföed
(
PNG_bKGD_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

821 
≤g_cﬁ‹_16
 
background
;

824 #i‡
deföed
(
PNG_oFFs_SUPPORTED
)

830 
≤g_öt_32
 
x_off£t
;

831 
≤g_öt_32
 
y_off£t
;

832 
≤g_byã
 
off£t_unô_ty≥
;

835 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

840 
≤g_uöt_32
 
x_pixñs_≥r_unô
;

841 
≤g_uöt_32
 
y_pixñs_≥r_unô
;

842 
≤g_byã
 
phys_unô_ty≥
;

845 #i‡
deföed
(
PNG_hIST_SUPPORTED
)

852 
≤g_uöt_16p
 
hi°
;

855 #ifde‡
PNG_cHRM_SUPPORTED


862 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


863 
x_whôe
;

864 
y_whôe
;

865 
x_ªd
;

866 
y_ªd
;

867 
x_gªí
;

868 
y_gªí
;

869 
x_blue
;

870 
y_blue
;

874 #i‡
deföed
(
PNG_pCAL_SUPPORTED
)

886 
≤g_ch¨p
 
pˇl_puΩo£
;

887 
≤g_öt_32
 
pˇl_X0
;

888 
≤g_öt_32
 
pˇl_X1
;

889 
≤g_ch¨p
 
pˇl_unôs
;

890 
≤g_ch¨µ
 
pˇl_∑øms
;

891 
≤g_byã
 
pˇl_ty≥
;

892 
≤g_byã
 
pˇl_≈¨ams
;

896 #ifde‡
PNG_FREE_ME_SUPPORTED


897 
≤g_uöt_32
 
‰ì_me
;

900 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

902 
≤g_unknown_chunkp
 
unknown_chunks
;

903 
≤g_size_t
 
unknown_chunks_num
;

906 #i‡
deföed
(
PNG_iCCP_SUPPORTED
)

908 
≤g_ch¨p
 
ic˝_«me
;

909 
≤g_ch¨p
 
ic˝_¥ofûe
;

911 
≤g_uöt_32
 
ic˝_¥oÊí
;

912 
≤g_byã
 
ic˝_com¥essi⁄
;

915 #i‡
deföed
(
PNG_sPLT_SUPPORTED
)

917 
≤g_sPLT_ç
 
•…_∑Àâes
;

918 
≤g_uöt_32
 
•…_∑Àâes_num
;

921 #i‡
deföed
(
PNG_sCAL_SUPPORTED
)

929 
≤g_byã
 
sˇl_unô
;

930 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


931 
sˇl_pixñ_width
;

932 
sˇl_pixñ_height
;

934 #ifde‡
PNG_FIXED_POINT_SUPPORTED


935 
≤g_ch¨p
 
sˇl_s_width
;

936 
≤g_ch¨p
 
sˇl_s_height
;

940 #i‡
deföed
(
PNG_INFO_IMAGE_SUPPORTED
)

943 
≤g_byãµ
 
row_poöãrs
;

946 #i‡
deföed
(
PNG_FIXED_POINT_SUPPORTED
Ë&& deföed(
PNG_gAMA_SUPPORTED
)

947 
≤g_fixed_poöt
 
öt_gamma
;

950 #i‡
deföed
(
PNG_cHRM_SUPPORTED
Ë&& deföed(
PNG_FIXED_POINT_SUPPORTED
)

951 
≤g_fixed_poöt
 
öt_x_whôe
;

952 
≤g_fixed_poöt
 
öt_y_whôe
;

953 
≤g_fixed_poöt
 
öt_x_ªd
;

954 
≤g_fixed_poöt
 
öt_y_ªd
;

955 
≤g_fixed_poöt
 
öt_x_gªí
;

956 
≤g_fixed_poöt
 
öt_y_gªí
;

957 
≤g_fixed_poöt
 
öt_x_blue
;

958 
≤g_fixed_poöt
 
öt_y_blue
;

961 } 
	t≤g_öfo
;

963 
≤g_öfo
 
	tFAR
 * 
	t≤g_öf›
;

964 
≤g_öfo
 
	tFAR
 * FAR * 
	t≤g_öf›p
;

967 
	#PNG_UINT_31_MAX
 ((
≤g_uöt_32
)0x7fffffffL)

	)

968 
	#PNG_UINT_32_MAX
 ((
≤g_uöt_32
)(-1))

	)

969 
	#PNG_SIZE_MAX
 ((
≤g_size_t
)(-1))

	)

970 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

972 
	#PNG_MAX_UINT
 
PNG_UINT_31_MAX


	)

977 
	#PNG_COLOR_MASK_PALETTE
 1

	)

978 
	#PNG_COLOR_MASK_COLOR
 2

	)

979 
	#PNG_COLOR_MASK_ALPHA
 4

	)

982 
	#PNG_COLOR_TYPE_GRAY
 0

	)

983 
	#PNG_COLOR_TYPE_PALETTE
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_PALETTE
)

	)

984 
	#PNG_COLOR_TYPE_RGB
 (
PNG_COLOR_MASK_COLOR
)

	)

985 
	#PNG_COLOR_TYPE_RGB_ALPHA
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_ALPHA
)

	)

986 
	#PNG_COLOR_TYPE_GRAY_ALPHA
 (
PNG_COLOR_MASK_ALPHA
)

	)

988 
	#PNG_COLOR_TYPE_RGBA
 
PNG_COLOR_TYPE_RGB_ALPHA


	)

989 
	#PNG_COLOR_TYPE_GA
 
PNG_COLOR_TYPE_GRAY_ALPHA


	)

992 
	#PNG_COMPRESSION_TYPE_BASE
 0

	)

993 
	#PNG_COMPRESSION_TYPE_DEFAULT
 
PNG_COMPRESSION_TYPE_BASE


	)

996 
	#PNG_FILTER_TYPE_BASE
 0

	)

997 
	#PNG_INTRAPIXEL_DIFFERENCING
 64

	)

998 
	#PNG_FILTER_TYPE_DEFAULT
 
PNG_FILTER_TYPE_BASE


	)

1001 
	#PNG_INTERLACE_NONE
 0

	)

1002 
	#PNG_INTERLACE_ADAM7
 1

	)

1003 
	#PNG_INTERLACE_LAST
 2

	)

1006 
	#PNG_OFFSET_PIXEL
 0

	)

1007 
	#PNG_OFFSET_MICROMETER
 1

	)

1008 
	#PNG_OFFSET_LAST
 2

	)

1011 
	#PNG_EQUATION_LINEAR
 0

	)

1012 
	#PNG_EQUATION_BASE_E
 1

	)

1013 
	#PNG_EQUATION_ARBITRARY
 2

	)

1014 
	#PNG_EQUATION_HYPERBOLIC
 3

	)

1015 
	#PNG_EQUATION_LAST
 4

	)

1018 
	#PNG_SCALE_UNKNOWN
 0

	)

1019 
	#PNG_SCALE_METER
 1

	)

1020 
	#PNG_SCALE_RADIAN
 2

	)

1021 
	#PNG_SCALE_LAST
 3

	)

1024 
	#PNG_RESOLUTION_UNKNOWN
 0

	)

1025 
	#PNG_RESOLUTION_METER
 1

	)

1026 
	#PNG_RESOLUTION_LAST
 2

	)

1029 
	#PNG_sRGB_INTENT_PERCEPTUAL
 0

	)

1030 
	#PNG_sRGB_INTENT_RELATIVE
 1

	)

1031 
	#PNG_sRGB_INTENT_SATURATION
 2

	)

1032 
	#PNG_sRGB_INTENT_ABSOLUTE
 3

	)

1033 
	#PNG_sRGB_INTENT_LAST
 4

	)

1036 
	#PNG_KEYWORD_MAX_LENGTH
 79

	)

1039 
	#PNG_MAX_PALETTE_LENGTH
 256

	)

1046 
	#PNG_INFO_gAMA
 0x0001

	)

1047 
	#PNG_INFO_sBIT
 0x0002

	)

1048 
	#PNG_INFO_cHRM
 0x0004

	)

1049 
	#PNG_INFO_PLTE
 0x0008

	)

1050 
	#PNG_INFO_tRNS
 0x0010

	)

1051 
	#PNG_INFO_bKGD
 0x0020

	)

1052 
	#PNG_INFO_hIST
 0x0040

	)

1053 
	#PNG_INFO_pHYs
 0x0080

	)

1054 
	#PNG_INFO_oFFs
 0x0100

	)

1055 
	#PNG_INFO_tIME
 0x0200

	)

1056 
	#PNG_INFO_pCAL
 0x0400

	)

1057 
	#PNG_INFO_sRGB
 0x0800

	)

1058 
	#PNG_INFO_iCCP
 0x1000

	)

1059 
	#PNG_INFO_sPLT
 0x2000

	)

1060 
	#PNG_INFO_sCAL
 0x4000

	)

1061 
	#PNG_INFO_IDAT
 0x8000L

	)

1067 
	s≤g_row_öfo_°ru˘


1069 
≤g_uöt_32
 
width
;

1070 
≤g_uöt_32
 
rowbyãs
;

1071 
≤g_byã
 
cﬁ‹_ty≥
;

1072 
≤g_byã
 
bô_dïth
;

1073 
≤g_byã
 
ch™√ls
;

1074 
≤g_byã
 
pixñ_dïth
;

1075 } 
	t≤g_row_öfo
;

1077 
≤g_row_öfo
 
	tFAR
 * 
	t≤g_row_öf›
;

1078 
≤g_row_öfo
 
	tFAR
 * FAR * 
	t≤g_row_öf›p
;

1086 
≤g_°ru˘_def
 
	t≤g_°ru˘
;

1087 
≤g_°ru˘
 
	tFAR
 * 
	t≤g_°ru˘p
;

1089 (
PNGAPI
 *
	t≤g_îr‹_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_c⁄°_ch¨p
));

1090 (
PNGAPI
 *
	t≤g_rw_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
, 
	t≤g_size_t
));

1091 (
PNGAPI
 *
	t≤g_Êush_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1092 (
PNGAPI
 *
	t≤g_ªad_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1094 (
PNGAPI
 *
	t≤g_wrôe_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1097 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1098 (
PNGAPI
 *
	t≤g_¥ogªssive_öfo_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1099 (
PNGAPI
 *
	t≤g_¥ogªssive_íd_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1100 (
PNGAPI
 *
	t≤g_¥ogªssive_row_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
,

1101 
	t≤g_uöt_32
, ));

1104 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1105 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1106 
deföed
(
PNG_LEGACY_SUPPORTED
)

1107 (
PNGAPI
 *
	t≤g_u£r_å™sf‹m_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
,

1108 
	t≤g_row_öf›
, 
	t≤g_byãp
));

1111 #i‡
deföed
(
PNG_USER_CHUNKS_SUPPORTED
)

1112 (
PNGAPI
 *
	t≤g_u£r_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_unknown_chunkp
));

1114 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

1115 (
PNGAPI
 *
	t≤g_unknown_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1119 
	#PNG_TRANSFORM_IDENTITY
 0x0000

	)

1120 
	#PNG_TRANSFORM_STRIP_16
 0x0001

	)

1121 
	#PNG_TRANSFORM_STRIP_ALPHA
 0x0002

	)

1122 
	#PNG_TRANSFORM_PACKING
 0x0004

	)

1123 
	#PNG_TRANSFORM_PACKSWAP
 0x0008

	)

1124 
	#PNG_TRANSFORM_EXPAND
 0x0010

	)

1125 
	#PNG_TRANSFORM_INVERT_MONO
 0x0020

	)

1126 
	#PNG_TRANSFORM_SHIFT
 0x0040

	)

1127 
	#PNG_TRANSFORM_BGR
 0x0080

	)

1128 
	#PNG_TRANSFORM_SWAP_ALPHA
 0x0100

	)

1129 
	#PNG_TRANSFORM_SWAP_ENDIAN
 0x0200

	)

1130 
	#PNG_TRANSFORM_INVERT_ALPHA
 0x0400

	)

1131 
	#PNG_TRANSFORM_STRIP_FILLER
 0x0800

	)

1134 
	#PNG_FLAG_MNG_EMPTY_PLTE
 0x01

	)

1135 
	#PNG_FLAG_MNG_FILTER_64
 0x04

	)

1136 
	#PNG_ALL_MNG_FEATURES
 0x05

	)

1138 
≤g_voidp
 (*
	t≤g_mÆloc_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_size_t
));

1139 (*
≤g_‰ì_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_voidp
));

1148 
	s≤g_°ru˘_def


1150 #ifde‡
PNG_SETJMP_SUPPORTED


1151 
jmp_buf
 
jmpbuf
;

1153 
≤g_îr‹_±r
 
îr‹_‚
;

1154 
≤g_îr‹_±r
 
w¨nög_‚
;

1155 
≤g_voidp
 
îr‹_±r
;

1156 
≤g_rw_±r
 
wrôe_d©a_‚
;

1157 
≤g_rw_±r
 
ªad_d©a_‚
;

1158 
≤g_voidp
 
io_±r
;

1160 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
)

1161 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
;

1164 #i‡
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1165 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
;

1169 #i‡
deföed
(
PNG_USER_TRANSFORM_PTR_SUPPORTED
)

1170 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1171 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1172 
≤g_voidp
 
u£r_å™sf‹m_±r
;

1173 
≤g_byã
 
u£r_å™sf‹m_dïth
;

1174 
≤g_byã
 
u£r_å™sf‹m_ch™√ls
;

1178 
≤g_uöt_32
 
mode
;

1179 
≤g_uöt_32
 
Êags
;

1180 
≤g_uöt_32
 
å™sf‹m©i⁄s
;

1182 
z_°ªam
 
z°ªam
;

1183 
≤g_byãp
 
zbuf
;

1184 
≤g_size_t
 
zbuf_size
;

1185 
zlib_Àvñ
;

1186 
zlib_mëhod
;

1187 
zlib_wödow_bôs
;

1188 
zlib_mem_Àvñ
;

1189 
zlib_°øãgy
;

1191 
≤g_uöt_32
 
width
;

1192 
≤g_uöt_32
 
height
;

1193 
≤g_uöt_32
 
num_rows
;

1194 
≤g_uöt_32
 
u§_width
;

1195 
≤g_uöt_32
 
rowbyãs
;

1196 
≤g_uöt_32
 
úowbyãs
;

1197 
≤g_uöt_32
 
iwidth
;

1198 
≤g_uöt_32
 
row_numbî
;

1199 
≤g_byãp
 
¥ev_row
;

1200 
≤g_byãp
 
row_buf
;

1201 #i‚de‡
PNG_NO_WRITE_FILTERING


1202 
≤g_byãp
 
sub_row
;

1203 
≤g_byãp
 
up_row
;

1204 
≤g_byãp
 
avg_row
;

1205 
≤g_byãp
 
∑ëh_row
;

1207 
≤g_row_öfo
 
row_öfo
;

1209 
≤g_uöt_32
 
id©_size
;

1210 
≤g_uöt_32
 
¸c
;

1211 
≤g_cﬁ‹p
 
∑Àâe
;

1212 
≤g_uöt_16
 
num_∑Àâe
;

1213 
≤g_uöt_16
 
num_å™s
;

1214 
≤g_byã
 
chunk_«me
[5];

1215 
≤g_byã
 
com¥essi⁄
;

1216 
≤g_byã
 
fûãr
;

1217 
≤g_byã
 
öãæa˚d
;

1218 
≤g_byã
 
∑ss
;

1219 
≤g_byã
 
do_fûãr
;

1220 
≤g_byã
 
cﬁ‹_ty≥
;

1221 
≤g_byã
 
bô_dïth
;

1222 
≤g_byã
 
u§_bô_dïth
;

1223 
≤g_byã
 
pixñ_dïth
;

1224 
≤g_byã
 
ch™√ls
;

1225 
≤g_byã
 
u§_ch™√ls
;

1226 
≤g_byã
 
sig_byãs
;

1228 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1229 #ifde‡
PNG_LEGACY_SUPPORTED


1230 
≤g_byã
 
fûÀr
;

1232 
≤g_uöt_16
 
fûÀr
;

1236 #i‡
deföed
(
PNG_bKGD_SUPPORTED
)

1237 
≤g_byã
 
background_gamma_ty≥
;

1238 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1239 
background_gamma
;

1241 
≤g_cﬁ‹_16
 
background
;

1242 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

1243 
≤g_cﬁ‹_16
 
background_1
;

1247 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

1248 
≤g_Êush_±r
 
ouçut_Êush_‚
;

1249 
≤g_uöt_32
 
Êush_di°
;

1250 
≤g_uöt_32
 
Êush_rows
;

1253 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1254 
gamma_shi·
;

1255 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1256 
gamma
;

1257 
s¸ìn_gamma
;

1261 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1262 
≤g_byãp
 
gamma_èbÀ
;

1263 
≤g_byãp
 
gamma_‰om_1
;

1264 
≤g_byãp
 
gamma_to_1
;

1265 
≤g_uöt_16µ
 
gamma_16_èbÀ
;

1266 
≤g_uöt_16µ
 
gamma_16_‰om_1
;

1267 
≤g_uöt_16µ
 
gamma_16_to_1
;

1270 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_sBIT_SUPPORTED
)

1271 
≤g_cﬁ‹_8
 
sig_bô
;

1274 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1275 
≤g_cﬁ‹_8
 
shi·
;

1278 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) \

1279 || 
deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1280 
≤g_byãp
 
å™s
;

1281 
≤g_cﬁ‹_16
 
å™s_vÆues
;

1284 
≤g_ªad_°©us_±r
 
ªad_row_‚
;

1285 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
;

1286 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1287 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
;

1288 
≤g_¥ogªssive_row_±r
 
row_‚
;

1289 
≤g_¥ogªssive_íd_±r
 
íd_‚
;

1290 
≤g_byãp
 
ßve_buf„r_±r
;

1291 
≤g_byãp
 
ßve_buf„r
;

1292 
≤g_byãp
 
cuºít_buf„r_±r
;

1293 
≤g_byãp
 
cuºít_buf„r
;

1294 
≤g_uöt_32
 
push_Àngth
;

1295 
≤g_uöt_32
 
skù_Àngth
;

1296 
≤g_size_t
 
ßve_buf„r_size
;

1297 
≤g_size_t
 
ßve_buf„r_max
;

1298 
≤g_size_t
 
buf„r_size
;

1299 
≤g_size_t
 
cuºít_buf„r_size
;

1300 
¥o˚ss_mode
;

1301 
cur_∑Àâe
;

1303 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

1304 
≤g_size_t
 
cuºít_ãxt_size
;

1305 
≤g_size_t
 
cuºít_ãxt_À·
;

1306 
≤g_ch¨p
 
cuºít_ãxt
;

1307 
≤g_ch¨p
 
cuºít_ãxt_±r
;

1311 #i‡
deföed
(
__TURBOC__
Ë&& !deföed(
_Wödows
Ë&& !deföed(
__FLAT__
)

1313 
≤g_byãµ
 
off£t_èbÀ_±r
;

1314 
≤g_byãp
 
off£t_èbÀ
;

1315 
≤g_uöt_16
 
off£t_èbÀ_numbî
;

1316 
≤g_uöt_16
 
off£t_èbÀ_cou¡
;

1317 
≤g_uöt_16
 
off£t_èbÀ_cou¡_‰ì
;

1320 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

1321 
≤g_byãp
 
∑Àâe_lookup
;

1322 
≤g_byãp
 
dôhî_ödex
;

1325 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
Ë|| deföed(
PNG_hIST_SUPPORTED
)

1326 
≤g_uöt_16p
 
hi°
;

1329 #i‡
deföed
(
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
)

1330 
≤g_byã
 
heuri°ic_mëhod
;

1331 
≤g_byã
 
num_¥ev_fûãrs
;

1332 
≤g_byãp
 
¥ev_fûãrs
;

1333 
≤g_uöt_16p
 
fûãr_weights
;

1334 
≤g_uöt_16p
 
öv_fûãr_weights
;

1335 
≤g_uöt_16p
 
fûãr_co°s
;

1336 
≤g_uöt_16p
 
öv_fûãr_co°s
;

1339 #i‡
deföed
(
PNG_TIME_RFC1123_SUPPORTED
)

1340 
≤g_ch¨p
 
time_buf„r
;

1345 #ifde‡
PNG_FREE_ME_SUPPORTED


1346 
≤g_uöt_32
 
‰ì_me
;

1349 #i‡
deföed
(
PNG_USER_CHUNKS_SUPPORTED
)

1350 
≤g_voidp
 
u£r_chunk_±r
;

1351 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
;

1354 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

1355 
num_chunk_li°
;

1356 
≤g_byãp
 
chunk_li°
;

1360 #i‡
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

1361 
≤g_byã
 
rgb_to_gøy_°©us
;

1363 
≤g_uöt_16
 
rgb_to_gøy_ªd_c€ff
;

1364 
≤g_uöt_16
 
rgb_to_gøy_gªí_c€ff
;

1365 
≤g_uöt_16
 
rgb_to_gøy_blue_c€ff
;

1369 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
) || \

1370 
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1371 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1373 #ifde‡
PNG_1_0_X


1374 
≤g_byã
 
mng_„©uªs_≥rmôãd
;

1376 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
;

1381 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1382 
≤g_fixed_poöt
 
öt_gamma
;

1386 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
)

1387 
≤g_byã
 
fûãr_ty≥
;

1390 #i‡
deföed
(
PNG_1_0_X
)

1392 
≤g_uöt_32
 
row_buf_size
;

1396 #i‡
deföed
(
PNG_ASSEMBLER_CODE_SUPPORTED
)

1397 #i‡!
deföed
(
PNG_1_0_X
)

1398 #i‡
deföed
(
PNG_MMX_CODE_SUPPORTED
)

1399 
≤g_byã
 
mmx_bôdïth_thªshﬁd
;

1400 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
;

1402 
≤g_uöt_32
 
asm_Êags
;

1407 #ifde‡
PNG_USER_MEM_SUPPORTED


1408 
≤g_voidp
 
mem_±r
;

1409 
≤g_mÆloc_±r
 
mÆloc_‚
;

1410 
≤g_‰ì_±r
 
‰ì_‚
;

1414 
≤g_byãp
 
big_row_buf
;

1416 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

1418 
≤g_byãp
 
dôhî_s‹t
;

1419 
≤g_byãp
 
ödex_to_∑Àâe
;

1421 
≤g_byãp
 
∑Àâe_to_ödex
;

1426 
≤g_byã
 
com¥essi⁄_ty≥
;

1428 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1429 
≤g_uöt_32
 
u£r_width_max
;

1430 
≤g_uöt_32
 
u£r_height_max
;

1434 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

1436 
≤g_unknown_chunk
 
unknown_chunk
;

1440 
≤g_uöt_32
 
ﬁd_big_row_buf_size
, 
ﬁd_¥ev_row_size
;

1447 
≤g_°ru˘p
 
	tvîsi⁄_1_2_27
;

1449 
≤g_°ru˘
 
	tFAR
 * FAR * 
	t≤g_°ru˘µ
;

1458 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_ac˚ss_vîsi⁄_numbî
Ë
PNGARG
(());

1463 
PNG_EXPORT
(,
≤g_£t_sig_byãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1464 
num_byãs
));

1471 
PNG_EXPORT
(,
≤g_sig_cmp
Ë
PNGARG
((
≤g_byãp
 
sig
, 
≤g_size_t
 
°¨t
,

1472 
≤g_size_t
 
num_to_check
));

1477 
PNG_EXPORT
(,
≤g_check_sig
Ë
PNGARG
((
≤g_byãp
 
sig
, 
num
));

1480 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘
)

1481 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1482 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
));

1485 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘
)

1486 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1487 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
));

1489 #ifde‡
PNG_WRITE_SUPPORTED


1490 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_com¥essi⁄_buf„r_size
)

1491 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1494 #ifde‡
PNG_WRITE_SUPPORTED


1495 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_buf„r_size
)

1496 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
size
));

1500 
PNG_EXPORT
(,
≤g_ª£t_z°ªam
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1503 #ifde‡
PNG_USER_MEM_SUPPORTED


1504 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘_2
)

1505 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1506 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1507 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1508 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘_2
)

1509 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1510 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1511 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1515 
PNG_EXPORT
(,
≤g_wrôe_chunk
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1516 
≤g_byãp
 
chunk_«me
,Öng_byã∞
d©a
, 
≤g_size_t
 
Àngth
));

1519 
PNG_EXPORT
(,
≤g_wrôe_chunk_°¨t
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1520 
≤g_byãp
 
chunk_«me
, 
≤g_uöt_32
 
Àngth
));

1523 
PNG_EXPORT
(,
≤g_wrôe_chunk_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1524 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

1527 
PNG_EXPORT
(,
≤g_wrôe_chunk_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1530 
PNG_EXPORT
(
≤g_öf›
,
≤g_¸óã_öfo_°ru˘
)

1531 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1533 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1535 
PNG_EXPORT
(,
≤g_öfo_öô
Ë
PNGARG
((
≤g_öf›
 
öfo_±r
));

1536 #unde‡
≤g_öfo_öô


1537 
	#≤g_öfo_öô
(
öfo_±r
Ë
	`≤g_öfo_öô_3
(&info_ptr,\

1538 
	`≤g_sizeof
(
≤g_öfo
));

	)

1541 
PNG_EXPORT
(,
≤g_öfo_öô_3
Ë
PNGARG
((
≤g_öf›p
 
öfo_±r
,

1542 
≤g_size_t
 
≤g_öfo_°ru˘_size
));

1545 
PNG_EXPORT
(,
≤g_wrôe_öfo_bef‹e_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1546 
≤g_öf›
 
öfo_±r
));

1547 
PNG_EXPORT
(,
≤g_wrôe_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1548 
≤g_öf›
 
öfo_±r
));

1550 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1552 
PNG_EXPORT
(,
≤g_ªad_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1553 
≤g_öf›
 
öfo_±r
));

1556 #i‡
deföed
(
PNG_TIME_RFC1123_SUPPORTED
)

1557 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_c⁄vît_to_rfc1123
)

1558 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_timï
 
±ime
));

1561 #i‡!
deföed
(
_WIN32_WCE
)

1563 #i‡
deföed
(
PNG_WRITE_tIME_SUPPORTED
)

1565 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_°ru˘_tm
Ë
PNGARG
((
≤g_timï
 
±ime
,

1566 
tm
 
FAR
 * 
âime
));

1569 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_time_t
Ë
PNGARG
((
≤g_timï
 
±ime
,

1570 
time_t
 
âime
));

1574 #i‡
deföed
(
PNG_READ_EXPAND_SUPPORTED
)

1576 
PNG_EXPORT
(,
≤g_£t_ex∑nd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1577 #i‡!
deföed
(
PNG_1_0_X
)

1578 
PNG_EXPORT
(,
≤g_£t_ex∑nd_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p


1579 
≤g_±r
));

1581 
PNG_EXPORT
(,
≤g_£t_∑Àâe_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1582 
PNG_EXPORT
(,
≤g_£t_tRNS_to_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1583 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1585 
PNG_EXPORT
(,
≤g_£t_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1589 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

1591 
PNG_EXPORT
(,
≤g_£t_bgr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1594 #i‡
deföed
(
PNG_READ_GRAY_TO_RGB_SUPPORTED
)

1596 
PNG_EXPORT
(,
≤g_£t_gøy_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1599 #i‡
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

1601 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1602 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1603 
îr‹_a˘i⁄
, 
ªd
, 
gªí
 ));

1605 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1606 
îr‹_a˘i⁄
, 
≤g_fixed_poöt
 
ªd
,Öng_fixed_poöà
gªí
 ));

1607 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_rgb_to_gøy_°©us
Ë
PNGARG
((
≤g_°ru˘p


1608 
≤g_±r
));

1611 
PNG_EXPORT
(,
≤g_buûd_gøysˇÀ_∑Àâe
Ë
PNGARG
((
bô_dïth
,

1612 
≤g_cﬁ‹p
 
∑Àâe
));

1614 #i‡
deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

1615 
PNG_EXPORT
(,
≤g_£t_°rù_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1618 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
) || \

1619 
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

1620 
PNG_EXPORT
(,
≤g_£t_sw≠_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1623 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
) || \

1624 
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

1625 
PNG_EXPORT
(,
≤g_£t_övît_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1628 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1630 
PNG_EXPORT
(,
≤g_£t_fûÀr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1631 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1633 
	#PNG_FILLER_BEFORE
 0

	)

1634 
	#PNG_FILLER_AFTER
 1

	)

1636 #i‡!
deföed
(
PNG_1_0_X
)

1637 
PNG_EXPORT
(,
≤g_£t_add_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1638 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1642 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

1644 
PNG_EXPORT
(,
≤g_£t_sw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1647 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

1649 
PNG_EXPORT
(,
≤g_£t_∑ckög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1652 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

1654 
PNG_EXPORT
(,
≤g_£t_∑cksw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1657 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1659 
PNG_EXPORT
(,
≤g_£t_shi·
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1660 
≤g_cﬁ‹_8p
 
åue_bôs
));

1663 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
) || \

1664 
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

1666 
PNG_EXPORT
(,
≤g_£t_öãæa˚_h™dlög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1669 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

1671 
PNG_EXPORT
(,
≤g_£t_övît_m⁄o
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1674 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

1676 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1677 
PNG_EXPORT
(,
≤g_£t_background
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1678 
≤g_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

1679 
√ed_ex∑nd
, 
background_gamma
));

1681 
	#PNG_BACKGROUND_GAMMA_UNKNOWN
 0

	)

1682 
	#PNG_BACKGROUND_GAMMA_SCREEN
 1

	)

1683 
	#PNG_BACKGROUND_GAMMA_FILE
 2

	)

1684 
	#PNG_BACKGROUND_GAMMA_UNIQUE
 3

	)

1687 #i‡
deföed
(
PNG_READ_16_TO_8_SUPPORTED
)

1689 
PNG_EXPORT
(,
≤g_£t_°rù_16
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1692 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

1694 
PNG_EXPORT
(,
≤g_£t_dôhî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1695 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
, 
maximum_cﬁ‹s
,

1696 
≤g_uöt_16p
 
hi°ogøm
, 
fuŒ_dôhî
));

1699 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

1701 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1702 
PNG_EXPORT
(,
≤g_£t_gamma
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1703 
s¸ìn_gamma
, 
deÁu…_fûe_gamma
));

1707 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1708 #i‡
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1709 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1712 
PNG_EXPORT
(,
≤g_≥rmô_em±y_∂ã
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1713 
em±y_∂ã_≥rmôãd
));

1717 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

1719 
PNG_EXPORT
(,
≤g_£t_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
ƒows
));

1721 
PNG_EXPORT
(,
≤g_wrôe_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1725 
PNG_EXPORT
(,
≤g_°¨t_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1728 
PNG_EXPORT
(,
≤g_ªad_upd©e_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1729 
≤g_öf›
 
öfo_±r
));

1731 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1733 
PNG_EXPORT
(,
≤g_ªad_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1734 
≤g_byãµ
 
row
,Öng_byãµ 
di•œy_row
, 
≤g_uöt_32
 
num_rows
));

1737 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1739 
PNG_EXPORT
(,
≤g_ªad_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1740 
≤g_byãp
 
row
,

1741 
≤g_byãp
 
di•œy_row
));

1744 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1746 
PNG_EXPORT
(,
≤g_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1747 
≤g_byãµ
 
image
));

1751 
PNG_EXPORT
(,
≤g_wrôe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1752 
≤g_byãp
 
row
));

1755 
PNG_EXPORT
(,
≤g_wrôe_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1756 
≤g_byãµ
 
row
, 
≤g_uöt_32
 
num_rows
));

1759 
PNG_EXPORT
(,
≤g_wrôe_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1760 
≤g_byãµ
 
image
));

1763 
PNG_EXPORT
(,
≤g_wrôe_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1764 
≤g_öf›
 
öfo_±r
));

1766 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1768 
PNG_EXPORT
(,
≤g_ªad_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1769 
≤g_öf›
 
öfo_±r
));

1773 
PNG_EXPORT
(,
≤g_de°roy_öfo_°ru˘
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1774 
≤g_öf›p
 
öfo_±r_±r
));

1777 
PNG_EXPORT
(,
≤g_de°roy_ªad_°ru˘
Ë
PNGARG
((
≤g_°ru˘µ


1778 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
,Öng_öf›∞
íd_öfo_±r_±r
));

1782 
PNG_EXPORT
(,
≤g_ªad_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

1783 
≤g_öf›
 
íd_öfo_±r
));

1786 
PNG_EXPORT
(,
≤g_de°roy_wrôe_°ru˘
)

1787 
PNGARG
((
≤g_°ru˘µ
 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
));

1791 
PNG_EXPORT
(,
≤g_wrôe_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1794 
PNG_EXPORT
(,
≤g_£t_¸c_a˘i⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1795 
¸ô_a˘i⁄
, 
™cû_a˘i⁄
));

1806 
	#PNG_CRC_DEFAULT
 0

	)

1807 
	#PNG_CRC_ERROR_QUIT
 1

	)

1808 
	#PNG_CRC_WARN_DISCARD
 2

	)

1809 
	#PNG_CRC_WARN_USE
 3

	)

1810 
	#PNG_CRC_QUIET_USE
 4

	)

1811 
	#PNG_CRC_NO_CHANGE
 5

	)

1824 
PNG_EXPORT
(,
≤g_£t_fûãr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mëhod
,

1825 
fûãrs
));

1832 
	#PNG_NO_FILTERS
 0x00

	)

1833 
	#PNG_FILTER_NONE
 0x08

	)

1834 
	#PNG_FILTER_SUB
 0x10

	)

1835 
	#PNG_FILTER_UP
 0x20

	)

1836 
	#PNG_FILTER_AVG
 0x40

	)

1837 
	#PNG_FILTER_PAETH
 0x80

	)

1838 
	#PNG_ALL_FILTERS
 (
PNG_FILTER_NONE
 | 
PNG_FILTER_SUB
 | 
PNG_FILTER_UP
 | \

1839 
PNG_FILTER_AVG
 | 
PNG_FILTER_PAETH
)

	)

1844 
	#PNG_FILTER_VALUE_NONE
 0

	)

1845 
	#PNG_FILTER_VALUE_SUB
 1

	)

1846 
	#PNG_FILTER_VALUE_UP
 2

	)

1847 
	#PNG_FILTER_VALUE_AVG
 3

	)

1848 
	#PNG_FILTER_VALUE_PAETH
 4

	)

1849 
	#PNG_FILTER_VALUE_LAST
 5

	)

1851 #i‡
deföed
(
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
)

1880 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1881 
PNG_EXPORT
(,
≤g_£t_fûãr_heuri°ics
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1882 
heuri°ic_mëhod
, 
num_weights
, 
≤g_doubÀp
 
fûãr_weights
,

1883 
≤g_doubÀp
 
fûãr_co°s
));

1890 
	#PNG_FILTER_HEURISTIC_DEFAULT
 0

	)

1891 
	#PNG_FILTER_HEURISTIC_UNWEIGHTED
 1

	)

1892 
	#PNG_FILTER_HEURISTIC_WEIGHTED
 2

	)

1893 
	#PNG_FILTER_HEURISTIC_LAST
 3

	)

1902 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_Àvñ
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1903 
Àvñ
));

1905 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mem_Àvñ
)

1906 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mem_Àvñ
));

1908 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_°øãgy
)

1909 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
°øãgy
));

1911 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_wödow_bôs
)

1912 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
wödow_bôs
));

1914 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mëhod
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1915 
mëhod
));

1926 #i‡!
deföed
(
PNG_NO_STDIO
)

1928 
PNG_EXPORT
(,
≤g_öô_io
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_FILE_p
 
Â
));

1939 
PNG_EXPORT
(,
≤g_£t_îr‹_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1940 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨nög_‚
));

1943 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_îr‹_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1950 
PNG_EXPORT
(,
≤g_£t_wrôe_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1951 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
wrôe_d©a_‚
, 
≤g_Êush_±r
 
ouçut_Êush_‚
));

1954 
PNG_EXPORT
(,
≤g_£t_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1955 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
ªad_d©a_‚
));

1958 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_io_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1960 
PNG_EXPORT
(,
≤g_£t_ªad_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1961 
≤g_ªad_°©us_±r
 
ªad_row_‚
));

1963 
PNG_EXPORT
(,
≤g_£t_wrôe_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1964 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
));

1966 #ifde‡
PNG_USER_MEM_SUPPORTED


1968 
PNG_EXPORT
(,
≤g_£t_mem_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1969 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1971 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_mem_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1974 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1975 
deföed
(
PNG_LEGACY_SUPPORTED
)

1976 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


1977 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
));

1980 #i‡
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1981 
deföed
(
PNG_LEGACY_SUPPORTED
)

1982 
PNG_EXPORT
(,
≤g_£t_wrôe_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


1983 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
));

1986 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1987 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1988 
deföed
(
PNG_LEGACY_SUPPORTED
)

1989 
PNG_EXPORT
(,
≤g_£t_u£r_å™sf‹m_öfo
Ë
PNGARG
((
≤g_°ru˘p


1990 
≤g_±r
, 
≤g_voidp
 
u£r_å™sf‹m_±r
, 
u£r_å™sf‹m_dïth
,

1991 
u£r_å™sf‹m_ch™√ls
));

1993 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_å™sf‹m_±r
)

1994 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1997 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1998 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_chunk_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1999 
≤g_voidp
 
u£r_chunk_±r
, 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
));

2000 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_chunk_±r
Ë
PNGARG
((
≤g_°ru˘p


2001 
≤g_±r
));

2004 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


2008 
PNG_EXPORT
(,
≤g_£t_¥ogªssive_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2009 
≤g_voidp
 
¥ogªssive_±r
,

2010 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
, 
≤g_¥ogªssive_row_±r
 
row_‚
,

2011 
≤g_¥ogªssive_íd_±r
 
íd_‚
));

2014 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_¥ogªssive_±r
)

2015 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2018 
PNG_EXPORT
(,
≤g_¥o˚ss_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2019 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_size
));

2024 
PNG_EXPORT
(,
≤g_¥ogªssive_comböe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2025 
≤g_byãp
 
ﬁd_row
,Öng_byã∞
√w_row
));

2028 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2029 
≤g_uöt_32
 
size
));

2031 #i‡
deföed
(
PNG_1_0_X
)

2032 
	#≤g_mÆloc_w¨n
 
≤g_mÆloc


	)

2035 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_w¨n
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2036 
≤g_uöt_32
 
size
));

2040 
PNG_EXPORT
(,
≤g_‰ì
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_voidp
 
±r
));

2042 #i‡
deföed
(
PNG_1_0_X
)

2044 
PNG_EXPORT
(
voidpf
,
≤g_zÆloc
Ë
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
,

2045 
uI¡
 
size
));

2048 
PNG_EXPORT
(,
≤g_z‰ì
Ë
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
));

2052 
PNG_EXPORT
(,
≤g_‰ì_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2053 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
‰ì_me
, 
num
));

2054 #ifde‡
PNG_FREE_ME_SUPPORTED


2057 
PNG_EXPORT
(,
≤g_d©a_‰ìr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2058 
≤g_öf›
 
öfo_±r
, 
‰ìr
, 
≤g_uöt_32
 
mask
));

2061 
	#PNG_DESTROY_WILL_FREE_DATA
 1

	)

2062 
	#PNG_SET_WILL_FREE_DATA
 1

	)

2063 
	#PNG_USER_WILL_FREE_DATA
 2

	)

2065 
	#PNG_FREE_HIST
 0x0008

	)

2066 
	#PNG_FREE_ICCP
 0x0010

	)

2067 
	#PNG_FREE_SPLT
 0x0020

	)

2068 
	#PNG_FREE_ROWS
 0x0040

	)

2069 
	#PNG_FREE_PCAL
 0x0080

	)

2070 
	#PNG_FREE_SCAL
 0x0100

	)

2071 
	#PNG_FREE_UNKN
 0x0200

	)

2072 
	#PNG_FREE_LIST
 0x0400

	)

2073 
	#PNG_FREE_PLTE
 0x1000

	)

2074 
	#PNG_FREE_TRNS
 0x2000

	)

2075 
	#PNG_FREE_TEXT
 0x4000

	)

2076 
	#PNG_FREE_ALL
 0x7fff

	)

2077 
	#PNG_FREE_MUL
 0x4220

	)

2079 #ifde‡
PNG_USER_MEM_SUPPORTED


2080 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2081 
≤g_uöt_32
 
size
));

2082 
PNG_EXPORT
(,
≤g_‰ì_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2083 
≤g_voidp
 
±r
));

2086 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem˝y_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2087 
≤g_voidp
 
s1
,Öng_void∞
s2
, 
≤g_uöt_32
 
size
));

2089 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem£t_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2090 
≤g_voidp
 
s1
, 
vÆue
, 
≤g_uöt_32
 
size
));

2092 #i‡
deföed
(
USE_FAR_KEYWORD
)

2093 *
≤g_Ár_to_√¨
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,
≤g_voidp
 
±r
,

2094 
check
));

2097 #i‚de‡
PNG_NO_ERROR_TEXT


2099 
PNG_EXPORT
(,
≤g_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2100 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
));

2103 
PNG_EXPORT
(,
≤g_chunk_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2104 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
));

2107 
PNG_EXPORT
(,
≤g_îr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2110 #i‚de‡
PNG_NO_WARNINGS


2112 
PNG_EXPORT
(,
≤g_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2113 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2115 #ifde‡
PNG_READ_SUPPORTED


2117 
PNG_EXPORT
(,
≤g_chunk_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2118 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2135 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_vÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2136 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Êag
));

2139 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_rowbyãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2140 
≤g_öf›
 
öfo_±r
));

2142 #i‡
deföed
(
PNG_INFO_IMAGE_SUPPORTED
)

2145 
PNG_EXPORT
(
≤g_byãµ
,
≤g_gë_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2146 
≤g_öf›
 
öfo_±r
));

2149 
PNG_EXPORT
(,
≤g_£t_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2150 
≤g_öf›
 
öfo_±r
, 
≤g_byãµ
 
row_poöãrs
));

2154 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_ch™√ls
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2155 
≤g_öf›
 
öfo_±r
));

2157 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


2159 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_width
Ë
PNGARG
((
≤g_°ru˘p


2160 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2163 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_height
Ë
PNGARG
((
≤g_°ru˘p


2164 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2167 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_bô_dïth
Ë
PNGARG
((
≤g_°ru˘p


2168 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2171 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_cﬁ‹_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2172 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2175 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_fûãr_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2176 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2179 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_öãæa˚_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2180 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2183 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_com¥essi⁄_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2184 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2187 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2188 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2189 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_x_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2190 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2191 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_y_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2192 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2195 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2196 
PNG_EXPORT
(, 
≤g_gë_pixñ_a•e˘_øtio
Ë
PNGARG
((
≤g_°ru˘p


2197 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2201 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2202 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2203 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2204 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2205 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2206 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2207 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2208 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2213 
PNG_EXPORT
(
≤g_byãp
,
≤g_gë_sig«tuª
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2214 
≤g_öf›
 
öfo_±r
));

2216 #i‡
deföed
(
PNG_bKGD_SUPPORTED
)

2217 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2218 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 *
background
));

2221 #i‡
deföed
(
PNG_bKGD_SUPPORTED
)

2222 
PNG_EXPORT
(,
≤g_£t_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2223 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 
background
));

2226 #i‡
deföed
(
PNG_cHRM_SUPPORTED
)

2227 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2228 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2229 
≤g_öf›
 
öfo_±r
, *
whôe_x
, *
whôe_y
, *
ªd_x
,

2230 *
ªd_y
, *
gªí_x
, *
gªí_y
, *
blue_x
,

2231 *
blue_y
));

2233 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2234 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2235 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_whôe_x
,Öng_fixed_point

2236 *
öt_whôe_y
, 
≤g_fixed_poöt
 *
öt_ªd_x
,Öng_fixed_poöà*
öt_ªd_y
,

2237 
≤g_fixed_poöt
 *
öt_gªí_x
,Öng_fixed_poöà*
öt_gªí_y
,Öng_fixed_point

2238 *
öt_blue_x
, 
≤g_fixed_poöt
 *
öt_blue_y
));

2242 #i‡
deföed
(
PNG_cHRM_SUPPORTED
)

2243 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2244 
PNG_EXPORT
(,
≤g_£t_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2245 
≤g_öf›
 
öfo_±r
, 
whôe_x
, 
whôe_y
, 
ªd_x
,

2246 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
));

2248 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2249 
PNG_EXPORT
(,
≤g_£t_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2250 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

2251 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

2252 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

2253 
≤g_fixed_poöt
 
öt_blue_y
));

2257 #i‡
deföed
(
PNG_gAMA_SUPPORTED
)

2258 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2259 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2260 
≤g_öf›
 
öfo_±r
, *
fûe_gamma
));

2262 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2263 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_fûe_gamma
));

2266 #i‡
deföed
(
PNG_gAMA_SUPPORTED
)

2267 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2268 
PNG_EXPORT
(,
≤g_£t_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2269 
≤g_öf›
 
öfo_±r
, 
fûe_gamma
));

2271 
PNG_EXPORT
(,
≤g_£t_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2272 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_fûe_gamma
));

2275 #i‡
deföed
(
PNG_hIST_SUPPORTED
)

2276 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2277 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 *
hi°
));

2280 #i‡
deföed
(
PNG_hIST_SUPPORTED
)

2281 
PNG_EXPORT
(,
≤g_£t_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2282 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 
hi°
));

2285 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2286 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
width
,Öng_uöt_32 *
height
,

2287 *
bô_dïth
, *
cﬁ‹_ty≥
, *
öãæa˚_mëhod
,

2288 *
com¥essi⁄_mëhod
, *
fûãr_mëhod
));

2290 
PNG_EXPORT
(,
≤g_£t_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2291 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

2292 
cﬁ‹_ty≥
, 
öãæa˚_mëhod
, 
com¥essi⁄_mëhod
,

2293 
fûãr_mëhod
));

2295 #i‡
deföed
(
PNG_oFFs_SUPPORTED
)

2296 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2297 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 *
off£t_x
,Öng_öt_32 *
off£t_y
,

2298 *
unô_ty≥
));

2301 #i‡
deföed
(
PNG_oFFs_SUPPORTED
)

2302 
PNG_EXPORT
(,
≤g_£t_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2303 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 
off£t_x
,Öng_öt_32 
off£t_y
,

2304 
unô_ty≥
));

2307 #i‡
deföed
(
PNG_pCAL_SUPPORTED
)

2308 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2309 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 *
puΩo£
, 
≤g_öt_32
 *
X0
,Öng_öt_32 *
X1
,

2310 *
ty≥
, *
≈¨ams
, 
≤g_ch¨p
 *
unôs
, 
≤g_ch¨µ
 *
∑øms
));

2313 #i‡
deföed
(
PNG_pCAL_SUPPORTED
)

2314 
PNG_EXPORT
(,
≤g_£t_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2315 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
,

2316 
ty≥
, 
≈¨ams
, 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

2319 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

2320 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2321 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

2324 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

2325 
PNG_EXPORT
(,
≤g_£t_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2326 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
ªs_x
,Öng_uöt_32 
ªs_y
, 
unô_ty≥
));

2329 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2330 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 *
∑Àâe
, *
num_∑Àâe
));

2332 
PNG_EXPORT
(,
≤g_£t_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2333 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

2335 #i‡
deföed
(
PNG_sBIT_SUPPORTED
)

2336 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2337 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 *
sig_bô
));

2340 #i‡
deföed
(
PNG_sBIT_SUPPORTED
)

2341 
PNG_EXPORT
(,
≤g_£t_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2342 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 
sig_bô
));

2345 #i‡
deföed
(
PNG_sRGB_SUPPORTED
)

2346 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2347 
≤g_öf›
 
öfo_±r
, *
öã¡
));

2350 #i‡
deföed
(
PNG_sRGB_SUPPORTED
)

2351 
PNG_EXPORT
(,
≤g_£t_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2352 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2353 
PNG_EXPORT
(,
≤g_£t_sRGB_gAMA_™d_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2354 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2357 #i‡
deföed
(
PNG_iCCP_SUPPORTED
)

2358 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2359 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨µ
 
«me
, *
com¥essi⁄_ty≥
,

2360 
≤g_ch¨µ
 
¥ofûe
, 
≤g_uöt_32
 *
¥oÊí
));

2364 #i‡
deföed
(
PNG_iCCP_SUPPORTED
)

2365 
PNG_EXPORT
(,
≤g_£t_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2366 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

2367 
≤g_ch¨p
 
¥ofûe
, 
≤g_uöt_32
 
¥oÊí
));

2371 #i‡
deföed
(
PNG_sPLT_SUPPORTED
)

2372 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2373 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_çp
 
íåõs
));

2376 #i‡
deföed
(
PNG_sPLT_SUPPORTED
)

2377 
PNG_EXPORT
(,
≤g_£t_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2378 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_ç
 
íåõs
, 
√¡rõs
));

2381 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

2383 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2384 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 *
ãxt_±r
, *
num_ãxt
));

2395 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

2396 
PNG_EXPORT
(,
≤g_£t_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2397 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
));

2400 #i‡
deföed
(
PNG_tIME_SUPPORTED
)

2401 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2402 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 *
mod_time
));

2405 #i‡
deföed
(
PNG_tIME_SUPPORTED
)

2406 
PNG_EXPORT
(,
≤g_£t_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2407 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 
mod_time
));

2410 #i‡
deföed
(
PNG_tRNS_SUPPORTED
)

2411 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2412 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 *
å™s
, *
num_å™s
,

2413 
≤g_cﬁ‹_16p
 *
å™s_vÆues
));

2416 #i‡
deföed
(
PNG_tRNS_SUPPORTED
)

2417 
PNG_EXPORT
(,
≤g_£t_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2418 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
å™s
, 
num_å™s
,

2419 
≤g_cﬁ‹_16p
 
å™s_vÆues
));

2422 #i‡
deföed
(
PNG_tRNS_SUPPORTED
)

2425 #i‡
deföed
(
PNG_sCAL_SUPPORTED
)

2426 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2427 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2428 
≤g_öf›
 
öfo_±r
, *
unô
, *
width
, *
height
));

2430 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2431 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2432 
≤g_öf›
 
öfo_±r
, *
unô
, 
≤g_ch¨µ
 
swidth
,Öng_ch¨µ 
sheight
));

2437 #i‡
deföed
(
PNG_sCAL_SUPPORTED
)

2438 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2439 
PNG_EXPORT
(,
≤g_£t_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2440 
≤g_öf›
 
öfo_±r
, 
unô
, 
width
, 
height
));

2442 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2443 
PNG_EXPORT
(,
≤g_£t_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2444 
≤g_öf›
 
öfo_±r
, 
unô
, 
≤g_ch¨p
 
swidth
,Öng_ch¨∞
sheight
));

2449 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

2459 
PNG_EXPORT
(, 
≤g_£t_kìp_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2460 
≤g_±r
, 
kìp
, 
≤g_byãp
 
chunk_li°
, 
num_chunks
));

2461 
PNG_EXPORT
(, 
≤g_£t_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2462 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkp
 
unknowns
, 
num_unknowns
));

2463 
PNG_EXPORT
(, 
≤g_£t_unknown_chunk_loˇti⁄
)

2464 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
chunk
, 
loˇti⁄
));

2465 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2466 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkµ
 
íåõs
));

2468 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2469 
PNG_EXPORT
(,
≤g_h™dÀ_as_unknown
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp


2470 
chunk_«me
));

2476 
PNG_EXPORT
(, 
≤g_£t_övÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2477 
≤g_öf›
 
öfo_±r
, 
mask
));

2479 #i‡
deföed
(
PNG_INFO_IMAGE_SUPPORTED
)

2481 
PNG_EXPORT
(, 
≤g_ªad_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2482 
≤g_öf›
 
öfo_±r
,

2483 
å™sf‹ms
,

2484 
≤g_voidp
 
∑øms
));

2485 
PNG_EXPORT
(, 
≤g_wrôe_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2486 
≤g_öf›
 
öfo_±r
,

2487 
å™sf‹ms
,

2488 
≤g_voidp
 
∑øms
));

2496 #ifde‡
PNG_DEBUG


2497 #i‡(
PNG_DEBUG
 > 0)

2498 #i‡!
deföed
(
PNG_DEBUG_FILE
Ë&& deföed(
_MSC_VER
)

2499 
	~<¸tdbg.h
>

2500 #i‡(
PNG_DEBUG
 > 1)

2501 
	#≤g_debug
(
l
,
m
Ë
	`_RPT0
(
_CRT_WARN
,m)

	)

2502 
	#≤g_debug1
(
l
,
m
,
p1
Ë
	`_RPT1
(
_CRT_WARN
,m,p1)

	)

2503 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
Ë
	`_RPT2
(
_CRT_WARN
,m,p1,p2)

	)

2506 #i‚de‡
PNG_DEBUG_FILE


2507 
	#PNG_DEBUG_FILE
 
°dîr


	)

2509 #i‡(
PNG_DEBUG
 > 1)

2510 
	#≤g_debug
(
l
,
m
) \

2512 
num_èbs
=
l
; \

2513 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
,(
num_èbs
==1 ? "\t" : \

2514 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":"")))); \

2515 }

	)

2516 
	#≤g_debug1
(
l
,
m
,
p1
) \

2518 
num_èbs
=
l
; \

2519 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
,(
num_èbs
==1 ? "\t" : \

2520 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
); \

2521 }

	)

2522 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

2524 
num_èbs
=
l
; \

2525 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
,(
num_èbs
==1 ? "\t" : \

2526 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
,
p2
); \

2527 }

	)

2532 #i‚de‡
≤g_debug


2533 
	#≤g_debug
(
l
, 
m
)

	)

2535 #i‚de‡
≤g_debug1


2536 
	#≤g_debug1
(
l
, 
m
, 
p1
)

	)

2538 #i‚de‡
≤g_debug2


2539 
	#≤g_debug2
(
l
, 
m
, 
p1
, 
p2
)

	)

2542 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_c›yright
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2543 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2544 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vîsi⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2545 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_lib≤g_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2547 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


2548 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_≥rmô_mng_„©uªs
Ë
PNGARG
((
≤g_°ru˘p


2549 
≤g_±r
, 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
));

2553 
	#PNG_HANDLE_CHUNK_AS_DEFAULT
 0

	)

2554 
	#PNG_HANDLE_CHUNK_NEVER
 1

	)

2555 
	#PNG_HANDLE_CHUNK_IF_SAFE
 2

	)

2556 
	#PNG_HANDLE_CHUNK_ALWAYS
 3

	)

2559 #i‡
deföed
(
PNG_ASSEMBLER_CODE_SUPPORTED
)

2560 #i‡
deföed
(
PNG_MMX_CODE_SUPPORTED
)

2561 
	#PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 0x01

	)

2562 
	#PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 0x02

	)

2563 
	#PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 0x04

	)

2564 
	#PNG_ASM_FLAG_MMX_READ_INTERLACE
 0x08

	)

2565 
	#PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 0x10

	)

2566 
	#PNG_ASM_FLAG_MMX_READ_FILTER_UP
 0x20

	)

2567 
	#PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 0x40

	)

2568 
	#PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 0x80

	)

2569 
	#PNG_ASM_FLAGS_INITIALIZED
 0x80000000

	)

2571 
	#PNG_MMX_READ_FLAGS
 ( 
PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 \

2572 | 
PNG_ASM_FLAG_MMX_READ_INTERLACE
 \

2573 | 
PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 \

2574 | 
PNG_ASM_FLAG_MMX_READ_FILTER_UP
 \

2575 | 
PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 \

2576 | 
PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 )

	)

2577 
	#PNG_MMX_WRITE_FLAGS
 ( 0 )

	)

2579 
	#PNG_MMX_FLAGS
 ( 
PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 \

2580 | 
PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 \

2581 | 
PNG_MMX_READ_FLAGS
 \

2582 | 
PNG_MMX_WRITE_FLAGS
 )

	)

2584 
	#PNG_SELECT_READ
 1

	)

2585 
	#PNG_SELECT_WRITE
 2

	)

2588 #i‡!
deföed
(
PNG_1_0_X
)

2590 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_Êagmask
)

2591 
PNGARG
((
Êag_£À˘
, *
compûîID
));

2594 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êagmask
)

2595 
PNGARG
((
Êag_£À˘
));

2598 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êags
)

2599 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2602 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_mmx_bôdïth_thªshﬁd
)

2603 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2606 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_rowbyãs_thªshﬁd
)

2607 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2610 
PNG_EXPORT
(,
≤g_£t_asm_Êags
)

2611 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
asm_Êags
));

2614 
PNG_EXPORT
(,
≤g_£t_mmx_thªshﬁds
)

2615 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byã
 
mmx_bôdïth_thªshﬁd
,

2616 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
));

2620 #i‡!
deföed
(
PNG_1_0_X
)

2622 
PNG_EXPORT
(,
≤g_mmx_suµ‹t
Ë
PNGARG
(());

2627 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


2628 
PNG_EXPORT
(,
≤g_£t_°rù_îr‹_numbîs
Ë
PNGARG
((
≤g_°ru˘p


2629 
≤g_±r
, 
≤g_uöt_32
 
°rù_mode
));

2635 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2636 
PNG_EXPORT
(,
≤g_£t_u£r_limôs
Ë
PNGARG
((
≤g_°ru˘p


2637 
≤g_±r
, 
≤g_uöt_32
 
u£r_width_max
,Öng_uöt_32 
u£r_height_max
));

2638 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_width_max
Ë
PNGARG
((
≤g_°ru˘p


2639 
≤g_±r
));

2640 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_height_max
Ë
PNGARG
((
≤g_°ru˘p


2641 
≤g_±r
));

2646 #ifde‡
PNG_READ_COMPOSITE_NODIV_SUPPORTED


2661 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2662 { 
≤g_uöt_16
 
ãmp
 = (≤g_uöt_16)(’ng_uöt_16)(
fg
Ë* (≤g_uöt_16)(
Æpha
) \

2663 + (
≤g_uöt_16
)(
bg
)*(png_uint_16)(255 - \

2664 (
≤g_uöt_16
)(
Æpha
)) + (png_uint_16)128); \

2665 (
composôe
Ë(
≤g_byã
)((
ãmp
 + (ãm∞>> 8)Ë>> 8); }

	)

2667 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2668 { 
≤g_uöt_32
 
ãmp
 = (≤g_uöt_32)(’ng_uöt_32)(
fg
Ë* (≤g_uöt_32)(
Æpha
) \

2669 + (
≤g_uöt_32
)(
bg
)*(png_uint_32)(65535L - \

2670 (
≤g_uöt_32
)(
Æpha
)) + (png_uint_32)32768L); \

2671 (
composôe
Ë(
≤g_uöt_16
)((
ãmp
 + (ãm∞>> 16)Ë>> 16); }

	)

2675 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2676 (
composôe
Ë(
≤g_byã
)(((
≤g_uöt_16
)(
fg
Ë* (≤g_uöt_16)(
Æpha
) + \

2677 (
≤g_uöt_16
)(
bg
Ë* (≤g_uöt_16)(255 - (≤g_uöt_16)(
Æpha
)) + \

2678 (
≤g_uöt_16
)127Ë/ 255)

	)

2680 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2681 (
composôe
Ë(
≤g_uöt_16
)(((
≤g_uöt_32
)(
fg
Ë* (≤g_uöt_32)(
Æpha
) + \

2682 (
≤g_uöt_32
)(
bg
)*’ng_uöt_32)(65535L - (≤g_uöt_32)(
Æpha
)) + \

2683 (
≤g_uöt_32
)32767Ë/ (≤g_uöt_32)65535L)

	)

2695 #i‡
deföed
(
PNG_READ_BIG_ENDIAN_SUPPORTED
)

2696 
	#≤g_gë_uöt_32
(
buf
Ë–*((
≤g_uöt_32p
Ë(buf)))

	)

2697 
	#≤g_gë_uöt_16
(
buf
Ë–*((
≤g_uöt_16p
Ë(buf)))

	)

2698 
	#≤g_gë_öt_32
(
buf
Ë–*((
≤g_öt_32p
Ë(buf)))

	)

2700 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2701 
PNG_EXPORT
(
≤g_uöt_16
,
≤g_gë_uöt_16
Ë
PNGARG
((
≤g_byãp
 
buf
));

2702 
PNG_EXPORT
(
≤g_öt_32
,
≤g_gë_öt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2704 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_31
)

2705 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
));

2710 
PNG_EXPORT
(,
≤g_ßve_uöt_32
)

2711 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_uöt_32
 
i
));

2712 
PNG_EXPORT
(,
≤g_ßve_öt_32
)

2713 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_öt_32
 
i
));

2719 
PNG_EXPORT
(,
≤g_ßve_uöt_16
)

2720 
PNGARG
((
≤g_byãp
 
buf
, 
i
));

2735 
	#PNG_HAVE_IHDR
 0x01

	)

2736 
	#PNG_HAVE_PLTE
 0x02

	)

2737 
	#PNG_HAVE_IDAT
 0x04

	)

2738 
	#PNG_AFTER_IDAT
 0x08

	)

2739 
	#PNG_HAVE_IEND
 0x10

	)

2741 #i‡
deföed
(
PNG_INTERNAL
)

2746 
	#PNG_HAVE_gAMA
 0x20

	)

2747 
	#PNG_HAVE_cHRM
 0x40

	)

2748 
	#PNG_HAVE_sRGB
 0x80

	)

2749 
	#PNG_HAVE_CHUNK_HEADER
 0x100

	)

2750 
	#PNG_WROTE_tIME
 0x200

	)

2751 
	#PNG_WROTE_INFO_BEFORE_PLTE
 0x400

	)

2752 
	#PNG_BACKGROUND_IS_GRAY
 0x800

	)

2753 
	#PNG_HAVE_PNG_SIGNATURE
 0x1000

	)

2754 
	#PNG_HAVE_CHUNK_AFTER_IDAT
 0x2000

	)

2757 
	#PNG_BGR
 0x0001

	)

2758 
	#PNG_INTERLACE
 0x0002

	)

2759 
	#PNG_PACK
 0x0004

	)

2760 
	#PNG_SHIFT
 0x0008

	)

2761 
	#PNG_SWAP_BYTES
 0x0010

	)

2762 
	#PNG_INVERT_MONO
 0x0020

	)

2763 
	#PNG_DITHER
 0x0040

	)

2764 
	#PNG_BACKGROUND
 0x0080

	)

2765 
	#PNG_BACKGROUND_EXPAND
 0x0100

	)

2767 
	#PNG_16_TO_8
 0x0400

	)

2768 
	#PNG_RGBA
 0x0800

	)

2769 
	#PNG_EXPAND
 0x1000

	)

2770 
	#PNG_GAMMA
 0x2000

	)

2771 
	#PNG_GRAY_TO_RGB
 0x4000

	)

2772 
	#PNG_FILLER
 0x8000L

	)

2773 
	#PNG_PACKSWAP
 0x10000L

	)

2774 
	#PNG_SWAP_ALPHA
 0x20000L

	)

2775 
	#PNG_STRIP_ALPHA
 0x40000L

	)

2776 
	#PNG_INVERT_ALPHA
 0x80000L

	)

2777 
	#PNG_USER_TRANSFORM
 0x100000L

	)

2778 
	#PNG_RGB_TO_GRAY_ERR
 0x200000L

	)

2779 
	#PNG_RGB_TO_GRAY_WARN
 0x400000L

	)

2780 
	#PNG_RGB_TO_GRAY
 0x600000L

	)

2782 
	#PNG_ADD_ALPHA
 0x1000000L

	)

2783 
	#PNG_EXPAND_tRNS
 0x2000000L

	)

2791 
	#PNG_STRUCT_PNG
 0x0001

	)

2792 
	#PNG_STRUCT_INFO
 0x0002

	)

2795 
	#PNG_WEIGHT_SHIFT
 8

	)

2796 
	#PNG_WEIGHT_FACTOR
 (1<<(
PNG_WEIGHT_SHIFT
))

	)

2797 
	#PNG_COST_SHIFT
 3

	)

2798 
	#PNG_COST_FACTOR
 (1<<(
PNG_COST_SHIFT
))

	)

2801 
	#PNG_FLAG_ZLIB_CUSTOM_STRATEGY
 0x0001

	)

2802 
	#PNG_FLAG_ZLIB_CUSTOM_LEVEL
 0x0002

	)

2803 
	#PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL
 0x0004

	)

2804 
	#PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS
 0x0008

	)

2805 
	#PNG_FLAG_ZLIB_CUSTOM_METHOD
 0x0010

	)

2806 
	#PNG_FLAG_ZLIB_FINISHED
 0x0020

	)

2807 
	#PNG_FLAG_ROW_INIT
 0x0040

	)

2808 
	#PNG_FLAG_FILLER_AFTER
 0x0080

	)

2809 
	#PNG_FLAG_CRC_ANCILLARY_USE
 0x0100

	)

2810 
	#PNG_FLAG_CRC_ANCILLARY_NOWARN
 0x0200

	)

2811 
	#PNG_FLAG_CRC_CRITICAL_USE
 0x0400

	)

2812 
	#PNG_FLAG_CRC_CRITICAL_IGNORE
 0x0800

	)

2813 
	#PNG_FLAG_FREE_PLTE
 0x1000

	)

2814 
	#PNG_FLAG_FREE_TRNS
 0x2000

	)

2815 
	#PNG_FLAG_FREE_HIST
 0x4000

	)

2816 
	#PNG_FLAG_KEEP_UNKNOWN_CHUNKS
 0x8000L

	)

2817 
	#PNG_FLAG_KEEP_UNSAFE_CHUNKS
 0x10000L

	)

2818 
	#PNG_FLAG_LIBRARY_MISMATCH
 0x20000L

	)

2819 
	#PNG_FLAG_STRIP_ERROR_NUMBERS
 0x40000L

	)

2820 
	#PNG_FLAG_STRIP_ERROR_TEXT
 0x80000L

	)

2821 
	#PNG_FLAG_MALLOC_NULL_MEM_OK
 0x100000L

	)

2822 
	#PNG_FLAG_ADD_ALPHA
 0x200000L

	)

2823 
	#PNG_FLAG_STRIP_ALPHA
 0x400000L

	)

2833 
	#PNG_FLAG_CRC_ANCILLARY_MASK
 (
PNG_FLAG_CRC_ANCILLARY_USE
 | \

2834 
PNG_FLAG_CRC_ANCILLARY_NOWARN
)

	)

2836 
	#PNG_FLAG_CRC_CRITICAL_MASK
 (
PNG_FLAG_CRC_CRITICAL_USE
 | \

2837 
PNG_FLAG_CRC_CRITICAL_IGNORE
)

	)

2839 
	#PNG_FLAG_CRC_MASK
 (
PNG_FLAG_CRC_ANCILLARY_MASK
 | \

2840 
PNG_FLAG_CRC_CRITICAL_MASK
)

	)

2844 
	#PNG_COLOR_DIST
(
c1
, 
c2
Ë(
	`abs
(()((c1).
ªd
) - ()((c2).red)) + \

2845 
	`abs
(()((
c1
).
gªí
Ë- ()((
c2
).green)) + \

2846 
	`abs
(()((
c1
).
blue
Ë- ()((
c2
).blue)))

	)

2849 
	#PNG_ROWBYTES
(
pixñ_bôs
, 
width
) \

2850 ((
pixñ_bôs
) >= 8 ? \

2851 ((
width
Ë* (((
≤g_uöt_32
)(
pixñ_bôs
)) >> 3)) : \

2852 (–((
width
Ë* ((
≤g_uöt_32
)(
pixñ_bôs
))Ë+ 7Ë>> 3Ë)

	)

2858 
	#PNG_OUT_OF_RANGE
(
vÆue
, 
idól
, 
dñè
) \

2859 –(
vÆue
Ë< (
idól
)-(
dñè
Ë|| (vÆueË> (idól)+(dñèË)

	)

2862 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

2864 #ifde‡
PNG_USE_GLOBAL_ARRAYS


2865 
PNG_EXPORT_VAR
 (
PNG_CONST
 
≤g_byã
 
FARDATA
Ë
	g≤g_sig
[8];

2874 
	#PNG_IHDR
 
≤g_byã
 
≤g_IHDR
[5] = { 73, 72, 68, 82, '\0'}

	)

2875 
	#PNG_IDAT
 
≤g_byã
 
≤g_IDAT
[5] = { 73, 68, 65, 84, '\0'}

	)

2876 
	#PNG_IEND
 
≤g_byã
 
≤g_IEND
[5] = { 73, 69, 78, 68, '\0'}

	)

2877 
	#PNG_PLTE
 
≤g_byã
 
≤g_PLTE
[5] = { 80, 76, 84, 69, '\0'}

	)

2878 
	#PNG_bKGD
 
≤g_byã
 
≤g_bKGD
[5] = { 98, 75, 71, 68, '\0'}

	)

2879 
	#PNG_cHRM
 
≤g_byã
 
≤g_cHRM
[5] = { 99, 72, 82, 77, '\0'}

	)

2880 
	#PNG_gAMA
 
≤g_byã
 
≤g_gAMA
[5] = {103, 65, 77, 65, '\0'}

	)

2881 
	#PNG_hIST
 
≤g_byã
 
≤g_hIST
[5] = {104, 73, 83, 84, '\0'}

	)

2882 
	#PNG_iCCP
 
≤g_byã
 
≤g_iCCP
[5] = {105, 67, 67, 80, '\0'}

	)

2883 
	#PNG_iTXt
 
≤g_byã
 
≤g_iTXt
[5] = {105, 84, 88, 116, '\0'}

	)

2884 
	#PNG_oFFs
 
≤g_byã
 
≤g_oFFs
[5] = {111, 70, 70, 115, '\0'}

	)

2885 
	#PNG_pCAL
 
≤g_byã
 
≤g_pCAL
[5] = {112, 67, 65, 76, '\0'}

	)

2886 
	#PNG_sCAL
 
≤g_byã
 
≤g_sCAL
[5] = {115, 67, 65, 76, '\0'}

	)

2887 
	#PNG_pHYs
 
≤g_byã
 
≤g_pHYs
[5] = {112, 72, 89, 115, '\0'}

	)

2888 
	#PNG_sBIT
 
≤g_byã
 
≤g_sBIT
[5] = {115, 66, 73, 84, '\0'}

	)

2889 
	#PNG_sPLT
 
≤g_byã
 
≤g_sPLT
[5] = {115, 80, 76, 84, '\0'}

	)

2890 
	#PNG_sRGB
 
≤g_byã
 
≤g_sRGB
[5] = {115, 82, 71, 66, '\0'}

	)

2891 
	#PNG_tEXt
 
≤g_byã
 
≤g_tEXt
[5] = {116, 69, 88, 116, '\0'}

	)

2892 
	#PNG_tIME
 
≤g_byã
 
≤g_tIME
[5] = {116, 73, 77, 69, '\0'}

	)

2893 
	#PNG_tRNS
 
≤g_byã
 
≤g_tRNS
[5] = {116, 82, 78, 83, '\0'}

	)

2894 
	#PNG_zTXt
 
≤g_byã
 
≤g_zTXt
[5] = {122, 84, 88, 116, '\0'}

	)

2896 #ifde‡
PNG_USE_GLOBAL_ARRAYS


2897 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IHDR
[5];

2898 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IDAT
[5];

2899 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IEND
[5];

2900 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_PLTE
[5];

2901 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_bKGD
[5];

2902 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_cHRM
[5];

2903 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_gAMA
[5];

2904 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_hIST
[5];

2905 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iCCP
[5];

2906 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iTXt
[5];

2907 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_oFFs
[5];

2908 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pCAL
[5];

2909 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sCAL
[5];

2910 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pHYs
[5];

2911 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sBIT
[5];

2912 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sPLT
[5];

2913 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sRGB
[5];

2914 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tEXt
[5];

2915 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tIME
[5];

2916 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tRNS
[5];

2917 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_zTXt
[5];

2920 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

2924 
PNG_EXPORT
(,
≤g_ªad_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2925 #unde‡
≤g_ªad_öô


2926 
	#≤g_ªad_öô
(
≤g_±r
Ë
	`≤g_ªad_öô_3
(&png_ptr, \

2927 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

2930 
PNG_EXPORT
(,
≤g_ªad_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

2931 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

2932 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

2933 
PNG_EXPORT
(,
≤g_ªad_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2934 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

2935 
≤g_öfo_size
));

2938 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

2942 
PNG_EXPORT
(,
≤g_wrôe_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2943 #unde‡
≤g_wrôe_öô


2944 
	#≤g_wrôe_öô
(
≤g_±r
Ë
	`≤g_wrôe_öô_3
(&png_ptr, \

2945 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

2948 
PNG_EXPORT
(,
≤g_wrôe_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

2949 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

2950 
PNG_EXPORT
(,
≤g_wrôe_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2951 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

2952 
≤g_öfo_size
));

2955 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘
 
PNGARG
((
ty≥
));

2958 
PNG_EXTERN
 
≤g_de°roy_°ru˘
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
));

2960 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘_2
 
PNGARG
((
ty≥
, 
≤g_mÆloc_±r


2961 
mÆloc_‚
, 
≤g_voidp
 
mem_±r
));

2962 
PNG_EXTERN
 
≤g_de°roy_°ru˘_2
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
,

2963 
≤g_‰ì_±r
 
‰ì_‚
, 
≤g_voidp
 
mem_±r
));

2966 
PNG_EXTERN
 
≤g_öfo_de°roy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2967 
≤g_öf›
 
öfo_±r
));

2969 #i‚de‡
PNG_1_0_X


2971 
PNG_EXTERN
 
voidpf
 
≤g_zÆloc
 
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
, uI¡ 
size
));

2974 
PNG_EXTERN
 
≤g_z‰ì
 
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
));

2976 #ifde‡
PNG_SIZE_T


2978 
PNG_EXTERN
 
≤g_size_t
 
PNGAPI
 
≤g_c⁄vît_size
 
PNGARG
((
size_t
 
size
));

2984 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2985 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

2987 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


2988 
PNG_EXTERN
 
PNGAPI
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2989 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
));

2992 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2993 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

2995 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

2996 #i‡!
deföed
(
PNG_NO_STDIO
)

2997 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3001 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3002 
PNG_EXTERN
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3003 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
));

3008 
PNG_EXTERN
 
≤g_ª£t_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3011 
PNG_EXTERN
 
≤g_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3012 
≤g_size_t
 
Àngth
));

3015 
PNG_EXTERN
 
≤g_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3016 
≤g_size_t
 
Àngth
));

3019 
PNG_EXTERN
 
≤g_¸c_ªad
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
,

3020 
≤g_size_t
 
Àngth
));

3023 #i‡
deföed
(
PNG_zTXt_SUPPORTED
Ë|| deföed(
PNG_iTXt_SUPPORTED
) || \

3024 
deföed
(
PNG_iCCP_SUPPORTED
Ë|| deföed(
PNG_sPLT_SUPPORTED
)

3025 
PNG_EXTERN
 
≤g_ch¨p
 
≤g_decom¥ess_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3026 
comp_ty≥
, 
≤g_ch¨p
 
chunkd©a
, 
≤g_size_t
 
chunkÀngth
,

3027 
≤g_size_t
 
¥efix_Àngth
,Öng_size_à*
d©a_Àngth
));

3031 
PNG_EXTERN
 
≤g_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
skù
));

3034 
PNG_EXTERN
 
≤g_¸c_îr‹
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3040 
PNG_EXTERN
 
≤g_ˇlcuœã_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
±r
,

3041 
≤g_size_t
 
Àngth
));

3043 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

3044 
PNG_EXTERN
 
≤g_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3048 
PNG_EXTERN
 
≤g_wrôe_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3055 
PNG_EXTERN
 
≤g_wrôe_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
width
,

3056 
≤g_uöt_32
 
height
,

3057 
bô_dïth
, 
cﬁ‹_ty≥
, 
com¥essi⁄_mëhod
, 
fûãr_mëhod
,

3058 
öãæa˚_mëhod
));

3060 
PNG_EXTERN
 
≤g_wrôe_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹p
 
∑Àâe
,

3061 
≤g_uöt_32
 
num_∑l
));

3063 
PNG_EXTERN
 
≤g_wrôe_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3064 
≤g_size_t
 
Àngth
));

3066 
PNG_EXTERN
 
≤g_wrôe_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3068 #i‡
deföed
(
PNG_WRITE_gAMA_SUPPORTED
)

3069 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3070 
PNG_EXTERN
 
≤g_wrôe_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
fûe_gamma
));

3072 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3073 
PNG_EXTERN
 
≤g_wrôe_gAMA_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_fixed_poöt


3074 
fûe_gamma
));

3078 #i‡
deföed
(
PNG_WRITE_sBIT_SUPPORTED
)

3079 
PNG_EXTERN
 
≤g_wrôe_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹_8p
 
sbô
,

3080 
cﬁ‹_ty≥
));

3083 #i‡
deföed
(
PNG_WRITE_cHRM_SUPPORTED
)

3084 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3085 
PNG_EXTERN
 
≤g_wrôe_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3086 
whôe_x
, 
whôe_y
,

3087 
ªd_x
, 
ªd_y
, 
gªí_x
, 
gªí_y
,

3088 
blue_x
, 
blue_y
));

3090 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3091 
PNG_EXTERN
 
≤g_wrôe_cHRM_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3092 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

3093 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

3094 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

3095 
≤g_fixed_poöt
 
öt_blue_y
));

3099 #i‡
deföed
(
PNG_WRITE_sRGB_SUPPORTED
)

3100 
PNG_EXTERN
 
≤g_wrôe_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3101 
öã¡
));

3104 #i‡
deföed
(
PNG_WRITE_iCCP_SUPPORTED
)

3105 
PNG_EXTERN
 
≤g_wrôe_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3106 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

3107 
≤g_ch¨p
 
¥ofûe
, 
¥oÊí
));

3111 #i‡
deföed
(
PNG_WRITE_sPLT_SUPPORTED
)

3112 
PNG_EXTERN
 
≤g_wrôe_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3113 
≤g_sPLT_ç
 
∑Àâe
));

3116 #i‡
deföed
(
PNG_WRITE_tRNS_SUPPORTED
)

3117 
PNG_EXTERN
 
≤g_wrôe_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
å™s
,

3118 
≤g_cﬁ‹_16p
 
vÆues
, 
numbî
, 
cﬁ‹_ty≥
));

3121 #i‡
deföed
(
PNG_WRITE_bKGD_SUPPORTED
)

3122 
PNG_EXTERN
 
≤g_wrôe_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3123 
≤g_cﬁ‹_16p
 
vÆues
, 
cﬁ‹_ty≥
));

3126 #i‡
deföed
(
PNG_WRITE_hIST_SUPPORTED
)

3127 
PNG_EXTERN
 
≤g_wrôe_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_16p
 
hi°
,

3128 
num_hi°
));

3131 #i‡
deföed
(
PNG_WRITE_TEXT_SUPPORTED
Ë|| deföed(
PNG_WRITE_pCAL_SUPPORTED
) || \

3132 
deföed
(
PNG_WRITE_iCCP_SUPPORTED
Ë|| deföed(
PNG_WRITE_sPLT_SUPPORTED
)

3133 
PNG_EXTERN
 
≤g_size_t
 
≤g_check_keyw‹d
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3134 
≤g_ch¨p
 
key
, 
≤g_ch¨µ
 
√w_key
));

3137 #i‡
deföed
(
PNG_WRITE_tEXt_SUPPORTED
)

3138 
PNG_EXTERN
 
≤g_wrôe_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3139 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
));

3142 #i‡
deföed
(
PNG_WRITE_zTXt_SUPPORTED
)

3143 
PNG_EXTERN
 
≤g_wrôe_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3144 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
, 
com¥essi⁄
));

3147 #i‡
deföed
(
PNG_WRITE_iTXt_SUPPORTED
)

3148 
PNG_EXTERN
 
≤g_wrôe_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3149 
com¥essi⁄
, 
≤g_ch¨p
 
key
,Öng_ch¨∞
œng
,Öng_ch¨∞
œng_key
,

3150 
≤g_ch¨p
 
ãxt
));

3153 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

3154 
PNG_EXTERN
 
≤g_£t_ãxt_2
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3155 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
));

3158 #i‡
deföed
(
PNG_WRITE_oFFs_SUPPORTED
)

3159 
PNG_EXTERN
 
≤g_wrôe_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3160 
≤g_öt_32
 
x_off£t
,Öng_öt_32 
y_off£t
, 
unô_ty≥
));

3163 #i‡
deföed
(
PNG_WRITE_pCAL_SUPPORTED
)

3164 
PNG_EXTERN
 
≤g_wrôe_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
puΩo£
,

3165 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
, 
ty≥
, 
≈¨ams
,

3166 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

3169 #i‡
deföed
(
PNG_WRITE_pHYs_SUPPORTED
)

3170 
PNG_EXTERN
 
≤g_wrôe_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3171 
≤g_uöt_32
 
x_pixñs_≥r_unô
,Öng_uöt_32 
y_pixñs_≥r_unô
,

3172 
unô_ty≥
));

3175 #i‡
deföed
(
PNG_WRITE_tIME_SUPPORTED
)

3176 
PNG_EXTERN
 
≤g_wrôe_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3177 
≤g_timï
 
mod_time
));

3180 #i‡
deföed
(
PNG_WRITE_sCAL_SUPPORTED
)

3181 #i‡
deföed
(
PNG_FLOATING_POINT_SUPPORTED
Ë&& !deföed(
PNG_NO_STDIO
)

3182 
PNG_EXTERN
 
≤g_wrôe_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3183 
unô
, 
width
, 
height
));

3185 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3186 
PNG_EXTERN
 
≤g_wrôe_sCAL_s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3187 
unô
, 
≤g_ch¨p
 
width
,Öng_ch¨∞
height
));

3193 
PNG_EXTERN
 
≤g_wrôe_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3196 
PNG_EXTERN
 
≤g_wrôe_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3198 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

3199 
PNG_EXTERN
 
≤g_buûd_gamma_èbÀ
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3203 
PNG_EXTERN
 
≤g_comböe_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
row
,

3204 
mask
));

3206 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
)

3212 
PNG_EXTERN
 
≤g_do_ªad_öãæa˚
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3217 #i‡
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

3219 
PNG_EXTERN
 
≤g_do_wrôe_öãæa˚
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3220 
≤g_byãp
 
row
, 
∑ss
));

3224 
PNG_EXTERN
 
≤g_ªad_fûãr_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3225 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,Öng_byã∞
¥ev_row
, 
fûãr
));

3228 
PNG_EXTERN
 
≤g_wrôe_föd_fûãr
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3229 
≤g_row_öf›
 
row_öfo
));

3232 
PNG_EXTERN
 
≤g_wrôe_fûãªd_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3233 
≤g_byãp
 
fûãªd_row
));

3235 
PNG_EXTERN
 
≤g_ªad_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3238 
PNG_EXTERN
 
≤g_ªad_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3240 
PNG_EXTERN
 
≤g_ªad_å™sf‹m_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3241 
≤g_öf›
 
öfo_±r
));

3244 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
)

3245 
PNG_EXTERN
 
≤g_do_ªad_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3246 
≤g_byãp
 
row
, 
≤g_uöt_32
 
fûÀr
,Öng_uöt_32 
Êags
));

3249 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
)

3250 
PNG_EXTERN
 
≤g_do_ªad_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3251 
≤g_byãp
 
row
));

3254 #i‡
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

3255 
PNG_EXTERN
 
≤g_do_wrôe_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3256 
≤g_byãp
 
row
));

3259 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
)

3260 
PNG_EXTERN
 
≤g_do_ªad_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3261 
≤g_byãp
 
row
));

3264 #i‡
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

3265 
PNG_EXTERN
 
≤g_do_wrôe_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3266 
≤g_byãp
 
row
));

3269 #i‡
deföed
(
PNG_WRITE_FILLER_SUPPORTED
) || \

3270 
deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

3271 
PNG_EXTERN
 
≤g_do_°rù_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3272 
≤g_byãp
 
row
, 
≤g_uöt_32
 
Êags
));

3275 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

3276 
PNG_EXTERN
 
≤g_do_sw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3279 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

3280 
PNG_EXTERN
 
≤g_do_∑cksw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3283 #i‡
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

3284 
PNG_EXTERN
 
≤g_do_rgb_to_gøy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_row_öf›


3285 
row_öfo
, 
≤g_byãp
 
row
));

3288 #i‡
deföed
(
PNG_READ_GRAY_TO_RGB_SUPPORTED
)

3289 
PNG_EXTERN
 
≤g_do_gøy_to_rgb
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3290 
≤g_byãp
 
row
));

3293 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
)

3294 
PNG_EXTERN
 
≤g_do_u≈ack
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3297 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
)

3298 
PNG_EXTERN
 
≤g_do_unshi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3299 
≤g_cﬁ‹_8p
 
sig_bôs
));

3302 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

3303 
PNG_EXTERN
 
≤g_do_övît
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3306 #i‡
deföed
(
PNG_READ_16_TO_8_SUPPORTED
)

3307 
PNG_EXTERN
 
≤g_do_ch›
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3310 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

3311 
PNG_EXTERN
 
≤g_do_dôhî
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3312 
≤g_byãp
 
row
,Öng_byã∞
∑Àâe_lookup
,Öng_byã∞
dôhî_lookup
));

3314 #i‡
deföed
(
PNG_CORRECT_PALETTE_SUPPORTED
)

3315 
PNG_EXTERN
 
≤g_c‹ª˘_∑Àâe
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3316 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

3320 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

3321 
PNG_EXTERN
 
≤g_do_bgr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3324 #i‡
deföed
(
PNG_WRITE_PACK_SUPPORTED
)

3325 
PNG_EXTERN
 
≤g_do_∑ck
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3326 
≤g_byãp
 
row
, 
≤g_uöt_32
 
bô_dïth
));

3329 #i‡
deföed
(
PNG_WRITE_SHIFT_SUPPORTED
)

3330 
PNG_EXTERN
 
≤g_do_shi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3331 
≤g_cﬁ‹_8p
 
bô_dïth
));

3334 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

3335 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

3336 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3337 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
,

3338 
≤g_cﬁ‹_16p
 
background_1
,

3339 
≤g_byãp
 
gamma_èbÀ
,Öng_byã∞
gamma_‰om_1
,Öng_byã∞
gamma_to_1
,

3340 
≤g_uöt_16µ
 
gamma_16
,Öng_uöt_16µ 
gamma_16_‰om_1
,

3341 
≤g_uöt_16µ
 
gamma_16_to_1
, 
gamma_shi·
));

3343 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3344 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
));

3348 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

3349 
PNG_EXTERN
 
≤g_do_gamma
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3350 
≤g_byãp
 
gamma_èbÀ
, 
≤g_uöt_16µ
 
gamma_16_èbÀ
,

3351 
gamma_shi·
));

3354 #i‡
deföed
(
PNG_READ_EXPAND_SUPPORTED
)

3355 
PNG_EXTERN
 
≤g_do_ex∑nd_∑Àâe
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3356 
≤g_byãp
 
row
, 
≤g_cﬁ‹p
 
∑Àâe
,Öng_byã∞
å™s
, 
num_å™s
));

3357 
PNG_EXTERN
 
≤g_do_ex∑nd
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3358 
≤g_byãp
 
row
, 
≤g_cﬁ‹_16p
 
å™s_vÆue
));

3366 
PNG_EXTERN
 
≤g_h™dÀ_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3367 
≤g_uöt_32
 
Àngth
));

3368 
PNG_EXTERN
 
≤g_h™dÀ_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3369 
≤g_uöt_32
 
Àngth
));

3370 
PNG_EXTERN
 
≤g_h™dÀ_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3371 
≤g_uöt_32
 
Àngth
));

3373 #i‡
deföed
(
PNG_READ_bKGD_SUPPORTED
)

3374 
PNG_EXTERN
 
≤g_h™dÀ_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3375 
≤g_uöt_32
 
Àngth
));

3378 #i‡
deföed
(
PNG_READ_cHRM_SUPPORTED
)

3379 
PNG_EXTERN
 
≤g_h™dÀ_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3380 
≤g_uöt_32
 
Àngth
));

3383 #i‡
deföed
(
PNG_READ_gAMA_SUPPORTED
)

3384 
PNG_EXTERN
 
≤g_h™dÀ_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3385 
≤g_uöt_32
 
Àngth
));

3388 #i‡
deföed
(
PNG_READ_hIST_SUPPORTED
)

3389 
PNG_EXTERN
 
≤g_h™dÀ_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3390 
≤g_uöt_32
 
Àngth
));

3393 #i‡
deföed
(
PNG_READ_iCCP_SUPPORTED
)

3394 
≤g_h™dÀ_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3395 
≤g_uöt_32
 
Àngth
));

3398 #i‡
deföed
(
PNG_READ_iTXt_SUPPORTED
)

3399 
PNG_EXTERN
 
≤g_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3400 
≤g_uöt_32
 
Àngth
));

3403 #i‡
deföed
(
PNG_READ_oFFs_SUPPORTED
)

3404 
PNG_EXTERN
 
≤g_h™dÀ_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3405 
≤g_uöt_32
 
Àngth
));

3408 #i‡
deföed
(
PNG_READ_pCAL_SUPPORTED
)

3409 
PNG_EXTERN
 
≤g_h™dÀ_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3410 
≤g_uöt_32
 
Àngth
));

3413 #i‡
deföed
(
PNG_READ_pHYs_SUPPORTED
)

3414 
PNG_EXTERN
 
≤g_h™dÀ_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3415 
≤g_uöt_32
 
Àngth
));

3418 #i‡
deföed
(
PNG_READ_sBIT_SUPPORTED
)

3419 
PNG_EXTERN
 
≤g_h™dÀ_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3420 
≤g_uöt_32
 
Àngth
));

3423 #i‡
deföed
(
PNG_READ_sCAL_SUPPORTED
)

3424 
PNG_EXTERN
 
≤g_h™dÀ_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3425 
≤g_uöt_32
 
Àngth
));

3428 #i‡
deföed
(
PNG_READ_sPLT_SUPPORTED
)

3429 
≤g_h™dÀ_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3430 
≤g_uöt_32
 
Àngth
));

3433 #i‡
deföed
(
PNG_READ_sRGB_SUPPORTED
)

3434 
PNG_EXTERN
 
≤g_h™dÀ_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3435 
≤g_uöt_32
 
Àngth
));

3438 #i‡
deföed
(
PNG_READ_tEXt_SUPPORTED
)

3439 
PNG_EXTERN
 
≤g_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3440 
≤g_uöt_32
 
Àngth
));

3443 #i‡
deföed
(
PNG_READ_tIME_SUPPORTED
)

3444 
PNG_EXTERN
 
≤g_h™dÀ_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3445 
≤g_uöt_32
 
Àngth
));

3448 #i‡
deföed
(
PNG_READ_tRNS_SUPPORTED
)

3449 
PNG_EXTERN
 
≤g_h™dÀ_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3450 
≤g_uöt_32
 
Àngth
));

3453 #i‡
deföed
(
PNG_READ_zTXt_SUPPORTED
)

3454 
PNG_EXTERN
 
≤g_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3455 
≤g_uöt_32
 
Àngth
));

3458 
PNG_EXTERN
 
≤g_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3459 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3461 
PNG_EXTERN
 
≤g_check_chunk_«me
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3462 
≤g_byãp
 
chunk_«me
));

3465 
PNG_EXTERN
 
≤g_do_ªad_å™sf‹m©i⁄s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3466 
PNG_EXTERN
 
≤g_do_wrôe_å™sf‹m©i⁄s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3468 
PNG_EXTERN
 
≤g_öô_ªad_å™sf‹m©i⁄s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3470 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3471 
PNG_EXTERN
 
≤g_push_ªad_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3472 
≤g_öf›
 
öfo_±r
));

3473 
PNG_EXTERN
 
≤g_push_ªad_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3474 
≤g_öf›
 
öfo_±r
));

3475 
PNG_EXTERN
 
≤g_push_check_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3476 
PNG_EXTERN
 
≤g_push_¸c_skù
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3477 
≤g_uöt_32
 
Àngth
));

3478 
PNG_EXTERN
 
≤g_push_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3479 
PNG_EXTERN
 
≤g_push_ßve_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3480 
PNG_EXTERN
 
≤g_push_ª°‹e_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3481 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
));

3482 
PNG_EXTERN
 
≤g_push_ªad_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3483 
PNG_EXTERN
 
≤g_¥o˚ss_IDAT_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3484 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
));

3485 
PNG_EXTERN
 
≤g_push_¥o˚ss_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3486 
PNG_EXTERN
 
≤g_push_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3487 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3488 
PNG_EXTERN
 
≤g_push_have_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3489 
≤g_öf›
 
öfo_±r
));

3490 
PNG_EXTERN
 
≤g_push_have_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3491 
≤g_öf›
 
öfo_±r
));

3492 
PNG_EXTERN
 
≤g_push_have_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
row
));

3493 
PNG_EXTERN
 
≤g_push_ªad_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3494 
≤g_öf›
 
öfo_±r
));

3495 
PNG_EXTERN
 
≤g_¥o˚ss_some_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3496 
≤g_öf›
 
öfo_±r
));

3497 
PNG_EXTERN
 
≤g_ªad_push_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3498 #i‡
deföed
(
PNG_READ_tEXt_SUPPORTED
)

3499 
PNG_EXTERN
 
≤g_push_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3500 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3501 
PNG_EXTERN
 
≤g_push_ªad_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3502 
≤g_öf›
 
öfo_±r
));

3504 #i‡
deföed
(
PNG_READ_zTXt_SUPPORTED
)

3505 
PNG_EXTERN
 
≤g_push_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3506 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3507 
PNG_EXTERN
 
≤g_push_ªad_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3508 
≤g_öf›
 
öfo_±r
));

3510 #i‡
deföed
(
PNG_READ_iTXt_SUPPORTED
)

3511 
PNG_EXTERN
 
≤g_push_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3512 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3513 
PNG_EXTERN
 
≤g_push_ªad_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3514 
≤g_öf›
 
öfo_±r
));

3519 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


3520 
PNG_EXTERN
 
≤g_do_ªad_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3521 
≤g_byãp
 
row
));

3522 
PNG_EXTERN
 
≤g_do_wrôe_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3523 
≤g_byãp
 
row
));

3526 #i‡
deföed
(
PNG_ASSEMBLER_CODE_SUPPORTED
)

3527 #i‡
deföed
(
PNG_MMX_CODE_SUPPORTED
)

3529 
PNG_EXTERN
 
≤g_öô_mmx_Êags
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3533 #i‡
deföed
(
PNG_INCH_CONVERSIONS
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

3534 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3535 
≤g_öf›
 
öfo_±r
));

3537 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_x_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3538 
≤g_öf›
 
öfo_±r
));

3540 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_y_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3541 
≤g_öf›
 
öfo_±r
));

3543 
PNG_EXTERN
 
≤g_gë_x_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3544 
≤g_öf›
 
öfo_±r
));

3546 
PNG_EXTERN
 
≤g_gë_y_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3547 
≤g_öf›
 
öfo_±r
));

3549 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

3550 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pHYs_dpi
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3551 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

3559 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_GNU


70 
	mPTHREAD_MUTEX_STALLED_NP
,

71 
	mPTHREAD_MUTEX_ROBUST_NP


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_UNIX98


430 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

433 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

436 #ifde‡
__USE_GNU


441 
	$±hªad_yõld
 (Ë
__THROW
;

446 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

447 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3));

451 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

452 
˝u_£t_t
 *
__˝u£t
)

453 
__THROW
 
	`__n⁄nuŒ
 ((3));

466 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

467 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

478 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

482 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

485 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

490 
	`±hªad_ã°ˇn˚l
 ();

499 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

500 
__mask_was_ßved
;

501 } 
__ˇn˚l_jmp_buf
[1];

502 *
__∑d
[4];

503 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

506 #i‚de‡
__˛ónup_f˘_©åibuã


507 
	#__˛ónup_f˘_©åibuã


	)

512 
	s__±hªad_˛ónup_‰ame


514 (*
__ˇn˚l_routöe
) (*);

515 *
__ˇn˚l_¨g
;

516 
__do_ô
;

517 
__ˇn˚l_ty≥
;

520 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


521 #ifde‡
__˝lu•lus


523 ˛as†
	c__±hªad_˛ónup_˛ass


525 (*
__ˇn˚l_routöe
) (*);

526 *
__ˇn˚l_¨g
;

527 
__do_ô
;

528 
__ˇn˚l_ty≥
;

530 
public
:

531 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

532 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

533 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

534 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

535 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

536 &
__ˇn˚l_ty≥
); 
	}
}

537 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

547 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

549 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

553 
	#±hªad_˛ónup_p›
(
execuã
) \

554 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

555 } 0)

	)

557 #ifde‡
__USE_GNU


561 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

563 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

564 
__˛‰ame
.
	`__de„r
 ()

	)

569 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

570 
__˛‰ame
.
	`__ª°‹e
 (); \

571 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

572 } 0)

	)

579 
__exã∫_ölöe
 

580 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

582 i‡(
__‰ame
->
__do_ô
)

583 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

584 
	}
}

593 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

595 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

596 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

597 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

598 .
__do_ô
 = 1 };

	)

602 
	#±hªad_˛ónup_p›
(
execuã
) \

603 
__˛‰ame
.
__do_ô
 = (
execuã
); \

604 } 0)

	)

606 #ifde‡
__USE_GNU


610 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

612 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

613 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

614 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

615 .
__do_ô
 = 1 }; \

616 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

617 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

622 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

623 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

624 
__˛‰ame
.
__do_ô
 = (
execuã
); \

625 } 0)

	)

636 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

638 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

639 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

640 *
__ˇn˚l_¨g
 = (
¨g
); \

641 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

642 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

643 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

645 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

646 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

650 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

651 dÿ{

	)

652 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

653 
__˛ónup_f˘_©åibuã
;

657 
	#±hªad_˛ónup_p›
(
execuã
) \

660 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

661 i‡(
execuã
) \

662 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

663 } 0)

	)

664 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

667 #ifde‡
__USE_GNU


671 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

673 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

674 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

675 *
__ˇn˚l_¨g
 = (
¨g
); \

676 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

677 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

678 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

680 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

681 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

685 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

686 dÿ{

	)

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

688 
__˛ónup_f˘_©åibuã
;

693 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

696 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

697 i‡(
execuã
) \

698 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

699 
	}
} 0)

	)

700 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

701 
__˛ónup_f˘_©åibuã
;

705 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

706 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

707 #i‚de‡
SHARED


708 
	`__©åibuã__
 ((
__wók__
))

714 
__jmp_buf_èg
;

715 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

721 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

722 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

723 
__THROW
 
	`__n⁄nuŒ
 ((1));

726 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

737 #ifde‡
__USE_XOPEN2K


739 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

740 
__c⁄°
 
time•ec
 *
__ª°ri˘


741 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

745 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_UNIX98


751 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

752 
__ª°ri˘
 
__muãx
,

753 *
__ª°ri˘
 
__¥io˚ûög
)

754 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

758 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 
__¥io˚ûög
,

760 *
__ª°ri˘
 
__ﬁd_˚ûög
)

761 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

765 #ifde‡
__USE_GNU


767 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

768 
__THROW
 
	`__n⁄nuŒ
 ((1));

776 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

780 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

784 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

785 
__ª°ri˘
 
__©å
,

786 *
__ª°ri˘
 
__psh¨ed
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

790 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

791 
__psh¨ed
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_UNIX98


796 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


797 
__©å
, *
__ª°ri˘
 
__köd
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

808 
__ª°ri˘
 
__©å
,

809 *
__ª°ri˘
 
__¥Ÿocﬁ
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

814 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

815 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1));

819 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

820 
__ª°ri˘
 
__©å
,

821 *
__ª°ri˘
 
__¥io˚ûög
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

825 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

826 
__¥io˚ûög
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_GNU


832 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

833 *
__robu°√ss
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

837 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

838 
__robu°√ss
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


848 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

849 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


850 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

853 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

864 #ifde‡
__USE_XOPEN2K


866 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

867 
__c⁄°
 
time•ec
 *
__ª°ri˘


868 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

873 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

879 #ifde‡
__USE_XOPEN2K


881 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

882 
__c⁄°
 
time•ec
 *
__ª°ri˘


883 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

887 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

903 
__ª°ri˘
 
__©å
,

904 *
__ª°ri˘
 
__psh¨ed
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

908 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

909 
__psh¨ed
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1));

913 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

914 
__ª°ri˘
 
__©å
,

915 *
__ª°ri˘
 
__¥ef
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

919 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

920 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

929 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


930 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

950 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

951 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

961 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

962 
__c⁄°
 
time•ec
 *
__ª°ri˘


963 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

968 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

969 
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

977 
__ª°ri˘
 
__©å
,

978 *
__ª°ri˘
 
__psh¨ed
)

979 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

982 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

983 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

985 #ifde‡
__USE_XOPEN2K


987 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

988 
__ª°ri˘
 
__©å
,

989 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

990 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

993 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

994 
__˛ockid_t
 
__˛ock_id
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1));

999 #ifde‡
__USE_XOPEN2K


1004 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1005 
__THROW
 
	`__n⁄nuŒ
 ((1));

1008 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1017 
__THROW
 
	`__n⁄nuŒ
 ((1));

1020 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1029 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1030 
__©å
, 
__cou¡
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1));

1034 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1038 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1044 
__THROW
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1048 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1052 
__ª°ri˘
 
__©å
,

1053 *
__ª°ri˘
 
__psh¨ed
)

1054 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1057 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1058 
__psh¨ed
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1072 (*
__de°r_fun˘i⁄
) (*))

1073 
__THROW
 
	`__n⁄nuŒ
 ((1));

1076 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1079 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1082 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1083 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1086 #ifde‡
__USE_XOPEN2K


1088 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1089 
__˛ockid_t
 *
__˛ock_id
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((2));

1105 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1106 (*
__∑ª¡
) (),

1107 (*
__chûd
Ë()Ë
__THROW
;

1110 #ifde‡
__USE_EXTERN_INLINES


1112 
__exã∫_ölöe
 

1113 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1115  
__thªad1
 =
__thªad2
;

1116 
	}
}

1119 
	g__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

114 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


342 
	#__√ed_size_t


	)

343 
	~<°ddef.h
>

348 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

350 
	~<bôs/sig°ack.h
>

351 #ifde‡
__USE_XOPEN


353 
	~<sys/uc⁄ãxt.h
>

359 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

360 
__THROW
 
__©åibuã_dïªˇãd__
;

364 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

365 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

369 #ifde‡
__USE_XOPEN_EXTENDED


373 
	$sighﬁd
 (
__sig
Ë
__THROW
;

376 
	$sigªl£
 (
__sig
Ë
__THROW
;

379 
	$sigign‹e
 (
__sig
Ë
__THROW
;

382 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

385 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


388 
	~<bôs/±hªadty≥s.h
>

389 
	~<bôs/sigthªad.h
>

396 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

398 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

402 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

295 
__THROW
 
__wur
;

300 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
__BEGIN_NAMESPACE_STD


307 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

311 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

312 
__modes
, 
size_t
 
__n
Ë
__THROW
;

313 
__END_NAMESPACE_STD


315 #ifdef 
__USE_BSD


318 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

319 
size_t
 
__size
Ë
__THROW
;

322 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
__BEGIN_NAMESPACE_STD


331 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

332 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

337 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	$•rötf
 (*
__ª°ri˘
 
__s
,

340 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

346 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

347 
_G_va_li°
 
__¨g
);

352 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

354 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

355 
_G_va_li°
 
__¨g
Ë
__THROW
;

356 
__END_NAMESPACE_STD


358 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


359 
__BEGIN_NAMESPACE_C99


361 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

365 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

367 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

368 
__END_NAMESPACE_C99


371 #ifde‡
__USE_GNU


374 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

375 
_G_va_li°
 
__¨g
)

376 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

377 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

378 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

379 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

380 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

381 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

382 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

390 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

391 
_G_va_li°
 
__¨g
)

392 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

393 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

394 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

398 
__BEGIN_NAMESPACE_STD


403 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

404 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

409 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

411 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

412 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

414 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

415 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

416 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

417 #ifde‡
__REDIRECT


421 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

422 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

423 
__isoc99_fsˇnf
Ë
__wur
;

424 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

425 
__isoc99_sˇnf
Ë
__wur
;

426 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

427 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

428 
__isoc99_ssˇnf
Ë
__THROW
;

430 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

432 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

434 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

435 
	#fsˇnf
 
__isoc99_fsˇnf


	)

436 
	#sˇnf
 
__isoc99_sˇnf


	)

437 
	#ssˇnf
 
__isoc99_ssˇnf


	)

441 
__END_NAMESPACE_STD


443 #ifdef 
__USE_ISOC99


444 
__BEGIN_NAMESPACE_C99


449 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

450 
_G_va_li°
 
__¨g
)

451 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

457 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

461 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

463 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

465 #i‡!
deföed
 
__USE_GNU
 \

466 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

467 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

468 #ifde‡
__REDIRECT


472 
	`__REDIRECT
 (
vfsˇnf
,

473 (
FILE
 *
__ª°ri˘
 
__s
,

474 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

475 
__isoc99_vfsˇnf
)

476 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

477 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

478 
_G_va_li°
 
__¨g
), 
__isoc99_vfsˇnf
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

480 
	`__REDIRECT
 (
vssˇnf
,

481 (
__c⁄°
 *
__ª°ri˘
 
__s
,

482 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

483 
__isoc99_vssˇnf
)

484 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

486 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

487 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

488 
_G_va_li°
 
__¨g
Ë
__wur
;

489 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

490 
_G_va_li°
 
__¨g
Ë
__wur
;

491 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

492 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

493 
_G_va_li°
 
__¨g
Ë
__THROW
;

494 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

495 
	#vsˇnf
 
__isoc99_vsˇnf


	)

496 
	#vssˇnf
 
__isoc99_vssˇnf


	)

500 
__END_NAMESPACE_C99


504 
__BEGIN_NAMESPACE_STD


509 
	`fgëc
 (
FILE
 *
__°ªam
);

510 
	`gëc
 (
FILE
 *
__°ªam
);

516 
	`gëch¨
 ();

517 
__END_NAMESPACE_STD


521 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

523 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


528 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

529 
	`gëch¨_u∆ocked
 ();

532 #ifde‡
__USE_MISC


539 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

543 
__BEGIN_NAMESPACE_STD


551 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

558 
	`putch¨
 (
__c
);

559 
__END_NAMESPACE_STD


563 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

565 #ifde‡
__USE_MISC


572 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

575 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


580 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

581 
	`putch¨_u∆ocked
 (
__c
);

585 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

586 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

588 
	`gëw
 (
FILE
 *
__°ªam
);

591 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

595 
__BEGIN_NAMESPACE_STD


600 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

601 
__wur
;

608 *
	$gës
 (*
__s
Ë
__wur
;

609 
__END_NAMESPACE_STD


611 #ifde‡
__USE_GNU


618 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

619 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

623 #ifdef 
__USE_GNU


634 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

635 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

636 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

637 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

638 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

639 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

648 
size_t
 *
__ª°ri˘
 
__n
,

649 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

653 
__BEGIN_NAMESPACE_STD


658 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

664 
	`puts
 (
__c⁄°
 *
__s
);

671 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

678 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

679 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

685 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

686 
__END_NAMESPACE_STD


688 #ifde‡
__USE_GNU


695 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

696 
FILE
 *
__ª°ri˘
 
__°ªam
);

699 #ifde‡
__USE_MISC


706 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

713 
__BEGIN_NAMESPACE_STD


718 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

723 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

728 
	`ªwöd
 (
FILE
 *
__°ªam
);

729 
__END_NAMESPACE_STD


736 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


737 #i‚de‡
__USE_FILE_OFFSET64


742 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

747 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

749 #ifde‡
__REDIRECT


750 
	`__REDIRECT
 (
f£eko
,

751 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

752 
f£eko64
);

753 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

755 
	#f£eko
 
f£eko64


	)

756 
	#·ñlo
 
·ñlo64


	)

761 
__BEGIN_NAMESPACE_STD


762 #i‚de‡
__USE_FILE_OFFSET64


767 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

772 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

774 #ifde‡
__REDIRECT


775 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

776 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

777 
	`__REDIRECT
 (
f£ços
,

778 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

780 
	#fgëpos
 
fgëpos64


	)

781 
	#f£ços
 
f£ços64


	)

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_LARGEFILE64


787 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

788 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

789 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

790 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

793 
__BEGIN_NAMESPACE_STD


795 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

797 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

799 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

800 
__END_NAMESPACE_STD


802 #ifde‡
__USE_MISC


804 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

805 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

806 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
__BEGIN_NAMESPACE_STD


815 
	`≥º‹
 (
__c⁄°
 *
__s
);

816 
__END_NAMESPACE_STD


822 
	~<bôs/sys_îæi°.h
>

825 #ifdef 
__USE_POSIX


827 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 #ifde‡
__USE_MISC


832 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

837 
deföed
 
__USE_MISC
)

842 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

848 
	`p˛o£
 (
FILE
 *
__°ªam
);

852 #ifdef 
__USE_POSIX


854 *
	$˘îmid
 (*
__s
Ë
__THROW
;

858 #ifde‡
__USE_XOPEN


860 *
	`cu£rid
 (*
__s
);

864 #ifdef 
__USE_GNU


865 
ob°ack
;

868 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

869 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

870 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

871 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

872 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

873 
_G_va_li°
 
__¨gs
)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

878 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


882 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

886 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

889 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

892 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


896 
	#__√ed_gë›t


	)

897 
	~<gë›t.h
>

902 #ifde‡
__USE_EXTERN_INLINES


903 
	~<bôs/°dio.h
>

905 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


906 
	~<bôs/°dio2.h
>

908 #ifde‡
__LDBL_COMPAT


909 
	~<bôs/°dio-ldbl.h
>

912 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

518 
__END_NAMESPACE_STD


520 #ifdef 
__USE_MISC


523 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
__BEGIN_NAMESPACE_STD


531 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

532 
__END_NAMESPACE_STD


534 #ifde‡
__USE_ISOC99


535 
__BEGIN_NAMESPACE_C99


538 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

539 
__END_NAMESPACE_C99


543 
__BEGIN_NAMESPACE_STD


545 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

546 
__END_NAMESPACE_STD


550 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

551 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

553 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


557 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

560 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


563 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

564 
__THROW
 
	`__n⁄nuŒ
 ((2));

567 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

570 #ifdef 
__USE_MISC


574 
	$˛óªnv
 (Ë
__THROW
;

578 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


583 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

593 #i‚de‡
__USE_FILE_OFFSET64


594 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

596 #ifde‡
__REDIRECT


597 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

598 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

600 
	#mk°emp
 
mk°emp64


	)

603 #ifde‡
__USE_LARGEFILE64


604 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 #ifde‡
__USE_BSD


614 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_GNU


624 #i‚de‡
__USE_FILE_OFFSET64


625 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

627 #ifde‡
__REDIRECT


628 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

629 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

631 
	#mko°emp
 
mko°emp64


	)

634 #ifde‡
__USE_LARGEFILE64


635 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
__BEGIN_NAMESPACE_STD


645 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

646 
__END_NAMESPACE_STD


649 #ifdef 
__USE_GNU


652 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

653 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


662 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

663 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

668 #i‚de‡
__COMPAR_FN_T


669 
	#__COMPAR_FN_T


	)

670 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

672 #ifdef 
__USE_GNU


673 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

676 #ifde‡
__USE_GNU


677 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

680 
__BEGIN_NAMESPACE_STD


683 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

684 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

685 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

689 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

690 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

691 #ifde‡
__USE_GNU


692 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

693 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

694 
	`__n⁄nuŒ
 ((1, 4));

699 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

700 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

701 
__END_NAMESPACE_STD


703 #ifde‡
__USE_ISOC99


704 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

705 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

709 
__BEGIN_NAMESPACE_STD


713 
div_t
 
	$div
 (
__numî
, 
__díom
)

714 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

715 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

716 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_ISOC99


720 
__BEGIN_NAMESPACE_C99


721 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

722 
__díom
)

723 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

724 
__END_NAMESPACE_C99


728 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


735 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

736 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

741 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

742 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

747 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

748 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

751 #ifde‡
__USE_MISC


753 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

754 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

755 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

756 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

757 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

758 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

759 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

760 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

765 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

766 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

767 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

768 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

769 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

770 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

772 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

773 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

774 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

775 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

776 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

777 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

778 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

779 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

784 
__BEGIN_NAMESPACE_STD


787 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

790 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

791 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

794 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

798 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

799 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

801 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

802 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

803 
__THROW
;

804 
__END_NAMESPACE_STD


807 #ifde‡
__USE_SVID


812 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

816 #ifde‡
__USE_XOPEN_EXTENDED


823 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

824 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

825 **
__ª°ri˘
 
__vÆuï
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

830 #ifde‡
__USE_XOPEN


832 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 #ifde‡
__USE_XOPEN2K


840 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

843 #ifde‡
__USE_XOPEN


848 
	$gø¡±
 (
__fd
Ë
__THROW
;

852 
	$u∆ock±
 (
__fd
Ë
__THROW
;

857 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

860 #ifde‡
__USE_GNU


864 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

865 
__THROW
 
	`__n⁄nuŒ
 ((2));

868 
	`gë±
 ();

871 #ifde‡
__USE_BSD


875 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

876 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/°dlib.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/°dlib-ldbl.h
>

889 #unde‡
__√ed_mÆloc_™d_ˇŒoc


891 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

286 #ifde‡
__USE_GNU


288 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #ifde‡
__USE_BSD


298 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

306 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

310 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

313 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

318 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifdef 
__USE_GNU


323 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

324 #ifde‡
__GNUC__


325 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

326 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

331 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

332 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

336 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

339 #ifdef 
__USE_GNU


342 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

343 
__loˇÀ_t
 
__loc
)

344 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

346 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

347 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

348 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

351 #ifdef 
__USE_BSD


354 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

359 #ifdef 
__USE_GNU


361 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

362 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

368 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

370 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

376 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

379 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

383 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

386 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

388 #i‚de‡
ba£«me


393 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

399 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

400 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


420 
	~<bôs/°rög.h
>

423 
	~<bôs/°rög2.h
>

426 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


428 
	~<bôs/°rög3.h
>

432 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
__BEGIN_DECLS


34 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
;

38 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

41 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

45 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

48 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

51 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

54 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

55 
__THROW
 
__©åibuã_puª__
;

58 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

59 
__THROW
 
__©åibuã_puª__
;

61 
__END_DECLS


	@/usr/include/stropts.h

19 #i‚de‡
_STROPTS_H


20 
	#_STROPTS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/xtôy≥s.h
>

26 #i‚de‡
__gid_t_deföed


27 
__gid_t
 
	tgid_t
;

28 
	#__gid_t_deföed


	)

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

74 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

81 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, 
__c⁄°
 *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

257 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


258 #i‚de‡
__USE_FILE_OFFSET64


261 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

262 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

264 #ifde‡
__REDIRECT_NTH


265 
	`__REDIRECT_NTH
 (
l°©
,

266 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

267 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

268 
	`__n⁄nuŒ
 ((1, 2));

270 
	#l°©
 
l°©64


	)

273 #ifde‡
__USE_LARGEFILE64


274 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

275 
°©64
 *
__ª°ri˘
 
__buf
)

276 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

282 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 #ifde‡
__USE_BSD


289 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


295 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

298 #ifde‡
__USE_ATFILE


301 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
mode
, 
__Êag
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

309 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

311 #ifdef 
__USE_GNU


314 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

318 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1));

321 #ifde‡
__USE_ATFILE


325 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

326 
__THROW
 
	`__n⁄nuŒ
 ((2));

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


333 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 #ifde‡
__USE_ATFILE


341 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

342 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

347 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1));

350 #ifde‡
__USE_ATFILE


354 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2));

358 #ifde‡
__USE_ATFILE


361 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

362 
__c⁄°
 
time•ec
 
__times
[2],

363 
__Êags
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

367 #ifde‡
__USE_GNU


370 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

388 #i‚de‡
_STAT_VER


389 
	#_STAT_VER
 0

	)

391 #i‚de‡
_MKNOD_VER


392 
	#_MKNOD_VER
 0

	)

396 #i‚de‡
__USE_FILE_OFFSET64


397 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

398 
__THROW
 
	`__n⁄nuŒ
 ((3));

399 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
, 
__Êag
)

405 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

407 #ifde‡
__REDIRECT_NTH


408 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

409 
°©
 *
__°©_buf
), 
__fx°©64
)

410 
	`__n⁄nuŒ
 ((3));

411 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

412 
°©
 *
__°©_buf
), 
__x°©64
)

413 
	`__n⁄nuŒ
 ((2, 3));

414 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__lx°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

418 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
, 
__Êag
),

420 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

423 
	#__fx°©
 
__fx°©64


	)

424 
	#__x°©
 
__x°©64


	)

425 
	#__lx°©
 
__lx°©64


	)

429 #ifde‡
__USE_LARGEFILE64


430 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

432 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
, 
__Êag
)

438 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

440 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

441 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

443 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

444 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

445 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

447 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


450 
__exã∫_ölöe
 

451 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

453  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

454 
	}
}

456 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


457 
__exã∫_ölöe
 

458 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

460  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

461 
	}
}

464 
__exã∫_ölöe
 

465 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

467  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

468 
	}
}

470 #ifde‡
__USE_ATFILE


471 
__exã∫_ölöe
 

472 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

473 
__Êag
))

475  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

476 
	}
}

479 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


480 
__exã∫_ölöe
 

481 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

483  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

484 
	}
}

487 #ifde‡
__USE_ATFILE


488 
__exã∫_ölöe
 

489 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

490 
__dev_t
 
__dev
))

492  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

493 
	}
}

496 #i‡
deföed
 
__USE_LARGEFILE64
 \

497 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

498 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

499 
__exã∫_ölöe
 

500 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

502  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

503 
	}
}

505 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


506 
__exã∫_ölöe
 

507 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

509  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

510 
	}
}

513 
__exã∫_ölöe
 

514 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

516  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

517 
	}
}

519 #ifde‡
__USE_GNU


520 
__exã∫_ölöe
 

521 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

522 
__Êag
))

524  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

525 
	}
}

532 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_ATFILE


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_XOPEN2K


60 
	#_XOPEN_VERSION
 600

	)

61 #ñi‡
deföed
 
__USE_UNIX98


62 
	#_XOPEN_VERSION
 500

	)

64 
	#_XOPEN_VERSION
 4

	)

68 
	#_XOPEN_XCU_VERSION
 4

	)

71 
	#_XOPEN_XPG2
 1

	)

72 
	#_XOPEN_XPG3
 1

	)

73 
	#_XOPEN_XPG4
 1

	)

76 
	#_XOPEN_UNIX
 1

	)

79 
	#_XOPEN_CRYPT
 1

	)

83 
	#_XOPEN_ENH_I18N
 1

	)

86 
	#_XOPEN_LEGACY
 1

	)

173 
	~<bôs/posix_›t.h
>

176 #ifde‡
__USE_UNIX98


177 
	~<bôs/ívú⁄míts.h
>

181 
	#STDIN_FILENO
 0

	)

182 
	#STDOUT_FILENO
 1

	)

183 
	#STDERR_FILENO
 2

	)

188 
	~<bôs/ty≥s.h
>

190 #i‚def 
__ssize_t_deföed


191 
__ssize_t
 
	tssize_t
;

192 
	#__ssize_t_deföed


	)

195 
	#__√ed_size_t


	)

196 
	#__√ed_NULL


	)

197 
	~<°ddef.h
>

199 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


202 #i‚de‡
__gid_t_deföed


203 
__gid_t
 
	tgid_t
;

204 
	#__gid_t_deföed


	)

207 #i‚de‡
__uid_t_deföed


208 
__uid_t
 
	tuid_t
;

209 
	#__uid_t_deföed


	)

212 #i‚de‡
__off_t_deföed


213 #i‚de‡
__USE_FILE_OFFSET64


214 
__off_t
 
	toff_t
;

216 
__off64_t
 
	toff_t
;

218 
	#__off_t_deföed


	)

220 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


221 
__off64_t
 
	toff64_t
;

222 
	#__off64_t_deföed


	)

225 #i‚de‡
__u£c⁄ds_t_deföed


226 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

227 
	#__u£c⁄ds_t_deföed


	)

230 #i‚de‡
__pid_t_deföed


231 
__pid_t
 
	tpid_t
;

232 
	#__pid_t_deföed


	)

236 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


237 #i‚de‡
__öçå_t_deföed


238 
__öçå_t
 
	töçå_t
;

239 
	#__öçå_t_deföed


	)

243 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


244 #i‚de‡
__sockÀn_t_deföed


245 
__sockÀn_t
 
	tsockÀn_t
;

246 
	#__sockÀn_t_deföed


	)

252 
	#R_OK
 4

	)

253 
	#W_OK
 2

	)

254 
	#X_OK
 1

	)

255 
	#F_OK
 0

	)

258 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

260 #ifde‡
__USE_GNU


263 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

268 
__THROW
 
	`__n⁄nuŒ
 ((1));

271 #ifde‡
__USE_ATFILE


275 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

276 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

281 #i‚def 
_STDIO_H


282 
	#SEEK_SET
 0

	)

283 
	#SEEK_CUR
 1

	)

284 
	#SEEK_END
 2

	)

287 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


289 
	#L_SET
 
SEEK_SET


	)

290 
	#L_INCR
 
SEEK_CUR


	)

291 
	#L_XTND
 
SEEK_END


	)

300 #i‚de‡
__USE_FILE_OFFSET64


301 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

303 #ifde‡
__REDIRECT_NTH


304 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

305 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

306 
l£ek64
);

308 
	#l£ek
 
l£ek64


	)

311 #ifde‡
__USE_LARGEFILE64


312 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

313 
__THROW
;

320 
	`˛o£
 (
__fd
);

327 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

333 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

335 #ifde‡
__USE_UNIX98


336 #i‚de‡
__USE_FILE_OFFSET64


343 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

344 
__off_t
 
__off£t
Ë
__wur
;

351 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

352 
__off_t
 
__off£t
Ë
__wur
;

354 #ifde‡
__REDIRECT


355 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

356 
__off64_t
 
__off£t
),

357 
¥ód64
Ë
__wur
;

358 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

359 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

360 
pwrôe64
Ë
__wur
;

362 
	#¥ód
 
¥ód64


	)

363 
	#pwrôe
 
pwrôe64


	)

367 #ifde‡
__USE_LARGEFILE64


371 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

372 
__off64_t
 
__off£t
Ë
__wur
;

375 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

376 
__off64_t
 
__off£t
Ë
__wur
;

384 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

393 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

405 
	`¶ìp
 (
__£c⁄ds
);

407 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


412 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

413 
__THROW
;

420 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

429 
	`∑u£
 ();

433 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

434 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

443 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

448 #ifde‡
__USE_ATFILE


451 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

452 
__gid_t
 
__group
, 
__Êag
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

457 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

471 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

473 #ifdef 
__USE_GNU


477 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

480 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


484 *
	$gëwd
 (*
__buf
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

490 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

493 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

496 **
__ívú⁄
;

497 #ifde‡
__USE_GNU


498 **
ívú⁄
;

504 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

505 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

507 #ifde‡
__USE_GNU


510 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

511 
__THROW
;

516 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

517 
__THROW
 
	`__n⁄nuŒ
 ((1));

521 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

522 
__THROW
 
	`__n⁄nuŒ
 ((1));

526 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

527 
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

532 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

538 
__THROW
 
	`__n⁄nuŒ
 ((1));

541 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


543 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

548 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
	~<bôs/c⁄‚ame.h
>

557 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1));

561 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

564 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

566 #ifdef 
__USE_POSIX2


568 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

573 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

576 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

580 #i‚de‡
__FAVOR_BSD


581 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

583 #ifde‡
__REDIRECT_NTH


584 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

586 
	#gëpgΩ
 
__gëpgid


	)

591 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

592 #ifde‡
__USE_XOPEN_EXTENDED


593 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

600 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

602 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


613 #i‚de‡
__FAVOR_BSD


617 
	$£çgΩ
 (Ë
__THROW
;

622 #ifde‡
__REDIRECT_NTH


623 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

625 
	#£çgΩ
 
£çgid


	)

634 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

636 #ifde‡
__USE_XOPEN_EXTENDED


638 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

645 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

648 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

651 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

656 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

658 #ifdef 
__USE_GNU


660 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

667 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

669 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


672 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


677 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

684 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

686 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


689 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

692 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


694 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

697 #ifde‡
__USE_GNU


700 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

701 
__THROW
;

705 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

706 
__THROW
;

710 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

711 
__THROW
;

715 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

716 
__THROW
;

723 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


730 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

736 *
	$ây«me
 (
__fd
Ë
__THROW
;

740 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

741 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

745 
	$ißây
 (
__fd
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 \

748 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

751 
	$ây¶Ÿ
 (Ë
__THROW
;

756 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

759 #ifde‡
__USE_ATFILE


762 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

763 
__c⁄°
 *
__to
, 
__Êags
)

764 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

767 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


769 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

775 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

776 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

780 #ifde‡
__USE_ATFILE


782 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

783 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

786 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

787 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

788 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

792 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_ATFILE


796 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2));

801 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

808 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

815 *
	`gëlogö
 ();

816 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


823 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

826 #ifdef 
__USE_BSD


828 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

832 #ifdef 
__USE_POSIX2


836 
	#__√ed_gë›t


	)

837 
	~<gë›t.h
>

841 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


845 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

849 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

852 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

857 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

863 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

865 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

872 
	$vh™gup
 (Ë
__THROW
;

875 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

884 
size_t
 
__off£t
, 
__sˇÀ
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

895 *
	$gëu£rshñl
 (Ë
__THROW
;

896 
	$ídu£rshñl
 (Ë
__THROW
;

897 
	$£tu£rshñl
 (Ë
__THROW
;

903 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

907 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

910 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

918 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


923 
	`fsync
 (
__fd
);

927 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


930 
	`gëho°id
 ();

933 
	$sync
 (Ë
__THROW
;

938 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

943 
	$gëdèbÀsize
 (Ë
__THROW
;

947 #i‚de‡
__USE_FILE_OFFSET64


948 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 #ifde‡
__REDIRECT_NTH


952 
	`__REDIRECT_NTH
 (
åunˇã
,

953 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

954 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

956 
	#åunˇã
 
åunˇã64


	)

959 #ifde‡
__USE_LARGEFILE64


960 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


969 #i‚de‡
__USE_FILE_OFFSET64


970 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

972 #ifde‡
__REDIRECT_NTH


973 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

974 
·runˇã64
Ë
__wur
;

976 
	#·runˇã
 
·runˇã64


	)

979 #ifde‡
__USE_LARGEFILE64


980 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

986 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


990 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

996 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1000 #ifde‡
__USE_MISC


1011 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1016 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1028 
	#F_ULOCK
 0

	)

1029 
	#F_LOCK
 1

	)

1030 
	#F_TLOCK
 2

	)

1031 
	#F_TEST
 3

	)

1033 #i‚de‡
__USE_FILE_OFFSET64


1034 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1036 #ifde‡
__REDIRECT


1037 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1038 
lockf64
Ë
__wur
;

1040 
	#lockf
 
lockf64


	)

1043 #ifde‡
__USE_LARGEFILE64


1044 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1049 #ifde‡
__USE_GNU


1054 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1055 (
__exãnsi⁄__
 \

1056 ({ 
__ªsu…
; \

1057 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1058 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1059 
__ªsu…
; 
	}
}))

	)

1062 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1065 
fd©async
 (
__fûdes
);

1071 #ifdef 
__USE_XOPEN


1073 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1074 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1078 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1086 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 #ifde‡
__USE_XOPEN


1094 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1099 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1100 
	~<bôs/uni°d.h
>

1103 
__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


76 
	#__mb°©e_t_deföed
 1

	)

80 
	m__cou¡
;

83 #ifde‡
__WINT_TYPE__


84 
__WINT_TYPE__
 
	m__wch
;

86 
wöt_t
 
	m__wch
;

88 
	m__wchb
[4];

89 } 
	m__vÆue
;

90 } 
	t__mb°©e_t
;

92 #unde‡
__√ed_mb°©e_t


97 #ifde‡
_WCHAR_H


99 
__BEGIN_NAMESPACE_C99


101 
__mb°©e_t
 
	tmb°©e_t
;

102 
	g__END_NAMESPACE_C99


103 #ifde‡
__USE_GNU


104 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

107 #i‚de‡
WCHAR_MIN


109 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

110 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

113 #i‚de‡
WEOF


114 
	#WEOF
 (0xffffffffu)

	)

119 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


120 
	~<w˘y≥.h
>

124 
__BEGIN_DECLS


126 
__BEGIN_NAMESPACE_STD


129 
tm
;

130 
__END_NAMESPACE_STD


134 
	$__USING_NAMESPACE_STD
(
tm
)

137 
__BEGIN_NAMESPACE_STD


139 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

142 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

143 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

144 
__THROW
;

147 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

156 
__THROW
 
__©åibuã_puª__
;

158 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

159 
__THROW
 
__©åibuã_puª__
;

160 
__END_NAMESPACE_STD


162 #ifde‡
__USE_GNU


164 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

167 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

168 
size_t
 
__n
Ë
__THROW
;

172 
	~<xloˇÀ.h
>

174 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

175 
__loˇÀ_t
 
__loc
Ë
__THROW
;

177 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

178 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

181 
__BEGIN_NAMESPACE_STD


184 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

188 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

189 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_GNU


198 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

199 
__loˇÀ_t
 
__loc
Ë
__THROW
;

204 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

205 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

208 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

211 
__BEGIN_NAMESPACE_STD


213 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

214 
__THROW
 
__©åibuã_puª__
;

216 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

217 
__THROW
 
__©åibuã_puª__
;

218 
__END_NAMESPACE_STD


220 #ifde‡
__USE_GNU


223 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

224 
__THROW
 
__©åibuã_puª__
;

227 
__BEGIN_NAMESPACE_STD


230 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

231 
__THROW
 
__©åibuã_puª__
;

234 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

235 
__THROW
 
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

238 
__THROW
 
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

241 
__THROW
 
__©åibuã_puª__
;

244 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

245 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

246 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

249 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

250 
__END_NAMESPACE_STD


252 #ifde‡
__USE_XOPEN


254 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

255 
__THROW
 
__©åibuã_puª__
;

258 #ifde‡
__USE_GNU


260 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

261 
__THROW
 
__©åibuã_puª__
;

265 
__BEGIN_NAMESPACE_STD


267 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

268 
__THROW
 
__©åibuã_puª__
;

271 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

272 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

273 
__THROW
 
__©åibuã_puª__
;

276 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

277 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

281 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

282 
__THROW
;

285 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

286 
__END_NAMESPACE_STD


288 #ifde‡
__USE_GNU


291 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

292 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

293 
__THROW
;

297 
__BEGIN_NAMESPACE_STD


300 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

304 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

308 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

312 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

313 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

314 
mb°©e_t
 *
__p
Ë
__THROW
;

317 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

321 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

322 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

323 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

324 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

325 
__END_NAMESPACE_STD


327 #ifde‡
__USE_EXTERN_INLINES


333 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

334 
__exã∫_ölöe
 
wöt_t


335 
	`__NTH
 (
	$btowc
 (
__c
))

336 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

337 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

339 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

340 
__exã∫_ölöe
 

341 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

342 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

343 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

345 
__exã∫_ölöe
 
size_t


346 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

347 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

348 {  (
__ps
 !
NULL


349 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

352 
__BEGIN_NAMESPACE_STD


355 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

356 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

361 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

362 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

363 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

364 
__END_NAMESPACE_STD


367 #ifdef 
__USE_GNU


370 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

371 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

372 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

377 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

378 
size_t
 
__nwc
, size_à
__Àn
,

379 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

384 #ifde‡
__USE_XOPEN


386 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

390 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

394 
__BEGIN_NAMESPACE_STD


397 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

398 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

399 
__END_NAMESPACE_STD


401 #ifde‡
__USE_ISOC99


402 
__BEGIN_NAMESPACE_C99


404 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

405 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

406 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

407 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

408 
__END_NAMESPACE_C99


412 
__BEGIN_NAMESPACE_STD


415 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

416 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

420 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

423 
__END_NAMESPACE_STD


425 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

426 
__BEGIN_NAMESPACE_C99


429 
__exãnsi⁄__


430 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

431 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

432 
__THROW
;

436 
__exãnsi⁄__


437 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

439 
__ba£
Ë
__THROW
;

440 
__END_NAMESPACE_C99


443 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


446 
__exãnsi⁄__


447 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

449 
__THROW
;

453 
__exãnsi⁄__


454 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

456 
__ba£
Ë
__THROW
;

459 #ifde‡
__USE_GNU


473 
	~<xloˇÀ.h
>

477 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

479 
__loˇÀ_t
 
__loc
Ë
__THROW
;

481 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

485 
__exãnsi⁄__


486 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

488 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

490 
__exãnsi⁄__


491 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

492 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

493 
__ba£
, 
__loˇÀ_t
 
__loc
)

494 
__THROW
;

496 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

497 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

498 
__THROW
;

500 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

502 
__THROW
;

504 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__loˇÀ_t
 
__loc
Ë
__THROW
;

510 #ifdef 
__USE_GNU


513 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

517 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

518 
__THROW
;

524 #ifdef 
__USE_GNU


527 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

530 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


531 
__BEGIN_NAMESPACE_STD


534 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

541 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

542 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

548 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

551 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

552 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

553 
__THROW
 ;

559 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

560 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

561 
__gnuc_va_li°
 
__¨g
)

567 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

568 
__gnuc_va_li°
 
__¨g
)

572 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

573 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

574 
__gnuc_va_li°
 
__¨g
)

575 
__THROW
 ;

582 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

583 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

589 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

592 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

594 
__THROW
 ;

596 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

597 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

598 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

599 #ifde‡
__REDIRECT


603 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

604 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

605 
__isoc99_fwsˇnf
)

607 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

608 
__isoc99_wsˇnf
)

610 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

612 
__isoc99_swsˇnf
)

613 
__THROW
 ;

615 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

616 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

617 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

618 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

619 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

620 
__THROW
;

621 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

622 
	#wsˇnf
 
__isoc99_wsˇnf


	)

623 
	#swsˇnf
 
__isoc99_swsˇnf


	)

627 
__END_NAMESPACE_STD


630 #ifde‡
__USE_ISOC99


631 
__BEGIN_NAMESPACE_C99


636 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

637 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

638 
__gnuc_va_li°
 
__¨g
)

644 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

645 
__gnuc_va_li°
 
__¨g
)

648 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

650 
__gnuc_va_li°
 
__¨g
)

651 
__THROW
 ;

653 #i‡!
deföed
 
__USE_GNU
 \

654 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

655 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

656 #ifde‡
__REDIRECT


657 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

661 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

664 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

665 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

667 
__THROW
 ;

669 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
);

672 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

673 
__gnuc_va_li°
 
__¨g
);

674 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

676 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

677 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

678 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

679 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

683 
__END_NAMESPACE_C99


687 
__BEGIN_NAMESPACE_STD


692 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

693 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

699 
wöt_t
 
	`gëwch¨
 ();

706 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

707 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

721 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

722 
__FILE
 *
__ª°ri˘
 
__°ªam
);

728 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

729 
__FILE
 *
__ª°ri˘
 
__°ªam
);

736 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

737 
__END_NAMESPACE_STD


740 #ifde‡
__USE_GNU


748 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

757 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

774 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

775 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

784 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

793 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

794 
__FILE
 *
__ª°ri˘
 
__°ªam
);

798 
__BEGIN_NAMESPACE_C99


802 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

803 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

804 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

805 
__END_NAMESPACE_C99


807 #ifde‡
__USE_GNU


808 
	~<xloˇÀ.h
>

812 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

813 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

814 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

815 
__loˇÀ_t
 
__loc
Ë
__THROW
;

824 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


825 
	#__√ed_iswxxx


	)

826 
	~<w˘y≥.h
>

830 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


831 
	~<bôs/wch¨2.h
>

834 #ifde‡
__LDBL_COMPAT


835 
	~<bôs/wch¨-ldbl.h
>

838 
__END_DECLS


844 #unde‡
__√ed_mb°©e_t


845 #unde‡
__√ed_wöt_t


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3.3"

	)

41 
	#ZLIB_VERNUM
 0x1233

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

215 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

245 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

331 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

370 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

469 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

545 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

546 c⁄° 
Byãf
 *
di˘i⁄¨y
,

547 
uI¡
 
di˘Lígth
));

584 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

585 
z_°ªamp
 
sour˚
));

602 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

613 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

614 
Àvñ
,

615 
°øãgy
));

634 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

635 
good_Àngth
,

636 
max_œzy
,

637 
ni˚_Àngth
,

638 
max_chaö
));

651 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

652 
uL⁄g
 
sour˚Lí
));

661 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

662 
bôs
,

663 
vÆue
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

678 
gz_hódîp
 
hód
));

748 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

749 c⁄° 
Byãf
 *
di˘i⁄¨y
,

750 
uI¡
 
di˘Lígth
));

770 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

785 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

786 
z_°ªamp
 
sour˚
));

801 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

811 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

812 
bôs
,

813 
vÆue
));

827 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

828 
gz_hódîp
 
hód
));

889 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

890 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

893 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

894 
out_func
 
out
, 
FAR
 *
out_desc
));

961 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

969 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1021 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1022 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1036 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1037 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1038 
Àvñ
));

1052 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1059 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1060 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1078 
voidp
 
	tgzFûe
;

1098 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1111 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1119 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1127 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1128 
voidpc
 
buf
, 
Àn
));

1135 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1148 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1155 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1164 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1170 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1176 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1186 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1215 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1232 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1238 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1244 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1252 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1264 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1279 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1305 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1337 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1338 c⁄° *
vîsi⁄
, 
°ªam_size
));

1339 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1340 c⁄° *
vîsi⁄
, 
°ªam_size
));

1341 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1342 
wödowBôs
, 
memLevñ
,

1343 
°øãgy
, c⁄° *
vîsi⁄
,

1344 
°ªam_size
));

1345 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1346 c⁄° *
vîsi⁄
, 
°ªam_size
));

1347 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1348 
FAR
 *
wödow
,

1349 c⁄° *
vîsi⁄
,

1350 
°ªam_size
));

1351 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1352 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1353 
	#öÊ©eInô
(
°rm
) \

1354 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1355 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1356 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1357 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1358 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1359 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1360 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1361 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1362 
ZLIB_VERSION
, (
z_°ªam
))

	)

1364 #ifde‡
_LARGEFILE64_SOURCE


1365 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1366 
ZEXTERN
 
off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, off64_t, ));

1367 
ZEXTERN
 
off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1368 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off64_t
));

1369 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off64_t
));

1372 #i‡
_FILE_OFFSET_BITS
 == 64

1373 
	#gz›í
 
gz›í64


	)

1374 
	#gz£ek
 
gz£ek64


	)

1375 
	#gzãŒ
 
gzãŒ64


	)

1376 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1377 
	#¸c32_comböe
 
¸c32_comböe64


	)

1379 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1380 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1381 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1382 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1383 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1386 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1387 
	söã∫Æ_°©e
 {
dummy
;};

1390 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1391 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1392 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1393 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1395 #ifde‡
__˝lu•lus


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

4 #ifde‡
__˝lu•lus


31 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

32 
	#WIN32_LEAN_AND_MEAN
 1

	)

33 
	~<wödows.h
>

36 #i‚de‡
APIENTRY


37 
	#APIENTRY


	)

39 #i‚de‡
APIENTRYP


40 
	#APIENTRYP
 
APIENTRY
 *

	)

42 #i‚de‡
GLAPI


43 
	#GLAPI
 

	)

51 
	#GL_GLEXT_VERSION
 41

	)

53 #i‚de‡
GL_VERSION_1_2


54 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

55 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

56 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

57 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

58 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

59 
	#GL_RESCALE_NORMAL
 0x803A

	)

60 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

61 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

62 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

63 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

64 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

65 
	#GL_TEXTURE_3D
 0x806F

	)

66 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

67 
	#GL_TEXTURE_DEPTH
 0x8071

	)

68 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

69 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

70 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

71 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

72 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

73 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

74 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

75 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

76 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

77 
	#GL_BGR
 0x80E0

	)

78 
	#GL_BGRA
 0x80E1

	)

79 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

80 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

81 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

82 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

83 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

84 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

85 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

86 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

87 
	#GL_SINGLE_COLOR
 0x81F9

	)

88 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

89 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

90 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

91 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

92 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

93 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

94 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

97 #i‚de‡
GL_ARB_imagög


98 
	#GL_CONSTANT_COLOR
 0x8001

	)

99 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

100 
	#GL_CONSTANT_ALPHA
 0x8003

	)

101 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

102 
	#GL_BLEND_COLOR
 0x8005

	)

103 
	#GL_FUNC_ADD
 0x8006

	)

104 
	#GL_MIN
 0x8007

	)

105 
	#GL_MAX
 0x8008

	)

106 
	#GL_BLEND_EQUATION
 0x8009

	)

107 
	#GL_FUNC_SUBTRACT
 0x800A

	)

108 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

109 
	#GL_CONVOLUTION_1D
 0x8010

	)

110 
	#GL_CONVOLUTION_2D
 0x8011

	)

111 
	#GL_SEPARABLE_2D
 0x8012

	)

112 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

113 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

114 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

115 
	#GL_REDUCE
 0x8016

	)

116 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

117 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

118 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

119 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

120 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

121 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

122 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

123 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

124 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

125 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

126 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

127 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

128 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

129 
	#GL_HISTOGRAM
 0x8024

	)

130 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

131 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

132 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

133 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

134 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

135 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

136 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

137 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

138 
	#GL_HISTOGRAM_SINK
 0x802D

	)

139 
	#GL_MINMAX
 0x802E

	)

140 
	#GL_MINMAX_FORMAT
 0x802F

	)

141 
	#GL_MINMAX_SINK
 0x8030

	)

142 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

143 
	#GL_COLOR_MATRIX
 0x80B1

	)

144 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

145 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

146 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

147 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

148 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

149 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

150 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

151 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

152 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

153 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

154 
	#GL_COLOR_TABLE
 0x80D0

	)

155 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

156 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

157 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

158 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

159 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

160 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

161 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

162 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

163 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

164 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

165 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

166 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

167 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

168 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

169 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

170 
	#GL_CONSTANT_BORDER
 0x8151

	)

171 
	#GL_REPLICATE_BORDER
 0x8153

	)

172 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

175 #i‚de‡
GL_VERSION_1_3


176 
	#GL_TEXTURE0
 0x84C0

	)

177 
	#GL_TEXTURE1
 0x84C1

	)

178 
	#GL_TEXTURE2
 0x84C2

	)

179 
	#GL_TEXTURE3
 0x84C3

	)

180 
	#GL_TEXTURE4
 0x84C4

	)

181 
	#GL_TEXTURE5
 0x84C5

	)

182 
	#GL_TEXTURE6
 0x84C6

	)

183 
	#GL_TEXTURE7
 0x84C7

	)

184 
	#GL_TEXTURE8
 0x84C8

	)

185 
	#GL_TEXTURE9
 0x84C9

	)

186 
	#GL_TEXTURE10
 0x84CA

	)

187 
	#GL_TEXTURE11
 0x84CB

	)

188 
	#GL_TEXTURE12
 0x84CC

	)

189 
	#GL_TEXTURE13
 0x84CD

	)

190 
	#GL_TEXTURE14
 0x84CE

	)

191 
	#GL_TEXTURE15
 0x84CF

	)

192 
	#GL_TEXTURE16
 0x84D0

	)

193 
	#GL_TEXTURE17
 0x84D1

	)

194 
	#GL_TEXTURE18
 0x84D2

	)

195 
	#GL_TEXTURE19
 0x84D3

	)

196 
	#GL_TEXTURE20
 0x84D4

	)

197 
	#GL_TEXTURE21
 0x84D5

	)

198 
	#GL_TEXTURE22
 0x84D6

	)

199 
	#GL_TEXTURE23
 0x84D7

	)

200 
	#GL_TEXTURE24
 0x84D8

	)

201 
	#GL_TEXTURE25
 0x84D9

	)

202 
	#GL_TEXTURE26
 0x84DA

	)

203 
	#GL_TEXTURE27
 0x84DB

	)

204 
	#GL_TEXTURE28
 0x84DC

	)

205 
	#GL_TEXTURE29
 0x84DD

	)

206 
	#GL_TEXTURE30
 0x84DE

	)

207 
	#GL_TEXTURE31
 0x84DF

	)

208 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

209 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

210 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

211 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

212 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

213 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

214 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

215 
	#GL_MULTISAMPLE
 0x809D

	)

216 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

217 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

218 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

219 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

220 
	#GL_SAMPLES
 0x80A9

	)

221 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

222 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

223 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

224 
	#GL_NORMAL_MAP
 0x8511

	)

225 
	#GL_REFLECTION_MAP
 0x8512

	)

226 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

227 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

228 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

229 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

230 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

231 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

232 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

233 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

234 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

235 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

236 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

237 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

238 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

239 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

240 
	#GL_COMPRESSED_RGB
 0x84ED

	)

241 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

242 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

243 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

244 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

245 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

246 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

247 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

248 
	#GL_COMBINE
 0x8570

	)

249 
	#GL_COMBINE_RGB
 0x8571

	)

250 
	#GL_COMBINE_ALPHA
 0x8572

	)

251 
	#GL_SOURCE0_RGB
 0x8580

	)

252 
	#GL_SOURCE1_RGB
 0x8581

	)

253 
	#GL_SOURCE2_RGB
 0x8582

	)

254 
	#GL_SOURCE0_ALPHA
 0x8588

	)

255 
	#GL_SOURCE1_ALPHA
 0x8589

	)

256 
	#GL_SOURCE2_ALPHA
 0x858A

	)

257 
	#GL_OPERAND0_RGB
 0x8590

	)

258 
	#GL_OPERAND1_RGB
 0x8591

	)

259 
	#GL_OPERAND2_RGB
 0x8592

	)

260 
	#GL_OPERAND0_ALPHA
 0x8598

	)

261 
	#GL_OPERAND1_ALPHA
 0x8599

	)

262 
	#GL_OPERAND2_ALPHA
 0x859A

	)

263 
	#GL_RGB_SCALE
 0x8573

	)

264 
	#GL_ADD_SIGNED
 0x8574

	)

265 
	#GL_INTERPOLATE
 0x8575

	)

266 
	#GL_SUBTRACT
 0x84E7

	)

267 
	#GL_CONSTANT
 0x8576

	)

268 
	#GL_PRIMARY_COLOR
 0x8577

	)

269 
	#GL_PREVIOUS
 0x8578

	)

270 
	#GL_DOT3_RGB
 0x86AE

	)

271 
	#GL_DOT3_RGBA
 0x86AF

	)

274 #i‚de‡
GL_VERSION_1_4


275 
	#GL_BLEND_DST_RGB
 0x80C8

	)

276 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

277 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

278 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

279 
	#GL_POINT_SIZE_MIN
 0x8126

	)

280 
	#GL_POINT_SIZE_MAX
 0x8127

	)

281 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

282 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

283 
	#GL_GENERATE_MIPMAP
 0x8191

	)

284 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

285 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

286 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

287 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

288 
	#GL_MIRRORED_REPEAT
 0x8370

	)

289 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

290 
	#GL_FOG_COORDINATE
 0x8451

	)

291 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

292 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

293 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

294 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

295 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

296 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

297 
	#GL_COLOR_SUM
 0x8458

	)

298 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

299 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

300 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

301 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

302 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

303 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

304 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

305 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

306 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

307 
	#GL_INCR_WRAP
 0x8507

	)

308 
	#GL_DECR_WRAP
 0x8508

	)

309 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

310 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

311 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

312 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

313 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

316 #i‚de‡
GL_VERSION_1_5


317 
	#GL_BUFFER_SIZE
 0x8764

	)

318 
	#GL_BUFFER_USAGE
 0x8765

	)

319 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

320 
	#GL_CURRENT_QUERY
 0x8865

	)

321 
	#GL_QUERY_RESULT
 0x8866

	)

322 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

323 
	#GL_ARRAY_BUFFER
 0x8892

	)

324 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

325 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

326 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

327 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

328 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

329 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

330 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

331 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

332 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

333 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

334 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

335 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

336 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

337 
	#GL_READ_ONLY
 0x88B8

	)

338 
	#GL_WRITE_ONLY
 0x88B9

	)

339 
	#GL_READ_WRITE
 0x88BA

	)

340 
	#GL_BUFFER_ACCESS
 0x88BB

	)

341 
	#GL_BUFFER_MAPPED
 0x88BC

	)

342 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

343 
	#GL_STREAM_DRAW
 0x88E0

	)

344 
	#GL_STREAM_READ
 0x88E1

	)

345 
	#GL_STREAM_COPY
 0x88E2

	)

346 
	#GL_STATIC_DRAW
 0x88E4

	)

347 
	#GL_STATIC_READ
 0x88E5

	)

348 
	#GL_STATIC_COPY
 0x88E6

	)

349 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

350 
	#GL_DYNAMIC_READ
 0x88E9

	)

351 
	#GL_DYNAMIC_COPY
 0x88EA

	)

352 
	#GL_SAMPLES_PASSED
 0x8914

	)

353 
	#GL_FOG_COORD_SRC
 
GL_FOG_COORDINATE_SOURCE


	)

354 
	#GL_FOG_COORD
 
GL_FOG_COORDINATE


	)

355 
	#GL_CURRENT_FOG_COORD
 
GL_CURRENT_FOG_COORDINATE


	)

356 
	#GL_FOG_COORD_ARRAY_TYPE
 
GL_FOG_COORDINATE_ARRAY_TYPE


	)

357 
	#GL_FOG_COORD_ARRAY_STRIDE
 
GL_FOG_COORDINATE_ARRAY_STRIDE


	)

358 
	#GL_FOG_COORD_ARRAY_POINTER
 
GL_FOG_COORDINATE_ARRAY_POINTER


	)

359 
	#GL_FOG_COORD_ARRAY
 
GL_FOG_COORDINATE_ARRAY


	)

360 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING


	)

361 
	#GL_SRC0_RGB
 
GL_SOURCE0_RGB


	)

362 
	#GL_SRC1_RGB
 
GL_SOURCE1_RGB


	)

363 
	#GL_SRC2_RGB
 
GL_SOURCE2_RGB


	)

364 
	#GL_SRC0_ALPHA
 
GL_SOURCE0_ALPHA


	)

365 
	#GL_SRC1_ALPHA
 
GL_SOURCE1_ALPHA


	)

366 
	#GL_SRC2_ALPHA
 
GL_SOURCE2_ALPHA


	)

369 #i‚de‡
GL_VERSION_2_0


370 
	#GL_BLEND_EQUATION_RGB
 
GL_BLEND_EQUATION


	)

371 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

372 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

373 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

374 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

375 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

376 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

377 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

378 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

379 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

380 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

381 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

382 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

383 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

384 
	#GL_DRAW_BUFFER0
 0x8825

	)

385 
	#GL_DRAW_BUFFER1
 0x8826

	)

386 
	#GL_DRAW_BUFFER2
 0x8827

	)

387 
	#GL_DRAW_BUFFER3
 0x8828

	)

388 
	#GL_DRAW_BUFFER4
 0x8829

	)

389 
	#GL_DRAW_BUFFER5
 0x882A

	)

390 
	#GL_DRAW_BUFFER6
 0x882B

	)

391 
	#GL_DRAW_BUFFER7
 0x882C

	)

392 
	#GL_DRAW_BUFFER8
 0x882D

	)

393 
	#GL_DRAW_BUFFER9
 0x882E

	)

394 
	#GL_DRAW_BUFFER10
 0x882F

	)

395 
	#GL_DRAW_BUFFER11
 0x8830

	)

396 
	#GL_DRAW_BUFFER12
 0x8831

	)

397 
	#GL_DRAW_BUFFER13
 0x8832

	)

398 
	#GL_DRAW_BUFFER14
 0x8833

	)

399 
	#GL_DRAW_BUFFER15
 0x8834

	)

400 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

401 
	#GL_POINT_SPRITE
 0x8861

	)

402 
	#GL_COORD_REPLACE
 0x8862

	)

403 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

404 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

405 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

406 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

407 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

408 
	#GL_VERTEX_SHADER
 0x8B31

	)

409 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

410 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

411 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

412 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

413 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

414 
	#GL_SHADER_TYPE
 0x8B4F

	)

415 
	#GL_FLOAT_VEC2
 0x8B50

	)

416 
	#GL_FLOAT_VEC3
 0x8B51

	)

417 
	#GL_FLOAT_VEC4
 0x8B52

	)

418 
	#GL_INT_VEC2
 0x8B53

	)

419 
	#GL_INT_VEC3
 0x8B54

	)

420 
	#GL_INT_VEC4
 0x8B55

	)

421 
	#GL_BOOL
 0x8B56

	)

422 
	#GL_BOOL_VEC2
 0x8B57

	)

423 
	#GL_BOOL_VEC3
 0x8B58

	)

424 
	#GL_BOOL_VEC4
 0x8B59

	)

425 
	#GL_FLOAT_MAT2
 0x8B5A

	)

426 
	#GL_FLOAT_MAT3
 0x8B5B

	)

427 
	#GL_FLOAT_MAT4
 0x8B5C

	)

428 
	#GL_SAMPLER_1D
 0x8B5D

	)

429 
	#GL_SAMPLER_2D
 0x8B5E

	)

430 
	#GL_SAMPLER_3D
 0x8B5F

	)

431 
	#GL_SAMPLER_CUBE
 0x8B60

	)

432 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

433 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

434 
	#GL_DELETE_STATUS
 0x8B80

	)

435 
	#GL_COMPILE_STATUS
 0x8B81

	)

436 
	#GL_LINK_STATUS
 0x8B82

	)

437 
	#GL_VALIDATE_STATUS
 0x8B83

	)

438 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

439 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

440 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

441 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

442 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

443 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

444 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

445 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

446 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

447 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

448 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

449 
	#GL_LOWER_LEFT
 0x8CA1

	)

450 
	#GL_UPPER_LEFT
 0x8CA2

	)

451 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

452 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

453 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

456 #i‚de‡
GL_VERSION_2_1


457 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

458 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

459 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

460 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

461 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

462 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

463 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

464 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

465 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

466 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

467 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

468 
	#GL_SRGB
 0x8C40

	)

469 
	#GL_SRGB8
 0x8C41

	)

470 
	#GL_SRGB_ALPHA
 0x8C42

	)

471 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

472 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

473 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

474 
	#GL_SLUMINANCE
 0x8C46

	)

475 
	#GL_SLUMINANCE8
 0x8C47

	)

476 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

477 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

478 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

479 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

482 #i‚de‡
GL_VERSION_3_0


483 
	#GL_COMPARE_REF_TO_TEXTURE
 
GL_COMPARE_R_TO_TEXTURE_ARB


	)

484 
	#GL_CLIP_DISTANCE0
 
GL_CLIP_PLANE0


	)

485 
	#GL_CLIP_DISTANCE1
 
GL_CLIP_PLANE1


	)

486 
	#GL_CLIP_DISTANCE2
 
GL_CLIP_PLANE2


	)

487 
	#GL_CLIP_DISTANCE3
 
GL_CLIP_PLANE3


	)

488 
	#GL_CLIP_DISTANCE4
 
GL_CLIP_PLANE4


	)

489 
	#GL_CLIP_DISTANCE5
 
GL_CLIP_PLANE5


	)

490 
	#GL_MAX_CLIP_DISTANCES
 
GL_MAX_CLIP_PLANES


	)

491 
	#GL_MAJOR_VERSION
 0x821B

	)

492 
	#GL_MINOR_VERSION
 0x821C

	)

493 
	#GL_NUM_EXTENSIONS
 0x821D

	)

494 
	#GL_CONTEXT_FLAGS
 0x821E

	)

495 
	#GL_DEPTH_BUFFER
 0x8223

	)

496 
	#GL_STENCIL_BUFFER
 0x8224

	)

497 
	#GL_COMPRESSED_RED
 0x8225

	)

498 
	#GL_COMPRESSED_RG
 0x8226

	)

499 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

500 
	#GL_RGBA32F
 0x8814

	)

501 
	#GL_RGB32F
 0x8815

	)

502 
	#GL_RGBA16F
 0x881A

	)

503 
	#GL_RGB16F
 0x881B

	)

504 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

505 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

506 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

507 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

508 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

509 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

510 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

511 
	#GL_FIXED_ONLY
 0x891D

	)

512 
	#GL_MAX_VARYING_COMPONENTS
 
GL_MAX_VARYING_FLOATS


	)

513 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

514 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

515 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

516 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

517 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

518 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

519 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

520 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

521 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

522 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

523 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

524 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

525 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

526 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

527 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

528 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

529 
	#GL_RGB9_E5
 0x8C3D

	)

530 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

531 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

532 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

533 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

534 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

535 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

536 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

537 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

538 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

539 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

540 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

541 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

542 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

543 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

544 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

545 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

546 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

547 
	#GL_RGBA32UI
 0x8D70

	)

548 
	#GL_RGB32UI
 0x8D71

	)

549 
	#GL_RGBA16UI
 0x8D76

	)

550 
	#GL_RGB16UI
 0x8D77

	)

551 
	#GL_RGBA8UI
 0x8D7C

	)

552 
	#GL_RGB8UI
 0x8D7D

	)

553 
	#GL_RGBA32I
 0x8D82

	)

554 
	#GL_RGB32I
 0x8D83

	)

555 
	#GL_RGBA16I
 0x8D88

	)

556 
	#GL_RGB16I
 0x8D89

	)

557 
	#GL_RGBA8I
 0x8D8E

	)

558 
	#GL_RGB8I
 0x8D8F

	)

559 
	#GL_RED_INTEGER
 0x8D94

	)

560 
	#GL_GREEN_INTEGER
 0x8D95

	)

561 
	#GL_BLUE_INTEGER
 0x8D96

	)

562 
	#GL_ALPHA_INTEGER
 0x8D97

	)

563 
	#GL_RGB_INTEGER
 0x8D98

	)

564 
	#GL_RGBA_INTEGER
 0x8D99

	)

565 
	#GL_BGR_INTEGER
 0x8D9A

	)

566 
	#GL_BGRA_INTEGER
 0x8D9B

	)

567 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

568 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

569 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

570 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

571 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

572 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

573 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

574 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

575 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

576 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

577 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

578 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

579 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

580 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

581 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

582 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

583 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

584 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

585 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

586 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

587 
	#GL_QUERY_WAIT
 0x8E13

	)

588 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

589 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

590 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

593 #i‚de‡
GL_ARB_mu…ôextuª


594 
	#GL_TEXTURE0_ARB
 0x84C0

	)

595 
	#GL_TEXTURE1_ARB
 0x84C1

	)

596 
	#GL_TEXTURE2_ARB
 0x84C2

	)

597 
	#GL_TEXTURE3_ARB
 0x84C3

	)

598 
	#GL_TEXTURE4_ARB
 0x84C4

	)

599 
	#GL_TEXTURE5_ARB
 0x84C5

	)

600 
	#GL_TEXTURE6_ARB
 0x84C6

	)

601 
	#GL_TEXTURE7_ARB
 0x84C7

	)

602 
	#GL_TEXTURE8_ARB
 0x84C8

	)

603 
	#GL_TEXTURE9_ARB
 0x84C9

	)

604 
	#GL_TEXTURE10_ARB
 0x84CA

	)

605 
	#GL_TEXTURE11_ARB
 0x84CB

	)

606 
	#GL_TEXTURE12_ARB
 0x84CC

	)

607 
	#GL_TEXTURE13_ARB
 0x84CD

	)

608 
	#GL_TEXTURE14_ARB
 0x84CE

	)

609 
	#GL_TEXTURE15_ARB
 0x84CF

	)

610 
	#GL_TEXTURE16_ARB
 0x84D0

	)

611 
	#GL_TEXTURE17_ARB
 0x84D1

	)

612 
	#GL_TEXTURE18_ARB
 0x84D2

	)

613 
	#GL_TEXTURE19_ARB
 0x84D3

	)

614 
	#GL_TEXTURE20_ARB
 0x84D4

	)

615 
	#GL_TEXTURE21_ARB
 0x84D5

	)

616 
	#GL_TEXTURE22_ARB
 0x84D6

	)

617 
	#GL_TEXTURE23_ARB
 0x84D7

	)

618 
	#GL_TEXTURE24_ARB
 0x84D8

	)

619 
	#GL_TEXTURE25_ARB
 0x84D9

	)

620 
	#GL_TEXTURE26_ARB
 0x84DA

	)

621 
	#GL_TEXTURE27_ARB
 0x84DB

	)

622 
	#GL_TEXTURE28_ARB
 0x84DC

	)

623 
	#GL_TEXTURE29_ARB
 0x84DD

	)

624 
	#GL_TEXTURE30_ARB
 0x84DE

	)

625 
	#GL_TEXTURE31_ARB
 0x84DF

	)

626 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

627 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

628 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

631 #i‚de‡
GL_ARB_å™•o£_m©rix


632 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

633 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

634 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

635 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

638 #i‚de‡
GL_ARB_mu…ißm∂e


639 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

640 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

641 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

642 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

643 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

644 
	#GL_SAMPLES_ARB
 0x80A9

	)

645 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

646 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

647 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

650 #i‚de‡
GL_ARB_ãxtuª_ív_add


653 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


654 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

655 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

656 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

657 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

658 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

659 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

660 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

661 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

662 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

663 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

664 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

665 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

668 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


669 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

670 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

671 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

672 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

673 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

674 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

675 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

676 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

677 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

678 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

679 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

682 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


683 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

686 #i‚de‡
GL_ARB_poöt_∑ømëîs


687 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

688 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

689 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

690 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

693 #i‚de‡
GL_ARB_vîãx_bÀnd


694 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

695 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

696 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

697 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

698 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

699 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

700 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

701 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

702 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

703 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

704 
	#GL_MODELVIEW0_ARB
 0x1700

	)

705 
	#GL_MODELVIEW1_ARB
 0x850A

	)

706 
	#GL_MODELVIEW2_ARB
 0x8722

	)

707 
	#GL_MODELVIEW3_ARB
 0x8723

	)

708 
	#GL_MODELVIEW4_ARB
 0x8724

	)

709 
	#GL_MODELVIEW5_ARB
 0x8725

	)

710 
	#GL_MODELVIEW6_ARB
 0x8726

	)

711 
	#GL_MODELVIEW7_ARB
 0x8727

	)

712 
	#GL_MODELVIEW8_ARB
 0x8728

	)

713 
	#GL_MODELVIEW9_ARB
 0x8729

	)

714 
	#GL_MODELVIEW10_ARB
 0x872A

	)

715 
	#GL_MODELVIEW11_ARB
 0x872B

	)

716 
	#GL_MODELVIEW12_ARB
 0x872C

	)

717 
	#GL_MODELVIEW13_ARB
 0x872D

	)

718 
	#GL_MODELVIEW14_ARB
 0x872E

	)

719 
	#GL_MODELVIEW15_ARB
 0x872F

	)

720 
	#GL_MODELVIEW16_ARB
 0x8730

	)

721 
	#GL_MODELVIEW17_ARB
 0x8731

	)

722 
	#GL_MODELVIEW18_ARB
 0x8732

	)

723 
	#GL_MODELVIEW19_ARB
 0x8733

	)

724 
	#GL_MODELVIEW20_ARB
 0x8734

	)

725 
	#GL_MODELVIEW21_ARB
 0x8735

	)

726 
	#GL_MODELVIEW22_ARB
 0x8736

	)

727 
	#GL_MODELVIEW23_ARB
 0x8737

	)

728 
	#GL_MODELVIEW24_ARB
 0x8738

	)

729 
	#GL_MODELVIEW25_ARB
 0x8739

	)

730 
	#GL_MODELVIEW26_ARB
 0x873A

	)

731 
	#GL_MODELVIEW27_ARB
 0x873B

	)

732 
	#GL_MODELVIEW28_ARB
 0x873C

	)

733 
	#GL_MODELVIEW29_ARB
 0x873D

	)

734 
	#GL_MODELVIEW30_ARB
 0x873E

	)

735 
	#GL_MODELVIEW31_ARB
 0x873F

	)

738 #i‚de‡
GL_ARB_m©rix_∑Àâe


739 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

740 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

741 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

742 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

743 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

744 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

745 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

746 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

747 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

748 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

751 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


752 
	#GL_COMBINE_ARB
 0x8570

	)

753 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

754 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

755 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

756 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

757 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

758 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

759 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

760 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

761 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

762 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

763 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

764 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

765 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

766 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

767 
	#GL_RGB_SCALE_ARB
 0x8573

	)

768 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

769 
	#GL_INTERPOLATE_ARB
 0x8575

	)

770 
	#GL_SUBTRACT_ARB
 0x84E7

	)

771 
	#GL_CONSTANT_ARB
 0x8576

	)

772 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

773 
	#GL_PREVIOUS_ARB
 0x8578

	)

776 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


779 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


780 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

781 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

784 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


785 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

788 #i‚de‡
GL_ARB_dïth_ãxtuª


789 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

790 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

791 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

792 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

793 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

796 #i‚de‡
GL_ARB_shadow


797 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

798 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

799 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

802 #i‚de‡
GL_ARB_shadow_ambõ¡


803 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

806 #i‚de‡
GL_ARB_wödow_pos


809 #i‚de‡
GL_ARB_vîãx_¥ogøm


810 
	#GL_COLOR_SUM_ARB
 0x8458

	)

811 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

812 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

813 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

814 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

815 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

816 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

817 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

818 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

819 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

820 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

821 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

822 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

823 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

824 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

825 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

826 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

827 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

828 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

829 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

830 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

831 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

832 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

833 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

834 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

835 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

836 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

837 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

838 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

839 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

840 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

841 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

842 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

843 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

844 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

845 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

846 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

847 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

848 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

849 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

850 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

851 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

852 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

853 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

854 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

855 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

856 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

857 
	#GL_MATRIX0_ARB
 0x88C0

	)

858 
	#GL_MATRIX1_ARB
 0x88C1

	)

859 
	#GL_MATRIX2_ARB
 0x88C2

	)

860 
	#GL_MATRIX3_ARB
 0x88C3

	)

861 
	#GL_MATRIX4_ARB
 0x88C4

	)

862 
	#GL_MATRIX5_ARB
 0x88C5

	)

863 
	#GL_MATRIX6_ARB
 0x88C6

	)

864 
	#GL_MATRIX7_ARB
 0x88C7

	)

865 
	#GL_MATRIX8_ARB
 0x88C8

	)

866 
	#GL_MATRIX9_ARB
 0x88C9

	)

867 
	#GL_MATRIX10_ARB
 0x88CA

	)

868 
	#GL_MATRIX11_ARB
 0x88CB

	)

869 
	#GL_MATRIX12_ARB
 0x88CC

	)

870 
	#GL_MATRIX13_ARB
 0x88CD

	)

871 
	#GL_MATRIX14_ARB
 0x88CE

	)

872 
	#GL_MATRIX15_ARB
 0x88CF

	)

873 
	#GL_MATRIX16_ARB
 0x88D0

	)

874 
	#GL_MATRIX17_ARB
 0x88D1

	)

875 
	#GL_MATRIX18_ARB
 0x88D2

	)

876 
	#GL_MATRIX19_ARB
 0x88D3

	)

877 
	#GL_MATRIX20_ARB
 0x88D4

	)

878 
	#GL_MATRIX21_ARB
 0x88D5

	)

879 
	#GL_MATRIX22_ARB
 0x88D6

	)

880 
	#GL_MATRIX23_ARB
 0x88D7

	)

881 
	#GL_MATRIX24_ARB
 0x88D8

	)

882 
	#GL_MATRIX25_ARB
 0x88D9

	)

883 
	#GL_MATRIX26_ARB
 0x88DA

	)

884 
	#GL_MATRIX27_ARB
 0x88DB

	)

885 
	#GL_MATRIX28_ARB
 0x88DC

	)

886 
	#GL_MATRIX29_ARB
 0x88DD

	)

887 
	#GL_MATRIX30_ARB
 0x88DE

	)

888 
	#GL_MATRIX31_ARB
 0x88DF

	)

891 #i‚de‡
GL_ARB_‰agmít_¥ogøm


892 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

893 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

894 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

895 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

896 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

897 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

898 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

899 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

900 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

901 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

902 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

903 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

904 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

905 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

906 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

909 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


910 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

911 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

912 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

913 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

914 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

915 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

916 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

917 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

918 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

919 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

920 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

921 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

922 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

923 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

924 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

925 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

926 
	#GL_READ_ONLY_ARB
 0x88B8

	)

927 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

928 
	#GL_READ_WRITE_ARB
 0x88BA

	)

929 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

930 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

931 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

932 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

933 
	#GL_STREAM_READ_ARB
 0x88E1

	)

934 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

935 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

936 
	#GL_STATIC_READ_ARB
 0x88E5

	)

937 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

938 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

939 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

940 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

943 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


944 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

945 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

946 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

947 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

948 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

951 #i‚de‡
GL_ARB_shadî_obje˘s


952 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

953 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

954 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

955 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

956 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

957 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

958 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

959 
	#GL_INT_VEC2_ARB
 0x8B53

	)

960 
	#GL_INT_VEC3_ARB
 0x8B54

	)

961 
	#GL_INT_VEC4_ARB
 0x8B55

	)

962 
	#GL_BOOL_ARB
 0x8B56

	)

963 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

964 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

965 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

966 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

967 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

968 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

969 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

970 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

971 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

972 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

973 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

974 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

975 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

976 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

977 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

978 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

979 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

980 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

981 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

982 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

983 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

984 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

985 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

988 #i‚de‡
GL_ARB_vîãx_shadî


989 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

990 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

991 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

992 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

993 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

994 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

995 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

998 #i‚de‡
GL_ARB_‰agmít_shadî


999 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

1000 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

1001 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

1004 #i‚de‡
GL_ARB_shadög_œnguage_100


1005 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

1008 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


1011 #i‚de‡
GL_ARB_poöt_•rôe


1012 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

1013 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

1016 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


1019 #i‚de‡
GL_ARB_døw_buf„rs


1020 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

1021 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

1022 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

1023 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

1024 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

1025 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

1026 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

1027 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

1028 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

1029 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

1030 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

1031 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

1032 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

1033 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

1034 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

1035 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

1036 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

1039 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


1040 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

1041 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

1042 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

1043 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

1046 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


1047 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

1048 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

1049 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

1050 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

1051 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

1054 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


1055 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

1058 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


1059 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

1060 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

1061 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

1062 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

1063 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

1064 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

1065 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

1066 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

1067 
	#GL_RGBA32F_ARB
 0x8814

	)

1068 
	#GL_RGB32F_ARB
 0x8815

	)

1069 
	#GL_ALPHA32F_ARB
 0x8816

	)

1070 
	#GL_INTENSITY32F_ARB
 0x8817

	)

1071 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1072 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1073 
	#GL_RGBA16F_ARB
 0x881A

	)

1074 
	#GL_RGB16F_ARB
 0x881B

	)

1075 
	#GL_ALPHA16F_ARB
 0x881C

	)

1076 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1077 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1078 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1081 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1082 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1083 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1084 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1085 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1088 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


1089 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

1090 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

1091 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

1094 #i‚de‡
GL_ARB_døw_ö°™˚d


1097 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


1098 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

1099 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

1100 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

1101 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

1102 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

1103 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1104 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1105 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1106 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1107 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1108 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1109 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1110 
	#GL_INDEX
 0x8222

	)

1111 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1112 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1113 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1114 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1115 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1116 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1117 
	#GL_DRAW_FRAMEBUFFER_BINDING
 
GL_FRAMEBUFFER_BINDING


	)

1118 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1119 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1120 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1121 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1122 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1123 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1124 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1125 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1126 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1127 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1128 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1129 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1130 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1131 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1132 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1133 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1134 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1135 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1136 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1137 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1138 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1139 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1140 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1141 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1142 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1143 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1144 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1145 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1146 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1147 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1148 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1149 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1150 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1151 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1152 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1153 
	#GL_FRAMEBUFFER
 0x8D40

	)

1154 
	#GL_RENDERBUFFER
 0x8D41

	)

1155 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1156 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1157 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1158 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1159 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1160 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1161 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1162 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1163 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1164 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1165 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1166 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1167 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1168 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1169 
	#GL_MAX_SAMPLES
 0x8D57

	)

1172 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


1173 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1176 #i‚de‡
GL_ARB_geomëry_shadî4


1177 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

1178 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

1179 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

1180 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

1181 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

1182 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

1183 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

1184 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

1185 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

1186 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

1187 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

1188 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

1189 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

1190 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

1191 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

1192 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

1193 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

1194 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

1197 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


1198 
	#GL_HALF_FLOAT
 0x140B

	)

1201 #i‚de‡
GL_ARB_ö°™˚d_¨øys


1204 #i‚de‡
GL_ARB_m≠_buf„r_ønge


1205 
	#GL_MAP_READ_BIT
 0x0001

	)

1206 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1207 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1208 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1209 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1210 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1213 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


1214 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

1215 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

1216 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

1217 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

1218 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

1221 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


1222 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1223 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1224 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1225 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1228 #i‚de‡
GL_ARB_ãxtuª_rg


1229 
	#GL_RG
 0x8227

	)

1230 
	#GL_RG_INTEGER
 0x8228

	)

1231 
	#GL_R8
 0x8229

	)

1232 
	#GL_R16
 0x822A

	)

1233 
	#GL_RG8
 0x822B

	)

1234 
	#GL_RG16
 0x822C

	)

1235 
	#GL_R16F
 0x822D

	)

1236 
	#GL_R32F
 0x822E

	)

1237 
	#GL_RG16F
 0x822F

	)

1238 
	#GL_RG32F
 0x8230

	)

1239 
	#GL_R8I
 0x8231

	)

1240 
	#GL_R8UI
 0x8232

	)

1241 
	#GL_R16I
 0x8233

	)

1242 
	#GL_R16UI
 0x8234

	)

1243 
	#GL_R32I
 0x8235

	)

1244 
	#GL_R32UI
 0x8236

	)

1245 
	#GL_RG8I
 0x8237

	)

1246 
	#GL_RG8UI
 0x8238

	)

1247 
	#GL_RG16I
 0x8239

	)

1248 
	#GL_RG16UI
 0x823A

	)

1249 
	#GL_RG32I
 0x823B

	)

1250 
	#GL_RG32UI
 0x823C

	)

1253 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


1254 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1257 #i‚de‡
GL_EXT_abgr


1258 
	#GL_ABGR_EXT
 0x8000

	)

1261 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


1262 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

1263 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

1264 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

1265 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

1266 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

1269 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


1270 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

1271 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

1272 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

1275 #i‚de‡
GL_EXT_ãxtuª


1276 
	#GL_ALPHA4_EXT
 0x803B

	)

1277 
	#GL_ALPHA8_EXT
 0x803C

	)

1278 
	#GL_ALPHA12_EXT
 0x803D

	)

1279 
	#GL_ALPHA16_EXT
 0x803E

	)

1280 
	#GL_LUMINANCE4_EXT
 0x803F

	)

1281 
	#GL_LUMINANCE8_EXT
 0x8040

	)

1282 
	#GL_LUMINANCE12_EXT
 0x8041

	)

1283 
	#GL_LUMINANCE16_EXT
 0x8042

	)

1284 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

1285 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

1286 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

1287 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

1288 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

1289 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

1290 
	#GL_INTENSITY_EXT
 0x8049

	)

1291 
	#GL_INTENSITY4_EXT
 0x804A

	)

1292 
	#GL_INTENSITY8_EXT
 0x804B

	)

1293 
	#GL_INTENSITY12_EXT
 0x804C

	)

1294 
	#GL_INTENSITY16_EXT
 0x804D

	)

1295 
	#GL_RGB2_EXT
 0x804E

	)

1296 
	#GL_RGB4_EXT
 0x804F

	)

1297 
	#GL_RGB5_EXT
 0x8050

	)

1298 
	#GL_RGB8_EXT
 0x8051

	)

1299 
	#GL_RGB10_EXT
 0x8052

	)

1300 
	#GL_RGB12_EXT
 0x8053

	)

1301 
	#GL_RGB16_EXT
 0x8054

	)

1302 
	#GL_RGBA2_EXT
 0x8055

	)

1303 
	#GL_RGBA4_EXT
 0x8056

	)

1304 
	#GL_RGB5_A1_EXT
 0x8057

	)

1305 
	#GL_RGBA8_EXT
 0x8058

	)

1306 
	#GL_RGB10_A2_EXT
 0x8059

	)

1307 
	#GL_RGBA12_EXT
 0x805A

	)

1308 
	#GL_RGBA16_EXT
 0x805B

	)

1309 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

1310 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

1311 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

1312 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

1313 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

1314 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

1315 
	#GL_REPLACE_EXT
 0x8062

	)

1316 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

1317 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

1318 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

1321 #i‚de‡
GL_EXT_ãxtuª3D


1322 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

1323 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

1324 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

1325 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

1326 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

1327 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

1328 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

1329 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

1330 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

1333 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


1334 
	#GL_FILTER4_SGIS
 0x8146

	)

1335 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

1338 #i‚de‡
GL_EXT_subãxtuª


1341 #i‚de‡
GL_EXT_c›y_ãxtuª


1344 #i‚de‡
GL_EXT_hi°ogøm


1345 
	#GL_HISTOGRAM_EXT
 0x8024

	)

1346 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

1347 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

1348 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

1349 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

1350 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

1351 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

1352 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

1353 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

1354 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

1355 
	#GL_MINMAX_EXT
 0x802E

	)

1356 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

1357 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

1358 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

1361 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


1362 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

1363 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

1364 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

1365 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

1366 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

1367 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

1368 
	#GL_REDUCE_EXT
 0x8016

	)

1369 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

1370 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

1371 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

1372 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

1373 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

1374 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

1375 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

1376 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

1377 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

1378 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

1379 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

1380 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

1381 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

1384 #i‚de‡
GL_SGI_cﬁ‹_m©rix


1385 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

1386 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

1387 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

1388 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

1389 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

1390 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

1391 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

1392 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

1393 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

1394 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

1395 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

1398 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


1399 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

1400 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

1401 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

1402 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

1403 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

1404 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

1405 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

1406 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

1407 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

1408 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

1409 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

1410 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

1411 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

1412 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

1413 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

1414 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

1417 #i‚de‡
GL_SGIS_pixñ_ãxtuª


1418 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

1419 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

1420 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

1421 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

1424 #i‚de‡
GL_SGIX_pixñ_ãxtuª


1425 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

1426 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

1429 #i‚de‡
GL_SGIS_ãxtuª4D


1430 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

1431 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

1432 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

1433 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

1434 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

1435 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

1436 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

1437 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

1438 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

1439 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

1442 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


1443 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

1444 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

1447 #i‚de‡
GL_EXT_cmyka


1448 
	#GL_CMYK_EXT
 0x800C

	)

1449 
	#GL_CMYKA_EXT
 0x800D

	)

1450 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

1451 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

1454 #i‚de‡
GL_EXT_ãxtuª_obje˘


1455 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

1456 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

1457 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

1458 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

1459 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

1462 #i‚de‡
GL_SGIS_dëaû_ãxtuª


1463 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

1464 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

1465 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

1466 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

1467 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

1468 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

1469 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

1470 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

1473 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


1474 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

1475 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

1476 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

1477 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

1480 #i‚de‡
GL_EXT_∑cked_pixñs


1481 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

1482 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

1483 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

1484 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

1485 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

1488 #i‚de‡
GL_SGIS_ãxtuª_lod


1489 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

1490 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

1491 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

1492 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

1495 #i‚de‡
GL_SGIS_mu…ißm∂e


1496 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

1497 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

1498 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

1499 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

1500 
	#GL_1PASS_SGIS
 0x80A1

	)

1501 
	#GL_2PASS_0_SGIS
 0x80A2

	)

1502 
	#GL_2PASS_1_SGIS
 0x80A3

	)

1503 
	#GL_4PASS_0_SGIS
 0x80A4

	)

1504 
	#GL_4PASS_1_SGIS
 0x80A5

	)

1505 
	#GL_4PASS_2_SGIS
 0x80A6

	)

1506 
	#GL_4PASS_3_SGIS
 0x80A7

	)

1507 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

1508 
	#GL_SAMPLES_SGIS
 0x80A9

	)

1509 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

1510 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

1511 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

1514 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


1515 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

1518 #i‚de‡
GL_EXT_vîãx_¨øy


1519 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

1520 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

1521 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

1522 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

1523 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

1524 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

1525 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

1526 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

1527 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

1528 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

1529 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

1530 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

1531 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

1532 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

1533 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

1534 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

1535 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

1536 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

1537 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

1538 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

1539 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

1540 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

1541 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

1542 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

1543 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

1544 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

1545 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

1546 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

1547 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

1548 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

1549 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

1550 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

1553 #i‚de‡
GL_EXT_misc_©åibuã


1556 #i‚de‡
GL_SGIS_gíî©e_mùm≠


1557 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

1558 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

1561 #i‚de‡
GL_SGIX_˛ùm≠


1562 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

1563 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

1564 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

1565 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

1566 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

1567 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

1568 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

1569 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

1570 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

1571 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

1572 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

1573 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

1576 #i‚de‡
GL_SGIX_shadow


1577 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

1578 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

1579 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

1580 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

1583 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


1584 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

1587 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


1588 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

1591 #i‚de‡
GL_EXT_bÀnd_mömax


1592 
	#GL_FUNC_ADD_EXT
 0x8006

	)

1593 
	#GL_MIN_EXT
 0x8007

	)

1594 
	#GL_MAX_EXT
 0x8008

	)

1595 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

1598 #i‚de‡
GL_EXT_bÀnd_subåa˘


1599 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

1600 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

1603 #i‚de‡
GL_EXT_bÀnd_logic_›


1606 #i‚de‡
GL_SGIX_öãæa˚


1607 
	#GL_INTERLACE_SGIX
 0x8094

	)

1610 #i‚de‡
GL_SGIX_pixñ_tûes


1611 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

1612 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

1613 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

1614 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

1615 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

1616 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

1617 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

1618 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

1621 #i‚de‡
GL_SGIS_ãxtuª_£À˘


1622 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

1623 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

1624 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

1625 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

1626 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

1627 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

1628 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

1629 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

1630 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

1631 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

1632 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

1633 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

1634 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

1635 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

1636 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

1637 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

1638 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

1639 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

1640 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

1641 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

1642 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

1643 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

1646 #i‚de‡
GL_SGIX_•rôe


1647 
	#GL_SPRITE_SGIX
 0x8148

	)

1648 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

1649 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

1650 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

1651 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

1652 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

1653 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

1656 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


1657 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

1660 #i‚de‡
GL_EXT_poöt_∑ømëîs


1661 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

1662 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

1663 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

1664 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

1667 #i‚de‡
GL_SGIS_poöt_∑ømëîs


1668 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

1669 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

1670 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

1671 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

1674 #i‚de‡
GL_SGIX_ö°rumíts


1675 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

1676 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

1679 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


1680 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

1681 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

1682 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

1683 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

1686 #i‚de‡
GL_SGIX_‰amezoom


1687 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

1688 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

1689 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

1692 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


1695 #i‚de‡
GL_FfdMaskSGIX


1696 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

1697 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

1700 #i‚de‡
GL_SGIX_pﬁynomül_ffd


1701 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

1702 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

1703 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

1704 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

1707 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


1708 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

1709 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

1712 #i‚de‡
GL_SGIX_Êush_ø°î


1715 #i‚de‡
GL_SGIX_dïth_ãxtuª


1716 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

1717 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

1718 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

1721 #i‚de‡
GL_SGIS_fog_fun˘i⁄


1722 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

1723 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

1724 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

1727 #i‚de‡
GL_SGIX_fog_off£t


1728 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

1729 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

1732 #i‚de‡
GL_HP_image_å™sf‹m


1733 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

1734 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

1735 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

1736 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

1737 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

1738 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

1739 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

1740 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

1741 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

1742 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

1743 
	#GL_CUBIC_HP
 0x815F

	)

1744 
	#GL_AVERAGE_HP
 0x8160

	)

1745 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

1746 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

1747 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

1750 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


1751 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

1752 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

1753 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

1754 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

1757 #i‚de‡
GL_INGR_∑Àâe_buf„r


1760 #i‚de‡
GL_SGIX_ãxtuª_add_ív


1761 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

1764 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


1767 #i‚de‡
GL_PGI_vîãx_höts


1768 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

1769 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

1770 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

1771 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

1772 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

1773 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

1774 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

1775 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

1776 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

1777 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

1778 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

1779 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

1780 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

1781 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

1782 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

1783 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

1784 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

1785 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

1786 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

1787 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

1788 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

1789 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

1792 #i‚de‡
GL_PGI_misc_höts


1793 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

1794 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

1795 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

1796 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

1797 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

1798 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

1799 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

1800 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

1801 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

1802 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

1803 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

1804 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

1805 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

1806 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

1807 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

1808 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

1809 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

1810 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

1811 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

1812 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

1815 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


1816 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

1817 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

1818 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

1819 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

1820 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

1821 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

1822 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

1825 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


1826 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

1829 #i‚de‡
GL_SGIX_li°_¥i‹ôy


1830 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

1833 #i‚de‡
GL_SGIX_ú_ö°rumít1


1834 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

1837 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


1838 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

1841 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


1842 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

1843 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

1844 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

1847 #i‚de‡
GL_SGIX_shadow_ambõ¡


1848 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

1851 #i‚de‡
GL_EXT_ödex_ãxtuª


1854 #i‚de‡
GL_EXT_ödex_m©îül


1855 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

1856 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

1857 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

1860 #i‚de‡
GL_EXT_ödex_func


1861 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

1862 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

1863 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

1866 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


1867 
	#GL_IUI_V2F_EXT
 0x81AD

	)

1868 
	#GL_IUI_V3F_EXT
 0x81AE

	)

1869 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

1870 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

1871 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

1872 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

1873 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

1874 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

1877 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


1878 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

1879 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

1882 #i‚de‡
GL_EXT_cuŒ_vîãx


1883 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

1884 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

1885 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

1888 #i‚de‡
GL_SGIX_y¸cb


1889 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

1890 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

1893 #i‚de‡
GL_SGIX_‰agmít_lightög


1894 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

1895 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

1896 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

1897 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

1898 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

1899 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

1900 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

1901 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

1902 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

1903 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

1904 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

1905 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

1906 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

1907 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

1908 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

1909 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

1910 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

1911 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

1912 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

1913 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

1916 #i‚de‡
GL_IBM_ø°îpos_˛ù


1917 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

1920 #i‚de‡
GL_HP_ãxtuª_lightög


1921 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

1922 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

1923 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

1926 #i‚de‡
GL_EXT_døw_ønge_ñemíts


1927 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

1928 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

1931 #i‚de‡
GL_WIN_ph⁄g_shadög


1932 
	#GL_PHONG_WIN
 0x80EA

	)

1933 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

1936 #i‚de‡
GL_WIN_•ecuœr_fog


1937 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

1940 #i‚de‡
GL_EXT_light_ãxtuª


1941 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

1942 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

1943 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

1944 
	#GL_ATTENUATION_EXT
 0x834D

	)

1945 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

1946 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

1947 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

1948 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

1949 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

1953 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


1954 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

1955 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

1958 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


1959 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

1960 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

1961 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

1962 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

1963 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

1964 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

1965 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

1968 #i‚de‡
GL_EXT_bgø


1969 
	#GL_BGR_EXT
 0x80E0

	)

1970 
	#GL_BGRA_EXT
 0x80E1

	)

1973 #i‚de‡
GL_SGIX_async


1974 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

1977 #i‚de‡
GL_SGIX_async_pixñ


1978 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

1979 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

1980 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

1981 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

1982 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

1983 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

1986 #i‚de‡
GL_SGIX_async_hi°ogøm


1987 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

1988 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

1991 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


1994 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


1995 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

1996 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

1997 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

1998 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

1999 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

2002 #i‚de‡
GL_HP_oc˛usi⁄_ã°


2003 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

2004 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

2007 #i‚de‡
GL_EXT_pixñ_å™sf‹m


2008 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

2009 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

2010 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

2011 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

2012 
	#GL_CUBIC_EXT
 0x8334

	)

2013 
	#GL_AVERAGE_EXT
 0x8335

	)

2014 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

2015 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

2016 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

2019 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


2022 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


2023 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

2026 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


2027 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

2028 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

2029 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

2032 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


2033 
	#GL_COLOR_SUM_EXT
 0x8458

	)

2034 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

2035 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

2036 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

2037 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

2038 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

2039 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

2042 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


2043 
	#GL_PERTURB_EXT
 0x85AE

	)

2044 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

2047 #i‚de‡
GL_EXT_mu…i_døw_¨øys


2050 #i‚de‡
GL_EXT_fog_co‹d


2051 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

2052 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

2053 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

2054 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

2055 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

2056 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

2057 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

2058 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

2061 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


2062 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

2063 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

2066 #i‚de‡
GL_EXT_co‹dö©e_‰ame


2067 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

2068 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

2069 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

2070 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

2071 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

2072 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

2073 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

2074 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

2075 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

2076 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

2077 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

2078 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

2079 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

2080 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

2083 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


2084 
	#GL_COMBINE_EXT
 0x8570

	)

2085 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

2086 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

2087 
	#GL_RGB_SCALE_EXT
 0x8573

	)

2088 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

2089 
	#GL_INTERPOLATE_EXT
 0x8575

	)

2090 
	#GL_CONSTANT_EXT
 0x8576

	)

2091 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

2092 
	#GL_PREVIOUS_EXT
 0x8578

	)

2093 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

2094 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

2095 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

2096 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

2097 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

2098 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

2099 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

2100 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

2101 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

2102 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

2103 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

2104 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

2107 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


2108 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

2111 #i‚de‡
GL_APPLE_å™sf‹m_höt


2112 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

2115 #i‚de‡
GL_SGIX_fog_sˇÀ


2116 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

2117 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

2120 #i‚de‡
GL_SUNX_c⁄°™t_d©a


2121 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

2122 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

2125 #i‚de‡
GL_SUN_globÆ_Æpha


2126 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

2127 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

2130 #i‚de‡
GL_SUN_åüngÀ_li°


2131 
	#GL_RESTART_SUN
 0x0001

	)

2132 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

2133 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

2134 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

2135 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

2136 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

2137 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

2138 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

2139 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

2140 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

2141 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

2142 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

2143 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

2144 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

2145 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

2146 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

2147 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

2150 #i‚de‡
GL_SUN_vîãx


2153 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


2154 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

2155 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

2156 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

2157 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

2160 #i‚de‡
GL_INGR_cﬁ‹_˛amp


2161 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

2162 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

2163 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

2164 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

2165 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

2166 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

2167 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

2168 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

2171 #i‚de‡
GL_INGR_öãæa˚_ªad


2172 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

2175 #i‚de‡
GL_EXT_°ícû_wøp


2176 
	#GL_INCR_WRAP_EXT
 0x8507

	)

2177 
	#GL_DECR_WRAP_EXT
 0x8508

	)

2180 #i‚de‡
GL_EXT_422_pixñs


2181 
	#GL_422_EXT
 0x80CC

	)

2182 
	#GL_422_REV_EXT
 0x80CD

	)

2183 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

2184 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

2187 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


2188 
	#GL_NORMAL_MAP_NV
 0x8511

	)

2189 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

2192 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


2193 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

2194 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

2195 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

2196 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

2197 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

2198 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

2199 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

2200 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

2201 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

2202 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

2203 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

2204 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

2207 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


2208 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

2211 #i‚de‡
GL_EXT_ãxtuª_ív_add


2214 #i‚de‡
GL_EXT_ãxtuª_lod_büs


2215 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

2216 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

2217 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

2220 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


2221 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

2222 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

2225 #i‚de‡
GL_EXT_vîãx_weightög


2226 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

2227 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

2228 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

2229 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

2230 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

2231 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

2232 
	#GL_MODELVIEW1_EXT
 0x850A

	)

2233 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

2234 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

2235 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

2236 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

2237 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

2238 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

2241 #i‚de‡
GL_NV_light_max_exp⁄ít


2242 
	#GL_MAX_SHININESS_NV
 0x8504

	)

2243 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

2246 #i‚de‡
GL_NV_vîãx_¨øy_ønge


2247 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

2248 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

2249 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

2250 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

2251 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

2254 #i‚de‡
GL_NV_ªgi°î_comböîs


2255 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

2256 
	#GL_VARIABLE_A_NV
 0x8523

	)

2257 
	#GL_VARIABLE_B_NV
 0x8524

	)

2258 
	#GL_VARIABLE_C_NV
 0x8525

	)

2259 
	#GL_VARIABLE_D_NV
 0x8526

	)

2260 
	#GL_VARIABLE_E_NV
 0x8527

	)

2261 
	#GL_VARIABLE_F_NV
 0x8528

	)

2262 
	#GL_VARIABLE_G_NV
 0x8529

	)

2263 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

2264 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

2265 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

2266 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

2267 
	#GL_SPARE0_NV
 0x852E

	)

2268 
	#GL_SPARE1_NV
 0x852F

	)

2269 
	#GL_DISCARD_NV
 0x8530

	)

2270 
	#GL_E_TIMES_F_NV
 0x8531

	)

2271 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

2272 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

2273 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

2274 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

2275 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

2276 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

2277 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

2278 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

2279 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

2280 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

2281 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

2282 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

2283 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

2284 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

2285 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

2286 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

2287 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

2288 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

2289 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

2290 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

2291 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

2292 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

2293 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

2294 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

2295 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

2296 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

2297 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

2298 
	#GL_COMBINER0_NV
 0x8550

	)

2299 
	#GL_COMBINER1_NV
 0x8551

	)

2300 
	#GL_COMBINER2_NV
 0x8552

	)

2301 
	#GL_COMBINER3_NV
 0x8553

	)

2302 
	#GL_COMBINER4_NV
 0x8554

	)

2303 
	#GL_COMBINER5_NV
 0x8555

	)

2304 
	#GL_COMBINER6_NV
 0x8556

	)

2305 
	#GL_COMBINER7_NV
 0x8557

	)

2313 #i‚de‡
GL_NV_fog_di°™˚


2314 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

2315 
	#GL_EYE_RADIAL_NV
 0x855B

	)

2316 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

2320 #i‚de‡
GL_NV_ãxgí_emboss


2321 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

2322 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

2323 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

2326 #i‚de‡
GL_NV_bÀnd_squ¨e


2329 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


2330 
	#GL_COMBINE4_NV
 0x8503

	)

2331 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

2332 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

2333 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

2334 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

2337 #i‚de‡
GL_MESA_ªsize_buf„rs


2340 #i‚de‡
GL_MESA_wödow_pos


2343 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


2344 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

2345 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

2346 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

2347 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

2350 #i‚de‡
GL_IBM_cuŒ_vîãx


2351 
	#GL_CULL_VERTEX_IBM
 103050

	)

2354 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


2357 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


2358 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

2359 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

2360 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

2361 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

2362 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

2363 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

2364 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

2365 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

2366 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

2367 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

2368 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

2369 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

2370 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

2371 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

2372 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

2373 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

2376 #i‚de‡
GL_SGIX_subßm∂e


2377 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

2378 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

2379 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

2380 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

2381 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

2384 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


2387 #i‚de‡
GL_SGIX_y¸cba


2388 
	#GL_YCRCB_SGIX
 0x8318

	)

2389 
	#GL_YCRCBA_SGIX
 0x8319

	)

2392 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


2393 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

2394 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

2395 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

2398 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2399 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2400 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2403 #i‚de‡
GL_3DFX_mu…ißm∂e


2404 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2405 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2406 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2407 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2410 #i‚de‡
GL_3DFX_tbuf„r


2413 #i‚de‡
GL_EXT_mu…ißm∂e


2414 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

2415 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

2416 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

2417 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

2418 
	#GL_1PASS_EXT
 0x80A1

	)

2419 
	#GL_2PASS_0_EXT
 0x80A2

	)

2420 
	#GL_2PASS_1_EXT
 0x80A3

	)

2421 
	#GL_4PASS_0_EXT
 0x80A4

	)

2422 
	#GL_4PASS_1_EXT
 0x80A5

	)

2423 
	#GL_4PASS_2_EXT
 0x80A6

	)

2424 
	#GL_4PASS_3_EXT
 0x80A7

	)

2425 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

2426 
	#GL_SAMPLES_EXT
 0x80A9

	)

2427 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

2428 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

2429 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

2430 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

2433 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


2434 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

2435 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

2438 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


2439 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

2442 #i‚de‡
GL_SGIX_ªßm∂e


2443 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

2444 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

2445 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

2446 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

2447 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

2450 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


2451 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

2452 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

2453 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

2454 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

2455 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

2456 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

2457 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

2458 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

2461 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


2462 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

2465 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


2466 
	#GL_DOT3_RGB_EXT
 0x8740

	)

2467 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

2470 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


2471 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

2472 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

2475 #i‚de‡
GL_NV_„n˚


2476 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

2477 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

2478 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

2481 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


2482 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

2485 #i‚de‡
GL_NV_evÆu©‹s


2486 
	#GL_EVAL_2D_NV
 0x86C0

	)

2487 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

2488 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

2489 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

2490 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

2491 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

2492 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

2493 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

2494 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

2495 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

2496 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

2497 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

2498 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

2499 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

2500 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

2501 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

2502 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

2503 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

2504 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

2505 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

2506 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

2507 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

2508 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

2509 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

2512 #i‚de‡
GL_NV_∑cked_dïth_°ícû


2513 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

2514 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

2517 #i‚de‡
GL_NV_ªgi°î_comböîs2


2518 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

2521 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


2524 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


2525 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

2526 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

2527 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

2528 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

2531 #i‚de‡
GL_NV_ãxtuª_shadî


2532 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

2533 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

2534 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

2535 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

2536 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

2537 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

2538 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

2539 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

2540 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

2541 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

2542 
	#GL_CULL_MODES_NV
 0x86E0

	)

2543 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

2544 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

2545 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

2546 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

2547 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

2548 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

2549 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

2550 
	#GL_CONST_EYE_NV
 0x86E5

	)

2551 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

2552 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

2553 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

2554 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

2555 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

2556 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

2557 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

2558 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

2559 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

2560 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

2561 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

2562 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

2563 
	#GL_HILO_NV
 0x86F4

	)

2564 
	#GL_DSDT_NV
 0x86F5

	)

2565 
	#GL_DSDT_MAG_NV
 0x86F6

	)

2566 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

2567 
	#GL_HILO16_NV
 0x86F8

	)

2568 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

2569 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

2570 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

2571 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

2572 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

2573 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

2574 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

2575 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

2576 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

2577 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

2578 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

2579 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

2580 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

2581 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

2582 
	#GL_DSDT8_NV
 0x8709

	)

2583 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

2584 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

2585 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

2586 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

2587 
	#GL_HI_SCALE_NV
 0x870E

	)

2588 
	#GL_LO_SCALE_NV
 0x870F

	)

2589 
	#GL_DS_SCALE_NV
 0x8710

	)

2590 
	#GL_DT_SCALE_NV
 0x8711

	)

2591 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

2592 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

2593 
	#GL_HI_BIAS_NV
 0x8714

	)

2594 
	#GL_LO_BIAS_NV
 0x8715

	)

2595 
	#GL_DS_BIAS_NV
 0x8716

	)

2596 
	#GL_DT_BIAS_NV
 0x8717

	)

2597 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

2598 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

2599 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

2600 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

2601 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

2602 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

2603 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

2604 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

2607 #i‚de‡
GL_NV_ãxtuª_shadî2


2608 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

2611 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


2612 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

2615 #i‚de‡
GL_NV_vîãx_¥ogøm


2616 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

2617 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

2618 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

2619 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

2620 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

2621 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

2622 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

2623 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

2624 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

2625 
	#GL_IDENTITY_NV
 0x862A

	)

2626 
	#GL_INVERSE_NV
 0x862B

	)

2627 
	#GL_TRANSPOSE_NV
 0x862C

	)

2628 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

2629 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

2630 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

2631 
	#GL_MATRIX0_NV
 0x8630

	)

2632 
	#GL_MATRIX1_NV
 0x8631

	)

2633 
	#GL_MATRIX2_NV
 0x8632

	)

2634 
	#GL_MATRIX3_NV
 0x8633

	)

2635 
	#GL_MATRIX4_NV
 0x8634

	)

2636 
	#GL_MATRIX5_NV
 0x8635

	)

2637 
	#GL_MATRIX6_NV
 0x8636

	)

2638 
	#GL_MATRIX7_NV
 0x8637

	)

2639 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

2640 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

2641 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

2642 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

2643 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

2644 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

2645 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

2646 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

2647 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

2648 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

2649 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

2650 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

2651 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

2652 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

2653 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

2654 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

2655 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

2656 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

2657 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

2658 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

2659 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

2660 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

2661 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

2662 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

2663 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

2664 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

2665 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

2666 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

2667 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

2668 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

2669 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

2670 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

2671 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

2672 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

2673 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

2674 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

2675 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

2676 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

2677 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

2678 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

2679 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

2680 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

2681 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

2682 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

2683 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

2684 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

2685 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

2686 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

2687 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

2688 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

2689 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

2690 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

2691 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

2692 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

2693 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

2694 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

2695 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

2696 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

2697 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

2698 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

2701 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


2702 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

2703 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

2704 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

2707 #i‚de‡
GL_SGIX_sˇÀbüs_höt


2708 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

2711 #i‚de‡
GL_OML_öãæa˚


2712 
	#GL_INTERLACE_OML
 0x8980

	)

2713 
	#GL_INTERLACE_READ_OML
 0x8981

	)

2716 #i‚de‡
GL_OML_subßm∂e


2717 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

2718 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

2721 #i‚de‡
GL_OML_ªßm∂e


2722 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

2723 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

2724 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

2725 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

2726 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

2727 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

2730 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


2731 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

2732 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

2735 #i‚de‡
GL_ATI_ívm≠_bumpm≠


2736 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

2737 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

2738 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

2739 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

2740 
	#GL_DUDV_ATI
 0x8779

	)

2741 
	#GL_DU8DV8_ATI
 0x877A

	)

2742 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

2743 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

2746 #i‚de‡
GL_ATI_‰agmít_shadî


2747 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

2748 
	#GL_REG_0_ATI
 0x8921

	)

2749 
	#GL_REG_1_ATI
 0x8922

	)

2750 
	#GL_REG_2_ATI
 0x8923

	)

2751 
	#GL_REG_3_ATI
 0x8924

	)

2752 
	#GL_REG_4_ATI
 0x8925

	)

2753 
	#GL_REG_5_ATI
 0x8926

	)

2754 
	#GL_REG_6_ATI
 0x8927

	)

2755 
	#GL_REG_7_ATI
 0x8928

	)

2756 
	#GL_REG_8_ATI
 0x8929

	)

2757 
	#GL_REG_9_ATI
 0x892A

	)

2758 
	#GL_REG_10_ATI
 0x892B

	)

2759 
	#GL_REG_11_ATI
 0x892C

	)

2760 
	#GL_REG_12_ATI
 0x892D

	)

2761 
	#GL_REG_13_ATI
 0x892E

	)

2762 
	#GL_REG_14_ATI
 0x892F

	)

2763 
	#GL_REG_15_ATI
 0x8930

	)

2764 
	#GL_REG_16_ATI
 0x8931

	)

2765 
	#GL_REG_17_ATI
 0x8932

	)

2766 
	#GL_REG_18_ATI
 0x8933

	)

2767 
	#GL_REG_19_ATI
 0x8934

	)

2768 
	#GL_REG_20_ATI
 0x8935

	)

2769 
	#GL_REG_21_ATI
 0x8936

	)

2770 
	#GL_REG_22_ATI
 0x8937

	)

2771 
	#GL_REG_23_ATI
 0x8938

	)

2772 
	#GL_REG_24_ATI
 0x8939

	)

2773 
	#GL_REG_25_ATI
 0x893A

	)

2774 
	#GL_REG_26_ATI
 0x893B

	)

2775 
	#GL_REG_27_ATI
 0x893C

	)

2776 
	#GL_REG_28_ATI
 0x893D

	)

2777 
	#GL_REG_29_ATI
 0x893E

	)

2778 
	#GL_REG_30_ATI
 0x893F

	)

2779 
	#GL_REG_31_ATI
 0x8940

	)

2780 
	#GL_CON_0_ATI
 0x8941

	)

2781 
	#GL_CON_1_ATI
 0x8942

	)

2782 
	#GL_CON_2_ATI
 0x8943

	)

2783 
	#GL_CON_3_ATI
 0x8944

	)

2784 
	#GL_CON_4_ATI
 0x8945

	)

2785 
	#GL_CON_5_ATI
 0x8946

	)

2786 
	#GL_CON_6_ATI
 0x8947

	)

2787 
	#GL_CON_7_ATI
 0x8948

	)

2788 
	#GL_CON_8_ATI
 0x8949

	)

2789 
	#GL_CON_9_ATI
 0x894A

	)

2790 
	#GL_CON_10_ATI
 0x894B

	)

2791 
	#GL_CON_11_ATI
 0x894C

	)

2792 
	#GL_CON_12_ATI
 0x894D

	)

2793 
	#GL_CON_13_ATI
 0x894E

	)

2794 
	#GL_CON_14_ATI
 0x894F

	)

2795 
	#GL_CON_15_ATI
 0x8950

	)

2796 
	#GL_CON_16_ATI
 0x8951

	)

2797 
	#GL_CON_17_ATI
 0x8952

	)

2798 
	#GL_CON_18_ATI
 0x8953

	)

2799 
	#GL_CON_19_ATI
 0x8954

	)

2800 
	#GL_CON_20_ATI
 0x8955

	)

2801 
	#GL_CON_21_ATI
 0x8956

	)

2802 
	#GL_CON_22_ATI
 0x8957

	)

2803 
	#GL_CON_23_ATI
 0x8958

	)

2804 
	#GL_CON_24_ATI
 0x8959

	)

2805 
	#GL_CON_25_ATI
 0x895A

	)

2806 
	#GL_CON_26_ATI
 0x895B

	)

2807 
	#GL_CON_27_ATI
 0x895C

	)

2808 
	#GL_CON_28_ATI
 0x895D

	)

2809 
	#GL_CON_29_ATI
 0x895E

	)

2810 
	#GL_CON_30_ATI
 0x895F

	)

2811 
	#GL_CON_31_ATI
 0x8960

	)

2812 
	#GL_MOV_ATI
 0x8961

	)

2813 
	#GL_ADD_ATI
 0x8963

	)

2814 
	#GL_MUL_ATI
 0x8964

	)

2815 
	#GL_SUB_ATI
 0x8965

	)

2816 
	#GL_DOT3_ATI
 0x8966

	)

2817 
	#GL_DOT4_ATI
 0x8967

	)

2818 
	#GL_MAD_ATI
 0x8968

	)

2819 
	#GL_LERP_ATI
 0x8969

	)

2820 
	#GL_CND_ATI
 0x896A

	)

2821 
	#GL_CND0_ATI
 0x896B

	)

2822 
	#GL_DOT2_ADD_ATI
 0x896C

	)

2823 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

2824 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

2825 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

2826 
	#GL_NUM_PASSES_ATI
 0x8970

	)

2827 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

2828 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

2829 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

2830 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

2831 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

2832 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

2833 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

2834 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

2835 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

2836 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

2837 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

2838 
	#GL_RED_BIT_ATI
 0x00000001

	)

2839 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

2840 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

2841 
	#GL_2X_BIT_ATI
 0x00000001

	)

2842 
	#GL_4X_BIT_ATI
 0x00000002

	)

2843 
	#GL_8X_BIT_ATI
 0x00000004

	)

2844 
	#GL_HALF_BIT_ATI
 0x00000008

	)

2845 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

2846 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

2847 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

2848 
	#GL_COMP_BIT_ATI
 0x00000002

	)

2849 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

2850 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

2853 #i‚de‡
GL_ATI_≤_åüngÀs


2854 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

2855 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

2856 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

2857 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

2858 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

2859 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

2860 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

2861 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

2862 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

2865 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


2866 
	#GL_STATIC_ATI
 0x8760

	)

2867 
	#GL_DYNAMIC_ATI
 0x8761

	)

2868 
	#GL_PRESERVE_ATI
 0x8762

	)

2869 
	#GL_DISCARD_ATI
 0x8763

	)

2870 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

2871 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

2872 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

2873 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

2876 #i‚de‡
GL_EXT_vîãx_shadî


2877 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

2878 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

2879 
	#GL_OP_INDEX_EXT
 0x8782

	)

2880 
	#GL_OP_NEGATE_EXT
 0x8783

	)

2881 
	#GL_OP_DOT3_EXT
 0x8784

	)

2882 
	#GL_OP_DOT4_EXT
 0x8785

	)

2883 
	#GL_OP_MUL_EXT
 0x8786

	)

2884 
	#GL_OP_ADD_EXT
 0x8787

	)

2885 
	#GL_OP_MADD_EXT
 0x8788

	)

2886 
	#GL_OP_FRAC_EXT
 0x8789

	)

2887 
	#GL_OP_MAX_EXT
 0x878A

	)

2888 
	#GL_OP_MIN_EXT
 0x878B

	)

2889 
	#GL_OP_SET_GE_EXT
 0x878C

	)

2890 
	#GL_OP_SET_LT_EXT
 0x878D

	)

2891 
	#GL_OP_CLAMP_EXT
 0x878E

	)

2892 
	#GL_OP_FLOOR_EXT
 0x878F

	)

2893 
	#GL_OP_ROUND_EXT
 0x8790

	)

2894 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

2895 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

2896 
	#GL_OP_POWER_EXT
 0x8793

	)

2897 
	#GL_OP_RECIP_EXT
 0x8794

	)

2898 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

2899 
	#GL_OP_SUB_EXT
 0x8796

	)

2900 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

2901 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

2902 
	#GL_OP_MOV_EXT
 0x8799

	)

2903 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

2904 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

2905 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

2906 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

2907 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

2908 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

2909 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

2910 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

2911 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

2912 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

2913 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

2914 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

2915 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

2916 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

2917 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

2918 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

2919 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

2920 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

2921 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

2922 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

2923 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

2924 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

2925 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

2926 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

2927 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

2928 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

2929 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

2930 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

2931 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

2932 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

2933 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

2934 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

2935 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

2936 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

2937 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

2938 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

2939 
	#GL_SCALAR_EXT
 0x87BE

	)

2940 
	#GL_VECTOR_EXT
 0x87BF

	)

2941 
	#GL_MATRIX_EXT
 0x87C0

	)

2942 
	#GL_VARIANT_EXT
 0x87C1

	)

2943 
	#GL_INVARIANT_EXT
 0x87C2

	)

2944 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

2945 
	#GL_LOCAL_EXT
 0x87C4

	)

2946 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

2947 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

2948 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

2949 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

2950 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

2951 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

2952 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

2953 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

2954 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

2955 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

2956 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

2957 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

2958 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

2959 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

2960 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

2961 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

2962 
	#GL_X_EXT
 0x87D5

	)

2963 
	#GL_Y_EXT
 0x87D6

	)

2964 
	#GL_Z_EXT
 0x87D7

	)

2965 
	#GL_W_EXT
 0x87D8

	)

2966 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

2967 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

2968 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

2969 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

2970 
	#GL_ZERO_EXT
 0x87DD

	)

2971 
	#GL_ONE_EXT
 0x87DE

	)

2972 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

2973 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

2974 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

2975 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

2976 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

2977 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

2978 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

2979 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

2980 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

2981 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

2982 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

2983 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

2984 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

2985 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

2986 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

2989 #i‚de‡
GL_ATI_vîãx_°ªams


2990 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

2991 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

2992 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

2993 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

2994 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

2995 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

2996 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

2997 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

2998 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

2999 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

3002 #i‚de‡
GL_ATI_ñemít_¨øy


3003 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

3004 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

3005 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

3008 #i‚de‡
GL_SUN_mesh_¨øy


3009 
	#GL_QUAD_MESH_SUN
 0x8614

	)

3010 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

3013 #i‚de‡
GL_SUN_¶i˚_accum


3014 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

3017 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


3018 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

3021 #i‚de‡
GL_NV_dïth_˛amp


3022 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

3025 #i‚de‡
GL_NV_oc˛usi⁄_quîy


3026 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

3027 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

3028 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

3029 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

3032 #i‚de‡
GL_NV_poöt_•rôe


3033 
	#GL_POINT_SPRITE_NV
 0x8861

	)

3034 
	#GL_COORD_REPLACE_NV
 0x8862

	)

3035 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

3038 #i‚de‡
GL_NV_ãxtuª_shadî3


3039 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

3040 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

3041 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

3042 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

3043 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

3044 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

3045 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

3046 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

3047 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

3048 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

3049 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

3050 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

3051 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

3052 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

3053 
	#GL_HILO8_NV
 0x885E

	)

3054 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

3055 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

3058 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


3061 #i‚de‡
GL_EXT_shadow_funcs


3064 #i‚de‡
GL_EXT_°ícû_two_side


3065 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

3066 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

3069 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


3070 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

3073 #i‚de‡
GL_APPLE_˛õ¡_°‹age


3074 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

3077 #i‚de‡
GL_APPLE_ñemít_¨øy


3078 
	#GL_ELEMENT_ARRAY_APPLE
 0x8768

	)

3079 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8769

	)

3080 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x876A

	)

3083 #i‚de‡
GL_APPLE_„n˚


3084 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

3085 
	#GL_FENCE_APPLE
 0x8A0B

	)

3088 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


3089 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

3092 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


3093 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

3094 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

3095 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

3096 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

3097 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

3098 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

3101 #i‚de‡
GL_APPLE_ycb¸_422


3102 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

3103 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

3104 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

3107 #i‚de‡
GL_S3_s3tc


3108 
	#GL_RGB_S3TC
 0x83A0

	)

3109 
	#GL_RGB4_S3TC
 0x83A1

	)

3110 
	#GL_RGBA_S3TC
 0x83A2

	)

3111 
	#GL_RGBA4_S3TC
 0x83A3

	)

3114 #i‚de‡
GL_ATI_døw_buf„rs


3115 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

3116 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

3117 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

3118 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

3119 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

3120 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

3121 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

3122 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

3123 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

3124 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

3125 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

3126 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

3127 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

3128 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

3129 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

3130 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

3131 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

3134 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


3135 
	#GL_TYPE_RGBA_FLOAT_ATI
 0x8820

	)

3136 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

3139 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


3140 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

3141 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

3142 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

3145 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


3146 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

3147 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

3148 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

3149 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

3150 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

3151 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

3152 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

3153 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

3154 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

3155 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

3156 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

3157 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

3160 #i‚de‡
GL_NV_Êﬂt_buf„r


3161 
	#GL_FLOAT_R_NV
 0x8880

	)

3162 
	#GL_FLOAT_RG_NV
 0x8881

	)

3163 
	#GL_FLOAT_RGB_NV
 0x8882

	)

3164 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

3165 
	#GL_FLOAT_R16_NV
 0x8884

	)

3166 
	#GL_FLOAT_R32_NV
 0x8885

	)

3167 
	#GL_FLOAT_RG16_NV
 0x8886

	)

3168 
	#GL_FLOAT_RG32_NV
 0x8887

	)

3169 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

3170 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

3171 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

3172 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

3173 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

3174 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

3175 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

3178 #i‚de‡
GL_NV_‰agmít_¥ogøm


3179 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

3180 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

3181 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

3182 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

3183 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

3184 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

3187 #i‚de‡
GL_NV_hÆf_Êﬂt


3188 
	#GL_HALF_FLOAT_NV
 0x140B

	)

3191 #i‚de‡
GL_NV_pixñ_d©a_ønge


3192 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

3193 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

3194 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

3195 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

3196 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

3197 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

3200 #i‚de‡
GL_NV_¥imôive_ª°¨t


3201 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

3202 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

3205 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


3206 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

3209 #i‚de‡
GL_NV_vîãx_¥ogøm2


3212 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


3215 #i‚de‡
GL_ATI_£∑øã_°ícû


3216 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

3217 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

3218 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

3219 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

3222 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


3225 #i‚de‡
GL_OES_ªad_f‹m©


3226 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

3227 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

3230 #i‚de‡
GL_EXT_dïth_bounds_ã°


3231 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

3232 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

3235 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


3236 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

3237 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

3238 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

3241 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


3242 
	#GL_BLEND_EQUATION_RGB_EXT
 
GL_BLEND_EQUATION


	)

3243 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

3246 #i‚de‡
GL_MESA_∑ck_övît


3247 
	#GL_PACK_INVERT_MESA
 0x8758

	)

3250 #i‚de‡
GL_MESA_ycb¸_ãxtuª


3251 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

3252 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

3253 
	#GL_YCBCR_MESA
 0x8757

	)

3256 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


3257 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

3258 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

3259 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

3260 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

3263 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


3266 #i‚de‡
GL_NV_‰agmít_¥ogøm2


3267 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

3268 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

3269 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

3270 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

3271 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

3274 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


3279 #i‚de‡
GL_NV_vîãx_¥ogøm3


3283 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


3284 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

3285 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

3286 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

3287 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

3288 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

3289 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

3290 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

3291 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

3292 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

3293 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

3294 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

3295 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

3296 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

3297 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

3298 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

3299 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

3300 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

3301 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

3302 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

3303 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

3304 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

3305 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

3306 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

3307 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

3308 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

3309 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

3310 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

3311 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

3312 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

3313 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

3314 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

3315 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

3316 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

3317 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

3318 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

3319 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

3320 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

3321 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

3322 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

3323 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

3324 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

3325 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

3326 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

3327 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

3328 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

3329 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

3330 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

3331 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

3332 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

3333 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

3334 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

3337 #i‚de‡
GL_GREMEDY_°rög_m¨kî


3340 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


3341 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

3342 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

3343 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

3344 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

3347 #i‚de‡
GL_EXT_°ícû_˛ór_èg


3348 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

3349 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

3352 #i‚de‡
GL_EXT_ãxtuª_sRGB


3353 
	#GL_SRGB_EXT
 0x8C40

	)

3354 
	#GL_SRGB8_EXT
 0x8C41

	)

3355 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

3356 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

3357 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

3358 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

3359 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

3360 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

3361 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

3362 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

3363 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

3364 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

3365 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

3366 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

3367 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

3368 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

3371 #i‚de‡
GL_EXT_‰amebuf„r_blô


3372 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

3373 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

3374 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 
GL_FRAMEBUFFER_BINDING_EXT


	)

3375 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

3378 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


3379 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

3380 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

3381 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

3384 #i‚de‡
GL_MESAX_ãxtuª_°ack


3385 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

3386 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

3387 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

3388 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

3389 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

3390 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

3393 #i‚de‡
GL_EXT_timî_quîy


3394 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

3397 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


3400 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


3401 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

3402 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

3405 #i‚de‡
GL_NV_gpu_¥ogøm4


3406 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

3407 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

3408 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

3409 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

3410 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

3411 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

3412 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

3413 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

3416 #i‚de‡
GL_NV_geomëry_¥ogøm4


3417 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

3418 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

3419 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

3420 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

3421 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

3422 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

3423 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

3424 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

3425 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

3426 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

3427 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

3428 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

3429 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

3430 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

3431 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

3432 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

3435 #i‚de‡
GL_EXT_geomëry_shadî4


3436 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

3441 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

3442 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

3443 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

3444 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

3445 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

3446 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

3458 #i‚de‡
GL_NV_vîãx_¥ogøm4


3459 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

3462 #i‚de‡
GL_EXT_gpu_shadî4


3463 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

3464 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

3465 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

3466 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

3467 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

3468 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

3469 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

3470 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

3471 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

3472 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

3473 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

3474 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

3475 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

3476 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

3477 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

3478 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

3479 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

3480 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

3481 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

3482 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

3483 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

3484 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

3485 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

3486 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

3487 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

3490 #i‚de‡
GL_EXT_døw_ö°™˚d


3493 #i‚de‡
GL_EXT_∑cked_Êﬂt


3494 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

3495 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

3496 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

3499 #i‚de‡
GL_EXT_ãxtuª_¨øy


3500 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

3501 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

3502 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

3503 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

3504 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

3505 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

3506 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

3507 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

3511 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


3512 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

3513 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

3514 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

3515 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

3516 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

3519 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


3520 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

3521 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

3522 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

3523 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

3526 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


3527 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

3528 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

3529 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

3530 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

3533 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


3534 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

3535 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

3536 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

3539 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


3540 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

3541 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

3542 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

3543 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

3546 #i‚de‡
GL_NV_‰agmít_¥ogøm4


3549 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


3550 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

3551 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

3552 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

3553 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

3556 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


3557 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

3558 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

3561 #i‚de‡
GL_NV_geomëry_shadî4


3564 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


3565 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

3566 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

3567 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

3568 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

3569 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

3572 #i‚de‡
GL_EXT_døw_buf„rs2


3575 #i‚de‡
GL_NV_å™sf‹m_„edback


3576 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

3577 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

3578 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

3579 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

3580 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

3581 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

3582 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

3583 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

3584 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

3585 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

3586 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

3587 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

3588 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

3589 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

3590 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

3591 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

3592 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

3593 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

3594 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

3595 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV
 0x8C8A

	)

3596 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

3597 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

3598 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

3599 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

3600 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

3603 #i‚de‡
GL_EXT_bödabÀ_unif‹m


3604 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

3605 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

3606 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

3607 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

3608 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

3609 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

3612 #i‚de‡
GL_EXT_ãxtuª_öãgî


3613 
	#GL_RGBA32UI_EXT
 0x8D70

	)

3614 
	#GL_RGB32UI_EXT
 0x8D71

	)

3615 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

3616 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

3617 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

3618 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

3619 
	#GL_RGBA16UI_EXT
 0x8D76

	)

3620 
	#GL_RGB16UI_EXT
 0x8D77

	)

3621 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

3622 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

3623 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

3624 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

3625 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

3626 
	#GL_RGB8UI_EXT
 0x8D7D

	)

3627 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

3628 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

3629 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

3630 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

3631 
	#GL_RGBA32I_EXT
 0x8D82

	)

3632 
	#GL_RGB32I_EXT
 0x8D83

	)

3633 
	#GL_ALPHA32I_EXT
 0x8D84

	)

3634 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

3635 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

3636 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

3637 
	#GL_RGBA16I_EXT
 0x8D88

	)

3638 
	#GL_RGB16I_EXT
 0x8D89

	)

3639 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

3640 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

3641 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

3642 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

3643 
	#GL_RGBA8I_EXT
 0x8D8E

	)

3644 
	#GL_RGB8I_EXT
 0x8D8F

	)

3645 
	#GL_ALPHA8I_EXT
 0x8D90

	)

3646 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

3647 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

3648 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

3649 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

3650 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

3651 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

3652 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

3653 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

3654 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

3655 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

3656 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

3657 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

3658 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

3659 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

3662 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


3665 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


3666 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

3667 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

3668 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

3669 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

3672 #i‚de‡
GL_NV_¥e£¡_video


3673 
	#GL_FRAME_NV
 0x8E26

	)

3674 
	#GL_FIELDS_NV
 0x8E27

	)

3675 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

3676 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

3677 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

3678 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

3681 #i‚de‡
GL_EXT_å™sf‹m_„edback


3682 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

3683 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

3684 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

3685 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

3686 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

3687 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

3688 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

3689 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

3690 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

3691 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

3692 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

3693 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

3694 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

3695 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

3696 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

3702 
	~<°ddef.h
>

3703 #i‚de‡
GL_VERSION_2_0


3705 
	tGLch¨
;

3708 #i‚de‡
GL_VERSION_1_5


3710 
±rdiff_t
 
	tGLöçå
;

3711 
±rdiff_t
 
	tGLsizeùå
;

3714 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


3716 
±rdiff_t
 
	tGLöçåARB
;

3717 
±rdiff_t
 
	tGLsizeùåARB
;

3720 #i‚de‡
GL_ARB_shadî_obje˘s


3722 
	tGLch¨ARB
;

3723 
	tGLh™dÀARB
;

3727 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3728 
	tGLhÆfARB
;

3731 #i‚de‡
GL_NV_hÆf_Êﬂt


3732 
	tGLhÆfNV
;

3735 #i‚de‡
GLEXT_64_TYPES_DEFINED


3737 
	#GLEXT_64_TYPES_DEFINED


	)

3740 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

3741 
	~<öây≥s.h
>

3742 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

3743 
	~<öây≥s.h
>

3744 #i‡
deföed
(
__STDC__
)

3745 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

3746 
	töt64_t
;

3747 
	tuöt64_t
;

3749 
	töt64_t
;

3750 
	tuöt64_t
;

3753 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

3754 
	~<öây≥s.h
>

3755 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

3756 
	~<°döt.h
>

3757 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

3758 
	töt32_t
;

3759 
	töt64_t
;

3760 
	tuöt64_t
;

3761 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

3762 
	~<°döt.h
>

3763 #ñi‡
deföed
(
_WIN32
)

3764 
__öt32
 
	töt32_t
;

3765 
__öt64
 
	töt64_t
;

3766 
	t__öt64
 
	tuöt64_t
;

3768 
	~<öây≥s.h
>

3772 #i‚de‡
GL_EXT_timî_quîy


3773 
öt64_t
 
	tGLöt64EXT
;

3774 
uöt64_t
 
	tGLuöt64EXT
;

3777 #i‚de‡
GL_VERSION_1_2


3778 
	#GL_VERSION_1_2
 1

	)

3779 #ifde‡
GL_GLEXT_PROTOTYPES


3780 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

3781 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
);

3782 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

3783 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3784 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3785 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3786 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3787 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3788 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3789 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3790 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3791 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

3792 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3793 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3794 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
, GLíum, 
GLÊﬂt
);

3795 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3796 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
, GLíum, 
GLöt
);

3797 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3798 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3799 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

3800 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3801 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3802 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3803 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

3804 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

3805 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3806 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3807 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3808 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3809 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3810 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3811 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

3812 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
, GLíum, 
GLboﬁón
);

3813 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
);

3814 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
);

3815 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

3816 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3817 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

3819 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

3820 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

3821 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

3822 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

3823 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3824 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3825 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3826 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

3827 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3828 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3829 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

3830 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3831 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3832 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3833 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3834 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3835 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3836 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3837 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3838 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3839 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

3840 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3841 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3842 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

3843 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

3844 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3845 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3846 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3847 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3848 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3849 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3850 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3851 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3852 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3853 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3854 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3855 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3856 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3859 #i‚de‡
GL_VERSION_1_3


3860 
	#GL_VERSION_1_3
 1

	)

3861 #ifde‡
GL_GLEXT_PROTOTYPES


3862 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
);

3863 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
);

3864 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
, 
GLdoubÀ
);

3865 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3866 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
, 
GLÊﬂt
);

3867 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3868 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
, 
GLöt
);

3869 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
, c⁄° 
GLöt
 *);

3870 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
, 
GLsh‹t
);

3871 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3872 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3873 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3874 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3875 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3876 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
, 
GLöt
, GLint);

3877 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
, c⁄° 
GLöt
 *);

3878 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
, 
GLsh‹t
, GLshort);

3879 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3880 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3881 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3882 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3883 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3884 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
, 
GLöt
, GLint, GLint);

3885 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
, c⁄° 
GLöt
 *);

3886 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3887 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3888 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3889 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3890 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3891 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3892 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3893 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
, c⁄° 
GLöt
 *);

3894 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3895 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3896 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3897 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3898 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3899 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3900 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
, 
GLboﬁón
);

3901 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3902 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3903 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3904 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3905 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3906 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3907 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3909 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3910 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3911 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3912 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3913 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3914 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3915 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3916 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3917 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3918 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3919 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3920 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3921 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3922 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3923 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3924 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3925 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3926 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3927 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3928 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3929 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3930 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3931 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3932 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3933 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3934 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3935 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3936 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3937 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3938 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3939 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3940 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3941 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3942 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3943 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3944 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3945 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3946 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3947 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3948 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3949 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3950 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3951 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3952 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3953 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3954 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3957 #i‚de‡
GL_VERSION_1_4


3958 
	#GL_VERSION_1_4
 1

	)

3959 #ifde‡
GL_GLEXT_PROTOTYPES


3960 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3961 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
);

3962 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *);

3963 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
);

3964 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *);

3965 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3966 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

3967 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

3968 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
, 
GLÊﬂt
);

3969 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3970 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
, 
GLöt
);

3971 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
, c⁄° 
GLöt
 *);

3972 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
, GLbyte, GLbyte);

3973 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *);

3974 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3975 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *);

3976 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3977 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *);

3978 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
, GLint, GLint);

3979 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *);

3980 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
, GLshort, GLshort);

3981 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *);

3982 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
, GLubyte, GLubyte);

3983 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *);

3984 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
, GLuint, GLuint);

3985 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *);

3986 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
, GLushort, GLushort);

3987 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *);

3988 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3989 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
, GLdouble);

3990 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *);

3991 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
, GLfloat);

3992 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *);

3993 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
, GLint);

3994 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *);

3995 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
, GLshort);

3996 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *);

3997 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3998 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *);

3999 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
, GLfloat, GLfloat);

4000 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *);

4001 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
, GLint, GLint);

4002 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *);

4003 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
, GLshort, GLshort);

4004 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *);

4006 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

4007 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

4008 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

4009 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

4010 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

4011 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4012 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

4013 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

4014 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4015 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4016 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4017 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4018 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

4019 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

4020 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

4021 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4022 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

4023 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4024 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

4025 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4026 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

4027 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4028 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

4029 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

4030 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

4031 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

4032 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

4033 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

4034 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4035 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4036 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4037 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4038 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4039 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4040 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4041 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4042 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4043 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4044 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4045 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4046 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4047 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4048 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4049 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4050 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4053 #i‚de‡
GL_VERSION_1_5


4054 
	#GL_VERSION_1_5
 1

	)

4055 #ifde‡
GL_GLEXT_PROTOTYPES


4056 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
, 
GLuöt
 *);

4057 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
, c⁄° 
GLuöt
 *);

4058 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
);

4059 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
, 
GLuöt
);

4060 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
);

4061 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
, GLíum, 
GLöt
 *);

4062 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4063 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
, 
GLíum
, GLuint *);

4064 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
, 
GLuöt
);

4065 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

4066 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
, 
GLuöt
 *);

4067 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
);

4068 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
, 
GLsizeùå
, c⁄° 
GLvoid
 *, GLenum);

4069 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, c⁄° 
GLvoid
 *);

4070 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, 
GLvoid
 *);

4071 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
, GLenum);

4072 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
);

4073 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

4074 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
, GLíum, 
GLvoid
* *);

4076 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

4077 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

4078 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

4079 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4080 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

4081 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4082 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4083 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

4084 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4085 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4086 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4087 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4088 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

4089 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

4090 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

4091 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4092 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

4093 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4094 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4097 #i‚de‡
GL_VERSION_2_0


4098 
	#GL_VERSION_2_0
 1

	)

4099 #ifde‡
GL_GLEXT_PROTOTYPES


4100 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
, GLenum);

4101 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
, c⁄° 
GLíum
 *);

4102 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

4103 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

4104 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
, 
GLuöt
);

4105 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
, GLuint);

4106 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

4107 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
);

4108 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

4109 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
);

4110 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
);

4111 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
);

4112 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
, GLuint);

4113 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
);

4114 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
);

4115 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

4116 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

4117 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
, 
GLsizei
, GLsizei *, GLuint *);

4118 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

4119 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4120 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

4121 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4122 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

4123 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

4124 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

4125 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
 *);

4126 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
, 
GLöt
, GLint *);

4127 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

4128 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

4129 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4130 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

4131 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
);

4132 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
);

4133 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
);

4134 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, c⁄° 
GLöt
 *);

4135 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
);

4136 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
, 
GLÊﬂt
);

4137 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
, 
GLÊﬂt
, GLfloat);

4138 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4139 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4140 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
, GLint);

4141 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
, GLint, GLint);

4142 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
, GLint, GLint, GLint);

4143 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
, GLint, GLint, GLint, GLint);

4144 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4145 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4146 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4147 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4148 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
, 
GLsizei
, const GLint *);

4149 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
, 
GLsizei
, const GLint *);

4150 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
, 
GLsizei
, const GLint *);

4151 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
, 
GLsizei
, const GLint *);

4152 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4153 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4154 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4155 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
);

4156 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
, 
GLdoubÀ
);

4157 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4158 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
, 
GLÊﬂt
);

4159 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4160 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
, 
GLsh‹t
);

4161 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4162 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

4163 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4164 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

4165 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4166 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
, 
GLsh‹t
, GLshort);

4167 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4168 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

4169 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4170 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4171 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4172 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

4173 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4174 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
, c⁄° 
GLbyã
 *);

4175 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
, c⁄° 
GLöt
 *);

4176 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4177 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

4178 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

4179 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
, const GLuint *);

4180 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

4181 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
, c⁄° 
GLbyã
 *);

4182 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4183 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4184 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4185 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4186 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
, c⁄° 
GLöt
 *);

4187 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

4188 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4189 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

4190 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
, const GLuint *);

4191 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

4192 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

4194 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

4195 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

4196 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

4197 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

4198 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

4199 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

4200 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

4201 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

4202 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

4203 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

4204 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4205 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

4206 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

4207 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

4208 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

4209 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

4210 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

4211 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

4212 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

4213 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4214 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

4215 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4216 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

4217 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

4218 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

4219 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4220 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4221 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4222 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4223 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4224 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

4225 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4226 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

4227 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4228 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4229 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4230 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4231 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4232 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4233 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4234 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4235 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4236 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4237 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4238 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4239 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4240 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4241 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4242 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4243 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4244 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4245 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4246 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4247 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4248 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4249 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4250 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4251 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4252 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4253 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4254 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4255 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4256 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4257 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4258 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4259 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4260 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4261 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4262 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4263 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4264 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4265 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4266 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4267 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4268 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4269 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4270 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4271 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4272 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4273 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4274 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4275 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4276 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4277 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4278 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4279 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4280 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4281 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4282 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4283 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4284 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4285 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4286 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4289 #i‚de‡
GL_VERSION_2_1


4290 
	#GL_VERSION_2_1
 1

	)

4291 #ifde‡
GL_GLEXT_PROTOTYPES


4292 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4293 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4294 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4295 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4296 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4297 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4299 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4300 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4301 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4302 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4303 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4304 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4307 #i‚de‡
GL_VERSION_3_0


4308 
	#GL_VERSION_3_0
 1

	)

4311 #i‚de‡
GL_ARB_mu…ôextuª


4312 
	#GL_ARB_mu…ôextuª
 1

	)

4313 #ifde‡
GL_GLEXT_PROTOTYPES


4314 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
);

4315 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
);

4316 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
, 
GLdoubÀ
);

4317 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4318 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
, 
GLÊﬂt
);

4319 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4320 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
, 
GLöt
);

4321 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

4322 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
, 
GLsh‹t
);

4323 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4324 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble);

4325 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4326 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat);

4327 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4328 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
, 
GLöt
, GLint);

4329 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

4330 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
, 
GLsh‹t
, GLshort);

4331 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4332 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

4333 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4334 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

4335 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4336 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
, 
GLöt
, GLint, GLint);

4337 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

4338 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

4339 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4340 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4341 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4342 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4343 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4344 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

4345 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

4346 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

4347 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4349 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

4350 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

4351 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

4352 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4353 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

4354 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4355 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

4356 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4357 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

4358 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4359 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

4360 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4361 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

4362 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4363 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

4364 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4365 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

4366 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4367 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

4368 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4369 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

4370 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4371 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

4372 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4373 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

4374 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4375 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

4376 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4377 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

4378 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4379 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

4380 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4381 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

4382 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4385 #i‚de‡
GL_ARB_å™•o£_m©rix


4386 
	#GL_ARB_å™•o£_m©rix
 1

	)

4387 #ifde‡
GL_GLEXT_PROTOTYPES


4388 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

4389 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

4390 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

4391 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

4393 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4394 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4395 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4396 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4399 #i‚de‡
GL_ARB_mu…ißm∂e


4400 
	#GL_ARB_mu…ißm∂e
 1

	)

4401 #ifde‡
GL_GLEXT_PROTOTYPES


4402 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GL˛ampf
, 
GLboﬁón
);

4404 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4407 #i‚de‡
GL_ARB_ãxtuª_ív_add


4408 
	#GL_ARB_ãxtuª_ív_add
 1

	)

4411 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


4412 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

4415 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


4416 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

4417 #ifde‡
GL_GLEXT_PROTOTYPES


4418 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

4419 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

4420 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

4421 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

4422 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

4423 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

4424 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

4426 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4427 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4428 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4429 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4430 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4431 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4432 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

4435 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


4436 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

4439 #i‚de‡
GL_ARB_poöt_∑ømëîs


4440 
	#GL_ARB_poöt_∑ømëîs
 1

	)

4441 #ifde‡
GL_GLEXT_PROTOTYPES


4442 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
, 
GLÊﬂt
);

4443 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4445 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4446 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4449 #i‚de‡
GL_ARB_vîãx_bÀnd


4450 
	#GL_ARB_vîãx_bÀnd
 1

	)

4451 #ifde‡
GL_GLEXT_PROTOTYPES


4452 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
, c⁄° 
GLbyã
 *);

4453 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
, c⁄° 
GLsh‹t
 *);

4454 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
, const GLint *);

4455 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
, c⁄° 
GLÊﬂt
 *);

4456 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
, c⁄° 
GLdoubÀ
 *);

4457 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

4458 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

4459 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

4460 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

4461 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
);

4463 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4464 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4465 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4466 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4467 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4468 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4469 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4470 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4471 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4472 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4475 #i‚de‡
GL_ARB_m©rix_∑Àâe


4476 
	#GL_ARB_m©rix_∑Àâe
 1

	)

4477 #ifde‡
GL_GLEXT_PROTOTYPES


4478 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
);

4479 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

4480 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

4481 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

4482 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

4484 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

4485 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

4486 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

4487 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

4488 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4491 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


4492 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

4495 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


4496 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

4499 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


4500 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

4503 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


4504 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

4507 #i‚de‡
GL_ARB_dïth_ãxtuª


4508 
	#GL_ARB_dïth_ãxtuª
 1

	)

4511 #i‚de‡
GL_ARB_shadow


4512 
	#GL_ARB_shadow
 1

	)

4515 #i‚de‡
GL_ARB_shadow_ambõ¡


4516 
	#GL_ARB_shadow_ambõ¡
 1

	)

4519 #i‚de‡
GL_ARB_wödow_pos


4520 
	#GL_ARB_wödow_pos
 1

	)

4521 #ifde‡
GL_GLEXT_PROTOTYPES


4522 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
, GLdouble);

4523 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *);

4524 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
, GLfloat);

4525 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *);

4526 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
, GLint);

4527 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *);

4528 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
, GLshort);

4529 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *);

4530 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
, GLdouble, GLdouble);

4531 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *);

4532 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
, GLfloat, GLfloat);

4533 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *);

4534 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
, GLint, GLint);

4535 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *);

4536 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
, GLshort, GLshort);

4537 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *);

4539 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4540 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4541 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4542 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4543 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4544 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4545 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4546 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4547 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4548 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4549 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4550 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4551 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4552 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4553 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4554 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4557 #i‚de‡
GL_ARB_vîãx_¥ogøm


4558 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4559 #ifde‡
GL_GLEXT_PROTOTYPES


4560 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
, 
GLdoubÀ
);

4561 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4562 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
, 
GLÊﬂt
);

4563 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4564 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
, 
GLsh‹t
);

4565 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4566 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

4567 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4568 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

4569 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4570 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
, 
GLsh‹t
, GLshort);

4571 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4572 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

4573 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4574 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4575 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4576 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

4577 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4578 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

4579 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

4580 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4581 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

4582 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

4583 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
, const GLuint *);

4584 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

4585 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

4586 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4587 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4588 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4589 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4590 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

4591 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

4592 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4593 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

4594 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
, const GLuint *);

4595 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

4596 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

4597 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
);

4598 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
);

4599 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

4600 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
, 
GLuöt
);

4601 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4602 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
, 
GLuöt
 *);

4603 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4604 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

4605 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4606 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

4607 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4608 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

4609 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4610 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

4611 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

4612 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

4613 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

4614 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

4615 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4616 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
, GLíum, 
GLvoid
 *);

4617 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

4618 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

4619 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4620 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

4621 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
);

4623 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4624 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4625 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4626 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4627 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4628 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4629 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4630 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4631 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4632 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4633 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4634 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4635 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4636 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4637 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4638 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4639 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4640 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4641 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4642 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4643 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4644 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4645 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4646 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4647 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4648 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4649 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4654 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4655 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4656 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4657 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4658 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4659 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4660 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4661 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4662 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

4663 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

4664 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

4665 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

4666 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4667 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4668 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4669 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4670 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4671 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4672 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4673 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4674 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4675 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4676 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4677 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4678 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4679 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

4680 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4681 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4682 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4683 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

4684 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4687 #i‚de‡
GL_ARB_‰agmít_¥ogøm


4688 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

4692 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4693 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4694 #ifde‡
GL_GLEXT_PROTOTYPES


4695 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
, 
GLuöt
);

4696 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4697 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
, 
GLuöt
 *);

4698 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
);

4699 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *, GLenum);

4700 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *);

4701 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, 
GLvoid
 *);

4702 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
, GLenum);

4703 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
);

4704 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4705 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
, GLíum, 
GLvoid
* *);

4707 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4708 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4709 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4710 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4711 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

4712 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

4713 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

4714 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4715 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4716 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4717 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4720 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


4721 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

4722 #ifde‡
GL_GLEXT_PROTOTYPES


4723 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
, 
GLuöt
 *);

4724 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4725 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
);

4726 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
, 
GLuöt
);

4727 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
);

4728 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4729 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4730 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
, 
GLíum
, GLuint *);

4732 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

4733 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

4734 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

4735 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4736 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4737 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4738 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4739 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

4742 #i‚de‡
GL_ARB_shadî_obje˘s


4743 
	#GL_ARB_shadî_obje˘s
 1

	)

4744 #ifde‡
GL_GLEXT_PROTOTYPES


4745 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
);

4746 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
);

4747 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4748 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
);

4749 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, c⁄° 
GLch¨ARB
* *, c⁄° 
GLöt
 *);

4750 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
);

4751 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4752 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4753 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
);

4754 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
);

4755 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
);

4756 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
, 
GLÊﬂt
);

4757 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat);

4758 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4759 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4760 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
, GLint);

4761 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
, GLint, GLint);

4762 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
, GLint, GLint, GLint);

4763 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
, GLint, GLint, GLint, GLint);

4764 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4765 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4766 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4767 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4768 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4769 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4770 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4771 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4772 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4773 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4774 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4775 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
, 
GLíum
, 
GLÊﬂt
 *);

4776 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
, 
GLíum
, 
GLöt
 *);

4777 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4778 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizei *, GLhandleARB *);

4779 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4780 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4781 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
, 
GLöt
, 
GLÊﬂt
 *);

4782 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
, 
GLöt
, GLint *);

4783 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4785 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4786 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4787 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4788 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4789 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4790 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4791 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4792 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4793 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4794 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4795 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4796 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4797 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4798 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4799 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4800 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4801 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4802 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4803 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4804 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4805 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4806 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4807 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4808 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4809 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4810 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4811 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4812 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4813 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4814 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4815 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4816 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4817 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4818 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4819 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4820 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4821 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4822 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4823 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4826 #i‚de‡
GL_ARB_vîãx_shadî


4827 
	#GL_ARB_vîãx_shadî
 1

	)

4828 #ifde‡
GL_GLEXT_PROTOTYPES


4829 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
, 
GLuöt
, c⁄° 
GLch¨ARB
 *);

4830 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4831 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4833 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4834 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4835 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4838 #i‚de‡
GL_ARB_‰agmít_shadî


4839 
	#GL_ARB_‰agmít_shadî
 1

	)

4842 #i‚de‡
GL_ARB_shadög_œnguage_100


4843 
	#GL_ARB_shadög_œnguage_100
 1

	)

4846 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4847 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4850 #i‚de‡
GL_ARB_poöt_•rôe


4851 
	#GL_ARB_poöt_•rôe
 1

	)

4854 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


4855 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

4858 #i‚de‡
GL_ARB_døw_buf„rs


4859 
	#GL_ARB_døw_buf„rs
 1

	)

4860 #ifde‡
GL_GLEXT_PROTOTYPES


4861 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
, c⁄° 
GLíum
 *);

4863 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

4866 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4867 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4870 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


4871 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

4872 #ifde‡
GL_GLEXT_PROTOTYPES


4873 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
, GLenum);

4875 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

4878 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


4879 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

4882 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4883 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4886 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


4887 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

4890 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


4891 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

4894 #i‚de‡
GL_ARB_døw_ö°™˚d


4895 
	#GL_ARB_døw_ö°™˚d
 1

	)

4898 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


4899 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

4902 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


4903 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

4906 #i‚de‡
GL_ARB_geomëry_shadî4


4907 
	#GL_ARB_geomëry_shadî4
 1

	)

4910 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


4911 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

4914 #i‚de‡
GL_ARB_ö°™˚d_¨øys


4915 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

4918 #i‚de‡
GL_ARB_m≠_buf„r_ønge


4919 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

4922 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


4923 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

4926 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


4927 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

4930 #i‚de‡
GL_ARB_ãxtuª_rg


4931 
	#GL_ARB_ãxtuª_rg
 1

	)

4934 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4935 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4938 #i‚de‡
GL_EXT_abgr


4939 
	#GL_EXT_abgr
 1

	)

4942 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


4943 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

4944 #ifde‡
GL_GLEXT_PROTOTYPES


4945 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

4947 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

4950 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


4951 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

4952 #ifde‡
GL_GLEXT_PROTOTYPES


4953 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
, GLfloat);

4955 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

4958 #i‚de‡
GL_EXT_ãxtuª


4959 
	#GL_EXT_ãxtuª
 1

	)

4962 #i‚de‡
GL_EXT_ãxtuª3D


4963 
	#GL_EXT_ãxtuª3D
 1

	)

4964 #ifde‡
GL_GLEXT_PROTOTYPES


4965 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4966 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4968 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4969 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4972 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


4973 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

4974 #ifde‡
GL_GLEXT_PROTOTYPES


4975 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4976 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4978 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

4979 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4982 #i‚de‡
GL_EXT_subãxtuª


4983 
	#GL_EXT_subãxtuª
 1

	)

4984 #ifde‡
GL_GLEXT_PROTOTYPES


4985 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4986 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4988 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4989 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4992 #i‚de‡
GL_EXT_c›y_ãxtuª


4993 
	#GL_EXT_c›y_ãxtuª
 1

	)

4994 #ifde‡
GL_GLEXT_PROTOTYPES


4995 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

4996 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

4997 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

4998 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4999 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

5001 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

5002 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

5003 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5004 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5005 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5008 #i‚de‡
GL_EXT_hi°ogøm


5009 
	#GL_EXT_hi°ogøm
 1

	)

5010 #ifde‡
GL_GLEXT_PROTOTYPES


5011 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

5012 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5013 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

5014 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

5015 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5016 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

5017 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

5018 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
, GLíum, 
GLboﬁón
);

5019 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
);

5020 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
);

5022 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

5023 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5024 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5025 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

5026 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5027 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5028 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

5029 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

5030 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

5031 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

5034 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


5035 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

5036 #ifde‡
GL_GLEXT_PROTOTYPES


5037 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

5038 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

5039 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

5040 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5041 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

5042 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5043 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

5044 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

5045 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

5046 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5047 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

5048 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

5049 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

5051 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

5052 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

5053 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

5054 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5055 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

5056 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5057 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5058 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5059 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

5060 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5061 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5062 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

5063 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

5066 #i‚de‡
GL_SGI_cﬁ‹_m©rix


5067 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

5070 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


5071 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

5072 #ifde‡
GL_GLEXT_PROTOTYPES


5073 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

5074 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5075 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5076 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

5077 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

5078 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5079 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, 
GLöt
 *);

5081 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

5082 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5083 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5084 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5085 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

5086 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5087 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5090 #i‚de‡
GL_SGIX_pixñ_ãxtuª


5091 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

5092 #ifde‡
GL_GLEXT_PROTOTYPES


5093 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
);

5095 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

5098 #i‚de‡
GL_SGIS_pixñ_ãxtuª


5099 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

5100 #ifde‡
GL_GLEXT_PROTOTYPES


5101 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
, 
GLöt
);

5102 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
, c⁄° 
GLöt
 *);

5103 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

5104 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5105 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
, 
GLöt
 *);

5106 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
, 
GLÊﬂt
 *);

5108 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5109 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5110 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5111 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5112 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5113 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5116 #i‚de‡
GL_SGIS_ãxtuª4D


5117 
	#GL_SGIS_ãxtuª4D
 1

	)

5118 #ifde‡
GL_GLEXT_PROTOTYPES


5119 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

5120 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

5122 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

5123 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

5126 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


5127 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

5130 #i‚de‡
GL_EXT_cmyka


5131 
	#GL_EXT_cmyka
 1

	)

5134 #i‚de‡
GL_EXT_ãxtuª_obje˘


5135 
	#GL_EXT_ãxtuª_obje˘
 1

	)

5136 #ifde‡
GL_GLEXT_PROTOTYPES


5137 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

5138 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
, 
GLuöt
);

5139 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

5140 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
, 
GLuöt
 *);

5141 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
);

5142 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, c⁄° 
GL˛ampf
 *);

5144 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

5145 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

5146 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

5147 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

5148 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

5149 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

5152 #i‚de‡
GL_SGIS_dëaû_ãxtuª


5153 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

5154 #ifde‡
GL_GLEXT_PROTOTYPES


5155 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5156 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

5158 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

5159 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

5162 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


5163 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

5164 #ifde‡
GL_GLEXT_PROTOTYPES


5165 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5166 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

5168 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

5169 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

5172 #i‚de‡
GL_EXT_∑cked_pixñs


5173 
	#GL_EXT_∑cked_pixñs
 1

	)

5176 #i‚de‡
GL_SGIS_ãxtuª_lod


5177 
	#GL_SGIS_ãxtuª_lod
 1

	)

5180 #i‚de‡
GL_SGIS_mu…ißm∂e


5181 
	#GL_SGIS_mu…ißm∂e
 1

	)

5182 #ifde‡
GL_GLEXT_PROTOTYPES


5183 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
, 
GLboﬁón
);

5184 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
);

5186 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

5187 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

5190 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


5191 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

5194 #i‚de‡
GL_EXT_vîãx_¨øy


5195 
	#GL_EXT_vîãx_¨øy
 1

	)

5196 #ifde‡
GL_GLEXT_PROTOTYPES


5197 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
);

5198 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

5199 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
, 
GLöt
, 
GLsizei
);

5200 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
, GLsizei, c⁄° 
GLboﬁón
 *);

5201 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
, 
GLvoid
* *);

5202 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

5203 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

5204 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

5205 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

5207 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

5208 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5209 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5210 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

5211 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

5212 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5213 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5214 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5215 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5218 #i‚de‡
GL_EXT_misc_©åibuã


5219 
	#GL_EXT_misc_©åibuã
 1

	)

5222 #i‚de‡
GL_SGIS_gíî©e_mùm≠


5223 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

5226 #i‚de‡
GL_SGIX_˛ùm≠


5227 
	#GL_SGIX_˛ùm≠
 1

	)

5230 #i‚de‡
GL_SGIX_shadow


5231 
	#GL_SGIX_shadow
 1

	)

5234 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


5235 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

5238 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


5239 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

5242 #i‚de‡
GL_EXT_bÀnd_mömax


5243 
	#GL_EXT_bÀnd_mömax
 1

	)

5244 #ifde‡
GL_GLEXT_PROTOTYPES


5245 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
);

5247 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

5250 #i‚de‡
GL_EXT_bÀnd_subåa˘


5251 
	#GL_EXT_bÀnd_subåa˘
 1

	)

5254 #i‚de‡
GL_EXT_bÀnd_logic_›


5255 
	#GL_EXT_bÀnd_logic_›
 1

	)

5258 #i‚de‡
GL_SGIX_öãæa˚


5259 
	#GL_SGIX_öãæa˚
 1

	)

5262 #i‚de‡
GL_SGIX_pixñ_tûes


5263 
	#GL_SGIX_pixñ_tûes
 1

	)

5266 #i‚de‡
GL_SGIX_ãxtuª_£À˘


5267 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

5270 #i‚de‡
GL_SGIX_•rôe


5271 
	#GL_SGIX_•rôe
 1

	)

5272 #ifde‡
GL_GLEXT_PROTOTYPES


5273 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
, 
GLÊﬂt
);

5274 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5275 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
, 
GLöt
);

5276 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

5278 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5279 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5280 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5281 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5284 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


5285 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

5288 #i‚de‡
GL_EXT_poöt_∑ømëîs


5289 
	#GL_EXT_poöt_∑ømëîs
 1

	)

5290 #ifde‡
GL_GLEXT_PROTOTYPES


5291 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
, 
GLÊﬂt
);

5292 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5294 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5295 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5298 #i‚de‡
GL_SGIS_poöt_∑ømëîs


5299 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

5300 #ifde‡
GL_GLEXT_PROTOTYPES


5301 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

5302 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5304 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5305 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5308 #i‚de‡
GL_SGIX_ö°rumíts


5309 
	#GL_SGIX_ö°rumíts
 1

	)

5310 #ifde‡
GL_GLEXT_PROTOTYPES


5311 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

5312 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
, 
GLöt
 *);

5313 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLint *);

5314 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
);

5315 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

5316 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
);

5318 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

5319 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

5320 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

5321 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

5322 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

5323 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

5326 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


5327 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

5330 #i‚de‡
GL_SGIX_‰amezoom


5331 
	#GL_SGIX_‰amezoom
 1

	)

5332 #ifde‡
GL_GLEXT_PROTOTYPES


5333 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
);

5335 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

5338 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


5339 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

5340 #ifde‡
GL_GLEXT_PROTOTYPES


5341 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

5343 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

5346 #i‚de‡
GL_SGIX_pﬁynomül_ffd


5347 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

5348 #ifde‡
GL_GLEXT_PROTOTYPES


5349 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);

5350 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);

5351 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
);

5352 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
);

5354 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5355 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5356 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

5357 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

5360 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


5361 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

5362 #ifde‡
GL_GLEXT_PROTOTYPES


5363 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *);

5365 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

5368 #i‚de‡
GL_SGIX_Êush_ø°î


5369 
	#GL_SGIX_Êush_ø°î
 1

	)

5370 #ifde‡
GL_GLEXT_PROTOTYPES


5371 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

5373 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

5376 #i‚de‡
GL_SGIX_dïth_ãxtuª


5377 
	#GL_SGIX_dïth_ãxtuª
 1

	)

5380 #i‚de‡
GL_SGIS_fog_fun˘i⁄


5381 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

5382 #ifde‡
GL_GLEXT_PROTOTYPES


5383 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
, c⁄° 
GLÊﬂt
 *);

5384 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *);

5386 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

5387 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

5390 #i‚de‡
GL_SGIX_fog_off£t


5391 
	#GL_SGIX_fog_off£t
 1

	)

5394 #i‚de‡
GL_HP_image_å™sf‹m


5395 
	#GL_HP_image_å™sf‹m
 1

	)

5396 #ifde‡
GL_GLEXT_PROTOTYPES


5397 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
, GLíum, 
GLöt
);

5398 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
, GLíum, 
GLÊﬂt
);

5399 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5400 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5401 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, 
GLöt
 *);

5402 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5404 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5405 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5406 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5407 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5408 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5409 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5412 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


5413 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

5416 #i‚de‡
GL_SGIX_ãxtuª_add_ív


5417 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

5420 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


5421 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

5422 #ifde‡
GL_GLEXT_PROTOTYPES


5423 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

5424 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

5426 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

5427 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

5430 #i‚de‡
GL_PGI_vîãx_höts


5431 
	#GL_PGI_vîãx_höts
 1

	)

5434 #i‚de‡
GL_PGI_misc_höts


5435 
	#GL_PGI_misc_höts
 1

	)

5436 #ifde‡
GL_GLEXT_PROTOTYPES


5437 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
, 
GLöt
);

5439 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

5442 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


5443 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

5444 #ifde‡
GL_GLEXT_PROTOTYPES


5445 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

5446 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

5447 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

5448 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5450 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

5451 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

5452 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5453 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5456 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


5457 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

5460 #i‚de‡
GL_SGIX_li°_¥i‹ôy


5461 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

5462 #ifde‡
GL_GLEXT_PROTOTYPES


5463 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5464 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5465 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
);

5466 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLÊﬂt
 *);

5467 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
);

5468 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLöt
 *);

5470 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5471 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5472 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5473 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5474 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5475 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5478 #i‚de‡
GL_SGIX_ú_ö°rumít1


5479 
	#GL_SGIX_ú_ö°rumít1
 1

	)

5482 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


5483 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

5486 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


5487 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

5490 #i‚de‡
GL_SGIX_shadow_ambõ¡


5491 
	#GL_SGIX_shadow_ambõ¡
 1

	)

5494 #i‚de‡
GL_EXT_ödex_ãxtuª


5495 
	#GL_EXT_ödex_ãxtuª
 1

	)

5498 #i‚de‡
GL_EXT_ödex_m©îül


5499 
	#GL_EXT_ödex_m©îül
 1

	)

5500 #ifde‡
GL_GLEXT_PROTOTYPES


5501 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
, GLenum);

5503 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

5506 #i‚de‡
GL_EXT_ödex_func


5507 
	#GL_EXT_ödex_func
 1

	)

5508 #ifde‡
GL_GLEXT_PROTOTYPES


5509 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
, 
GL˛ampf
);

5511 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

5514 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


5515 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

5518 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


5519 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

5520 #ifde‡
GL_GLEXT_PROTOTYPES


5521 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
, 
GLsizei
);

5522 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

5524 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5525 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

5528 #i‚de‡
GL_EXT_cuŒ_vîãx


5529 
	#GL_EXT_cuŒ_vîãx
 1

	)

5530 #ifde‡
GL_GLEXT_PROTOTYPES


5531 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
, 
GLdoubÀ
 *);

5532 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
, 
GLÊﬂt
 *);

5534 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5535 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5538 #i‚de‡
GL_SGIX_y¸cb


5539 
	#GL_SGIX_y¸cb
 1

	)

5542 #i‚de‡
GL_SGIX_‰agmít_lightög


5543 
	#GL_SGIX_‰agmít_lightög
 1

	)

5544 #ifde‡
GL_GLEXT_PROTOTYPES


5545 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
, GLenum);

5546 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

5547 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5548 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
, GLíum, 
GLöt
);

5549 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5550 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
, 
GLÊﬂt
);

5551 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5552 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
, 
GLöt
);

5553 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

5554 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

5555 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5556 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
, GLíum, 
GLöt
);

5557 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5558 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5559 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

5560 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5561 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

5562 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
, 
GLöt
);

5564 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

5565 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5566 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5567 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5568 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5569 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5570 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5571 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5572 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5573 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5574 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5575 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5576 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5577 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5578 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5579 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5580 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5581 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5584 #i‚de‡
GL_IBM_ø°îpos_˛ù


5585 
	#GL_IBM_ø°îpos_˛ù
 1

	)

5588 #i‚de‡
GL_HP_ãxtuª_lightög


5589 
	#GL_HP_ãxtuª_lightög
 1

	)

5592 #i‚de‡
GL_EXT_døw_ønge_ñemíts


5593 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

5594 #ifde‡
GL_GLEXT_PROTOTYPES


5595 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

5597 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

5600 #i‚de‡
GL_WIN_ph⁄g_shadög


5601 
	#GL_WIN_ph⁄g_shadög
 1

	)

5604 #i‚de‡
GL_WIN_•ecuœr_fog


5605 
	#GL_WIN_•ecuœr_fog
 1

	)

5608 #i‚de‡
GL_EXT_light_ãxtuª


5609 
	#GL_EXT_light_ãxtuª
 1

	)

5610 #ifde‡
GL_GLEXT_PROTOTYPES


5611 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
);

5612 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
);

5613 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
, GLenum);

5615 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

5616 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

5617 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

5620 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


5621 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

5624 #i‚de‡
GL_EXT_bgø


5625 
	#GL_EXT_bgø
 1

	)

5628 #i‚de‡
GL_SGIX_async


5629 
	#GL_SGIX_async
 1

	)

5630 #ifde‡
GL_GLEXT_PROTOTYPES


5631 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
);

5632 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *);

5633 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *);

5634 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
);

5635 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
, 
GLsizei
);

5636 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
);

5638 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

5639 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

5640 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

5641 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

5642 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

5643 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

5646 #i‚de‡
GL_SGIX_async_pixñ


5647 
	#GL_SGIX_async_pixñ
 1

	)

5650 #i‚de‡
GL_SGIX_async_hi°ogøm


5651 
	#GL_SGIX_async_hi°ogøm
 1

	)

5654 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


5655 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

5656 #ifde‡
GL_GLEXT_PROTOTYPES


5657 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

5658 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
, c⁄° 
GLvoid
* *);

5659 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

5660 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

5662 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5663 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5664 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5665 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5668 #i‚de‡
GL_HP_oc˛usi⁄_ã°


5669 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

5672 #i‚de‡
GL_EXT_pixñ_å™sf‹m


5673 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

5674 #ifde‡
GL_GLEXT_PROTOTYPES


5675 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

5676 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

5677 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5678 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5680 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5681 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5682 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5683 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5686 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


5687 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

5690 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


5691 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

5694 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


5695 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

5698 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


5699 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

5700 #ifde‡
GL_GLEXT_PROTOTYPES


5701 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5702 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *);

5703 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5704 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5705 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5706 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5707 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
, GLint, GLint);

5708 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *);

5709 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5710 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *);

5711 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
, GLubyte, GLubyte);

5712 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *);

5713 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
, GLuint, GLuint);

5714 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *);

5715 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
, GLushort, GLushort);

5716 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *);

5717 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5719 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

5720 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5721 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

5722 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5723 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

5724 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5725 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

5726 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5727 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

5728 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5729 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

5730 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

5731 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

5732 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

5733 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

5734 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

5735 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5738 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


5739 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

5740 #ifde‡
GL_GLEXT_PROTOTYPES


5741 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
);

5743 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

5746 #i‚de‡
GL_EXT_mu…i_døw_¨øys


5747 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

5748 #ifde‡
GL_GLEXT_PROTOTYPES


5749 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

5750 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

5752 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5753 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

5756 #i‚de‡
GL_EXT_fog_co‹d


5757 
	#GL_EXT_fog_co‹d
 1

	)

5758 #ifde‡
GL_GLEXT_PROTOTYPES


5759 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
);

5760 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *);

5761 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
);

5762 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *);

5763 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5765 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

5766 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

5767 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

5768 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

5769 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5772 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


5773 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

5776 #i‚de‡
GL_EXT_co‹dö©e_‰ame


5777 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

5778 #ifde‡
GL_GLEXT_PROTOTYPES


5779 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5780 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *);

5781 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5782 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5783 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5784 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5785 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
, GLint, GLint);

5786 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *);

5787 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5788 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *);

5789 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5790 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *);

5791 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5792 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5793 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5794 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5795 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
, GLint, GLint);

5796 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *);

5797 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5798 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *);

5799 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5800 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5802 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

5803 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5804 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

5805 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5806 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

5807 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5808 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

5809 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5810 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

5811 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5812 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

5813 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5814 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

5815 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5816 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

5817 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5818 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

5819 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5820 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

5821 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5822 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5823 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5826 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


5827 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

5830 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5831 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5834 #i‚de‡
GL_APPLE_å™sf‹m_höt


5835 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5838 #i‚de‡
GL_SGIX_fog_sˇÀ


5839 
	#GL_SGIX_fog_sˇÀ
 1

	)

5842 #i‚de‡
GL_SUNX_c⁄°™t_d©a


5843 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

5844 #ifde‡
GL_GLEXT_PROTOTYPES


5845 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

5847 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

5850 #i‚de‡
GL_SUN_globÆ_Æpha


5851 
	#GL_SUN_globÆ_Æpha
 1

	)

5852 #ifde‡
GL_GLEXT_PROTOTYPES


5853 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
);

5854 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
);

5855 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
);

5856 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
);

5857 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
);

5858 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
);

5859 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
);

5860 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
);

5862 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

5863 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

5864 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

5865 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5866 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

5867 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

5868 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

5869 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

5872 #i‚de‡
GL_SUN_åüngÀ_li°


5873 
	#GL_SUN_åüngÀ_li°
 1

	)

5874 #ifde‡
GL_GLEXT_PROTOTYPES


5875 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
);

5876 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
);

5877 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
);

5878 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *);

5879 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *);

5880 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *);

5881 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
* *);

5883 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

5884 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

5885 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

5886 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

5887 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

5888 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

5889 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5892 #i‚de‡
GL_SUN_vîãx


5893 
	#GL_SUN_vîãx
 1

	)

5894 #ifde‡
GL_GLEXT_PROTOTYPES


5895 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat);

5896 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5897 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5898 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5899 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5900 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5901 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5902 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5903 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5904 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5905 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5906 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5907 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5908 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5909 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
, GLÊﬂt, 
GLubyã
, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);

5910 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, c⁄° 
GLubyã
 *, const GLfloat *);

5911 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5912 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5913 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5914 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5915 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5916 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5917 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5918 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5919 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5920 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *);

5921 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
, 
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5922 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5923 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5924 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5925 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5926 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5927 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5928 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5929 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5930 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5931 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5932 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5933 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5934 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5936 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5937 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5938 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5939 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5940 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5941 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5942 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5943 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5944 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5945 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5946 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5947 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5948 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5949 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5950 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5951 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5952 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5953 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

5954 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5955 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5956 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5957 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5958 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5959 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5960 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5961 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5962 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5963 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5964 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5965 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5966 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5967 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5968 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5969 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5970 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5971 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5972 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5973 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5974 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5975 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5978 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


5979 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

5980 #ifde‡
GL_GLEXT_PROTOTYPES


5981 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
, GLenum, GLenum, GLenum);

5983 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5986 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


5987 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

5988 #ifde‡
GL_GLEXT_PROTOTYPES


5989 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
, GLenum, GLenum, GLenum);

5991 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5994 #i‚de‡
GL_INGR_cﬁ‹_˛amp


5995 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

5998 #i‚de‡
GL_INGR_öãæa˚_ªad


5999 
	#GL_INGR_öãæa˚_ªad
 1

	)

6002 #i‚de‡
GL_EXT_°ícû_wøp


6003 
	#GL_EXT_°ícû_wøp
 1

	)

6006 #i‚de‡
GL_EXT_422_pixñs


6007 
	#GL_EXT_422_pixñs
 1

	)

6010 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


6011 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

6014 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


6015 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

6018 #i‚de‡
GL_EXT_ãxtuª_ív_add


6019 
	#GL_EXT_ãxtuª_ív_add
 1

	)

6022 #i‚de‡
GL_EXT_ãxtuª_lod_büs


6023 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

6026 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


6027 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

6030 #i‚de‡
GL_EXT_vîãx_weightög


6031 
	#GL_EXT_vîãx_weightög
 1

	)

6032 #ifde‡
GL_GLEXT_PROTOTYPES


6033 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
);

6034 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *);

6035 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLsizei
, 
GLíum
, GLsizei, c⁄° 
GLvoid
 *);

6037 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

6038 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

6039 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLíum
 
	tty≥
, GLsizeò
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6042 #i‚de‡
GL_NV_light_max_exp⁄ít


6043 
	#GL_NV_light_max_exp⁄ít
 1

	)

6046 #i‚de‡
GL_NV_vîãx_¨øy_ønge


6047 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

6048 #ifde‡
GL_GLEXT_PROTOTYPES


6049 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

6050 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
, c⁄° 
GLvoid
 *);

6052 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

6053 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6056 #i‚de‡
GL_NV_ªgi°î_comböîs


6057 
	#GL_NV_ªgi°î_comböîs
 1

	)

6058 #ifde‡
GL_GLEXT_PROTOTYPES


6059 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6060 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
, 
GLÊﬂt
);

6061 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

6062 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
, 
GLöt
);

6063 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum, GLenum, GLenum);

6064 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
, GLíum, GLíum, GLíum, GLíum, GLíum, GLíum, 
GLboﬁón
, GLboolean, GLboolean);

6065 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum);

6066 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLÊﬂt
 *);

6067 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLöt
 *);

6068 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

6069 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

6070 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6071 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

6073 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6074 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6075 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6076 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6077 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

6078 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

6079 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

6080 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6081 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6082 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6083 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6084 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6085 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6088 #i‚de‡
GL_NV_fog_di°™˚


6089 
	#GL_NV_fog_di°™˚
 1

	)

6092 #i‚de‡
GL_NV_ãxgí_emboss


6093 
	#GL_NV_ãxgí_emboss
 1

	)

6096 #i‚de‡
GL_NV_bÀnd_squ¨e


6097 
	#GL_NV_bÀnd_squ¨e
 1

	)

6100 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


6101 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

6104 #i‚de‡
GL_MESA_ªsize_buf„rs


6105 
	#GL_MESA_ªsize_buf„rs
 1

	)

6106 #ifde‡
GL_GLEXT_PROTOTYPES


6107 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

6109 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

6112 #i‚de‡
GL_MESA_wödow_pos


6113 
	#GL_MESA_wödow_pos
 1

	)

6114 #ifde‡
GL_GLEXT_PROTOTYPES


6115 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
, GLdouble);

6116 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *);

6117 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
, GLfloat);

6118 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *);

6119 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
, GLint);

6120 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *);

6121 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
, GLshort);

6122 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *);

6123 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
, GLdouble, GLdouble);

6124 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *);

6125 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
, GLfloat, GLfloat);

6126 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *);

6127 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
, GLint, GLint);

6128 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *);

6129 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
, GLshort, GLshort);

6130 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *);

6131 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6132 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *);

6133 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6134 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *);

6135 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
, GLint, GLint, GLint);

6136 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *);

6137 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
, GLshort, GLshort, GLshort);

6138 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *);

6140 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6141 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6142 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6143 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6144 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

6145 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6146 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6147 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6148 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6149 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6150 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6151 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6152 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6153 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6154 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6155 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6156 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6157 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6158 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6159 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6160 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6161 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6162 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6163 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6166 #i‚de‡
GL_IBM_cuŒ_vîãx


6167 
	#GL_IBM_cuŒ_vîãx
 1

	)

6170 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


6171 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

6172 #ifde‡
GL_GLEXT_PROTOTYPES


6173 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei, GLint);

6174 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* c⁄° *, GLsizei, 
GLöt
);

6176 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

6177 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

6180 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


6181 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

6182 #ifde‡
GL_GLEXT_PROTOTYPES


6183 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

6184 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

6185 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
, c⁄° 
GLboﬁón
* *, GLint);

6186 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

6187 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

6188 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

6189 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

6190 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

6192 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6193 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6194 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

6195 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6196 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6197 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6198 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6199 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

6202 #i‚de‡
GL_SGIX_subßm∂e


6203 
	#GL_SGIX_subßm∂e
 1

	)

6206 #i‚de‡
GL_SGIX_y¸cba


6207 
	#GL_SGIX_y¸cba
 1

	)

6210 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


6211 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

6214 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


6215 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

6218 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


6219 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

6222 #i‚de‡
GL_3DFX_mu…ißm∂e


6223 
	#GL_3DFX_mu…ißm∂e
 1

	)

6226 #i‚de‡
GL_3DFX_tbuf„r


6227 
	#GL_3DFX_tbuf„r
 1

	)

6228 #ifde‡
GL_GLEXT_PROTOTYPES


6229 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
);

6231 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

6234 #i‚de‡
GL_EXT_mu…ißm∂e


6235 
	#GL_EXT_mu…ißm∂e
 1

	)

6236 #ifde‡
GL_GLEXT_PROTOTYPES


6237 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
, 
GLboﬁón
);

6238 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
);

6240 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

6241 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

6244 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


6245 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

6248 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


6249 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

6252 #i‚de‡
GL_SGIX_ªßm∂e


6253 
	#GL_SGIX_ªßm∂e
 1

	)

6256 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


6257 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

6260 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


6261 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

6262 #ifde‡
GL_GLEXT_PROTOTYPES


6263 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
, GLboolean, GLboolean, GLboolean);

6265 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

6268 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


6269 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

6270 #ifde‡
GL_GLEXT_PROTOTYPES


6271 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
, c⁄° 
GLvoid
 *);

6273 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

6276 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


6277 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

6280 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


6281 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

6284 #i‚de‡
GL_NV_„n˚


6285 
	#GL_NV_„n˚
 1

	)

6286 #ifde‡
GL_GLEXT_PROTOTYPES


6287 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6288 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
, 
GLuöt
 *);

6289 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
);

6290 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
);

6291 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6292 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
);

6293 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
, 
GLíum
);

6295 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

6296 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

6297 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

6298 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

6299 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6300 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

6301 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

6304 #i‚de‡
GL_NV_evÆu©‹s


6305 
	#GL_NV_evÆu©‹s
 1

	)

6306 #ifde‡
GL_GLEXT_PROTOTYPES


6307 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLöt
, GLöt, 
GLboﬁón
, c⁄° 
GLvoid
 *);

6308 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6309 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6310 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLboﬁón
, 
GLvoid
 *);

6311 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

6312 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6313 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

6314 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

6315 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
, GLenum);

6317 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

6318 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6319 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6320 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

6321 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6322 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6323 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6324 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6325 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

6328 #i‚de‡
GL_NV_∑cked_dïth_°ícû


6329 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

6332 #i‚de‡
GL_NV_ªgi°î_comböîs2


6333 
	#GL_NV_ªgi°î_comböîs2
 1

	)

6334 #ifde‡
GL_GLEXT_PROTOTYPES


6335 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6336 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6338 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6339 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6342 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


6343 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

6346 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


6347 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

6350 #i‚de‡
GL_NV_ãxtuª_shadî


6351 
	#GL_NV_ãxtuª_shadî
 1

	)

6354 #i‚de‡
GL_NV_ãxtuª_shadî2


6355 
	#GL_NV_ãxtuª_shadî2
 1

	)

6358 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


6359 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

6362 #i‚de‡
GL_NV_vîãx_¥ogøm


6363 
	#GL_NV_vîãx_¥ogøm
 1

	)

6364 #ifde‡
GL_GLEXT_PROTOTYPES


6365 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

6366 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
, 
GLuöt
);

6367 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6368 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

6369 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
, 
GLuöt
 *);

6370 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLdoubÀ
 *);

6371 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

6372 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6373 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
, 
GLíum
, 
GLubyã
 *);

6374 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

6375 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

6376 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6377 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6378 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

6379 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
);

6380 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

6381 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6382 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

6383 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6384 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

6385 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLdoubÀ
 *);

6386 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLÊﬂt
 *);

6387 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6388 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
, 
GLuöt
, GLenum, GLenum);

6389 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

6390 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
, 
GLdoubÀ
);

6391 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

6392 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
, 
GLÊﬂt
);

6393 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

6394 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
, 
GLsh‹t
);

6395 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

6396 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

6397 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

6398 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

6399 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

6400 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
, 
GLsh‹t
, GLshort);

6401 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

6402 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

6403 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

6404 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

6405 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

6406 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

6407 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

6408 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6409 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

6410 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6411 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

6412 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

6413 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

6414 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

6415 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
, c⁄° 
GLubyã
 *);

6416 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

6417 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6418 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

6419 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

6420 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6421 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

6422 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

6423 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6424 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

6425 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

6426 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6427 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

6428 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

6430 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

6431 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

6432 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

6433 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6434 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

6435 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6436 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6437 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6438 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

6439 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6440 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6441 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6442 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6443 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

6444 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

6445 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

6446 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6447 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6448 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6449 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6450 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6451 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6452 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

6453 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

6454 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6455 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6456 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6457 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

6458 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6459 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

6460 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6461 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6462 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6463 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6464 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6465 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6466 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6467 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6468 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6469 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6470 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6471 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6472 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6473 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6474 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6475 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6476 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6477 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6478 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6479 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

6480 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6481 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6482 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6483 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

6484 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6485 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6486 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

6487 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6488 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6489 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

6490 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6491 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6492 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

6493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

6496 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


6497 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

6500 #i‚de‡
GL_SGIX_sˇÀbüs_höt


6501 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

6504 #i‚de‡
GL_OML_öãæa˚


6505 
	#GL_OML_öãæa˚
 1

	)

6508 #i‚de‡
GL_OML_subßm∂e


6509 
	#GL_OML_subßm∂e
 1

	)

6512 #i‚de‡
GL_OML_ªßm∂e


6513 
	#GL_OML_ªßm∂e
 1

	)

6516 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


6517 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

6520 #i‚de‡
GL_ATI_ívm≠_bumpm≠


6521 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

6522 #ifde‡
GL_GLEXT_PROTOTYPES


6523 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6524 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6525 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
, 
GLöt
 *);

6526 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
, 
GLÊﬂt
 *);

6528 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

6529 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

6530 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6531 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

6534 #i‚de‡
GL_ATI_‰agmít_shadî


6535 
	#GL_ATI_‰agmít_shadî
 1

	)

6536 #ifde‡
GL_GLEXT_PROTOTYPES


6537 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuint);

6538 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
);

6539 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
);

6540 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

6541 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

6542 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
, GLuöt, 
GLíum
);

6543 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
, GLuöt, 
GLíum
);

6544 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint);

6545 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

6546 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

6547 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

6548 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

6549 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

6550 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

6552 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

6553 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6554 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6555 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

6556 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

6557 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

6558 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

6559 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6560 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6561 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6562 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6563 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6564 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6565 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6568 #i‚de‡
GL_ATI_≤_åüngÀs


6569 
	#GL_ATI_≤_åüngÀs
 1

	)

6570 #ifde‡
GL_GLEXT_PROTOTYPES


6571 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
, 
GLöt
);

6572 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
, 
GLÊﬂt
);

6574 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6575 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6578 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


6579 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

6580 #ifde‡
GL_GLEXT_PROTOTYPES


6581 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

6582 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
);

6583 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

6584 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6585 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6586 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
);

6587 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, 
GLuöt
, GLuint);

6588 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6589 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
, GLíum, 
GLöt
 *);

6590 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLuint, GLuint);

6591 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6592 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6594 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

6595 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6596 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

6597 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6598 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6599 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6600 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

6601 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6602 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6603 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6604 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6605 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6608 #i‚de‡
GL_EXT_vîãx_shadî


6609 
	#GL_EXT_vîãx_shadî
 1

	)

6610 #ifde‡
GL_GLEXT_PROTOTYPES


6611 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

6612 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

6613 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
);

6614 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuint);

6615 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
);

6616 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
, 
GLuöt
, GLuint);

6617 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint);

6618 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint);

6619 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

6620 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

6621 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

6622 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

6623 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
, GLenum, GLenum, GLuint);

6624 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

6625 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

6626 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

6627 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

6628 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

6629 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

6630 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

6631 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

6632 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

6633 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
, const GLuint *);

6634 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLvoid
 *);

6635 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

6636 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

6637 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
, GLenum);

6638 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
, GLenum);

6639 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
, GLenum, GLenum);

6640 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
, GLenum);

6641 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
);

6642 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
, 
GLíum
);

6643 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

6644 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6645 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6646 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

6647 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

6648 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6649 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6650 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

6651 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6652 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6654 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

6655 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

6656 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

6657 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

6658 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

6659 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

6660 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

6661 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

6662 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

6663 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

6664 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

6665 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

6666 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

6667 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

6668 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

6669 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

6670 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

6671 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

6672 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

6673 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

6674 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

6675 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

6676 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

6677 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

6678 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

6679 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

6680 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

6681 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

6682 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

6683 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

6684 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

6685 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

6686 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

6687 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

6688 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

6689 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

6690 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

6691 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

6692 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

6693 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

6694 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

6695 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

6698 #i‚de‡
GL_ATI_vîãx_°ªams


6699 
	#GL_ATI_vîãx_°ªams
 1

	)

6700 #ifde‡
GL_GLEXT_PROTOTYPES


6701 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
, 
GLsh‹t
);

6702 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6703 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
, 
GLöt
);

6704 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6705 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
, 
GLÊﬂt
);

6706 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6707 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
, 
GLdoubÀ
);

6708 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6709 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
, 
GLsh‹t
, GLshort);

6710 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6711 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
, 
GLöt
, GLint);

6712 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6713 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat);

6714 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6715 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble);

6716 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6717 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6718 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6719 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6720 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6721 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6722 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6723 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6724 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6725 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

6726 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6727 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

6728 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6729 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6730 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6731 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6732 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6733 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
, 
GLbyã
, GLbyte, GLbyte);

6734 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
, c⁄° 
GLbyã
 *);

6735 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6736 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6737 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6738 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6739 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6740 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6741 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6742 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6743 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
);

6744 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
, 
GLöt
);

6745 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
, 
GLÊﬂt
);

6747 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6748 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6749 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6750 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6751 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6752 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6753 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6754 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6755 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6756 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6757 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6758 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6759 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6760 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6761 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6762 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6763 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6764 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6765 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6766 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6767 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6768 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6769 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6770 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6771 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6772 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6773 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6774 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6775 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6776 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6777 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6778 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6779 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6780 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6781 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6782 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6783 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6784 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6785 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6786 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6787 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6788 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6789 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6790 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6791 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6794 #i‚de‡
GL_ATI_ñemít_¨øy


6795 
	#GL_ATI_ñemít_¨øy
 1

	)

6796 #ifde‡
GL_GLEXT_PROTOTYPES


6797 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
, c⁄° 
GLvoid
 *);

6798 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
, 
GLsizei
);

6799 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
);

6801 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6802 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

6803 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

6806 #i‚de‡
GL_SUN_mesh_¨øy


6807 
	#GL_SUN_mesh_¨øy
 1

	)

6808 #ifde‡
GL_GLEXT_PROTOTYPES


6809 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

6811 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

6814 #i‚de‡
GL_SUN_¶i˚_accum


6815 
	#GL_SUN_¶i˚_accum
 1

	)

6818 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


6819 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

6822 #i‚de‡
GL_NV_dïth_˛amp


6823 
	#GL_NV_dïth_˛amp
 1

	)

6826 #i‚de‡
GL_NV_oc˛usi⁄_quîy


6827 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

6828 #ifde‡
GL_GLEXT_PROTOTYPES


6829 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
, 
GLuöt
 *);

6830 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6831 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
);

6832 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
);

6833 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

6834 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6835 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
, 
GLíum
, GLuint *);

6837 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6838 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6839 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6840 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6841 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

6842 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6843 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6846 #i‚de‡
GL_NV_poöt_•rôe


6847 
	#GL_NV_poöt_•rôe
 1

	)

6848 #ifde‡
GL_GLEXT_PROTOTYPES


6849 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
, 
GLöt
);

6850 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

6852 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6853 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6856 #i‚de‡
GL_NV_ãxtuª_shadî3


6857 
	#GL_NV_ãxtuª_shadî3
 1

	)

6860 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


6861 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

6864 #i‚de‡
GL_EXT_shadow_funcs


6865 
	#GL_EXT_shadow_funcs
 1

	)

6868 #i‚de‡
GL_EXT_°ícû_two_side


6869 
	#GL_EXT_°ícû_two_side
 1

	)

6870 #ifde‡
GL_GLEXT_PROTOTYPES


6871 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
);

6873 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

6876 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6877 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6880 #i‚de‡
GL_APPLE_˛õ¡_°‹age


6881 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

6884 #i‚de‡
GL_APPLE_ñemít_¨øy


6885 
	#GL_APPLE_ñemít_¨øy
 1

	)

6886 #ifde‡
GL_GLEXT_PROTOTYPES


6887 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
, c⁄° 
GLvoid
 *);

6888 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
, 
GLöt
, 
GLsizei
);

6889 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöt
, 
GLsizei
);

6890 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6891 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6893 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6894 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6895 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6896 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6897 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6900 #i‚de‡
GL_APPLE_„n˚


6901 
	#GL_APPLE_„n˚
 1

	)

6902 #ifde‡
GL_GLEXT_PROTOTYPES


6903 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
, 
GLuöt
 *);

6904 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6905 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
);

6906 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
);

6907 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
);

6908 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
);

6909 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
, 
GLuöt
);

6910 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
, 
GLöt
);

6912 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

6913 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

6914 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6915 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6916 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6917 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6918 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

6919 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

6922 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


6923 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

6924 #ifde‡
GL_GLEXT_PROTOTYPES


6925 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
);

6926 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6927 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
, 
GLuöt
 *);

6928 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
);

6930 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6931 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6932 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

6933 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6936 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


6937 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

6938 #ifde‡
GL_GLEXT_PROTOTYPES


6939 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6940 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6941 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
, 
GLöt
);

6943 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6944 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6945 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6948 #i‚de‡
GL_APPLE_ycb¸_422


6949 
	#GL_APPLE_ycb¸_422
 1

	)

6952 #i‚de‡
GL_S3_s3tc


6953 
	#GL_S3_s3tc
 1

	)

6956 #i‚de‡
GL_ATI_døw_buf„rs


6957 
	#GL_ATI_døw_buf„rs
 1

	)

6958 #ifde‡
GL_GLEXT_PROTOTYPES


6959 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
, c⁄° 
GLíum
 *);

6961 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6964 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6965 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6971 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6972 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6975 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6976 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6979 #i‚de‡
GL_NV_Êﬂt_buf„r


6980 
	#GL_NV_Êﬂt_buf„r
 1

	)

6983 #i‚de‡
GL_NV_‰agmít_¥ogøm


6984 
	#GL_NV_‰agmít_¥ogøm
 1

	)

6986 #ifde‡
GL_GLEXT_PROTOTYPES


6987 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6988 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6989 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

6990 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLdoubÀ
 *);

6991 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
 *);

6992 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
 *);

6994 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6995 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6996 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6997 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6998 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

6999 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

7002 #i‚de‡
GL_NV_hÆf_Êﬂt


7003 
	#GL_NV_hÆf_Êﬂt
 1

	)

7004 #ifde‡
GL_GLEXT_PROTOTYPES


7005 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
, GLhalfNV);

7006 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *);

7007 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

7008 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *);

7009 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

7010 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *);

7011 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

7012 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *);

7013 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

7014 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

7015 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

7016 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *);

7017 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
);

7018 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *);

7019 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
, GLhalfNV);

7020 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *);

7021 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

7022 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *);

7023 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

7024 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *);

7025 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
, 
GLhÆfNV
);

7026 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

7027 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV);

7028 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

7029 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

7030 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

7031 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

7032 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

7033 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
);

7034 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *);

7035 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

7036 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

7037 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
);

7038 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *);

7039 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
, 
GLhÆfNV
);

7040 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

7041 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV);

7042 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

7043 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

7044 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

7045 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

7046 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

7047 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

7048 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

7049 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

7050 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

7052 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

7053 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7054 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

7055 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7056 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

7057 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7058 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

7059 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7060 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

7061 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7062 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

7063 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7064 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

7065 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7066 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

7067 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7068 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

7069 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7070 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

7071 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7072 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

7073 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7074 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

7075 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7076 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

7077 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7078 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

7079 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7080 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

7081 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

7082 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

7083 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

7084 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

7085 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

7086 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

7087 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7088 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

7089 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7090 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

7091 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7092 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

7093 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7094 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7095 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7096 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7097 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

7100 #i‚de‡
GL_NV_pixñ_d©a_ønge


7101 
	#GL_NV_pixñ_d©a_ønge
 1

	)

7102 #ifde‡
GL_GLEXT_PROTOTYPES


7103 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
, 
GLsizei
, 
GLvoid
 *);

7104 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
);

7106 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

7107 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

7110 #i‚de‡
GL_NV_¥imôive_ª°¨t


7111 
	#GL_NV_¥imôive_ª°¨t
 1

	)

7112 #ifde‡
GL_GLEXT_PROTOTYPES


7113 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

7114 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
);

7116 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

7117 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

7120 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


7121 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

7124 #i‚de‡
GL_NV_vîãx_¥ogøm2


7125 
	#GL_NV_vîãx_¥ogøm2
 1

	)

7128 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


7129 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

7130 #ifde‡
GL_GLEXT_PROTOTYPES


7131 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
);

7132 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
);

7134 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7135 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7138 #i‚de‡
GL_ATI_£∑øã_°ícû


7139 
	#GL_ATI_£∑øã_°ícû
 1

	)

7140 #ifde‡
GL_GLEXT_PROTOTYPES


7141 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
, GLenum, GLenum, GLenum);

7142 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

7144 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

7145 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

7148 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


7149 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

7150 #ifde‡
GL_GLEXT_PROTOTYPES


7151 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, GLuint, GLuint);

7152 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7153 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7155 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

7156 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7157 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7160 #i‚de‡
GL_OES_ªad_f‹m©


7161 
	#GL_OES_ªad_f‹m©
 1

	)

7164 #i‚de‡
GL_EXT_dïth_bounds_ã°


7165 
	#GL_EXT_dïth_bounds_ã°
 1

	)

7166 #ifde‡
GL_GLEXT_PROTOTYPES


7167 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
, GLclampd);

7169 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

7172 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


7173 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

7176 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


7177 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

7178 #ifde‡
GL_GLEXT_PROTOTYPES


7179 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
, GLenum);

7181 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

7184 #i‚de‡
GL_MESA_∑ck_övît


7185 
	#GL_MESA_∑ck_övît
 1

	)

7188 #i‚de‡
GL_MESA_ycb¸_ãxtuª


7189 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

7192 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


7193 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

7196 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


7197 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

7200 #i‚de‡
GL_NV_‰agmít_¥ogøm2


7201 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

7204 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


7205 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

7208 #i‚de‡
GL_NV_vîãx_¥ogøm3


7209 
	#GL_NV_vîãx_¥ogøm3
 1

	)

7212 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


7213 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

7214 #ifde‡
GL_GLEXT_PROTOTYPES


7215 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
);

7216 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
, 
GLuöt
);

7217 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

7218 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

7219 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei);

7220 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

7221 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
);

7222 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
, 
GLuöt
);

7223 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

7224 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

7225 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLenum);

7226 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

7227 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

7228 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, GLint);

7229 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

7230 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

7231 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
);

7233 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7234 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7235 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7236 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7237 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7238 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7239 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7240 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7241 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7242 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7243 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7244 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7245 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7246 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7247 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7248 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7249 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7252 #i‚de‡
GL_GREMEDY_°rög_m¨kî


7253 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

7254 #ifde‡
GL_GLEXT_PROTOTYPES


7255 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
, c⁄° 
GLvoid
 *);

7257 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

7260 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


7261 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

7264 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7265 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7266 #ifde‡
GL_GLEXT_PROTOTYPES


7267 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
, 
GLuöt
);

7269 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7272 #i‚de‡
GL_EXT_ãxtuª_sRGB


7273 
	#GL_EXT_ãxtuª_sRGB
 1

	)

7276 #i‚de‡
GL_EXT_‰amebuf„r_blô


7277 
	#GL_EXT_‰amebuf„r_blô
 1

	)

7278 #ifde‡
GL_GLEXT_PROTOTYPES


7279 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLbôfõld
, 
GLíum
);

7281 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7284 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


7285 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

7286 #ifde‡
GL_GLEXT_PROTOTYPES


7287 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
, 
GLsizei
, GLenum, GLsizei, GLsizei);

7289 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7292 #i‚de‡
GL_MESAX_ãxtuª_°ack


7293 
	#GL_MESAX_ãxtuª_°ack
 1

	)

7296 #i‚de‡
GL_EXT_timî_quîy


7297 
	#GL_EXT_timî_quîy
 1

	)

7298 #ifde‡
GL_GLEXT_PROTOTYPES


7299 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
, 
GLíum
, 
GLöt64EXT
 *);

7300 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
, 
GLíum
, 
GLuöt64EXT
 *);

7302 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

7303 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

7306 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


7307 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

7308 #ifde‡
GL_GLEXT_PROTOTYPES


7309 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7310 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7312 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7313 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7316 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


7317 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

7318 #ifde‡
GL_GLEXT_PROTOTYPES


7319 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
, GLíum, 
GLöt
);

7320 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
, 
GLöçå
, 
GLsizeùå
);

7322 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7323 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

7326 #i‚de‡
GL_NV_gpu_¥ogøm4


7327 
	#GL_NV_gpu_¥ogøm4
 1

	)

7328 #ifde‡
GL_GLEXT_PROTOTYPES


7329 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
, 
GLuöt
, 
GLöt
, GLint, GLint, GLint);

7330 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLöt
 *);

7331 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLöt
 *);

7332 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

7333 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
, 
GLuöt
, const GLuint *);

7334 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, const GLuint *);

7335 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
, 
GLuöt
, 
GLöt
, GLint, GLint, GLint);

7336 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLöt
 *);

7337 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLöt
 *);

7338 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

7339 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
, 
GLuöt
, const GLuint *);

7340 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, const GLuint *);

7341 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

7342 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
, 
GLuöt
, GLuint *);

7343 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

7344 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
, 
GLuöt
, GLuint *);

7346 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7347 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

7348 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

7349 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

7350 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

7351 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

7352 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7353 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

7354 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

7355 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

7356 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

7357 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

7358 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

7359 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

7360 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

7361 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

7364 #i‚de‡
GL_NV_geomëry_¥ogøm4


7365 
	#GL_NV_geomëry_¥ogøm4
 1

	)

7366 #ifde‡
GL_GLEXT_PROTOTYPES


7367 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
, 
GLöt
);

7368 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
);

7369 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLint);

7370 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLenum);

7372 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

7373 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7374 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7375 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

7378 #i‚de‡
GL_EXT_geomëry_shadî4


7379 
	#GL_EXT_geomëry_shadî4
 1

	)

7380 #ifde‡
GL_GLEXT_PROTOTYPES


7381 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
, 
GLíum
, 
GLöt
);

7383 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7386 #i‚de‡
GL_NV_vîãx_¥ogøm4


7387 
	#GL_NV_vîãx_¥ogøm4
 1

	)

7388 #ifde‡
GL_GLEXT_PROTOTYPES


7389 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
, 
GLöt
);

7390 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
, 
GLöt
, GLint);

7391 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint);

7392 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint, GLint);

7393 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
, GLuint);

7394 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
, GLuint, GLuint);

7395 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
, GLuint, GLuint, GLuint);

7396 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
, GLuint, GLuint, GLuint, GLuint);

7397 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

7398 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

7399 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

7400 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

7401 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
, const GLuint *);

7402 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
, const GLuint *);

7403 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
, const GLuint *);

7404 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
, const GLuint *);

7405 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

7406 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

7407 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

7408 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

7409 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

7410 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7411 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
, 
GLíum
, GLuint *);

7413 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

7414 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

7415 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7416 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7417 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

7418 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

7419 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

7420 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

7421 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7422 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7423 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7424 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7425 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7426 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7427 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7428 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7429 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7430 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7431 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7432 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7433 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7434 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7435 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7438 #i‚de‡
GL_EXT_gpu_shadî4


7439 
	#GL_EXT_gpu_shadî4
 1

	)

7440 #ifde‡
GL_GLEXT_PROTOTYPES


7441 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
, 
GLöt
, GLuint *);

7442 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

7443 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
, c⁄° 
GLch¨
 *);

7444 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
, 
GLuöt
);

7445 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
, 
GLuöt
, GLuint);

7446 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
, 
GLuöt
, GLuint, GLuint);

7447 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
, 
GLuöt
, GLuint, GLuint, GLuint);

7448 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

7449 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

7450 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

7451 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

7453 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

7454 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

7455 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7456 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

7457 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

7458 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

7459 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

7460 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7461 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7462 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7463 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7466 #i‚de‡
GL_EXT_døw_ö°™˚d


7467 
	#GL_EXT_døw_ö°™˚d
 1

	)

7468 #ifde‡
GL_GLEXT_PROTOTYPES


7469 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

7470 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, GLsizei);

7472 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7473 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7476 #i‚de‡
GL_EXT_∑cked_Êﬂt


7477 
	#GL_EXT_∑cked_Êﬂt
 1

	)

7480 #i‚de‡
GL_EXT_ãxtuª_¨øy


7481 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7484 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


7485 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

7486 #ifde‡
GL_GLEXT_PROTOTYPES


7487 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
, GLíum, 
GLuöt
);

7489 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7492 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


7493 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

7496 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


7497 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

7500 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


7501 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

7504 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


7505 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

7506 #ifde‡
GL_GLEXT_PROTOTYPES


7507 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
, GLdouble);

7508 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
);

7509 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
, GLdouble);

7511 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

7512 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

7513 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

7516 #i‚de‡
GL_NV_‰agmít_¥ogøm4


7517 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

7520 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


7521 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

7522 #ifde‡
GL_GLEXT_PROTOTYPES


7523 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
, 
GLsizei
, GLsizei, GLenum, GLsizei, GLsizei);

7525 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7528 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


7529 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

7532 #i‚de‡
GL_NV_geomëry_shadî4


7533 
	#GL_NV_geomëry_shadî4
 1

	)

7536 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


7537 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

7538 #ifde‡
GL_GLEXT_PROTOTYPES


7539 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7540 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLöt
 *);

7541 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, const GLuint *);

7543 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7544 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

7545 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

7548 #i‚de‡
GL_EXT_døw_buf„rs2


7549 
	#GL_EXT_døw_buf„rs2
 1

	)

7550 #ifde‡
GL_GLEXT_PROTOTYPES


7551 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
, 
GLboﬁón
, GLboolean, GLboolean, GLboolean);

7552 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLboﬁón
 *);

7553 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

7554 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
, 
GLuöt
);

7555 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
, 
GLuöt
);

7556 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
, 
GLuöt
);

7558 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

7559 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

7560 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

7561 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

7562 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

7563 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

7566 #i‚de‡
GL_NV_å™sf‹m_„edback


7567 
	#GL_NV_å™sf‹m_„edback
 1

	)

7568 #ifde‡
GL_GLEXT_PROTOTYPES


7569 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
);

7570 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

7571 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
, c⁄° 
GLöt
 *, 
GLíum
);

7572 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
, 
GLsizeùå
);

7573 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
);

7574 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
, 
GLuöt
, GLuint);

7575 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLöt
 *, 
GLíum
);

7576 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
, c⁄° 
GLch¨
 *);

7577 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
, c⁄° 
GLch¨
 *);

7578 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, GLsizeò*, 
GLíum
 *, 
GLch¨
 *);

7579 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
, GLuöt, 
GLöt
 *);

7581 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

7582 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

7583 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

7584 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

7585 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

7586 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

7587 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

7588 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7589 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7590 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

7591 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

7594 #i‚de‡
GL_EXT_bödabÀ_unif‹m


7595 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

7596 #ifde‡
GL_GLEXT_PROTOTYPES


7597 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
, 
GLöt
, GLuint);

7598 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
, GLint);

7599 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
, 
GLöt
);

7601 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

7602 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

7603 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

7606 #i‚de‡
GL_EXT_ãxtuª_öãgî


7607 
	#GL_EXT_ãxtuª_öãgî
 1

	)

7608 #ifde‡
GL_GLEXT_PROTOTYPES


7609 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

7610 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
, GLíum, c⁄° 
GLuöt
 *);

7611 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

7612 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
, GLíum, 
GLuöt
 *);

7613 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
, GLint, GLint, GLint);

7614 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
, GLuint, GLuint, GLuint);

7616 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7617 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

7618 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7619 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

7620 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

7621 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

7624 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


7625 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

7626 #ifde‡
GL_GLEXT_PROTOTYPES


7627 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

7629 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

7632 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


7633 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

7636 #i‚de‡
GL_NV_¥e£¡_video


7637 
	#GL_NV_¥e£¡_video
 1

	)

7640 #i‚de‡
GL_EXT_å™sf‹m_„edback


7641 
	#GL_EXT_å™sf‹m_„edback
 1

	)

7645 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/öt-Œ64.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	tumode_t
;

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

513 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

515 
	m_CS_GNU_LIBC_VERSION
,

516 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

517 
	m_CS_GNU_LIBPTHREAD_VERSION
,

518 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

520 
	m_CS_LFS_CFLAGS
 = 1000,

521 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

522 
	m_CS_LFS_LDFLAGS
,

523 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

524 
	m_CS_LFS_LIBS
,

525 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

526 
	m_CS_LFS_LINTFLAGS
,

527 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

528 
	m_CS_LFS64_CFLAGS
,

529 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

530 
	m_CS_LFS64_LDFLAGS
,

531 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

532 
	m_CS_LFS64_LIBS
,

533 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

534 
	m_CS_LFS64_LINTFLAGS
,

535 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

537 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

538 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

539 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

540 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

541 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

542 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

543 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

544 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

545 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

546 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

547 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

548 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

549 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

550 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

551 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

552 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

553 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

554 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

555 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

556 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

557 
	m_CS_XBS5_LP64_OFF64_LIBS
,

558 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

559 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

560 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

561 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

562 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

563 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

564 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

565 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

566 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

567 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

568 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

570 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

571 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

572 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

573 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

574 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

575 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

576 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

577 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

578 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

579 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

580 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

581 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

582 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

583 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

584 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

585 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

586 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

587 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

588 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

589 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

590 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

591 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

592 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

593 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

594 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

595 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

596 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

597 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

598 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

599 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

600 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


601 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

53 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

54 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LP64_OFF64
 1

	)

58 
	#_XBS5_LP64_OFF64
 1

	)

64 
	#_POSIX_V6_ILP32_OFF32
 1

	)

65 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

66 
	#_XBS5_ILP32_OFF32
 1

	)

67 
	#_XBS5_ILP32_OFFBIG
 1

	)

82 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

83 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

84 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

85 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

86 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

87 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

111 #ifde‡
__USE_GNU


112 
	#F_SETLEASE
 1024

	)

113 
	#F_GETLEASE
 1025

	)

114 
	#F_NOTIFY
 1026

	)

115 
	#F_DUPFD_CLOEXEC
 1030

	)

120 
	#FD_CLOEXEC
 1

	)

123 
	#F_RDLCK
 0

	)

124 
	#F_WRLCK
 1

	)

125 
	#F_UNLCK
 2

	)

128 
	#F_EXLCK
 4

	)

129 
	#F_SHLCK
 8

	)

131 #ifde‡
__USE_BSD


133 
	#LOCK_SH
 1

	)

134 
	#LOCK_EX
 2

	)

135 
	#LOCK_NB
 4

	)

137 
	#LOCK_UN
 8

	)

140 #ifde‡
__USE_GNU


141 
	#LOCK_MAND
 32

	)

142 
	#LOCK_READ
 64

	)

143 
	#LOCK_WRITE
 128

	)

144 
	#LOCK_RW
 192

	)

147 #ifde‡
__USE_GNU


149 
	#DN_ACCESS
 0x00000001

	)

150 
	#DN_MODIFY
 0x00000002

	)

151 
	#DN_CREATE
 0x00000004

	)

152 
	#DN_DELETE
 0x00000008

	)

153 
	#DN_RENAME
 0x00000010

	)

154 
	#DN_ATTRIB
 0x00000020

	)

155 
	#DN_MULTISHOT
 0x80000000

	)

158 
	sÊock


160 
	ml_ty≥
;

161 
	ml_whí˚
;

162 #i‚de‡
__USE_FILE_OFFSET64


163 
__off_t
 
	ml_°¨t
;

164 
__off_t
 
	ml_Àn
;

166 
__off64_t
 
	ml_°¨t
;

167 
__off64_t
 
	ml_Àn
;

169 
__pid_t
 
	ml_pid
;

172 #ifde‡
__USE_LARGEFILE64


173 
	sÊock64


175 
	ml_ty≥
;

176 
	ml_whí˚
;

177 
__off64_t
 
	ml_°¨t
;

178 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

185 #ifdef 
__USE_BSD


186 
	#FAPPEND
 
O_APPEND


	)

187 
	#FFSYNC
 
O_FSYNC


	)

188 
	#FASYNC
 
O_ASYNC


	)

189 
	#FNONBLOCK
 
O_NONBLOCK


	)

190 
	#FNDELAY
 
O_NDELAY


	)

194 #ifde‡
__USE_XOPEN2K


195 
	#POSIX_FADV_NORMAL
 0

	)

196 
	#POSIX_FADV_RANDOM
 1

	)

197 
	#POSIX_FADV_SEQUENTIAL
 2

	)

198 
	#POSIX_FADV_WILLNEED
 3

	)

199 
	#POSIX_FADV_DONTNEED
 4

	)

200 
	#POSIX_FADV_NOREUSE
 5

	)

204 #ifde‡
__USE_GNU


206 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

212 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

217 
	#SPLICE_F_MOVE
 1

	)

218 
	#SPLICE_F_NONBLOCK
 2

	)

221 
	#SPLICE_F_MORE
 4

	)

222 
	#SPLICE_F_GIFT
 8

	)

225 
	g__BEGIN_DECLS


227 #ifde‡
__USE_GNU


230 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

231 
__THROW
;

235 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

236 
__Êags
);

240 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

241 
size_t
 
__cou¡
, 
__Êags
);

244 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

245 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

246 
__Êags
);

249 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

250 
__Êags
);

254 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 #i‚de‡
__exã∫_ölöe


26 
	#__MATH_INLINE
 
__ölöe


	)

28 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

32 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

35 
__MATH_INLINE
 

36 
__NTH
 (
	$__signbôf
 (
__x
))

38 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

39  
__u
.
__i
 < 0;

40 
	}
}

41 
__MATH_INLINE
 

42 
__NTH
 (
	$__signbô
 (
__x
))

44 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

45  
__u
.
__i
[1] < 0;

46 
	}
}

47 
__MATH_INLINE
 

48 
__NTH
 (
	$__signbôl
 (
__x
))

50 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

51  (
__u
.
__i
[2] & 0x8000) != 0;

52 
	}
}

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

70 
	#MS_ASYNC
 1

	)

71 
	#MS_SYNC
 4

	)

72 
	#MS_INVALIDATE
 2

	)

75 
	#MCL_CURRENT
 1

	)

76 
	#MCL_FUTURE
 2

	)

80 #ifde‡
__USE_GNU


81 
	#MREMAP_MAYMOVE
 1

	)

82 
	#MREMAP_FIXED
 2

	)

86 #ifde‡
__USE_BSD


87 
	#MADV_NORMAL
 0

	)

88 
	#MADV_RANDOM
 1

	)

89 
	#MADV_SEQUENTIAL
 2

	)

90 
	#MADV_WILLNEED
 3

	)

91 
	#MADV_DONTNEED
 4

	)

92 
	#MADV_REMOVE
 9

	)

93 
	#MADV_DONTFORK
 10

	)

94 
	#MADV_DOFORK
 11

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

95 
	#_POSIX_PATH_MAX
 256

	)

98 
	#_POSIX_PIPE_BUF
 512

	)

102 
	#_POSIX_RE_DUP_MAX
 255

	)

105 
	#_POSIX_RTSIG_MAX
 8

	)

108 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

111 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

114 
	#_POSIX_SIGQUEUE_MAX
 32

	)

117 
	#_POSIX_SSIZE_MAX
 32767

	)

120 
	#_POSIX_STREAM_MAX
 8

	)

123 
	#_POSIX_SYMLINK_MAX
 255

	)

127 
	#_POSIX_SYMLOOP_MAX
 8

	)

130 
	#_POSIX_TIMER_MAX
 32

	)

133 
	#_POSIX_TTY_NAME_MAX
 9

	)

136 
	#_POSIX_TZNAME_MAX
 6

	)

139 
	#_POSIX_QLIMIT
 1

	)

143 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

146 
	#_POSIX_UIO_MAXIOV
 16

	)

149 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

153 
	~<bôs/loˇl_lim.h
>

156 #i‚def 
SSIZE_MAX


157 
	#SSIZE_MAX
 
LONG_MAX


	)

164 #i‚def 
NGROUPS_MAX


165 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

93 
	#_POSIX_SEMAPHORES
 200112L

	)

96 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

99 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

100 
	#_POSIX_ASYNC_IO
 1

	)

102 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

104 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

107 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

110 
	#_LFS_LARGEFILE
 1

	)

111 
	#_LFS64_LARGEFILE
 1

	)

112 
	#_LFS64_STDIO
 1

	)

115 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

118 
	#_POSIX_CPUTIME
 0

	)

121 
	#_POSIX_THREAD_CPUTIME
 0

	)

124 
	#_POSIX_REGEXP
 1

	)

127 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

130 
	#_POSIX_SHELL
 1

	)

133 
	#_POSIX_TIMEOUTS
 200112L

	)

136 
	#_POSIX_SPIN_LOCKS
 200112L

	)

139 
	#_POSIX_SPAWN
 200112L

	)

142 
	#_POSIX_TIMERS
 200112L

	)

145 
	#_POSIX_BARRIERS
 200112L

	)

148 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

151 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

154 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

157 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

160 
	#_POSIX_ADVISORY_INFO
 200112L

	)

163 
	#_POSIX_IPV6
 200112L

	)

166 
	#_POSIX_RAW_SOCKETS
 200112L

	)

169 
	#_POSIX2_CHAR_TERM
 200112L

	)

172 
	#_POSIX_SPORADIC_SERVER
 -1

	)

173 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

176 
	#_POSIX_TRACE
 -1

	)

177 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

178 
	#_POSIX_TRACE_INHERIT
 -1

	)

179 
	#_POSIX_TRACE_LOG
 -1

	)

182 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #i‡
deföed
 
__USE_ATFILE
 || deföed 
__USE_GNU


207 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

208 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/stropts.h

19 #i‚de‡
_STROPTS_H


23 #i‚de‡
_BITS_STROPTS_H


24 
	#_BITS_STROPTS_H
 1

	)

26 
	~<bôs/ty≥s.h
>

29 
	#__SID
 ('S' << 8)

	)

31 
	#I_NREAD
 (
__SID
 | 1Ë

	)

33 
	#I_PUSH
 (
__SID
 | 2Ë

	)

35 
	#I_POP
 (
__SID
 | 3Ë

	)

37 
	#I_LOOK
 (
__SID
 | 4Ë

	)

40 
	#I_FLUSH
 (
__SID
 | 5Ë

	)

41 
	#I_SRDOPT
 (
__SID
 | 6Ë

	)

42 
	#I_GRDOPT
 (
__SID
 | 7Ë

	)

43 
	#I_STR
 (
__SID
 | 8Ë

	)

45 
	#I_SETSIG
 (
__SID
 | 9Ë

	)

47 
	#I_GETSIG
 (
__SID
 |10Ë

	)

50 
	#I_FIND
 (
__SID
 |11Ë

	)

53 
	#I_LINK
 (
__SID
 |12Ë

	)

54 
	#I_UNLINK
 (
__SID
 |13Ë

	)

55 
	#I_PEEK
 (
__SID
 |15Ë

	)

59 
	#I_FDINSERT
 (
__SID
 |16Ë

	)

62 
	#I_SENDFD
 (
__SID
 |17Ë

	)

66 
	#I_RECVFD
 (
__SID
 |14Ë

	)

67 
	#I_SWROPT
 (
__SID
 |19Ë

	)

68 
	#I_GWROPT
 (
__SID
 |20Ë

	)

69 
	#I_LIST
 (
__SID
 |21Ë

	)

71 
	#I_PLINK
 (
__SID
 |22Ë

	)

73 
	#I_PUNLINK
 (
__SID
 |23Ë

	)

75 
	#I_FLUSHBAND
 (
__SID
 |28Ë

	)

76 
	#I_CKBAND
 (
__SID
 |29Ë

	)

79 
	#I_GETBAND
 (
__SID
 |30Ë

	)

81 
	#I_ATMARK
 (
__SID
 |31Ë

	)

84 
	#I_SETCLTIME
 (
__SID
 |32Ë

	)

87 
	#I_GETCLTIME
 (
__SID
 |33Ë

	)

88 
	#I_CANPUT
 (
__SID
 |34Ë

	)

92 
	#FMNAMESZ
 8

	)

95 
	#FLUSHR
 0x01

	)

96 
	#FLUSHW
 0x02

	)

97 
	#FLUSHRW
 0x03

	)

98 #ifde‡
__USE_GNU


99 
	#FLUSHBAND
 0x04

	)

103 
	#S_INPUT
 0x0001

	)

105 
	#S_HIPRI
 0x0002

	)

106 
	#S_OUTPUT
 0x0004

	)

108 
	#S_MSG
 0x0008

	)

111 
	#S_ERROR
 0x0010

	)

112 
	#S_HANGUP
 0x0020

	)

113 
	#S_RDNORM
 0x0040

	)

114 
	#S_WRNORM
 
S_OUTPUT


	)

115 
	#S_RDBAND
 0x0080

	)

117 
	#S_WRBAND
 0x0100

	)

119 
	#S_BANDURG
 0x0200

	)

125 
	#RS_HIPRI
 0x01

	)

128 
	#RNORM
 0x0000

	)

129 
	#RMSGD
 0x0001

	)

130 
	#RMSGN
 0x0002

	)

131 
	#RPROTDAT
 0x0004

	)

133 
	#RPROTDIS
 0x0008

	)

135 
	#RPROTNORM
 0x0010

	)

138 #ifde‡
__USE_GNU


139 
	#RPROTMASK
 0x001C

	)

143 
	#SNDZERO
 0x001

	)

145 #ifde‡
__USE_GNU


146 
	#SNDPIPE
 0x002

	)

151 
	#ANYMARK
 0x01

	)

152 
	#LASTMARK
 0x02

	)

156 #ifde‡
__USE_GNU


157 
	#MUXID_ALL
 (-1Ë

	)

163 
	#MSG_HIPRI
 0x01

	)

164 
	#MSG_ANY
 0x02

	)

165 
	#MSG_BAND
 0x04

	)

168 
	#MORECTL
 1

	)

170 
	#MOREDATA
 2

	)

174 
	sb™döfo


176 
	mbi_¥i
;

177 
	mbi_Êag
;

180 
	s°rbuf


182 
	mmaxÀn
;

183 
	mÀn
;

184 *
	mbuf
;

187 
	s°Ωìk


189 
°rbuf
 
	m˘lbuf
;

190 
°rbuf
 
	md©abuf
;

191 
t_usˇœr_t
 
	mÊags
;

194 
	s°rfdö£π


196 
°rbuf
 
	m˘lbuf
;

197 
°rbuf
 
	md©abuf
;

198 
t_usˇœr_t
 
	mÊags
;

199 
	mfûdes
;

200 
	moff£t
;

203 
	s°rio˘l


205 
	mic_cmd
;

206 
	mic_timout
;

207 
	mic_Àn
;

208 *
	mic_dp
;

211 
	s°ºecvfd


213 
	mfd
;

214 
uid_t
 
	muid
;

215 
gid_t
 
	mgid
;

216 
	m__fûl
[8];

220 
	s°r_mli°


222 
	ml_«me
[
FMNAMESZ
 + 1];

225 
	s°r_li°


227 
	m¶_nmods
;

228 
°r_mli°
 *
	m¶_modli°
;

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/bits/xtitypes.h

20 #i‚de‡
_STROPTS_H


24 #i‚de‡
_BITS_XTITYPES_H


25 
	#_BITS_XTITYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 
__SLONG32_TYPE
 
	t__t_sˇœr_t
;

31 
__ULONG32_TYPE
 
	t__t_usˇœr_t
;

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_ISOC95


95 #unde‡
__USE_POSIX


96 #unde‡
__USE_POSIX2


97 #unde‡
__USE_POSIX199309


98 #unde‡
__USE_POSIX199506


99 #unde‡
__USE_XOPEN


100 #unde‡
__USE_XOPEN_EXTENDED


101 #unde‡
__USE_UNIX98


102 #unde‡
__USE_XOPEN2K


103 #unde‡
__USE_LARGEFILE


104 #unde‡
__USE_LARGEFILE64


105 #unde‡
__USE_FILE_OFFSET64


106 #unde‡
__USE_BSD


107 #unde‡
__USE_SVID


108 #unde‡
__USE_MISC


109 #unde‡
__USE_ATFILE


110 #unde‡
__USE_GNU


111 #unde‡
__USE_REENTRANT


112 #unde‡
__USE_FORTIFY_LEVEL


113 #unde‡
__FAVOR_BSD


114 #unde‡
__KERNEL_STRICT_NAMES


118 #i‚de‡
_LOOSE_KERNEL_NAMES


119 
	#__KERNEL_STRICT_NAMES


	)

123 
	#__USE_ANSI
 1

	)

132 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


133 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

134 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

136 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

141 #i‡
deföed
 
_BSD_SOURCE
 && \

142 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

143 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

144 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

145 
	#__FAVOR_BSD
 1

	)

149 #ifde‡
_GNU_SOURCE


150 #unde‡
_ISOC99_SOURCE


151 
	#_ISOC99_SOURCE
 1

	)

152 #unde‡
_POSIX_SOURCE


153 
	#_POSIX_SOURCE
 1

	)

154 #unde‡
_POSIX_C_SOURCE


155 
	#_POSIX_C_SOURCE
 200112L

	)

156 #unde‡
_XOPEN_SOURCE


157 
	#_XOPEN_SOURCE
 600

	)

158 #unde‡
_XOPEN_SOURCE_EXTENDED


159 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

160 #unde‡
_LARGEFILE64_SOURCE


161 
	#_LARGEFILE64_SOURCE
 1

	)

162 #unde‡
_BSD_SOURCE


163 
	#_BSD_SOURCE
 1

	)

164 #unde‡
_SVID_SOURCE


165 
	#_SVID_SOURCE
 1

	)

166 #unde‡
_ATFILE_SOURCE


167 
	#_ATFILE_SOURCE
 1

	)

172 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

173 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

174 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

175 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

176 
	#_BSD_SOURCE
 1

	)

177 
	#_SVID_SOURCE
 1

	)

184 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

185 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

186 
	#__USE_ISOC99
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

192 
	#__USE_ISOC95
 1

	)

197 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

198 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

199 
	#_POSIX_SOURCE
 1

	)

200 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

201 
	#_POSIX_C_SOURCE
 2

	)

202 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

203 
	#_POSIX_C_SOURCE
 199506L

	)

205 
	#_POSIX_C_SOURCE
 200112L

	)

209 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


210 
	#__USE_POSIX
 1

	)

213 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


214 
	#__USE_POSIX2
 1

	)

217 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

218 
	#__USE_POSIX199309
 1

	)

221 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

222 
	#__USE_POSIX199506
 1

	)

225 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

226 
	#__USE_XOPEN2K
 1

	)

229 #ifdef 
_XOPEN_SOURCE


230 
	#__USE_XOPEN
 1

	)

231 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

232 
	#__USE_XOPEN_EXTENDED
 1

	)

233 
	#__USE_UNIX98
 1

	)

234 #unde‡
_LARGEFILE_SOURCE


235 
	#_LARGEFILE_SOURCE
 1

	)

236 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #ifde‡
_XOPEN_SOURCE_EXTENDED


243 
	#__USE_XOPEN_EXTENDED
 1

	)

248 #ifde‡
_LARGEFILE_SOURCE


249 
	#__USE_LARGEFILE
 1

	)

252 #ifde‡
_LARGEFILE64_SOURCE


253 
	#__USE_LARGEFILE64
 1

	)

256 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

257 
	#__USE_FILE_OFFSET64
 1

	)

260 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


261 
	#__USE_MISC
 1

	)

264 #ifdef 
_BSD_SOURCE


265 
	#__USE_BSD
 1

	)

268 #ifdef 
_SVID_SOURCE


269 
	#__USE_SVID
 1

	)

272 #ifdef 
_ATFILE_SOURCE


273 
	#__USE_ATFILE
 1

	)

276 #ifdef 
_GNU_SOURCE


277 
	#__USE_GNU
 1

	)

280 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


281 
	#__USE_REENTRANT
 1

	)

284 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

285 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

286 #i‡
_FORTIFY_SOURCE
 > 1

287 
	#__USE_FORTIFY_LEVEL
 2

	)

289 
	#__USE_FORTIFY_LEVEL
 1

	)

292 
	#__USE_FORTIFY_LEVEL
 0

	)

296 
	#__STDC_IEC_559__
 1

	)

297 
	#__STDC_IEC_559_COMPLEX__
 1

	)

300 
	#__STDC_ISO_10646__
 200009L

	)

308 #unde‡
__GNU_LIBRARY__


309 
	#__GNU_LIBRARY__
 6

	)

313 
	#__GLIBC__
 2

	)

314 
	#__GLIBC_MINOR__
 8

	)

316 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

317 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

320 #i‡
deföed
 
__GNUC__
 \

321 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

322 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

323 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

324 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

328 #i‚de‡
__ASSEMBLER__


329 #i‚de‡
_SYS_CDEFS_H


330 
	~<sys/cdefs.h
>

335 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


336 
	#__USE_LARGEFILE
 1

	)

337 
	#__USE_LARGEFILE64
 1

	)

343 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

344 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

345 && 
deföed
 
	g__exã∫_ölöe


346 
	#__USE_EXTERN_INLINES
 1

	)

354 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

447 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

449 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

450 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

451 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

452 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

455 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

456 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

458 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

460 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

461 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

467 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

469 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

470 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 #ifde‡
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

475 
	#_IO_Êockfûe
(
_Â
) \

476 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

477 
	#_IO_fu∆ockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

480 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

481 
	#_IO_Êockfûe
(
_Â
Ë

	)

482 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

483 
	#_IO_·rylockfûe
(
_Â
Ë

	)

484 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

485 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

488 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

489 
_IO_va_li°
, *
__ª°ri˘
);

490 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

500 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

502 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

503 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

504 #i‡
__GNUC__
 >= 2

507 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


508 
	~<shlib-com∑t.h
>

509 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

511 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

512 c⁄° 
_IO_°dö_u£d
;

513 
wók_exã∫
 (
_IO_°dö_u£d
);

516 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


517 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

521 
	#_IO_fwide
(
__Â
, 
__mode
) \

522 ({ 
__ªsu…
 = (
__mode
); \

523 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

525 i‡((
__Â
)->
_mode
 == 0) \

527 (
__Â
)->
_mode
 = -1; \

528 
__ªsu…
 = (
__Â
)->
_mode
; \

530 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

533 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

534 
__ªsu…
; })

	)

537 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

538 
_IO_va_li°
, *
__ª°ri˘
);

539 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

542 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

545 #ifde‡
__LDBL_COMPAT


546 
	~<bôs/libio-ldbl.h
>

549 #ifde‡
__˝lu•lus


	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

100 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 0x10000000

	)

101 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
 0x20000000

	)

103 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

105 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

110 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

111 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

112 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

113 
	#I2C_FUNC_SMBUS_I2C_BLOCK_2
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 | \

114 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
)

	)

116 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

117 
I2C_FUNC_SMBUS_BYTE
 | \

118 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

119 
I2C_FUNC_SMBUS_WORD_DATA
 | \

120 
I2C_FUNC_SMBUS_PROC_CALL
 | \

121 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

122 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

123 
I2C_FUNC_SMBUS_PEC
)

	)

128 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

129 
	ui2c_smbus_d©a
 {

130 
__u8
 
	mbyã
;

131 
__u16
 
	mw‹d
;

132 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

137 
	#I2C_SMBUS_READ
 1

	)

138 
	#I2C_SMBUS_WRITE
 0

	)

142 
	#I2C_SMBUS_QUICK
 0

	)

143 
	#I2C_SMBUS_BYTE
 1

	)

144 
	#I2C_SMBUS_BYTE_DATA
 2

	)

145 
	#I2C_SMBUS_WORD_DATA
 3

	)

146 
	#I2C_SMBUS_PROC_CALL
 4

	)

147 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

148 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

149 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

150 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/input.h

1 #i‚de‡
_INPUT_H


2 
	#_INPUT_H


	)

12 
	~<sys/time.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<asm/ty≥s.h
>

21 
	söput_evít
 {

22 
timevÆ
 
	mtime
;

23 
__u16
 
	mty≥
;

24 
__u16
 
	mcode
;

25 
__s32
 
	mvÆue
;

32 
	#EV_VERSION
 0x010000

	)

38 
	söput_id
 {

39 
__u16
 
	mbu°y≥
;

40 
__u16
 
	mvíd‹
;

41 
__u16
 
	m¥odu˘
;

42 
__u16
 
	mvîsi⁄
;

45 
	söput_absöfo
 {

46 
__s32
 
	mvÆue
;

47 
__s32
 
	mmöimum
;

48 
__s32
 
	mmaximum
;

49 
__s32
 
	mfuzz
;

50 
__s32
 
	mÊ©
;

53 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

54 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

55 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

56 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

57 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

58 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

60 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

61 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

62 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

64 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

65 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

66 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

67 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

69 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 +Év,ÜíË

	)

70 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 +ábs, 
öput_absöfo
Ë

	)

71 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 +ábs, 
öput_absöfo
Ë

	)

73 
	#EVIOCSFF
 
	`_IOC
(
_IOC_WRITE
, 'E', 0x80, (
ff_ef„˘
)Ë

	)

74 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

75 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

77 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

83 
	#EV_SYN
 0x00

	)

84 
	#EV_KEY
 0x01

	)

85 
	#EV_REL
 0x02

	)

86 
	#EV_ABS
 0x03

	)

87 
	#EV_MSC
 0x04

	)

88 
	#EV_SW
 0x05

	)

89 
	#EV_LED
 0x11

	)

90 
	#EV_SND
 0x12

	)

91 
	#EV_REP
 0x14

	)

92 
	#EV_FF
 0x15

	)

93 
	#EV_PWR
 0x16

	)

94 
	#EV_FF_STATUS
 0x17

	)

95 
	#EV_MAX
 0x1f

	)

96 
	#EV_CNT
 (
EV_MAX
+1)

	)

102 
	#SYN_REPORT
 0

	)

103 
	#SYN_CONFIG
 1

	)

116 
	#KEY_RESERVED
 0

	)

117 
	#KEY_ESC
 1

	)

118 
	#KEY_1
 2

	)

119 
	#KEY_2
 3

	)

120 
	#KEY_3
 4

	)

121 
	#KEY_4
 5

	)

122 
	#KEY_5
 6

	)

123 
	#KEY_6
 7

	)

124 
	#KEY_7
 8

	)

125 
	#KEY_8
 9

	)

126 
	#KEY_9
 10

	)

127 
	#KEY_0
 11

	)

128 
	#KEY_MINUS
 12

	)

129 
	#KEY_EQUAL
 13

	)

130 
	#KEY_BACKSPACE
 14

	)

131 
	#KEY_TAB
 15

	)

132 
	#KEY_Q
 16

	)

133 
	#KEY_W
 17

	)

134 
	#KEY_E
 18

	)

135 
	#KEY_R
 19

	)

136 
	#KEY_T
 20

	)

137 
	#KEY_Y
 21

	)

138 
	#KEY_U
 22

	)

139 
	#KEY_I
 23

	)

140 
	#KEY_O
 24

	)

141 
	#KEY_P
 25

	)

142 
	#KEY_LEFTBRACE
 26

	)

143 
	#KEY_RIGHTBRACE
 27

	)

144 
	#KEY_ENTER
 28

	)

145 
	#KEY_LEFTCTRL
 29

	)

146 
	#KEY_A
 30

	)

147 
	#KEY_S
 31

	)

148 
	#KEY_D
 32

	)

149 
	#KEY_F
 33

	)

150 
	#KEY_G
 34

	)

151 
	#KEY_H
 35

	)

152 
	#KEY_J
 36

	)

153 
	#KEY_K
 37

	)

154 
	#KEY_L
 38

	)

155 
	#KEY_SEMICOLON
 39

	)

156 
	#KEY_APOSTROPHE
 40

	)

157 
	#KEY_GRAVE
 41

	)

158 
	#KEY_LEFTSHIFT
 42

	)

159 
	#KEY_BACKSLASH
 43

	)

160 
	#KEY_Z
 44

	)

161 
	#KEY_X
 45

	)

162 
	#KEY_C
 46

	)

163 
	#KEY_V
 47

	)

164 
	#KEY_B
 48

	)

165 
	#KEY_N
 49

	)

166 
	#KEY_M
 50

	)

167 
	#KEY_COMMA
 51

	)

168 
	#KEY_DOT
 52

	)

169 
	#KEY_SLASH
 53

	)

170 
	#KEY_RIGHTSHIFT
 54

	)

171 
	#KEY_KPASTERISK
 55

	)

172 
	#KEY_LEFTALT
 56

	)

173 
	#KEY_SPACE
 57

	)

174 
	#KEY_CAPSLOCK
 58

	)

175 
	#KEY_F1
 59

	)

176 
	#KEY_F2
 60

	)

177 
	#KEY_F3
 61

	)

178 
	#KEY_F4
 62

	)

179 
	#KEY_F5
 63

	)

180 
	#KEY_F6
 64

	)

181 
	#KEY_F7
 65

	)

182 
	#KEY_F8
 66

	)

183 
	#KEY_F9
 67

	)

184 
	#KEY_F10
 68

	)

185 
	#KEY_NUMLOCK
 69

	)

186 
	#KEY_SCROLLLOCK
 70

	)

187 
	#KEY_KP7
 71

	)

188 
	#KEY_KP8
 72

	)

189 
	#KEY_KP9
 73

	)

190 
	#KEY_KPMINUS
 74

	)

191 
	#KEY_KP4
 75

	)

192 
	#KEY_KP5
 76

	)

193 
	#KEY_KP6
 77

	)

194 
	#KEY_KPPLUS
 78

	)

195 
	#KEY_KP1
 79

	)

196 
	#KEY_KP2
 80

	)

197 
	#KEY_KP3
 81

	)

198 
	#KEY_KP0
 82

	)

199 
	#KEY_KPDOT
 83

	)

201 
	#KEY_ZENKAKUHANKAKU
 85

	)

202 
	#KEY_102ND
 86

	)

203 
	#KEY_F11
 87

	)

204 
	#KEY_F12
 88

	)

205 
	#KEY_RO
 89

	)

206 
	#KEY_KATAKANA
 90

	)

207 
	#KEY_HIRAGANA
 91

	)

208 
	#KEY_HENKAN
 92

	)

209 
	#KEY_KATAKANAHIRAGANA
 93

	)

210 
	#KEY_MUHENKAN
 94

	)

211 
	#KEY_KPJPCOMMA
 95

	)

212 
	#KEY_KPENTER
 96

	)

213 
	#KEY_RIGHTCTRL
 97

	)

214 
	#KEY_KPSLASH
 98

	)

215 
	#KEY_SYSRQ
 99

	)

216 
	#KEY_RIGHTALT
 100

	)

217 
	#KEY_LINEFEED
 101

	)

218 
	#KEY_HOME
 102

	)

219 
	#KEY_UP
 103

	)

220 
	#KEY_PAGEUP
 104

	)

221 
	#KEY_LEFT
 105

	)

222 
	#KEY_RIGHT
 106

	)

223 
	#KEY_END
 107

	)

224 
	#KEY_DOWN
 108

	)

225 
	#KEY_PAGEDOWN
 109

	)

226 
	#KEY_INSERT
 110

	)

227 
	#KEY_DELETE
 111

	)

228 
	#KEY_MACRO
 112

	)

229 
	#KEY_MUTE
 113

	)

230 
	#KEY_VOLUMEDOWN
 114

	)

231 
	#KEY_VOLUMEUP
 115

	)

232 
	#KEY_POWER
 116

	)

233 
	#KEY_KPEQUAL
 117

	)

234 
	#KEY_KPPLUSMINUS
 118

	)

235 
	#KEY_PAUSE
 119

	)

237 
	#KEY_KPCOMMA
 121

	)

238 
	#KEY_HANGEUL
 122

	)

239 
	#KEY_HANGUEL
 
KEY_HANGEUL


	)

240 
	#KEY_HANJA
 123

	)

241 
	#KEY_YEN
 124

	)

242 
	#KEY_LEFTMETA
 125

	)

243 
	#KEY_RIGHTMETA
 126

	)

244 
	#KEY_COMPOSE
 127

	)

246 
	#KEY_STOP
 128

	)

247 
	#KEY_AGAIN
 129

	)

248 
	#KEY_PROPS
 130

	)

249 
	#KEY_UNDO
 131

	)

250 
	#KEY_FRONT
 132

	)

251 
	#KEY_COPY
 133

	)

252 
	#KEY_OPEN
 134

	)

253 
	#KEY_PASTE
 135

	)

254 
	#KEY_FIND
 136

	)

255 
	#KEY_CUT
 137

	)

256 
	#KEY_HELP
 138

	)

257 
	#KEY_MENU
 139

	)

258 
	#KEY_CALC
 140

	)

259 
	#KEY_SETUP
 141

	)

260 
	#KEY_SLEEP
 142

	)

261 
	#KEY_WAKEUP
 143

	)

262 
	#KEY_FILE
 144

	)

263 
	#KEY_SENDFILE
 145

	)

264 
	#KEY_DELETEFILE
 146

	)

265 
	#KEY_XFER
 147

	)

266 
	#KEY_PROG1
 148

	)

267 
	#KEY_PROG2
 149

	)

268 
	#KEY_WWW
 150

	)

269 
	#KEY_MSDOS
 151

	)

270 
	#KEY_COFFEE
 152

	)

271 
	#KEY_SCREENLOCK
 
KEY_COFFEE


	)

272 
	#KEY_DIRECTION
 153

	)

273 
	#KEY_CYCLEWINDOWS
 154

	)

274 
	#KEY_MAIL
 155

	)

275 
	#KEY_BOOKMARKS
 156

	)

276 
	#KEY_COMPUTER
 157

	)

277 
	#KEY_BACK
 158

	)

278 
	#KEY_FORWARD
 159

	)

279 
	#KEY_CLOSECD
 160

	)

280 
	#KEY_EJECTCD
 161

	)

281 
	#KEY_EJECTCLOSECD
 162

	)

282 
	#KEY_NEXTSONG
 163

	)

283 
	#KEY_PLAYPAUSE
 164

	)

284 
	#KEY_PREVIOUSSONG
 165

	)

285 
	#KEY_STOPCD
 166

	)

286 
	#KEY_RECORD
 167

	)

287 
	#KEY_REWIND
 168

	)

288 
	#KEY_PHONE
 169

	)

289 
	#KEY_ISO
 170

	)

290 
	#KEY_CONFIG
 171

	)

291 
	#KEY_HOMEPAGE
 172

	)

292 
	#KEY_REFRESH
 173

	)

293 
	#KEY_EXIT
 174

	)

294 
	#KEY_MOVE
 175

	)

295 
	#KEY_EDIT
 176

	)

296 
	#KEY_SCROLLUP
 177

	)

297 
	#KEY_SCROLLDOWN
 178

	)

298 
	#KEY_KPLEFTPAREN
 179

	)

299 
	#KEY_KPRIGHTPAREN
 180

	)

300 
	#KEY_NEW
 181

	)

301 
	#KEY_REDO
 182

	)

303 
	#KEY_F13
 183

	)

304 
	#KEY_F14
 184

	)

305 
	#KEY_F15
 185

	)

306 
	#KEY_F16
 186

	)

307 
	#KEY_F17
 187

	)

308 
	#KEY_F18
 188

	)

309 
	#KEY_F19
 189

	)

310 
	#KEY_F20
 190

	)

311 
	#KEY_F21
 191

	)

312 
	#KEY_F22
 192

	)

313 
	#KEY_F23
 193

	)

314 
	#KEY_F24
 194

	)

316 
	#KEY_PLAYCD
 200

	)

317 
	#KEY_PAUSECD
 201

	)

318 
	#KEY_PROG3
 202

	)

319 
	#KEY_PROG4
 203

	)

320 
	#KEY_SUSPEND
 205

	)

321 
	#KEY_CLOSE
 206

	)

322 
	#KEY_PLAY
 207

	)

323 
	#KEY_FASTFORWARD
 208

	)

324 
	#KEY_BASSBOOST
 209

	)

325 
	#KEY_PRINT
 210

	)

326 
	#KEY_HP
 211

	)

327 
	#KEY_CAMERA
 212

	)

328 
	#KEY_SOUND
 213

	)

329 
	#KEY_QUESTION
 214

	)

330 
	#KEY_EMAIL
 215

	)

331 
	#KEY_CHAT
 216

	)

332 
	#KEY_SEARCH
 217

	)

333 
	#KEY_CONNECT
 218

	)

334 
	#KEY_FINANCE
 219

	)

335 
	#KEY_SPORT
 220

	)

336 
	#KEY_SHOP
 221

	)

337 
	#KEY_ALTERASE
 222

	)

338 
	#KEY_CANCEL
 223

	)

339 
	#KEY_BRIGHTNESSDOWN
 224

	)

340 
	#KEY_BRIGHTNESSUP
 225

	)

341 
	#KEY_MEDIA
 226

	)

343 
	#KEY_SWITCHVIDEOMODE
 227

	)

345 
	#KEY_KBDILLUMTOGGLE
 228

	)

346 
	#KEY_KBDILLUMDOWN
 229

	)

347 
	#KEY_KBDILLUMUP
 230

	)

349 
	#KEY_SEND
 231

	)

350 
	#KEY_REPLY
 232

	)

351 
	#KEY_FORWARDMAIL
 233

	)

352 
	#KEY_SAVE
 234

	)

353 
	#KEY_DOCUMENTS
 235

	)

355 
	#KEY_BATTERY
 236

	)

357 
	#KEY_BLUETOOTH
 237

	)

358 
	#KEY_WLAN
 238

	)

359 
	#KEY_UWB
 239

	)

361 
	#KEY_UNKNOWN
 240

	)

363 
	#KEY_VIDEO_NEXT
 241

	)

364 
	#KEY_VIDEO_PREV
 242

	)

365 
	#KEY_BRIGHTNESS_CYCLE
 243

	)

366 
	#KEY_BRIGHTNESS_ZERO
 244

	)

367 
	#KEY_DISPLAY_OFF
 245

	)

369 
	#KEY_WIMAX
 246

	)

373 
	#BTN_MISC
 0x100

	)

374 
	#BTN_0
 0x100

	)

375 
	#BTN_1
 0x101

	)

376 
	#BTN_2
 0x102

	)

377 
	#BTN_3
 0x103

	)

378 
	#BTN_4
 0x104

	)

379 
	#BTN_5
 0x105

	)

380 
	#BTN_6
 0x106

	)

381 
	#BTN_7
 0x107

	)

382 
	#BTN_8
 0x108

	)

383 
	#BTN_9
 0x109

	)

385 
	#BTN_MOUSE
 0x110

	)

386 
	#BTN_LEFT
 0x110

	)

387 
	#BTN_RIGHT
 0x111

	)

388 
	#BTN_MIDDLE
 0x112

	)

389 
	#BTN_SIDE
 0x113

	)

390 
	#BTN_EXTRA
 0x114

	)

391 
	#BTN_FORWARD
 0x115

	)

392 
	#BTN_BACK
 0x116

	)

393 
	#BTN_TASK
 0x117

	)

395 
	#BTN_JOYSTICK
 0x120

	)

396 
	#BTN_TRIGGER
 0x120

	)

397 
	#BTN_THUMB
 0x121

	)

398 
	#BTN_THUMB2
 0x122

	)

399 
	#BTN_TOP
 0x123

	)

400 
	#BTN_TOP2
 0x124

	)

401 
	#BTN_PINKIE
 0x125

	)

402 
	#BTN_BASE
 0x126

	)

403 
	#BTN_BASE2
 0x127

	)

404 
	#BTN_BASE3
 0x128

	)

405 
	#BTN_BASE4
 0x129

	)

406 
	#BTN_BASE5
 0x12a

	)

407 
	#BTN_BASE6
 0x12b

	)

408 
	#BTN_DEAD
 0x12f

	)

410 
	#BTN_GAMEPAD
 0x130

	)

411 
	#BTN_A
 0x130

	)

412 
	#BTN_B
 0x131

	)

413 
	#BTN_C
 0x132

	)

414 
	#BTN_X
 0x133

	)

415 
	#BTN_Y
 0x134

	)

416 
	#BTN_Z
 0x135

	)

417 
	#BTN_TL
 0x136

	)

418 
	#BTN_TR
 0x137

	)

419 
	#BTN_TL2
 0x138

	)

420 
	#BTN_TR2
 0x139

	)

421 
	#BTN_SELECT
 0x13a

	)

422 
	#BTN_START
 0x13b

	)

423 
	#BTN_MODE
 0x13c

	)

424 
	#BTN_THUMBL
 0x13d

	)

425 
	#BTN_THUMBR
 0x13e

	)

427 
	#BTN_DIGI
 0x140

	)

428 
	#BTN_TOOL_PEN
 0x140

	)

429 
	#BTN_TOOL_RUBBER
 0x141

	)

430 
	#BTN_TOOL_BRUSH
 0x142

	)

431 
	#BTN_TOOL_PENCIL
 0x143

	)

432 
	#BTN_TOOL_AIRBRUSH
 0x144

	)

433 
	#BTN_TOOL_FINGER
 0x145

	)

434 
	#BTN_TOOL_MOUSE
 0x146

	)

435 
	#BTN_TOOL_LENS
 0x147

	)

436 
	#BTN_TOUCH
 0x14a

	)

437 
	#BTN_STYLUS
 0x14b

	)

438 
	#BTN_STYLUS2
 0x14c

	)

439 
	#BTN_TOOL_DOUBLETAP
 0x14d

	)

440 
	#BTN_TOOL_TRIPLETAP
 0x14e

	)

442 
	#BTN_WHEEL
 0x150

	)

443 
	#BTN_GEAR_DOWN
 0x150

	)

444 
	#BTN_GEAR_UP
 0x151

	)

446 
	#KEY_OK
 0x160

	)

447 
	#KEY_SELECT
 0x161

	)

448 
	#KEY_GOTO
 0x162

	)

449 
	#KEY_CLEAR
 0x163

	)

450 
	#KEY_POWER2
 0x164

	)

451 
	#KEY_OPTION
 0x165

	)

452 
	#KEY_INFO
 0x166

	)

453 
	#KEY_TIME
 0x167

	)

454 
	#KEY_VENDOR
 0x168

	)

455 
	#KEY_ARCHIVE
 0x169

	)

456 
	#KEY_PROGRAM
 0x16®

	)

457 
	#KEY_CHANNEL
 0x16b

	)

458 
	#KEY_FAVORITES
 0x16c

	)

459 
	#KEY_EPG
 0x16d

	)

460 
	#KEY_PVR
 0x16ê

	)

461 
	#KEY_MHP
 0x16f

	)

462 
	#KEY_LANGUAGE
 0x170

	)

463 
	#KEY_TITLE
 0x171

	)

464 
	#KEY_SUBTITLE
 0x172

	)

465 
	#KEY_ANGLE
 0x173

	)

466 
	#KEY_ZOOM
 0x174

	)

467 
	#KEY_MODE
 0x175

	)

468 
	#KEY_KEYBOARD
 0x176

	)

469 
	#KEY_SCREEN
 0x177

	)

470 
	#KEY_PC
 0x178

	)

471 
	#KEY_TV
 0x179

	)

472 
	#KEY_TV2
 0x17®

	)

473 
	#KEY_VCR
 0x17b

	)

474 
	#KEY_VCR2
 0x17¯

	)

475 
	#KEY_SAT
 0x17d

	)

476 
	#KEY_SAT2
 0x17e

	)

477 
	#KEY_CD
 0x17‡

	)

478 
	#KEY_TAPE
 0x180

	)

479 
	#KEY_RADIO
 0x181

	)

480 
	#KEY_TUNER
 0x182

	)

481 
	#KEY_PLAYER
 0x183

	)

482 
	#KEY_TEXT
 0x184

	)

483 
	#KEY_DVD
 0x185

	)

484 
	#KEY_AUX
 0x186

	)

485 
	#KEY_MP3
 0x187

	)

486 
	#KEY_AUDIO
 0x188

	)

487 
	#KEY_VIDEO
 0x189

	)

488 
	#KEY_DIRECTORY
 0x18a

	)

489 
	#KEY_LIST
 0x18b

	)

490 
	#KEY_MEMO
 0x18¯

	)

491 
	#KEY_CALENDAR
 0x18d

	)

492 
	#KEY_RED
 0x18e

	)

493 
	#KEY_GREEN
 0x18f

	)

494 
	#KEY_YELLOW
 0x190

	)

495 
	#KEY_BLUE
 0x191

	)

496 
	#KEY_CHANNELUP
 0x192

	)

497 
	#KEY_CHANNELDOWN
 0x193

	)

498 
	#KEY_FIRST
 0x194

	)

499 
	#KEY_LAST
 0x195

	)

500 
	#KEY_AB
 0x196

	)

501 
	#KEY_NEXT
 0x197

	)

502 
	#KEY_RESTART
 0x198

	)

503 
	#KEY_SLOW
 0x199

	)

504 
	#KEY_SHUFFLE
 0x19a

	)

505 
	#KEY_BREAK
 0x19b

	)

506 
	#KEY_PREVIOUS
 0x19c

	)

507 
	#KEY_DIGITS
 0x19d

	)

508 
	#KEY_TEEN
 0x19e

	)

509 
	#KEY_TWEN
 0x19f

	)

510 
	#KEY_VIDEOPHONE
 0x1a0

	)

511 
	#KEY_GAMES
 0x1a1

	)

512 
	#KEY_ZOOMIN
 0x1a2

	)

513 
	#KEY_ZOOMOUT
 0x1a3

	)

514 
	#KEY_ZOOMRESET
 0x1a4

	)

515 
	#KEY_WORDPROCESSOR
 0x1a5

	)

516 
	#KEY_EDITOR
 0x1a6

	)

517 
	#KEY_SPREADSHEET
 0x1a7

	)

518 
	#KEY_GRAPHICSEDITOR
 0x1a8

	)

519 
	#KEY_PRESENTATION
 0x1a9

	)

520 
	#KEY_DATABASE
 0x1Ø

	)

521 
	#KEY_NEWS
 0x1ab

	)

522 
	#KEY_VOICEMAIL
 0x1a¯

	)

523 
	#KEY_ADDRESSBOOK
 0x1ad

	)

524 
	#KEY_MESSENGER
 0x1´

	)

525 
	#KEY_DISPLAYTOGGLE
 0x1a‡

	)

526 
	#KEY_SPELLCHECK
 0x1b0

	)

527 
	#KEY_LOGOFF
 0x1b1

	)

529 
	#KEY_DOLLAR
 0x1b2

	)

530 
	#KEY_EURO
 0x1b3

	)

532 
	#KEY_FRAMEBACK
 0x1b4

	)

533 
	#KEY_FRAMEFORWARD
 0x1b5

	)

534 
	#KEY_CONTEXT_MENU
 0x1b6

	)

535 
	#KEY_MEDIA_REPEAT
 0x1b7

	)

537 
	#KEY_DEL_EOL
 0x1c0

	)

538 
	#KEY_DEL_EOS
 0x1c1

	)

539 
	#KEY_INS_LINE
 0x1c2

	)

540 
	#KEY_DEL_LINE
 0x1c3

	)

542 
	#KEY_FN
 0x1d0

	)

543 
	#KEY_FN_ESC
 0x1d1

	)

544 
	#KEY_FN_F1
 0x1d2

	)

545 
	#KEY_FN_F2
 0x1d3

	)

546 
	#KEY_FN_F3
 0x1d4

	)

547 
	#KEY_FN_F4
 0x1d5

	)

548 
	#KEY_FN_F5
 0x1d6

	)

549 
	#KEY_FN_F6
 0x1d7

	)

550 
	#KEY_FN_F7
 0x1d8

	)

551 
	#KEY_FN_F8
 0x1d9

	)

552 
	#KEY_FN_F9
 0x1da

	)

553 
	#KEY_FN_F10
 0x1db

	)

554 
	#KEY_FN_F11
 0x1dc

	)

555 
	#KEY_FN_F12
 0x1dd

	)

556 
	#KEY_FN_1
 0x1de

	)

557 
	#KEY_FN_2
 0x1df

	)

558 
	#KEY_FN_D
 0x1e0

	)

559 
	#KEY_FN_E
 0x1e1

	)

560 
	#KEY_FN_F
 0x1e2

	)

561 
	#KEY_FN_S
 0x1e3

	)

562 
	#KEY_FN_B
 0x1e4

	)

564 
	#KEY_BRL_DOT1
 0x1f1

	)

565 
	#KEY_BRL_DOT2
 0x1f2

	)

566 
	#KEY_BRL_DOT3
 0x1f3

	)

567 
	#KEY_BRL_DOT4
 0x1f4

	)

568 
	#KEY_BRL_DOT5
 0x1f5

	)

569 
	#KEY_BRL_DOT6
 0x1f6

	)

570 
	#KEY_BRL_DOT7
 0x1f7

	)

571 
	#KEY_BRL_DOT8
 0x1f8

	)

572 
	#KEY_BRL_DOT9
 0x1f9

	)

573 
	#KEY_BRL_DOT10
 0x1Á

	)

576 
	#KEY_MIN_INTERESTING
 
KEY_MUTE


	)

577 
	#KEY_MAX
 0x1ff

	)

578 
	#KEY_CNT
 (
KEY_MAX
+1)

	)

584 
	#REL_X
 0x00

	)

585 
	#REL_Y
 0x01

	)

586 
	#REL_Z
 0x02

	)

587 
	#REL_RX
 0x03

	)

588 
	#REL_RY
 0x04

	)

589 
	#REL_RZ
 0x05

	)

590 
	#REL_HWHEEL
 0x06

	)

591 
	#REL_DIAL
 0x07

	)

592 
	#REL_WHEEL
 0x08

	)

593 
	#REL_MISC
 0x09

	)

594 
	#REL_MAX
 0x0f

	)

595 
	#REL_CNT
 (
REL_MAX
+1)

	)

601 
	#ABS_X
 0x00

	)

602 
	#ABS_Y
 0x01

	)

603 
	#ABS_Z
 0x02

	)

604 
	#ABS_RX
 0x03

	)

605 
	#ABS_RY
 0x04

	)

606 
	#ABS_RZ
 0x05

	)

607 
	#ABS_THROTTLE
 0x06

	)

608 
	#ABS_RUDDER
 0x07

	)

609 
	#ABS_WHEEL
 0x08

	)

610 
	#ABS_GAS
 0x09

	)

611 
	#ABS_BRAKE
 0x0a

	)

612 
	#ABS_HAT0X
 0x10

	)

613 
	#ABS_HAT0Y
 0x11

	)

614 
	#ABS_HAT1X
 0x12

	)

615 
	#ABS_HAT1Y
 0x13

	)

616 
	#ABS_HAT2X
 0x14

	)

617 
	#ABS_HAT2Y
 0x15

	)

618 
	#ABS_HAT3X
 0x16

	)

619 
	#ABS_HAT3Y
 0x17

	)

620 
	#ABS_PRESSURE
 0x18

	)

621 
	#ABS_DISTANCE
 0x19

	)

622 
	#ABS_TILT_X
 0x1a

	)

623 
	#ABS_TILT_Y
 0x1b

	)

624 
	#ABS_TOOL_WIDTH
 0x1c

	)

625 
	#ABS_VOLUME
 0x20

	)

626 
	#ABS_MISC
 0x28

	)

627 
	#ABS_MAX
 0x3f

	)

628 
	#ABS_CNT
 (
ABS_MAX
+1)

	)

634 
	#SW_LID
 0x00

	)

635 
	#SW_TABLET_MODE
 0x01

	)

636 
	#SW_HEADPHONE_INSERT
 0x02

	)

637 
	#SW_RFKILL_ALL
 0x03

	)

639 
	#SW_RADIO
 
SW_RFKILL_ALL


	)

640 
	#SW_MICROPHONE_INSERT
 0x04

	)

641 
	#SW_DOCK
 0x05

	)

642 
	#SW_MAX
 0x0f

	)

643 
	#SW_CNT
 (
SW_MAX
+1)

	)

649 
	#MSC_SERIAL
 0x00

	)

650 
	#MSC_PULSELED
 0x01

	)

651 
	#MSC_GESTURE
 0x02

	)

652 
	#MSC_RAW
 0x03

	)

653 
	#MSC_SCAN
 0x04

	)

654 
	#MSC_MAX
 0x07

	)

655 
	#MSC_CNT
 (
MSC_MAX
+1)

	)

661 
	#LED_NUML
 0x00

	)

662 
	#LED_CAPSL
 0x01

	)

663 
	#LED_SCROLLL
 0x02

	)

664 
	#LED_COMPOSE
 0x03

	)

665 
	#LED_KANA
 0x04

	)

666 
	#LED_SLEEP
 0x05

	)

667 
	#LED_SUSPEND
 0x06

	)

668 
	#LED_MUTE
 0x07

	)

669 
	#LED_MISC
 0x08

	)

670 
	#LED_MAIL
 0x09

	)

671 
	#LED_CHARGING
 0x0a

	)

672 
	#LED_MAX
 0x0f

	)

673 
	#LED_CNT
 (
LED_MAX
+1)

	)

679 
	#REP_DELAY
 0x00

	)

680 
	#REP_PERIOD
 0x01

	)

681 
	#REP_MAX
 0x01

	)

687 
	#SND_CLICK
 0x00

	)

688 
	#SND_BELL
 0x01

	)

689 
	#SND_TONE
 0x02

	)

690 
	#SND_MAX
 0x07

	)

691 
	#SND_CNT
 (
SND_MAX
+1)

	)

697 
	#ID_BUS
 0

	)

698 
	#ID_VENDOR
 1

	)

699 
	#ID_PRODUCT
 2

	)

700 
	#ID_VERSION
 3

	)

702 
	#BUS_PCI
 0x01

	)

703 
	#BUS_ISAPNP
 0x02

	)

704 
	#BUS_USB
 0x03

	)

705 
	#BUS_HIL
 0x04

	)

706 
	#BUS_BLUETOOTH
 0x05

	)

707 
	#BUS_VIRTUAL
 0x06

	)

709 
	#BUS_ISA
 0x10

	)

710 
	#BUS_I8042
 0x11

	)

711 
	#BUS_XTKBD
 0x12

	)

712 
	#BUS_RS232
 0x13

	)

713 
	#BUS_GAMEPORT
 0x14

	)

714 
	#BUS_PARPORT
 0x15

	)

715 
	#BUS_AMIGA
 0x16

	)

716 
	#BUS_ADB
 0x17

	)

717 
	#BUS_I2C
 0x18

	)

718 
	#BUS_HOST
 0x19

	)

719 
	#BUS_GSC
 0x1A

	)

720 
	#BUS_ATARI
 0x1B

	)

725 
	#FF_STATUS_STOPPED
 0x00

	)

726 
	#FF_STATUS_PLAYING
 0x01

	)

727 
	#FF_STATUS_MAX
 0x01

	)

744 
	sff_ª∂ay
 {

745 
__u16
 
	mÀngth
;

746 
__u16
 
	mdñay
;

754 
	sff_åiggî
 {

755 
__u16
 
	mbuâ⁄
;

756 
__u16
 
	möãrvÆ
;

771 
	sff_ívñ›e
 {

772 
__u16
 
	m©èck_Àngth
;

773 
__u16
 
	m©èck_Àvñ
;

774 
__u16
 
	mÁde_Àngth
;

775 
__u16
 
	mÁde_Àvñ
;

783 
	sff_c⁄°™t_ef„˘
 {

784 
__s16
 
	mÀvñ
;

785 
ff_ívñ›e
 
	mívñ›e
;

794 
	sff_ømp_ef„˘
 {

795 
__s16
 
	m°¨t_Àvñ
;

796 
__s16
 
	míd_Àvñ
;

797 
ff_ívñ›e
 
	mívñ›e
;

810 
	sff_c⁄dôi⁄_ef„˘
 {

811 
__u16
 
	mright_ßtuøti⁄
;

812 
__u16
 
	mÀ·_ßtuøti⁄
;

814 
__s16
 
	mright_c€ff
;

815 
__s16
 
	mÀ·_c€ff
;

817 
__u16
 
	mdódb™d
;

818 
__s16
 
	m˚¡î
;

839 
	sff_≥riodic_ef„˘
 {

840 
__u16
 
	mwavef‹m
;

841 
__u16
 
	m≥riod
;

842 
__s16
 
	mmagnôude
;

843 
__s16
 
	moff£t
;

844 
__u16
 
	mpha£
;

846 
ff_ívñ›e
 
	mívñ›e
;

848 
__u32
 
	mcu°om_Àn
;

849 
__s16
 *
	mcu°om_d©a
;

860 
	sff_rumbÀ_ef„˘
 {

861 
__u16
 
	m°r⁄g_magnôude
;

862 
__u16
 
	mwók_magnôude
;

888 
	sff_ef„˘
 {

889 
__u16
 
	mty≥
;

890 
__s16
 
	mid
;

891 
__u16
 
	mdúe˘i⁄
;

892 
ff_åiggî
 
	måiggî
;

893 
ff_ª∂ay
 
	mª∂ay
;

896 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

897 
ff_ømp_ef„˘
 
	mømp
;

898 
ff_≥riodic_ef„˘
 
	m≥riodic
;

899 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

900 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

901 } 
	mu
;

908 
	#FF_RUMBLE
 0x50

	)

909 
	#FF_PERIODIC
 0x51

	)

910 
	#FF_CONSTANT
 0x52

	)

911 
	#FF_SPRING
 0x53

	)

912 
	#FF_FRICTION
 0x54

	)

913 
	#FF_DAMPER
 0x55

	)

914 
	#FF_INERTIA
 0x56

	)

915 
	#FF_RAMP
 0x57

	)

917 
	#FF_EFFECT_MIN
 
FF_RUMBLE


	)

918 
	#FF_EFFECT_MAX
 
FF_RAMP


	)

924 
	#FF_SQUARE
 0x58

	)

925 
	#FF_TRIANGLE
 0x59

	)

926 
	#FF_SINE
 0x5a

	)

927 
	#FF_SAW_UP
 0x5b

	)

928 
	#FF_SAW_DOWN
 0x5c

	)

929 
	#FF_CUSTOM
 0x5d

	)

931 
	#FF_WAVEFORM_MIN
 
FF_SQUARE


	)

932 
	#FF_WAVEFORM_MAX
 
FF_CUSTOM


	)

938 
	#FF_GAIN
 0x60

	)

939 
	#FF_AUTOCENTER
 0x61

	)

941 
	#FF_MAX
 0x7f

	)

942 
	#FF_CNT
 (
FF_MAX
+1)

	)

	@/usr/include/linux/soundcard.h

1 #i‚de‡
SOUNDCARD_H


2 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡ 
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1036 #i‡(!
deföed
(
__KERNEL__
Ë&& !deföed(
KERNEL
Ë&& !deföed(
INKERNEL
Ë&& !deföed(
_KERNEL
)Ë|| deföed(
USE_SEQ_MACROS
)

1043 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1045 
£qbuf_dump
();

1047 
OSS_öô
(
£qfd
, 
buÊí
);

1048 
OSS_£qbuf_dump
(
fd
, *
buf
, 
buÊí
);

1049 
OSS_£q_advbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1050 
OSS_£q_√edbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1051 
OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
,

1052 
fd
, *
buf
, 
buÊí
);

1053 
OSS_drum_ˇchög
(
dev
, 
chn
, 
∑tch
,

1054 
fd
, *
buf
, 
buÊí
);

1055 
OSS_wrôe_∑tch
(
fd
, *
buf
, 
Àn
);

1056 
OSS_wrôe_∑tch2
(
fd
, *
buf
, 
Àn
);

1058 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1059 #ifde‡
OSSLIB


1060 
	#SEQ_USE_EXTBUF
() \

1061 *
_£qbuf
; \

1062 
_£qbuÊí
;
_£qbuÂå


	)

1063 
	#SEQ_DEFINEBUF
(
Àn
Ë
	`SEQ_USE_EXTBUF
();
_ªque°ed_£qbuÊí
=
	)
len

1064 
	#_SEQ_ADVBUF
(
Àn
Ë
	`OSS_£q_advbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1065 
	#_SEQ_NEEDBUF
(
Àn
Ë
	`OSS_£q_√edbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1066 
	#SEQ_DUMPBUF
(Ë
	`OSS_£qbuf_dump
(
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1068 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
) \

1069 
	`OSS_∑tch_ˇchög
(
dev
, -1, 
ö°r
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1070 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
) \

1071 
	`OSS_drum_ˇchög
(
dev
, -1, 
drum
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1074 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1075 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1077 
	#SEQ_USE_EXTBUF
() \

1078 
_£qbuf
[]; \

1079 
_£qbuÊí
;
_£qbuÂå


	)

1081 #i‚de‡
USE_SIMPLE_MACROS


1101 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1102 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1103 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1104 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1120 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1124 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1130 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1131 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1139 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1140 {
	`_SEQ_NEEDBUF
(8);\

1141 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1142 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1143 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1144 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1145 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1146 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1147 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1148 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1149 
	`_SEQ_ADVBUF
(8);}

	)

1151 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1152 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1154 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1155 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1157 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1158 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1164 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1165 {
	`_SEQ_NEEDBUF
(8);\

1166 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1167 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1168 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1169 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1170 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1171 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1172 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1173 
	`_SEQ_ADVBUF
(8);}

	)

1189 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1190 {
ii
, 
Œ
=(
Àn
); \

1191 *
buÂ
=
buf
;\

1192 i‡(
Œ
>6)ll=6;\

1193 
	`_SEQ_NEEDBUF
(8);\

1194 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1195 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1196 
ii
=0;ii<
Œ
;ii++)\

1197 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1198 
ii
=
Œ
;ii<6;ii++)\

1199 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1200 
	`_SEQ_ADVBUF
(8);}

	)

1202 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1203 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1205 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1206 #ifde‡
OSSLIB


1207 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1208 {
	`OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
); \

1209 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0);}

	)

1211 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1212 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1215 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1216 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1218 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1219 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1222 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1223 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1224 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1225 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1226 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1227 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1228 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1229 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1230 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1231 
	`_SEQ_ADVBUF
(8);}

	)

1236 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1237 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1238 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1239 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1240 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1246 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1255 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1256 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1257 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1258 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1259 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1260 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1261 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1262 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1268 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1269 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1270 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1271 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1272 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1273 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1274 
	`_SEQ_ADVBUF
(8);}

	)

1276 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1281 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1282 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1283 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1284 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1285 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1286 
	`_SEQ_ADVBUF
(4);}

	)

1291 #ifde‡
OSSLIB


1292 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1293 
	`OSS_wrôe_∑tch
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1294 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1295 
	`OSS_wrôe_∑tch2
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1297 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1298 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1299 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1300 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1301 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1302 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/pngconf.h

17 #i‚de‡
PNGCONF_H


18 
	#PNGCONF_H


	)

20 
	#PNG_1_2_X


	)

26 #ifde‡
PNG_USER_CONFIG


27 #i‚de‡
PNG_USER_PRIVATEBUILD


28 
	#PNG_USER_PRIVATEBUILD


	)

30 
	~"≤gu§.h
"

34 #ifde‡
PNG_CONFIGURE_LIBPNG


35 #ifde‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

61 #ifde‡
__STDC__


62 #ifde‡
SPECIALBUILD


63 #¥agm®
mesßge
("PNG_LIBPNG_SPECIALBUILD (and deprecated SPECIALBUILD)\
Çow LIBPNGÑeserved macros. Use PNG_USER_PRIVATEBUILD instead.")

67 #ifde‡
PRIVATEBUILD


68 #¥agm®
mesßge
("PRIVATEBUILD is deprecated.\
 PNG_USER_PRIVATEBUILD instead.")

70 
	#PNG_USER_PRIVATEBUILD
 
PRIVATEBUILD


	)

74 #i‚de‡
PNG_VERSION_INFO_ONLY


80 #i‡!
deföed
(
PNG_NO_WARN_UNINITIALIZED_ROW
) && \

81 !
	$deföed
(
PNG_WARN_UNINITIALIZED_ROW
)

82 
	#PNG_WARN_UNINITIALIZED_ROW
 1

	)

99 #i‚de‡
PNG_ZBUF_SIZE


100 
	#PNG_ZBUF_SIZE
 8192

	)

105 #i‚de‡
PNG_NO_READ_SUPPORTED


106 
	#PNG_READ_SUPPORTED


	)

111 #i‚de‡
PNG_NO_WRITE_SUPPORTED


112 
	#PNG_WRITE_SUPPORTED


	)

117 #i‡!
	`deföed
(
PNG_1_0_X
Ë&& !deföed(
PNG_NO_MNG_FEATURES
)

118 #i‚de‡
PNG_MNG_FEATURES_SUPPORTED


119 
	#PNG_MNG_FEATURES_SUPPORTED


	)

123 #i‚de‡
PNG_NO_FLOATING_POINT_SUPPORTED


124 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


125 
	#PNG_FLOATING_POINT_SUPPORTED


	)

137 #i‡
	`deföed
(
MAXSEG_64K
Ë&& !deföed(
PNG_MAX_MALLOC_64K
)

138 
	#PNG_MAX_MALLOC_64K


	)

174 #i‡
	`deföed
(
__CYGWIN__
)

175 #i‡
	`deföed
(
ALL_STATIC
)

176 #i‡
	`deföed
(
PNG_BUILD_DLL
)

177 #unde‡
PNG_BUILD_DLL


179 #i‡
	`deföed
(
PNG_USE_DLL
)

180 #unde‡
PNG_USE_DLL


182 #i‡
	`deföed
(
PNG_DLL
)

183 #unde‡
PNG_DLL


185 #i‡!
	`deföed
(
PNG_STATIC
)

186 
	#PNG_STATIC


	)

189 #i‡
	`deföed
 (
PNG_BUILD_DLL
)

190 #i‡
	`deföed
(
PNG_STATIC
)

191 #unde‡
PNG_STATIC


193 #i‡
	`deföed
(
PNG_USE_DLL
)

194 #unde‡
PNG_USE_DLL


196 #i‡!
	`deföed
(
PNG_DLL
)

197 
	#PNG_DLL


	)

200 #i‡
	`deföed
(
PNG_STATIC
)

201 #i‡
	`deföed
(
PNG_USE_DLL
)

202 #unde‡
PNG_USE_DLL


204 #i‡
	`deföed
(
PNG_DLL
)

205 #unde‡
PNG_DLL


208 #i‡!
	`deföed
(
PNG_USE_DLL
)

209 
	#PNG_USE_DLL


	)

211 #i‡!
	`deföed
(
PNG_DLL
)

212 
	#PNG_DLL


	)

232 #i‡
	`deföed
(
_WIN32_WCE
)

233 
	~<wödows.h
>

235 
	#PNG_NO_CONSOLE_IO


	)

236 #ifde‡
PNG_DEBUG


237 #unde‡
PNG_DEBUG


241 #ifde‡
PNG_BUILD_DLL


242 #i‚de‡
PNG_CONSOLE_IO_SUPPORTED


243 #i‚de‡
PNG_NO_CONSOLE_IO


244 
	#PNG_NO_CONSOLE_IO


	)

249 #ifde‡
PNG_NO_STDIO


250 #i‚de‡
PNG_NO_CONSOLE_IO


251 
	#PNG_NO_CONSOLE_IO


	)

253 #ifde‡
PNG_DEBUG


254 #i‡(
PNG_DEBUG
 > 0)

255 
	~<°dio.h
>

259 #i‡!
	`deföed
(
_WIN32_WCE
)

261 
	~<°dio.h
>

272 #i‚de‡
PNGARG


274 #ifde‡
OF


275 
	#PNGARG
(
¨gli°
Ë
	`OF
◊rgli°)

	)

278 #ifde‡
_NO_PROTO


279 
	#PNGARG
(
¨gli°
Ë()

	)

280 #i‚de‡
PNG_TYPECAST_NULL


281 
	#PNG_TYPECAST_NULL


	)

284 
	#PNGARG
(
¨gli°
Ë
	)
arglist

296 #i‚de‡
MACOS


297 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
macötosh
)Ë|| deföed(
≠∂ec
) || \

298 
	`deföed
(
THINK_C
Ë|| deföed(
__SC__
Ë|| 
	$deföed
(
TARGET_OS_MAC
)

299 
	#MACOS


	)

304 #i‡!
	`deföed
(
MACOS
Ë&& !deföed(
RISCOS
Ë&& !deföed(
_WIN32_WCE
)

305 
	~<sys/ty≥s.h
>

308 #i‡!
	`deföed
(
PNG_SETJMP_NOT_SUPPORTED
Ë&& !deföed(
PNG_NO_SETJMP_SUPPORTED
)

309 
	#PNG_SETJMP_SUPPORTED


	)

312 #ifde‡
PNG_SETJMP_SUPPORTED


317 #ifde‡
__löux__


318 #ifde‡
_BSD_SOURCE


319 
	#PNG_SAVE_BSD_SOURCE


	)

320 #unde‡
_BSD_SOURCE


322 #ifde‡
_SETJMP_H


326 
__≤gc⁄f
.
h__
 
Æªady
 
ö˛udes
 
£tjmp
.
h
;

327 
__d⁄t__
 
ö˛ude
 
ô
 
agaö
.;

332 
	~<£tjmp.h
>

334 #ifde‡
__löux__


335 #ifde‡
PNG_SAVE_BSD_SOURCE


336 #i‚de‡
_BSD_SOURCE


337 
	#_BSD_SOURCE


	)

339 #unde‡
PNG_SAVE_BSD_SOURCE


344 #ifde‡
BSD


345 
	~<°rögs.h
>

347 
	~<°rög.h
>

351 #ifde‡
PNG_INTERNAL


353 
	~<°dlib.h
>

362 
	#PNG_EXTERN


	)

368 #i‡
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

369 #i‡
	`deföed
(
MACOS
)

374 #i‡!
	`deföed
(
__MATH_H__
Ë&& !deföed(
__MATH_H
Ë&& !deföed(
__cm©h__
)

375 
	~<Â.h
>

378 
	~<m©h.h
>

380 #i‡
	`deföed
(
_AMIGA
Ë&& deföed(
__SASC
Ë&& deföed(
_M68881
)

384 
	~<m68881.h
>

389 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
WIN32
)Ë|| deföed(
__STDC__
)

390 
	#PNG_ALWAYS_EXTERN


	)

394 #i‡
	`deföed
(
__TURBOC__
Ë&& deföed(
__MSDOS__
)

395 
	~<mem.h
>

396 
	~<Æloc.h
>

400 #i‡
	`deföed
(
_MSC_VER
Ë&& (deföed(
WIN32
Ë|| deföed(
_Wödows
) || \

401 
	`deföed
(
_WINDOWS
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
))

402 
	~<mÆloc.h
>

409 #i‚de‡
PNG_DITHER_RED_BITS


410 
	#PNG_DITHER_RED_BITS
 5

	)

412 #i‚de‡
PNG_DITHER_GREEN_BITS


413 
	#PNG_DITHER_GREEN_BITS
 5

	)

415 #i‚de‡
PNG_DITHER_BLUE_BITS


416 
	#PNG_DITHER_BLUE_BITS
 5

	)

426 #i‚de‡
PNG_MAX_GAMMA_8


427 
	#PNG_MAX_GAMMA_8
 11

	)

433 #i‚de‡
PNG_GAMMA_THRESHOLD


434 
	#PNG_GAMMA_THRESHOLD
 0.05

	)

444 #i‚de‡
PNG_NO_CONST


445 
	#PNG_CONST
 c⁄°

	)

447 
	#PNG_CONST


	)

483 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

484 #i‚de‡
PNG_NO_iTXt_SUPPORTED


485 
	#PNG_NO_iTXt_SUPPORTED


	)

487 #i‚de‡
PNG_NO_READ_iTXt


488 
	#PNG_NO_READ_iTXt


	)

490 #i‚de‡
PNG_NO_WRITE_iTXt


491 
	#PNG_NO_WRITE_iTXt


	)

495 #i‡!
	`deföed
(
PNG_NO_iTXt_SUPPORTED
)

496 #i‡!
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_READ_iTXt
)

497 
	#PNG_READ_iTXt


	)

499 #i‡!
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_WRITE_iTXt
)

500 
	#PNG_WRITE_iTXt


	)

510 #ifde‡
PNG_LEGACY_SUPPORTED


511 
	#PNG_NO_FREE_ME


	)

512 
	#PNG_NO_READ_UNKNOWN_CHUNKS


	)

513 
	#PNG_NO_WRITE_UNKNOWN_CHUNKS


	)

514 
	#PNG_NO_READ_USER_CHUNKS


	)

515 
	#PNG_NO_READ_iCCP


	)

516 
	#PNG_NO_WRITE_iCCP


	)

517 
	#PNG_NO_READ_iTXt


	)

518 
	#PNG_NO_WRITE_iTXt


	)

519 
	#PNG_NO_READ_sCAL


	)

520 
	#PNG_NO_WRITE_sCAL


	)

521 
	#PNG_NO_READ_sPLT


	)

522 
	#PNG_NO_WRITE_sPLT


	)

523 
	#PNG_NO_INFO_IMAGE


	)

524 
	#PNG_NO_READ_RGB_TO_GRAY


	)

525 
	#PNG_NO_READ_USER_TRANSFORM


	)

526 
	#PNG_NO_WRITE_USER_TRANSFORM


	)

527 
	#PNG_NO_USER_MEM


	)

528 
	#PNG_NO_READ_EMPTY_PLTE


	)

529 
	#PNG_NO_MNG_FEATURES


	)

530 
	#PNG_NO_FIXED_POINT_SUPPORTED


	)

534 #i‡!
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) || \

535 !
	$deföed
(
PNG_NO_FIXED_POINT_SUPPORTED
)

536 
	#PNG_FIXED_POINT_SUPPORTED


	)

539 #i‚de‡
PNG_NO_FREE_ME


540 
	#PNG_FREE_ME_SUPPORTED


	)

543 #i‡
	`deföed
(
PNG_READ_SUPPORTED
)

545 #i‡!
	`deföed
(
PNG_READ_TRANSFORMS_NOT_SUPPORTED
) && \

546 !
	$deföed
(
PNG_NO_READ_TRANSFORMS
)

547 
	#PNG_READ_TRANSFORMS_SUPPORTED


	)

550 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


551 #i‚de‡
PNG_NO_READ_EXPAND


552 
	#PNG_READ_EXPAND_SUPPORTED


	)

554 #i‚de‡
PNG_NO_READ_SHIFT


555 
	#PNG_READ_SHIFT_SUPPORTED


	)

557 #i‚de‡
PNG_NO_READ_PACK


558 
	#PNG_READ_PACK_SUPPORTED


	)

560 #i‚de‡
PNG_NO_READ_BGR


561 
	#PNG_READ_BGR_SUPPORTED


	)

563 #i‚de‡
PNG_NO_READ_SWAP


564 
	#PNG_READ_SWAP_SUPPORTED


	)

566 #i‚de‡
PNG_NO_READ_PACKSWAP


567 
	#PNG_READ_PACKSWAP_SUPPORTED


	)

569 #i‚de‡
PNG_NO_READ_INVERT


570 
	#PNG_READ_INVERT_SUPPORTED


	)

572 #i‚de‡
PNG_NO_READ_DITHER


573 
	#PNG_READ_DITHER_SUPPORTED


	)

575 #i‚de‡
PNG_NO_READ_BACKGROUND


576 
	#PNG_READ_BACKGROUND_SUPPORTED


	)

578 #i‚de‡
PNG_NO_READ_16_TO_8


579 
	#PNG_READ_16_TO_8_SUPPORTED


	)

581 #i‚de‡
PNG_NO_READ_FILLER


582 
	#PNG_READ_FILLER_SUPPORTED


	)

584 #i‚de‡
PNG_NO_READ_GAMMA


585 
	#PNG_READ_GAMMA_SUPPORTED


	)

587 #i‚de‡
PNG_NO_READ_GRAY_TO_RGB


588 
	#PNG_READ_GRAY_TO_RGB_SUPPORTED


	)

590 #i‚de‡
PNG_NO_READ_SWAP_ALPHA


591 
	#PNG_READ_SWAP_ALPHA_SUPPORTED


	)

593 #i‚de‡
PNG_NO_READ_INVERT_ALPHA


594 
	#PNG_READ_INVERT_ALPHA_SUPPORTED


	)

596 #i‚de‡
PNG_NO_READ_STRIP_ALPHA


597 
	#PNG_READ_STRIP_ALPHA_SUPPORTED


	)

599 #i‚de‡
PNG_NO_READ_USER_TRANSFORM


600 
	#PNG_READ_USER_TRANSFORM_SUPPORTED


	)

602 #i‚de‡
PNG_NO_READ_RGB_TO_GRAY


603 
	#PNG_READ_RGB_TO_GRAY_SUPPORTED


	)

607 #i‡!
	`deföed
(
PNG_NO_PROGRESSIVE_READ
) && \

608 !
	$deföed
(
PNG_PROGRESSIVE_READ_SUPPORTED
)

609 
	#PNG_PROGRESSIVE_READ_SUPPORTED


	)

613 
	#PNG_READ_INTERLACING_SUPPORTED


	)

615 #i‚de‡
PNG_NO_READ_COMPOSITE_NODIV


616 #i‚de‡
PNG_NO_READ_COMPOSITED_NODIV


617 
	#PNG_READ_COMPOSITE_NODIV_SUPPORTED


	)

621 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

624 #i‚de‡
PNG_NO_READ_EMPTY_PLTE


625 
	#PNG_READ_EMPTY_PLTE_SUPPORTED


	)

631 #i‡
	`deföed
(
PNG_WRITE_SUPPORTED
)

633 #i‡!
	`deföed
(
PNG_WRITE_TRANSFORMS_NOT_SUPPORTED
) && \

634 !
	$deföed
(
PNG_NO_WRITE_TRANSFORMS
)

635 
	#PNG_WRITE_TRANSFORMS_SUPPORTED


	)

638 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


639 #i‚de‡
PNG_NO_WRITE_SHIFT


640 
	#PNG_WRITE_SHIFT_SUPPORTED


	)

642 #i‚de‡
PNG_NO_WRITE_PACK


643 
	#PNG_WRITE_PACK_SUPPORTED


	)

645 #i‚de‡
PNG_NO_WRITE_BGR


646 
	#PNG_WRITE_BGR_SUPPORTED


	)

648 #i‚de‡
PNG_NO_WRITE_SWAP


649 
	#PNG_WRITE_SWAP_SUPPORTED


	)

651 #i‚de‡
PNG_NO_WRITE_PACKSWAP


652 
	#PNG_WRITE_PACKSWAP_SUPPORTED


	)

654 #i‚de‡
PNG_NO_WRITE_INVERT


655 
	#PNG_WRITE_INVERT_SUPPORTED


	)

657 #i‚de‡
PNG_NO_WRITE_FILLER


658 
	#PNG_WRITE_FILLER_SUPPORTED


	)

660 #i‚de‡
PNG_NO_WRITE_SWAP_ALPHA


661 
	#PNG_WRITE_SWAP_ALPHA_SUPPORTED


	)

663 #i‚de‡
PNG_NO_WRITE_INVERT_ALPHA


664 
	#PNG_WRITE_INVERT_ALPHA_SUPPORTED


	)

666 #i‚de‡
PNG_NO_WRITE_USER_TRANSFORM


667 
	#PNG_WRITE_USER_TRANSFORM_SUPPORTED


	)

671 #i‡!
	`deföed
(
PNG_NO_WRITE_INTERLACING_SUPPORTED
) && \

672 !
	$deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

673 
	#PNG_WRITE_INTERLACING_SUPPORTED


	)

678 #i‡!
	`deföed
(
PNG_NO_WRITE_WEIGHTED_FILTER
) && \

679 !
	`deföed
(
PNG_WRITE_WEIGHTED_FILTER
) && \

680 
	$deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

681 
	#PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


	)

684 #i‚de‡
PNG_NO_WRITE_FLUSH


685 
	#PNG_WRITE_FLUSH_SUPPORTED


	)

688 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

690 #i‚de‡
PNG_NO_WRITE_EMPTY_PLTE


691 
	#PNG_WRITE_EMPTY_PLTE_SUPPORTED


	)

697 #i‚de‡
PNG_1_0_X


698 #i‚de‡
PNG_NO_ERROR_NUMBERS


699 
	#PNG_ERROR_NUMBERS_SUPPORTED


	)

703 #i‡
	`deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

704 
	$deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

705 #i‚de‡
PNG_NO_USER_TRANSFORM_PTR


706 
	#PNG_USER_TRANSFORM_PTR_SUPPORTED


	)

710 #i‚de‡
PNG_NO_STDIO


711 
	#PNG_TIME_RFC1123_SUPPORTED


	)

730 #i‡!
	`deföed
(
PNG_NO_EASY_ACCESS
Ë&& !deföed(
PNG_EASY_ACCESS_SUPPORTED
)

731 
	#PNG_EASY_ACCESS_SUPPORTED


	)

739 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_OPTIMIZED_CODE
)

740 #i‚de‡
PNG_OPTIMIZED_CODE_SUPPORTED


741 
	#PNG_OPTIMIZED_CODE_SUPPORTED


	)

745 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_ASSEMBLER_CODE
)

746 #i‚de‡
PNG_ASSEMBLER_CODE_SUPPORTED


747 
	#PNG_ASSEMBLER_CODE_SUPPORTED


	)

750 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
) && (__GNUC__ < 4)

752 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

753 
	#PNG_NO_MMX_CODE


	)

757 #i‡
	`deföed
(
__APPLE__
)

758 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

759 
	#PNG_NO_MMX_CODE


	)

763 #i‡(
	`deföed
(
__MWERKS__
Ë&& ((__MWERKS__ < 0x0900Ë|| 
macötosh
))

764 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

765 
	#PNG_NO_MMX_CODE


	)

769 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

770 
	#PNG_MMX_CODE_SUPPORTED


	)

776 #i‡!
	`deföed
(
PNG_1_0_X
)

777 #i‡!
	`deföed
(
PNG_NO_USER_MEM
Ë&& !deföed(
PNG_USER_MEM_SUPPORTED
)

778 
	#PNG_USER_MEM_SUPPORTED


	)

783 #i‡!
	`deföed
(
PNG_1_0_X
)

784 #i‚de‡
PNG_SET_USER_LIMITS_SUPPORTED


785 #i‡!
	`deföed
(
PNG_NO_SET_USER_LIMITS
Ë&& !deföed(
PNG_SET_USER_LIMITS_SUPPORTED
)

786 
	#PNG_SET_USER_LIMITS_SUPPORTED


	)

794 #i‚de‡
PNG_USER_WIDTH_MAX


795 
	#PNG_USER_WIDTH_MAX
 1000000L

	)

797 #i‚de‡
PNG_USER_HEIGHT_MAX


798 
	#PNG_USER_HEIGHT_MAX
 1000000L

	)

837 #i‡
	`deföed
(
PNG_READ_SUPPORTED
) && \

838 !
	`deföed
(
PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

839 !
	$deföed
(
PNG_NO_READ_ANCILLARY_CHUNKS
)

840 
	#PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


	)

843 #i‡
	`deföed
(
PNG_WRITE_SUPPORTED
) && \

844 !
	`deföed
(
PNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

845 !
	$deföed
(
PNG_NO_WRITE_ANCILLARY_CHUNKS
)

846 
	#PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


	)

849 #ifde‡
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


851 #ifde‡
PNG_NO_READ_TEXT


852 
	#PNG_NO_READ_iTXt


	)

853 
	#PNG_NO_READ_tEXt


	)

854 
	#PNG_NO_READ_zTXt


	)

856 #i‚de‡
PNG_NO_READ_bKGD


857 
	#PNG_READ_bKGD_SUPPORTED


	)

858 
	#PNG_bKGD_SUPPORTED


	)

860 #i‚de‡
PNG_NO_READ_cHRM


861 
	#PNG_READ_cHRM_SUPPORTED


	)

862 
	#PNG_cHRM_SUPPORTED


	)

864 #i‚de‡
PNG_NO_READ_gAMA


865 
	#PNG_READ_gAMA_SUPPORTED


	)

866 
	#PNG_gAMA_SUPPORTED


	)

868 #i‚de‡
PNG_NO_READ_hIST


869 
	#PNG_READ_hIST_SUPPORTED


	)

870 
	#PNG_hIST_SUPPORTED


	)

872 #i‚de‡
PNG_NO_READ_iCCP


873 
	#PNG_READ_iCCP_SUPPORTED


	)

874 
	#PNG_iCCP_SUPPORTED


	)

876 #i‚de‡
PNG_NO_READ_iTXt


877 #i‚de‡
PNG_READ_iTXt_SUPPORTED


878 
	#PNG_READ_iTXt_SUPPORTED


	)

880 #i‚de‡
PNG_iTXt_SUPPORTED


881 
	#PNG_iTXt_SUPPORTED


	)

884 #i‚de‡
PNG_NO_READ_oFFs


885 
	#PNG_READ_oFFs_SUPPORTED


	)

886 
	#PNG_oFFs_SUPPORTED


	)

888 #i‚de‡
PNG_NO_READ_pCAL


889 
	#PNG_READ_pCAL_SUPPORTED


	)

890 
	#PNG_pCAL_SUPPORTED


	)

892 #i‚de‡
PNG_NO_READ_sCAL


893 
	#PNG_READ_sCAL_SUPPORTED


	)

894 
	#PNG_sCAL_SUPPORTED


	)

896 #i‚de‡
PNG_NO_READ_pHYs


897 
	#PNG_READ_pHYs_SUPPORTED


	)

898 
	#PNG_pHYs_SUPPORTED


	)

900 #i‚de‡
PNG_NO_READ_sBIT


901 
	#PNG_READ_sBIT_SUPPORTED


	)

902 
	#PNG_sBIT_SUPPORTED


	)

904 #i‚de‡
PNG_NO_READ_sPLT


905 
	#PNG_READ_sPLT_SUPPORTED


	)

906 
	#PNG_sPLT_SUPPORTED


	)

908 #i‚de‡
PNG_NO_READ_sRGB


909 
	#PNG_READ_sRGB_SUPPORTED


	)

910 
	#PNG_sRGB_SUPPORTED


	)

912 #i‚de‡
PNG_NO_READ_tEXt


913 
	#PNG_READ_tEXt_SUPPORTED


	)

914 
	#PNG_tEXt_SUPPORTED


	)

916 #i‚de‡
PNG_NO_READ_tIME


917 
	#PNG_READ_tIME_SUPPORTED


	)

918 
	#PNG_tIME_SUPPORTED


	)

920 #i‚de‡
PNG_NO_READ_tRNS


921 
	#PNG_READ_tRNS_SUPPORTED


	)

922 
	#PNG_tRNS_SUPPORTED


	)

924 #i‚de‡
PNG_NO_READ_zTXt


925 
	#PNG_READ_zTXt_SUPPORTED


	)

926 
	#PNG_zTXt_SUPPORTED


	)

928 #i‚de‡
PNG_NO_READ_UNKNOWN_CHUNKS


929 
	#PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


	)

930 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


931 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

933 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


934 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

937 #i‡!
	`deföed
(
PNG_NO_READ_USER_CHUNKS
) && \

938 
	$deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
)

939 
	#PNG_READ_USER_CHUNKS_SUPPORTED


	)

940 
	#PNG_USER_CHUNKS_SUPPORTED


	)

941 #ifde‡
PNG_NO_READ_UNKNOWN_CHUNKS


942 #unde‡
PNG_NO_READ_UNKNOWN_CHUNKS


944 #ifde‡
PNG_NO_HANDLE_AS_UNKNOWN


945 #unde‡
PNG_NO_HANDLE_AS_UNKNOWN


948 #i‚de‡
PNG_NO_READ_OPT_PLTE


949 
	#PNG_READ_OPT_PLTE_SUPPORTED


	)

951 #i‡
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë|| deföed(
PNG_READ_tEXt_SUPPORTED
) || \

952 
	$deföed
(
PNG_READ_zTXt_SUPPORTED
)

953 
	#PNG_READ_TEXT_SUPPORTED


	)

954 
	#PNG_TEXT_SUPPORTED


	)

959 #ifde‡
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


961 #ifde‡
PNG_NO_WRITE_TEXT


962 
	#PNG_NO_WRITE_iTXt


	)

963 
	#PNG_NO_WRITE_tEXt


	)

964 
	#PNG_NO_WRITE_zTXt


	)

966 #i‚de‡
PNG_NO_WRITE_bKGD


967 
	#PNG_WRITE_bKGD_SUPPORTED


	)

968 #i‚de‡
PNG_bKGD_SUPPORTED


969 
	#PNG_bKGD_SUPPORTED


	)

972 #i‚de‡
PNG_NO_WRITE_cHRM


973 
	#PNG_WRITE_cHRM_SUPPORTED


	)

974 #i‚de‡
PNG_cHRM_SUPPORTED


975 
	#PNG_cHRM_SUPPORTED


	)

978 #i‚de‡
PNG_NO_WRITE_gAMA


979 
	#PNG_WRITE_gAMA_SUPPORTED


	)

980 #i‚de‡
PNG_gAMA_SUPPORTED


981 
	#PNG_gAMA_SUPPORTED


	)

984 #i‚de‡
PNG_NO_WRITE_hIST


985 
	#PNG_WRITE_hIST_SUPPORTED


	)

986 #i‚de‡
PNG_hIST_SUPPORTED


987 
	#PNG_hIST_SUPPORTED


	)

990 #i‚de‡
PNG_NO_WRITE_iCCP


991 
	#PNG_WRITE_iCCP_SUPPORTED


	)

992 #i‚de‡
PNG_iCCP_SUPPORTED


993 
	#PNG_iCCP_SUPPORTED


	)

996 #i‚de‡
PNG_NO_WRITE_iTXt


997 #i‚de‡
PNG_WRITE_iTXt_SUPPORTED


998 
	#PNG_WRITE_iTXt_SUPPORTED


	)

1000 #i‚de‡
PNG_iTXt_SUPPORTED


1001 
	#PNG_iTXt_SUPPORTED


	)

1004 #i‚de‡
PNG_NO_WRITE_oFFs


1005 
	#PNG_WRITE_oFFs_SUPPORTED


	)

1006 #i‚de‡
PNG_oFFs_SUPPORTED


1007 
	#PNG_oFFs_SUPPORTED


	)

1010 #i‚de‡
PNG_NO_WRITE_pCAL


1011 
	#PNG_WRITE_pCAL_SUPPORTED


	)

1012 #i‚de‡
PNG_pCAL_SUPPORTED


1013 
	#PNG_pCAL_SUPPORTED


	)

1016 #i‚de‡
PNG_NO_WRITE_sCAL


1017 
	#PNG_WRITE_sCAL_SUPPORTED


	)

1018 #i‚de‡
PNG_sCAL_SUPPORTED


1019 
	#PNG_sCAL_SUPPORTED


	)

1022 #i‚de‡
PNG_NO_WRITE_pHYs


1023 
	#PNG_WRITE_pHYs_SUPPORTED


	)

1024 #i‚de‡
PNG_pHYs_SUPPORTED


1025 
	#PNG_pHYs_SUPPORTED


	)

1028 #i‚de‡
PNG_NO_WRITE_sBIT


1029 
	#PNG_WRITE_sBIT_SUPPORTED


	)

1030 #i‚de‡
PNG_sBIT_SUPPORTED


1031 
	#PNG_sBIT_SUPPORTED


	)

1034 #i‚de‡
PNG_NO_WRITE_sPLT


1035 
	#PNG_WRITE_sPLT_SUPPORTED


	)

1036 #i‚de‡
PNG_sPLT_SUPPORTED


1037 
	#PNG_sPLT_SUPPORTED


	)

1040 #i‚de‡
PNG_NO_WRITE_sRGB


1041 
	#PNG_WRITE_sRGB_SUPPORTED


	)

1042 #i‚de‡
PNG_sRGB_SUPPORTED


1043 
	#PNG_sRGB_SUPPORTED


	)

1046 #i‚de‡
PNG_NO_WRITE_tEXt


1047 
	#PNG_WRITE_tEXt_SUPPORTED


	)

1048 #i‚de‡
PNG_tEXt_SUPPORTED


1049 
	#PNG_tEXt_SUPPORTED


	)

1052 #i‚de‡
PNG_NO_WRITE_tIME


1053 
	#PNG_WRITE_tIME_SUPPORTED


	)

1054 #i‚de‡
PNG_tIME_SUPPORTED


1055 
	#PNG_tIME_SUPPORTED


	)

1058 #i‚de‡
PNG_NO_WRITE_tRNS


1059 
	#PNG_WRITE_tRNS_SUPPORTED


	)

1060 #i‚de‡
PNG_tRNS_SUPPORTED


1061 
	#PNG_tRNS_SUPPORTED


	)

1064 #i‚de‡
PNG_NO_WRITE_zTXt


1065 
	#PNG_WRITE_zTXt_SUPPORTED


	)

1066 #i‚de‡
PNG_zTXt_SUPPORTED


1067 
	#PNG_zTXt_SUPPORTED


	)

1070 #i‚de‡
PNG_NO_WRITE_UNKNOWN_CHUNKS


1071 
	#PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


	)

1072 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1073 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

1075 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


1076 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1077 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

1081 #i‡
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë|| deföed(
PNG_WRITE_tEXt_SUPPORTED
) || \

1082 
	$deföed
(
PNG_WRITE_zTXt_SUPPORTED
)

1083 
	#PNG_WRITE_TEXT_SUPPORTED


	)

1084 #i‚de‡
PNG_TEXT_SUPPORTED


1085 
	#PNG_TEXT_SUPPORTED


	)

1095 #i‚de‡
PNG_NO_INFO_IMAGE


1096 
	#PNG_INFO_IMAGE_SUPPORTED


	)

1100 #i‡
	`deföed
(
PNG_tIME_SUPPORTED
)

1101 #i‡!
	`deföed
(
_WIN32_WCE
)

1103 
	~<time.h
>

1116 
	t≤g_uöt_32
;

1117 
	t≤g_öt_32
;

1118 
	t≤g_uöt_16
;

1119 
	t≤g_öt_16
;

1120 
	t≤g_byã
;

1124 #ifde‡
PNG_SIZE_T


1125 
PNG_SIZE_T
 
	t≤g_size_t
;

1126 
	#≤g_sizeof
(
x
Ë
	`≤g_c⁄vît_size
( (x))

	)

1128 
size_t
 
	t≤g_size_t
;

1129 
	#≤g_sizeof
(
x
Ë (x)

	)

1143 #ifde‡
__BORLANDC__


1144 #i‡
	`deföed
(
__LARGE__
Ë|| deföed(
__HUGE__
Ë|| deföed(
__COMPACT__
)

1145 
	#LDATA
 1

	)

1147 
	#LDATA
 0

	)

1150 #i‡!
	`deföed
(
__WIN32__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__CYGWIN__
)

1151 
	#PNG_MAX_MALLOC_64K


	)

1152 #i‡(
LDATA
 != 1)

1153 #i‚de‡
FAR


1154 
	#FAR
 
__Ár


	)

1156 
	#USE_FAR_KEYWORD


	)

1173 #i‡
	`deföed
(
FAR
)

1174 #i‡
	`deföed
(
M_I86MM
)

1175 
	#USE_FAR_KEYWORD


	)

1176 
	#FARDATA
 
FAR


	)

1177 
	~<dos.h
>

1182 #i‚de‡
FAR


1183 
	#FAR


	)

1187 #i‚de‡
FARDATA


1188 
	#FARDATA


	)

1193 
≤g_öt_32
 
	t≤g_fixed_poöt
;

1196 
	tFAR
 * 
	t≤g_voidp
;

1197 
≤g_byã
 
	tFAR
 * 
	t≤g_byãp
;

1198 
≤g_uöt_32
 
	tFAR
 * 
	t≤g_uöt_32p
;

1199 
≤g_öt_32
 
	tFAR
 * 
	t≤g_öt_32p
;

1200 
≤g_uöt_16
 
	tFAR
 * 
	t≤g_uöt_16p
;

1201 
≤g_öt_16
 
	tFAR
 * 
	t≤g_öt_16p
;

1202 
PNG_CONST
 
	tFAR
 * 
	t≤g_c⁄°_ch¨p
;

1203 
	tFAR
 * 
	t≤g_ch¨p
;

1204 
≤g_fixed_poöt
 
	tFAR
 * 
	t≤g_fixed_poöt_p
;

1206 #i‚de‡
PNG_NO_STDIO


1207 #i‡
	`deföed
(
_WIN32_WCE
)

1208 
HANDLE
 
	t≤g_FILE_p
;

1210 
FILE
 * 
	t≤g_FILE_p
;

1214 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1215 
	tFAR
 * 
	t≤g_doubÀp
;

1219 
≤g_byã
 
	tFAR
 * FAR * 
	t≤g_byãµ
;

1220 
≤g_uöt_32
 
	tFAR
 * FAR * 
	t≤g_uöt_32µ
;

1221 
≤g_öt_32
 
	tFAR
 * FAR * 
	t≤g_öt_32µ
;

1222 
≤g_uöt_16
 
	tFAR
 * FAR * 
	t≤g_uöt_16µ
;

1223 
≤g_öt_16
 
	tFAR
 * FAR * 
	t≤g_öt_16µ
;

1224 
PNG_CONST
 
	tFAR
 * FAR * 
	t≤g_c⁄°_ch¨µ
;

1225 
	tFAR
 * FAR * 
	t≤g_ch¨µ
;

1226 
≤g_fixed_poöt
 
	tFAR
 * FAR * 
	t≤g_fixed_poöt_µ
;

1227 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1228 
	tFAR
 * FAR * 
	t≤g_doubÀµ
;

1232 
	tFAR
 * FAR * FAR * 
	t≤g_ch¨µp
;

1234 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed(
PNG_1_2_X
)

1241 
ch¨f
 * 
	t≤g_zch¨p
;

1242 
ch¨f
 * 
	tFAR
 * 
	t≤g_zch¨µ
;

1243 
z_°ªam
 
	tFAR
 * 
	t≤g_z°ªamp
;

1264 #i‡!
	`deföed
(
PNG_DLL
Ë&& (deföed(
PNG_BUILD_DLL
Ë|| deföed(
PNG_USE_DLL
))

1265 
	#PNG_DLL


	)

1271 #i‡
	`deföed
(
__CYGWIN__
)

1272 #i‡!
	`deföed
(
PNG_STATIC
)

1273 #i‡
	`deföed
(
PNG_USE_GLOBAL_ARRAYS
)

1274 #unde‡
PNG_USE_GLOBAL_ARRAYS


1276 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
)

1277 
	#PNG_USE_LOCAL_ARRAYS


	)

1280 #i‡
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë|| deföed(
PNG_NO_GLOBAL_ARRAYS
)

1281 #i‡
	`deföed
(
PNG_USE_GLOBAL_ARRAYS
)

1282 #unde‡
PNG_USE_GLOBAL_ARRAYS


1286 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1287 
	#PNG_USE_LOCAL_ARRAYS


	)

1295 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1296 #i‡
	`deföed
(
PNG_NO_GLOBAL_ARRAYS
) || \

1297 (
	`deföed
(
__GNUC__
Ë&& deföed(
PNG_DLL
)Ë|| 
	$deföed
(
_MSC_VER
)

1298 
	#PNG_USE_LOCAL_ARRAYS


	)

1300 
	#PNG_USE_GLOBAL_ARRAYS


	)

1304 #i‡
	`deföed
(
__CYGWIN__
)

1305 #unde‡
PNGAPI


1306 
	#PNGAPI
 
__cde˛


	)

1307 #unde‡
PNG_IMPEXP


1308 
	#PNG_IMPEXP


	)

1318 #i‡
	`deföed
(
__MINGW32__
Ë&& !deföed(
PNG_MODULEDEF
)

1319 #i‚de‡
PNG_NO_MODULEDEF


1320 
	#PNG_NO_MODULEDEF


	)

1324 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& deföed(
PNG_BUILD_DLL
Ë&& !deföed(
PNG_NO_MODULEDEF
)

1325 
	#PNG_IMPEXP


	)

1328 #i‡
	`deföed
(
PNG_DLL
Ë|| deföed(
_DLL
Ë|| deföed(
__DLL__
 ) || \

1329 (–
	`deföed
(
_Wödows
Ë|| deföed(
_WINDOWS
) || \

1330 
	`deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
) ))

1332 #i‚de‡
PNGAPI


1333 #i‡
	`deföed
(
__GNUC__
Ë|| (deföed (
_MSC_VER
) && (_MSC_VER >= 800))

1334 
	#PNGAPI
 
__cde˛


	)

1336 
	#PNGAPI
 
_cde˛


	)

1340 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& (!deföed(
PNG_DLL
) || \

1342 
	#PNG_IMPEXP


	)

1345 #i‡!
	`deföed
(
PNG_IMPEXP
)

1347 
	#PNG_EXPORT_TYPE1
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1348 
	#PNG_EXPORT_TYPE2
(
ty≥
,
symbﬁ
Ëty≥ 
PNG_IMPEXP
 
PNGAPI
 
	)
symbol

1351 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

1352 #i‡(
_MSC_VER
 >800Ë|| (
__BORLANDC__
 >= 0x500)

1353 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE1


	)

1355 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE2


	)

1356 #i‡
	`deföed
(
PNG_BUILD_DLL
)

1357 
	#PNG_IMPEXP
 
__exp‹t


	)

1359 
	#PNG_IMPEXP


	)

1362 
C
++ 
	`˛as£s
 (=
huge
) */

1366 #i‡!
	`deföed
(
PNG_IMPEXP
)

1367 #i‡
	`deföed
(
PNG_BUILD_DLL
)

1368 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

1370 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

1375 #i‡(
	`deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)Ë&& deföed(
__OS2__
)

1376 #i‚de‡
PNGAPI


1377 
	#PNGAPI
 
_Sy°em


	)

1385 #i‚de‡
PNGAPI


1386 
	#PNGAPI


	)

1388 #i‚de‡
PNG_IMPEXP


1389 
	#PNG_IMPEXP


	)

1392 #ifde‡
PNG_BUILDSYMS


1393 #i‚de‡
PNG_EXPORT


1394 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_FUNCTION_EXPORT
 symbﬁ 
END


	)

1396 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1397 #i‚de‡
PNG_EXPORT_VAR


1398 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_DATA_EXPORT


	)

1403 #i‚de‡
PNG_EXPORT


1404 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1407 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1408 #i‚de‡
PNG_EXPORT_VAR


1409 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_IMPEXP
 
	)
type

1417 #i‚de‡
PNG_ABORT


1418 
	#PNG_ABORT
(Ë
	`ab‹t
()

	)

1421 #ifde‡
PNG_SETJMP_SUPPORTED


1422 
	#≤g_jmpbuf
(
≤g_±r
Ë(’ng_±r)->
jmpbuf
)

	)

1424 
	#≤g_jmpbuf
(
≤g_±r
) \

1425 (
LIBPNG_WAS_COMPILED_WITH__PNG_SETJMP_NOT_SUPPORTED
)

	)

1428 #i‡
	`deföed
(
USE_FAR_KEYWORD
)

1430 
	#CHECK
 1

	)

1431 
	#NOCHECK
 0

	)

1432 
	#CVT_PTR
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
CHECK
))

	)

1433 
	#CVT_PTR_NOCHECK
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
NOCHECK
))

	)

1434 
	#≤g_¢¥ötf
 
_f¢¥ötf


	)

1435 
	#≤g_°æí
 
_f°æí


	)

1436 
	#≤g_memcmp
 
_fmemcmp


	)

1437 
	#≤g_mem˝y
 
_fmem˝y


	)

1438 
	#≤g_mem£t
 
_fmem£t


	)

1440 
	#CVT_PTR
(
±r
Ë’å)

	)

1441 
	#CVT_PTR_NOCHECK
(
±r
Ë’å)

	)

1442 #i‚de‡
PNG_NO_SNPRINTF


1443 #ifde‡
_MSC_VER


1444 
	#≤g_¢¥ötf
 
_¢¥ötf


	)

1445 
	#≤g_¢¥ötf2
 
_¢¥ötf


	)

1446 
	#≤g_¢¥ötf6
 
_¢¥ötf


	)

1448 
	#≤g_¢¥ötf
 
¢¥ötf


	)

1449 
	#≤g_¢¥ötf2
 
¢¥ötf


	)

1450 
	#≤g_¢¥ötf6
 
¢¥ötf


	)

1458 
	#≤g_¢¥ötf
(
s1
,
n
,
fmt
,
x1
Ë
	`•rötf
(s1,fmt,x1)

	)

1459 
	#≤g_¢¥ötf2
(
s1
,
n
,
fmt
,
x1
,
x2
Ë
	`•rötf
(s1,fmt,x1,x2)

	)

1460 
	#≤g_¢¥ötf6
(
s1
,
n
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
) \

1461 
	`•rötf
(
s1
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
)

	)

1463 
	#≤g_°æí
 
°æí


	)

1464 
	#≤g_memcmp
 
memcmp


	)

1465 
	#≤g_mem˝y
 
mem˝y


	)

1466 
	#≤g_mem£t
 
mem£t


	)

1473 #i‡(
PNG_ZBUF_SIZE
 > 65536LË&& 
	`deföed
(
PNG_MAX_MALLOC_64K
)

1474 #unde‡
PNG_ZBUF_SIZE


1475 
	#PNG_ZBUF_SIZE
 65536L

	)

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_GNU


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#com¥ess
 
z_com¥ess


	)

30 
	#com¥ess2
 
z_com¥ess2


	)

31 
	#com¥essBound
 
z_com¥essBound


	)

32 
	#¸c32
 
z_¸c32


	)

33 
	#¸c32_comböe
 
z_¸c32_comböe


	)

34 
	#deÊ©e
 
z_deÊ©e


	)

35 
	#deÊ©eBound
 
z_deÊ©eBound


	)

36 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

37 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

38 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

39 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

40 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

41 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

42 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

43 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

44 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

45 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

46 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

47 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

48 
	#gz˛óªº
 
z_gz˛óªº


	)

49 
	#gz˛o£
 
z_gz˛o£


	)

50 
	#gzdúe˘
 
z_gzdúe˘


	)

51 
	#gzd›í
 
z_gzd›í


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzîr‹
 
z_gzîr‹


	)

54 
	#gzÊush
 
z_gzÊush


	)

55 
	#gzgëc
 
z_gzgëc


	)

56 
	#gzgës
 
z_gzgës


	)

57 
	#gz›í
 
z_gz›í


	)

58 
	#gz¥ötf
 
z_gz¥ötf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzªad
 
z_gzªad


	)

62 
	#gzªwöd
 
z_gzªwöd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

65 
	#gzãŒ
 
z_gzãŒ


	)

66 
	#gzungëc
 
z_gzungëc


	)

67 
	#gzwrôe
 
z_gzwrôe


	)

68 
	#öÊ©e
 
z_öÊ©e


	)

69 
	#öÊ©eBack
 
z_öÊ©eBack


	)

70 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

71 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

72 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

73 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

74 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

75 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

78 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

79 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

80 
	#öÊ©eSync
 
z_öÊ©eSync


	)

81 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

82 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

83 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

84 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

85 
	#uncom¥ess
 
z_uncom¥ess


	)

86 
	#zEº‹
 
z_zEº‹


	)

87 
	#z_îrmsg
 
z_z_îrmsg


	)

88 
	#zˇŒoc
 
z_zˇŒoc


	)

89 
	#zc‰ì
 
z_zc‰ì


	)

90 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

91 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

94 
	#Byã
 
z_Byã


	)

95 
	#Byãf
 
z_Byãf


	)

96 
	#Æloc_func
 
z_Æloc_func


	)

97 
	#ch¨f
 
z_ch¨f


	)

98 
	#‰ì_func
 
z_‰ì_func


	)

99 
	#gzFûe
 
z_gzFûe


	)

100 
	#gz_hódî
 
z_gz_hódî


	)

101 
	#gz_hódîp
 
z_gz_hódîp


	)

102 
	#ö_func
 
z_ö_func


	)

103 
	#ötf
 
z_ötf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uI¡
 
z_uI¡


	)

106 
	#uI¡f
 
z_uI¡f


	)

107 
	#uL⁄g
 
z_uL⁄g


	)

108 
	#uL⁄gf
 
z_uL⁄gf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°ªam
 
z_z_°ªam


	)

116 
	#z_°ªamp
 
z_z_°ªamp


	)

119 
	#gz_hódî_s
 
z_gz_hódî_s


	)

120 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

121 
	#z_°ªam_s
 
z_z_°ªam_s


	)

125 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

126 
	#MSDOS


	)

128 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

129 
	#OS2


	)

131 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

135 #i‚de‡
WIN32


136 
	#WIN32


	)

139 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

140 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

141 #i‚de‡
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifde‡
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifde‡
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifde‡
__STDC_VERSION__


159 #i‚de‡
STDC


160 
	#STDC


	)

162 #i‡
__STDC_VERSION__
 >= 199901L

163 #i‚de‡
STDC99


164 
	#STDC99


	)

168 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

169 
	#STDC


	)

171 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

172 
	#STDC


	)

174 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

175 
	#STDC


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

182 
	#STDC


	)

185 #i‚de‡
STDC


187 c⁄°

	)

192 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #i‚de‡
MAX_MEM_LEVEL


198 #ifde‡
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #i‚de‡
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #i‚de‡
OF


230 #ifde‡
STDC


231 
	#OF
(
¨gs
Ë
	)
args

233 
	#OF
(
¨gs
Ë()

	)

243 #ifde‡
SYS16BIT


244 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifde‡
_MSC_VER


248 
	#FAR
 
_Ár


	)

250 
	#FAR
 
Ár


	)

253 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
__BORLANDC__


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

264 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

268 #ifde‡
ZLIB_DLL


269 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifde‡
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

281 #ifde‡
ZLIB_WINAPI


282 #ifde‡
FAR


283 #unde‡
FAR


285 
	~<wödows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifde‡
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #i‡
deföed
 (
__BEOS__
)

298 #ifde‡
ZLIB_DLL


299 #ifde‡
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

301 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

303 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

304 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

309 #ifde‡
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…"))Ë

	)

313 #i‚de‡
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #i‚de‡
ZEXPORT


317 
	#ZEXPORT


	)

319 #i‚de‡
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #i‚de‡
FAR


324 
	#FAR


	)

327 #i‡!
deföed
(
__MACTYPES__
)

328 
	tByã
;

330 
	tuI¡
;

331 
	tuL⁄g
;

333 #ifde‡
SMALL_MEDIUM


335 
	#Byãf
 
Byã
 
FAR


	)

337 
Byã
 
	tFAR
 
	tByãf
;

339 
	tFAR
 
	tch¨f
;

340 
	tFAR
 
	tötf
;

341 
uI¡
 
	tFAR
 
	tuI¡f
;

342 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

344 #ifde‡
STDC


345 c⁄° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
Byã
 c⁄° *
	tvoidpc
;

350 
Byã
 
	tFAR
 *
	tvoidpf
;

351 
Byã
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifde‡
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #i‚de‡
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #i‚de‡
z_off_t


366 
	#z_off_t
 

	)

369 #i‡
deföed
(
__OS400__
)

370 
	#NO_v¢¥ötf


	)

373 #i‡
deföed
(
__MVS__
)

374 
	#NO_v¢¥ötf


	)

378 #i‡
deföed
(
__MVS__
)

379 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

380 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

381 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

382 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

383 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

384 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

385 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

386 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

387 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

388 #¥agm®
m≠
(
com¥essBound
,"CMBND")

389 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

390 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

391 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 #i‚de‡
__ASSEMBLY__


17 
__sig√d__
 
	t__s8
;

18 
	t__u8
;

20 
__sig√d__
 
	t__s16
;

21 
	t__u16
;

23 
__sig√d__
 
	t__s32
;

24 
	t__u32
;

26 #ifde‡
__GNUC__


27 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

28 
__exãnsi⁄__
 
	t__u64
;

30 
__sig√d__
 
	t__s64
;

31 
	t__u64
;

	@/usr/include/asm/ioctls.h

1 #i‚de‡
_ASM_X86_IOCTLS_H


2 
	#_ASM_X86_IOCTLS_H


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

51 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

52 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

53 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

54 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, )

	)

56 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

58 
	#FIONCLEX
 0x5450

	)

59 
	#FIOCLEX
 0x5451

	)

60 
	#FIOASYNC
 0x5452

	)

61 
	#TIOCSERCONFIG
 0x5453

	)

62 
	#TIOCSERGWILD
 0x5454

	)

63 
	#TIOCSERSWILD
 0x5455

	)

64 
	#TIOCGLCKTRMIOS
 0x5456

	)

65 
	#TIOCSLCKTRMIOS
 0x5457

	)

66 
	#TIOCSERGSTRUCT
 0x5458

	)

67 
	#TIOCSERGETLSR
 0x5459

	)

68 
	#TIOCSERGETMULTI
 0x545A

	)

69 
	#TIOCSERSETMULTI
 0x545B

	)

71 
	#TIOCMIWAIT
 0x545C

	)

72 
	#TIOCGICOUNT
 0x545D

	)

73 
	#TIOCGHAYESESP
 0x545E

	)

74 
	#TIOCSHAYESESP
 0x545F

	)

75 
	#FIOQSIZE
 0x5460

	)

78 
	#TIOCPKT_DATA
 0

	)

79 
	#TIOCPKT_FLUSHREAD
 1

	)

80 
	#TIOCPKT_FLUSHWRITE
 2

	)

81 
	#TIOCPKT_STOP
 4

	)

82 
	#TIOCPKT_START
 8

	)

83 
	#TIOCPKT_NOSTOP
 16

	)

84 
	#TIOCPKT_DOSTOP
 32

	)

86 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__¨r
->
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] |
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

144 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 < 8 * (
£tsize
) \

148 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] &~
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

149 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] & 
	`__CPUMASK
 (__cpu))) != 0 \

154 : 0; }))

	)

156 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

157 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

159 #i‡
__GNUC_PREREQ
 (2, 91)

160 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

161 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

163 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

164 (
__exãnsi⁄__
 \

165 ({ 
˝u_£t_t
 *
__¨r1
 = (
˝u£ç1
); \

166 
˝u_£t_t
 *
__¨r2
 = (
˝u£ç2
); \

167 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

168 
size_t
 
__i
; \

169 
__i
 = 0; __ò< 
__imax
; ++__i) \

170 i‡(
__¨r1
->
__bôs
[
__i
] !
__¨r2
->__bits[__i]) \

172 
__i
 =
__imax
; }))

	)

175 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

176 (
__exãnsi⁄__
 \

177 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

178 
˝u_£t_t
 *
__¨r1
 = (
§c£t1
); \

179 
˝u_£t_t
 *
__¨r2
 = (
§c£t2
); \

180 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

181 
size_t
 
__i
; \

182 
__i
 = 0; __ò< 
__imax
; ++__i) \

183 
__de°
->
__bôs
[
__i
] = 
__¨r1
->__bôs[__i] 
›
 
__¨r2
->__bits[__i]; \

184 
__de°
; }))

	)

186 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

187 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË* 8)

	)

188 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

189 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

191 
__BEGIN_DECLS


193 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

194 
__THROW
;

195 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

196 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

198 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/patchkey.h

13 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


17 #i‚de‡
_LINUX_PATCHKEY_H


18 
	#_LINUX_PATCHKEY_H


	)

21 
	~<ídün.h
>

23 #i‡ 
deföed
(
__BYTE_ORDER
)

24 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

26 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


27 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

103 
	#Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

104 
	#Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

112 #ifde‡
CONFIG_LBD


113 
u64
 
	t£˘‹_t
;

115 
	t£˘‹_t
;

121 #ifde‡
CONFIG_LSF


122 
u64
 
	tblk˙t_t
;

124 
	tblk˙t_t
;

131 #i‚de‡
pgoff_t


132 
	#pgoff_t
 

	)

142 #ifde‡
__CHECKER__


143 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

145 
	#__bôwi£__


	)

147 #ifde‡
__CHECK_ENDIAN__


148 
	#__bôwi£
 
__bôwi£__


	)

150 
	#__bôwi£


	)

153 
__u16
 
	t__bôwi£
 
	t__À16
;

154 
__u16
 
	t__bôwi£
 
	t__be16
;

155 
__u32
 
	t__bôwi£
 
	t__À32
;

156 
__u32
 
	t__bôwi£
 
	t__be32
;

157 #i‡
deföed
(
__GNUC__
)

158 
__u64
 
	t__bôwi£
 
	t__À64
;

159 
__u64
 
	t__bôwi£
 
	t__be64
;

161 
__u16
 
	t__bôwi£
 
	t__sum16
;

162 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	#__mÆloc_±r_t
 *

	)

29 
	#__mÆloc_size_t
 
size_t


	)

30 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

32 #ifde‡
__GNUC__


34 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

37 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

41 
	#__MALLOC_P
(
¨gs
Ë
	)
args

42 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

47 
__BEGIN_DECLS


50 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

53 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

54 
__©åibuã_mÆloc__
 
__wur
;

61 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

62 
__©åibuã_w¨n_unu£d_ªsu…__
;

65 
‰ì
 
__MALLOC_P
 ((*
__±r
));

68 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

71 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

72 
__©åibuã_mÆloc__
 
__wur
;

75 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

76 
__©åibuã_mÆloc__
 
__wur
;

80 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

81 
__©åibuã_mÆloc__
 
__wur
;

85 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

88 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

89 
__©åibuã_mÆloc__
;

93 
	smÆlöfo
 {

94 
	m¨ía
;

95 
	m‹dblks
;

96 
	msmblks
;

97 
	mhblks
;

98 
	mhblkhd
;

99 
	musmblks
;

100 
	mfsmblks
;

101 
	mu‹dblks
;

102 
	mf‹dblks
;

103 
	mkìpco°
;

107 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

110 #i‚de‡
M_MXFAST


111 
	#M_MXFAST
 1

	)

113 #i‚de‡
M_NLBLKS


114 
	#M_NLBLKS
 2

	)

116 #i‚de‡
M_GRAIN


117 
	#M_GRAIN
 3

	)

119 #i‚de‡
M_KEEP


120 
	#M_KEEP
 4

	)

124 
	#M_TRIM_THRESHOLD
 -1

	)

125 
	#M_TOP_PAD
 -2

	)

126 
	#M_MMAP_THRESHOLD
 -3

	)

127 
	#M_MMAP_MAX
 -4

	)

128 
	#M_CHECK_ACTION
 -5

	)

129 
	#M_PERTURB
 -6

	)

132 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

136 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

140 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

143 
mÆloc_°©s
 
__MALLOC_P
 (());

146 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

150 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

155 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

157 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

158 
__c⁄°
 
__mÆloc_±r_t
));

159 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

160 
__c⁄°
 
__mÆloc_±r_t
));

161 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

162 
__c⁄°
 
__mÆloc_±r_t
));

163 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

164 
size_t
 
__size
,

165 
__c⁄°
 
__mÆloc_±r_t
));

166 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

169 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

172 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

312 #i‡
__GNUC_PREREQ
 (4,3)

313 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

314 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

321 #i‡!
__GNUC_PREREQ
 (2,8)

322 
	#__exãnsi⁄__


	)

326 #i‡!
__GNUC_PREREQ
 (2,92)

327 
	#__ª°ri˘


	)

333 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


334 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

336 #ifde‡
__GNUC__


337 
	#__ª°ri˘_¨r


	)

339 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

340 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

343 
	#__ª°ri˘_¨r


	)

348 
	~<bôs/w‹dsize.h
>

350 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


351 
	#__LDBL_COMPAT
 1

	)

352 #ifde‡
__REDIRECT


353 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

354 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

355 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

356 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

357 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

358 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

359 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

360 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

361 
	#__LDBL_REDIR_DECL
(
«me
) \

362 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

363 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

364 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

365 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

366 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

369 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

372 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

373 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

374 
	#__LDBL_REDIR_DECL
(
«me
)

	)

375 #ifde‡
__REDIRECT


376 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

377 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

378 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifde‡
VMS


9 
	~<unixio.h
>

11 #i‚de‡
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

41 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


42 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


43 
±hªad_muãx_t
 
	t__libc_lock_t
;

44 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

46 
	t__libc_lock_t
;

47 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

49 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

50 #ifde‡
__USE_UNIX98


51 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_›aque__
 
	t__libc_lock_t
;

57 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

58 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

62 
±hªad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

77 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

89 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

90 #i‡
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #i‡
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

113 #i‡
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

117 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__πld_lock_öôülize
(
NAME
) \

135 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifde‡
__PIC__


143 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

145 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


153 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

154 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

156 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

157 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

159 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

160 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

161 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

162 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

163 
FUNC
 
ARGS


	)

169 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

170 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

172 
	#__libc_lock_öô
(
NAME
) \

173 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

175 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


178 
	#__libc_rwlock_öô
(
NAME
) \

179 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

181 
	#__libc_rwlock_öô
(
NAME
) \

182 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

186 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

187 
	#__libc_lock_öô_ªcursive
(
NAME
) \

188 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

190 
	#__libc_lock_öô_ªcursive
(
NAME
) \

192 i‡(
__±hªad_muãx_öô
 !
NULL
) \

194 
±hªad_muãx©å_t
 
__©å
; \

195 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

196 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

197 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

198 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

200 } 0)

	)

203 
	#__πld_lock_öô_ªcursive
(
NAME
) \

205 i‡(
__±hªad_muãx_öô
 !
NULL
) \

207 
±hªad_muãx©å_t
 
__©å
; \

208 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

209 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

210 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

211 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

213 } 0)

	)

218 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

219 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

221 
	#__libc_lock_föi
(
NAME
) \

222 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

224 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


225 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

227 
	#__libc_rwlock_föi
(
NAME
) \

228 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

232 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

233 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

235 
	#__libc_lock_föi_ªcursive
(
NAME
) \

236 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

240 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

241 
	#__libc_lock_lock
(
NAME
) \

242 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

244 
	#__libc_lock_lock
(
NAME
) \

245 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

247 
	#__libc_rwlock_rdlock
(
NAME
) \

248 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

249 
	#__libc_rwlock_wæock
(
NAME
) \

250 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

253 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

254 
	#__libc_lock_lock_ªcursive
(
NAME
) \

256 *
£lf
 = 
THREAD_SELF
; \

257 i‡((
NAME
).
ow√r
 !
£lf
) \

259 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

260 (
NAME
).
ow√r
 = 
£lf
; \

262 ++(
NAME
).
˙t
; \

263 } 0)

	)

265 
	#__libc_lock_lock_ªcursive
(
NAME
) \

266 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

270 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

271 
	#__libc_lock_åylock
(
NAME
) \

272 
	`Œl_åylock
 (
NAME
)

	)

274 
	#__libc_lock_åylock
(
NAME
) \

275 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

277 
	#__libc_rwlock_åyrdlock
(
NAME
) \

278 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

279 
	#__libc_rwlock_åywæock
(
NAME
) \

280 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

283 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

284 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

286 
ªsu…
 = 0; \

287 *
£lf
 = 
THREAD_SELF
; \

288 i‡((
NAME
).
ow√r
 !
£lf
) \

290 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

292 (
NAME
).
ow√r
 = 
£lf
; \

293 (
NAME
).
˙t
 = 1; \

296 
ªsu…
 = 
EBUSY
; \

299 ++(
NAME
).
˙t
; \

300 
ªsu…
; \

301 })

	)

303 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

304 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

307 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

308 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

311 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

312 
	#__libc_lock_u∆ock
(
NAME
) \

313 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

315 
	#__libc_lock_u∆ock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

318 
	#__libc_rwlock_u∆ock
(
NAME
) \

319 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

322 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

324 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

326 i‡(--(
NAME
).
˙t
 == 0) \

328 (
NAME
).
ow√r
 = 
NULL
; \

329 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

331 } 0)

	)

333 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

334 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

337 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


338 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

339 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

341 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

342 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

344 
	#__πld_lock_lock_ªcursive
(
NAME
) \

345 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

347 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

348 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

350 
	#__πld_lock_lock_ªcursive
(
NAME
) \

351 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

353 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

358 #i‡
PTHREAD_ONCE_INIT
 == 0

361 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

362 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

364 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

365 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

369 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

371 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

372 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

373 
INIT_FUNCTION
)); \

374 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

375 
	`INIT_FUNCTION
 (); \

376 (
ONCE_CONTROL
) |= 2; \

378 } 0)

	)

385 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

386 (*
routöe
Ë(*), *
¨g
);

387 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

388 
execuã
);

389 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

390 (*
routöe
Ë(*), *
¨g
);

391 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

392 
execuã
);

395 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

396 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

397 
_avaû
; \

398 i‡(
DOIT
) { \

399 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

400 i‡(
_avaû
) { \

401 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

402 
ARG
)); \

404 
_buf„r
.
__routöe
 = (
FCT
); \

405 
_buf„r
.
__¨g
 = (
ARG
); \

408 
_avaû
 = 0; \

409 }

	)

412 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

413 i‡(
_avaû
) { \

414 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

415 } i‡(
DOIT
) \

416 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

417 
	}

	)
}

420 
	#__libc_˛ónup_íd
(
DOIT
) \

421 i‡(
_avaû
) { \

422 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

423 } i‡(
DOIT
) \

424 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

428 
__exã∫_ölöe
 

429 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

431 i‡(
f
->
__do_ô
)

432 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

433 
	}
}

435 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

437 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

438 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

439 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

440 .
__do_ô
 = 1 };

	)

442 
	#__libc_˛ónup_p›
(
execuã
) \

443 
__˛‰ame
.
__do_ô
 = (
execuã
); \

444 } 0)

	)

448 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

449 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

452 
	#__libc_gë•ecific
(
KEY
) \

453 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

456 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

457 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

463 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

464 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

465 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

466 (*
__∑ª¡
) (),

467 (*
__chûd
) (),

468 *
__dso_h™dÀ
);

473 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

474 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

476 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

478 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

480 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

482 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

484 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

486 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

488 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

489 
__köd
);

491 #ifde‡
__USE_UNIX98


492 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

493 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

495 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

497 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

499 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

501 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

503 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

505 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

508 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

509 (*
__de°r_fun˘i⁄
) (*));

511 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

512 
__c⁄°
 *
__poöãr
);

514 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

516 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

517 (*
__öô_routöe
) ());

519 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

520 (*
__∑ª¡
) (),

521 (*
__chûd
) ());

527 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


528 #ifde‡
wók_exã∫


529 #i‡
_LIBC


530 
	~<bp-sym.h
>

532 
	#BP_SYM
 (
sym
Ë
	)
sym

534 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

535 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

536 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

537 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

538 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

539 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

540 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

541 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

542 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

543 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

544 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

545 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

546 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

547 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

548 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

549 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

550 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

551 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

552 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

553 
	$wók_exã∫
 (
__±hªad_öôülize
)

554 
	$wók_exã∫
 (
__±hªad_©f‹k
)

555 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

556 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

557 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

559 #¥agm®
wók
 
__±hªad_muãx_öô


560 #¥agm®
wók
 
__±hªad_muãx_de°roy


561 #¥agm®
wók
 
__±hªad_muãx_lock


562 #¥agm®
wók
 
__±hªad_muãx_åylock


563 #¥agm®
wók
 
__±hªad_muãx_u∆ock


564 #¥agm®
wók
 
__±hªad_muãx©å_öô


565 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


566 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


567 #¥agm®
wók
 
__±hªad_rwlock_de°roy


568 #¥agm®
wók
 
__±hªad_rwlock_rdlock


569 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


570 #¥agm®
wók
 
__±hªad_rwlock_wæock


571 #¥agm®
wók
 
__±hªad_rwlock_åywæock


572 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


573 #¥agm®
wók
 
__±hªad_key_¸óã


574 #¥agm®
wók
 
__±hªad_£t•ecific


575 #¥agm®
wók
 
__±hªad_gë•ecific


576 #¥agm®
wók
 
__±hªad_⁄˚


577 #¥agm®
wók
 
__±hªad_öôülize


578 #¥agm®
wók
 
__±hªad_©f‹k


579 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


580 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


581 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
267
4957
2xsaiwin.cpp
3d.h
65c816.h
DSP1EMU.C
SDD1.H
VOIMAGE.H
apu.cpp
apu.h
apumem.h
asmmemfuncs.h
blitter example code.c
c4.cpp
c4.h
c4emu.cpp
cheats.cpp
cheats.h
cheats2.cpp
clip.cpp
copyright.h
cpu.cpp
cpuaddr.h
cpuexec.cpp
cpuexec.h
crypt.h
data.cpp
debug.h
display.h
dma.cpp
dma.h
dsp1.cpp
dsp1.h
dsp1_gp32.h
dsp1emu_fixed.c
dsp1emu_yo.c
dsp2emu.c
font.h
frame_skip.cpp
frame_skip.h
fxdbg.cpp
fxemu.cpp
fxemu.h
fxinst.cpp
fxinst.h
gammatab.h
getset.h
gfx.cpp
gfx.h
gfx_org.cpp
giz_kgsdk.c
giz_kgsdk.h
giz_sdk.cpp
giz_sdk.h
giz_sdk_kgsdk.c
giz_sdk_kgsdk.h
globals.cpp
gp2x_highlightbar.c
gp2x_menu_header.c
gp2x_menutile.c
gp2x_sdk.c
gp2x_sdk.h
gp32_func.h
gx.h
imgdecmp.h
imgrendr.h
input.c
ioapi.c
ioapi.h
keycodes.h
language.h
loadzip.cpp
main.cpp
memmap.cpp
memmap.h
menu.cpp
menu.h
messages.h
missing.h
mmuhack.c
movie.cpp
movie.h
netplay.h
newres.h
os9x_65c816_def.h
os9x_65c816_mac_gen.h
os9x_65c816_mac_mem.h
os9x_65c816_mac_op.h
os9x_asm_cpu.cpp
os9x_asm_cpu.h
pixform.h
port.h
ppu.cpp
ppu.h
ppu_.cpp
resource.h
sa1.cpp
sa1.h
sar.h
screenshot.cpp
screenshot.h
sdd1.cpp
sdd1emu.cpp
sdd1emu.h
seta.cpp
seta.h
seta010.cpp
seta011.cpp
seta018.cpp
snaporig.cpp
snaporig.h
snapshot.cpp
snapshot.h
snes9x.cpp
snes9x.h
soundux.cpp
soundux.h
sounduxnew.cpp
sounduxnew.h
spc700.cpp
spc700.h
spc700/spcgen.c
squidgehack.c
squidgehack.h
srtc.cpp
srtc.h
tile.cpp
tile.h
tile_org.cpp
tile_org.h
unzip.c
unzip.h
usbjoy.c
usbjoy.h
zip.c
zip.h
/usr/include/GL/gl.h
/usr/include/GL/glu.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/linux/fb.h
/usr/include/linux/joystick.h
/usr/include/math.h
/usr/include/png.h
/usr/include/pthread.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/stropts.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/soundcard.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/wchar.h
/usr/include/zlib.h
/usr/include/GL/glext.h
/usr/include/alloca.h
/usr/include/asm/types.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/stropts.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/bits/xtitypes.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/i2c.h
/usr/include/linux/input.h
/usr/include/linux/soundcard.h
/usr/include/pngconf.h
/usr/include/sched.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/wctype.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctls.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/inttypes.h
/usr/include/linux/errno.h
/usr/include/linux/ioctl.h
/usr/include/linux/patchkey.h
/usr/include/linux/types.h
/usr/include/malloc.h
/usr/include/sys/cdefs.h
/usr/include/zlibdefs.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/errno-base.h
